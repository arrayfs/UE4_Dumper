Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24, Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28, Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c, Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30, Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34, Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38, Size: 4]
	Object*[] ExtraReferencedObjects;//[Offset: 0x3c, Size: 12]
	Object*[] PerModuleDataObjects;//[Offset: 0x48, Size: 12]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x54, Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60, Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c, Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74, Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78, Size: 4]
	WorldRegionManager RegionManager;//[Offset: 0x118, Size: 388]
	WorldParallelismManager ParallelismManager;//[Offset: 0x29c, Size: 180]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x350, Size: 4]
	Actor*[] ActiveLevelActors;//[Offset: 0x37c, Size: 12]
	NavigationSystem* NavigationSystem;//[Offset: 0x388, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x38c, Size: 4]
	GameStateBase* GameState;//[Offset: 0x390, Size: 4]
	AISystemBase* AISystem;//[Offset: 0x394, Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x398, Size: 4]
	Level*[] Levels;//[Offset: 0x39c, Size: 12]
	LevelCollection[] LevelCollections;//[Offset: 0x3a8, Size: 12]
	Level* CurrentLevel;//[Offset: 0x3b8, Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x3bc, Size: 4]
	bool bSupportParallelWorlds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x3c4, Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x3d0, Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x3d4, Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0xa0c, Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa56, Size: 1]

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x46f6b154

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88, Size: 4]
	Model* Model;//[Offset: 0x8c, Size: 4]
	ModelComponent*[] ModelComponents;//[Offset: 0x90, Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c, Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0, Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4, Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8, Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac, Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0, Size: 4]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0xb4, Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0, Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4, Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8, Size: 12]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4, Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x164, Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x174, Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x178, Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x184, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x184, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x184, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x1c8, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x1d0, Size: 12]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x55c, Size: 4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x244, Size: 4]
	float MinDrawDistance;//[Offset: 0x248, Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x24c, Size: 4]
	bool bUseAsPVSOC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool bUsePVSOC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 1]
	float CachedMaxDrawDistance;//[Offset: 0x254, Size: 4]
	byte DepthPriorityGroup;//[Offset: 0x258, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x259, Size: 1]
	enum LightmapType;//[Offset: 0x25a, Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25c, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25c, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25c, Size: 1]
	bool bUpdateOverlapEventsWhenMove;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25c, Size: 1]
	bool bUseSingleSweep;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25c, Size: 1]
	enum OverrideQueryMobilityType;//[Offset: 0x25d, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25e, Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25e, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25e, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25e, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25e, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25e, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25e, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25e, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25f, Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25f, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25f, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25f, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25f, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25f, Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x25f, Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x25f, Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x260, Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x270, Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x274, Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 1]
	enum DrawDyeingMode;//[Offset: 0x279, Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x27c, Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x28c, Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29c, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29c, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x29c, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x29c, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x29c, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x29c, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29d, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29d, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29d, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29d, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x29d, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x29d, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x29d, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x29d, Size: 1]
	bool bNearCascade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29e, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29e, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29e, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29e, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x29e, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x29e, Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x29e, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x29e, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29f, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29f, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29f, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29f, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x29f, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x29f, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x29f, Size: 1]
	bool bUpdateTransformUseTeleportPhysics;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x29f, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2a1, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x2a3, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2a4, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2a5, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x2a8, Size: 4]
	int TranslucencySortPriority;//[Offset: 0x2ac, Size: 4]
	int VisibilityId;//[Offset: 0x2b0, Size: 4]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x2bc, Size: 4]
	float BoundsScale;//[Offset: 0x2c4, Size: 4]
	float OCBoundsScale;//[Offset: 0x2c8, Size: 4]
	int OCBoundsExtent;//[Offset: 0x2cc, Size: 4]
	float LastSubmitTime;//[Offset: 0x2d0, Size: 4]
	float LastRenderTime;//[Offset: 0x2d4, Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x2d8, Size: 4]
	Actor*[] MoveIgnoreActors;//[Offset: 0x2dc, Size: 12]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2e8, Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x308, Size: 336]
	delegate OnComponentHit;//[Offset: 0x458, Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x464, Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x470, Size: 12]
	delegate OnComponentWake;//[Offset: 0x47c, Size: 12]
	delegate OnComponentSleep;//[Offset: 0x488, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x4a0, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x4ac, Size: 12]
	delegate OnClicked;//[Offset: 0x4b8, Size: 12]
	delegate OnReleased;//[Offset: 0x4c4, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x4d0, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x4dc, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x4e8, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x4f4, Size: 12]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x50c, Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x510, Size: 60]
	bool bIgnoreOtherCanBeOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	void WakeRigidBody(FName BoneName);// 0x4a42cd8
	void WakeAllRigidBodies();// 0x245bdf0
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x4a42c40
	void SetVisibleDyeingColor(out const LinearColor InColor);// 0x4a42bbc
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x4a42b44
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x4a42ac4
	void SetSimulatePhysics(bool bSimulate);// 0x4a42a3c
	void SetRenderInMono(bool bValue);// 0x4a429bc
	void SetRenderInMainPass(bool bValue);// 0x4a4293c
	void SetRenderCustomDepth(bool bValue);// 0x4a428bc
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x4a4283c
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x4a427bc
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4a426a8
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4a42584
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4a42584
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x4a42460
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4a4233c
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4a421f4
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4a421f4
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x4a42174
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x4a420f4
	void SetOccludedDyeingColor(out const LinearColor InColor);// 0x4a42070
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x4a41fe8
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x4a41f24
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x4a41e60
	void SetMassScale(FName BoneName, float InMassScale);// 0x4a41d94
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x4a41c78
	void SetLockedAxis(byte LockedAxis);// 0x4a41bf8
	void SetLinearDamping(float InDamping);// 0x25f2408
	void SetEnableGravity(bool bGravityEnabled);// 0x4a41b70
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x4a41af0
	void SetDrawDyeingMode(enum InDrawDyeingMode);// 0x4a41a78
	void SetDrawDyeing(bool bNewDrawOutline);// 0x4a419f8
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x4a41980
	void SetCustomDepthStencilValue(int Value);// 0x4a41908
	void SetCullDistance(float NewCullDistance);// 0x4a41890
	void SetConstraintMode(byte ConstraintMode);// 0x4a41810
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x4a4174c
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x4a416cc
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x4a4164c
	void SetCollisionObjectType(byte Channel);// 0x4a415cc
	void SetCollisionEnabled(byte NewType);// 0x4a4154c
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x4a4147c
	void SetCastShadow(bool NewCastShadow);// 0x4a413fc
	void SetBoundsScale(float NewBoundsScale);// 0x4a41384
	void SetAngularDamping(float InDamping);// 0x4a22d58
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x4a412a8
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x4a411c0
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x4a410ac
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x4a40fc4
	void SetAllMassScale(float InMassScale);// 0x4a40f44
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x4a40e48
	void PutRigidBodyToSleep(FName BoneName);// 0x4a40dd0
	void OverrideIdeaOutlineThickness(bool bOverride, const float InThickness);// 0x4a40d08
	void OverrideIdeaOutlineColor(bool bOverride, out const LinearColor InOutlineColor);// 0x4a40c34
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4a4090c
	bool K2_IsQueryCollisionEnabled();// 0x4a408cc
	bool K2_IsPhysicsCollisionEnabled();// 0x4a4088c
	bool K2_IsCollisionEnabled();// 0x4a40854
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x4a407d4
	bool IsOverlappingActor(const Actor* Other);// 0x4a40754
	bool IsGravityEnabled();// 0x4a40724
	bool IsAnyRigidBodyAwake();// 0x26e2538
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x4a40660
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x4a4059c
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x4a40560
	PhysicalMaterial* GetPhysMaterial(int Item);// 0x4a404d8
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x4a403e4
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x4a40350
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x4a402bc
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x4a40210
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x4a40210
	void GetOverlappingComponents(out PrimitiveComponent*[] InOverlappingComponents);// 0x4a40170
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4a40088
	int GetNumMaterials();// 0x24531fc
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x4a3ffac
	MaterialInterface* GetMaterial(int ElementIndex);// 0x4a3ff24
	float GetMassScale(FName BoneName);// 0x4a3fe9c
	float GetMass();// 0x4a3fe6c
	float GetLinearDamping();// 0x4a3fe3c
	Vector GetInertiaTensor(FName BoneName);// 0x4a3fda0
	byte GetCollisionResponseToChannel(byte Channel);// 0x4a3fd18
	FName GetCollisionProfileName();// 0x4a3fcd8
	byte GetCollisionObjectType();// 0x4a3fca8
	byte GetCollisionEnabled();// 0x4a3fc78
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x4a3fb30
	Vector GetCenterOfMass(FName BoneName);// 0x4a3fa9c
	float GetAngularDamping();// 0x4a3fa6c
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial);// 0x4a3f9a0
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x4a3f8d4
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x4a3f84c
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x4a3f7b8
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x4a3f724
	void ClearMoveIgnoreComponents();// 0x4a3f6f4
	void ClearMoveIgnoreActors();// 0x4a3f6e0
	bool CanCharacterStepUp(Pawn* Pawn);// 0x4a3f658
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x4a3f3f4
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x4a3f514
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x4a3f3f4
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x4a3f240
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x4a3f08c
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x4a3ef54
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4a3ee2c
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x4a3ecf4
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x4a3ebbc
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x4a3ea94
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x4a3e96c
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x4a3e820
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4a3e6f8

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xd4, Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xdc, Size: 4]
	FName AttachSocketName;//[Offset: 0xe0, Size: 8]
	SceneComponent*[] AttachChildren;//[Offset: 0xe8, Size: 12]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xf4, Size: 12]
	Vector RelativeLocation;//[Offset: 0x128, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x134, Size: 12]
	Vector RelativeScale3D;//[Offset: 0x140, Size: 12]
	Vector ComponentVelocity;//[Offset: 0x1b0, Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bc, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1bc, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1bc, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1bc, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1bc, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1bc, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bd, Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bd, Size: 1]
	bool bForceUpdateChildCompTransform;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bd, Size: 1]
	bool bEnableUpdateTransformOption;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1bd, Size: 1]
	byte Mobility;//[Offset: 0x1bf, Size: 1]
	byte DetailMode;//[Offset: 0x1c0, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x210, Size: 12]
	enum UpdateTransformOption;//[Offset: 0x23c, Size: 1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x4a53dd0
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x4a53d0c
	void SetWorldScale3D(Vector NewScale);// 0x4a53c8c
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren, bool bForceNoPropagate);// 0x4a53b54
	void SetRelativeScale3D(Vector NewScale3D);// 0x27a7770
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x4a53a80
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x4a53960
	void ResetRelativeTransform();// 0x4a5394c
	void OnRep_Visibility(bool OldValue);// 0x4a538cc
	void OnRep_Transform();// 0x4a538b8
	void OnRep_AttachSocketName();// 0x4a538a4
	void OnRep_AttachParent();// 0x4a538a4
	void OnRep_AttachChildren();// 0x4a53890
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a536b0
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a53528
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a5335c
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a531d0
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a52ff0
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a52e6c
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a52ca0
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a52b14
	void K2_SetMobility(byte NewMobility);// 0x4a52a9c
	Transform K2_GetComponentToWorld();// 0x4a52a3c
	Vector K2_GetComponentScale();// 0x4a529f4
	Rotator K2_GetComponentRotation();// 0x4a529ac
	Vector K2_GetComponentLocation();// 0x4a52964
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x4a52814
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4a5262c
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x4a524d0
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a522f0
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a52174
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a51fe8
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a51e6c
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a51ce0
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a51b00
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a51980
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4a517f4
	bool IsVisible();// 0x27321bc
	bool IsSimulatingPhysics(FName BoneName);// 0x4a5176c
	bool IsAnySimulatingPhysics();// 0x27ca244
	Vector GetUpVector();// 0x4a51724
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x4a51628
	Rotator GetSocketRotation(FName InSocketName);// 0x4a5158c
	Quat GetSocketQuaternion(FName InSocketName);// 0x4a514f0
	Vector GetSocketLocation(FName InSocketName);// 0x4a51454
	Vector GetRightVector();// 0x4a5140c
	Transform GetRelativeTransform();// 0x4a513ac
	PhysicsVolume* GetPhysicsVolume();// 0x4a51384
	void GetParentComponents(out SceneComponent*[] Parents);// 0x4a512e4
	int GetNumChildrenComponents();// 0x4a512bc
	Vector GetForwardVector();// 0x4a29d88
	Vector GetComponentVelocity();// 0x4a5126c
	Transform GetComponentTransformViewTranslatedBP();// 0x4a51230
	Transform GetComponentLocal(out const Transform LocalTransform);// 0x4a51130
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x4a5103c
	SceneComponent* GetChildComponent(int ChildIndex);// 0x4a50fbc
	FName GetAttachSocketName();// 0x4a50fa0
	SceneComponent* GetAttachParent();// 0x4a50f84
	FName[] GetAllSocketNames();// 0x4a50ef0
	bool DoesSocketExist(FName InSocketName);// 0x4a50e68
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x4a50d90

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x24, Size: 60]
	FName[] ComponentTags;//[Offset: 0x60, Size: 12]
	float NetUpdateFrequency;//[Offset: 0x6c, Size: 4]
	bool bAllowBPReceiveTickEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x74, Size: 12]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x80, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x80, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x82, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x82, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x82, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x82, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83, Size: 1]
	enum CreationMethod;//[Offset: 0x85, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x88, Size: 12]
	delegate OnComponentActivated;//[Offset: 0xb0, Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xbc, Size: 12]
	void ToggleActive();// 0x2374d20
	void SetTickGroup(byte NewTickGroup);// 0x49149f4
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x4914974
	void SetIsReplicated(bool ShouldReplicate);// 0x49148f4
	void SetComponentTickInterval(float TickInterval);// 0x491487c
	void SetComponentTickEnabled(bool bEnabled);// 0x49147f4
	void SetAutoActivate(bool bNewAutoActivate);// 0x491476c
	void SetActive(bool bNewActive, bool bReset);// 0x23505d0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x49146ec
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x491466c
	void ReceiveTick(float DeltaSeconds);// 0x46f6b154
	void ReceiveEndPlay(byte EndPlayReason);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void OnRep_Replicates();// 0x4914658
	void OnRep_IsActive();// 0x4914644
	void K2_DestroyComponent(Object* Object);// 0x49145cc
	bool IsComponentTickEnabled();// 0x49145a4
	bool IsBeingDestroyed();// 0x4914584
	bool IsActive();// 0x253b688
	Actor* GetOwner();// 0x4914568
	float GetComponentTickInterval();// 0x4914540
	void ForceNetUpdate();// 0x2567e30
	void Deactivate();// 0x2374c8c
	bool ComponentHasTag(FName Tag);// 0x49144c0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4914440
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x49143c0
	void Activate(bool bReset);// 0x2384eec

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 4]
	float G;//[Offset: 0x4, Size: 4]
	float B;//[Offset: 0x8, Size: 4]
	float A;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4, Size: 1]
	byte EndTickGroup;//[Offset: 0x5, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bPureLogicTick;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	float TickInterval;//[Offset: 0x30, Size: 4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c, Size: 52]
	FName BoneName;//[Offset: 0x50, Size: 8]
	byte PhysicsType;//[Offset: 0x58, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 4]
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	StaticMesh*[] PhysSimpleStaticMeshList;//[Offset: 0x64, Size: 12]
	byte CollisionReponse;//[Offset: 0x70, Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71, Size: 1]
	byte[] SphereCollisionEnabledList;//[Offset: 0x74, Size: 12]
	byte[] CapsuleCollisionEnabledList;//[Offset: 0x80, Size: 12]
	byte[] BoxCollisionEnabledList;//[Offset: 0x8c, Size: 12]
	byte[] ConvexCollisionEnabledList;//[Offset: 0x98, Size: 12]
	byte[] TriMeshesCollisionEnabledList;//[Offset: 0xa4, Size: 12]
	byte CollisionTraceFlag;//[Offset: 0xb0, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0xb8, Size: 336]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x208, Size: 16]
	float BuildScale;//[Offset: 0x218, Size: 4]
	Vector BuildScale3D;//[Offset: 0x21c, Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 12]
	KBoxElem[] BoxElems;//[Offset: 0xc, Size: 12]
	KSphylElem[] SphylElems;//[Offset: 0x18, Size: 12]
	KConvexElem[] ConvexElems;//[Offset: 0x24, Size: 12]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Vector Center;//[Offset: 0x50, Size: 12]
	float Radius;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 16]
	Plane YPlane;//[Offset: 0x10, Size: 16]
	Plane ZPlane;//[Offset: 0x20, Size: 16]
	Plane WPlane;//[Offset: 0x30, Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float X;//[Offset: 0x78, Size: 4]
	float Y;//[Offset: 0x7c, Size: 4]
	float Z;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 4]
	float Yaw;//[Offset: 0x4, Size: 4]
	float Roll;//[Offset: 0x8, Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x10, Size: 64]
	Quat Orientation;//[Offset: 0x50, Size: 16]
	Vector Center;//[Offset: 0x60, Size: 12]
	Rotator Rotation;//[Offset: 0x6c, Size: 12]
	float Radius;//[Offset: 0x78, Size: 4]
	float Length;//[Offset: 0x7c, Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x10, Size: 12]
	Box ElemBox;//[Offset: 0x1c, Size: 28]
	Transform Transform;//[Offset: 0x40, Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 12]
	Vector Max;//[Offset: 0xc, Size: 12]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 16]
	Vector Translation;//[Offset: 0x10, Size: 12]
	Vector Scale3D;//[Offset: 0x20, Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c, Size: 4]
	byte FrictionCombineMode;//[Offset: 0x20, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	float Restitution;//[Offset: 0x24, Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x28, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	float Density;//[Offset: 0x2c, Size: 4]
	float RaiseMassToPower;//[Offset: 0x30, Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x34, Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x38, Size: 4]
	byte SurfaceType;//[Offset: 0x3c, Size: 1]
	float TireFrictionScale;//[Offset: 0x40, Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x44, Size: 12]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: StaticMesh.Object
	MeshPerLODBiasArray[] PerLODBiasTypeInfo;//[Offset: 0x28, Size: 12]
	int MinLOD;//[Offset: 0x34, Size: 4]
	MaterialInterface*[] Materials;//[Offset: 0x38, Size: 12]
	StaticMaterial[] StaticMaterials;//[Offset: 0x44, Size: 12]
	float LightmapUVDensity;//[Offset: 0x50, Size: 4]
	int LightMapResolution;//[Offset: 0x54, Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x58, Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x5c, Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x64, Size: 4]
	int LODForCollision;//[Offset: 0x68, Size: 4]
	float CullingScreenSize;//[Offset: 0x6c, Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x73, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x73, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bCompressData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xac, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int EncodeBits_Position;//[Offset: 0xc8, Size: 4]
	int EncodeBits_TexCoord;//[Offset: 0xcc, Size: 4]
	int EncodeBits_Normal;//[Offset: 0xd0, Size: 4]
	int EncodeBits_Generic;//[Offset: 0xd4, Size: 4]
	int EncodeBits_VertexColor;//[Offset: 0xd8, Size: 4]
	int EncodeSpeed;//[Offset: 0xdc, Size: 4]
	int DecodeSpeed;//[Offset: 0xe0, Size: 4]
	StaticMeshSocket*[] Sockets;//[Offset: 0xf8, Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0x10c, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x118, Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x124, Size: 28]
	BoxSphereBounds[] SubLocalBounds;//[Offset: 0x140, Size: 12]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x14c, Size: 12]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0x158, Size: 12]
	bool bUseQuantization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x168, Size: 4]
	AssetUserData*[] AssetUserData;//[Offset: 0x16c, Size: 12]
	NavCollision* NavCollision;//[Offset: 0x178, Size: 4]
	StaticSimpleMaterial[] SimpleMaterials;//[Offset: 0x17c, Size: 12]
	int GetNumSections(int InLOD);// 0x4a72ac4
	int GetNumLODs();// 0x4a72a9c
	int GetMaterialIndex(FName MaterialSlotName);// 0x4a72a1c
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x4a7299c
	BoxSphereBounds GetBounds();// 0x4a72948
	Box GetBoundingBox();// 0x4a728f4

--------------------------------
Class: MeshPerLODBiasArray
	enum[] LODBiasArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20, Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x2c, Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x40, Size: 12]
	void SetStreamingTextureMipOffset(int NewMipOffset, bool SizeLimited);// 0x49fe2a4
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x49fe13c
	PhysicalMaterial* GetPhysicalMaterial();// 0x25bc928
	Material* GetBaseMaterial();// 0x49fe114

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 16]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float EmissiveBoost;//[Offset: 0x4, Size: 4]
	float DiffuseBoost;//[Offset: 0x8, Size: 4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 4]
	int UVChannelIndex;//[Offset: 0x4, Size: 4]
	FName TextureName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50, Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x58, Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x90, Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc8, Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0x100, Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x138, Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x170, Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a8, Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e8, Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x220, Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x258, Size: 56]
	byte MaterialDomain;//[Offset: 0x290, Size: 1]
	byte BlendMode;//[Offset: 0x291, Size: 1]
	byte DecalBlendMode;//[Offset: 0x292, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x293, Size: 1]
	byte ShadingModel;//[Offset: 0x294, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x298, Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x29c, Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	byte OITBlendMode;//[Offset: 0x2a1, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a8, Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e8, Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x328, Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x360, Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x398, Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3d0, Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x408, Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x440, Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x478, Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x678, Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6b0, Size: 56]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x6f0, Size: 80]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x740, Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x790, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x790, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x790, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x790, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x790, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x790, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x790, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x794, Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x798, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x79c, Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7a0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x7a4, Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x7a8, Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x7ac, Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x7b0, Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x7b4, Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x7b8, Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x7c8, Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cc, Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cc, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cd, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cd, Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cd, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ce, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ce, Size: 1]
	bool bUsedWithQuantizedMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedWidget;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7ce, Size: 1]
	bool bUsedWithInstancedPDSurface;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7ce, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7ce, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cf, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cf, Size: 1]
	bool bUsedWithPPRBackgroud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7cf, Size: 1]
	bool bUsedWithSurfelInjectColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7cf, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7cf, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7cf, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7cf, Size: 1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7cf, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d0, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d0, Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d0, Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d0, Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d0, Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d0, Size: 1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d0, Size: 1]
	bool bUseAsDrawToRenderTarget;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d0, Size: 1]
	bool bRenderInTwoPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d1, Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d1, Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d1, Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d1, Size: 1]
	bool bUsedGrassInstnaceColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d1, Size: 1]
	bool bUsedVertexPointLight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d1, Size: 1]
	bool bUsedWithPhotonShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d1, Size: 1]
	bool bUsedWithPhotonShadowPCSS;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d1, Size: 1]
	bool bUsedDynamicObjectVertexLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d2, Size: 1]
	bool bUsedWithDynamicBatching;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d2, Size: 1]
	bool bUsedWithDynamicMergeSkeletalMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d2, Size: 1]
	byte ShadowOverride;//[Offset: 0x7d3, Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x7d4, Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d5, Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d5, Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d5, Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d5, Size: 1]
	bool bGPUSkinForceUseBonesUniformBuffer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d5, Size: 1]
	bool bUseAsTranslucentEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d5, Size: 1]
	bool bLiteRough;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d5, Size: 1]
	bool bUseSimpleSkyLight;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d5, Size: 1]
	bool bACESOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d6, Size: 1]
	bool bEmissionOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d6, Size: 1]
	bool bInstL2WOnlyTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7d6, Size: 1]
	bool bUseLiteFog;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7d6, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7d6, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7d6, Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7d6, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7d6, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x7d7, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d8, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d8, Size: 1]
	float MaxDisplacement;//[Offset: 0x7dc, Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e0, Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e0, Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e0, Size: 1]
	int EditorX;//[Offset: 0x7e4, Size: 4]
	int EditorY;//[Offset: 0x7e8, Size: 4]
	int EditorPitch;//[Offset: 0x7ec, Size: 4]
	int EditorYaw;//[Offset: 0x7f0, Size: 4]
	MaterialExpression*[] Expressions;//[Offset: 0x7f4, Size: 12]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x800, Size: 12]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x80c, Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x818, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x818, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x818, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x818, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x818, Size: 1]
	bool bDisableDirectionalLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x818, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x818, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x818, Size: 1]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x819, Size: 1]
	bool bAllowLandscapeVertexMorph;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x819, Size: 1]
	bool bUseLandscapeVertexHole;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x819, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x81c, Size: 4]
	byte BlendableLocation;//[Offset: 0x820, Size: 1]
	int BlendablePriority;//[Offset: 0x824, Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x828, Size: 1]
	byte RefractionMode;//[Offset: 0x829, Size: 1]
	float RefractionDepthBias;//[Offset: 0x82c, Size: 4]
	Guid stateID;//[Offset: 0x830, Size: 16]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x8d8, Size: 12]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Color Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float Constant;//[Offset: 0x34, Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector Constant;//[Offset: 0x34, Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	float ConstantX;//[Offset: 0x34, Size: 4]
	float ConstantY;//[Offset: 0x38, Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30, Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 4]
	FString InputName;//[Offset: 0x4, Size: 12]
	int Mask;//[Offset: 0x10, Size: 4]
	int MaskR;//[Offset: 0x14, Size: 4]
	int MaskG;//[Offset: 0x18, Size: 4]
	int MaskB;//[Offset: 0x1c, Size: 4]
	int MaskA;//[Offset: 0x20, Size: 4]
	FName ExpressionName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	Vector4 Constant;//[Offset: 0x40, Size: 16]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]
	float Z;//[Offset: 0x8, Size: 4]
	float W;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c, Size: 4]
	MaterialFunction* Function;//[Offset: 0x20, Size: 4]
	FString Desc;//[Offset: 0x24, Size: 12]
	Color BorderColor;//[Offset: 0x30, Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34, Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34, Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34, Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34, Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35, Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35, Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35, Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x38, Size: 12]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	FString Description;//[Offset: 0x2c, Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x3c, Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 4]
	int B;//[Offset: 0x4, Size: 4]
	int C;//[Offset: 0x8, Size: 4]
	int D;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0, Size: 12]
	int Mask;//[Offset: 0xc, Size: 4]
	int MaskR;//[Offset: 0x10, Size: 4]
	int MaskG;//[Offset: 0x14, Size: 4]
	int MaskB;//[Offset: 0x18, Size: 4]
	int MaskA;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialFunction* Function;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0, Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x1c, Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c, Size: 12]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38, Size: 12]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Guid ID;//[Offset: 0x8, Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 16]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20, Size: 16]
	int LODBias;//[Offset: 0x30, Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34, Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38, Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x3c, Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x48, Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	byte CompressionSettings;//[Offset: 0x4d, Size: 1]
	byte Filter;//[Offset: 0x4e, Size: 1]
	byte LODGroup;//[Offset: 0x4f, Size: 1]
	byte CrunchSetting;//[Offset: 0x50, Size: 1]
	bool bOverrideCrunchCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51, Size: 1]
	float CrunchCompressionAmount;//[Offset: 0x54, Size: 4]
	byte BasisSetting;//[Offset: 0x58, Size: 1]
	bool bOverrideBasisCompressionAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float BasisCompressionAmount;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 8]
	FString SubPathString;//[Offset: 0x8, Size: 12]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	Vector RelativeLocation;//[Offset: 0x28, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34, Size: 12]
	Vector RelativeScale;//[Offset: 0x40, Size: 12]
	FString Tag;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 12]
	Vector BoxExtent;//[Offset: 0xc, Size: 12]
	float SphereRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58, Size: 12]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64, Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70, Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74, Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]
	float Height;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0, Size: 12]
	Vector Extent;//[Offset: 0xc, Size: 12]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c, Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x20, Size: 4]
	Color DrawColor;//[Offset: 0x24, Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28, Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: StaticSimpleMaterial
	int MaterialIndex;//[Offset: 0x0, Size: 4]
	MaterialInterface* SimpleMaterial;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x1d, Size: 1]
	byte DOFMode;//[Offset: 0x1e, Size: 1]
	byte CollisionEnabled;//[Offset: 0x1f, Size: 1]
	FName CollisionProfileName;//[Offset: 0x20, Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 48]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5b, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x5c, Size: 4]
	float MassInKgOverride;//[Offset: 0x68, Size: 4]
	float LinearDamping;//[Offset: 0x6c, Size: 4]
	float AngularDamping;//[Offset: 0x70, Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x74, Size: 12]
	Vector COMNudge;//[Offset: 0x80, Size: 12]
	float MassScale;//[Offset: 0x8c, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x90, Size: 12]
	bool bUsedPhysSimpleStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	byte ObjectType;//[Offset: 0x9d, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 4]
	float MaxAngularVelocity;//[Offset: 0xbc, Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc0, Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc4, Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc8, Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xcc, Size: 4]
	int VelocitySolverIterationCount;//[Offset: 0x100, Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x1, Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x24, Size: 12]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 8]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 4]
	FName MemberName;//[Offset: 0x8, Size: 8]
	Guid MemberGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x30c, Size: 4]
	int Priority;//[Offset: 0x310, Size: 4]
	float FluidFriction;//[Offset: 0x314, Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x2e4, Size: 1]
	Color BrushColor;//[Offset: 0x2e8, Size: 4]
	int PolyFlags;//[Offset: 0x2ec, Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f0, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f0, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f0, Size: 1]
	Model* Brush;//[Offset: 0x2f4, Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x2f8, Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x300, Size: 12]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x20, Size: 60]
	float CustomTimeDilation;//[Offset: 0x5c, Size: 4]
	bool bAllowBPReceiveTickEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61, Size: 1]
	bool bConsideredHidden;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x61, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x61, Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61, Size: 1]
	bool bFastDistBasedNetRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61, Size: 1]
	bool bGroupBasedNetRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x62, Size: 1]
	bool bLazyNetReplication;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62, Size: 1]
	float NetCullFactorSquared;//[Offset: 0x64, Size: 4]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]
	bool bCanBeBaseForCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x69, Size: 1]
	FName[] OptimizeDuplicatedComponentName;//[Offset: 0x6c, Size: 12]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 1]
	byte RemoteRole;//[Offset: 0x79, Size: 1]
	Actor* Owner;//[Offset: 0x7c, Size: 4]
	uint32 WorldParallelismID;//[Offset: 0x80, Size: 4]
	ScriptNetworkReplicatedPropertyWrapper ScriptNetworkReplicatedPropertyWrapper;//[Offset: 0x88, Size: 8]
	FName NetDriverName;//[Offset: 0x98, Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0xa0, Size: 52]
	float InitialLifeSpan;//[Offset: 0xd4, Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xd8, Size: 56]
	byte Role;//[Offset: 0x110, Size: 1]
	byte NetDormancy;//[Offset: 0x111, Size: 1]
	byte AutoReceiveInput;//[Offset: 0x112, Size: 1]
	int InputPriority;//[Offset: 0x114, Size: 4]
	InputComponent* InputComponent;//[Offset: 0x118, Size: 4]
	float NetCullDistanceSquared;//[Offset: 0x11c, Size: 4]
	int NetTag;//[Offset: 0x120, Size: 4]
	float NetConsiderFrequency;//[Offset: 0x128, Size: 4]
	float NetUpdateFrequency;//[Offset: 0x12c, Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x130, Size: 4]
	float NetPriority;//[Offset: 0x138, Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x140, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x140, Size: 1]
	bool bForcedRelevancyCheckForReplay;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x140, Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x141, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x141, Size: 1]
	bool bCanCachedInWorldSpecialActorList;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x141, Size: 1]
	bool bShouldDumpCallstackWhenMovingfast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x141, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x141, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x141, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x142, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x142, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x142, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x143, Size: 1]
	Pawn* Instigator;//[Offset: 0x148, Size: 4]
	Actor*[] Children;//[Offset: 0x14c, Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x158, Size: 4]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x15c, Size: 12]
	FName[] Layers;//[Offset: 0x170, Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x17c, Size: 8]
	FName[] Tags;//[Offset: 0x184, Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x190, Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x198, Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x1a4, Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x1b0, Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x1bc, Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1c8, Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1d4, Size: 12]
	delegate OnClicked;//[Offset: 0x1e0, Size: 12]
	delegate OnReleased;//[Offset: 0x1ec, Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x1f8, Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x204, Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x210, Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x21c, Size: 12]
	delegate OnActorHit;//[Offset: 0x228, Size: 12]
	delegate OnDestroyed;//[Offset: 0x234, Size: 12]
	delegate OnEndPlay;//[Offset: 0x240, Size: 12]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x2c4, Size: 12]
	ActorComponent*[] InstanceComponents;//[Offset: 0x2d0, Size: 12]
	bool WasRecentlyRendered(float Tolerance);// 0x49113b8
	void UserConstructionScript();// 0x46f6b154
	void TearOff();// 0x2384458
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x49112fc
	void SetTickGroup(byte NewTickGroup);// 0x4911284
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x4911204
	void SetReplicates(bool bInReplicates);// 0x4911184
	void SetReplicateMovement(bool bInReplicateMovement);// 0x49110fc
	void SetOwner(Actor* NewOwner);// 0x24aaecc
	void SetNetDormancy(byte NewDormancy);// 0x4911084
	void SetLifeSpan(float InLifespan);// 0x23cd460
	void SetActorTickInterval(float TickInterval);// 0x491100c
	void SetActorTickEnabled(bool bEnabled);// 0x4910f8c
	void SetActorScale3D(Vector NewScale3D);// 0x4910f0c
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x4910e8c
	void SetActorHiddenInGame(bool bNewHidden);// 0x23843d0
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x4910e0c
	void ServerSendScriptNetworkRemoteContent_Unreliable(const ScriptNetworkRemoteContent Content);// 0x4910d44
	void ServerSendScriptNetworkRemoteContent(const ScriptNetworkRemoteContent Content);// 0x4910c7c
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4910bfc
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4910b7c
	void ReceiveTick(float DeltaSeconds);// 0x46f6b154
	void ReceiveScriptNetworkRemoteContent(out const ScriptNetworkRemoteContent Content);// 0x4910adc
	void ReceiveReInitForReplay();// 0x46f6b154
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x46f6b154
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x46f6b154
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x46f6b154
	void ReceiveEndPlay(byte EndPlayReason);// 0x46f6b154
	void ReceiveDestroyed();// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x46f6b154
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x46f6b154
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x46f6b154
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x46f6b154
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x46f6b154
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x46f6b154
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x46f6b154
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x46f6b154
	void ReceiveActorEndCursorOver();// 0x46f6b154
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x46f6b154
	void ReceiveActorBeginCursorOver();// 0x46f6b154
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x49109c8
	void OnRep_ScriptNetworkReplicatedPropertyWrapper();// 0x49109b4
	void OnRep_ReplicateMovement();// 0x23ab320
	void OnRep_ReplicatedMovement();// 0x23d0bcc
	void OnRep_Owner();// 0x270a21c
	void OnRep_Instigator();// 0x2e61748
	void OnRep_AttachmentReplication();// 0x2510b44
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x4910808
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x287307c
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x4910730
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4910540
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x4910470
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4910290
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4910108
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x490ff7c
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x490fd9c
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x490fc0c
	void K2_OnReset();// 0x46f6b154
	void K2_OnEndViewTarget(PlayerController* PC);// 0x46f6b154
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x46f6b154
	SceneComponent* K2_GetRootComponent();// 0x490fbf0
	Rotator K2_GetActorRotation();// 0x490fafc
	Vector K2_GetActorLocation();// 0x490fabc
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x490f9bc
	void K2_DestroyComponent(ActorComponent* Component);// 0x490f944
	void K2_DestroyActor();// 0x490f928
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x490f748
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x490f568
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x490f414
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x490f2c0
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x490f0e0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x490ef5c
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x490edd0
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x490ebf0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x490ea74
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x490e8e8
	bool IsOverlappingActor(const Actor* Other);// 0x490e868
	bool IsChildActor();// 0x490e840
	bool IsActorTickEnabled();// 0x490e818
	bool IsActorBeingDestroyed();// 0x490e7f4
	bool HasAuthority();// 0x490e7cc
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x490e74c
	Vector GetVelocity();// 0x490e6fc
	Transform GetTransform();// 0x490e6b0
	bool GetTickableWhenPaused();// 0x490e688
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x490e608
	byte GetRole();// 0x490e5e0
	byte GetRemoteRole();// 0x490e5c4
	ChildActorComponent* GetParentComponent();// 0x490e59c
	Actor* GetParentActor();// 0x490e574
	Actor* GetOwner();// 0x490e558
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x490e4b8
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x490e3d0
	byte GetLocalRole();// 0x490e3b4
	float GetLifeSpan();// 0x490e384
	Controller* GetInstigatorController();// 0x490e35c
	Pawn* GetInstigator();// 0x279e114
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x490e18c
	float GetInputAxisValue(const FName InputAxisName);// 0x490e10c
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x490df4c
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x490decc
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x490de4c
	float GetGameTimeSinceCreation();// 0x490de24
	float GetDotProductTo(const Actor* OtherActor);// 0x490dda4
	float GetDistanceTo(const Actor* OtherActor);// 0x490dd24
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x490dbfc
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x490db20
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x490daa0
	FName GetAttachParentSocketName();// 0x490da60
	Actor* GetAttachParentActor();// 0x490da38
	void GetAttachedActors(out Actor*[] OutActors);// 0x490d998
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x490d8a8
	Vector GetActorUpVector();// 0x490d834
	float GetActorTimeDilation();// 0x490d80c
	float GetActorTickInterval();// 0x490d7e4
	Vector GetActorScale3D();// 0x490d79c
	Vector GetActorRightVector();// 0x490d728
	Vector GetActorRelativeScale3D();// 0x490d6e0
	Vector GetActorForwardVector();// 0x490d66c
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x490d580
	bool GetActorEnableCollision();// 0x490d560
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x490d420
	void ForceNetUpdate();// 0x2567e30
	void ForceNetConsider();// 0x490d404
	void FlushNetDormancy();// 0x490d3f0
	void EnableInput(PlayerController* PlayerController);// 0x490d370
	void DisableInput(PlayerController* PlayerController);// 0x490d2f0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x490d270
	void ClientSendScriptNetworkRemoteContent_Unreliable(const ScriptNetworkRemoteContent Content);// 0x490d1d8
	void ClientSendScriptNetworkRemoteContent(const ScriptNetworkRemoteContent Content);// 0x490d140
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x2719fb0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x490d0c0
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x490cf00
	bool ActorHasTag(FName Tag);// 0x490ce74

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x550, Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x554, Size: 4]
	Vector PrePivot;//[Offset: 0x558, Size: 12]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 4]
	int Index;//[Offset: 0x4, Size: 4]
	int SelectionIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ScriptNetworkReplicatedPropertyWrapper

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 12]
	Vector AngularVelocity;//[Offset: 0xc, Size: 12]
	Vector Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10, Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c, Size: 12]
	FName AttachSocket;//[Offset: 0x28, Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30, Size: 4]
	Actor* AttachParent_Direct;//[Offset: 0x34, Size: 4]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	bool WasControllerKeyJustReleased(Key Key);// 0x498eec8
	bool WasControllerKeyJustPressed(Key Key);// 0x498eec8
	bool IsControllerKeyDown(Key Key);// 0x498eec8
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x498ed48
	Vector GetControllerVectorKeyState(Key Key);// 0x498eb78
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x498ea98
	float GetControllerKeyTimeDown(Key Key);// 0x498e7b4
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x498e974
	float GetControllerAnalogKeyState(Key Key);// 0x498e7b4

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e8, Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e8, Size: 1]
	float BaseEyeHeight;//[Offset: 0x2ec, Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x2f0, Size: 1]
	enum AutoPossessAI;//[Offset: 0x2f1, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x2f4, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2f8, Size: 4]
	byte RemoteViewPitch;//[Offset: 0x2fc, Size: 1]
	Controller* LastHitBy;//[Offset: 0x300, Size: 4]
	Controller* Controller;//[Offset: 0x304, Size: 4]
	delegate OnControllerArrived;//[Offset: 0x30c, Size: 12]
	Vector ControlInputVector;//[Offset: 0x31c, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x328, Size: 12]
	void SpawnDefaultController();// 0x2fda3f0
	void SetUseViewTranslatedTransform(bool bNewUseViewTranslatedTransform);// 0x25d668c
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x4a235a0
	void ReceiveUnpossessed(Controller* OldController);// 0x46f6b154
	void ReceivePossessed(Controller* NewController);// 0x46f6b154
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x4a2343c
	void OnRep_PlayerState();// 0x234b3f8
	void OnRep_Controller();// 0x2453248
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4a23318
	Vector K2_GetMovementInputVector();// 0x4a23218
	bool IsPlayerControlled();// 0x4a232e8
	bool IsMoveInputIgnored();// 0x4a232b8
	bool IsLocallyControlled();// 0x4a23288
	bool IsControlled();// 0x4a23260
	Vector GetPendingMovementInputVector();// 0x4a23218
	Vector GetNavAgentLocation();// 0x4a231c8
	PawnMovementComponent* GetMovementComponent();// 0x23670b0
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x4a23150
	Vector GetLastMovementInputVector();// 0x4a23108
	Rotator GetControlRotation();// 0x4a230b8
	Controller* GetController();// 0x2668b6c
	Rotator GetBaseAimRotation();// 0x4a23068
	void DetachFromControllerPendingDestroy();// 0x4a2304c
	Vector ConsumeMovementInputVector();// 0x4a22ffc
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x4a22ed8
	void AddControllerYawInput(float Val);// 0x4a22e58
	void AddControllerRollInput(float Val);// 0x4a22dd8
	void AddControllerPitchInput(float Val);// 0x4a22d58

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x2e8, Size: 4]
	Character* Character;//[Offset: 0x2f4, Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2f8, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2fc, Size: 4]
	Rotator ControlRotation;//[Offset: 0x300, Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30c, Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30c, Size: 1]
	FName StateName;//[Offset: 0x318, Size: 8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x320, Size: 12]
	void UnPossess();// 0x49563e8
	void StopMovement();// 0x26da5ac
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x49562fc
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x4956274
	void SetIgnoreLookInput(bool bNewLookInput);// 0x49561ec
	void SetControlRotation(out const Rotator NewRotation);// 0x26bfce4
	void ResetIgnoreMoveInput();// 0x49561d0
	void ResetIgnoreLookInput();// 0x2fccbf0
	void ResetIgnoreInputFlags();// 0x267ec00
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x46f6b154
	void Possess(Pawn* InPawn);// 0x4956150
	void OnRep_PlayerState();// 0x2453248
	void OnRep_Pawn();// 0x257c9d0
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x4956024
	Pawn* K2_GetPawn();// 0x4955ffc
	bool IsPlayerController();// 0x4955fdc
	bool IsMoveInputIgnored();// 0x4955fac
	bool IsLookInputIgnored();// 0x4955f7c
	bool IsLocalPlayerController();// 0x4955f38
	bool IsLocalController();// 0x4955f08
	Actor* GetViewTarget();// 0x494ee28
	Rotator GetDesiredRotation();// 0x4955eb8
	Rotator GetControlRotation();// 0x4955e68
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x4955d9c
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x4955cc4
	PlayerController* CastToPlayerController();// 0x4955c9c

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x334, Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x338, Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x33c, Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x340, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x370, Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x3a0, Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x3a4, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x3b0, Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3c0, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x3c4, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 1]
	float CrouchedEyeHeight;//[Offset: 0x3c8, Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cc, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3cc, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3cc, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3cc, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3cc, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3cc, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3cc, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3cc, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cd, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x3d0, Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x3d4, Size: 4]
	int JumpMaxCount;//[Offset: 0x3d8, Size: 4]
	int JumpCurrentCount;//[Offset: 0x3dc, Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e0, Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x3e4, Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x3fc, Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x408, Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x414, Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4b0, Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x4f0, Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x500, Size: 224]
	void UnCrouch(bool bClientSimulation);// 0x494c26c
	void StopJumping();// 0x267beac
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x494c1ec
	void SetReplicateMovement(bool bInReplicateMovement);// 0x49110fc
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x27e01ec
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x494c0d4
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x494bf30
	void OnRep_RootMotion();// 0x494bf1c
	void OnRep_ReplicatedBasedMovement();// 0x494bf00
	void OnRep_IsCrouched();// 0x26fc12c
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x46f6b154
	void OnLanded(out const HitResult Hit);// 0x46f6b154
	void OnJumped();// 0x26d9e2c
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2621a84
	void K2_UpdateCustomMovement(float DeltaTime);// 0x46f6b154
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x46f6b154
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x46f6b154
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x46f6b154
	void Jump();// 0x2fda448
	bool IsPlayingRootMotion();// 0x494bed8
	bool IsPlayingNetworkedRootMotionMontage();// 0x494beb0
	bool IsJumpProvidingForce();// 0x494be80
	AnimMontage* GetCurrentMontage();// 0x494be58
	Vector GetBaseTranslationOffset();// 0x494be34
	Rotator GetBaseRotationOffsetRotator();// 0x494bdd0
	float GetAnimRootMotionTranslationScale();// 0x2348de0
	void Crouch(bool bClientSimulation);// 0x494bd48
	void ClientCheatWalk();// 0x267c0e4
	void ClientCheatGhost();// 0x26e26ac
	void ClientCheatFly();// 0x494bd2c
	bool CanJumpInternal();// 0x494bcfc
	bool CanJump();// 0x494bcd4
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x494bbfc

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x714, Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x718, Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x71c, Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x720, Size: 4]
	AnimInstance*[] SubInstances;//[Offset: 0x724, Size: 12]
	AnimInstance*[] NewSubInstances;//[Offset: 0x730, Size: 12]
	AnimInstance*[] DirtySubInstances;//[Offset: 0x73c, Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x748, Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x74c, Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x780, Size: 12]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x78c, Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x7ac, Size: 4]
	enum UseAsyncScene;//[Offset: 0x7b0, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b1, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x7b2, Size: 1]
	int UpdateKinematicBonesRate;//[Offset: 0x7b4, Size: 4]
	byte PhysicsTransformUpdateMode;//[Offset: 0x7b8, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7b9, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7b9, Size: 1]
	bool bNeedUpdatePhysicsTickRegisteredState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ba, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7bb, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7bb, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7bb, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7bb, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x7bc, Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c8, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c8, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c8, Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c8, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c8, Size: 1]
	float ClothBlendWeight;//[Offset: 0x7cc, Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x7d4, Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e0, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e0, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e0, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e1, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e2, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x7e4, Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e8, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e9, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e9, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e9, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7e9, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7e9, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7e9, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7e9, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7e9, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x7ea, Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x7ec, Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x7fc, Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x8c8, Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x8cc, Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x8d0, Size: 4]
	delegate OnAnimInitialized;//[Offset: 0x9c0, Size: 12]
	AnimSequence* SequenceToPlay;//[Offset: 0xa58, Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0xa5c, Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa60, Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa60, Size: 1]
	float DefaultPosition;//[Offset: 0xa64, Size: 4]
	float DefaultPlayRate;//[Offset: 0xa68, Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0xa6c, Size: 4]
	float LastPoseTickTime;//[Offset: 0xa70, Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9c, Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9e, Size: 1]
	bool bIsEnableBatchSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab5, Size: 1]
	DynamicBatchSectionInfo[] BatchSectionList;//[Offset: 0xab8, Size: 12]
	MaterialInterface*[] OriginalMaterials;//[Offset: 0xac4, Size: 12]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x4a5b824
	void SuspendClothingSimulation();// 0x4a5b810
	void Stop();// 0x4a5b7fc
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4a5b738
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x23910d8
	void SetTeleportRotationThreshold(float Threshold);// 0x4a5b6c0
	void SetTeleportDistanceThreshold(float Threshold);// 0x4a5b648
	void SetPosition(float InPos, bool bFireNotifies);// 0x4a5b584
	void SetPlayRate(float Rate);// 0x4a5b50c
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x4a5b494
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x4a5b370
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x4a5b25c
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x4a5b1dc
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x4a5b0c0
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x4a5aff8
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x4a5af78
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x4a5aeac
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x4a5ad90
	void SetClothMaxDistanceScale(float Scale);// 0x4a5ad18
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x4a5ac48
	void SetAnimInstanceClass(class Object NewClass);// 0x4a5abd0
	void SetAnimationMode(byte InAnimationMode);// 0x4a5ab58
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x4a5aae0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x4a5a98c
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x4a5a89c
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x4a5a81c
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4a5a6fc
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4a5a5dc
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x4a5a48c
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x4a5a40c
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4a5a348
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x4a5a21c
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x4a5a0a8
	void ResumeClothingSimulation();// 0x4a5a094
	void ResetClothTeleportMode();// 0x4a5a080
	void ResetAllowedAnimCurveEvaluation();// 0x4a5a06c
	void ResetAllBodiesSimulatePhysics();// 0x4a5a058
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x4a59f94
	void Play(bool bLooping);// 0x4a59f14
	void PauseIMSimulation(int InPauseFrameCount);// 0x4a59e9c
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x4a59cf4
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x4a59ae4
	bool IsSectionBatched(int LODIndex);// 0x4a59a5c
	bool IsPlaying();// 0x4a59a34
	bool IsClothingSimulationSuspended();// 0x25fa0c8
	bool IsBodyGravityEnabled(FName BoneName);// 0x4a599b4
	float GetTeleportRotationThreshold();// 0x4a5998c
	float GetTeleportDistanceThreshold();// 0x4a5998c
	AnimInstance*[] GetSubAnimInstances();// 0x4a598f8
	Vector GetSkeletalCenterOfMass();// 0x4a598b0
	AnimInstance* GetPostProcessInstance();// 0x4a59888
	float GetPosition();// 0x4a59860
	float GetPlayRate();// 0x4a59838
	AnimInstance*[] GetNewSubAnimInstances();// 0x4a597a4
	float GetMorphTarget(FName MorphTargetName);// 0x4a59724
	bool GetDisableAnimCurves();// 0x4a59700
	AnimInstance*[] GetDirtySubAnimInstances();// 0x4a5966c
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x4a594ec
	float GetClothMaxDistanceScale();// 0x4a594c4
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x4a593f0
	AnimInstance* GetAnimInstance();// 0x4a593c8
	byte GetAnimationMode();// 0x4a593a0
	AnimInstance*[] GetAllSubAnimInstances();// 0x4a5930c
	bool GetAllowedAnimCurveEvaluate();// 0x4a592ec
	void ForceClothNextUpdateTeleportAndReset();// 0x4a592d8
	void ForceClothNextUpdateTeleport();// 0x4a592c4
	FName FindConstraintBoneName(int ConstraintIndex);// 0x4a5923c
	void ClearMorphTargets();// 0x4a59228
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x4a590f8
	void BindClothToMasterPoseComponent();// 0x4a590e4
	void BatchSectionsWithAtlas(int LodIdx, bool IsBatchSection);// 0x2625888
	void AutoBatchSection(int LodIdx, int[] BatchIndices, bool IsBatchSection);// 0x4a58f68
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x4a58e9c
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x4a58d24
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x4a58bac
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4a58a8c

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x56c, Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x570, Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5bc, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5d8, Size: 4]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5dc, Size: 1]
	int ForcedLodModel;//[Offset: 0x5e0, Size: 4]
	int MinLodModel;//[Offset: 0x5e4, Size: 4]
	int MaxLodModel;//[Offset: 0x5e8, Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5f8, Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x604, Size: 4]
	Color WireframeColor;//[Offset: 0x608, Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60c, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60c, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60c, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60c, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61c, Size: 1]
	byte UpdateBoundsRate;//[Offset: 0x61d, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61f, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61f, Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x620, Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x621, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x622, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x630, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x630, Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x631, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x632, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x632, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x634, Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x638, Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x64c, Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 1]
	bool bEnableUpdateRateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66a, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66b, Size: 1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x66c, Size: 1]
	bool bOverrideAnimUpdateRateParameters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66d, Size: 1]
	AnimUpdateRateParameters CustomAnimUpdateRateParams;//[Offset: 0x670, Size: 120]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x4a602bc
	void UnHideBoneByName(FName BoneName);// 0x4a60244
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x4a60064
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x4a5fe84
	void SwitchToOverrideSkinWeights(int LODIndex);// 0x4a5fe0c
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x4a5fd28
	bool SetSkinWeightProfile(FName InProfileName);// 0x4a5fca8
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x4a5fbc4
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose, bool bCheckBoneMap);// 0x4a5faa8
	void SetRenderStatic(bool bNewValue);// 0x4a5fa28
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x4a5f95c
	void SetMinLOD(int InNewMinLOD);// 0x4a5f8e4
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent);// 0x4a5f86c
	void SetForcedLOD(int InNewForcedLOD);// 0x4a5f7f4
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x4a5f774
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x4a5f6f4
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x4a5f67c
	void RemoveMasterPoseComponent();// 0x4a5f668
	void OnSkinnedMeshComponentMeshInited__DelegateSignature(int PredicatedLOD);// 0x46f6b154
	void OnSkinnedMeshComponentLODResourceUpdated__DelegateSignature(int PredicatedLOD);// 0x46f6b154
	bool IsUsingSkinWeightProfile();// 0x4a5f648
	bool IsSectionBatched(int LODIndex);// 0x4a59a5c
	bool IsBoneHiddenByName(FName BoneName);// 0x4a5f5c8
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x4a5f504
	FName GetSocketBoneName(FName InSocketName);// 0x4a5f478
	SkeletalMesh* GetSkeletalMesh();// 0x4a5f448
	FName GetParentBone(FName BoneName);// 0x4a5f3bc
	int GetNumLODs();// 0x4a5f394
	int GetNumBones();// 0x4a5f36c
	FName GetCurrentSkinWeightProfileName();// 0x4a5f348
	Transform GetBoneTransform(int BoneIndex);// 0x4a5f2a0
	FName GetBoneName(int BoneIndex);// 0x4a5f218
	Vector GetBoneLocation(FName BoneName, byte Space);// 0x4a5f13c
	int GetBoneIndex(FName BoneName);// 0x4a5f0bc
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x4a5ef28
	void ClearVertexColorOverride(int LODIndex);// 0x4a5eeb0
	void ClearSkinWeightProfile();// 0x4a5ee9c
	void ClearSkinWeightOverride(int LODIndex);// 0x4a5ee24
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x4a5ed58

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x550, Size: 12]
	bool bIsEnableRetrieveDefaultMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x4a010d4
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x4a01010
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x4a00efc
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x4a00e74
	FName[] GetMaterialSlotNames();// 0x4a00dd8
	MaterialInterface*[] GetMaterials();// 0x4a00d3c
	int GetMaterialIndex(FName MaterialSlotName);// 0x4a00cb4

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c, Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int EncodeBits_Position;//[Offset: 0x34, Size: 4]
	int EncodeBits_TexCoord;//[Offset: 0x38, Size: 4]
	int EncodeBits_Normal;//[Offset: 0x3c, Size: 4]
	int EncodeBits_Generic;//[Offset: 0x40, Size: 4]
	int EncodeBits_VertexColor;//[Offset: 0x44, Size: 4]
	int EncodeSpeed;//[Offset: 0x48, Size: 4]
	int DecodeSpeed;//[Offset: 0x4c, Size: 4]
	BoxSphereBounds ImportedBounds;//[Offset: 0x50, Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x6c, Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x88, Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x94, Size: 12]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bCompressData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	Vector IndirectLightingCachePositionOffset;//[Offset: 0xa4, Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0x110, Size: 12]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x11c, Size: 12]
	byte SkelMirrorAxis;//[Offset: 0x128, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x129, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0x12c, Size: 12]
	MeshPerLODBiasArray[] PerLODBiasTypeInfo;//[Offset: 0x138, Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x144, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x144, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x144, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x144, Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x144, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x14c, Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x150, Size: 4]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x154, Size: 12]
	bool LodModelsHasSkinweight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	MorphTarget*[] MorphTargets;//[Offset: 0x164, Size: 12]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x280, Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x28c, Size: 4]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x290, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x29c, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x2ac, Size: 12]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x2c4, Size: 12]
	int NumSockets();// 0x4a56f84
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x4a56eb8
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x4a56e38
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x4a56db8
	BoxSphereBounds GetImportedBounds();// 0x4a56d64
	BoxSphereBounds GetBounds();// 0x4a56d10
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x4a56c34
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x4a56bb4

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x20, Size: 12]
	Transform[] RefLocalPoses;//[Offset: 0x2c, Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108, Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x118, Size: 12]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x124, Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c, Size: 60]
	BlendProfile*[] BlendProfiles;//[Offset: 0x1b8, Size: 12]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x268, Size: 12]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 8]
	int ParentIndex;//[Offset: 0x8, Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 8]
	FName TargetBoneName;//[Offset: 0x8, Size: 8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20, Size: 8]
	FName BoneName;//[Offset: 0x28, Size: 8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 12]
	Vector RelativeScale;//[Offset: 0x48, Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x4a5d47c
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x4a5d3ec

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20, Size: 4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24, Size: 12]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float BlendScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 8]
	FName[] SlotNames;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28, Size: 24]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0, Size: 4]
	float LODHysteresis;//[Offset: 0x4, Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 12]
	Vector4[] UVOffsets;//[Offset: 0x2c, Size: 12]
	bool[] bEnableShadowCasting;//[Offset: 0x40, Size: 12]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x4c, Size: 12]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x5c, Size: 328]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x1a4, Size: 140]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x230, Size: 532]
	FName[] RemovedBones;//[Offset: 0x444, Size: 12]
	BoneReference[] BonesToRemove;//[Offset: 0x450, Size: 12]
	AnimSequence* BakePose;//[Offset: 0x45c, Size: 4]
	FString SourceImportFilename;//[Offset: 0x460, Size: 12]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x46c, Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0, Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1, Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8, Size: 4]
	int ScreenSize;//[Offset: 0xc, Size: 4]
	float WeldingThreshold;//[Offset: 0x10, Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float NormalsThreshold;//[Offset: 0x18, Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c, Size: 1]
	byte TextureImportance;//[Offset: 0x1d, Size: 1]
	byte ShadingImportance;//[Offset: 0x1e, Size: 1]
	byte SkinningImportance;//[Offset: 0x1f, Size: 1]
	float BoneReductionRatio;//[Offset: 0x20, Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24, Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c, Size: 12]
	int BaseLOD;//[Offset: 0x38, Size: 4]
	int LODChainLastIndex;//[Offset: 0x3c, Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44, Size: 104]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac, Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x144, Size: 4]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MaterialLODType;//[Offset: 0x1, Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte TextureWidth;//[Offset: 0x3, Size: 1]
	byte TextureHeight;//[Offset: 0x4, Size: 1]
	byte SamplingQuality;//[Offset: 0x5, Size: 1]
	int GutterSpace;//[Offset: 0x8, Size: 4]
	byte TextureStrech;//[Offset: 0xc, Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10, Size: 12]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24, Size: 68]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0, Size: 1]
	byte Caster;//[Offset: 0x1, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	byte ColorChannels;//[Offset: 0x3, Size: 1]
	int BitsPerChannel;//[Offset: 0x4, Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0, Size: 8]
	byte TextureSizingType;//[Offset: 0x8, Size: 1]
	float GutterSpace;//[Offset: 0xc, Size: 4]
	enum SamplingQuality;//[Offset: 0x10, Size: 1]
	enum UVStrech;//[Offset: 0x11, Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	float MetallicConstant;//[Offset: 0x18, Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float RoughnessConstant;//[Offset: 0x20, Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float SpecularConstant;//[Offset: 0x28, Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float OpacityConstant;//[Offset: 0x30, Size: 4]
	float AOConstant;//[Offset: 0x34, Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c, Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44, Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48, Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50, Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58, Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60, Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68, Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70, Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78, Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80, Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88, Size: 8]
	byte MaterialMergeType;//[Offset: 0x90, Size: 1]
	byte BlendMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c, Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80, Size: 12]
	float StreamableFirstChunkSize;//[Offset: 0x98, Size: 4]
	float StreamableFollowingChunkSize;//[Offset: 0x9c, Size: 4]
	float OverrideChunkFreeTime;//[Offset: 0xa0, Size: 4]
	float OverrideFollowingChunkSize;//[Offset: 0xa4, Size: 4]
	bool bForceUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bUseStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x168, Size: 1]
	byte RefPoseType;//[Offset: 0x169, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x16c, Size: 4]
	int RefFrameIndex;//[Offset: 0x170, Size: 4]
	int EncodingPkgVersion;//[Offset: 0x174, Size: 4]
	FName RetargetSource;//[Offset: 0x178, Size: 8]
	enum Interpolation;//[Offset: 0x180, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x181, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x182, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 12]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c, Size: 12]
	float SequenceLength;//[Offset: 0x68, Size: 4]
	float RateScale;//[Offset: 0x6c, Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70, Size: 12]
	float GetPlayLength();// 0x4925b44

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20, Size: 4]
	AnimMetaData*[] MetaData;//[Offset: 0x44, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x50, Size: 12]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x28, Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x2c, Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x30, Size: 4]
	FName NotifyName;//[Offset: 0x38, Size: 8]
	AnimNotify* Notify;//[Offset: 0x40, Size: 4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44, Size: 4]
	float Duration;//[Offset: 0x48, Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x4c, Size: 36]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	byte MontageTickType;//[Offset: 0x71, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x74, Size: 4]
	byte NotifyFilterType;//[Offset: 0x78, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x7c, Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool bTriggerOnSequenceChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	bool bBroadcastOverPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 1]
	int TrackIndex;//[Offset: 0x84, Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4, Size: 4]
	int SlotIndex;//[Offset: 0x8, Size: 4]
	int SegmentIndex;//[Offset: 0xc, Size: 4]
	byte LinkMethod;//[Offset: 0x10, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x11, Size: 1]
	float SegmentBeginTime;//[Offset: 0x14, Size: 4]
	float SegmentLength;//[Offset: 0x18, Size: 4]
	float LinkValue;//[Offset: 0x1c, Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20, Size: 4]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c, Size: 44]
	float BlendInTime;//[Offset: 0xa8, Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac, Size: 44]
	float BlendOutTime;//[Offset: 0xd8, Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc, Size: 4]
	InputBlendPose FilteredBones;//[Offset: 0xe0, Size: 12]
	FName SyncGroup;//[Offset: 0xf0, Size: 8]
	int SyncSlotIndex;//[Offset: 0xf8, Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xfc, Size: 24]
	CompositeSection[] CompositeSections;//[Offset: 0x114, Size: 12]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x120, Size: 12]
	BranchingPoint[] BranchingPoints;//[Offset: 0x12c, Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x13a, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x13c, Size: 12]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x148, Size: 12]
	FString[] IgnoreNotifyType;//[Offset: 0x154, Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x160, Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x180, Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4, Size: 4]
	float BlendTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20, Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	float GetFloatValue(float InTime);// 0x49586e0

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x495779c
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x49576bc

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x41, Size: 1]
	float DefaultValue;//[Offset: 0x44, Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x48, Size: 12]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4, Size: 60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Value;//[Offset: 0x8, Size: 4]
	float ArriveTangent;//[Offset: 0xc, Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 4]
	float LeaveTangent;//[Offset: 0x14, Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 4]

--------------------------------
Class: InputBlendPose
	BranchFilter[] BranchFilters;//[Offset: 0x0, Size: 12]

--------------------------------
Class: BranchFilter
	FName BoneName;//[Offset: 0x0, Size: 8]
	int BlendDepth;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28, Size: 8]
	float StartTime;//[Offset: 0x30, Size: 4]
	FName NextSectionName;//[Offset: 0x38, Size: 8]
	AnimMetaData*[] MetaData;//[Offset: 0x40, Size: 12]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 12]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 4]
	float StartPos;//[Offset: 0x4, Size: 4]
	float AnimStartTime;//[Offset: 0x8, Size: 4]
	float AnimEndTime;//[Offset: 0xc, Size: 4]
	float AnimPlayRate;//[Offset: 0x10, Size: 4]
	int LoopingCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28, Size: 8]
	float DisplayTime;//[Offset: 0x30, Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 4]
	float TriggerTime;//[Offset: 0x4, Size: 4]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14, Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 4]
	float Alpha;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation);// 0x46f6b154
	FString GetNotifyName();// 0x4924068

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x46f6b154
	bool Received_NotifyEnd(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation);// 0x46f6b154
	bool Received_NotifyBegin(SkeletalMeshComponent* meshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x46f6b154
	FString GetNotifyName();// 0x4924068

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 12]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c, Size: 84]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 8]
	SmartName Name;//[Offset: 0x8, Size: 16]
	int CurveTypeFlags;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ScreenSize;//[Offset: 0x4, Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float HardAngleThreshold;//[Offset: 0xc, Size: 4]
	int MergeDistance;//[Offset: 0x10, Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ClippingLevel;//[Offset: 0x18, Size: 4]
	int AxisIndex;//[Offset: 0x1c, Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24, Size: 104]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4, Size: 328]
	MeshProxySettings ProxySettings;//[Offset: 0x14c, Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0, Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4, Size: 148]
	int TextureWidth;//[Offset: 0x98, Size: 4]
	int TextureHeight;//[Offset: 0x9c, Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float MergeDistance;//[Offset: 0xa8, Size: 4]
	float HardAngleThreshold;//[Offset: 0xac, Size: 4]
	int LightMapResolution;//[Offset: 0xb0, Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6, Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7, Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8, Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	int LODGroupIndex;//[Offset: 0xbc, Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	enum AggregatorMode;//[Offset: 0xc1, Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x1c, Size: 12]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x28, Size: 12]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x34, Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc, Size: 4]
	BodySetup*[] BodySetup;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bClientOnlyBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2af, Size: 1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x2b0, Size: 12]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 4]
	float PositionStrength;//[Offset: 0x14, Size: 4]
	float VelocityStrength;//[Offset: 0x18, Size: 4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 4]
	float MaxAngularForce;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20, Size: 416]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0, Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc, Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10, Size: 8]
	FName ConstraintBone1;//[Offset: 0x18, Size: 8]
	FName ConstraintBone2;//[Offset: 0x20, Size: 8]
	Vector Pos1;//[Offset: 0x28, Size: 12]
	Vector PriAxis1;//[Offset: 0x34, Size: 12]
	Vector SecAxis1;//[Offset: 0x40, Size: 12]
	Vector Pos2;//[Offset: 0x4c, Size: 12]
	Vector PriAxis2;//[Offset: 0x58, Size: 12]
	Vector SecAxis2;//[Offset: 0x64, Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70, Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84, Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 4]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float Restitution;//[Offset: 0x8, Size: 4]
	float ContactDistance;//[Offset: 0xc, Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 4]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 12]
	Vector VelocityTarget;//[Offset: 0xc, Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 4]
	float Damping;//[Offset: 0x4, Size: 4]
	float MaxForce;//[Offset: 0x8, Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 12]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 260]
	FName ProfileName;//[Offset: 0x108, Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c, Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58, Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0, Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	class Object* ParentClass;//[Offset: 0x3c, Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40, Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48, Size: 4]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x4c, Size: 12]
	TimelineTemplate*[] Timelines;//[Offset: 0x58, Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64, Size: 4]
	byte BlueprintType;//[Offset: 0x68, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c, Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c, Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20, Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	Guid BlueprintGUID;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x1c, Size: 12]
	SCS_Node*[] AllNodes;//[Offset: 0x28, Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34, Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38, Size: 4]
	SCS_Node*[] ActorComponentNodes;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20, Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]
	FName VariableName;//[Offset: 0x60, Size: 8]
	FName AttachToName;//[Offset: 0x68, Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70, Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78, Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0x84, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90, Size: 12]
	Guid VariableGuid;//[Offset: 0x9c, Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 1]
	FName NativeComponentName;//[Offset: 0xb0, Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	FName InternalVariableName;//[Offset: 0xc0, Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* PropertyScope;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 8]
	FString DataValue;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c, Size: 4]
	byte LengthMode;//[Offset: 0x20, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21, Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x24, Size: 12]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30, Size: 12]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c, Size: 12]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48, Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54, Size: 12]
	Guid TimelineGuid;//[Offset: 0x60, Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	Vector GetVectorValue(float InTime);// 0x4959904

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20, Size: 84]
	LinearColor GetLinearColorValue(float InTime);// 0x4958ac8

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c, Size: 12]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x28, Size: 12]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4, Size: 4]
	ComponentKey ComponentKey;//[Offset: 0x8, Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28, Size: 56]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 4]
	FName SCSVariableName;//[Offset: 0x8, Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0, Size: 8]
	FString ApexFileName;//[Offset: 0x8, Size: 12]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18, Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0, Size: 4]
	float HorizontalResistance;//[Offset: 0x4, Size: 4]
	float BendResistance;//[Offset: 0x8, Size: 4]
	float ShearResistance;//[Offset: 0xc, Size: 4]
	float Friction;//[Offset: 0x10, Size: 4]
	float Damping;//[Offset: 0x14, Size: 4]
	float TetherStiffness;//[Offset: 0x18, Size: 4]
	float TetherLimit;//[Offset: 0x1c, Size: 4]
	float Drag;//[Offset: 0x20, Size: 4]
	float StiffnessFrequency;//[Offset: 0x24, Size: 4]
	float GravityScale;//[Offset: 0x28, Size: 4]
	float MassScale;//[Offset: 0x2c, Size: 4]
	float InertiaBlend;//[Offset: 0x30, Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34, Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38, Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c, Size: 4]
	float SolverFrequency;//[Offset: 0x40, Size: 4]
	float FiberCompression;//[Offset: 0x44, Size: 4]
	float FiberExpansion;//[Offset: 0x48, Size: 4]
	float FiberResistance;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c, Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20, Size: 4]
	byte RootMotionMode;//[Offset: 0x24, Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c, Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38, Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44, Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50, Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118, Size: 12]
	bool bIsOnlyMasterTriggerNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	bool bIsMaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 1]
	AnimInstance* ParentAnimInstance;//[Offset: 0x2f0, Size: 8]
	AnimInstance*[] SubAnimInstances;//[Offset: 0x2f8, Size: 12]
	AnimInstance*[] SubAnimInstancesTempRef;//[Offset: 0x304, Size: 12]
	AnimSequenceBase*[] CachedSwitchNotifySequence;//[Offset: 0x310, Size: 12]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x491dcec
	Pawn* TryGetPawnOwner();// 0x491dcbc
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x491dbf8
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x491db2c
	void SetRootMotionMode(byte Value);// 0x491daac
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x491d9e8
	void SavePoseSnapshot(FName SnapshotName);// 0x491d968
	void ResetSubAnimNodeAnimClass(FName SubInstanceSlotName);// 0x491d8f0
	AnimInstance* ReplaceSubAnimNodeAnimClass(FName SubInstanceSlotName, class AnimInstance NewAnimClass);// 0x491d82c
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x491d5b4
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x491d3cc
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x491d308
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x491d24c
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x491d190
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x491d074
	void Montage_Resume(const AnimMontage* Montage);// 0x491cffc
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt);// 0x26f7d84
	void Montage_Pause(const AnimMontage* Montage);// 0x491cf84
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x491cec8
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x491ce04
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x250ec20
	bool Montage_IsActive(const AnimMontage* Montage);// 0x491cd84
	float Montage_GetPosition(const AnimMontage* Montage);// 0x491cd04
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x491cc84
	FName Montage_GetNextSection(const AnimMontage* Montage, FName SectionName);// 0x491cbac
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x491cb2c
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x491caa4
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x491ca24
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x491c954
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x491c7e4
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x491c720
	bool IsAnyMontagePlaying();// 0x491c6f8
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x491c62c
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x491c4fc
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x491c464
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x491c35c
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x491c254
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x491c14c
	float GetRelevantAnimTime(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x491c044
	float GetRelevantAnimLength(int MachineIndex, int StateIndex, float NullAnimDefaultValue);// 0x491bf3c
	SkeletalMeshComponent* GetOwningComponent();// 0x491bf14
	Actor* GetOwningActor();// 0x491beec
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x491be28
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x491bd64
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x491bca0
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x491bbdc
	float GetInstanceMachineWeight(int MachineIndex);// 0x491bb5c
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x491badc
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x491ba5c
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x491b9dc
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x491b95c
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x491b8dc
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x491b85c
	float GetCurveValue(FName CurveName);// 0x491b7dc
	FName GetCurrentStateName(int MachineIndex);// 0x491b754
	AnimMontage* GetCurrentActiveMontage();// 0x491b72c
	AnimMontage* GetCurMontageBySlot(FName SlotName);// 0x491b6ac
	void ClearMorphTargets();// 0x491b698
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x491b5ac
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x46f6b154
	void BlueprintPostEvaluateAnimation();// 0x46f6b154
	void BlueprintInitializeAnimation();// 0x46f6b154
	void BlueprintBeginPlay();// 0x46f6b154

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 12]
	FName[] BoneNames;//[Offset: 0xc, Size: 12]
	FName SkeletalMeshName;//[Offset: 0x18, Size: 8]
	FName SnapshotName;//[Offset: 0x20, Size: 8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 8]
	FName NextMarkerName;//[Offset: 0x8, Size: 8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c, Size: 12]
	Guid AssetGuid;//[Offset: 0x28, Size: 16]

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 8]
	bool DefaultProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimUpdateRateParameters
	int UpdateRate;//[Offset: 0x4, Size: 4]
	int EvaluationRate;//[Offset: 0x8, Size: 4]
	bool bInterpolateSkippedFrames;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bShouldUseLodMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bShouldUseMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bSkipUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bSkipEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	float TickedPoseOffestTime;//[Offset: 0x10, Size: 4]
	float AdditionalTime;//[Offset: 0x14, Size: 4]
	int BaseNonRenderedUpdateRate;//[Offset: 0x1c, Size: 4]
	int BaseNonRenderedUpdateRateHigh;//[Offset: 0x20, Size: 4]
	float MaxDistFromMainChar;//[Offset: 0x24, Size: 4]
	float[] BaseVisibleDistanceFactorThesholds;//[Offset: 0x28, Size: 12]
	<int,int> LODToFrameSkipMap;//[Offset: 0x34, Size: 60]
	int MaxEvalRateForInterpolation;//[Offset: 0x70, Size: 4]
	enum ShiftBucket;//[Offset: 0x74, Size: 1]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 4]
	byte Weights;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	float SavedPosition;//[Offset: 0x8, Size: 4]
	float SavedPlayRate;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: DynamicBatchSectionInfo
	MaterialBatchInfo[] TransientMatInfo;//[Offset: 0x1c, Size: 12]
	MaterialInterface*[] BatchMatList;//[Offset: 0x28, Size: 12]
	<int,MaterialInstanceDynamic*> CacheAtlasMaterials;//[Offset: 0x34, Size: 60]

--------------------------------
Class: MaterialBatchInfo
	<enum,DynamicAtlasTexture2D*> AtlasTextures;//[Offset: 0x4, Size: 60]

--------------------------------
Class: DynamicAtlasTexture2D.Texture2D.Texture.Object

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xa0, Size: 4]
	int LevelIndex;//[Offset: 0xa4, Size: 4]
	int FirstResourceMemMip;//[Offset: 0xa8, Size: 4]
	IntPoint ImportedSize;//[Offset: 0xac, Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xb8, Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc2, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc2, Size: 1]
	byte AddressX;//[Offset: 0xc3, Size: 1]
	byte AddressY;//[Offset: 0xc4, Size: 1]
	int Blueprint_GetSizeY();// 0x4a77b04
	int Blueprint_GetSizeX();// 0x4a77adc

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x49fd7e4
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x49fd728
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x49fd664
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x49fd564
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x49fd4d4
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x49fd454
	float K2_GetScalarParameterValue(FName ParameterName);// 0x49fd3d4
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source);// 0x49fd35c
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x49fd2e4
	void CopyInterpParameters(MaterialInstance* Source);// 0x49fd26c

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	int MeshLogicType;//[Offset: 0x50, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x54, Size: 4]
	MaterialInterface* Parent;//[Offset: 0x58, Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x60, Size: 12]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x6c, Size: 12]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x78, Size: 12]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x84, Size: 12]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x90, Size: 60]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xd0, Size: 16]
	Texture*[] PermutationTextureReferences;//[Offset: 0xf4, Size: 12]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Font* FontValue;//[Offset: 0x8, Size: 4]
	int FontPage;//[Offset: 0xc, Size: 4]
	Guid ExpressionGUID;//[Offset: 0x10, Size: 16]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x24, Size: 12]
	Texture2D*[] Textures;//[Offset: 0x30, Size: 12]
	int IsRemapped;//[Offset: 0x3c, Size: 4]
	float EmScale;//[Offset: 0x40, Size: 4]
	float Ascent;//[Offset: 0x44, Size: 4]
	float Descent;//[Offset: 0x48, Size: 4]
	float Leading;//[Offset: 0x4c, Size: 4]
	int Kerning;//[Offset: 0x50, Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54, Size: 144]
	int NumCharacters;//[Offset: 0xe4, Size: 4]
	int[] MaxCharHeight;//[Offset: 0xe8, Size: 12]
	float ScalingFactor;//[Offset: 0xf4, Size: 4]
	int LegacyFontSize;//[Offset: 0xf8, Size: 4]
	FName LegacyFontName;//[Offset: 0x100, Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108, Size: 24]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 4]
	int StartV;//[Offset: 0x4, Size: 4]
	int USize;//[Offset: 0x8, Size: 4]
	int VSize;//[Offset: 0xc, Size: 4]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 12]
	float Height;//[Offset: 0xc, Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	byte CharacterSet;//[Offset: 0x11, Size: 1]
	FString Chars;//[Offset: 0x14, Size: 12]
	FString UnicodeRange;//[Offset: 0x20, Size: 12]
	FString CharsFilePath;//[Offset: 0x2c, Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38, Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48, Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	int TexturePageWidth;//[Offset: 0x5c, Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60, Size: 4]
	int XPadding;//[Offset: 0x64, Size: 4]
	int YPadding;//[Offset: 0x68, Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c, Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70, Size: 4]
	int ExtendBoxRight;//[Offset: 0x74, Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78, Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int Kerning;//[Offset: 0x80, Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88, Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 12]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc, Size: 12]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 12]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 8]
	FontData Font;//[Offset: 0x8, Size: 20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 12]
	enum Hinting;//[Offset: 0xc, Size: 1]
	enum LoadingPolicy;//[Offset: 0xd, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x10, Size: 12]
	FString Cultures;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 12]
	float ScalingFactor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	Texture* ParameterValue;//[Offset: 0x8, Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc, Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8, Size: 4]
	byte BlendMode;//[Offset: 0xc, Size: 1]
	byte ShadingModel;//[Offset: 0xd, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x16c, Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 1]
	float GravityScale;//[Offset: 0x174, Size: 4]
	float MaxStepHeight;//[Offset: 0x178, Size: 4]
	float JumpZVelocity;//[Offset: 0x17c, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x180, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x184, Size: 4]
	float WalkableFloorZ;//[Offset: 0x188, Size: 4]
	byte MovementMode;//[Offset: 0x18c, Size: 1]
	byte CustomMovementMode;//[Offset: 0x18d, Size: 1]
	float GroundFriction;//[Offset: 0x1c0, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x1c4, Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1c8, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1cc, Size: 4]
	float MaxFlySpeed;//[Offset: 0x1d0, Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x1d4, Size: 4]
	float MaxAcceleration;//[Offset: 0x1d8, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x1dc, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x1e0, Size: 4]
	float BrakingFriction;//[Offset: 0x1e4, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e8, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x1ec, Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1f0, Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1f4, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1f8, Size: 4]
	float AirControl;//[Offset: 0x1fc, Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x200, Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x204, Size: 4]
	float FallingLateralFriction;//[Offset: 0x208, Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x20c, Size: 4]
	float Buoyancy;//[Offset: 0x210, Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x214, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x218, Size: 4]
	Rotator RotationRate;//[Offset: 0x21c, Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x228, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x228, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x228, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x228, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x229, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x229, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x229, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x229, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x229, Size: 1]
	bool bForceNoSimulatePrediction;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x229, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x229, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x22c, Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x230, Size: 4]
	float OutofWaterZ;//[Offset: 0x234, Size: 4]
	float Mass;//[Offset: 0x238, Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x244, Size: 4]
	float InitialPushForceFactor;//[Offset: 0x248, Size: 4]
	float PushForceFactor;//[Offset: 0x24c, Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x250, Size: 4]
	float TouchForceFactor;//[Offset: 0x254, Size: 4]
	float MinTouchForce;//[Offset: 0x258, Size: 4]
	float MaxTouchForce;//[Offset: 0x25c, Size: 4]
	float RepulsionForce;//[Offset: 0x260, Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x268, Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x26c, Size: 4]
	Vector Acceleration;//[Offset: 0x270, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x27c, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x290, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x2a0, Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x2ac, Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x2b0, Size: 12]
	Vector PendingForceToApply;//[Offset: 0x2bc, Size: 12]
	float AnalogInputModifier;//[Offset: 0x2c8, Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x2d4, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x2d8, Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2dc, Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2e0, Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2e4, Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2e8, Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2ec, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2f0, Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2f4, Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2f8, Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2fc, Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x300, Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x304, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x308, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x30d, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x310, Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x314, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x318, Size: 152]
	byte DefaultLandMovementMode;//[Offset: 0x3b0, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x3b1, Size: 1]
	byte GroundMovementMode;//[Offset: 0x3b2, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b3, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b3, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b3, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b3, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b3, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3b3, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b3, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b3, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b4, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b4, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b4, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b4, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3b4, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b4, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b4, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b5, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b5, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b5, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b5, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b5, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b5, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b5, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b6, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b6, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b6, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3c8, Size: 4]
	Vector RequestedVelocity;//[Offset: 0x3cc, Size: 12]
	int AvoidanceUID;//[Offset: 0x3d8, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3dc, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3e0, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3e4, Size: 4]
	float AvoidanceWeight;//[Offset: 0x3e8, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x3ec, Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x498, Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x49c, Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x4a0, Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x4a4, Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x4a8, Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x4ac, Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4b0, Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4f4, Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4f8, Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x620, Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x660, Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x66d, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x49506b0
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x4950638
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x4950574
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x49504f0
	void SetGroupsToIgnore(int GroupFlags);// 0x4950478
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x49503f4
	void SetGroupsToAvoid(int GroupFlags);// 0x495037c
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x49502f8
	void SetAvoidanceGroup(int GroupFlags);// 0x4950280
	void SetAvoidanceEnabled(bool bEnable);// 0x4950200
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x495009c
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x494fb34
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x494f5cc
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x494f220
	float K2_GetWalkableFloorZ();// 0x494f1f8
	float K2_GetWalkableFloorAngle();// 0x25f8044
	float K2_GetModifiedMaxAcceleration();// 0x494f1c8
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x494f0d0
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x494ef00
	bool IsWalking();// 0x494eed0
	bool IsWalkable(out const HitResult Hit);// 0x25fa1dc
	float GetValidPerchRadius();// 0x494eea8
	float GetPerchRadiusThreshold();// 0x494ee80
	PrimitiveComponent* GetMovementBase();// 0x494ee58
	float GetMinAnalogSpeed();// 0x494ee28
	float GetMaxJumpHeightWithJumpTime();// 0x494edf8
	float GetMaxJumpHeight();// 0x2509b94
	float GetMaxBrakingDeceleration();// 0x494edc8
	float GetMaxAcceleration();// 0x494ed98
	Vector GetImpartedMovementBaseVelocity();// 0x494ed48
	Vector GetCurrentAcceleration();// 0x494ed00
	Character* GetCharacterOwner();// 0x2445a8c
	float GetAnalogInputModifier();// 0x494ecd8
	void DisableMovement();// 0x25aa790
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x494ea88
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x494e68c
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x494e348
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x494e080
	void ClientAckGoodMove(float TimeStamp);// 0x494e000
	void ClearAccumulatedForces();// 0x2590ccc
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x494ddfc
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x494dca0
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x494dbc4
	void AddForce(Vector Force);// 0x494db3c

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x134, Size: 4]
	Vector K2_GetInputVector();// 0x4a2423c
	bool IsMoveInputIgnored();// 0x4a24284
	Vector GetPendingInputVector();// 0x4a2423c
	Pawn* GetPawnOwner();// 0x4a24214
	Vector GetLastInputVector();// 0x4a241cc
	Vector ConsumeInputVector();// 0x4a2417c
	void AddInputVector(Vector WorldVector, bool bForce);// 0x2505660

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x104, Size: 28]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 1]
	MovementProperties MovementState;//[Offset: 0x128, Size: 4]
	void StopMovementKeepPathing();// 0x4a0d650
	void StopActiveMovement();// 0x27634bc
	bool IsSwimming();// 0x4a0d620
	bool IsMovingOnGround();// 0x494eed0
	bool IsFlying();// 0x4a0d5f0
	bool IsFalling();// 0x4a0d5c0
	bool IsCrouching();// 0x4a0d590

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xd0, Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xd4, Size: 4]
	Vector Velocity;//[Offset: 0xdc, Size: 12]
	Vector PlaneConstraintNormal;//[Offset: 0xe8, Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xf4, Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x100, Size: 1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x100, Size: 1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x100, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x103, Size: 1]
	void StopMovementImmediately();// 0x23d0bb0
	void SnapUpdatedComponentToPlane();// 0x251ec90
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x2507c20
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x4a03690
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x4a03608
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x4a03520
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x4a03498
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x4a03418
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x27add1c
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x4a03244
	float K2_GetModifiedMaxSpeed();// 0x4a03214
	float K2_GetMaxSpeedModifier();// 0x4a031e4
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x24dc0d4
	Vector GetPlaneConstraintOrigin();// 0x4a031b0
	Vector GetPlaneConstraintNormal();// 0x4a0317c
	enum GetPlaneConstraintAxisSetting();// 0x4a03160
	PhysicsVolume* GetPhysicsVolume();// 0x4a03130
	float GetMaxSpeed();// 0x2362e5c
	float GetGravityZ();// 0x25d3450
	Vector ConstrainNormalToPlane(Vector Normal);// 0x4a03084
	Vector ConstrainLocationToPlane(Vector Location);// 0x4a02fd8
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x4a02f2c

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 4]
	float AgentHeight;//[Offset: 0x8, Size: 4]
	float AgentStepHeight;//[Offset: 0xc, Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14, Size: 4]
	int AgentType;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x2e4, Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x2e8, Size: 88]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x340, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x340, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x340, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x340, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x341, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x344, Size: 4]
	int AgentType;//[Offset: 0x348, Size: 4]
	uint32 DataVersion;//[Offset: 0x34c, Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3d8, Size: 12]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x20, Size: 8]
	Color Color;//[Offset: 0x28, Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x2c, Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x38, Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x40, Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 12]
	int AreaID;//[Offset: 0xc, Size: 4]
	class Object* AreaClass;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 4]
	float LineDist;//[Offset: 0x8, Size: 4]
	HitResult HitResult;//[Offset: 0x10, Size: 136]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 4]
	float Distance;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18, Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30, Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c, Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48, Size: 12]
	float PenetrationDepth;//[Offset: 0x54, Size: 4]
	int Item;//[Offset: 0x58, Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c, Size: 8]
	Actor* Actor;//[Offset: 0x64, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c, Size: 8]
	FName BoneName;//[Offset: 0x78, Size: 8]
	int FaceIndex;//[Offset: 0x80, Size: 4]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80, Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x560, Size: 4]
	float CapsuleRadius;//[Offset: 0x564, Size: 4]
	float CapsuleHeight;//[Offset: 0x568, Size: 4]
	void SetCapsuleSize(float InRadius, float inHalfHeight, bool bUpdateOverlaps);// 0x494aab0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x494a9e8
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x494a920
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x494a834
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x494a750
	float GetUnscaledCapsuleRadius();// 0x494a734
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x494a704
	float GetUnscaledCapsuleHalfHeight();// 0x494a6e8
	float GetShapeScale();// 0x494a678
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x494a520
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x494a3d0
	float GetScaledCapsuleRadius();// 0x494a350
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x494a2c8
	float GetScaledCapsuleHalfHeight();// 0x494a250

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x550, Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x554, Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x558, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x558, Size: 1]
	class NavArea* AreaClass;//[Offset: 0x55c, Size: 4]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 12]
	Rotator Rotation;//[Offset: 0x1c, Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 224]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4, Size: 4]
	float Position;//[Offset: 0x8, Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24, Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28, Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34, Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4, Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0, Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x2e4, Size: 4]
	byte Ping;//[Offset: 0x2e8, Size: 1]
	FString PlayerName;//[Offset: 0x2ec, Size: 12]
	int PlayerID;//[Offset: 0x304, Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x308, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x308, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x308, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x308, Size: 1]
	int StartTime;//[Offset: 0x30c, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x310, Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x318, Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x324, Size: 12]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x46f6b154
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x46f6b154
	void OnRep_UniqueId();// 0x23444bc
	void OnRep_Score();// 0x234daf8
	void OnRep_PlayerName();// 0x23444d8
	void OnRep_bIsInactive();// 0x23444f4

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	float DamageImpulse;//[Offset: 0x20, Size: 4]
	float DestructibleImpulse;//[Offset: 0x24, Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28, Size: 4]
	float DamageFalloff;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x32c, Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x334, Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x338, Size: 4]
	HUD* MyHUD;//[Offset: 0x340, Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x344, Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x348, Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x350, Size: 4]
	Actor*[] HiddenActors;//[Offset: 0x354, Size: 12]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x360, Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x370, Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x374, Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x380, Size: 12]
	int ClientCap;//[Offset: 0x38c, Size: 4]
	CheatManager* CheatManager;//[Offset: 0x390, Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x394, Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x398, Size: 4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x39c, Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x408, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x409, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x438, Size: 4]
	NetConnection* NetConnection;//[Offset: 0x43c, Size: 4]
	float InputYawScale;//[Offset: 0x44c, Size: 4]
	float InputPitchScale;//[Offset: 0x450, Size: 4]
	float InputRollScale;//[Offset: 0x454, Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x458, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x458, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x458, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x458, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x458, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x458, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x45c, Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x460, Size: 12]
	byte DefaultMouseCursor;//[Offset: 0x46c, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x46d, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x46e, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x46f, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x470, Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 1]
	bool bActiveReplayViewer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x484, Size: 1]
	bool bEnableReplayRecord;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x484, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4fc, Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x500, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x50c, Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x554, Size: 4]
	Vector SpawnLocation;//[Offset: 0x558, Size: 12]
	bool bIsActorChannelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	bool bIsDemoViewController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 1]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x56e, Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x570, Size: 2]
	bool WasInputKeyJustReleased(Key Key);// 0x4a36728
	bool WasInputKeyJustPressed(Key Key);// 0x4a36568
	void ToggleSpeaking(bool bInSpeaking);// 0x4a364e0
	void SwitchLevel(FString URL);// 0x4a36448
	void StopHapticEffect(enum Hand);// 0x4a363d0
	void StartFire(byte FireModeNum);// 0x4a36350
	void SetVirtualJoystickVisibility(bool bVisible);// 0x4a362c8
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4a36128
	void SetName(FString S);// 0x4a36090
	void SetMouseLocation(const int X, const int Y);// 0x4a35fd4
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x4a35f18
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x4a35e18
	void SetControllerLightColor(Color Color);// 0x4a35da8
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x4a35bdc
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x4a35ac0
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x4a359b0
	void ServerViewPrevPlayer();// 0x4a35954
	void ServerViewNextPlayer();// 0x4a358f8
	void ServerVerifyViewTarget();// 0x4a3589c
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x4a35790
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x4a3567c
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x4a35340
	void ServerToggleAILogging();// 0x4a352e4
	void ServerShortTimeout();// 0x4a35288
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x4a351c0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x4a35098
	void ServerRestartPlayer();// 0x4a3503c
	void ServerPause();// 0x4a34fe0
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x4a34f3c
	void ServerMutePlayer(UniqueNetIdRepl PlayerID);// 0x4a34c00
	void ServerCheckClientPossessionReliable();// 0x4a34ba4
	void ServerCheckClientPossession();// 0x4a34b48
	void ServerChangeName(FString S);// 0x4a34a80
	void ServerCamera(FName NewMode);// 0x4a349cc
	void ServerAcknowledgePossession(Pawn* P);// 0x4a34918
	void SendToConsole(FString Command);// 0x4a34880
	void RestartLevel();// 0x26fb750
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x4a34750
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x4a34600
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x4a34320
	void Pause();// 0x4a342fc
	void OnUIStyleCreateJoystick();// 0x27183c4
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x4a34274
	void LocalTravel(FString URL);// 0x4a341dc
	bool IsInputKeyDown(Key Key);// 0x4a3401c
	void InitVirtualJoystickBySetting();// 0x4a34000
	void GetViewportSize(out int SizeX, out int SizeY);// 0x4a33f20
	SpectatorPawn* GetSpectatorPawn();// 0x4a33f04
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x4a33e1c
	Vector GetInputVectorKeyState(Key Key);// 0x4a33c4c
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4a33acc
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x4a339ec
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x4a33838
	float GetInputKeyTimeDown(Key Key);// 0x4a33678
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4a33554
	float GetInputAnalogKeyState(Key Key);// 0x4a33394
	HUD* GetHUD();// 0x4a3336c
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4a331c4
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4a33048
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4a32ecc
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4a32d68
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4a32c30
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4a32af8
	Vector GetFocalLocation();// 0x26acad0
	void FOV(float NewFOV);// 0x494e000
	void FadeOutVirtualJoystick(float FadeDuration);// 0x4a32a80
	void FadeInVirtualJoystick(float FadeDuration);// 0x4a32a08
	void EnableCheats();// 0x4a329ec
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x4a32868
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x4a32770
	void ConsoleKey(Key Key);// 0x4a325b0
	void ClientWasKicked(const FText KickReason);// 0x4a324b4
	void ClientVoiceHandshakeComplete();// 0x4a32498
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x4a322e0
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerID);// 0x4a320c8
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x4a31f44
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x4a31dd0
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x4a31c60
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x4a31b9c
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x4a31ad0
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x4a31a50
	void ClientStartOnlineSession();// 0x2460d50
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4a319d0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x4a318c8
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x265a85c
	void ClientSetHUD(class HUD NewHUDClass);// 0x4a31848
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x4a31740
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x4a315c4
	void ClientSetCameraMode(FName NewCamMode);// 0x4a31544
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x4a313a0
	void ClientSetBlockOnAsyncLoading();// 0x262307c
	void ClientReturnToMainMenu(FString ReturnReason);// 0x4a31308
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x2369de8
	void ClientRestart(Pawn* NewPawn);// 0x4a31288
	void ClientReset();// 0x4a3126c
	void ClientRepObjRef(Object* Object);// 0x4a311ec
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x4a31054
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x4a30ef8
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x4a30dd4
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x4a30c70
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x4a30b68
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x4a309fc
	void ClientPlayCameraShakeWithWorldLocation(class CameraShake Shake, Vector WorldLocation, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4a30854
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4a30700
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x4a30430
	void ClientMutePlayer(UniqueNetIdRepl PlayerID);// 0x4a30218
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x4a300f0
	void ClientIgnoreMoveInput(bool bIgnore);// 0x4a30068
	void ClientIgnoreLookInput(bool bIgnore);// 0x4a2ffe0
	void ClientGotoState(FName NewState);// 0x4a2ff60
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x4a2fe94
	void ClientForceGarbageCollection();// 0x4a2fe78
	void ClientFlushLevelStreaming();// 0x4a2fe64
	void ClientEndOnlineSession();// 0x256b214
	void ClientEnableNetworkVoice(bool bEnable);// 0x4a2fddc
	void ClientCommitMapChange();// 0x4a2fdc0
	void ClientClearCameraLensEffects();// 0x4a2fda4
	void ClientCapBandwidth(int Cap);// 0x4a2fd24
	void ClientCancelPendingMapChange();// 0x4a2fd08
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x4a2fbec
	void ClearAudioListenerOverride();// 0x4a2fbd8
	void Camera(FName NewMode);// 0x4a2fb58
	void AddYawInput(float Val);// 0x260477c
	void AddRollInput(float Val);// 0x2fc6758
	void AddPitchInput(float Val);// 0x4a2fad8
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x26a58d8

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20, Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24, Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28, Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x2e4, Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e8, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e8, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e8, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x2ec, Size: 12]
	FName[] DebugDisplay;//[Offset: 0x300, Size: 12]
	FName[] ToggledDebugCategories;//[Offset: 0x30c, Size: 12]
	Canvas* Canvas;//[Offset: 0x318, Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x31c, Size: 4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x320, Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x32c, Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x330, Size: 4]
	void ShowHUD();// 0x234daf8
	void ShowDebugToggleSubCategory(FName Category);// 0x498a9f4
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x498a97c
	void ShowDebug(FName DebugType);// 0x498a8fc
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x498a838
	void RemoveAllDebugStrings();// 0x498a824
	void ReceiveHitBoxRelease(const FName BoxName);// 0x46f6b154
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x46f6b154
	void ReceiveHitBoxClick(const FName BoxName);// 0x46f6b154
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x46f6b154
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x46f6b154
	Vector Project(Vector Location);// 0x498a780
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x498a5b0
	PlayerController* GetOwningPlayerController();// 0x259a390
	Pawn* GetOwningPawn();// 0x498a588
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x498a35c
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x498a1c4
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x4989d4c
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x4989b00
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x4989964
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x49895e0
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x49893b8
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x4988fe0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x4988dfc
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x4988c80
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x4988ae4
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x4988700

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c, Size: 4]
	float OrgY;//[Offset: 0x20, Size: 4]
	float ClipX;//[Offset: 0x24, Size: 4]
	float ClipY;//[Offset: 0x28, Size: 4]
	Color DrawColor;//[Offset: 0x2c, Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	int SizeX;//[Offset: 0x34, Size: 4]
	int SizeY;//[Offset: 0x38, Size: 4]
	Plane ColorModulate;//[Offset: 0x40, Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50, Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54, Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58, Size: 4]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x4949448
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x4949364
	Vector K2_Project(Vector WorldLocation);// 0x49492c0
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x4949190
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x4948ebc
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x4948ae0
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x494894c
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x494881c
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x4948604
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x49484ac
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness);// 0x49483ac
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x4947e8c
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x4947d58

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 4]
	float Y;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 16]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 16]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 16]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 4]
	Vector SrcActorOffset;//[Offset: 0x4, Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x10, Size: 12]
	FString DebugText;//[Offset: 0x1c, Size: 12]
	float TimeRemaining;//[Offset: 0x28, Size: 4]
	float Duration;//[Offset: 0x2c, Size: 4]
	Color TextColor;//[Offset: 0x30, Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float FontScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x2e4, Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2e8, Size: 4]
	float DefaultFOV;//[Offset: 0x2f8, Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x300, Size: 4]
	float DefaultAspectRatio;//[Offset: 0x308, Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x350, Size: 1424]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x8e0, Size: 1424]
	TViewTarget ViewTarget;//[Offset: 0xe70, Size: 1440]
	TViewTarget PendingViewTarget;//[Offset: 0x1410, Size: 1440]
	CameraModifier*[] ModifierList;//[Offset: 0x19c4, Size: 12]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x19d0, Size: 12]
	float FreeCamDistance;//[Offset: 0x19dc, Size: 4]
	Vector FreeCamOffset;//[Offset: 0x19e0, Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x19ec, Size: 12]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x1a08, Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1a14, Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1a18, Size: 4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1a38, Size: 12]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x1a50, Size: 12]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x1a5c, Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x1a68, Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a6c, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a6c, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a6c, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a6d, Size: 1]
	float ViewPitchMin;//[Offset: 0x1a70, Size: 4]
	float ViewPitchMax;//[Offset: 0x1a74, Size: 4]
	float ViewYawMin;//[Offset: 0x1a78, Size: 4]
	float ViewYawMax;//[Offset: 0x1a7c, Size: 4]
	float ViewRollMin;//[Offset: 0x1a80, Size: 4]
	float ViewRollMax;//[Offset: 0x1a84, Size: 4]
	Transform BaseCamAnimTrans;//[Offset: 0x1a90, Size: 48]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x4a2d608
	void StopCameraFade();// 0x267ec00
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x4a2d53c
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x4a2d470
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x4a2d3a4
	void StopAllCameraShakes(bool bImmediately);// 0x4a2d31c
	void StopAllCameraAnims(bool bImmediate);// 0x27c8150
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x4a2d130
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x4a2d01c
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x497507c
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x4a2cf9c
	CameraShake* PlayCameraShakeWithWorldLocation(class CameraShake ShakeClass, Vector WorldLocation, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4a2cde4
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4a2cc88
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4a2c964
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x4a2c7c0
	void OnPhotographySessionStart();// 0x23444bc
	void OnPhotographySessionEnd();// 0x23444f4
	void OnPhotographyMultiPartCaptureStart();// 0x23444d8
	void OnPhotographyMultiPartCaptureEnd();// 0x234daf8
	PlayerController* GetOwningPlayerController();// 0x4a2c790
	float GetFOVAngle();// 0x494ee28
	Rotator GetCameraRotation();// 0x241fbe8
	Vector GetCameraLocation();// 0x4a2c748
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass, bool bIncludeSuper);// 0x4a2c674
	void ClearCameraLensEffects();// 0x26da5ac
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x46f6b154
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x4a2c5ec
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4a2c564

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1408]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc, Size: 12]
	Rotator Rotation;//[Offset: 0x18, Size: 12]
	float FOV;//[Offset: 0x24, Size: 4]
	float OrthoWidth;//[Offset: 0x28, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30, Size: 4]
	float AspectRatio;//[Offset: 0x34, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]
	byte ProjectionMode;//[Offset: 0x39, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1328]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x570, Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_RadialBlurCenterPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_RadialBlurDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 1]
	bool bOverride_SRTIndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMaxOcclusionDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 1]
	bool bOverride_SRTOcclusionExponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 1]
	bool bOverride_SRTMinOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 1]
	bool bOverride_SRTSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_SRTSpecularMinOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_SRTOcclusionTint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bOverride_SRTFilterSmoothness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeSharpness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThreshold;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_FxaaConsoleEdgeThresholdMin;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	float WhiteTemp;//[Offset: 0x18, Size: 4]
	float WhiteTint;//[Offset: 0x1c, Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20, Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30, Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40, Size: 16]
	Vector4 ColorGain;//[Offset: 0x50, Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60, Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70, Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80, Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90, Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0, Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0, Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0, Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 4]
	float FilmSlope;//[Offset: 0x174, Size: 4]
	float FilmToe;//[Offset: 0x178, Size: 4]
	float FilmShoulder;//[Offset: 0x17c, Size: 4]
	float FilmBlackClip;//[Offset: 0x180, Size: 4]
	float FilmWhiteClip;//[Offset: 0x184, Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188, Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198, Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8, Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac, Size: 4]
	float FilmSaturation;//[Offset: 0x1b0, Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4, Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4, Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4, Size: 16]
	float FilmContrast;//[Offset: 0x1e4, Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8, Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec, Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0, Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4, Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204, Size: 4]
	byte BloomMethod;//[Offset: 0x208, Size: 1]
	float BloomIntensity;//[Offset: 0x20c, Size: 4]
	float BloomThreshold;//[Offset: 0x210, Size: 4]
	float BloomSizeScale;//[Offset: 0x214, Size: 4]
	float Bloom1Size;//[Offset: 0x218, Size: 4]
	float Bloom2Size;//[Offset: 0x21c, Size: 4]
	float Bloom3Size;//[Offset: 0x220, Size: 4]
	float Bloom4Size;//[Offset: 0x224, Size: 4]
	float Bloom5Size;//[Offset: 0x228, Size: 4]
	float Bloom6Size;//[Offset: 0x22c, Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230, Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240, Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250, Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260, Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270, Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280, Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290, Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294, Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298, Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0, Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac, Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0, Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4, Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8, Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc, Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0, Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4, Size: 16]
	Vector2D RadialBlurCenterPos;//[Offset: 0x2d4, Size: 8]
	float RadialBlurIntensity;//[Offset: 0x2dc, Size: 4]
	float RadialBlurDistance;//[Offset: 0x2e0, Size: 4]
	LinearColor AmbientCubemapTint;//[Offset: 0x2e4, Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2f4, Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2f8, Size: 4]
	byte AutoExposureMethod;//[Offset: 0x2fc, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x300, Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x304, Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x308, Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x30c, Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x310, Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x314, Size: 4]
	float AutoExposureBias;//[Offset: 0x318, Size: 4]
	float HistogramLogMin;//[Offset: 0x31c, Size: 4]
	float HistogramLogMax;//[Offset: 0x320, Size: 4]
	float LensFlareIntensity;//[Offset: 0x324, Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x328, Size: 16]
	float LensFlareBokehSize;//[Offset: 0x338, Size: 4]
	int LensFlareCount;//[Offset: 0x33c, Size: 4]
	float LensFlareThreshold;//[Offset: 0x340, Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x344, Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x348, Size: 16]
	float VignetteIntensity;//[Offset: 0x3c8, Size: 4]
	float GrainJitter;//[Offset: 0x3cc, Size: 4]
	float GrainIntensity;//[Offset: 0x3d0, Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3d4, Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3d8, Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3dc, Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e0, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3e4, Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3e8, Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3ec, Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3f0, Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x3f4, Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x3f8, Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x3fc, Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x400, Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x404, Size: 4]
	LinearColor SRTIndirectLightingColor;//[Offset: 0x408, Size: 16]
	float SRTIndirectLightingIntensity;//[Offset: 0x418, Size: 4]
	float SRTMaxOcclusionDistance;//[Offset: 0x41c, Size: 4]
	float SRTOcclusionContrast;//[Offset: 0x420, Size: 4]
	float SRTOcclusionExponent;//[Offset: 0x424, Size: 4]
	float SRTMinOcclusion;//[Offset: 0x428, Size: 4]
	float SRTSpecularOcclusionExponent;//[Offset: 0x42c, Size: 4]
	float SRTSpecularMinOcclusion;//[Offset: 0x430, Size: 4]
	LinearColor SRTOcclusionTint;//[Offset: 0x434, Size: 16]
	float SRTFilterSmoothness;//[Offset: 0x444, Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x448, Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x458, Size: 4]
	float ColorGradingIntensity;//[Offset: 0x45c, Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x460, Size: 4]
	byte DepthOfFieldMethod;//[Offset: 0x464, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x465, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x468, Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x46c, Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x470, Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x474, Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x478, Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x47c, Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x480, Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x484, Size: 4]
	float DepthOfFieldScale;//[Offset: 0x488, Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x48c, Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x490, Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x494, Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x498, Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x49c, Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x4a0, Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x4a4, Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a8, Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4ac, Size: 4]
	float MotionBlurAmount;//[Offset: 0x4b0, Size: 4]
	float MotionBlurMax;//[Offset: 0x4b4, Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 4]
	float LPVIntensity;//[Offset: 0x4bc, Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 4]
	float LPVSize;//[Offset: 0x4c4, Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f0, Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f4, Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4f8, Size: 4]
	float LPVFadeRange;//[Offset: 0x4fc, Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x500, Size: 4]
	float ScreenPercentage;//[Offset: 0x504, Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x508, Size: 12]
	float FxaaConsoleEdgeSharpness;//[Offset: 0x514, Size: 4]
	float FxaaConsoleEdgeThreshold;//[Offset: 0x518, Size: 4]
	float FxaaConsoleEdgeThresholdMin;//[Offset: 0x51c, Size: 4]
	Object*[] Blendables;//[Offset: 0x520, Size: 12]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 12]

--------------------------------
Class: WeightedBlendable
	float weight;//[Offset: 0x0, Size: 4]
	Object* Object;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1408]
	PlayerState* PlayerState;//[Offset: 0x590, Size: 4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	byte Priority;//[Offset: 0x1d, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20, Size: 4]
	float AlphaInTime;//[Offset: 0x24, Size: 4]
	float AlphaOutTime;//[Offset: 0x28, Size: 4]
	float Alpha;//[Offset: 0x2c, Size: 4]
	bool IsDisabled();// 0x2384970
	Actor* GetViewTarget();// 0x24b44d4
	void EnableModifier();// 0x23ab320
	void DisableModifier(bool bImmediate);// 0x4946354
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x46f6b154
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x46f6b154

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x31c, Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x320, Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x324, Size: 4]
	Transform RelativeTransform;//[Offset: 0x330, Size: 48]
	float BaseFOV;//[Offset: 0x360, Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x364, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x368, Size: 12]
	float DistFromCamera;//[Offset: 0x374, Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2e4, Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8, Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x2ec, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x2f8, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x304, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x310, Size: 12]
	void ToggleActive();// 0x496475c
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x496468c
	void SetTemplate(ParticleSystem* NewTemplate);// 0x23cdd04
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x49645d0
	void SetFloatParameter(FName ParameterName, float Param);// 0x496450c
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4964444
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4964388
	void OnRep_bCurrentlyActive();// 0x23444d8
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x241d0b0
	bool IsActive();// 0x4964360
	void Deactivate();// 0x496434c
	void Activate();// 0x4964338

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c, Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20, Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24, Size: 4]
	float WarmUpTime;//[Offset: 0x28, Size: 4]
	float WarmupTickRate;//[Offset: 0x2c, Size: 4]
	ParticleEmitter*[] Emitters;//[Offset: 0x30, Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c, Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48, Size: 4]
	bool bUseDeviceConstBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	byte LODMethod;//[Offset: 0x4d, Size: 1]
	float[] LODDistances;//[Offset: 0x50, Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x60, Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x70, Size: 28]
	float SecondsBeforeInactive;//[Offset: 0x8c, Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	float Delay;//[Offset: 0x94, Size: 4]
	float DelayLow;//[Offset: 0x98, Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa0, Size: 4]
	enum InsignificantReaction;//[Offset: 0xa4, Size: 1]
	float InsignificanceDelay;//[Offset: 0xa8, Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xac, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb0, Size: 12]
	float MacroUVRadius;//[Offset: 0xbc, Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc4, Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe0, Size: 12]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xec, Size: 12]
	bool ContainsEmitterType(class Object TypeData);// 0x4a1ef28

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20, Size: 8]
	int SubUVDataOffset;//[Offset: 0x28, Size: 4]
	byte EmitterRenderMode;//[Offset: 0x2c, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x30, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x40, Size: 4]
	int InitialAllocationCount;//[Offset: 0x44, Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48, Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c, Size: 4]
	float GPUToCPUEmitterSpawnRateScale;//[Offset: 0x50, Size: 4]
	byte DetailMode;//[Offset: 0x54, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55, Size: 1]
	enum SignificanceLevel;//[Offset: 0x56, Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24, Size: 4]
	ParticleModule*[] Modules;//[Offset: 0x28, Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34, Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38, Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c, Size: 4]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x40, Size: 12]
	ParticleModule*[] SpawnModules;//[Offset: 0x4c, Size: 12]
	ParticleModule*[] UpdateModules;//[Offset: 0x58, Size: 12]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x64, Size: 12]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0x70, Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	int PeakActiveParticles;//[Offset: 0x80, Size: 4]
	int ActualPeakParticles;//[Offset: 0x84, Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x20, Size: 4]
	Vector EmitterOrigin;//[Offset: 0x24, Size: 12]
	Rotator EmitterRotation;//[Offset: 0x30, Size: 12]
	byte ScreenAlignment;//[Offset: 0x3c, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x40, Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x44, Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48, Size: 1]
	byte SortMode;//[Offset: 0x49, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a, Size: 1]
	float EmitterDuration;//[Offset: 0x4c, Size: 4]
	float EmitterDurationLow;//[Offset: 0x50, Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 1]
	int EmitterLoops;//[Offset: 0x58, Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x5c, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x84, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x88, Size: 12]
	float EmitterDelay;//[Offset: 0x94, Size: 4]
	float EmitterDelayLow;//[Offset: 0x98, Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	byte InterpolationMethod;//[Offset: 0x9d, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xa0, Size: 4]
	int SubImages_Vertical;//[Offset: 0xa4, Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	float RandomImageTime;//[Offset: 0xac, Size: 4]
	int RandomImageChanges;//[Offset: 0xb0, Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb8, Size: 12]
	float MacroUVRadius;//[Offset: 0xc4, Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 1]
	int MaxDrawCount;//[Offset: 0xcc, Size: 4]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xd4, Size: 4]
	byte BoundingMode;//[Offset: 0xd8, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xd9, Size: 1]
	float AlphaThreshold;//[Offset: 0xdc, Size: 4]
	int CutoutSubImagesX;//[Offset: 0xe0, Size: 4]
	int CutoutSubImagesY;//[Offset: 0xe4, Size: 4]
	byte EmitterNormalsMode;//[Offset: 0xe8, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xec, Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x104, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 12]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x114, Size: 12]
	bool bUseComputeRaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	byte LODValidity;//[Offset: 0x1e, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24, Size: 4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 28]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 1]
	byte EntryCount;//[Offset: 0x1, Size: 1]
	byte EntryStride;//[Offset: 0x2, Size: 1]
	byte SubEntryStride;//[Offset: 0x3, Size: 1]
	float TimeScale;//[Offset: 0x4, Size: 4]
	float TimeBias;//[Offset: 0x8, Size: 4]
	float[] Values;//[Offset: 0xc, Size: 12]
	byte LockFlag;//[Offset: 0x18, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 4]
	int CountLow;//[Offset: 0x4, Size: 4]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x20, Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x48, Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x70, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x74, Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x80, Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x20, Size: 12]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 4]
	int ParticleFrequency;//[Offset: 0x8, Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x20, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x24, Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x64, Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x68, Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xa8, Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xac, Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xec, Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c, Size: 4]
	float MaxValue;//[Offset: 0x20, Size: 4]
	Vector MinValueVec;//[Offset: 0x24, Size: 12]
	Vector MaxValueVec;//[Offset: 0x30, Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x1f, Size: 1]
	FName EventName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x550, Size: 4]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x554, Size: 12]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x560, Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56c, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56d, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56d, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56d, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56d, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56e, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56e, Size: 1]
	byte LODMethod;//[Offset: 0x571, Size: 1]
	enum RequiredSignificance;//[Offset: 0x572, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x574, Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x580, Size: 12]
	delegate OnParticleBurst;//[Offset: 0x58c, Size: 12]
	delegate OnParticleDeath;//[Offset: 0x598, Size: 12]
	delegate OnParticleCollide;//[Offset: 0x5a4, Size: 12]
	Vector OldPosition;//[Offset: 0x5b0, Size: 12]
	Vector PartSysVelocity;//[Offset: 0x5bc, Size: 12]
	float WarmUpTime;//[Offset: 0x5c8, Size: 4]
	float WarmupTickRate;//[Offset: 0x5cc, Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x5d4, Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x5dc, Size: 4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x5fc, Size: 12]
	float CustomTimeDilation;//[Offset: 0x610, Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x654, Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x660, Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x668, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x669, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x66a, Size: 1]
	delegate OnSystemFinished;//[Offset: 0x694, Size: 12]
	bool bForceNoAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x744, Size: 1]
	void SetWarmUp(float WarmUpTime, float WarmUpRate);// 0x4a21338
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4a21268
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4a21110
	void SetTemplate(ParticleSystem* NewTemplate);// 0x4a21098
	void SetSocketName(FName InSocketName);// 0x4a21020
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4a20f64
	void SetFloatParameter(FName ParameterName, float Param);// 0x4a20ea0
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x4a20dcc
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4a20d04
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x4a20be8
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x4a20ae0
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x4a209c4
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x4a208a8
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x4a207a0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x4a20684
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x4a205b0
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x4a20480
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4a202dc
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4a20220
	void ManuallyTickComponent(float DeltaTime);// 0x4a201a8
	int GetNumActiveParticles();// 0x4a20180
	MaterialInterface* GetNamedMaterial(FName InName);// 0x4a200f8
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x4a1ffd0
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x4a1feb0
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x4a1fd88
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x4a1fc60
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x4a1fb40
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x4a1fa18
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x4a1f934
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x4a1f764
	void EndTrails();// 0x4a1f750
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x4a1f684
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4a1f52c

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 8]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 4]
	float Scalar_Low;//[Offset: 0x10, Size: 4]
	Vector Vector;//[Offset: 0x14, Size: 12]
	Vector Vector_Low;//[Offset: 0x20, Size: 12]
	Color Color;//[Offset: 0x2c, Size: 4]
	Actor* Actor;//[Offset: 0x30, Size: 4]
	MaterialInterface* Material;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c, Size: 12]
	int ActiveTab;//[Offset: 0x28, Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 12]
	CurveEdEntry[] Curves;//[Offset: 0xc, Size: 12]
	float ViewStartInput;//[Offset: 0x18, Size: 4]
	float ViewEndInput;//[Offset: 0x1c, Size: 4]
	float ViewStartOutput;//[Offset: 0x20, Size: 4]
	float ViewEndOutput;//[Offset: 0x24, Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 4]
	Color CurveColor;//[Offset: 0x4, Size: 4]
	FString CurveName;//[Offset: 0x8, Size: 12]
	int bHideCurve;//[Offset: 0x14, Size: 4]
	int bColorCurve;//[Offset: 0x18, Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x1c, Size: 4]
	int bClamp;//[Offset: 0x20, Size: 4]
	float ClampLow;//[Offset: 0x24, Size: 4]
	float ClampHigh;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x30, Size: 12]
	float SplitScreenShakeScale;//[Offset: 0x3c, Size: 4]
	<class CameraShake,CacheCameraShakeData> CacheShakeInsMap;//[Offset: 0x40, Size: 60]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float OscillationDuration;//[Offset: 0x20, Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24, Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28, Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c, Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50, Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74, Size: 12]
	float AnimPlayRate;//[Offset: 0x80, Size: 4]
	float AnimScale;//[Offset: 0x84, Size: 4]
	float AnimBlendInTime;//[Offset: 0x88, Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c, Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90, Size: 4]
	CameraAnim* Anim;//[Offset: 0x94, Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8, Size: 4]
	float shakeScale;//[Offset: 0x134, Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138, Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c, Size: 4]
	CurveFloat* AttenuationFloatCurve;//[Offset: 0x140, Size: 4]
	void ReceiveStopShake(bool bImmediately);// 0x46f6b154
	void ReceivePlayShake(float Scale);// 0x46f6b154
	bool ReceiveIsFinished();// 0x242e898
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x46f6b154

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 12]
	FOscillator Yaw;//[Offset: 0xc, Size: 12]
	FOscillator Roll;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 4]
	float Frequency;//[Offset: 0x4, Size: 4]
	byte InitialOffset;//[Offset: 0x8, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 12]
	FOscillator Y;//[Offset: 0xc, Size: 12]
	FOscillator Z;//[Offset: 0x18, Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c, Size: 4]
	float AnimLength;//[Offset: 0x20, Size: 4]
	Box BoundingBox;//[Offset: 0x24, Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float BaseFOV;//[Offset: 0x44, Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50, Size: 1328]
	float BasePostProcessBlendWeight;//[Offset: 0x580, Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x20, Size: 12]
	FName GroupName;//[Offset: 0x30, Size: 8]
	Color GroupColor;//[Offset: 0x38, Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x24, Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30, Size: 4]
	byte ActiveCondition;//[Offset: 0x34, Size: 1]
	FString TrackTitle;//[Offset: 0x38, Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c, Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20, Size: 4]
	float PlayRate;//[Offset: 0x3c, Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50, Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54, Size: 4]
	byte PlaySpace;//[Offset: 0x58, Size: 1]
	void Stop(bool bImmediate);// 0x4940744
	void SetScale(float NewDuration);// 0x49406cc
	void SetDuration(float NewDuration);// 0x4940654
	void SetCurrentTime(float NewTime);// 0x49405dc

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c, Size: 4]
	Actor* GroupActor;//[Offset: 0x20, Size: 4]
	InterpTrackInst*[] TrackInst;//[Offset: 0x24, Size: 12]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48, Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c, Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70, Size: 12]
	FName LookAtGroupName;//[Offset: 0x80, Size: 8]
	float LinCurveTension;//[Offset: 0x88, Size: 4]
	float AngCurveTension;//[Offset: 0x8c, Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90, Size: 1]
	byte RotMode;//[Offset: 0x91, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 4]
	Vector OutVal;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 12]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 8]
	float Time;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c, Size: 12]
	Rotator ResetRotation;//[Offset: 0x28, Size: 12]

--------------------------------
Class: CacheCameraShakeData
	CameraShake*[] InsList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x2e4, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x2e8, Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x2ec, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 1]
	float AspectRatio;//[Offset: 0x2fc, Size: 4]
	float FOVAngle;//[Offset: 0x300, Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x304, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x310, Size: 1328]
	int GetAutoActivatePlayerIndex();// 0x493fd30

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x240, Size: 4]
	float OrthoWidth;//[Offset: 0x244, Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x248, Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x24c, Size: 4]
	float AspectRatio;//[Offset: 0x250, Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254, Size: 1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x254, Size: 1]
	byte ProjectionMode;//[Offset: 0x255, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x258, Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260, Size: 1328]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7dc, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x2e78dcc
	void SetProjectionMode(byte InProjectionMode);// 0x4941098
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x4941024
	void SetOrthoWidth(float InOrthoWidth);// 0x4940fb0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x4940f3c
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x4940ec8
	void SetFieldOfView(float InFieldOfView);// 0x254e304
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x2e78fb4
	void SetAspectRatio(float InAspectRatio);// 0x4940e54
	void SetActive(bool bNewActive, bool bReset);// 0x23505d0
	void RemoveBlendable(interface class InBlendableObject);// 0x4940d64
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x254deb0
	void ApplyDrawDistanceOffset(float InFieldOfView);// 0x4940cec
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x4940bbc

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c, Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20, Size: 4]
	void Walk();// 0x2422910
	void ViewSelf();// 0x2510c48
	void ViewPlayer(FString S);// 0x4952660
	void ViewClass(class Actor DesiredClass);// 0x49525e0
	void ViewActor(FName actorName);// 0x4952560
	void ToggleDebugCamera();// 0x4952544
	void ToggleAILogging();// 0x4952528
	void TestCollisionDistance();// 0x495250c
	void Teleport();// 0x2374c8c
	void Summon(FString ClassName);// 0x4952474
	void StreamLevelOut(FName PackageName);// 0x49523f4
	void StreamLevelIn(FName PackageName);// 0x4952374
	void Slomo(float NewTimeDilation);// 0x2449b08
	void SetWorldOrigin();// 0x4952360
	void SetNavDrawDistance(float DrawDistance);// 0x49522e8
	void SetMouseSensitivityToDefault();// 0x49522d4
	void ServerToggleAILogging();// 0x4952278
	void ReceiveInitCheatManager();// 0x46f6b154
	void ReceiveEndPlay();// 0x46f6b154
	void RebuildNavigation();// 0x495225c
	void PlayersOnly();// 0x2511168
	void OnlyLoadLevel(FName PackageName);// 0x49521dc
	void LogLoc();// 0x49521c0
	void InvertMouse();// 0x49521ac
	void God();// 0x2384458
	void Ghost();// 0x23ab320
	void FreezeFrame(float Delay);// 0x23f3188
	void Fly();// 0x2374d20
	void FlushLog();// 0x4952190
	void EnableDebugCamera();// 0x236bbe8
	void DumpVoiceMutingState();// 0x2389380
	void DumpPartyState();// 0x4952174
	void DumpOnlineSessionState();// 0x4952158
	void DumpChatState();// 0x23892a0
	void DisableDebugCamera();// 0x236bc58
	void DestroyTarget();// 0x270a21c
	void DestroyPawns(class Pawn aClass);// 0x3e1b158
	void DestroyAllPawnsExceptTarget();// 0x2385360
	void DestroyAll(class Actor aClass);// 0x49520d8
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x4952014
	void DebugCapsuleSweepPawn();// 0x4951ff8
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x4951f70
	void DebugCapsuleSweepClear();// 0x490f928
	void DebugCapsuleSweepChannel(byte Channel);// 0x4951ef0
	void DebugCapsuleSweepCapture();// 0x4951ed4
	void DebugCapsuleSweep();// 0x4951eb8
	void DamageTarget(float DamageAmount);// 0x2510d58
	void CheatScript(FString ScriptName);// 0x4951dd4
	void ChangeSize(float F);// 0x2374eec
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x4951c18
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x4951a38
	void BugIt(FString ScreenShotDescription);// 0x49519a0

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x580, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x584, Size: 4]
	float SpeedScale;//[Offset: 0x598, Size: 4]
	float InitialMaxSpeed;//[Offset: 0x59c, Size: 4]
	float InitialAccel;//[Offset: 0x5a0, Size: 4]
	float InitialDecel;//[Offset: 0x5a4, Size: 4]
	void ToggleDisplay();// 0x495b36c
	void ShowDebugSelectedInfo();// 0x495b350
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x495b2d8
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x46f6b154
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x46f6b154
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x46f6b154
	Actor* GetSelectedActor();// 0x495b2b0

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x550, Size: 4]
	float FrustumAngle;//[Offset: 0x554, Size: 4]
	float FrustumAspectRatio;//[Offset: 0x558, Size: 4]
	float FrustumStartDist;//[Offset: 0x55c, Size: 4]
	float FrustumEndDist;//[Offset: 0x560, Size: 4]
	Texture* Texture;//[Offset: 0x564, Size: 4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 1]
	InputTouchCacheData[] InputTouchCacheDataList;//[Offset: 0x170, Size: 12]
	KeyBind[] DebugExecBindings;//[Offset: 0x188, Size: 12]
	FName[] InvertedAxis;//[Offset: 0x1b8, Size: 12]
	void SetMouseSensitivity(const float Sensitivity);// 0x4a39e60
	void SetBind(FName BindName, FString Command);// 0x4a39d84
	void InvertAxisKey(const Key AxisKey);// 0x4a39bcc
	void InvertAxis(const FName AxisName);// 0x4a39b54
	void ClearSmoothing();// 0x4a39b40

--------------------------------
Class: InputTouchCacheData
	int ITCDHandle;//[Offset: 0x0, Size: 4]
	int ITCDType;//[Offset: 0x4, Size: 4]
	Vector2D ITCDTouchLocation;//[Offset: 0x8, Size: 8]
	int ITCDTouchpadIndex;//[Offset: 0x10, Size: 4]
	float ITCDforce;//[Offset: 0x14, Size: 4]
	float ITCDTimeStamp;//[Offset: 0x18, Size: 4]

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 16]
	FString Command;//[Offset: 0x10, Size: 12]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c, Size: 12]
	float Duration;//[Offset: 0x28, Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x4, Size: 88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54, Size: 4]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x30, Size: 12]
	NetDriver* Driver;//[Offset: 0x3c, Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40, Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44, Size: 4]
	Channel*[] OpenChannels;//[Offset: 0x48, Size: 12]
	Actor*[] SentTemporaries;//[Offset: 0x54, Size: 12]
	Actor* ViewTarget;//[Offset: 0x60, Size: 4]
	Actor* OwningActor;//[Offset: 0x64, Size: 4]
	int MaxPacket;//[Offset: 0x68, Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xec, Size: 12]
	double LastReceiveTime;//[Offset: 0x148, Size: 8]
	Channel*[] ChannelsToTick;//[Offset: 0x51cc8, Size: 12]
	float AsyncReplicatedActorSpawnDistA;//[Offset: 0x51d04, Size: 4]
	float AsyncReplicatedActorSpawnDistB;//[Offset: 0x51d08, Size: 4]
	float SpawnReplicatedActorThreshold;//[Offset: 0x51d0c, Size: 4]
	int SpawnReplicatedActorMaxFrameDelay;//[Offset: 0x51d10, Size: 4]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x51d64, Size: 4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20, Size: 12]
	int MaxDownloadSize;//[Offset: 0x2c, Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x34, Size: 4]
	int MaxInternetClientRate;//[Offset: 0x38, Size: 4]
	int MaxClientRate;//[Offset: 0x3c, Size: 4]
	float ServerTravelPause;//[Offset: 0x40, Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x44, Size: 4]
	float RelevantTimeout;//[Offset: 0x48, Size: 4]
	float KeepAliveTime;//[Offset: 0x4c, Size: 4]
	float InitialConnectTimeout;//[Offset: 0x50, Size: 4]
	int IgnoreNetReadyReplicateActorCount;//[Offset: 0x54, Size: 4]
	float ConnectionTimeout;//[Offset: 0x58, Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x5c, Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x64, Size: 4]
	NetConnection*[] ClientConnections;//[Offset: 0x68, Size: 12]
	World* World;//[Offset: 0x80, Size: 4]
	class Object* NetConnectionClass;//[Offset: 0x94, Size: 4]
	Property* RoleProperty;//[Offset: 0x98, Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0x9c, Size: 4]
	FName NetDriverName;//[Offset: 0xa0, Size: 8]
	float Time;//[Offset: 0xcc, Size: 4]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c, Size: 12]
	float ActiveOpacity;//[Offset: 0x28, Size: 4]
	float InactiveOpacity;//[Offset: 0x2c, Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30, Size: 4]
	float TimeUntilReset;//[Offset: 0x34, Size: 4]
	float ActivationDelay;//[Offset: 0x38, Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float StartupDelay;//[Offset: 0x40, Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 4]
	Texture2D* Image2;//[Offset: 0x4, Size: 4]
	SlateBrush Brush1;//[Offset: 0x8, Size: 104]
	SlateBrush Brush2;//[Offset: 0x70, Size: 104]
	Vector2D Center;//[Offset: 0xd8, Size: 8]
	Vector2D VisualSize;//[Offset: 0xe0, Size: 8]
	Vector2D ThumbSize;//[Offset: 0xe8, Size: 8]
	Vector2D InteractionSize;//[Offset: 0xf0, Size: 8]
	Vector2D InputScale;//[Offset: 0xf8, Size: 8]
	Key MainInputKey;//[Offset: 0x100, Size: 16]
	Key AltInputKey;//[Offset: 0x110, Size: 16]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4, Size: 8]
	Margin Margin;//[Offset: 0xc, Size: 16]
	SlateColor TintColor;//[Offset: 0x1c, Size: 28]
	Object* ResourceObject;//[Offset: 0x38, Size: 4]
	FName ResourceName;//[Offset: 0x40, Size: 8]
	Box2D UVRegion;//[Offset: 0x48, Size: 20]
	byte DrawAs;//[Offset: 0x5c, Size: 1]
	byte Tiling;//[Offset: 0x5d, Size: 1]
	byte Mirroring;//[Offset: 0x5e, Size: 1]
	byte ImageType;//[Offset: 0x5f, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 4]
	float Top;//[Offset: 0x4, Size: 4]
	float Right;//[Offset: 0x8, Size: 4]
	float Bottom;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 16]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 8]
	Vector2D Max;//[Offset: 0x8, Size: 8]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x334, Size: 4]
	float BaseLookUpRate;//[Offset: 0x338, Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x33c, Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x340, Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x344, Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 1]
	void TurnAtRate(float Rate);// 0x495da84
	void MoveUp_World(float Val);// 0x495da04
	void MoveRight(float Val);// 0x267c1e4
	void MoveForward(float Val);// 0x495d984
	void LookUpAtRate(float Rate);// 0x495d90c

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x560, Size: 4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x4a68054
	float GetUnscaledSphereRadius();// 0x494a6e8
	float GetShapeScale();// 0x494a678
	float GetScaledSphereRadius();// 0x494a250

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x56c, Size: 4]
	int PreviousLODLevel;//[Offset: 0x570, Size: 4]
	int MinLOD;//[Offset: 0x574, Size: 4]
	int MaxLOD;//[Offset: 0x578, Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x57c, Size: 4]
	Vector TightBoundsOrigin;//[Offset: 0x580, Size: 12]
	Vector TightBoundsBoxExtent;//[Offset: 0x58c, Size: 12]
	float TightBoundsSphereRadius;//[Offset: 0x598, Size: 4]
	bool bEnableSimpleMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59d, Size: 1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59d, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59d, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59d, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59d, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59d, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59d, Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59d, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59e, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59e, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59e, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59e, Size: 1]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59e, Size: 1]
	bool bUseAsOccluderIgnoreMobility;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59e, Size: 1]
	bool bCanBeOccludeed;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59e, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x5a0, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x5a4, Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x5a8, Size: 12]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x5b4, Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x5c4, Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x600, Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x618, Size: 20]
	Actor*[] AffectPointLightBPActors;//[Offset: 0x62c, Size: 12]
	StaticMeshPointLightVertexDataBuffer[] PointLightStaticMeshLODResources;//[Offset: 0x638, Size: 12]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x403a7f4
	void SetForcedLodModel(int NewForcedLodModel);// 0x4a73630
	int SetDynamicInstancingParameter(int MaterialIndex, FString Name, out const Vector4 Value);// 0x4a734e0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x236ffe8
	void SetDirty();// 0x4a734c4
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x4a7344c
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x4a7335c
	void CheckSwitchSimpleMaterial();// 0x4a73348

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18, Size: 12]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 12]
	PackedNormal Normal;//[Offset: 0xc, Size: 4]
	Color Color;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0, Size: 1]
	byte Y;//[Offset: 0x1, Size: 1]
	byte Z;//[Offset: 0x2, Size: 1]
	byte W;//[Offset: 0x3, Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 4]
	float TexelFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 4]
	float EmissiveBoost;//[Offset: 0xc, Size: 4]
	float DiffuseBoost;//[Offset: 0x10, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 4]
	float LightmapBoost;//[Offset: 0x4, Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 4]
	float SunIntensity;//[Offset: 0xc, Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StaticMeshPointLightVertexDataBuffer
	byte[] VertexData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xf0, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x100, Size: 16]
	SlateColor ForegroundColor;//[Offset: 0x110, Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x130, Size: 16]
	Margin Padding;//[Offset: 0x140, Size: 16]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x150, Size: 12]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x15c, Size: 12]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x168, Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x174, Size: 4]
	bool bOptimiseAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	int Priority;//[Offset: 0x17c, Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x180, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x180, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x180, Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x180, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x180, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x184, Size: 4]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x188, Size: 12]
	void UnregisterInputComponent();// 0x3e3eed8
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3e3edf0
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3e3ed08
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x3e3ec90
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x3e3ec18
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x46f6b154
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x3e3eb4c
	void StopListeningForAllInputActions();// 0x3e3eb38
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x3e3eac0
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x3e3ea00
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x3e3e944
	void SetPadding(Margin InPadding);// 0x3e3e8bc
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x3e3e844
	void SetOwningLocalPlayer(LocalPlayer* LocalPlayer);// 0x3e3e7cc
	void SetOffsetsInViewport(Margin Margin);// 0x3e3e744
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x3e3e688
	void SetInputActionPriority(int NewPriority);// 0x3e3e610
	void SetInputActionBlocking(bool bShouldBlock);// 0x3e3e590
	void SetForegroundColor(SlateColor InForegroundColor);// 0x3e3e3a0
	void SetDesiredSizeInViewport(Vector2D Size);// 0x3e3e32c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3e3e2b0
	void SetAnchorsInViewport(Anchors Anchors);// 0x3e3e228
	void SetAlignmentInViewport(Vector2D Alignment);// 0x3e3e1b8
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x3e3e140
	void RemoveFromViewport();// 0x3e3e12c
	void RegisterInputComponent();// 0x3e3e118
	void PreConstruct(bool IsDesignTime);// 0x46f6b154
	void PlaySound(SoundBase* SoundToPlay);// 0x3e3e0a0
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3e3decc
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3e3dd3c
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x3e3dcbc
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x46f6b154
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x46f6b154
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x46f6b154
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x46f6b154
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x46f6b154
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x46f6b154
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x46f6b154
	void OnPaint(out PaintContext Context);// 0x46f6b154
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x46f6b154
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x46f6b154
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x46f6b154
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x46f6b154
	void OnMouseCaptureLost();// 0x46f6b154
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x46f6b154
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x46f6b154
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x46f6b154
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x46f6b154
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x46f6b154
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x46f6b154
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x46f6b154
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x46f6b154
	void OnFocusLost(FocusEvent InFocusEvent);// 0x46f6b154
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x46f6b154
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x46f6b154
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x46f6b154
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x46f6b154
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x46f6b154
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x46f6b154
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x3e3dc3c
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x2510ac4
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x46f6b154
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x46f6b154
	static UserWidget* NewWidgetObjectBP(Object* Outer, class Object UserWidgetClass);// 0x3e3db80
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x3e3d9f0
	bool IsPlayingAnimation();// 0x3e3d9c8
	bool IsListeningForInputAction(FName ActionName);// 0x3e3d948
	bool IsInViewport();// 0x3e3d4e4
	bool IsInteractable();// 0x46f6b154
	bool IsAnyAnimationPlaying();// 0x3e3d920
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x3e3d8a0
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x3e3d820
	Widget* GetWidgetFromName(out const FName Name);// 0x3e3d78c
	Widget* GetVariableWidgetFromName(out const FName Name);// 0x3e3d6f8
	void GetTypedChildrenOfWidget(Widget* Parent, FString Type, out Widget*[] Children);// 0x3e3d55c
	Pawn* GetOwningPlayerPawn();// 0x3e3d534
	PlayerController* GetOwningPlayer();// 0x25e9b04
	LocalPlayer* GetOwningLocalPlayer();// 0x3e3d50c
	bool GetIsVisible();// 0x3e3d4e4
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x3e3d464
	Anchors GetAnchorsInViewport();// 0x3e3d420
	Vector2D GetAlignmentInViewport();// 0x3e3d3e0
	void Destruct();// 0x46f6b154
	void Construct();// 0x46f6b154
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3e3d2f8
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3e3d210
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x3e3d094
	void AddToViewport(int ZOrder);// 0x3e3d01c
	bool AddToPlayerScreen(int ZOrder);// 0x3e3cf9c

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c, Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20, Size: 16]
	FText ToolTipText;//[Offset: 0x30, Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40, Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50, Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58, Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68, Size: 16]
	bool IgnorePixelSnapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	delegate IgnorePixelSnappingDelegate;//[Offset: 0x80, Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb4, Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb4, Size: 1]
	byte UsedLayerPolicy;//[Offset: 0xb5, Size: 1]
	byte PreservedLayerNum;//[Offset: 0xb6, Size: 1]
	byte FixedLayerPolicy;//[Offset: 0xb7, Size: 1]
	byte FixedLayerNum;//[Offset: 0xb8, Size: 1]
	bool IngoreRectMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb9, Size: 1]
	byte Cursor;//[Offset: 0xba, Size: 1]
	enum Clipping;//[Offset: 0xbb, Size: 1]
	enum Visibility;//[Offset: 0xbc, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xc0, Size: 4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xdc, Size: 12]
	void SubAdvancedCollapsedCount(byte Num);// 0x3e43a90
	void SetWriteSceneZBuffer(bool bInWriteSceneZBuffer);// 0x3e43a10
	void SetVisibility(enum InVisibility);// 0x3e43990
	void SetUserFocus(PlayerController* PlayerController);// 0x3e43918
	void SetToolTipText(out const FText InToolTipText);// 0x3e4380c
	void SetToolTip(Widget* Widget);// 0x3e43794
	void SetRenderTranslation(Vector2D Translation);// 0x3e43724
	void SetRenderTransformPivot(Vector2D Pivot);// 0x3e436b4
	void SetRenderTransform(WidgetTransform InTransform);// 0x3e435dc
	void SetRenderShear(Vector2D Shear);// 0x3e4356c
	void SetRenderScale(Vector2D Scale);// 0x3e434fc
	void SetRenderAngle(float angle);// 0x3e43484
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x3e4337c
	void SetKeyboardFocus();// 0x3e43368
	void SetIsEnabled(bool bInIsEnabled);// 0x238408c
	void SetIgnorePixelSnapping(bool Ignore);// 0x3e432e8
	void SetCursor(byte InCursor);// 0x3e43270
	void SetClipping(enum InClipping);// 0x3e431f8
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x3e4313c
	void SetAdvancedCollapsed(bool IsAdvancedCollapsed);// 0x3e430bc
	void ResetCursor();// 0x3e430a8
	void RemoveFromParent();// 0x2374d20
	EventReply OnReply__DelegateSignature();// 0x46f6b154
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x46f6b154
	bool IsVisible();// 0x3e43080
	bool IsHovered();// 0x3e43058
	void InvalidateLayoutAndVolatility();// 0x3e43044
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x3e42fc4
	bool HasUserFocus(PlayerController* PlayerController);// 0x3e42f44
	bool HasMouseCapture();// 0x3e42f1c
	bool HasKeyboardFocus();// 0x3e42ef4
	bool HasFocusedDescendants();// 0x3e42ecc
	bool HasAnyUserFocus();// 0x3e42ea4
	Widget* GetWidget__DelegateSignature();// 0x46f6b154
	enum GetVisibility();// 0x3e42e7c
	FText GetText__DelegateSignature();// 0x46f6b154
	enum GetSlateVisibility__DelegateSignature();// 0x46f6b154
	SlateColor GetSlateColor__DelegateSignature();// 0x46f6b154
	SlateBrush GetSlateBrush__DelegateSignature();// 0x46f6b154
	PanelWidget* GetParent();// 0x3e42e54
	PlayerController* GetOwningPlayer();// 0x25e9b04
	byte GetMouseCursor__DelegateSignature();// 0x46f6b154
	LinearColor GetLinearColor__DelegateSignature();// 0x46f6b154
	bool GetIsEnabled();// 0x3e42e2c
	int GetInt32__DelegateSignature();// 0x46f6b154
	float GetFloat__DelegateSignature();// 0x46f6b154
	Vector2D GetDesiredSize();// 0x3e42dec
	enum GetClipping();// 0x3e42dc4
	enum GetCheckBoxState__DelegateSignature();// 0x46f6b154
	Geometry GetCachedGeometry();// 0x3e42d94
	Geometry GetCachedAllottedGeometry();// 0x3e42d64
	bool GetBool__DelegateSignature();// 0x46f6b154
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x46f6b154
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x46f6b154
	void ForceVolatile(bool bForce);// 0x3e42ce4
	void ForceLayoutPrepass();// 0x3e42cd0
	void AddAdvancedCollapsedCount(byte Num);// 0x3e42c40

--------------------------------
Class: Visual.Object

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0, Size: 4]
	void SetUserTag(FName InUserTag);// 0x3e3463c
	FName GetUserTag();// 0x3e34618

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x220, Size: 12]
	delegate OnAnimationFinished;//[Offset: 0x22c, Size: 12]
	MovieScene* MovieScene;//[Offset: 0x238, Size: 4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c, Size: 12]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3e45090
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3e44fa8
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x3e44f30
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x3e44eb8
	float GetStartTime();// 0x3e44e90
	float GetEndTime();// 0x3e44e68
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3e44d80
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3e44c98

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x40, Size: 404]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1d4, Size: 2]
	<Object*,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1d8, Size: 60]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x214, Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c, Size: 16]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 60]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78, Size: 36]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c, Size: 120]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114, Size: 124]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	int EvaluationRunSide;//[Offset: 0x14, Size: 4]
	MovieSceneSegment[] Segments;//[Offset: 0x18, Size: 12]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x24, Size: 12]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30, Size: 56]
	FName EvaluationGroup;//[Offset: 0x68, Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc, Size: 12]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0, Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8, Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 12]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 4]
	int NumInitPtrs;//[Offset: 0x4, Size: 4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 12]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 60]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c, Size: 60]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0, Size: 4]
	Object* SequenceKeyObject;//[Offset: 0x4, Size: 4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8, Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x10, Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20, Size: 4]
	FloatRange PreRollRange;//[Offset: 0x24, Size: 16]
	FloatRange PostRollRange;//[Offset: 0x34, Size: 16]
	int HierarchicalBias;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4, Size: 12]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4, Size: 60]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40, Size: 60]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x40, Size: 12]
	MovieScenePossessable[] Possessables;//[Offset: 0x4c, Size: 12]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x58, Size: 12]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x64, Size: 12]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x70, Size: 4]
	FloatRange SelectionRange;//[Offset: 0x74, Size: 16]
	FloatRange PlaybackRange;//[Offset: 0x84, Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float FixedFrameInterval;//[Offset: 0x98, Size: 4]
	float InTime;//[Offset: 0x9c, Size: 4]
	float OutTime;//[Offset: 0xa0, Size: 4]
	float StartTime;//[Offset: 0xa4, Size: 4]
	float EndTime;//[Offset: 0xa8, Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	Object* ObjectTemplate;//[Offset: 0x1c, Size: 4]
	Guid[] ChildPossessables;//[Offset: 0x20, Size: 12]
	enum Ownership;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0, Size: 16]
	FString Name;//[Offset: 0x10, Size: 12]
	class Object* PossessedObjectClass;//[Offset: 0x1c, Size: 4]
	Guid ParentGuid;//[Offset: 0x20, Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 16]
	FString BindingName;//[Offset: 0x10, Size: 12]
	MovieSceneTrack*[] Tracks;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x40, Size: 4]
	int EvaluationRunSide;//[Offset: 0x44, Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 8]
	Widget* Content;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c, Size: 4]
	int[] VariableWidgetMarks;//[Offset: 0x20, Size: 12]
	Widget*[] AllWidgets;//[Offset: 0x38, Size: 12]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 4]
	delegate Delegate;//[Offset: 0x8, Size: 16]
	enum AnimationEvent;//[Offset: 0x18, Size: 1]
	FName UserTag;//[Offset: 0x20, Size: 8]

--------------------------------
Class: Geometry

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38, Size: 4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c, Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	int ControllerId;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24, Size: 4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28, Size: 12]
	World* World;//[Offset: 0x58, Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c, Size: 4]
	void SSSwapControllers();// 0x2374dd8
	void ShowTitleSafeArea();// 0x24492b0
	void SetConsoleTarget(int PlayerIndex);// 0x23f3188

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24, Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28, Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c, Size: 4]
	FString[] HistoryBuffer;//[Offset: 0x44, Size: 12]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 4]
	class Object* WithinClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x24, Size: 12]
	LocalPlayer*[] LocalPlayers;//[Offset: 0x30, Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c, Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	void ReceiveShutdown();// 0x46f6b154
	void ReceiveInit();// 0x46f6b154
	void HandleTravelError(byte FailureType);// 0x46f6b154
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x46f6b154
	void DebugRemovePlayer(int ControllerId);// 0x2449b08
	void DebugCreatePlayer(int ControllerId);// 0x25bc958

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 8]
	Vector2D Maximum;//[Offset: 0x8, Size: 8]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x1c, Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20, Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x24, Size: 4]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x28, Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x34, Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x38, Size: 4]
	float Duration;//[Offset: 0x3c, Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x40, Size: 4]
	float Priority;//[Offset: 0x44, Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x48, Size: 4]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x4c, Size: 12]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x58, Size: 4]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x1c, Size: 40]
	SoundClass*[] ChildClasses;//[Offset: 0x44, Size: 12]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x50, Size: 12]
	SoundClass* ParentClass;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 4]
	float Pitch;//[Offset: 0x4, Size: 4]
	float StereoBleed;//[Offset: 0x8, Size: 4]
	float LFEBleed;//[Offset: 0xc, Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	byte OutputTarget;//[Offset: 0x25, Size: 1]

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 4]
	float MinVolumeThreshold;//[Offset: 0x4, Size: 4]
	float MaxVolumeThreshold;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	float EQPriority;//[Offset: 0x20, Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x28, Size: 56]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x60, Size: 12]
	float InitialDelay;//[Offset: 0x6c, Size: 4]
	float FadeInTime;//[Offset: 0x70, Size: 4]
	float Duration;//[Offset: 0x74, Size: 4]
	float FadeOutTime;//[Offset: 0x78, Size: 4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 4]
	float Gain0;//[Offset: 0xc, Size: 4]
	float Bandwidth0;//[Offset: 0x10, Size: 4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 4]
	float Gain1;//[Offset: 0x18, Size: 4]
	float Bandwidth1;//[Offset: 0x1c, Size: 4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 4]
	float Gain2;//[Offset: 0x24, Size: 4]
	float Bandwidth2;//[Offset: 0x28, Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 4]
	float Gain3;//[Offset: 0x30, Size: 4]
	float Bandwidth3;//[Offset: 0x34, Size: 4]

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 4]
	float VolumeAdjuster;//[Offset: 0x4, Size: 4]
	float PitchAdjuster;//[Offset: 0x8, Size: 4]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x5, Size: 1]
	float VolumeScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c, Size: 532]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 1]
	byte DistanceType;//[Offset: 0x7e, Size: 1]
	float OmniRadius;//[Offset: 0x80, Size: 4]
	float StereoSpread;//[Offset: 0x84, Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0x88, Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0x8c, Size: 4]
	float RadiusMin;//[Offset: 0x90, Size: 4]
	float RadiusMax;//[Offset: 0x94, Size: 4]
	float LPFRadiusMin;//[Offset: 0x98, Size: 4]
	float LPFRadiusMax;//[Offset: 0x9c, Size: 4]
	enum AbsorptionMethod;//[Offset: 0xa0, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xa4, Size: 88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0xfc, Size: 88]
	float LPFFrequencyAtMin;//[Offset: 0x154, Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x158, Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x15c, Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x160, Size: 4]
	float FocusAzimuth;//[Offset: 0x164, Size: 4]
	float NonFocusAzimuth;//[Offset: 0x168, Size: 4]
	float FocusDistanceScale;//[Offset: 0x16c, Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x170, Size: 4]
	float FocusPriorityScale;//[Offset: 0x174, Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x178, Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x17c, Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x180, Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x184, Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x188, Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x18c, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x190, Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x194, Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x198, Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x19c, Size: 4]
	enum ReverbSendMethod;//[Offset: 0x1a0, Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x1a4, Size: 4]
	float ReverbWetLevelMin;//[Offset: 0x1a8, Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x1ac, Size: 4]
	float ReverbDistanceMin;//[Offset: 0x1b0, Size: 4]
	float ReverbDistanceMax;//[Offset: 0x1b4, Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x1b8, Size: 88]
	float ManualReverbSendLevel;//[Offset: 0x210, Size: 4]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x8, Size: 88]
	byte AttenuationShape;//[Offset: 0x60, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x64, Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x68, Size: 12]
	float ConeOffset;//[Offset: 0x74, Size: 4]
	float FalloffDistance;//[Offset: 0x78, Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x1c, Size: 12]
	SoundSubmix* ParentSubmix;//[Offset: 0x28, Size: 4]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSubmix* SoundSubmix;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x1c, Size: 12]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 4]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x1d4, Size: 1]
	float SourceBusDuration;//[Offset: 0x1d8, Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 1]

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x6c, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70, Size: 1]
	int StreamingPriority;//[Offset: 0x74, Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78, Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78, Size: 1]
	byte SoundGroup;//[Offset: 0x7a, Size: 1]
	FString SpokenText;//[Offset: 0x7c, Size: 12]
	float SubtitlePriority;//[Offset: 0x88, Size: 4]
	float Volume;//[Offset: 0x8c, Size: 4]
	float Pitch;//[Offset: 0x90, Size: 4]
	int NumChannels;//[Offset: 0x94, Size: 4]
	int SampleRate;//[Offset: 0x98, Size: 4]
	int RawPCMDataSize;//[Offset: 0x9c, Size: 4]
	SubtitleCue[] Subtitles;//[Offset: 0xa0, Size: 12]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0xac, Size: 12]
	CurveTable* Curves;//[Offset: 0xb8, Size: 4]
	CurveTable* InternalCurves;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 12]
	float Time;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 12]
	SubtitleCue[] Subtitles;//[Offset: 0xc, Size: 12]
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x1c, Size: 12]
	Object* Payload;//[Offset: 0x28, Size: 4]
	Widget* DefaultDragVisual;//[Offset: 0x2c, Size: 4]
	enum Pivot;//[Offset: 0x30, Size: 1]
	Vector2D Offset;//[Offset: 0x34, Size: 8]
	delegate OnDrop;//[Offset: 0x3c, Size: 12]
	delegate OnDragCancelled;//[Offset: 0x48, Size: 12]
	delegate OnDragged;//[Offset: 0x54, Size: 12]
	void Drop(out const PointerEvent PointerEvent);// 0x3e21f9c
	void Dragged(out const PointerEvent PointerEvent);// 0x3e21e14
	void DragCancelled(out const PointerEvent PointerEvent);// 0x3e21c8c

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c, Size: 4]
	Widget* Content;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xec, Size: 12]
	bool RemoveChildAt(int Index);// 0x3e2a65c
	bool RemoveChild(Widget* Content);// 0x3e2a5dc
	bool HasChild(Widget* Content);// 0x3e2a55c
	bool HasAnyChildren();// 0x3e2a534
	int GetChildrenCount();// 0x3e2a50c
	int GetChildIndex(Widget* Content);// 0x3e2a48c
	Widget* GetChildAt(int Index);// 0x3e2a40c
	void ClearChildren();// 0x3e2a3f8
	PanelSlot* AddChild(Widget* Content);// 0x3e2a378

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 8]
	Vector2D Scale;//[Offset: 0x8, Size: 8]
	Vector2D Shear;//[Offset: 0x10, Size: 8]
	float angle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20, Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38, Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50, Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68, Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80, Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98, Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x8, Size: 8]
	Widget* Widget;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c, Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24, Size: 12]
	FName DestinationProperty;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 8]
	int ArrayIndex;//[Offset: 0x8, Size: 4]
	Struct* Struct;//[Offset: 0xc, Size: 4]
	Field* Field;//[Offset: 0x10, Size: 4]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 4]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 4]
	int UUID;//[Offset: 0x4, Size: 4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x2e4, Size: 4]
	FName MatineeControllerName;//[Offset: 0x2e8, Size: 8]
	float PlayRate;//[Offset: 0x2f0, Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4, Size: 1]
	float ForceStartPosition;//[Offset: 0x2f8, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2fc, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2fc, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2fc, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2fc, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2fc, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2fc, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2fc, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x300, Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x304, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x304, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x304, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x308, Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x318, Size: 12]
	CameraCutInfo[] CameraCuts;//[Offset: 0x324, Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	float InterpPosition;//[Offset: 0x334, Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x33c, Size: 1]
	delegate OnPlay;//[Offset: 0x340, Size: 12]
	delegate OnStop;//[Offset: 0x34c, Size: 12]
	delegate OnPause;//[Offset: 0x358, Size: 12]
	void Stop();// 0x23444f4
	void SetPosition(float NewPosition, bool bJump);// 0x49ffc60
	void SetLoopingState(bool bNewLooping);// 0x49ffbd8
	void Reverse();// 0x23444bc
	void Play();// 0x23444d8
	void Pause();// 0x23c70dc
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x49ffaa4
	void ChangePlaybackDirection();// 0x248cc6c

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c, Size: 4]
	float PathBuildTime;//[Offset: 0x20, Size: 4]
	InterpGroup*[] InterpGroups;//[Offset: 0x24, Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30, Size: 4]
	float EdSectionStart;//[Offset: 0x34, Size: 4]
	float EdSectionEnd;//[Offset: 0x38, Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40, Size: 4]
	FName[] AllEventNames;//[Offset: 0x44, Size: 12]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 8]
	Actor*[] Actors;//[Offset: 0x8, Size: 12]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	float TimeStamp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x240, Size: 4]
	Actor* ChildActor;//[Offset: 0x244, Size: 4]
	bool bAllowTemplateModification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	Actor* ChildActorTemplate;//[Offset: 0x24c, Size: 4]
	bool IsDestoryChildActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	delegate OnChildActorRep;//[Offset: 0x260, Size: 12]
	bool bKeepChildActorComponet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bEnableReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool bDumpChildActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	void SetChildActorClass(class Actor InClass);// 0x4953a8c
	void OnRep_ChildActor();// 0x4953a78

--------------------------------
Class: ScriptNetworkRemoteContent
	byte[] Content;//[Offset: 0x0, Size: 12]
	int ContentNumBits;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x46f6b154
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x49e7d30
	bool RemoteEvent(FName EventName);// 0x49e7ca8
	void LevelReset();// 0x46f6b154

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 4]
	int Y;//[Offset: 0x4, Size: 4]
	int Z;//[Offset: 0x8, Size: 4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2e8, Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x2ec, Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x2f0, Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x550, Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x554, Size: 1]
	float ScreenSize;//[Offset: 0x558, Size: 4]
	float U;//[Offset: 0x55c, Size: 4]
	float UL;//[Offset: 0x560, Size: 4]
	float V;//[Offset: 0x564, Size: 4]
	float VL;//[Offset: 0x568, Size: 4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x4933e60
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x4933cc8
	void SetSprite(Texture2D* NewSprite);// 0x4933c48

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20, Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x2ec, Size: 12]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2f8, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2f8, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2f8, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2f8, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2f8, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2f8, Size: 1]
	float KillZ;//[Offset: 0x2fc, Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x300, Size: 4]
	float WorldGravityZ;//[Offset: 0x304, Size: 4]
	float GlobalGravityZ;//[Offset: 0x308, Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x30c, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x310, Size: 4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x314, Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x318, Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x31c, Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x324, Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x330, Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x334, Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 1]
	float MaxWorldSize;//[Offset: 0x33c, Size: 4]
	int RegionSizeNear;//[Offset: 0x340, Size: 4]
	int RegionSizeFar;//[Offset: 0x344, Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool UnlimitedRegionZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 1]
	int Graduation;//[Offset: 0x34c, Size: 4]
	int CompositionSize;//[Offset: 0x350, Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x354, Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x358, Size: 1]
	int VisibilityCellSize;//[Offset: 0x35c, Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x360, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x361, Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x364, Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x3b4, Size: 100]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x418, Size: 16]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x428, Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x44c, Size: 4]
	float WorldToMeters;//[Offset: 0x450, Size: 4]
	float MonoCullingDistance;//[Offset: 0x454, Size: 4]
	BookMark* BookMarks;//[Offset: 0x458, Size: 4]
	float TimeDilation;//[Offset: 0x480, Size: 4]
	float MatineeTimeDilation;//[Offset: 0x484, Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x488, Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x48c, Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x490, Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x494, Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x498, Size: 4]
	PlayerState* Pauser;//[Offset: 0x49c, Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a0, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a0, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x4a4, Size: 12]
	AssetUserData*[] AssetUserData;//[Offset: 0x4b0, Size: 12]
	float[] LODRelativeDistances;//[Offset: 0x4bc, Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	int WorldCompositionNums;//[Offset: 0x4cc, Size: 4]
	int CompositionBlockLength;//[Offset: 0x4d0, Size: 4]
	bool bEnableObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 1]
	void OnRep_WorldGravityZ();// 0x234daf8

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c, Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20, Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24, Size: 4]
	float LastImpactSoundTime;//[Offset: 0x28, Size: 4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x2e8, Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x2f4, Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x2f8, Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x2fc, Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x300, Size: 4]
	class HUD* HUDClass;//[Offset: 0x304, Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x308, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x30c, Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x310, Size: 4]
	GameSession* GameSession;//[Offset: 0x314, Size: 4]
	GameStateBase* GameState;//[Offset: 0x318, Size: 4]
	FText DefaultPlayerName;//[Offset: 0x31c, Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328, Size: 1]
	void StartPlay();// 0x497530c
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x4975240
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4975110
	bool ShouldReset(Actor* ActorToReset);// 0x497507c
	void ReturnToMainMenuHost();// 0x4975060
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4974f40
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x2fc91d8
	void RestartPlayer(Controller* NewPlayer);// 0x24e1194
	void ResetLevel();// 0x2703fc4
	bool PlayerCanRestart(PlayerController* Player);// 0x4974eac
	bool MustSpectate(PlayerController* NewPlayerController);// 0x4974e24
	void K2_PostLogin(PlayerController* NewPlayer);// 0x46f6b154
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x46f6b154
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x46f6b154
	void K2_OnLogout(Controller* ExitingController);// 0x46f6b154
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x46f6b154
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x4974d48
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x24adf4c
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x241d0b0
	bool HasMatchStarted();// 0x4974d18
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x253d2a8
	int GetNumSpectators();// 0x494f1c8
	int GetNumPlayers();// 0x4974ce8
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x4974c60
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x4974b7c
	Actor* ChoosePlayerStart(Controller* Player);// 0x4974af4
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x2fc65a8
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x23fe9a4

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x2e4, Size: 4]
	int MaxPlayers;//[Offset: 0x2e8, Size: 4]
	int MaxPartySize;//[Offset: 0x2ec, Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x2f0, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	FName SessionName;//[Offset: 0x2f8, Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x2e4, Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2e8, Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2ec, Size: 4]
	PlayerState*[] PlayerArray;//[Offset: 0x2f0, Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x300, Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x304, Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x308, Size: 4]
	bool bRecordControllerReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	void OnRep_SpectatorClass();// 0x234b3f8
	void OnRep_ReplicatedWorldTimeSeconds();// 0x273bf50
	void OnRep_ReplicatedHasBegunPlay();// 0x23caf68
	void OnRep_RecordControllerReplay();// 0x497530c
	void OnRep_GameModeClass();// 0x2453248
	bool HasMatchStarted();// 0x273c73c
	bool HasBegunPlay();// 0x23fddbc
	float GetServerWorldTimeSecondsForReplay();// 0x4984654
	float GetServerWorldTimeSeconds();// 0x25ca4f4
	float GetPlayerStartTime(Controller* Controller);// 0x49845cc
	float GetPlayerRespawnDelay(Controller* Controller);// 0x23c6d1c

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x2e4, Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x2e8, Size: 4]
	int TotalNetBandwidth;//[Offset: 0x2ec, Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x2f0, Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x2f4, Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x2fc, Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x300, Size: 4]
	int BadPingThreshold;//[Offset: 0x304, Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x308, Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x30c, Size: 4]
	float PercentForBadPing;//[Offset: 0x310, Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x314, Size: 4]
	float MoveRepSize;//[Offset: 0x318, Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x31c, Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x320, Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x324, Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x328, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x32c, Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x330, Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x334, Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x338, Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x33c, Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x340, Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x348, Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x350, Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x354, Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x358, Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x35c, Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 4]
	float DiffuseBoost;//[Offset: 0x20, Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30, Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38, Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 4]
	float OcclusionExponent;//[Offset: 0x40, Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44, Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48, Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 4]
	int NumSamples;//[Offset: 0x8, Size: 4]
	int NumLightingBounces;//[Offset: 0xc, Size: 4]
	float LightmapBoost;//[Offset: 0x10, Size: 4]
	float SunHardness;//[Offset: 0x14, Size: 4]
	enum BakingMode;//[Offset: 0x18, Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c, Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20, Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24, Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28, Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c, Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30, Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34, Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38, Size: 4]
	int LocalOcclusionDilation;//[Offset: 0x3c, Size: 4]
	int NumDenoisingIterators;//[Offset: 0x40, Size: 4]
	int NumDilationIterators;//[Offset: 0x44, Size: 4]
	int DirectLightDenoising;//[Offset: 0x48, Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x4c, Size: 4]
	float RayTraceBias;//[Offset: 0x50, Size: 4]
	float RetraceDistance;//[Offset: 0x54, Size: 4]
	float SmallestTexelRadius;//[Offset: 0x58, Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x5c, Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bWithGrayDiffuse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	byte ReverbType;//[Offset: 0x1, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4, Size: 4]
	float Volume;//[Offset: 0x8, Size: 4]
	float FadeTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x1c, Size: 4]
	float Diffusion;//[Offset: 0x20, Size: 4]
	float Gain;//[Offset: 0x24, Size: 4]
	float GainHF;//[Offset: 0x28, Size: 4]
	float DecayTime;//[Offset: 0x2c, Size: 4]
	float DecayHFRatio;//[Offset: 0x30, Size: 4]
	float ReflectionsGain;//[Offset: 0x34, Size: 4]
	float ReflectionsDelay;//[Offset: 0x38, Size: 4]
	float LateGain;//[Offset: 0x3c, Size: 4]
	float LateDelay;//[Offset: 0x40, Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x44, Size: 4]
	float RoomRolloffFactor;//[Offset: 0x48, Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 4]
	float ExteriorTime;//[Offset: 0x8, Size: 4]
	float ExteriorLPF;//[Offset: 0xc, Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 4]
	float InteriorVolume;//[Offset: 0x14, Size: 4]
	float InteriorTime;//[Offset: 0x18, Size: 4]
	float InteriorLPF;//[Offset: 0x1c, Size: 4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	FString[] HiddenLevels;//[Offset: 0x34, Size: 12]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 4]
	Actor* InViewer;//[Offset: 0x4, Size: 4]
	Actor* ViewTarget;//[Offset: 0x8, Size: 4]
	Vector ViewLocation;//[Offset: 0xc, Size: 12]
	Vector ViewDir;//[Offset: 0x18, Size: 12]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20, Size: 8]
	World* WorldAsset;//[Offset: 0x28, Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 12]
	Transform LevelTransform;//[Offset: 0x70, Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa1, Size: 1]
	int LevelLODIndex;//[Offset: 0xa4, Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8, Size: 1]
	Color DrawColor;//[Offset: 0xac, Size: 4]
	LinearColor LevelColor;//[Offset: 0xb0, Size: 16]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc0, Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xcc, Size: 4]
	FString[] Keywords;//[Offset: 0xd4, Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xe0, Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xec, Size: 12]
	delegate OnLevelShown;//[Offset: 0xf8, Size: 12]
	delegate OnLevelHidden;//[Offset: 0x104, Size: 12]
	Level* LoadedLevel;//[Offset: 0x110, Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x114, Size: 4]
	Level*[] UnloadingLevels;//[Offset: 0x118, Size: 12]
	bool IsStreamingStatePending();// 0x49e85d8
	bool IsLevelVisible();// 0x49e85b0
	bool IsLevelLoaded();// 0x49e858c
	FName GetWorldAssetPackageFName();// 0x49e854c
	LevelScriptActor* GetLevelScriptActor();// 0x49e8524
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x49e8438

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x30c, Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 1]
	byte StreamingUsage;//[Offset: 0x319, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x4a0, Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x71c, Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x749, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x75c, Size: 4]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 4]
	Level* Level;//[Offset: 0x24, Size: 4]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: WorldRegionManager
	World* World;//[Offset: 0xb8, Size: 4]
	<RegionID,RegionObjectItemList> RegionIDToObjectList_Static;//[Offset: 0xbc, Size: 60]
	<RegionID,RegionObjectItemList> RegionIDToObjectList_NonStatic;//[Offset: 0xf8, Size: 60]
	<Object*,RegionID> ObjectToRegionID_NonStatic;//[Offset: 0x134, Size: 60]

--------------------------------
Class: RegionID

--------------------------------
Class: RegionObjectItemList
	RegionObjectItem[] List;//[Offset: 0x0, Size: 12]

--------------------------------
Class: RegionObjectItem
	Object* Target;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WorldParallelismManager
	World* World;//[Offset: 0x2c, Size: 4]
	ParallelWorldPlayerInfo[] Players;//[Offset: 0x30, Size: 12]
	<uint32,GameModeBase*> ParallelGameModes;//[Offset: 0x3c, Size: 60]
	<uint32,GameStateBase*> ParallelGameStates;//[Offset: 0x78, Size: 60]

--------------------------------
Class: ParallelWorldPlayerInfo
	uint32 WorldParallelismID;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x4, Size: 12]
	PlayerController* PlayerController;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c, Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20, Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x3c, Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 1]
	enum DataGatheringMode;//[Offset: 0x41, Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x42, Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x44, Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x48, Size: 12]
	float DirtyAreasUpdateFreq;//[Offset: 0x54, Size: 4]
	NavigationData*[] NavDataSet;//[Offset: 0x58, Size: 12]
	NavigationData*[] NavDataRegistrationQueue;//[Offset: 0x64, Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xb8, Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xc4, Size: 12]
	enum OperationMode;//[Offset: 0x16c, Size: 1]
	void UpdateDynamicGenerateTargetNav(bool IsAdd, DynamicGenerateTargetNavigation GenerateTargetNav);// 0x4a09fb0
	void UnregisterNavigationInvoker(Actor* Invoker);// 0x4a09f38
	static void SimpleMoveToLocation(Controller* Controller, out const Vector Goal);// 0x4a09e6c
	static void SimpleMoveToActor(Controller* Controller, const Actor* Goal);// 0x4a09db8
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);// 0x4a09d40
	void SetGeometryGatheringMode(enum NewMode);// 0x4a09cc8
	void ResetMaxSimultaneousTileGenerationJobsCount();// 0x4a09cb4
	void RegisterNavigationInvoker(Actor* Invoker, float TileGenerationRadius, float TileRemovalRadius);// 0x4a09bb4
	static Vector ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x4a099ec
	void OnNavigationBoundsUpdated(NavMeshBoundsVolume* NavVolume);// 0x4a09974
	static bool NavigationRaycast(Object* WorldContextObject, out const Vector RayStart, out const Vector RayEnd, out Vector HitLocation, class NavigationQueryFilter FilterClass, Controller* Querier);// 0x4a09750
	static bool K2_ProjectPointToNavigation(Object* WorldContextObject, out const Vector Point, out Vector ProjectedLocation, NavigationData* NavData, class NavigationQueryFilter FilterClass, const Vector QueryExtent);// 0x4a09538
	static bool K2_GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4a09330
	static bool K2_GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, out Vector RandomLocation, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4a09128
	static bool IsNavigationBeingBuiltOrLocked(Object* WorldContextObject);// 0x4a090b0
	static bool IsNavigationBeingBuilt(Object* WorldContextObject);// 0x4a09038
	static Vector GetRandomReachablePointInRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4a08e80
	static Vector GetRandomPointInNavigableRadius(Object* WorldContextObject, out const Vector Origin, float Radius, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4a08cc8
	static byte GetPathLength(Object* WorldContextObject, out const Vector PathStart, out const Vector pathEnd, out float PathLength, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4a08aac
	static byte GetPathCost(Object* WorldContextObject, out const Vector PathStart, out const Vector pathEnd, out float PathCost, NavigationData* NavData, class NavigationQueryFilter FilterClass);// 0x4a08890
	static NavigationSystem* GetNavigationSystem(Object* WorldContextObject);// 0x4a08818
	static NavigationPath* FindPathToLocationSynchronously(Object* WorldContextObject, out const Vector PathStart, out const Vector pathEnd, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x4a08654
	static NavigationPath* FindPathToActorSynchronously(Object* WorldContextObject, out const Vector PathStart, Actor* GoalActor, float TetherDistance, Actor* PathfindingContext, class NavigationQueryFilter FilterClass);// 0x4a08468

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: DynamicGenerateTargetNavigation
	Vector TargetLocation;//[Offset: 0x0, Size: 12]
	float GenerateRadiusMin;//[Offset: 0xc, Size: 4]
	float GenerateRadiusMax;//[Offset: 0x10, Size: 4]

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c, Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28, Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 4]
	float TravelCostOverride;//[Offset: 0x4, Size: 4]
	float EnteringCostOverride;//[Offset: 0x8, Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x30c, Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x1c, Size: 12]
	Vector[] PathPoints;//[Offset: 0x28, Size: 12]
	byte RecalculateOnInvalidation;//[Offset: 0x34, Size: 1]
	bool IsValid();// 0x4a07a28
	bool IsStringPulled();// 0x23c140c
	bool IsPartial();// 0x4a07a00
	float GetPathLength();// 0x4a079d8
	float GetPathCost();// 0x4a079b0
	FString GetDebugString();// 0x4a0791c
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x4a0789c
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x4a077cc

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20, Size: 24]
	FName AISystemModuleName;//[Offset: 0x38, Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20, Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24, Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28, Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c, Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30, Size: 4]
	float TestHeightDifference;//[Offset: 0x34, Size: 4]
	float HeightCheckMargin;//[Offset: 0x38, Size: 4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x4933828
	int GetObjectCount();// 0x4933800
	int GetNewAvoidanceUID();// 0x49337d8
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x4933748

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4, Size: 4]
	NetDriver* NetDriver;//[Offset: 0x8, Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc, Size: 4]
	Level* PersistentLevel;//[Offset: 0x10, Size: 4]
	<Level*> Levels;//[Offset: 0x14, Size: 60]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20, Size: 4]
	World* World;//[Offset: 0x24, Size: 4]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0xa4, Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xb0, Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	float RebaseOriginDistance;//[Offset: 0xbc, Size: 4]
	float TileBoundsVerifyScale;//[Offset: 0xc0, Size: 4]
	bool bFlushPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	FString[] ServerExcludedLevels;//[Offset: 0xc8, Size: 12]
	FString[] ClientExcludedLevels;//[Offset: 0xd4, Size: 12]
	FString[] UGCWhiteListSubLevelPaths;//[Offset: 0xe0, Size: 12]
	FString[] DeviceExcludedLevels;//[Offset: 0xec, Size: 12]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x2e4, Size: 4]
	Guid LandscapeGuid;//[Offset: 0x2e8, Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x2f8, Size: 8]
	int MaxLODLevel;//[Offset: 0x300, Size: 4]
	float LODDistanceFactor;//[Offset: 0x304, Size: 4]
	byte LODFalloff;//[Offset: 0x308, Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x30c, Size: 4]
	float LODDistributionSetting;//[Offset: 0x310, Size: 4]
	int StaticLightingLOD;//[Offset: 0x314, Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x318, Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x31c, Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320, Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x324, Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x328, Size: 4]
	<FName,MaterialInterface*> OtherMaterials;//[Offset: 0x32c, Size: 60]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x36c, Size: 12]
	float MinGrassWeightThreshold;//[Offset: 0x378, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x37c, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x380, Size: 4]
	Texture2D* GrassColor_WorldMaskNoiseTexture;//[Offset: 0x384, Size: 4]
	Vector2D GrassColor_UVScale_WorldMaskNoise;//[Offset: 0x388, Size: 8]
	Vector2D GrassColor_Center_WorldMaskNoise;//[Offset: 0x390, Size: 8]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x398, Size: 12]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x3a4, Size: 12]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x3b0, Size: 12]
	<HierarchicalInstancedStaticMeshComponent*> StillUsed;//[Offset: 0x404, Size: 60]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	float StaticLightingResolution;//[Offset: 0x458, Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45c, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x45d, Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45e, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x45e, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x460, Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x464, Size: 24]
	int CollisionMipLevel;//[Offset: 0x47c, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x480, Size: 4]
	float CollisionThickness;//[Offset: 0x484, Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x488, Size: 336]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d8, Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d8, Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d8, Size: 1]
	int ComponentSizeQuads;//[Offset: 0x5dc, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x5e0, Size: 4]
	int NumSubsections;//[Offset: 0x5e4, Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e8, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x5e9, Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ea, Size: 1]
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x3c2644c
	void ChangeLODDistributionSettingConsoleVariable();// 0x23444bc
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x2368f74
	void ChangeLOD0DistributionSettingConsoleVariable();// 0x23444f4
	void ChangebUseScreenSizeLOD(bool InbUseScreenSizeLOD);// 0x24966bc

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x550, Size: 12]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x55c, Size: 12]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x568, Size: 12]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	float Width;//[Offset: 0x34, Size: 4]
	float SideFalloff;//[Offset: 0x38, Size: 4]
	float EndFalloff;//[Offset: 0x3c, Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40, Size: 12]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c, Size: 12]
	Box Bounds;//[Offset: 0x58, Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74, Size: 4]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20, Size: 16]
	InterpCurveVector SplineInfo;//[Offset: 0x40, Size: 20]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54, Size: 12]
	Box Bounds;//[Offset: 0x60, Size: 28]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0x7c, Size: 12]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 4]
	float TangentLen;//[Offset: 0x4, Size: 4]
	FName SocketName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 12]
	Vector Left;//[Offset: 0xc, Size: 12]
	Vector Right;//[Offset: 0x18, Size: 12]
	Vector FalloffLeft;//[Offset: 0x24, Size: 12]
	Vector FalloffRight;//[Offset: 0x30, Size: 12]
	float StartEndFalloff;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x64c, Size: 88]
	Vector SplineUpDir;//[Offset: 0x6a4, Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b0, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b0, Size: 1]
	byte ForwardAxis;//[Offset: 0x6b1, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x6b4, Size: 4]
	float SplineBoundaryMax;//[Offset: 0x6b8, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x6bc, Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x6c0, Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d0, Size: 1]
	void UpdateMesh();// 0x4a705bc
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x4a704e8
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x4a70428
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x4a70364
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x4a70290
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x4a701d0
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x4a6fff0
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x4a6ff10
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x4a6fe4c
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x4a6fd78
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x4a6fcb8
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x4a6fbf4
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x4a6fb20
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x4a6fa60
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x4a6f99c
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x4a6f8d8
	Vector GetStartTangent();// 0x4a6f890
	Vector2D GetStartScale();// 0x4a6f850
	float GetStartRoll();// 0x2395968
	Vector GetStartPosition();// 0x4a6f808
	Vector2D GetStartOffset();// 0x4a6f7c8
	Vector GetSplineUpDir();// 0x4a6f780
	byte GetForwardAxis();// 0x4a6f758
	Vector GetEndTangent();// 0x4a6f710
	Vector2D GetEndScale();// 0x4a6f6d0
	float GetEndRoll();// 0x4a6f6a8
	Vector GetEndPosition();// 0x4a6f660
	Vector2D GetEndOffset();// 0x4a6f620
	float GetBoundaryMin();// 0x4a6f5f8
	float GetBoundaryMax();// 0x4a6f5d0

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 12]
	Vector StartTangent;//[Offset: 0xc, Size: 12]
	Vector2D StartScale;//[Offset: 0x18, Size: 8]
	float StartRoll;//[Offset: 0x20, Size: 4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 8]
	Vector EndPos;//[Offset: 0x2c, Size: 12]
	Vector EndTangent;//[Offset: 0x38, Size: 12]
	Vector2D EndScale;//[Offset: 0x44, Size: 8]
	float EndRoll;//[Offset: 0x4c, Size: 4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x1c, Size: 12]
	StaticMesh* GrassMesh;//[Offset: 0x28, Size: 4]
	float GrassDensity;//[Offset: 0x2c, Size: 4]
	float PlacementJitter;//[Offset: 0x30, Size: 4]
	int StartCullDistance;//[Offset: 0x34, Size: 4]
	int EndCullDistance;//[Offset: 0x38, Size: 4]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 4]
	float GrassDensity;//[Offset: 0x4, Size: 4]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float PlacementJitter;//[Offset: 0xc, Size: 4]
	int StartCullDistance;//[Offset: 0x10, Size: 4]
	int EndCullDistance;//[Offset: 0x14, Size: 4]
	int MinLOD;//[Offset: 0x18, Size: 4]
	enum Scaling;//[Offset: 0x1c, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x20, Size: 8]
	FloatInterval ScaleY;//[Offset: 0x28, Size: 8]
	FloatInterval ScaleZ;//[Offset: 0x30, Size: 8]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3b, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 4]
	float Max;//[Offset: 0x4, Size: 4]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x550, Size: 4]
	int SectionBaseY;//[Offset: 0x554, Size: 4]
	int ComponentSizeQuads;//[Offset: 0x558, Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x55c, Size: 4]
	int NumSubsections;//[Offset: 0x560, Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x564, Size: 4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x568, Size: 4]
	<FName,MaterialInterface*> OverrideOtherMaterials;//[Offset: 0x56c, Size: 60]
	OverridePhyxMaterial OverridePhyxMaterial;//[Offset: 0x5a8, Size: 24]
	bool bOverrideGrassTypes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c0, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x5c4, Size: 12]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x5d0, Size: 12]
	<FName,MaterialInstanceConstant*> OtherMaterialInstances;//[Offset: 0x5dc, Size: 60]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x618, Size: 12]
	Texture2D*[] WeightmapTextures;//[Offset: 0x624, Size: 12]
	int VisibilityLayerChannel;//[Offset: 0x630, Size: 4]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x634, Size: 4]
	Vector4 WeightmapScaleBias;//[Offset: 0x640, Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x650, Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x660, Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x670, Size: 4]
	bool bUseLandscapeVertexAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x674, Size: 1]
	<FString,VisibilityData> MultiVisibilityTextureData;//[Offset: 0x678, Size: 60]
	FString VisibleVisibilityLayer;//[Offset: 0x6b4, Size: 12]
	Box CachedLocalBox;//[Offset: 0x6c0, Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x6dc, Size: 28]
	Guid MapBuildDataId;//[Offset: 0x6f8, Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x708, Size: 12]
	int CollisionMipLevel;//[Offset: 0x714, Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x718, Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x71c, Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x720, Size: 4]
	float StaticLightingResolution;//[Offset: 0x724, Size: 4]
	int ForcedLOD;//[Offset: 0x728, Size: 4]
	int LODBias;//[Offset: 0x72c, Size: 4]
	Guid stateID;//[Offset: 0x730, Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x740, Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x750, Size: 4]
	StaticMesh* OccluderMesh;//[Offset: 0x754, Size: 4]
	byte MobileBlendableLayerMask;//[Offset: 0x758, Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x75c, Size: 4]
	<FName,MaterialInterface*> OtherMobileMaterialInterfaces;//[Offset: 0x760, Size: 60]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x79c, Size: 12]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x7a8, Size: 4]
	uint16[] CachedHeightData;//[Offset: 0x7ac, Size: 12]
	bool[] CachedHaltonBaseIndex;//[Offset: 0x7d8, Size: 12]
	int[] CachedAddHaltonBaseIndexList;//[Offset: 0x7e4, Size: 12]
	FName UsedOtherMaterialName;//[Offset: 0x838, Size: 8]

--------------------------------
Class: OverridePhyxMaterial
	PhysicalMaterial*[] OriginalPhysxMaterial;//[Offset: 0x0, Size: 12]
	PhysicalMaterial*[] OverridePhysxMaterial;//[Offset: 0xc, Size: 12]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 4]
	byte WeightmapTextureIndex;//[Offset: 0x4, Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x5, Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x20, Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28, Size: 4]
	float Hardness;//[Offset: 0x2c, Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30, Size: 16]

--------------------------------
Class: VisibilityData
	byte[] VisibilityData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x550, Size: 12]
	int SectionBaseX;//[Offset: 0x55c, Size: 4]
	int SectionBaseY;//[Offset: 0x560, Size: 4]
	int CollisionSizeQuads;//[Offset: 0x564, Size: 4]
	float CollisionScale;//[Offset: 0x568, Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x56c, Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x570, Size: 12]
	Guid HeightfieldGuid;//[Offset: 0x57c, Size: 16]
	Box CachedLocalBox;//[Offset: 0x58c, Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x5a8, Size: 28]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x628, Size: 12]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x788, Size: 12]
	int NumBuiltInstances;//[Offset: 0x794, Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x79c, Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x7b8, Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x7d4, Size: 12]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x7e0, Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ec, Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x80c, Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x810, Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x831, Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x834, Size: 4]
	int OptimiMinInstancesToSplitNode;//[Offset: 0x838, Size: 4]
	bool IsOpenTreeOptimi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83c, Size: 1]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x4987fa0

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x684, Size: 12]
	int InstancingRandomSeed;//[Offset: 0x690, Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x694, Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x698, Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x69c, Size: 12]
	int[] RemovedInstances;//[Offset: 0x6a8, Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b5, Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x71c, Size: 4]
	<int,Matrix> StashInstanceTransform;//[Offset: 0x720, Size: 60]
	int NumPendingLightmaps;//[Offset: 0x760, Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x764, Size: 12]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x49919d0
	bool ShowInstance(out const int[] InstanceIndices);// 0x4991914
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x4991858
	bool RemoveInstance(int InstanceIndex);// 0x49917d0
	bool HideInstance(out const int[] InstanceIndices);// 0x4991720
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x49915b0
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x4991418
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x4991298
	int GetInstanceCount();// 0x4991270
	void ClearInstances();// 0x26234ac
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x4991190
	int AddInstance(out const Transform InstanceTransform);// 0x49910a0

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x550, Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x5a0, Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5b4, Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5c8, Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x5dc, Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x5f4, Size: 4]
	float Duration;//[Offset: 0x5f8, Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fd, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fe, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ff, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x602, Size: 1]
	float LoopPosition;//[Offset: 0x604, Size: 4]
	Vector DefaultUpVector;//[Offset: 0x608, Size: 12]
	bool bUseConfigRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	void UpdateSpline();// 0x4a6d1f4
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x4a6d114
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x4a6cfa8
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x4a6c860
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x4a6cddc
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x4a6cc70
	void SetSplineWorldPoints(out const Vector[] Points);// 0x4a6cbc8
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x4a6cac0
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x4a6c98c
	void SetSplineLocalPoints(out const Vector[] Points);// 0x4a6c8e4
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x4a6c860
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x4a6c6f4
	void SetDrawDebug(bool bShow);// 0x4a6c674
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x4a6c59c
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x4a6c488
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x4a6c3b8
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x4a6c2f4
	bool IsClosedLoop();// 0x2686ba8
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x4a6c260
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x4a6c17c
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x4a6c0e8
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x4a6c004
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x4a6bf70
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x4a6bedc
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x4a6bdf8
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x4a6bd64
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4a6bc40
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4a6bb6c
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4a6ba98
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x4a6b90c
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x4a6b7d0
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x4a6b694
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4a6b570
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4a6a344
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4a6b49c
	byte GetSplinePointType(int PointIndex);// 0x4a6b41c
	float GetSplineLength();// 0x4a6b3f4
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x4a6b318
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x4a6b288
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x4a6b1f8
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4a6b0d4
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4a6b000
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4a6af2c
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4a6ae1c
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4a6ad58
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4a6ac94
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4a6ab70
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4a6aa9c
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4a6a9c8
	int GetNumberOfSplinePoints();// 0x4a6a9a0
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4a6a87c
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4a6a7a8
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4a6a6d4
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x4a6a554
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x4a6a418
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4a6a344
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x4a6a2c4
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x4a6a244
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4a6a120
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4a6a04c
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4a69f78
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x4a69ee8
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4a69e14
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4a69d24
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x4a69bcc
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4a69adc
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x4a69a34
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4a69944
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4a69864
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4a69774
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4a69684
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x4a695ec
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4a694fc
	void ClearSplinePoints(bool bUpdateSpline);// 0x4a6947c
	void AddSplineWorldPoint(out const Vector Position);// 0x4a693e4
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x4a69278
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x4a69154
	void AddSplineLocalPoint(out const Vector Position);// 0x4a690bc
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x4a68fcc
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x4a68ec4

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14, Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28, Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c, Size: 20]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 4]
	Quat OutVal;//[Offset: 0x10, Size: 16]
	Quat ArriveTangent;//[Offset: 0x20, Size: 16]
	Quat LeaveTangent;//[Offset: 0x30, Size: 16]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopKeyOffset;//[Offset: 0x10, Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 4]
	float OutVal;//[Offset: 0x4, Size: 4]
	float ArriveTangent;//[Offset: 0x8, Size: 4]
	float LeaveTangent;//[Offset: 0xc, Size: 4]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 4]
	Vector Position;//[Offset: 0x4, Size: 12]
	Vector ArriveTangent;//[Offset: 0x10, Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 12]
	Rotator Rotation;//[Offset: 0x28, Size: 12]
	Vector Scale;//[Offset: 0x34, Size: 12]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x30c, Size: 12]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	bool bEnabledDeviceScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318, Size: 1]
	float VeryLowScale;//[Offset: 0x31c, Size: 4]
	float LowScale;//[Offset: 0x320, Size: 4]
	float MidScale;//[Offset: 0x324, Size: 4]
	float HighScale;//[Offset: 0x328, Size: 4]

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 4]
	float CullDistance;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x2e4, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	void OnRep_bEnabled();// 0x234daf8

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x240, Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x244, Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x254, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x258, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x25c, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x26c, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x270, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x274, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x284, Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x294, Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x298, Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x29c, Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x2ac, Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2b0, Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x2b4, Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x2b8, Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2bc, Size: 16]
	float FogHeightFalloff;//[Offset: 0x2cc, Size: 4]
	float FogMaxOpacity;//[Offset: 0x2d0, Size: 4]
	float StartDistance;//[Offset: 0x2d4, Size: 4]
	float FogCutoffDistance;//[Offset: 0x2d8, Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc, Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x2e0, Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x2e4, Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x2e8, Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x2f8, Size: 4]
	float VolumetricFogDistance;//[Offset: 0x2fc, Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x300, Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x308, Size: 4]
	Texture2D* VolumetricFogNoiseTexture;//[Offset: 0x30c, Size: 4]
	Transform VolumetricFogNoiseTransform;//[Offset: 0x310, Size: 48]
	void SetVolumetricFogStartDistance(float NewValue);// 0x4970968
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x49708f0
	void SetVolumetricFogNoiseTransform(Transform Transform);// 0x4970810
	void SetVolumetricFogNoiseTexture(Texture2D* NewValue);// 0x4970790
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x4970718
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x497069c
	void SetVolumetricFogDistance(float NewValue);// 0x4970624
	void SetVolumetricFogAlbedo(Color NewValue);// 0x49705b4
	void SetVolumetricFog(bool bNewValue);// 0x4970534
	void SetStartDistance(float Value);// 0x49704bc
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x4970444
	void SetInscatteringTextureTint(LinearColor Value);// 0x49703c8
	void SetInscatteringColorCubemapAngle(float Value);// 0x4970350
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x49702d8
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x4970260
	void SetFogMaxOpacity(float Value);// 0x49701e8
	void SetFogInscatteringColor(LinearColor Value);// 0x497016c
	void SetFogHeightFalloff(float Value);// 0x49700f4
	void SetFogDensity(float Value);// 0x492edfc
	void SetFogCutoffDistance(float Value);// 0x497007c
	void SetDirectionalInscatteringStartDistance(float Value);// 0x4970004
	void SetDirectionalInscatteringExponent(float Value);// 0x496ff8c
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x496ff10
	void SetCustomFogInscatteringColor(LinearColor Value, int Index);// 0x496fe50
	void SetCustomFogDensityCoefficient(float Value, int Index);// 0x496fd94

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0, Size: 4]
	float DensityCoefficient;//[Offset: 0x4, Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8, Size: 16]

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2e4, Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x2e9, Size: 1]

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x2e8, Size: 4]

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x2e4, Size: 4]

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x240, Size: 4]
	enum ReflectionSourceType;//[Offset: 0x244, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x248, Size: 4]
	float SourceCubemapAngle;//[Offset: 0x24c, Size: 4]
	float Brightness;//[Offset: 0x250, Size: 4]
	Vector CaptureOffset;//[Offset: 0x254, Size: 12]
	Guid stateID;//[Offset: 0x274, Size: 16]

--------------------------------
Class: BP_MiniMapStandardPoint_C.MiniMapStandardPoint.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	SceneComponent* DefaultSceneRoot;//[Offset: 0x308, Size: 4]

--------------------------------
Class: MiniMapStandardPoint.Actor.Object
	float LevelBoundExtent;//[Offset: 0x2e4, Size: 4]
	float EachTileExtent;//[Offset: 0x2e8, Size: 4]
	FString LevelName;//[Offset: 0x2ec, Size: 12]
	float FakeEdgeExtent;//[Offset: 0x2f8, Size: 4]
	VisualFieldLayerConfig VisualLayerConfig;//[Offset: 0x2fc, Size: 12]

--------------------------------
Class: VisualFieldLayerConfig
	VisualFieldLayer[] VisualLayerList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VisualFieldLayer
	float LayerFloorHeight;//[Offset: 0x0, Size: 4]
	float LayerRoofHeight;//[Offset: 0x4, Size: 4]
	int LayerID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: BP_radiation_C.RadiationCircle.RadiationCircleBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5b8, Size: 4]
	void UserConstructionScript(float OriginalRadius);// 0x46f6b154
	void PostInitRadiationCircle();// 0x46f6b154
	void ExecuteUbergraph_BP_radiation(int EntryPoint, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, GameStateBase* CallFunc_GetGameState_ReturnValue, int CallFunc_GetDeviceLevel_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsFeatureSupported_ReturnValue, int CallFunc_GetCVarConsoleValue_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x46f6b154
	StaticMeshComponent* Cylinder_Base;//[Offset: 0x5bc, Size: 4]
	StaticMeshComponent* Cylinder;//[Offset: 0x5c0, Size: 4]
	SceneComponent* Scene;//[Offset: 0x5c4, Size: 4]

--------------------------------
Class: RadiationCircle.RadiationCircleBase.Actor.Object
	StaticMeshComponent* CylinderMesh;//[Offset: 0x58c, Size: 4]
	StaticMeshComponent* CylinderMeshBase;//[Offset: 0x590, Size: 4]
	STExtraGameStateBase* SGameStatNew;//[Offset: 0x594, Size: 4]
	float ZScale;//[Offset: 0x598, Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x5ac, Size: 4]
	MaterialInstanceDynamic* DynamicMatBase;//[Offset: 0x5b0, Size: 4]
	void PostInitRadiationCircle();// 0x46f6b154
	void InitRadiationCircle();// 0x259e15c

--------------------------------
Class: RadiationCircleBase.Actor.Object
	SoftObjectPath UpperCylinderMesh;//[Offset: 0x2e8, Size: 24]
	SoftObjectPath BottomCylinderMesh;//[Offset: 0x300, Size: 24]
	<enum,float> CircleZScaleMap;//[Offset: 0x318, Size: 60]
	<enum,SoftObjectPath> CircleCylinderMaterialHigh;//[Offset: 0x354, Size: 60]
	<enum,SoftObjectPath> CircleCylinderMaterialLow;//[Offset: 0x390, Size: 60]
	<enum,FName> CircleBuffMap;//[Offset: 0x3cc, Size: 60]
	<FName,AddCircleBuffConditions> AddCircleBuffConditions;//[Offset: 0x408, Size: 60]
	<enum,int> CircleActivityIDMap;//[Offset: 0x444, Size: 60]
	<enum,int> CircleTipsIDMap;//[Offset: 0x480, Size: 60]
	FName CircleTipsIDTag;//[Offset: 0x4c0, Size: 8]
	<enum,int> AppearanceTipsMap;//[Offset: 0x4c8, Size: 60]
	float AppearanceTipsDelayTime;//[Offset: 0x504, Size: 4]
	int MapIconID;//[Offset: 0x508, Size: 4]
	enum InnerCircleType;//[Offset: 0x50c, Size: 1]
	STExtraBaseCharacter*[] InCirclePlayerList;//[Offset: 0x510, Size: 12]
	void OnRep_InnerCircleType();// 0x259e5fc
	void InitCircleAppearance();// 0x46f6b154
	void BroadcastInnerCircleAppearance(enum InCircleType);// 0x24db450

--------------------------------
Class: AddCircleBuffConditions
	enum[] NotAllowedPawnStates;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x22c, Size: 12]
	delegate OnUserMsaaSettingChanged;//[Offset: 0x238, Size: 12]
	delegate OnWaterReflectionSettingChanged;//[Offset: 0x244, Size: 12]
	delegate OnReplayBeginRecordingDelegate;//[Offset: 0x250, Size: 12]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x27c, Size: 12]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x288, Size: 12]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x294, Size: 12]
	UserDetailSetting UserDetailSetting;//[Offset: 0x2a0, Size: 120]
	RenderQualitySettings renderQualitySettingsLastSetTA;//[Offset: 0x318, Size: 12]
	RenderQualitySettings renderQualitySettingsInitTA;//[Offset: 0x324, Size: 12]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x333, Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	SwitchesInMaps[] SwitchesInMaps;//[Offset: 0x338, Size: 12]
	RenderItem[] LobbyBackupRenderSettings;//[Offset: 0x344, Size: 12]
	RenderItem[] LobbyRenderSettingsHigh;//[Offset: 0x350, Size: 12]
	RenderItem[] LobbyRenderSettingsMid;//[Offset: 0x35c, Size: 12]
	RenderItem[] LobbyRenderSettingsLow;//[Offset: 0x368, Size: 12]
	RenderItem[] LowFPSBackupRenderSettings;//[Offset: 0x374, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileHigh;//[Offset: 0x380, Size: 12]
	RenderItem[] LowFPSRenderSettingProfileMid;//[Offset: 0x38c, Size: 12]
	RenderItem[] MobileHDROpenConfig;//[Offset: 0x398, Size: 12]
	RenderItem[] MobileHDRCloseConfig;//[Offset: 0x3a4, Size: 12]
	RenderItem[] TournamentMobileHDROpenConfig;//[Offset: 0x3b0, Size: 12]
	RenderItem[] TournamentMobileHDRCloseConfig;//[Offset: 0x3bc, Size: 12]
	RenderItem[] MobileUltralHighOpenConfig;//[Offset: 0x3c8, Size: 12]
	RenderItem[] MobileUltralHighCloseConfig;//[Offset: 0x3d4, Size: 12]
	RenderItem[] MobileVerySmoothOpenConfig;//[Offset: 0x3e0, Size: 12]
	RenderItem[] MobileVerySmoothCloseConfig;//[Offset: 0x3ec, Size: 12]
	RenderItem[] TournamentMobileUltralHighOpenConfig;//[Offset: 0x3f8, Size: 12]
	RenderItem[] TournamentMobileUltralHighCloseConfig;//[Offset: 0x404, Size: 12]
	bool bEnhanceMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	RenderItem[] MobileEnhanceOpenConfig;//[Offset: 0x414, Size: 12]
	RenderItem[] MobileEnhanceCloseConfig;//[Offset: 0x420, Size: 12]
	RenderItem[] MobileMSAAOpenConfig;//[Offset: 0x42c, Size: 12]
	RenderItem[] Mobile2xMSAAOpenConfig;//[Offset: 0x438, Size: 12]
	RenderItem[] MobileMSAACloseConfig;//[Offset: 0x444, Size: 12]
	RenderItem[] MobilePPOpenConfig;//[Offset: 0x450, Size: 12]
	RenderItem[] MobilePPCloseConfig;//[Offset: 0x45c, Size: 12]
	RenderItem[] TournamentMobilePPOpenConfig;//[Offset: 0x468, Size: 12]
	RenderItem[] TournamentMobilePPCloseConfig;//[Offset: 0x474, Size: 12]
	FString[] RePairDeleteDir;//[Offset: 0x480, Size: 12]
	RenderStyleParameterInMaps[] RenderStyleParamsInMaps;//[Offset: 0x48c, Size: 12]
	bool AutoTestTriggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	FString DeviceNum4WebGM;//[Offset: 0x49c, Size: 12]
	FString CustomLineStr;//[Offset: 0x4a8, Size: 12]
	Vector2D FOVRange;//[Offset: 0x4b4, Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x4bc, Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c4, Size: 1]
	float SwimRotateX;//[Offset: 0x4c8, Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4cc, Size: 1]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x4f0, Size: 4]
	DeathPlayback* DeathPlayback;//[Offset: 0x4f4, Size: 4]
	Replay_SkeletalData_Manager* SkeletalDataManager;//[Offset: 0x4f8, Size: 4]
	ReplayCameraDataManager* ReplayCameraDataManager;//[Offset: 0x4fc, Size: 4]
	AssetRefStrategicManager* AssetRefStrategicManager;//[Offset: 0x500, Size: 4]
	CompletePlayback* CompletePlayback;//[Offset: 0x504, Size: 4]
	WonderfulPlayback* WonderfulPlayback;//[Offset: 0x508, Size: 4]
	ObPlayback* ObPlayback;//[Offset: 0x50c, Size: 4]
	LivePlayback* LivePlayback;//[Offset: 0x510, Size: 4]
	AntiCheatConfig* ACConfig;//[Offset: 0x560, Size: 4]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x570, Size: 4]
	AvatarVisibilityCollection* AvatarVisibilityCollection;//[Offset: 0x574, Size: 4]
	FString AvatarVisibilityCollectionClassPath;//[Offset: 0x578, Size: 12]
	<class Object,FrequncyAccessActorList> FrequencyAccessActorMap;//[Offset: 0x584, Size: 60]
	ObjectPoolConfig[] ObjectPoolConfigs;//[Offset: 0x5c0, Size: 12]
	bool bOpenStartupLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	FadeDynamicStyleInfo FadeInfo;//[Offset: 0x5d0, Size: 12]
	float DefaultGray;//[Offset: 0x5dc, Size: 4]
	RenderItem[] ResultAvatarShadowRenderSettingsHigh;//[Offset: 0x5e0, Size: 12]
	RenderItem[] ResultAvatarShadowRenderSettingsMid;//[Offset: 0x5ec, Size: 12]
	RenderItem[] ResultAvatarShadowRenderSettingsLow;//[Offset: 0x5f8, Size: 12]
	FName[] UILeakWhiteList;//[Offset: 0x604, Size: 12]
	class Object[] ObjectLeakFilterClassList;//[Offset: 0x610, Size: 12]
	Object* ClientEventCenterIns;//[Offset: 0x628, Size: 4]
	void WaterReflectionSettingChanged__DelegateSignature(bool bOpenWaterReflection);// 0x46f6b154
	bool UseStartupLevel();// 0x23c140c
	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);// 0x46f6b154
	void UserMsaaSettingChanged__DelegateSignature(bool UserMsaaSetting);// 0x46f6b154
	void TryStopRecordingReplayOnFinishState();// 0x266fa08
	void TryStartRecordingReplayOnFightState();// 0x266f9f4
	bool SupportTournamentMap();// 0x266f9cc
	bool StopRecordingReplayByType(enum ReplayType);// 0x266f944
	bool StartRecordingReplayByType(enum ReplayType, bool bSkipConditionCheck, enum RecordCondition, FString TargetName);// 0x266f7c8
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);// 0x266f70c
	void SetWaterReflectionSetting(bool bDoOpen);// 0x266f68c
	void SetVulkanSwitch(bool flag);// 0x266f60c
	void SetUserSetingShadowQuality(bool bShadow);// 0x266f58c
	void SetUserSetingMobilceContentSCale(float mcs);// 0x266f514
	bool SetSoundEffectQuality(int Type);// 0x266f494
	void SetRenderQuality(RenderQualitySettings RenderQualitySettings);// 0x266f3d8
	void SetHZBMobileState();// 0x266f3c4
	void SetFOVScreenSizeCullingFactor(float FOV);// 0x266f34c
	static void SetDeviceNum4WebGM();// 0x266f338
	static void SetCustomRouteLine();// 0x266f324
	void ReSetFOVScreenSizeCullingFactor();// 0x266f310
	void ReportInfoToBugly(FString InfoType, FString InMsg, FString CallStack);// 0x266f0cc
	void ReplayBeginRecordingDelegate__DelegateSignature();// 0x46f6b154
	void RenderForLowFPS();// 0x266f0b8
	void RefuseRenderForLowFPS();// 0x266f0a4
	void QuitGame();// 0x266f090
	void ProfileShot();// 0x266f07c
	void PreSetRenderQuality(RenderQualitySettings RenderQualitySettings, out bool renderLevelChanged);// 0x266ef6c
	void PostFileToTGPA(FString ExtraStr, FString FilePath);// 0x266edd8
	void OnStopAutoTest();// 0x266ed9c
	void OnStartAutoTest();// 0x266edc4
	void OnAutoTestTriggleOpen();// 0x266edb0
	void OnAutoTestTriggleClosed();// 0x266ed9c
	bool isUsingAssumedNameInReplay();// 0x266ed74
	bool IsTournamentSettingOpen();// 0x266ed4c
	bool IsSupportVulkan();// 0x266ed24
	bool IsSupportVerySmooth();// 0x266ecfc
	bool IsSupportTagCulling();// 0x266ece0
	bool IsSupportSwitchSoundEffectQuality();// 0x266ecb8
	bool IsSupportSwitchRenderLevelRuntime();// 0x266ec90
	bool IsSupportMSAA();// 0x266ec68
	bool IsSupportLDR();// 0x266ec40
	bool IsSupportEnhancement();// 0x266ec18
	bool IsSupportCivilVoiceDevice();// 0x266ebf0
	bool IsRecordingReplayOfType(enum ReplayType);// 0x266eb70
	bool IsPlayingReplayOfType(enum ReplayType);// 0x266eaf0
	bool IsPlayingAnyPlayback();// 0x266eac8
	bool IsOpenMSAA();// 0x266eaa0
	bool IsOpenHDR();// 0x266ea78
	bool IsInTournamentMap();// 0x266ea50
	bool IsFoldingScreenDevice(float baseValue);// 0x266e9d8
	bool IsFastForwardingReplay();// 0x266e9b0
	static bool IsAutoRunTestGameBindCompoment();// 0x266e988
	static bool IsAutoRunTestGame();// 0x266e960
	void InitRenderQualityLastSetTA(RenderQualitySettings TASetting);// 0x266e8a4
	void GMStandalone(FString Map);// 0x266e7c0
	WonderfulRecordingCut* GetWonderfulRecordingCut();// 0x266e798
	WonderfulPlayback* GetWonderfulPlayback();// 0x266e770
	bool GetWaterReflectionSetting();// 0x266e748
	bool GetVulkanSwitch();// 0x266e720
	bool GetUserSetingShadowQuality();// 0x266e6f8
	int GetUserQualitySettingLevel();// 0x266e6dc
	int GetSoundEffectQuality();// 0x266e6b4
	Replay_SkeletalData_Manager* GetSkeletalDataManager();// 0x266e68c
	ReplayCameraDataManager* GetReplayCameraDataManager();// 0x266e664
	RenderQualitySettings GetRenderQualityLastSet(bool isClassic);// 0x266e5b4
	RenderQualitySettings GetRenderQualityApplying(bool isClassic);// 0x266e504
	ObPlayback* GetObPlayback();// 0x266e4dc
	LivePlayback* GetLivePlayback();// 0x266e4b4
	bool GetIsFirstInitWaterReflectionSetting();// 0x266e48c
	static FString GetGetActiveProfileName();// 0x266e400
	int GetDeviceUpdateVersionFlag();// 0x266e3d0
	int GetDeviceTCQualityGrade();// 0x266e3a0
	byte GetDeviceMaxSupportLevel();// 0x266e378
	int GetDeviceMaxFPSByDeviceLevel(byte renderlevel, bool isClassic);// 0x266e2ac
	int GetDeviceLimit();// 0x266e284
	int GetDeviceLevel();// 0x266e254
	bool GetDefaultSoundEffectQuality();// 0x266e22c
	byte GetDefaultRenderQualityTA();// 0x266e204
	int GetDefaultFPS();// 0x266e1dc
	DeathPlayback* GetDeathPlayback();// 0x266e1b4
	enum GetCurPlayingReplayType();// 0x266e18c
	CompletePlayback* GetCompletePlayback();// 0x266e164
	Object* GetClientEventCenter();// 0x266e13c
	static int GetAutoRunTestServerIdx();// 0x266e114
	static FString GetAutoRunPassWD();// 0x266e088
	static FString GetAutoRunLuaTest();// 0x266dffc
	static FString GetAutoRunAccount();// 0x266df70
	AssetRefStrategicManager* GetAssetRefStrategicManager();// 0x266df48
	bool GetApplyingShadowQuality();// 0x266df20
	GameReplay* GetAnyRecordingPlayback();// 0x266def8
	GameReplay* GetAnyPlayingPlayback();// 0x266ded0
	void ExecuteCMD(FString CMDkey, FString CMDvalue);// 0x266dd3c
	void EnableStreamingLevelLOD(bool bEnable);// 0x266dcbc
	bool DeleteSavedFiles(bool allfilesSaved);// 0x266dc34
	void CheckShadowReductionForResultAvatarShow();// 0x266dc20
	void CheckShadowForResultAvatarShow(int InShadowQuality);// 0x266dba8
	void AutoActiveVerySmoothRenderItems(bool forceClose);// 0x266db28
	void AutoActiveUltralHighRenderItems();// 0x266db14
	void AutoActiveLDR();// 0x266db00
	bool ActiveStyle_PPForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x266d9f0
	void ActiveStyle_PP(byte Level);// 0x266d970
	bool ActiveStyle_ACESForDynamicRender(byte Type, float InterpSpeed, float DeltaTime);// 0x266d860
	void ActiveStyle(byte Level);// 0x266d7e0
	void ActiveNightVision(bool bSet);// 0x266d760
	void ActiveMSAA(bool bOpenMSAA);// 0x266d6e0
	void ActiveEnhance(int OpenValue);// 0x266d668
	void ActiveDynamicStyle(bool bSet, byte Type, float InterpSpeed, bool bNeedDestroyComp);// 0x266d504

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x160, Size: 168]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x220, Size: 4]
	UIMsgRouter* AssociatedUIMsgRouter;//[Offset: 0x224, Size: 4]
	bool StopRecordingReplayByType(enum ReplayType);// 0x266f944
	bool StartRecordingReplayByType(enum ReplayType, bool bSkipConditionCheck, enum RecordCondition, FString TargetName);// 0x266f7c8
	void StartLocalReplayContex();// 0x2887310
	void LocalReplayRecordingStop();// 0x28872fc
	void LocalReplayRecording(FString ReplayFile);// 0x288726c
	void LocalReplayPlaying(FString ReplayFile);// 0x28871dc
	float GetWeatherTime();// 0x28871c0
	int GetWeatherID();// 0x28871a0
	FString GetGameID();// 0x2887100
	int GetDeviceLevel();// 0x266e254
	FrontendHUD* GetAssociatedFrontendHUD();// 0x28870d8
	void ClientStartLuaDebuger(bool bDebugDS, FString IP, int Port);// 0x2886f60
	void AkEvents();// 0x235d4b8
	void AkBanks();// 0x235d4b8

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 12]
	uint64 RoleID;//[Offset: 0x10, Size: 8]
	FString GameSvrId;//[Offset: 0x18, Size: 12]
	FString GameAppID;//[Offset: 0x24, Size: 12]
	int8 AreaID;//[Offset: 0x30, Size: 1]
	int8 PlatID;//[Offset: 0x31, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	uint64 GameID;//[Offset: 0x48, Size: 8]
	FString BattleServerIP;//[Offset: 0x50, Size: 12]
	uint32 BattleServerPort;//[Offset: 0x5c, Size: 4]
	FString UserName;//[Offset: 0x60, Size: 12]
	FString PicUrl;//[Offset: 0x6c, Size: 12]
	uint32 PlayerKey;//[Offset: 0x78, Size: 4]
	int8 WeatherID;//[Offset: 0x80, Size: 1]
	FString WeatherLevelName;//[Offset: 0x84, Size: 12]
	float WeatherTime;//[Offset: 0x90, Size: 4]
	int[] MrpcsData;//[Offset: 0x94, Size: 12]
	uint32 loginChannel;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0, Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1, Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int TeamQualityEnhanceSetting;//[Offset: 0x4, Size: 4]
	bool IsClassicalSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0, Size: 4]
	int TCQualityGrade;//[Offset: 0x4, Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0x8, Size: 4]
	int UserQualitySetting;//[Offset: 0xc, Size: 4]
	int UserQualitySettingTA;//[Offset: 0x10, Size: 4]
	int DeviceSupportHDR;//[Offset: 0x14, Size: 4]
	int IsOpenHDR;//[Offset: 0x18, Size: 4]
	int UserHDRSetting;//[Offset: 0x1c, Size: 4]
	int IsSupportMSAA;//[Offset: 0x20, Size: 4]
	bool UserMsaaSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float UserMCSSetting;//[Offset: 0x28, Size: 4]
	int UserShadowSetting;//[Offset: 0x2c, Size: 4]
	int UserShadowSwitch;//[Offset: 0x30, Size: 4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x34, Size: 4]
	int PUBGLimitSetting;//[Offset: 0x38, Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x3c, Size: 4]
	int PUBGDeviceFPSDef;//[Offset: 0x40, Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x44, Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x48, Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x4c, Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x50, Size: 4]
	int PUBGDeviceFPSUltralHigh;//[Offset: 0x54, Size: 4]
	int PUBGDeviceFPSLowTA;//[Offset: 0x58, Size: 4]
	int PUBGDeviceFPSMidTA;//[Offset: 0x5c, Size: 4]
	int PUBGDeviceFPSHighTA;//[Offset: 0x60, Size: 4]
	int PUBGDeviceFPSHDRTA;//[Offset: 0x64, Size: 4]
	int PUBGDeviceFPSUltralHighTA;//[Offset: 0x68, Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	int PUBGTeamQualityEnhance;//[Offset: 0x70, Size: 4]
	int UserVulkanSetting;//[Offset: 0x74, Size: 4]

--------------------------------
Class: SwitchesInMaps
	FString MapName;//[Offset: 0x0, Size: 12]
	SwitchesItem[] Switches;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SwitchesItem
	FString Key;//[Offset: 0x0, Size: 12]
	float Value;//[Offset: 0xc, Size: 4]
	FString DependKey;//[Offset: 0x10, Size: 12]
	float DependValue;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: RenderItem
	FString RenderKey;//[Offset: 0x0, Size: 12]
	float RenderValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RenderStyleParameterInMaps
	byte DynamicStyleName;//[Offset: 0x0, Size: 1]
	FString[] PostProcessParams;//[Offset: 0x4, Size: 12]
	ACESParameter ACESParams;//[Offset: 0x10, Size: 40]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 16]
	float Bright;//[Offset: 0x10, Size: 4]
	float Gray;//[Offset: 0x14, Size: 4]
	float ShoulderStrength;//[Offset: 0x18, Size: 4]
	float ToeStrength;//[Offset: 0x1c, Size: 4]
	float LinearStrength;//[Offset: 0x20, Size: 4]
	float LinearAngle;//[Offset: 0x24, Size: 4]

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c, Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34, Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40, Size: 4]
	LogicManagerBase*[] LogicManagerList;//[Offset: 0x44, Size: 12]
	<FName,LogicManagerBase*> LogicManagerMap;//[Offset: 0x50, Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x8c, Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x90, Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0x94, Size: 4]
	FName CurrentGameStatus;//[Offset: 0xa8, Size: 8]
	FName PendingGameStatus;//[Offset: 0xb0, Size: 8]
	FName FromGameStatus;//[Offset: 0xb8, Size: 8]
	FString LatestGameStatusURL;//[Offset: 0xc4, Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0xd0, Size: 4]
	FrontendHUDExtension* Extension;//[Offset: 0xd4, Size: 4]
	void UninstallExtension();// 0x4b9d740
	void SwitchGameStatus(FName GameStatus, FString Options);// 0x4b9d600
	void OnWidgetAnimationFinished(FString AnimName);// 0x4b9d568
	void OnPreLoadMap(FString MapName);// 0x4b9d4d0
	void OnPostLoadMapWithWorld(World* World);// 0x49146ec
	void OnGameViewportClientCreated();// 0x235d4b8
	void OnClientGameModeStartPlay(FString GameModeName);// 0x4952660
	World* GetWorld();// 0x4b9d4a0
	FrontendUtils* GetUtils();// 0x4b9d478
	PlayerController* GetPlayerController();// 0x4b9d450
	LogicManagerBase*[] GetLogicManagerList();// 0x4b9d3e4
	LogicManagerBase* GetLogicManagerByName(FName LogicManagerTagName);// 0x4b9d364
	LogicManagerBase* GetLogicManager(int LogicManagerIndex);// 0x4b9d2e4
	GameViewportClient* GetGameViewportClient();// 0x4b9d2bc
	GameMode* GetGameMode();// 0x4b9d294
	FrontendHUDExtension* GetExtension();// 0x4b9d26c
	FrontendHUDExtension* ExtendHUD(class Object InClass);// 0x4b9d1ec
	void ClearLogicManagerByName(FString managerName);// 0x4b9d108
	void BroadcastMsgWithTarget(FString strMsg, FString module, out const FName TargetName);// 0x4b9cfbc
	void BroadCastMSG(FString strMsg, FString module);// 0x4b9cec8

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c, Size: 4]
	FName CurrentSceneCameraName;//[Offset: 0x38, Size: 8]
	CameraActor*[] SceneCameraList;//[Offset: 0x40, Size: 12]
	<FName,CameraActor*> SceneCameraMap;//[Offset: 0x4c, Size: 60]
	DirectionalLight*[] SceneDirectionalLightList;//[Offset: 0x88, Size: 12]
	<FName,DirectionalLight*> SceneDirectionalLightMap;//[Offset: 0x94, Size: 60]
	PointLight*[] ScenePointLightList;//[Offset: 0xd0, Size: 12]
	<FName,PointLight*> ScenePointLightMap;//[Offset: 0xdc, Size: 60]
	<FName,SkyLight*> SceneSkyLightMap;//[Offset: 0x118, Size: 60]
	<FName,Actor*> SceneMatChangeableMeshMap;//[Offset: 0x154, Size: 60]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x1e8, Size: 12]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x1f4, Size: 4]
	Object* GlobalUIEventDispatcher;//[Offset: 0x1f8, Size: 4]
	FString GlobalUIContainerClassName;//[Offset: 0x1fc, Size: 12]
	FName[] GlobalUIContainerNames;//[Offset: 0x208, Size: 12]
	<FName,UAEWidgetContainer*> GlobalUIContainers;//[Offset: 0x214, Size: 60]
	UAEWidgetContainer*[] GlobalPushUIContainers;//[Offset: 0x250, Size: 12]
	<FName,UAEWidgetContainer*> GlobalPushUIRelations;//[Offset: 0x25c, Size: 60]
	void UnRegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x4b9f450
	void SwitchSceneCameraToTransform(Transform targetTrans, byte ProjectionMode, float FOV, float BlendTime, bool bForce);// 0x4b9f240
	void SwitchSceneCamera(FName SceneCameraName, float BlendTime, bool bForce);// 0x4b9f120
	void SetSceneSkyLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color);// 0x4b9ef50
	void SetScenePointLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, int inverseSquareFalloff, float Radius);// 0x4b9ecf0
	void SetSceneDirectionalLightProperty(FName sceneLightName, Transform targetTrans, float Intensity, LinearColor Color, LightingChannels Channel);// 0x4b9ead0
	void RegisterSceneSkyLight(FName sceneLightName, SkyLight* Light);// 0x4b9ea14
	void RegisterScenePointLight(FName sceneLightName, PointLight* Light);// 0x4b9e958
	void RegisterSceneMatChangeableMesh(FName MeshName, Actor* Mesh);// 0x4b9e89c
	void RegisterSceneDirectionalLight(FName sceneLightName, DirectionalLight* Light);// 0x4b9e7e0
	void RegisterSceneCamera(FName SceneCameraName, CameraActor* SceneCamera);// 0x4b9e724
	void PopAllPushedUI();// 0x4b9e710
	void OnAllSceneCamerasRegistered();// 0x2374d20
	bool IsSameCamera(Transform targetTrans, byte ProjectionMode, float FOV);// 0x4b9e590
	bool IsPushedPanel(out const FName managerName);// 0x4b9e4f0
	void HideAllOtherPanelExceptOwnThisWidget(const Widget* Widget, bool Hide);// 0x4b9e42c
	bool GlobalUIEventDispatcher_GetDelegateIsBound(FString DelegateNum);// 0x4b9e340
	FString GetUIStackTopSrcTag();// 0x4b9e2ac
	FString GetUIStackTopDstTag();// 0x4b9e218
	FString GetUIStackTop();// 0x4b9e184
	Actor* GetSceneMatChangeableMeshByIdx(FName MeshName);// 0x4b9e104
	int GetPushedUICount();// 0x4b9e0dc
	FrontendHUD* GetOwningFrontendHUD();// 0x24a9ac8
	Object* GetGlobalUIEventDispatcher();// 0x4b9e0b4
	UAEWidgetContainer* GetGlobalUIContainer(FName ContainerName);// 0x4b9e034
	CameraActor* GetCurrentSceneCamera();// 0x4b9e00c
	void ClearLobbyAsset();// 0x4b9dff8

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x2e4, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	void ToggleEnabled();// 0x49e96bc
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x49e963c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x49e95c4
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x49e954c
	void SetLightColor(LinearColor NewLightColor);// 0x49e94d0
	void SetEnabled(bool bSetEnabled);// 0x49e9450
	void SetCastShadows(bool bNewValue);// 0x49e93d0
	void SetBrightness(float NewBrightness);// 0x49e9358
	void SetAffectTranslucentLighting(bool bNewValue);// 0x49e92d8
	void OnRep_bEnabled();// 0x234daf8
	bool IsEnabled();// 0x49e92b0
	LinearColor GetLightColor();// 0x49e926c
	float GetBrightness();// 0x49e9244

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x268, Size: 4]
	float MaxDrawDistance;//[Offset: 0x26c, Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x270, Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274, Size: 1]
	int ShadowMapChannel;//[Offset: 0x278, Size: 4]
	float MinRoughness;//[Offset: 0x280, Size: 4]
	float ShadowResolutionScale;//[Offset: 0x284, Size: 4]
	int LightPriority;//[Offset: 0x288, Size: 4]
	float ShadowBias;//[Offset: 0x28c, Size: 4]
	float ShadowSharpen;//[Offset: 0x290, Size: 4]
	float ContactShadowLength;//[Offset: 0x294, Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 1]
	bool bCacheStaticShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x298, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x298, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x298, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x298, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x299, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x29c, Size: 4]
	Vector LightFunctionScale;//[Offset: 0x2a0, Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x2ac, Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b0, Size: 1]
	float IESBrightnessScale;//[Offset: 0x2b4, Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x2b8, Size: 4]
	float DisabledBrightness;//[Offset: 0x2bc, Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c0, Size: 1]
	float BloomScale;//[Offset: 0x2c4, Size: 4]
	float BloomThreshold;//[Offset: 0x2c8, Size: 4]
	Color BloomTint;//[Offset: 0x2cc, Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2d4, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x49ea59c
	void SetTemperature(float NewTemperature);// 0x49ea524
	void SetShadowBias(float NewValue);// 0x49ea4ac
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x49ea42c
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x49ea3b4
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x49ea33c
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x49ea2c4
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x49ea1fc
	void SetIntensity(float NewIntensity);// 0x49ea184
	void SetIndirectLightingIntensity(float NewIntensity);// 0x49ea10c
	void SetIESTexture(TextureLightProfile* NewValue);// 0x49ea094
	void SetEnableLightShaftBloom(bool bNewValue);// 0x49ea014
	void SetBloomTint(Color NewValue);// 0x49e9fa4
	void SetBloomThreshold(float NewValue);// 0x49e9f2c
	void SetBloomScale(float NewValue);// 0x49e9eb4
	void SetAffectTranslucentLighting(bool bNewValue);// 0x49e9e34
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x49e9db4
	void ForceUpdateShadowState();// 0x49e9da0

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x240, Size: 16]
	float Brightness;//[Offset: 0x250, Size: 4]
	float Intensity;//[Offset: 0x254, Size: 4]
	Color LightColor;//[Offset: 0x258, Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25c, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25c, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25c, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x25c, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x25c, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x25c, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x260, Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x264, Size: 4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x49eb5f8
	void SetCastShadows(bool bNewValue);// 0x49eb578
	LinearColor GetLightColor();// 0x49eb534

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xd8, Size: 4]
	float TextureMultiplier;//[Offset: 0xdc, Size: 4]

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x2ec, Size: 4]
	void SetRadius(float NewRadius);// 0x4a3ac64
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x4a3abec

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x33c, Size: 4]
	float AttenuationRadius;//[Offset: 0x340, Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344, Size: 1]
	float LightFalloffExponent;//[Offset: 0x348, Size: 4]
	float SourceRadius;//[Offset: 0x34c, Size: 4]
	float SoftSourceRadius;//[Offset: 0x350, Size: 4]
	float SourceLength;//[Offset: 0x354, Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358, Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x358, Size: 1]
	float RectLightSourceWidth;//[Offset: 0x35c, Size: 4]
	float RectLightSourceHeight;//[Offset: 0x360, Size: 4]
	bool bEnableForVertexPointLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x368, Size: 12]
	void SetSourceRadius(float bNewValue);// 0x4a3b378
	void SetSourceLength(float NewValue);// 0x4a3b300
	void SetSoftSourceRadius(float bNewValue);// 0x4a3b288
	void SetSimulateRectLight(bool NewValue);// 0x4a3b208
	void SetSimulatePortalLight(bool NewValue);// 0x4a3b188
	void SetRectLightSourceWidth(float NewValue);// 0x4a3b110
	void SetRectLightSourceHeight(float NewValue);// 0x4a3b098
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x4a3b020
	void SetAttenuationRadius(float NewRadius);// 0x4a3afa8

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 4]
	float ShadowExponent;//[Offset: 0x4, Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x2e4, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8, Size: 1]
	void OnRep_bEnabled();// 0x234daf8

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x268, Size: 1]
	TextureCube* Cubemap;//[Offset: 0x26c, Size: 4]
	float SourceCubemapAngle;//[Offset: 0x270, Size: 4]
	int CubemapResolution;//[Offset: 0x274, Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x278, Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x280, Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x290, Size: 4]
	float Contrast;//[Offset: 0x294, Size: 4]
	float OcclusionExponent;//[Offset: 0x298, Size: 4]
	float MinOcclusion;//[Offset: 0x29c, Size: 4]
	Color OcclusionTint;//[Offset: 0x2a0, Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x2a4, Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x348, Size: 4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x4a61a8c
	void SetOcclusionTint(out const Color InTint);// 0x4a61a08
	void SetOcclusionExponent(float InOcclusionExponent);// 0x4a61990
	void SetOcclusionContrast(float InOcclusionContrast);// 0x4a61918
	void SetMinOcclusion(float InMinOcclusion);// 0x4a618a0
	void SetLightColor(LinearColor NewLightColor);// 0x4a61824
	void SetIntensity(float NewIntensity);// 0x4a617ac
	void SetIndirectLightingIntensity(float NewIntensity);// 0x4a61734
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x4a61634
	void SetCubemap(TextureCube* NewCubemap);// 0x4a615bc
	void RecaptureSky();// 0x4a615a8

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UAEUserWidget*[] WidgetList;//[Offset: 0x370, Size: 12]
	void RemoveWidgetInternal(UAEUserWidget* Widget);// 0x24f2fb4
	void RemoveWidget(UAEUserWidget* Widget);// 0x4ba38ac
	void AddWidgetInternal(UAEUserWidget* Widget);// 0x4ba382c
	void AddWidget(UAEUserWidget* Widget);// 0x4ba37b4

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1dc, Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x1e0, Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x1e4, Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x1e8, Size: 4]
	Property*[] Params;//[Offset: 0x264, Size: 12]
	FName IndexName;//[Offset: 0x278, Size: 8]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x280, Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x2a0, Size: 32]
	bool bLimitTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	float TickRate;//[Offset: 0x2c4, Size: 4]
	GMCommand[] GMCommandList;//[Offset: 0x2c8, Size: 12]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6, Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7, Size: 1]
	bool bConsiderPawnStateChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool needCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	Vector2D ScreenPos;//[Offset: 0x2e8, Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x2f0, Size: 8]
	delegate OnMouseButtonDownHandler;//[Offset: 0x2f8, Size: 16]
	delegate OnMouseButtonUpHandler;//[Offset: 0x308, Size: 16]
	FString WidgetTlogName;//[Offset: 0x318, Size: 12]
	enum FadingStatus;//[Offset: 0x32d, Size: 1]
	float CurrentOpacity;//[Offset: 0x330, Size: 4]
	float FadingInTime;//[Offset: 0x334, Size: 4]
	float FadingOutTime;//[Offset: 0x338, Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d, Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33e, Size: 1]
	int StandWidth;//[Offset: 0x340, Size: 4]
	int StandHeight;//[Offset: 0x344, Size: 4]
	bool bReceiveOnTouchBeganEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool bReceiveOnTouchEndedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool Visible();// 0x4ba2540
	void UnRegistTouchEvent();// 0x4ba252c
	void UnRegistFromGameFrontendHUD();// 0x4ba2510
	void SynchronizeBlueprintProperties();// 0x46f6b154
	void Show();// 0x4ba24fc
	void SetParentWidgetRecursive(UAEUserWidget* InParentWidget);// 0x4ba2484
	void SetParentWidget(UAEUserWidget* InParentWidget);// 0x4ba240c
	void SetAdapation(float Left, float Top, float Right, float Bottom);// 0x4ba22c4
	void RespawnInitWidget();// 0x2451c0c
	void RegistTouchEvent();// 0x4ba22b0
	void RegistToGameFrontendHUD();// 0x4ba2294
	void Register(LogicManagerBase* LogicManager, bool bAddToViewport);// 0x4ba21d0
	void ReceiveShow();// 0x46f6b154
	void ReceivePreDestroy();// 0x46f6b154
	void ReceiveHide();// 0x46f6b154
	void ReceivedNetObjEvent(FString NetObj);// 0x46f6b154
	void ReceivedInitWidget();// 0x46f6b154
	void PostLocalMainCharInitialized(PlayerController* InPlayerController);// 0x46f6b154
	void OnViewportTouchEnded(int touchIndex, Vector2D touchLocation);// 0x4ba2114
	void OnViewportTouchBegan(int touchIndex, Vector2D touchLocation);// 0x4ba2058
	void OnRightClicked(Vector2D TempScreenPos);// 0x46f6b154
	void OnFadeOutFinished();// 0x23d0bb0
	void OnFadeInFinished();// 0x23d0bcc
	void OnDoubleClicked(Vector2D TempScreenPos);// 0x46f6b154
	void OnClicked(Vector2D TempScreenPos);// 0x46f6b154
	void InitWidget(bool Recursive, bool DynamicCreation, bool TopWidget);// 0x4ba1f38
	void InitCustomWidget(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x25cb7a0
	void Hide();// 0x4ba1f24
	void HandleUIMessageBattle(FString UIMessage);// 0x4ba1e94
	void HandleUIMessage(FString UIMessage);// 0x4ba1e04
	Widget* GetWidgetsByName(FString WidgetName, FString OuterName, bool bUseContains, bool bUseStartWith);// 0x4ba1c70
	Margin GetUIAdaptation();// 0x4ba1c2c
	UAEUserWidget* GetParentWidget();// 0x4ba1c04
	PlayerController* GetOwningPlayer();// 0x25e9b04
	LogicManagerBase* GetOwningLogicManager();// 0x4ba1bdc
	FrontendHUD* GetOwningFrontendHUD();// 0x4ba1bb4
	FName GetOwnerModuleName();// 0x4ba1b88
	MaterialInstanceDynamic* GetImgDynamicMaterial(Image* ImageMat);// 0x4ba1b08
	UserWidget* GetChildWidgetByEqualPolitics(FString ChildName, enum EqualPolitics, int RecursiveDepth);// 0x4ba19e8
	UserWidget* GetChildWidget(FString WName);// 0x4ba1950
	void ClearFunctionCacheByMsgName(FString InUIMsg);// 0x4ba18c0
	void ClearFunctionCache();// 0x4ba18ac
	void BP_DestroyWidget();// 0x4ba1898
	void BindCustomUserEvent(Actor* OwnerActor, WidgetComponent* WidgetComponent);// 0x2500abc
	void AddUIFunctionToParent(FString UIMessage, Widget* Child);// 0x4ba17c4
	void AddAllUIFunctionToParent(Widget* Child);// 0x4ba174c

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28, Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int iUIControlState;//[Offset: 0x34, Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x38, Size: 4]
	int SceneCameraBlendTime;//[Offset: 0x3c, Size: 4]
	int DefaultSceneInfoIdx;//[Offset: 0x40, Size: 4]
	FName[] GameStatusList;//[Offset: 0x50, Size: 12]
	class Object[] WidgetUClassList;//[Offset: 0xbc, Size: 12]
	<FString,class Object> ReplaceUClassList;//[Offset: 0xc8, Size: 60]
	UAEUserWidget*[] WidgetList;//[Offset: 0x104, Size: 12]
	<FName,WidgetsMapList> WidgetsMap;//[Offset: 0x14c, Size: 60]
	<FString,UAEUserWidget*> SingleWidgetMap;//[Offset: 0x188, Size: 60]
	void SetEnableRemoveDynamicWidgets(bool bEnable);// 0x23910d8
	bool IsEnableRemoveDynamicWidgets();// 0x259b02c
	int GetSceneCameraBlendTime();// 0x4984f74
	FrontendHUD* GetOwningFrontendHUD();// 0x24a9aa0
	int GetDefaultSceneCamera();// 0x49854c4
	void DispatchUIMessage(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x4ba0278
	void ClearUIMessageCache(FString UIMessage, Object* Source, UAEUserWidget* Target);// 0x4ba010c

--------------------------------
Class: WidgetsMapList
	UAEUserWidget*[] Widgets;//[Offset: 0x0, Size: 12]

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0, Size: 12]
	FName ContainerName;//[Offset: 0x10, Size: 8]
	int ZOrder;//[Offset: 0x18, Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GMCommand
	FString Name;//[Offset: 0x0, Size: 12]
	FString Cmd;//[Offset: 0xc, Size: 12]
	FString DefaultParam;//[Offset: 0x18, Size: 12]
	FString Server;//[Offset: 0x24, Size: 12]
	FString Tips;//[Offset: 0x30, Size: 12]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x56a, Size: 1]
	enum TimingPolicy;//[Offset: 0x56b, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x56c, Size: 4]
	IntPoint DrawSize;//[Offset: 0x570, Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	bool bCheckLowDeviceQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a, Size: 1]
	float RedrawTime;//[Offset: 0x57c, Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x588, Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	Vector2D Pivot;//[Offset: 0x594, Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5a0, Size: 4]
	LinearColor BackgroundColor;//[Offset: 0x5a4, Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x5b4, Size: 16]
	float OpacityFromTexture;//[Offset: 0x5c4, Size: 4]
	enum BlendMode;//[Offset: 0x5c8, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca, Size: 1]
	UserWidget* Widget;//[Offset: 0x5cc, Size: 4]
	BodySetup* BodySetup;//[Offset: 0x5e0, Size: 4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x5e4, Size: 4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x5e8, Size: 4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x5ec, Size: 4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x5f0, Size: 4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x5f4, Size: 4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x5f8, Size: 4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x5fc, Size: 4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x600, Size: 4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605, Size: 1]
	FName SharedLayerName;//[Offset: 0x608, Size: 8]
	int LayerZOrder;//[Offset: 0x610, Size: 4]
	enum GeometryMode;//[Offset: 0x614, Size: 1]
	float CylinderArcAngle;//[Offset: 0x618, Size: 4]
	Vector FlipVector;//[Offset: 0x61c, Size: 12]
	void SetWidget(UserWidget* Widget);// 0x2fc0778
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x3e4b6e4
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x3e4b66c
	void SetDrawSize(Vector2D Size);// 0x3e4b5fc
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x3e4b580
	void RequestRedraw();// 0x2460b54
	UserWidget* GetUserWidgetObject();// 0x3e4b558
	TextureRenderTarget2D* GetRenderTarget();// 0x3e4b530
	LocalPlayer* GetOwnerPlayer();// 0x3e4b508
	MaterialInstanceDynamic* GetMaterialInstance();// 0x3e4b4e0
	Vector2D GetDrawSize();// 0x3e4b4a0
	void ForceWidgetUpdateImmediate();// 0x3e4b48c
	void ForceUpdateRenderTarget();// 0x3e4b478

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xa8, Size: 4]
	int SizeY;//[Offset: 0xac, Size: 4]
	LinearColor ClearColor;//[Offset: 0xb0, Size: 16]
	byte AddressX;//[Offset: 0xc0, Size: 1]
	byte AddressY;//[Offset: 0xc1, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc2, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc2, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xc3, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 1]
	byte OverrideFormat;//[Offset: 0xc5, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: Image.Widget.Visual.Object
	Object* BrushImage;//[Offset: 0xf0, Size: 40]
	SoftObjectPath BrushAssetReference;//[Offset: 0x118, Size: 24]
	SlateBrush Brush;//[Offset: 0x130, Size: 104]
	delegate BrushDelegate;//[Offset: 0x198, Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x1a8, Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b8, Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	float HitTestAreaRadius;//[Offset: 0x1cc, Size: 4]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1d0, Size: 16]
	void SetOpacity(float InOpacity);// 0x3e25e78
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3e25dfc
	void SetBrushImageReference(SoftObjectPath AssetReference);// 0x3e25d04
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x3e25c40
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x3e25b7c
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x3e25b04
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x3e25a8c
	void SetBrush(out const SlateBrush InBrush);// 0x3e258e4
	void OnAsyncLoadImageAssetComplete();// 0x3e258d0
	void OnAsyncLoadAssetComplete();// 0x3e258bc
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3e25894

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20, Size: 104]

--------------------------------
Class: FrontendHUDExtension.Object

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x338, Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 1]
	int NumSpectators;//[Offset: 0x344, Size: 4]
	int NumPlayers;//[Offset: 0x348, Size: 4]
	int NumBots;//[Offset: 0x34c, Size: 4]
	float MinRespawnDelay;//[Offset: 0x350, Size: 4]
	int NumTravellingPlayers;//[Offset: 0x354, Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x358, Size: 4]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x35c, Size: 12]
	float InactivePlayerStateLifeSpan;//[Offset: 0x368, Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	void StartMatch();// 0x260f91c
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x4973d00
	void Say(FString Msg);// 0x4973c68
	void RestartGame();// 0x2460d50
	bool ReadyToStartMatch();// 0x26e26c8
	bool ReadyToEndMatch();// 0x4973c38
	void K2_OnSetMatchState(FName NewState);// 0x46f6b154
	bool IsMatchInProgress();// 0x26fb9f4
	bool HasMatchEnded();// 0x269162c
	FName GetMatchState();// 0x4973c14
	void EndMatch();// 0x256b214
	void AbortMatch();// 0x23b6820

--------------------------------
Class: UIMsgRouter.GameMsgRouter.BlueprintFunctionLibrary.Object
	static void UnRegistUIMsgListener(const FString InMsgName, const Object* InMsgLisenter);// 0x288ddc4
	static void RouteUIMsg_8Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5, int Param6, int Param7, int Param8);// 0x288dbc8
	static void RouteUIMsg_7Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5, int Param6, int Param7);// 0x288d9cc
	static void RouteUIMsg_6Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5, int Param6);// 0x288d7d0
	static void RouteUIMsg_5Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4, int Param5);// 0x288d5d4
	static void RouteUIMsg_4Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3, int Param4);// 0x288d3d8
	static void RouteUIMsg_3Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2, int Param3);// 0x288d1dc
	static void RouteUIMsg_2Params(const Object* WorldContextObj, FString InMsgName, int param1, int param2);// 0x288cf30
	static void RouteUIMsg_1Param(const Object* WorldContextObj, FString InMsgName, int param1);// 0x288cd5c
	static void RouteUIMsg(const Object* WorldContextObj, FString InMsgName);// 0x288cc90
	static bool RegistUIMsgListener(const FString InMsgName, const Object* InMsgLisenter, const FString InMsgCallbackFuncName, const bool bInLogMsgCall);// 0x288ca64

--------------------------------
Class: GameMsgRouter.BlueprintFunctionLibrary.Object
	<FString,GameMsgListenerGroup*> MsgListenerGroupMap;//[Offset: 0x1c, Size: 60]
	void UnRegistMsgListener(const FString InMsgName, const Object* InMsgLisenter);// 0x2876f34
	bool RouteMsg(FString InMsgName);// 0x2876e9c
	bool RegistMsgListener(const FString InMsgName, const Object* InMsgLisenter, const FString InMsgCallbackFuncName, const bool bInLogMsgCall);// 0x2876c68

--------------------------------
Class: GameMsgListenerGroup.Object
	FString MsgName;//[Offset: 0x1c, Size: 12]
	MsgListenerMeta[] MsgListenerGroup;//[Offset: 0x28, Size: 12]
	Object* CurFrameMsgListenerObj;//[Offset: 0x34, Size: 8]

--------------------------------
Class: MsgListenerMeta
	FName MsgCallbackFuncName;//[Offset: 0x0, Size: 8]
	Object* MsgListenerObj;//[Offset: 0xc, Size: 8]

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputData[] WonderfulCutOutputDataList;//[Offset: 0x1c, Size: 12]
	WonderfulCutContinuousKillOutputData[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x28, Size: 12]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x60, Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x68, Size: 4]
	WonderfulCutShootDamageData[] ShootDamageDataList;//[Offset: 0x6c, Size: 12]
	void StopRecord(bool bRankFirst);// 0x27dbb30
	void StartRecord();// 0x27dbb1c
	void SortShootDamageData(out WonderfulCutShootDamageSortData[] LargeCircleDataList, out WonderfulCutShootDamageSortData[] SmallCircleDataList);// 0x27db9b0
	void RemoveOutputDataInContinuousKillRange(out WonderfulCutShootDamageSortData[] SortDataList);// 0x27db8e4
	void CaptureRecordCut(byte CaptureType, int DamagePlayerID, bool bAI, byte ShootDamageType, float ShootDistance, FString CauserName);// 0x27db67c
	void BuildOutputData();// 0x27db668
	void BuildContinuousKillOutputData();// 0x27db654

--------------------------------
Class: WonderfulCutOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	byte WonderfulCutType;//[Offset: 0x8, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WonderfulCutContinuousKillOutputData
	float BeginTimeSecs;//[Offset: 0x0, Size: 4]
	float EndTimeSecs;//[Offset: 0x4, Size: 4]
	int KillNum;//[Offset: 0x8, Size: 4]
	float FarthestKillDistance;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WonderfulCutShootDamageData
	int DamagePlayerID;//[Offset: 0x0, Size: 4]
	WonderfulCut_OneShootDamage[] ShootDamageList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WonderfulCut_OneShootDamage
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte CaptureType;//[Offset: 0x1, Size: 1]
	byte ShootDamageType;//[Offset: 0x2, Size: 1]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	float ShootDistance;//[Offset: 0x8, Size: 4]
	FString CauserName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WonderfulCutShootDamageSortData
	float DamageIntervalSecs;//[Offset: 0x0, Size: 4]
	float DamageTimeSecs;//[Offset: 0x4, Size: 4]
	bool bVictimAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte CaptureType;//[Offset: 0x9, Size: 1]
	byte ShootDamageType;//[Offset: 0xa, Size: 1]
	float ShootDistance;//[Offset: 0xc, Size: 4]
	FString CauserName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: DeathPlayback.GameReplay.Object
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	FString[] EnabledGameModeWhiteList;//[Offset: 0x2cc, Size: 12]
	FString[] EnabledGameModeBlackList;//[Offset: 0x2d8, Size: 12]
	float PlaybackTimeBeforeDeath;//[Offset: 0x2e4, Size: 4]
	float PlaybackTimeBeforeDeathForAI;//[Offset: 0x2e8, Size: 4]
	float MinValidRecordLenthRequired;//[Offset: 0x2ec, Size: 4]
	float DeathToStopRecordTime;//[Offset: 0x2f0, Size: 4]
	void OnPlayerControllerReconnected();// 0x243eb1c
	bool IsSwitchedOffByDevice();// 0x243eaf4
	FString GetReplayVictimName();// 0x243ea60
	FString GetReplayTargetName();// 0x243e9cc
	void EnableDeathPlayback(bool bEnable);// 0x243e94c

--------------------------------
Class: GameReplay.Object
	bool bJumpCheckCameraView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	UserWidget* GMUI;//[Offset: 0x78, Size: 4]
	class UserWidget* GMUIClass;//[Offset: 0x80, Size: 40]
	float VolumeValueMax;//[Offset: 0xac, Size: 4]
	bool IsLive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float SimulateLiveTotalTime;//[Offset: 0xb4, Size: 4]
	bool IsLivePlayEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int RecordHz;//[Offset: 0xf8, Size: 4]
	float BufferHintSeconds;//[Offset: 0xfc, Size: 4]
	float MaxDesiredRecordTimeMS;//[Offset: 0x100, Size: 4]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x104, Size: 4]
	float CheckpointUploadDelayInSeconds;//[Offset: 0x108, Size: 4]
	bool bUseCheckPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	float ViewDistanceFactorFlying;//[Offset: 0x110, Size: 4]
	float ScreenSizeCullingFactorFlying;//[Offset: 0x114, Size: 4]
	float ViewDistanceFactorLand;//[Offset: 0x118, Size: 4]
	float ScreenSizeCullingFactorLand;//[Offset: 0x11c, Size: 4]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	STExtraBaseCharacter* ViewCharacter;//[Offset: 0x164, Size: 8]
	STExtraVehicleBase* ViewVehicle;//[Offset: 0x16c, Size: 8]
	STExtraPlayerController* PlayerController;//[Offset: 0x174, Size: 4]
	ReplayWidgetBase* ReplayWidgetPtr;//[Offset: 0x184, Size: 8]
	ReplayProgressbarWidget* ReplayProgressWidgetPtr;//[Offset: 0x18c, Size: 8]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	delegate OnReplayReadyInitUIDelegate;//[Offset: 0x198, Size: 12]
	delegate OnReplayGotoTimeResetUIDelegate;//[Offset: 0x1a4, Size: 12]
	delegate OnReplayResetViewTargetDelegate;//[Offset: 0x1b0, Size: 12]
	class ReplayWidgetBase* ReplayWidgetClass;//[Offset: 0x1c0, Size: 40]
	class ReplayProgressbarWidget* ReplayProgressWidgetClass;//[Offset: 0x1e8, Size: 40]
	void SwitchFreeViewMode();// 0x24aebdc
	bool StopRecordingReplay();// 0x248bfc8
	bool StopPlay();// 0x248bf98
	bool StartRecordingReplay(bool bSkipConditionCheck, enum RecordCondition);// 0x248bec0
	void SetTickable(bool bTickble);// 0x24aeb60
	void SetSpectatorName(FString SpectatorName, bool bgm, bool isChangeViewTarget, bool isAutoSetName);// 0x24ae984
	bool SetReplayTimeDilation(float InDilation);// 0x24ae904
	void SetIsGMSpectator(bool bgm);// 0x24ae888
	void SetCurrentReplayTimeToSeconds(float Seconds);// 0x24ae810
	void RefreshFlags(bool bSkipConditionCheck, enum RecordCondition);// 0x24ae740
	bool PlayReplay();// 0x248bb7c
	bool PlayCurOverDemoWithTime(float Time);// 0x24ae6c0
	bool PauseReplay(bool bPaused);// 0x24ae630
	void OnPostLoadMapWithWorld(World* World);// 0x24ae5b0
	bool IsInRecordState();// 0x24ae588
	bool IsInPlayState();// 0x24ae560
	bool IsFastForwarding();// 0x24ae538
	bool HaveRecordingData();// 0x239d610
	void HandleOnPlayerExit(UAEPlayerController* UAEPC);// 0x24ae4b8
	STExtraBaseCharacter* GetViewCharacter();// 0x24ae490
	FString GetSpectatorName();// 0x24ae3fc
	float GetReplayStartRecordTime();// 0x24ae3d4
	float GetCurrentReplayTotalTimeInSeconds();// 0x2395dac
	float GetCurrentReplayCurTimeInSeconds();// 0x24ae3ac
	void ClearReplayUI();// 0x24ae398

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0xbd8, Size: 12]
	delegate OnPlayerPawnHPChange;//[Offset: 0xbe4, Size: 12]
	delegate OnPlayerHealthStatusChangedDelegate;//[Offset: 0xbf0, Size: 12]
	delegate OnBulletChange;//[Offset: 0xbfc, Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0xc08, Size: 12]
	delegate OnPlayerEnterBeRescueingStatus;//[Offset: 0xc14, Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0xc20, Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0xc2c, Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0xc38, Size: 12]
	delegate OnPlayerWeaponReloadLastBullet;//[Offset: 0xc44, Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0xc50, Size: 12]
	delegate OnWeaponShootIntervalModeChangeDelegate;//[Offset: 0xc5c, Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0xc68, Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xc74, Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0xc80, Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0xc8c, Size: 12]
	delegate OnDeathDelegate;//[Offset: 0xc98, Size: 12]
	delegate OnTakeDamageModify_Override;//[Offset: 0xca8, Size: 16]
	delegate OnTakeDamageModify_ExHealth;//[Offset: 0xcb8, Size: 16]
	delegate OnPostTakeDamage;//[Offset: 0xcc8, Size: 12]
	bool bBroadcastNotifyInitialDamageDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd4, Size: 1]
	delegate OnNotifyInitialDamage;//[Offset: 0xcd8, Size: 12]
	delegate OnSelfEnterState;//[Offset: 0xce4, Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0xcf0, Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0xcfc, Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0xd38, Size: 12]
	delegate AnimMontageJumpSectionDelegate;//[Offset: 0xd44, Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xd50, Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xd5c, Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xd68, Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0xd74, Size: 12]
	delegate OnChangedFlyWingStateDelegate;//[Offset: 0xd80, Size: 12]
	delegate OnCharacterBecomeViewTarget;//[Offset: 0xd8c, Size: 12]
	delegate OnCharacterEndViewTarget;//[Offset: 0xd98, Size: 12]
	delegate OnPostLocalEquipWeapon;//[Offset: 0xda4, Size: 12]
	delegate OnWeaponEquipmentUpdateDelegate;//[Offset: 0xdb0, Size: 12]
	delegate OnCharacterHpChange;//[Offset: 0xdbc, Size: 12]
	delegate OnCharacterReceiveHealthChangeHistory;//[Offset: 0xdc8, Size: 12]
	delegate OnCharacterTeamIDChange;//[Offset: 0xdd4, Size: 12]
	delegate OnCharacterSignalHPChange;//[Offset: 0xde0, Size: 12]
	delegate OnPlayerSwitchWeaponDelegate;//[Offset: 0xdec, Size: 12]
	delegate OnCharacterHiddenChange;//[Offset: 0xdf8, Size: 12]
	delegate ShowActicityUIDelegate;//[Offset: 0xe04, Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0xe10, Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0xe14, Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xe18, Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xe1c, Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xe20, Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xe24, Size: 4]
	bool bShowName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe28, Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe28, Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xe2c, Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe30, Size: 1]
	float Money;//[Offset: 0xe34, Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe38, Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe39, Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe39, Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3a, Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3b, Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xe3c, Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe40, Size: 1]
	class PlayerTombBox* OverrideTombBox;//[Offset: 0xe44, Size: 4]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe48, Size: 1]
	bool bOpenCostSpecMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe49, Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4a, Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xe50, Size: 4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xe58, Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0xe5c, Size: 4]
	float ValueLimitForSignalHPPredict;//[Offset: 0xe60, Size: 4]
	float ValueForSignalHPPredict;//[Offset: 0xe64, Size: 4]
	FName HeadSocketName;//[Offset: 0xe68, Size: 8]
	FName LFootSocketName;//[Offset: 0xe70, Size: 8]
	FName RFootSocketName;//[Offset: 0xe78, Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0xe80, Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0xe84, Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0xe88, Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0xe8c, Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0xe90, Size: 4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe94, Size: 1]
	Rotator ServerControlRotation;//[Offset: 0xe98, Size: 12]
	byte PoseState;//[Offset: 0xea4, Size: 1]
	Actor* ThePlane;//[Offset: 0xea8, Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0xeac, Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0xeb0, Size: 12]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebc, Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebd, Size: 1]
	bool bIsOpenShovelAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 1]
	float RadialDamageScale;//[Offset: 0xed4, Size: 4]
	byte LastPoseState;//[Offset: 0xed8, Size: 1]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed9, Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeda, Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0xedc, Size: 4]
	float RequestPaintDecalCD;//[Offset: 0xee0, Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0xee4, Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0xee8, Size: 12]
	Actor*[] PlayerSlotData;//[Offset: 0xef4, Size: 12]
	Actor*[] InventoryData;//[Offset: 0xf00, Size: 12]
	AkComponent* SoundComp;//[Offset: 0xf5c, Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0xf60, Size: 4]
	MoveableBaseSmoothComp* MoveableBaseSmooth;//[Offset: 0xf64, Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf68, Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0xf6c, Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0xf70, Size: 4]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0xf74, Size: 60]
	bool bUpdateContainerLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb0, Size: 1]
	SceneComponent* MeshContainer;//[Offset: 0xfb4, Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb8, Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb9, Size: 1]
	Actor* WaterObj;//[Offset: 0xfbc, Size: 4]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc0, Size: 1]
	bool bForbidAiPronePull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc1, Size: 1]
	bool Temp_ChangeSwitchLogic_VehSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc2, Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0xfc4, Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0xfc8, Size: 4]
	class WeaponAutoAimingComponent* AutoAimCompTemplate;//[Offset: 0xfcc, Size: 4]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0xfd0, Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0xfd4, Size: 4]
	STNewCharacterFollowComp* NewAutoFollowFollowComp;//[Offset: 0xfd8, Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfdc, Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0xfe0, Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe4, Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0xfe8, Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfec, Size: 1]
	STExtraBaseCharacter* MyCandidateGiftGiver;//[Offset: 0xff0, Size: 4]
	GiftTypeData GiftType;//[Offset: 0xff4, Size: 8]
	BonfireActor* CurBonfire;//[Offset: 0xffc, Size: 4]
	BonfireActor* BuiltBonfire;//[Offset: 0x1000, Size: 4]
	delegate OnEnterLadingHeavy;//[Offset: 0x101c, Size: 12]
	Vector ScopeNewIdleLoc;//[Offset: 0x1028, Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0x1034, Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0x1040, Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0x1044, Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0x1050, Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0x1054, Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0x1058, Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0x1060, Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0x106c, Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0x1070, Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0x1074, Size: 4]
	float ScopeLagScale;//[Offset: 0x107c, Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0x1080, Size: 4]
	float ScopeFov;//[Offset: 0x1084, Size: 4]
	float FPPDefaultFov;//[Offset: 0x1088, Size: 4]
	float TPPDefaultFov;//[Offset: 0x108c, Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0x1090, Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0x1094, Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0x1098, Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0x109c, Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0x10a8, Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b4, Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0x10b8, Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0x10bc, Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0x10c0, Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0x10c4, Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0x10c8, Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0x10cc, Size: 4]
	MinimalViewInfo CameraInfoAdditive;//[Offset: 0x10d0, Size: 1408]
	float CameraInfoAdditiveWeight;//[Offset: 0x1650, Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1654, Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0x1658, Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0x1668, Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0x1674, Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0x1680, Size: 12]
	delegate OnMovementBaseChanged;//[Offset: 0x168c, Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1698, Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1699, Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0x169c, Size: 4]
	Vector ProneBoxRelativeLocation;//[Offset: 0x16a0, Size: 12]
	CapsuleComponent* SecondCapsuleCollision;//[Offset: 0x16ac, Size: 4]
	bool bCreateSecondCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b0, Size: 1]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0x16b4, Size: 12]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0x16c0, Size: 12]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0x16cc, Size: 4]
	ObserverSmoothComponent* ObserverSmooth;//[Offset: 0x16d0, Size: 4]
	float PickUpRadius;//[Offset: 0x16d4, Size: 4]
	SimViewData SimulateViewData;//[Offset: 0x16d8, Size: 12]
	FString MedalClubID;//[Offset: 0x16e4, Size: 12]
	int MedalClubLevel;//[Offset: 0x16f0, Size: 4]
	AnchorPlatData AnchorPlat;//[Offset: 0x16f4, Size: 8]
	int PassCardBuyType;//[Offset: 0x16fc, Size: 4]
	int PassCardBuyLevel;//[Offset: 0x1700, Size: 4]
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1704, Size: 1]
	bool bIsSkipCheckMeshRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1710, Size: 1]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0x1720, Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0x1748, Size: 8]
	DamageReductionComponent* DamageReductionComponent;//[Offset: 0x1754, Size: 4]
	FName ClientGetShotBuffName;//[Offset: 0x1768, Size: 8]
	float SmoothRotateMeshYawSpeed;//[Offset: 0x1770, Size: 4]
	FName[] DynamicMovementBaseTags;//[Offset: 0x177c, Size: 12]
	delegate OnScopeInComplete;//[Offset: 0x1788, Size: 12]
	delegate OnScopeOutComplete;//[Offset: 0x1794, Size: 12]
	bool bCheckSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a0, Size: 1]
	float FootSoundIgnoreDist;//[Offset: 0x17a4, Size: 4]
	float FootSoundTraceDist;//[Offset: 0x17a8, Size: 4]
	<byte,FootprintActorArrayInfo> FootprintMap;//[Offset: 0x17ac, Size: 60]
	float MaxDispalyFootprintDistance;//[Offset: 0x17e8, Size: 4]
	Rotator DefaultMeshRot;//[Offset: 0x17ec, Size: 12]
	class AnimInstance* MainCharAnimClass;//[Offset: 0x17f8, Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0x17fc, Size: 4]
	class AnimInstance* MainCharTPPAnimClass;//[Offset: 0x1800, Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1808, Size: 1]
	bool bSkillLockTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1809, Size: 1]
	int CurrentEmoteIndex;//[Offset: 0x180c, Size: 4]
	<int,BackpackEmoteHandle*> EmoteBPIDToAnimHandleMap;//[Offset: 0x1810, Size: 60]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x1864, Size: 12]
	delegate OnPlayerTryToPlayEmote;//[Offset: 0x1870, Size: 12]
	delegate OnPlayerEmoteBePlayedSuccessfully;//[Offset: 0x187c, Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0x1888, Size: 40]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0x18b0, Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0x18b4, Size: 4]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18b8, Size: 1]
	Vector MoveInputState;//[Offset: 0x18bc, Size: 12]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c8, Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0x18cc, Size: 4]
	bool bPressedShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18d1, Size: 1]
	float ShovelingKeyHoldTime;//[Offset: 0x18d4, Size: 4]
	bool bHasEnteredShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18d8, Size: 1]
	Vector CurInputVector;//[Offset: 0x18dc, Size: 12]
	bool bEnableSpringArmOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18ec, Size: 1]
	StaticMeshComponent* ScopComp;//[Offset: 0x18f0, Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0x18f4, Size: 4]
	float voiceCheckCD;//[Offset: 0x18f8, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x18fc, Size: 4]
	float VoiceCheckDis;//[Offset: 0x1900, Size: 4]
	int voiceBeginCheckDisWhenUAV;//[Offset: 0x1904, Size: 4]
	<byte> DanyinCompletedIDSet;//[Offset: 0x1920, Size: 60]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x195c, Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0x196c, Size: 4]
	byte MovementModeBeforeNearDeath;//[Offset: 0x1970, Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0x1974, Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0x1978, Size: 4]
	DamageCauserRecordData WhoKillMeRecordData;//[Offset: 0x197c, Size: 24]
	int HandFolderRatio;//[Offset: 0x1994, Size: 4]
	bool bIsIgnoreRecoverty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1998, Size: 1]
	FString IgnoreRecovertyPropertyName;//[Offset: 0x199c, Size: 12]
	float SwimUpRate;//[Offset: 0x19a8, Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0x19ac, Size: 4]
	OceanManager* OceanManager;//[Offset: 0x19b0, Size: 4]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x19b4, Size: 12]
	float SwitchPoseCD;//[Offset: 0x1a04, Size: 4]
	PrimitiveComponent* AbsolutelyMovingFollowTargetComp;//[Offset: 0x1a0c, Size: 4]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a20, Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0x1a3c, Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0x1a44, Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x1a60, Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x1a90, Size: 48]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x1ad8, Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1adc, Size: 4]
	float DelayHideDuration;//[Offset: 0x1ae0, Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1ae4, Size: 4]
	float DelaySpawnDeadTombBox;//[Offset: 0x1ae8, Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aec, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x1af0, Size: 4]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x1b04, Size: 24]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x1b1c, Size: 132]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x1ba0, Size: 44]
	bool CheckNeedUpdate_LastIsOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bcc, Size: 1]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x1bd0, Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x1bf0, Size: 32]
	delegate ThrowGrenadeModeChangedDelegate;//[Offset: 0x1c10, Size: 12]
	enum ThrowGrenadeMode;//[Offset: 0x1c1c, Size: 1]
	enum PrevThrowGrenadeMode;//[Offset: 0x1c1d, Size: 1]
	byte PeekMark;//[Offset: 0x1c1e, Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2c, Size: 1]
	float PeekCheckAdditionalLen;//[Offset: 0x1c30, Size: 4]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c34, Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x1c38, Size: 4]
	float PeekCheckCollisionTimerFPP;//[Offset: 0x1c3c, Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c44, Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1c48, Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x1c4c, Size: 4]
	delegate OnCharacterPeek;//[Offset: 0x1c58, Size: 12]
	AttrRegisterItem[] RegAttrCache;//[Offset: 0x1cb4, Size: 12]
	float HighWalkSpeed;//[Offset: 0x1cc4, Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x1cc8, Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x1ccc, Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x1cd0, Size: 4]
	float MaxProneSpeed;//[Offset: 0x1cd4, Size: 4]
	float MaxSprintSpeed;//[Offset: 0x1cd8, Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x1cdc, Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1ce0, Size: 4]
	float HealthPredict;//[Offset: 0x1ce4, Size: 4]
	float BreathAmount;//[Offset: 0x1ce8, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1cec, Size: 4]
	byte HealthStatus;//[Offset: 0x1cf0, Size: 1]
	<FString,DamageScale> DamageScale;//[Offset: 0x1cf4, Size: 60]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x1d30, Size: 60]
	ExtraDamageReduceCfg[] ExtraDamageReduceList;//[Offset: 0x1d6c, Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d78, Size: 1]
	float EnergySpeedScale;//[Offset: 0x1d7c, Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x1d80, Size: 4]
	float SkillBackpackCapacity;//[Offset: 0x1d84, Size: 4]
	float ArmorDurableReducePercent;//[Offset: 0x1d88, Size: 4]
	CharacterEnergyData Energy;//[Offset: 0x1d90, Size: 40]
	CharacterEnergyPhase[] TemperaturePhaseList;//[Offset: 0x1db8, Size: 12]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc4, Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1dc8, Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x1dcc, Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x1dd0, Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x1dd4, Size: 4]
	float ReplicatedAndOverridedSwimSpeed;//[Offset: 0x1dd8, Size: 4]
	int bIsInTheInvincible;//[Offset: 0x1de8, Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x1dec, Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1df0, Size: 4]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x1df4, Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x1df8, Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1dfc, Size: 4]
	class STCharacterBonfireLinkComp* BonfireLinkComponentTemplate;//[Offset: 0x1e00, Size: 40]
	float StandHalfHeight;//[Offset: 0x1e28, Size: 4]
	float CrouchHalfHeight;//[Offset: 0x1e2c, Size: 4]
	float ProneHalfHeight;//[Offset: 0x1e30, Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1e34, Size: 4]
	float FPPCollisionRadius;//[Offset: 0x1e38, Size: 4]
	float StandRadius;//[Offset: 0x1e3c, Size: 4]
	float DyingRadius;//[Offset: 0x1e40, Size: 4]
	float CollisionRadiusOverride;//[Offset: 0x1e44, Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x1e48, Size: 12]
	HealthPredictShowData[] SignalHPPredictShowDataList;//[Offset: 0x1e54, Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x1e60, Size: 4]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e70, Size: 1]
	int VehicleSeatIdx;//[Offset: 0x1e74, Size: 4]
	bool bForceSetRepMovLocationOnAttachmentRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e7e, Size: 1]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x1e80, Size: 4]
	CharacterAvatarComponent* AvatarComponent;//[Offset: 0x1e9c, Size: 4]
	delegate OnAttachedToVehicle;//[Offset: 0x1ea4, Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x1eb0, Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x1ebc, Size: 12]
	AutoAimingConfig HandFightAutoAimingConfig;//[Offset: 0x1ec8, Size: 148]
	bool bUseHandFightAutoAimingConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5c, Size: 1]
	delegate OnPlayerStateUpdated;//[Offset: 0x1f60, Size: 12]
	delegate SwitchAngledSightEventDelegate;//[Offset: 0x1f6c, Size: 12]
	Rotator AngledSightRotOffset;//[Offset: 0x1f78, Size: 12]
	bool bHasInitOnClientWithGameState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200c, Size: 1]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x2010, Size: 4]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2015, Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x2018, Size: 4]
	int DamageMagnifierIdx;//[Offset: 0x201c, Size: 4]
	STParachuteState STReplicateParchuteState;//[Offset: 0x2024, Size: 24]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x203c, Size: 4]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x2040, Size: 36]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2064, Size: 1]
	float MoveForwardInputValue;//[Offset: 0x2068, Size: 4]
	float MoveRightInputValue;//[Offset: 0x206c, Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2070, Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x2074, Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2078, Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x207c, Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x2080, Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x2088, Size: 4]
	STExtraBaseCharacter*[] FlyingTeam;//[Offset: 0x208c, Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x2098, Size: 4]
	enum FollowState;//[Offset: 0x209c, Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x20a0, Size: 12]
	FString LatestInviter;//[Offset: 0x20ac, Size: 12]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20b8, Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x20c0, Size: 4]
	float maxShowAlpha;//[Offset: 0x20c8, Size: 4]
	float MoveMaxShowDis;//[Offset: 0x20cc, Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x20d0, Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x20d4, Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x2108, Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x210c, Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x2110, Size: 4]
	float FPPSwitchPoseWeaponSmoothTime;//[Offset: 0x2114, Size: 4]
	bool bDynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2194, Size: 1]
	int IsEnableReportRoute;//[Offset: 0x2220, Size: 4]
	int IsEnableLogAIPlayerPos;//[Offset: 0x2238, Size: 4]
	float PaintDecalMaxDistance;//[Offset: 0x223c, Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2240, Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2241, Size: 1]
	bool bSkillFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2242, Size: 1]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2290, Size: 1]
	bool bNightVisionUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2291, Size: 1]
	float MaxRelavantDistance;//[Offset: 0x2298, Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x22a0, Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x22a4, Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x22a8, Size: 4]
	bool bEnableMainMeshAnimNodeInitOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22ac, Size: 1]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x22b0, Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x22b4, Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x22b8, Size: 4]
	BaseFPPComponent* FPPComp;//[Offset: 0x22bc, Size: 4]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x22c0, Size: 4]
	float EquipingScopeDelay;//[Offset: 0x22c8, Size: 4]
	delegate OnEquipZoomScope;//[Offset: 0x22d0, Size: 12]
	float DistSquaredInterruptRevival;//[Offset: 0x22e4, Size: 4]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x22e8, Size: 28]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x2304, Size: 16]
	float CharacterFallingVelocityZFactor;//[Offset: 0x2314, Size: 4]
	int ShowingHeadWidgetParam;//[Offset: 0x2320, Size: 4]
	WeaponOwnerComponent* WeaponOwnerComponent;//[Offset: 0x2324, Size: 4]
	bool bHasFinishedRegisterPlayerPickUpList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2328, Size: 1]
	enum[] BuildUIHideState;//[Offset: 0x232c, Size: 12]
	LastEmoteInfo LastEmoteInfo;//[Offset: 0x2338, Size: 12]
	bool bDieInHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2344, Size: 1]
	int CurrentTaskTriggerAreaID;//[Offset: 0x2348, Size: 4]
	float SignalHPBeforeEnterBreath;//[Offset: 0x234c, Size: 4]
	float ProduceSoundInterval;//[Offset: 0x2350, Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0x2354, Size: 4]
	float HearRadius;//[Offset: 0x2358, Size: 4]
	float FirstGuide_SafeZoneCountDownTime;//[Offset: 0x2380, Size: 4]
	bool isUsingEnergyPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2384, Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2386, Size: 1]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238c, Size: 1]
	float SignalHPRemainingTime;//[Offset: 0x2390, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x23a4, Size: 4]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a8, Size: 1]
	bool bTemperoryDisableFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23a9, Size: 1]
	float FixMovementOnVehicleInterval;//[Offset: 0x23ac, Size: 4]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x23b4, Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x23c0, Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x23f0, Size: 1]
	InjuryParticleAttachOffset[] ParticleAttachOffsetArray;//[Offset: 0x23f4, Size: 12]
	float ParticleShowingInterval;//[Offset: 0x2400, Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2408, Size: 1]
	bool bIsShowingToxicEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2409, Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x2410, Size: 40]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x2438, Size: 4]
	float RescueReduceTime;//[Offset: 0x243c, Size: 4]
	bool bLogAIFloatInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2440, Size: 1]
	KOFActivityData KOFActivityData;//[Offset: 0x2448, Size: 232]
	float JoystickSensitivity;//[Offset: 0x2530, Size: 4]
	float SwitchWeaponCD;//[Offset: 0x2534, Size: 4]
	float CurSwitchWeaponCD;//[Offset: 0x2538, Size: 4]
	bool bIsInFortress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2546, Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2547, Size: 1]
	AnimInstance* MainAnimInstance;//[Offset: 0x2548, Size: 8]
	STExtraAnimInstanceBase* TPPAnimInstance;//[Offset: 0x2550, Size: 8]
	STExtraAnimInstanceBase* FPPAnimInstance;//[Offset: 0x2558, Size: 8]
	float VehicleDetailedTraceDist;//[Offset: 0x2564, Size: 4]
	float SpringArmTraceDist;//[Offset: 0x2568, Size: 4]
	<byte,CharacterBodyOffset> BodyRelativeOffsetConfig;//[Offset: 0x256c, Size: 60]
	delegate OnDSSkillStartDelegate;//[Offset: 0x25c0, Size: 12]
	CurveFloat* VehicleSpeedDeviationFactorCurve;//[Offset: 0x25cc, Size: 4]
	float MaxDistFromMainChar;//[Offset: 0x25d0, Size: 4]
	int BaseNonRenderedUpdateRate;//[Offset: 0x25d4, Size: 4]
	int BaseNonRenderedUpdateRateHigh;//[Offset: 0x25d8, Size: 4]
	bool bUseCustomAnimUpdateRateParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25dc, Size: 1]
	float[] CustomAnimUpdateRateParams;//[Offset: 0x25e0, Size: 12]
	float ShootWeaponADSTime;//[Offset: 0x25ec, Size: 4]
	float ShootWeaponFireAnimAlphaRate;//[Offset: 0x25f0, Size: 4]
	float ShootWeaponFireAnimADSAlphaRate;//[Offset: 0x25f4, Size: 4]
	bool DonotPlayFootstepSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f8, Size: 1]
	PersistClientStateComponent* PersistClientStateComponent;//[Offset: 0x25fc, Size: 4]
	<PlayMontageData> MontageQueue;//[Offset: 0x2600, Size: 60]
	bool IsHelmetFightingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263c, Size: 1]
	bool bSkipLandSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x263d, Size: 1]
	bool bCanBeControlledByPeacefullZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x263e, Size: 1]
	Actor* AssociatedHelicoptor;//[Offset: 0x2640, Size: 4]
	Actor* TempViewerForReplay;//[Offset: 0x2644, Size: 4]
	float CurrentNetCullDistanceSquared;//[Offset: 0x2648, Size: 4]
	bool IsBunkerEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264c, Size: 1]
	float[] HealthChangeHistoryPerFrame;//[Offset: 0x2650, Size: 12]
	float LastSyncHealthChange;//[Offset: 0x265c, Size: 4]
	SkeletalMesh* DefaultCharacterMesh;//[Offset: 0x2664, Size: 4]
	bool CheckNetRelevantInScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2668, Size: 1]
	bool ReplicationPausedInScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2669, Size: 1]
	bool bIgnoreBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266a, Size: 1]
	int CheckCircleIndex;//[Offset: 0x266c, Size: 4]
	delegate OnMainCharAnimInstanceInit;//[Offset: 0x2674, Size: 12]
	bool bSkipDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2680, Size: 1]
	delegate OnBecomeOBViewTarget;//[Offset: 0x2684, Size: 12]
	delegate OnLeaveOBViewTarget;//[Offset: 0x2690, Size: 12]
	CameraModifyData[] DefaultModifys;//[Offset: 0x269c, Size: 12]
	delegate OnAnimInstanceChangeEvent;//[Offset: 0x26a8, Size: 12]
	SkeletalMeshComponent* LastSkeletalMesh;//[Offset: 0x26b4, Size: 8]
	AnimInstance* LastAnimInstance;//[Offset: 0x26bc, Size: 8]
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, STExtraBaseCharacter* vaultCharacter, Vector StartPos);// 0x262cd58
	void VaultFailPawnCPP(const FString Content);// 0x262ccc0
	void VaultFailPawnBluePrint(out const FString Content);// 0x262cc18
	void UseVehWeaponView(STExtraShootWeapon* OldVehWeapon, STExtraShootWeapon* NewVehWeapon);// 0x262cb5c
	bool UseSimulateView();// 0x262cb34
	void UserCancelRescue();// 0x262cb20
	bool UpdateShovelingState();// 0x262caf8
	void UpdateShovelingHoldStateRelease();// 0x262cae4
	void UpdateShovelingHoldStatePressed();// 0x262cad0
	void UpdatePoseCollisionCpp(byte CurState, byte preState);// 0x262ca14
	void UpdateDynamicHoldGunOption();// 0x262ca00
	void UpdateCurrentShootWeaponTick();// 0x262c9ec
	void UpdateAttrRegisteredData();// 0x262c9d8
	void UnRegisterPlayerPickUpList();// 0x262c9bc
	void UnequipWeaponFinish();// 0x235d4b8
	void UnequipWeapon(byte Slot, bool bSwitchWeapon);// 0x262c8f8
	void UGCClientTakeDamage(int DamageType, float Damage, Pawn* InstiagatorPawn, float CurHealth, bool bFatalDamage, bool bHeadShot, Vector HitLocation, Vector HitFromDirection);// 0x46f6b154
	void TryToBroadcastFatalDamageEvent(Controller* causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x262c738
	void TryPeek(bool IsLeft, bool ButtonDown, bool IsManual);// 0x262c618
	void TryFollowInitialParachuteLeader(FString Name);// 0x262c534
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x262c4ac
	void TimerDelayShowDeadTombBox(PlayerTombBox* DeadTombBox);// 0x262c434
	void ThrowGrenadeModeChangedDelegate__DelegateSignature(enum NewMode, enum PrevMode);// 0x46f6b154
	void TakeoutWeapons();// 0x262c420
	bool TakeOtherDamage(STExtraBaseCharacter* attacher, float InDamageVal, Vector DamageDir);// 0x262c304
	void SyncServerTagsChange(out const FName[] newTags, out const FName[] oldTags);// 0x262c1f4
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x262c174
	void SwitchWeaponModuleSystemModificationScheme(int ThemeID);// 0x262c0c0
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x262bf50
	void SwitchPoseStateServer(STExtraBaseCharacter* TargetCharacter, byte InPoseState, float TimeStamp);// 0x262be0c
	void SwitchPoseStateFailedResponse(STExtraBaseCharacter* TargetCharacter, byte FailedPoseState, byte CurPoseState);// 0x262bd04
	void SwitchPoseStateClient(STExtraBaseCharacter* TargetCharacter, byte InPoseState);// 0x262bc40
	bool SwitchPoseState(byte State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);// 0x262ba80
	void SwitchBackToPreviousDiffSlotWeaponOnServer();// 0x262ba6c
	void STServerUpdateState_New(Float_NetQuantize8 InThrottleInput, Float_NetQuantize8 InSteeringInput, int8 State, const Rotator ControlRotation);// 0x262b8e4
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8 State, const Rotator ControlRotation);// 0x262b75c
	float StopSlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float BlendTime);// 0x262b64c
	void StopShoveling();// 0x262b638
	bool StopPlayEmoteAnim(int EmoteIndex);// 0x262b5b8
	void StopMove();// 0x262b5a4
	bool StopFireFilter();// 0x262b574
	void StopCharacterAfterDead();// 0x262b558
	bool StartPlayEmoteAnim(int EmoteIndex, bool isCanCostSpecMotion);// 0x262b48c
	bool StartFireFilter();// 0x262b45c
	void SpawnFootprint(enum FootprintType);// 0x262b3e4
	void SpawnAndSwithToGrenadeServerCall(int GrenadeID);// 0x262b330
	STExtraWeapon* SpawnAndSwitchToGrenadeOnServer(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x262b26c
	STExtraWeapon* SpawnAndSwitchToGrenadeOnClient(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x262b1a8
	void ShowNightVisionFrame();// 0x262b18c
	void ShowInjuryScreenEffect();// 0x262b178
	void ShowDebugRole();// 0x262b164
	void ShowDebugRecordData();// 0x262b150
	void ShowDebugPickUpFlow();// 0x262b13c
	void ShowDebugEquipOrUnequipFlow();// 0x262b128
	void Shoveling();// 0x262b114
	bool ShouldUpdateHPOnUI();// 0x262b0e4
	bool ShouldShowPassCardBuyType();// 0x262b0bc
	bool ShouldShowMedal();// 0x262b094
	bool ShouldShowHeadWidget();// 0x262b06c
	bool ShouldShowEnjoyCard();// 0x262b044
	bool ShouldShowCorp();// 0x262b01c
	bool ShouldShowAnchor();// 0x262aff4
	bool ShouldClearWeaponDelegatesOnRecycleInner();// 0x262afc4
	bool ShouldClearWeaponDelegatesOnRecycle();// 0x262af94
	bool ShouldAutoScopeWhenPeek();// 0x262af64
	void SetWeaponShootType(byte shootType, STExtraShootWeapon* TargetWeapon);// 0x262aea0
	void SetViewTargetAgainForOB();// 0x262ae8c
	void SetUpUIStyleServer(bool bSetUp, UserWidgetStyle* UserWidgetStyle);// 0x262adc4
	void SetUpUIMaskServer(bool bSetUp, FString Param);// 0x262ac90
	void SetUpSubViewTargetServer(bool bSetUp, Actor* TargetActor, float BlendTime);// 0x262ab84
	void SetUpSubAnimInstanceServer(bool bSetUp, class AnimInstance SubInstanceClass, FName SlotName, Actor* OwningActor);// 0x262aa30
	void SetUpLevelSequenceServer(bool bSetUp, Actor* OwningActor);// 0x262a968
	void SetUpActivityActionServer(bool bDo, out FName[] ActionName, Actor* OwningActor);// 0x262a830
	void SetTPPDefaultFov(float InFov);// 0x262a7b0
	void SetThrowGrenadeMode(enum ThrowMode);// 0x262a738
	void SetSwimSpeedModifier(float NewModifier);// 0x262a6c0
	void SetSimClientLocationOrRotation(Vector Location, Rotator Rotation, bool setLoc, bool setRot);// 0x262a550
	void SetPoseStateAttrModifierEnable(byte InPoseState, bool Enable);// 0x262a48c
	void SetPlayerVehAnimationNeedUpdate();// 0x262a478
	void SetParachuteServerAuthorized();// 0x262a464
	void SetMyGiftGiverCandidate(STExtraBaseCharacter* candidate, byte tempGiftType, int SubGiftType);// 0x262a35c
	void SetMoveSpeedModifier(float NewModifier);// 0x262a2e4
	void SetJumpZVelocity(float JumpZVelocity);// 0x262a26c
	void SetJumpHeightModifier(float NewModifier);// 0x262a1f4
	void SetIsDuringTransferLeader(bool isTransfer);// 0x262a174
	void SetIsAutoFollow(bool Val, STExtraBaseCharacter* IFollowWho);// 0x262a0ac
	void SetIgnoreBlueCircle(bool bIgnore);// 0x262a02c
	void SetHighWalkSpeed(float WalkSpeed);// 0x2629fb4
	void SetHealthMax(float NewHealthMax);// 0x2629f3c
	void SetHealth(float NewHealth, byte Reason);// 0x2629e80
	void SetHandFoldRatio(int Ratio);// 0x2629e08
	void SetFPPDefaultFov(float InFov);// 0x2629d88
	void SetExitingParachute(bool ExitParachute);// 0x2629d08
	void SetDelayStateSwitchTime(float DelayTime);// 0x2629c90
	void SetCurScopeFov(float InFov);// 0x2629c18
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x2629b40
	void SetCurBonfire(BonfireActor* newBonfire);// 0x2629ac8
	void SetComponentsActive(class Object ComponentClass, bool IsActive);// 0x26299fc
	void SetClientLocationOrRotationAndAttach(Vector Location, Rotator Rotation, SceneComponent* AttachScene, FName SocketName);// 0x2629890
	void SetClientLocationOrRotation(Vector Location, Rotator Rotation, bool setLoc, bool setRot);// 0x2629720
	void SetCheatSpeedModifier(float NewModifier);// 0x26296a0
	void SetCharacterMaxEnergy(const float InEnergyMax);// 0x2629628
	void SetCharacterEnergy(const float InEnergy);// 0x26295b0
	void SetCharacterAttrModifierEnable(FString ModifierName, bool IsEnable);// 0x26294d4
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x2629410
	void SetAnimParamIsRescueing(bool Val);// 0x2629390
	void SetAnimParamIsNearDeathStatus(bool Val);// 0x2629310
	void SetAnimParamCallingForRevival(bool bIsCalling);// 0x2629290
	void SetAnimMontagePlayRate(AnimMontage* AnimMontage, float InPlayRate);// 0x26291d4
	void SetAmbientRTPC(FString RTPC, float Value);// 0x26290ac
	void SetAllWeaponBulletNumToMaxOnServer(bool bCheckHasExtendDJ, bool bCheckAndConsumeBullet);// 0x2628fdc
	void ServerUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation, float TimeStamp);// 0x2628e64
	void ServerUpdateShovelingHoldState(bool ishold);// 0x2628d9c
	void ServerTriggerJump();// 0x2628d40
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);// 0x2628c1c
	void ServerSetPeekCollision(bool HasCollision);// 0x2628b54
	void ServerSetMovementState(Vector Input);// 0x2628a98
	void ServerSendToLobbyServerUseItem(int ItemID, int Count, bool bUseDirectly);// 0x2628990
	void ServerSendToLobbyServerUseGiftItem(int ItemID, int Count, STExtraBaseCharacter* receiver, bool bUseDirectly);// 0x2628840
	void ServerResponseInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x2628688
	void ServerRequestPaintDecal(int DecalId, const PlayerDecalData DecalData);// 0x2628500
	void ServerNightVisionUse(bool bUse);// 0x2628438
	void ServerInviteTeammate(FString Name, enum InvitationType);// 0x2628328
	void ServerForceStopVaultCPP();// 0x26282cc
	void ServerForceStopVaultBluePrint();// 0x26282b0
	void ServerFollowTeammate(FString Name);// 0x26281e8
	void ServerChangeThrowGrenadeMode(enum ThrowMode);// 0x2628134
	void ServerCancelFollow();// 0x26280d8
	void SendServerMoveToClientUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x2627f80
	void SendServerMoveToClientReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x2627e28
	void SendClientMoveToServerUnreliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x2627c90
	void SendClientMoveToServerReliaby(float TimeStamp, const Vector Position, const Rotator Rotation, const Vector Velocity);// 0x2627af8
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxes();// 0x2627aa8
	SearchedPickUpItemResult[] SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);// 0x26278bc
	void Scoping(byte NewType);// 0x2627844
	void ScopeOut(byte NewType);// 0x26277cc
	void ScopeInterrupt(byte NewType, bool ForceInterrupt);// 0x2627708
	bool ScopeIn(byte NewType);// 0x2627688
	void SaveMeshUpdateFlag();// 0x2627668
	void RPC_Server_SwitchWeaponShootInterval(STExtraShootWeapon* Weapon, enum Mode);// 0x262756c
	void RPC_Server_SwitchBackToPreviousDiffSlotWeapon();// 0x2627510
	void RPC_Server_StopReload();// 0x26274b4
	void RPC_Server_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x26273b8
	void RPC_Server_SetHandFoldRatio(int Ratio);// 0x2627304
	void RPC_Server_SetCurScopeFov(float InFov);// 0x2627250
	void RPC_Server_OnDeathPlaybackMsg(FString VictimUID, FString AttackerUID, FString Msg);// 0x26270c8
	void RPC_Server_EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x2627000
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x2626fa4
	void RPC_Server_ChangeWeaponState(enum State, STExtraWeapon* Weapon);// 0x2626ea8
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);// 0x2626df4
	void RPC_CollideByTeamMate(STExtraBaseCharacter* pOtherChar);// 0x2626d40
	void RPC_Client_SpawnAndSwitchToGrenade(FName SpesificLogicGrenadeSlot, int GrenadeID);// 0x2626c44
	void RPC_Client_ReportPlayerKillFlow(STExtraBaseCharacter* killedPlayer);// 0x2626b90
	void RPC_Client_OnNearDeathRecordingNotify(FString VictimName, FString VictimUID, FString SpectatorName, FString AttackerUID, bool bSpectatorIsAI);// 0x2626948
	void RPC_Client_OnDeathStopRecordingNotify(FString VictimName, FString VictimUID, FString SpectatorName, FString AttackerUID, bool bSpectatorIsAI, bool bForce);// 0x26266a4
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x26263fc
	void RPC_Client_EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x2626334
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x26262d8
	void RestoreMeshUpdateFlag();// 0x26262b8
	void ResponceInvite(FString SomeOne, enum res, enum InviteType, bool NotAllowInvitedLater);// 0x2626150
	void ResetValueLimitForHealthPredict();// 0x262613c
	void ResetSignalOnServer(bool bRescued);// 0x26260bc
	void ResetJumpZVelocity();// 0x26260a8
	void ResetDamageReductionData();// 0x2626094
	void ResetCharacterEnergy();// 0x2626080
	void ResetCamera();// 0x262606c
	void RequestUserCancleRescue();// 0x2626010
	bool RequestPaintDecal(int DecalId);// 0x2625f90
	void ReqStartPlayEmote(int EmoteIndex, int TypeSpecificID, bool OpenCostSpec);// 0x2625e38
	void ReqInteruptPlayEmote(int EmoteIndex);// 0x2625d84
	void ReqEmotePlayFinished(int EmoteIndex);// 0x2625cd0
	void ReportAntiCheatInfo();// 0x235d4b8
	void RemoveDynamicExtraDamageReduceCfg(FString AttachmentID);// 0x2625bec
	void RemoveDamageReductionData(int Key);// 0x2625b74
	bool ReloadCurrentWeapon();// 0x2625b44
	void RegisterPlayerPickUpList();// 0x2625b28
	void RefreshPersonPerspective();// 0x2625b14
	void RefreshPawnVaultTypeServer();// 0x2625ab8
	void RefreshPawnVaultTypeAll(bool isFpsEnable);// 0x2625a30
	void RefreshMoveAttrModifier();// 0x2625a1c
	void RefreshHeadWidget(bool IsAdd, int InParam);// 0x262594c
	void RefreshAvatar(int SlotType, bool IsEquipped);// 0x2625888
	void RecordFinalParachuteLeader();// 0x2625874
	void ReceiveInitPlayerOrAI(bool bInIsAI);// 0x46f6b154
	void ReceiveAddRadialImpulse(out const Vector Origin, float Radius, float Strength, class DamageType DamageTypeClass, bool bLinearFalloff, bool bVelChange);// 0x46f6b154
	void ReadDefaultFov();// 0x46f6b154
	void PutDownAllPropAndGenerateInventoryBox(Controller* EventInstigater);// 0x26257fc
	void ProcessDragonBoatDrumSeat(bool enterDrumSeat);// 0x262577c
	void PrintAIPolicyDecisionData();// 0x2625768
	void PreSkillCacheWeaponSolt();// 0x2625754
	void PostGetPlayerAnimation();// 0x46f6b154
	void PossessedBy(Controller* NewController);// 0x26256d4
	void PlaySwitchSightSound();// 0x26256c0
	void PlaySwitchFireModeSound();// 0x26256ac
	void PlaySpecialAmbientSound(AkAudioEvent* TargetSound);// 0x2625634
	float PlaySlotAnim(AnimSequenceBase* AnimSequence, FName SlotName, float InPlayRate, float BlendTime);// 0x26254dc
	void PlaySelfThrowAwayWeaponSound();// 0x26254c8
	void PlayPullBoltSound();// 0x26254b4
	void PlayOperateItemSound(FString BankName, FString SoundName);// 0x2625320
	void PlayMountAccessoriesSound();// 0x262530c
	void PlayMagOUTSound();// 0x26252f8
	void PlayMagINSound();// 0x26252e4
	void PlayLocalShellDropFX();// 0x26252d0
	void PlayLoadBulletSound();// 0x26252bc
	void PlayFootstepSound(byte FootStepState, Vector DSNotifyLocation);// 0x26251ec
	bool PlayerConfirmToRescue();// 0x26251c4
	void PlayEmoteClient(int EmoteId);// 0x2625144
	void PlayCharacterDeadAnim(out const Vector KillingHitImpulseDir, out const DamageEvent DamageEvent, out const HitResult KillingHitInfo);// 0x2624fd4
	void PlayChangeMagazineSound();// 0x2624fc0
	void PlayAmbientSound();// 0x2624fac
	void PickUpWrapperActor(Actor* Target, out const PickUpItemData ItemData, int pickCount);// 0x2624e3c
	void PickUpActor(Actor* Target, int AdditionalParam, int pickCount);// 0x2624d3c
	void PawnVaultStopCPP();// 0x2624d20
	void PawnVaultStopBluePrint();// 0x2624d04
	void PawnVaultServerStopCheckCPP();// 0x2624ca8
	void PawnVaultServerStopCheckBluePrint();// 0x2624c8c
	void PawnVaultServerCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Actor* WindowActor, Rotator movedir);// 0x262480c
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Actor* WindowActor, Rotator movedir);// 0x262443c
	void PawnVaultAllCPP(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir);// 0x26240d4
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir);// 0x2623d50
	FString ParsePlayerNameFromRemoteURL(FString RemoteURL);// 0x2623c0c
	void PackupWeapons();// 0x2623bf8
	float OverrideDamageValueWhenTakeDamage(float Damage, int DamageType, Controller* EventInstigator, Actor* DamageCauser, out const HitResult Hit);// 0x2623a3c
	void OnWeaponEquipmentUpdate();// 0x2623a20
	void OnUnEquipWeapon();// 0x46f6b154
	void OnStopFire();// 0x46f6b154
	void OnStateLeave(enum LeavedState);// 0x26239a0
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x26238dc
	void OnStateEnter(enum EnteredState);// 0x262385c
	void OnStartFire(byte isAuto);// 0x46f6b154
	void OnShowName(bool _IsShow, FString _Name);// 0x46f6b154
	void OnServerCheckWarnSoundUAV(enum soundType);// 0x26237dc
	void OnScopeNotHandFold();// 0x26237c8
	void OnScopeHandFold();// 0x26237b4
	void OnRescueOtherSucceed();// 0x26237a0
	void OnRep_WaterObj();// 0x262378c
	void OnRep_VehicleSeatIdx();// 0x2623778
	void OnRep_UnmannedVehicleSyncData();// 0x262375c
	void OnRep_TPPDefaultFov();// 0x2623748
	void OnRep_ThrowGrenadeMode(enum PrevMode);// 0x26236d0
	void OnRep_ThePlane();// 0x26236bc
	void OnRep_Temperature(float LastValue);// 0x2604a60
	void OnRep_TeamID();// 0x26236a0
	void OnRep_SmoothNetUpdateRotationTime();// 0x262368c
	void OnRep_SignalHPRemainingTime();// 0x2623678
	void OnRep_SignalHP(float PrevVal);// 0x26235f8
	void OnRep_ShowRevivalPointIcon();// 0x26235e4
	void OnRep_ShowNicknameChangeEx();// 0x26235c8
	void OnRep_ScopeFov();// 0x26235b4
	void OnRep_ReplicatedParachuteState();// 0x26235a0
	void OnRep_ReplicatedMoveState();// 0x262358c
	void OnRep_ReplicatedIsStartParachute();// 0x2623578
	void OnRep_ReplicatedAndOverridedSwimSpeed();// 0x2623564
	void OnRep_PoseStateNotify(byte LastState);// 0x26234e4
	void OnRep_PlayerName();// 0x26234c8
	void OnRep_PlayerKey();// 0x26234ac
	void OnRep_PeekHasCollision();// 0x2623498
	void OnRep_PassCardBuyType();// 0x2623484
	void OnRep_MoneyNotify();// 0x2623470
	void OnRep_MedalPicUrl();// 0x262345c
	void OnRep_IsRescueingOtherStatusChange();// 0x2623448
	void OnRep_IsInFortress();// 0x2623434
	void OnRep_IsFPPChanged();// 0x2623420
	void OnRep_IsBeingRescuedStatusChange();// 0x262340c
	void OnRep_HealthStatusChanged(byte PrevStatus);// 0x262338c
	void OnRep_HealthPredict();// 0x2623378
	void OnRep_Health(float PrevHealth);// 0x26232f8
	void OnRep_HandFolderRatio();// 0x26232e4
	void OnRep_GiftGiverCandidateTypeChanged();// 0x26232d0
	void OnRep_GiftGiverCandidateChanged();// 0x26232bc
	void OnRep_FPPDefaultFov();// 0x26232a8
	void OnRep_FollowState();// 0x2623294
	void OnRep_EnergyChange();// 0x2623280
	void OnRep_DamageMagnifierIdx();// 0x262326c
	void OnRep_CurSignalHPIsFullOrRecovering();// 0x2623250
	void OnRep_CurrentVehicle(STExtraVehicleBase* LastVehicle);// 0x26231d8
	void OnRep_CurrentStates(uint64 prevStates);// 0x2623154
	void OnRep_CurrentNetCullDistanceSquared();// 0x2623140
	void OnRep_CurRemoteControlPawn();// 0x2623124
	void OnRep_CurBonFire();// 0x2623110
	void OnRep_CollisionRadiusOverride();// 0x26230fc
	void OnRep_CharacterFallingVelocityZFactor();// 0x26230e8
	void OnRep_BreathAmmountChange();// 0x26230d4
	void OnRep_bNightVisionUseTest();// 0x26230c0
	void OnRep_bNightVisionUse();// 0x26230ac
	void OnRep_bIsCallingForRevival();// 0x2623098
	void OnRep_bIsAI();// 0x262307c
	void OnRep_bIgnoreBlueCircle();// 0x2623068
	void OnRep_AngleSightRotOffsetChanged();// 0x2623054
	void OnRep_AnchorPlat();// 0x2623040
	void OnRep_AKEventNotify();// 0x262302c
	void OnReconnectOnClient();// 0x2623018
	void OnPostFlushHealthChangeHistoryOnServer();// 0x2622ffc
	void OnPoseStateChange(byte LastState, byte CurState);// 0x46f6b154
	void OnPlayerFinished();// 0x235d4b8
	void OnPlayEmote(int EmoteId, int TypeSpecificID);// 0x2622f40
	void OnOpenDoor(PUBGDoor* door, int doorState);// 0x2622e7c
	void OnNotifyHurt();// 0x46f6b154
	void OnLoadActivityParticleCompleted(SoftObjectPath SoftObjectPath, bool NeedOffset);// 0x2622d34
	void OnLoadActivityAudioCompleted();// 0x2622d20
	void OnLoadActivityAnimationCompleted(SoftObjectPath SoftObjectPath);// 0x2622c28
	void OnInterruptCurrentEmote();// 0x2622c14
	void OnGameModeStateChanged(FName State);// 0x2622b9c
	void OnGameEnterFightServer();// 0x2622b40
	void OnGameEnterFightMulticast();// 0x2622ae4
	void OnFollowStateChange();// 0x2622ac8
	void OnFlushHealthChangeHistoryOnClient(out const float[] ChangeHistory);// 0x2622a20
	void OnEquipWeapon(byte Slot);// 0x46f6b154
	void OnEndCurrentEmote(int EmoteIndex, int StopReason);// 0x2622964
	void OnDetectPaintDecalTarget(bool bStart);// 0x46f6b154
	void OnCurEquipedShootWeaponChangeState(enum LastState, enum State);// 0x26228a0
	void OnCharacterAvatarLoadFinish(int AsyncLoadID, AvatarComponent* LoadEventFrom);// 0x26227e4
	void OnChangeCurrentUsingWeapon(byte TargetChangeSlot);// 0x2622764
	void OnCameraModeChange(byte NewMode);// 0x26226ec
	void OnBubbleAssetLoaded(ParticleSystem* LoadedFX);// 0x26225e0
	void OnBPMoneyChange();// 0x46f6b154
	void OnBPHealthChange();// 0x46f6b154
	void OnBeforeGetUp();// 0x46f6b154
	void OnAsyncLoadEmoteAnim(AnimationAsset* CurrentEmoteAnim);// 0x26224d4
	void NM_SetPeekState(bool Enable, bool IsLeft);// 0x26223fc
	void MulticastStartPlayEmote(int EmoteIndex, bool isCanCostSpecMotion);// 0x26222ec
	void MulticastInteruptPlayEmoteOnServer(int EmoteIndex);// 0x2622238
	void MulticastInteruptPlayEmote(int EmoteIndex);// 0x2622184
	bool Montage_IsPlaying(AnimMontage* AnimMontage);// 0x2622104
	void MeleeServer();// 0x26220a8
	void MeleeReleased();// 0x2622094
	void MeleeLocal();// 0x46f6b154
	void MeleeBroadcastOtherClients();// 0x2622038
	void Melee(bool IsForCE);// 0x2621fb8
	void LogWeaponsDataInWeaponManagerAndBackpack();// 0x2621fa4
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x2621e7c
	bool LocalStartPlayEmote(int EmoteIndex, int TypeSpecificID, bool bOpenCost);// 0x2621d6c
	bool LocalInteruptPlayEmote(int EmoteIndex);// 0x2621cec
	bool LeaveState(enum State);// 0x2621c64
	void LeaveServerState(enum State);// 0x2621bb0
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2621a84
	bool IsValidPaintDecalTarget_Simple();// 0x2621a64
	bool IsValidPaintDecalTarget(out enum OutvalidationType, out Vector OutStart, out Vector OutEnd);// 0x2621914
	bool IsValidFootEffectTarget(out Vector OutEnd);// 0x262187c
	bool IsUsingGrenade();// 0x2621854
	int IsUseCameraProcess();// 0x262182c
	bool IsTeammateWith(STExtraPlayerController* InPC);// 0x26217ac
	bool IsSwimOnWaterSuface();// 0x2621784
	bool IsStanding();// 0x262174c
	bool IsSkipSpawnDeadTombBox(Controller* EventInstigater);// 0x26216c4
	bool IsSameTeamWithPlayerState(PlayerState* otherPS);// 0x2621644
	bool IsSameTeam(const Pawn* Other);// 0x26215bc
	bool IsReplayViewTarget();// 0x262158c
	bool IsProning();// 0x2621554
	bool IsProneMove();// 0x262152c
	bool IsOnVehicleNotUAV();// 0x26214ec
	bool IsOnVehicle();// 0x26214c8
	bool IsNowUpWater();// 0x26214a0
	bool IsNotRelevantInScript(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x2621378
	bool IsNearDeath();// 0x2621350
	bool IsLocalViewed();// 0x2621320
	bool IsInFlyingTeam();// 0x26212f8
	bool IsInFallingState();// 0x26212d0
	bool IsInEditor();// 0x23c140c
	bool IsHealthyAlive();// 0x26212a8
	bool IsHealthAlive();// 0x2621280
	bool IsHandleInFold();// 0x2621258
	bool IsFirstPerson();// 0x2621230
	bool IsFatalDead();// 0x2621200
	bool IsExitingParachute();// 0x26211d8
	bool IsEnterWaterSuface();// 0x26211b0
	bool IsDynamicMovementBase(PrimitiveComponent* Component);// 0x2621130
	bool IsDetectingPaintDecalTarget();// 0x2621110
	bool IsCrouching();// 0x26210dc
	bool IsCharacterSprinting();// 0x26210b4
	bool IsCanPlayEmote(int TypeSpecificID);// 0x2621034
	bool IsAngledSight();// 0x262100c
	bool IsAllowScopeIn();// 0x2620fe4
	bool IsAlive();// 0x2620fb4
	void InviteTeammate(FString Name, enum InvitationType);// 0x2620ee0
	void InsertDelayStateRelation(enum OldState, enum NewState);// 0x2620e24
	bool InDragonBoatDrumSeat();// 0x2620dfc
	void HideNightVisionFrame();// 0x2620de0
	void HideDeadBody(float DelayTime);// 0x2620d60
	bool HaveAngledSight();// 0x2620d38
	bool HasState(enum State);// 0x2620cb0
	bool HasItemFromBackPack(int InItemDefineID);// 0x2620c30
	bool HasDynamicMovementBase();// 0x2620c08
	bool HasAnyStates(enum[] states);// 0x2620b1c
	bool HasAllStates(enum[] states);// 0x2620a30
	void HandleWeaponOnShoot();// 0x2620a14
	void HandleUnmannedVehicleControlAnimLoadFinished(byte InAnimType, STExtraVehicleBase* Vehicle, float PlayRate);// 0x2620914
	void HandleRemoteControlChanged();// 0x26208f8
	void HandlePlayOperateItemSoundOnServer(FString BankName, FString SoundName);// 0x2620764
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x26206a8
	void HandlePlayerPickUpActor(Actor* WrapperActor, float TargetZLoc);// 0x26205ec
	void HandlePlayEmoteCloseWeapon(byte TargetChangeSlot);// 0x2620574
	void HandleOpenPickUpBoxAction();// 0x2620560
	void HandleOnCharAnimLoadingFinished();// 0x2620544
	void HandleConsumeItemSkillBreak();// 0x242d4ac
	void HandleClientNetShutDownOnShowResultUI();// 0x2620530
	void HandleAutoSwitchWeaponDelay();// 0x262051c
	void GrenadeBackToWeaponServerCall();// 0x26204c0
	void GMTestZengzuo();// 0x26204ac
	void GMShowName();// 0x235d4b8
	WeaponManagerComponent* GetWeaponManager();// 0x2620484
	Rotator GetViewRotation();// 0x2620434
	float GetValueLimitForHealthPredict();// 0x262040c
	enum GetUAVState();// 0x26203f0
	float GetTPPDefaultFov();// 0x26203c0
	enum GetThrowGrenadeMode();// 0x26203a0
	SpringArmComponent* GetThirdPersonSpringArm();// 0x46f6b154
	CameraComponent* GetThirdPersonCamera();// 0x46f6b154
	ParachuteFollowState[] GetTeammateParachuteFollowStateList();// 0x2620338
	int GetTeammateIndex(STExtraBaseCharacter* Teammate);// 0x26202b8
	float GetSwimSpeedModifier();// 0x2620290
	AkComponent* GetSoundComponent();// 0x2620260
	FString GetShootWeaponNameByWeapon(int ItemDefineID);// 0x46f6b154
	SpringArmComponent* GetScopeSpringArm();// 0x2620238
	CameraComponent* GetScopeCamera();// 0x46f6b154
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold, bool ShouldPutDownOffset);// 0x262015c
	BoxComponent* GetProneShapeComponent();// 0x262013c
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x2620078
	PlayerVehAnimList GetPlayerVehAnimation();// 0x2620044
	int GetPlayerTeamIndex();// 0x262001c
	STExtraPlayerState* GetPlayerStateSafety();// 0x261fff4
	PersistClientStateComponent* GetPlayerPersistClientState();// 0x261ffcc
	Vector GetPlayerMovementDir();// 0x261ff7c
	byte GetPlayerJumpType();// 0x261ff54
	FString GetPlayerDetailInfo();// 0x261fec0
	STExtraPlayerController* GetPlayerControllerSafety();// 0x261fe90
	STExtraPlayerController* GetPlayerControllerInReplay();// 0x261fe68
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType, byte AnimListOverride, byte PoseTypeOverride);// 0x261fd50
	PlayerAnimList GetPlayerAnimation();// 0x261fd1c
	byte GetPersistentRole();// 0x261fcfc
	ParachuteFollowState GetParachuteFollowStateByPlayerIndex(const int InPlayerIndex);// 0x261fc74
	float GetMoveSpeedModifier();// 0x261fc4c
	bool GetMovementAttrModifier(float Value, int Dir, out FString OutValue, byte PoseType);// 0x261fad0
	void GetMoveInputState(out Vector OutMoveInputState);// 0x261fa2c
	Vector GetMoveInputLocalDir();// 0x261f9e4
	FString GetLatestInviter();// 0x261f950
	void GetLastMoveInputState(out Vector OutMoveInputState);// 0x261f8ac
	float GetJumpHeight();// 0x261f884
	bool GetIsPlayingEmote();// 0x261f85c
	bool GetIsFPP();// 0x261f82c
	bool GetIsEffectMotionEmote(int EmoteIndex);// 0x261f7a4
	float GetHealthMax();// 0x261f77c
	float GetHealth();// 0x261f754
	FString GetGrenadeNameByGrenadeType(int grenadeType);// 0x261f670
	float GetFPPDefaultFov();// 0x261f640
	BaseFPPComponent* GetFPPComp();// 0x261f618
	Vector GetFollowerLocOffset(STExtraBaseCharacter* follower);// 0x261f588
	SpringArmComponent* GetFirstPersonSpringArm();// 0x46f6b154
	CameraComponent* GetFirstPersonCamera();// 0x46f6b154
	float GetExtraDamageBySignalHP(float InDamge);// 0x261f508
	STExtraAnimInstanceBase* GetExtraAnimInstanceBase(bool bisFPP);// 0x261f480
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x46f6b154
	FString GetEmote(int ItemDefineID);// 0x46f6b154
	float GetDeadBodyDisappearTime();// 0x261f458
	STExtraWeapon* GetCurrentWeapon();// 0x261f428
	STExtraVehicleBase* GetCurrentVehicle();// 0x261f3f8
	STExtraWeapon* GetCurrentShieldWeapon();// 0x261f3d0
	int GetCurrentPlayEmoteID();// 0x261f3b0
	float GetCurrentFOV();// 0x261f388
	AnimMontage* GetCurPlayingEmote();// 0x261f360
	FString GetCorpName();// 0x261f2cc
	Controller* GetControllerSafety();// 0x261f29c
	UAEChaParachuteAnimListComponent* GetCharParachuteAnimListComponent();// 0x261f274
	float GetCharacterXYPlaneVelocity();// 0x261f24c
	STCharacterRescueOtherComp* GetCharacterRescueOtherComponent();// 0x261f224
	CharacterParachuteComponent* GetCharacterParachuteComponent();// 0x261f1fc
	STCharacterNearDeathComp* GetCharacterNearDeathComponent();// 0x261f1d4
	STCharacterMovementComponent* GetCharacterMovementComponent();// 0x261f1ac
	CharacterEnergyData GetCharacterEnergy();// 0x261f0d8
	UAECharacterAnimListComponent* GetCharacterAnimComponent();// 0x261f0a8
	Rotator GetCachedControlRotation();// 0x261f060
	STCharacterBonfireLinkComp* GetBonfireLinkComp();// 0x261f038
	CharacterAvatarComponent* getAvatarComponent();// 0x261f010
	float GetAnimMontagePlayRate(AnimMontage* AnimMontage);// 0x261ef90
	SpringArmComponent* GetActiveSpringArm();// 0x261ef60
	CameraComponent* GetActiveCamera();// 0x261ef38
	void FpsPawnVaultToServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x261ec4c
	void FpsPawnVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x261e9e8
	void ForceUpdateSpringArm();// 0x261e9cc
	void ForceSwitchWeaponBySlotOnServer(byte Slot, bool bUseAnimation);// 0x261e900
	void ForcePlayerUpdateAnimation();// 0x261e8ec
	void ForceCorrectClient(const Vector Postion, const Rotator Rotation, const Vector Velocity);// 0x261e7dc
	void FollowTeammate(FString Name);// 0x261e6f8
	enum FindBuffRelatedPawnState(FName _buffName);// 0x261e670
	void FillPlayerAnimRate(out PlayerAnimList InAnimList);// 0x261e5d0
	void ExecFollowTeammate(FString Name);// 0x261e4ec
	void EquipZoomScope(int WeaponID, int ScopeID);// 0x261e430
	void EquipWeaponFinish();// 0x235d4b8
	void EquipWeapon(byte Slot, bool bSwitchWeapon);// 0x261e36c
	bool EnterState(enum State);// 0x261e2e4
	void EnterServerState(enum State);// 0x261e230
	void EnableGameModeOverrideAttrs();// 0x261e21c
	void EnableCurrentWeaponInfiniteBullets(bool bEnable);// 0x261e19c
	void EnableAllMoveAttrModifier();// 0x261e188
	bool EmoteAnimFinishedSuccessfully();// 0x261e160
	void DynamicSetupMoveInputStateExRep(bool bForceOpenWithReplay);// 0x261e0e0
	void DrawTraceEnemyLine(Vector StartPos, Vector EndPos, bool bCanNotSeeTarget);// 0x261dfb0
	void DoFootEffectTarget(bool bStart);// 0x46f6b154
	void DoDetectPaintDecalTarget(bool bStart);// 0x261df30
	void DisappearOnDeath();// 0x261df1c
	void DisablePawnCollision();// 0x261df00
	void DisableAllMoveAttrModifier(byte PoseType);// 0x261de88
	void DettachWeapon();// 0x235d4b8
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x261de74
	void DelayMoveEnd();// 0x261de60
	void DelayMove(float Time);// 0x261dde8
	void DelayCustomDepth(float Time);// 0x261dd70
	CapsuleComponent* CreateCapsuleComponentForDeltaRotation(enum Why);// 0x261dce8
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x261dc60
	void ClientUpdateShovelingState(Vector StartPos, Rotator ShovelingRotation);// 0x261db38
	void ClientSyncServerTagsChange(const FName[] newTags, const FName[] oldTags);// 0x261da10
	void ClientStopShoveling();// 0x261d9b4
	void ClientSomeOneResponseMe(FString BeInvitedName, enum res, enum InivationType);// 0x261d894
	void ClientSomeOneInviteMe(FString SomeOne, enum InvitationType);// 0x261d7b8
	void ClientShowAutoGroupParachuteTeamTips(bool bDoGroupSuccessfully);// 0x261d730
	void ClientSetLeaveVehicleLocation(Vector LeaveLocation);// 0x261d6a8
	void ClientSetActorLocation(Vector Location, bool bDeactiveMov);// 0x261d5cc
	void ClientResponseFeedback(enum res);// 0x261d54c
	void ClientOnPossessBy(Controller* NewController);// 0x261d498
	void ClientInterruptPlayEmote(int EmoteIndex);// 0x261d3e4
	void ClientHealthMaxChanged(out const AttrAffected[] AffectedAttrS);// 0x261d318
	void ClientCheckStartShovelingFail();// 0x261d2bc
	void ClientBulletLineTrace(Vector BornPos, Vector EndPos, STExtraBaseCharacter* InstigatorCharacter);// 0x261d138
	void Client_All_ShowActivityHPOverUI(int CurrentAH, STExtraBaseCharacter* attacher, Vector DamageDir);// 0x261d018
	void ClearMoveAntiCheat();// 0x261d004
	void ClearHPUI();// 0x261cfe8
	void ClearClientJump();// 0x261cfd4
	void ClearActivityActionServer();// 0x261cfc0
	bool CheckPoseStateChange(byte State, bool ShouldShowPrompt);// 0x261cef4
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x261ce64
	bool CheckPickWeaponCanAutoUse();// 0x261ce34
	bool CheckOnMoveablePlatform();// 0x261ce0c
	bool CheckCanSwitchFPP();// 0x261cddc
	bool CheckCanPaintDecalOnServer();// 0x261cdac
	void CheckAnimInstanceChange();// 0x261cd98
	void CheckActivitySyncData();// 0x261cd7c
	void CharacterMovementUpdatedCallback(float DeltaTime, Vector OldLocation, Vector OldVelocity);// 0x261cc50
	void ChangeVehWeaponCameraData(bool Enable);// 0x261cbd0
	bool CanStartReceive();// 0x261cba8
	bool CanPaintDecal(int DecalId);// 0x261cb28
	bool CanHearWeaponLockSound();// 0x261caf8
	bool CanEnterState(enum NewState);// 0x261ca78
	bool CanChangeThrowMode();// 0x261ca50
	void CancelFollow();// 0x261ca3c
	void CalculatePickUpItemFlow(int SpesificID, int Count, Vector Location, int SourceType, int AdditionalParam);// 0x261c898
	void CalculateActivityEventFlowExt(int EventId, int InCount, int ExtraParam, Vector Loc, FString Str);// 0x261c674
	void CalculateActivityEventFlow(TLog_ActivityEventType InEventID, int InCount);// 0x261c59c
	void CalculateActivityEventDistinctFlow(TLog_ActivityEventType InEventID, int InCount);// 0x261c4c4
	void BulletLineTrace(Vector BornPos, Vector EndPos, PrimitiveComponent* meshComp, Actor* BulletActor);// 0x261c350
	void BulletChange();// 0x261c2f4
	void BroadcastOtherClientsDie(Controller* Killer, Actor* DamageCauser, const HitResult KillingHitInfo, Vector KillingHitImpulseDir, const DamageEvent DamageEvent, bool bIsPointDamage);// 0x261c080
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261be5c
	void BroadcastClientsSimulateSTCustomRadialDamage(float BaseDamage, const STCustomRadialDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261bbf8
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261b9a8
	void BroadcastClientsSimulatePoisonWaterDamage(float BaseDamage, const STPoisonWaterDamageEvent PoisonWaterDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261b78c
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261b56c
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261b34c
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261b120
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261aee4
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261acc4
	void BroadcastClientsSimulateDamage_UGCRadialDamage(float BaseDamage, const UGCRadialDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261aa60
	void BroadcastClientsSimulateDamage_UGCPointDamage(float BaseDamage, const UGCPointDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261a838
	void BroadcastClientsSimulateDamage_STRadial(float BaseDamage, const STRadialDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261a5dc
	void BroadcastClientsSimulateDamage_ShootWeaponNew(float BaseDamage, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage, byte AvatarDamagePosition, Vector_NetQuantize ImpactPoint, class DamageType DamageTypeClass);// 0x261a34c
	void BroadcastClientsSimulateDamage_ShootWeapon(float BaseDamage, const ShootWeaponDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x261a108
	void BroadcastClientsSimulateDamage_LowTemperature(float BaseDamage, const LowTemperatureDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2619ee8
	void BroadcastClientsSimulateDamage_LastBreathWithoutRescue(float BaseDamage, const LastBreathWithoutRescueDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2619cc8
	void BroadcastClientsSimulateDamage_Electric(float BaseDamage, const ElectricDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2619aa8
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2619888
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x2619638
	void BroadcastClientsDeath(float Damage, const DamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x2619480
	void BroadcastClientDeath_ShootWeaponDamageNew(float Damage, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage, byte AvatarDamagePosition, Vector_NetQuantize ImpactPoint, class DamageType DamageTypeClass);// 0x2619280
	void BroadcastClientDeath_ShootWeaponDamage(float Damage, const ShootWeaponDamageEvent DamageEvent, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x26190d4
	float BPTakeDamage(float Damage, const Controller* EventInstigator, const Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x2618f58
	void BPResetCharacter();// 0x46f6b154
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x46f6b154
	void BPReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x46f6b154
	void BPReceiveMeleeDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x46f6b154
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x46f6b154
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x46f6b154
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x46f6b154
	void BPLua_PostNetInit();// 0x46f6b154
	void BPDie(float KillingDamage, Controller* EventInstigator, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, out const DamageEvent DamageEvent, bool IsClient, bool IsPointDamage, bool IsHeadShotDamage, int damageTypeID);// 0x2618be0
	void BP_RegisterModifiedAttributes();// 0x46f6b154
	bool BlueprintUpdateMoveSpeed(out float OutMaxSpeed);// 0x46f6b154
	bool BlueprintSetPoseStateAttrModifierEnable(byte InPoseState, bool bNewEnable);// 0x46f6b154
	bool BlueprintSetCharacterAttrModifierEnable(FString ModifierName, bool bNewEnable);// 0x46f6b154
	bool BlueprintRefreshMoveAttrModifier();// 0x46f6b154
	bool BlueprintGetMovementAttrModifier(float Value, int Dir, out FString OutValue, byte PoseType, out bool bIsValid);// 0x46f6b154
	bool BlueprintEnableAllMoveAttrModifier();// 0x46f6b154
	bool BlueprintDisableAllMoveAttrModifier(byte PoseType);// 0x46f6b154
	void AutoScopeWhenPeek();// 0x2618bcc
	void AttachWeapon();// 0x235d4b8
	void AsyncAnimOpenDoorCallback(AnimationAsset* retAsset);// 0x2618b54
	void AddOneDamageCauserRecord(Controller* causer, int HSChangeMargin, out const DamageEvent DamageEvent, bool IsHeadShot, Actor* DamageCauser);// 0x2618994
	void AddMoveOffSet(float Forward, float Right, float Up);// 0x2618894
	void AddDynamicExtraDamageReduceCfg(ExtraDamageReduceCfg AddCfg);// 0x2618740
	int AddDamageReductionData(DamageReductionRule Rule, int Key);// 0x2618520

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnDeath;//[Offset: 0x7c0, Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x7cc, Size: 12]
	delegate OnSimulateCharacterStatesChange;//[Offset: 0x7d8, Size: 12]
	delegate OnCharacterPostNetInit;//[Offset: 0x7e4, Size: 12]
	int MonsterID;//[Offset: 0x7f0, Size: 4]
	delegate CharacterAnimEventDelegate;//[Offset: 0x7f4, Size: 12]
	enum[] CanMoveNavLinkTypeList;//[Offset: 0x800, Size: 12]
	<enum> CanMoveNavLinkExtendedFlagList;//[Offset: 0x80c, Size: 60]
	enum[] CanNotMoveNavLinkDirectionList;//[Offset: 0x848, Size: 12]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x854, Size: 1]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x858, Size: 12]
	float Health;//[Offset: 0x864, Size: 4]
	float HealthMax;//[Offset: 0x868, Size: 4]
	float SignalHP;//[Offset: 0x86c, Size: 4]
	float PreSignalHP;//[Offset: 0x870, Size: 4]
	float PreviousSignalHP;//[Offset: 0x874, Size: 4]
	float SignalHPMax;//[Offset: 0x878, Size: 4]
	float SignalHPRecoverCDMax;//[Offset: 0x87c, Size: 4]
	float SignalHPRecoverSpeed;//[Offset: 0x880, Size: 4]
	float CurSignalHPRecoverCD;//[Offset: 0x884, Size: 4]
	bool bCurSignalHPIsFullOrRecovering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	FString EnergyBuffListName;//[Offset: 0x88c, Size: 12]
	float ResetSignalHP_FatalDamage;//[Offset: 0x898, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0x89c, Size: 4]
	float CheckCirclePainDeltaTimeMax;//[Offset: 0x8a0, Size: 4]
	float DefaultSpeedValue;//[Offset: 0x8a4, Size: 4]
	float SpeedValue;//[Offset: 0x8a8, Size: 4]
	float SpeedScale;//[Offset: 0x8ac, Size: 4]
	float SpeedWeaponModuleModifier;//[Offset: 0x8b0, Size: 4]
	float SwimSpeedDynamicScale;//[Offset: 0x8b4, Size: 4]
	FName BulletBlockComponentTag;//[Offset: 0x8b8, Size: 8]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8c0, Size: 1]
	bool bHideAllPrimitiveOnDead;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8c0, Size: 1]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0x8c4, Size: 60]
	byte TeamNum;//[Offset: 0x900, Size: 1]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0x904, Size: 12]
	bool bUseModifiedTargetLocIfNeeded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914, Size: 1]
	bool bCanBePickByPicker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x915, Size: 1]
	float threatenValue;//[Offset: 0x918, Size: 4]
	float Temperature;//[Offset: 0x91c, Size: 4]
	float TemperatureMax;//[Offset: 0x920, Size: 4]
	float TemperatureMin;//[Offset: 0x924, Size: 4]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0x928, Size: 4]
	TickControlComponent* TickControlComp;//[Offset: 0x938, Size: 4]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0x948, Size: 4]
	VehicleMotorbikeComponent* motorbikeComp;//[Offset: 0x94c, Size: 4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0x950, Size: 8]
	UnmannedVehicleSyncData LastUnmannedVehicleSyncData;//[Offset: 0x958, Size: 8]
	STExtraVehicleBase* CurrentRemoteControlledVehicle;//[Offset: 0x960, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x964, Size: 4]
	RemoteControlComponent* CurRemoteControlPawn;//[Offset: 0x968, Size: 4]
	RemoteControlComponent* LastRemoteControlPawn;//[Offset: 0x96c, Size: 4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970, Size: 1]
	delegate StateInterruptedHandlerBP;//[Offset: 0x974, Size: 12]
	delegate StateEnterHandler;//[Offset: 0x980, Size: 12]
	delegate StateLeaveHandler;//[Offset: 0x98c, Size: 12]
	PawnStateRepSyncData PawnStateRepSyncData;//[Offset: 0x9b0, Size: 16]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0x9c0, Size: 12]
	delegate OnPawnStateDisabled;//[Offset: 0x9cc, Size: 12]
	delegate OnPawnStateEnabled;//[Offset: 0x9d8, Size: 12]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0x9fc, Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xa00, Size: 4]
	delegate OnPlayerPoseChange;//[Offset: 0xa04, Size: 12]
	delegate OnPlayerPoseChange_Animation;//[Offset: 0xa10, Size: 12]
	EffectComponent* NewEffectComponent;//[Offset: 0xa1c, Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 1]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa21, Size: 1]
	float CompVisionOpDis;//[Offset: 0xa24, Size: 4]
	float CompVisionOpDelay;//[Offset: 0xa28, Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2c, Size: 1]
	FString PawnStatesExtend;//[Offset: 0xa7c, Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0xa90, Size: 4]
	UTSkillManagerComponent* SkillManagerComponent;//[Offset: 0xa94, Size: 4]
	AIShootingOffsetComponent* AIShootingOffsetComp;//[Offset: 0xa98, Size: 4]
	bool bEnableWrappedLightBeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa0, Size: 1]
	Controller* PrevController;//[Offset: 0xaa4, Size: 4]
	float GravityScaleAuthorized;//[Offset: 0xaa8, Size: 4]
	bool bShouldCheckAttachedParentIsNull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaac, Size: 1]
	ActivitySyncData ActicitySyncData;//[Offset: 0xab0, Size: 32]
	bool bDisableFaceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 1]
	TurnAroundViewComponent* TurnAroundViewComp;//[Offset: 0xb14, Size: 4]
	AimOffsetViewComponent* AimOffsetViewComp;//[Offset: 0xb18, Size: 4]
	PlayerVaultComponent* PlayerVaultComp;//[Offset: 0xb1c, Size: 4]
	bool bShouldDisableGunValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 1]
	Actor* CachedOldAttach;//[Offset: 0xb24, Size: 4]
	SubAnimInstanceMap* SubAnimInstanceMap;//[Offset: 0xb30, Size: 40]
	SubAnimInstanceMap* SubAnimInstanceMap_Ins;//[Offset: 0xb58, Size: 4]
	STExtraPlayerVaultComponent* CachedPlayerVaultComponent;//[Offset: 0xb60, Size: 4]
	float PlayerInitTimestamp;//[Offset: 0xb64, Size: 4]
	bool IsRCRRelevantForConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	Vector RCRDSNotifyLoction;//[Offset: 0xb6c, Size: 12]
	float RCRCheckMinViewCos;//[Offset: 0xb78, Size: 4]
	float RCRCheckMinDistanceSquared;//[Offset: 0xb7c, Size: 4]
	float RCRClientRandomXYMin;//[Offset: 0xb80, Size: 4]
	float RCRClientRandomXYMax;//[Offset: 0xb84, Size: 4]
	float RCRDSCheckProneSprintCD;//[Offset: 0xb88, Size: 4]
	float RCRDSCheckProneWalkCD;//[Offset: 0xb8c, Size: 4]
	float RCRDSCheckSprintCD;//[Offset: 0xb90, Size: 4]
	float RCRDSCheckWalkCD;//[Offset: 0xb94, Size: 4]
	float RCRDSCheckDyingWalkCD;//[Offset: 0xb98, Size: 4]
	float RCRNotReleventCheckTime;//[Offset: 0xb9c, Size: 4]
	float RCRModifyLargeBoxDisSquared;//[Offset: 0xba0, Size: 4]
	float RCRModifyMediumBoxDisSquared;//[Offset: 0xba4, Size: 4]
	float RCRLargeBoxMultiple;//[Offset: 0xba8, Size: 4]
	float RCRMediumBoxMultiple;//[Offset: 0xbac, Size: 4]
	PickupManagerComponent* PickupManagerComponentRef;//[Offset: 0xbb0, Size: 4]
	delegate OnMoveBlockDelegate;//[Offset: 0xbb4, Size: 12]
	CustomFeatureComponent*[] featureComs;//[Offset: 0xbc0, Size: 12]
	void VaultOnServer(float ForwardBlockDist, float BlockHeight, float VaultDist, byte VaultDataMapKeyIndex, Vector_NetQuantize10 PlayerStartLoc, Actor* CheckActor, float CurJumpLandingHeight, float CurJumpLandingDist, Vector_NetQuantize10 ForwardHitPoint, Vector_NetQuantize100 ForwardBlockDir);// 0x265d108
	void VaultNetMulticast(float ForwardBlockDist, float BlockHeight, float VaultDist, byte VaultDataMapKeyIndex, Vector_NetQuantize10 PlayerStartLoc, Actor* CheckActor, float CurJumpLandingHeight, float CurJumpLandingDist, Vector_NetQuantize10 ForwardHitPoint, Vector_NetQuantize100 ForwardBlockDir);// 0x265cda4
	void VaultFailedOnClient(const FString Content);// 0x265cd0c
	bool TriggerSkillEvent(class UTSkill SkillClass, byte SkillEventType);// 0x265cbac
	bool TriggerSkillCustomEvent(int SkillIndex, byte EventType);// 0x265cae0
	bool TriggerEntryEvent_Implementation(enum EntryEvent);// 0x262c4ac
	void TriggerCustomEvent_Implementation(byte EventType);// 0x265ca60
	FString ToStringHasLocation(FString Subtitle);// 0x265c914
	FString ToStringHasExtendInfoHasMiddleSimply(FString Subtitle, FString MiddleSimplyStr);// 0x265c718
	FString ToStringHasExtendInfo(FString Subtitle);// 0x265c5cc
	void SetPawnStateDisabled(enum PawnState, bool bNewDisabled);// 0x265c508
	void SetInvincible(bool Invincible);// 0x265c488
	void SetGravityScaleAuthorized(float InScale);// 0x265c410
	bool SetBuffExpiry(FName BuffName, float ExpirySecondsFromNow);// 0x265c33c
	void S2C_InterruptState(int stateID, int InterruptedBy);// 0x265c278
	void ResetSubAnimNodeAnimClass(FName SubInstanceSlotName, int Types);// 0x265c1bc
	void ResetPawnStateDisabled(enum State);// 0x265c144
	AnimInstance*[] ReplaceSubAnimNodeAnimClass(FName SubInstanceSlotName, class AnimInstance SubInstanceClass, int Types);// 0x265bfd8
	bool RemoveBuff(FName BuffName, bool RemoveLayerOnly, Actor* BuffApplierActor);// 0x265beb4
	bool ReloadWeaponFilter();// 0x265be84
	void PossessedBy(Controller* NewController);// 0x26256d4
	void PickupNewItem(ItemHandleBase* ItemHandle);// 0x265be0c
	void OnUnEquipWeaponWithParams(STExtraShootWeapon* ShootWeapon, enum Reason);// 0x265bd48
	void OnUnEquipCurrentWeapon(STExtraShootWeapon* ShootWeapon);// 0x265bcc8
	void OnStateLeave(enum LeavedState);// 0x26239a0
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x26238dc
	void OnStateEnter(enum EnteredState);// 0x262385c
	void OnRep_UnmannedVehicleSyncData();// 0x262375c
	void OnRep_Temperature(float LastValue);// 0x2604a60
	void OnRep_SignalHP(float PrevVal);// 0x26235f8
	void OnRep_PawnStateRepSyncData(out const PawnStateRepSyncData PrevData);// 0x265bc30
	void OnRep_IsRCRRelevantForConnection();// 0x265bc1c
	void OnRep_IsInvincible();// 0x265bc08
	void OnRep_Health(float PrevHealth);// 0x26232f8
	void OnRep_GravityScaleAuthorized();// 0x265bbf4
	void OnRep_CurSignalHPIsFullOrRecovering();// 0x2623250
	void OnRep_CurrentStates(uint64 prevStates);// 0x2623154
	void OnRep_CurRemoteControlPawn();// 0x2623124
	void OnRep_ActivitySyncData();// 0x265bbd8
	bool OnlyHasStates(out const enum[] InStates);// 0x265bb28
	void OnBPIsInvincibleChange();// 0x46f6b154
	void LeaveStuckStateOnClient(Vector NewLoc, Rotator NewRot);// 0x265ba50
	bool LeaveState(enum State);// 0x2621c64
	static bool IsPawnStateDisabledByWeapon(STExtraWeapon* Weapon, enum State);// 0x265b994
	bool IsPawnStateDisabled(enum State);// 0x265b914
	bool IsLocalViewed();// 0x2621320
	bool IsGrenadeEmpty();// 0x265b8e4
	bool IsFatalDead();// 0x2621200
	bool IsAlive();// 0x2620fb4
	void HideTheCharacter(bool bHide);// 0x265b864
	void HidePlayerMagOnGunReload();// 0x24e1098
	void HideCharacterWeapon(bool bHide);// 0x265b7e4
	bool HasState(enum State);// 0x2620cb0
	bool HasBuff(FName BuffName);// 0x265b75c
	void HandleConsumeItemSkillBreak();// 0x242d4ac
	Actor* GetWeaponOwnerProxyFactory();// 0x265b72c
	MeshComponent* GetWeaponAttachMeshCommon(STExtraWeapon* Weapon);// 0x265b6a4
	SkeletalMeshComponent* GetWeaponAttachMesh(STExtraWeapon* Weapon);// 0x265b61c
	SceneComponent* GetWeaponAttachComp();// 0x265b5ec
	STExtraVehicleBase* GetUnmannedVehicle();// 0x265b5d0
	FString GetToString();// 0x265b534
	UTSkillManagerComponent* GetSkillManagerComponent();// 0x265b50c
	UTSkillManagerComponent* GetSkillManager();// 0x265b4dc
	float GetScaledSpeed();// 0x265b4ac
	STExtraVehicleBase* GetRemoteControlledVehicle();// 0x265b490
	FString GetPlayerNameSafety();// 0x265b3f4
	STExtraPlayerController* GetPlayerControllerSafety();// 0x261fe90
	PickupManagerComponent* GetPickupManagerComponent();// 0x265b3d8
	enum GetObserverType();// 0x265b3a8
	Vector GetHeadLocation(bool bUseHeadBone);// 0x265b308
	CustomFeatureComponent* GetFeatureComByClass_BP(class Object ClassType);// 0x265b258
	float GetElapseTimeSinceInit();// 0x265b230
	enum[] GetDamageableGameObjectType();// 0x265b194
	UTSkill* GetCurSkillWithCache();// 0x265b16c
	UTSkill* GetCurSkill();// 0x265b13c
	STExtraVehicleBase* GetCurrentVehicle();// 0x261f3f8
	bool GetClientHasFinishedReloadWeapon();// 0x265b114
	PrimitiveComponent* GetCharacterMovementBaseComp();// 0x265b0e4
	UAECharAnimListCompBase* GetCharacterAnimComponent();// 0x261f0a8
	FName GetBulletBlockComponentTag();// 0x265b09c
	FString GetBuffListString();// 0x265b008
	float GetBuffExpiry(FName BuffName);// 0x265af80
	SubAnimInstanceMap* GetAnimInstanceMap();// 0x265af58
	void FPPVaultOnServer(Vector_NetQuantize10 FPPVaultStartLoc, Vector_NetQuantize10 FPPVaultTopLoc, float CurJumpLandingHeight, float CurJumpLandingDist, bool bIsJumping, Vector_NetQuantize100 ForwardBlockDir, float VaultDist);// 0x265ac5c
	void FPPVaultNetMulticast(Vector_NetQuantize10 FPPVaultStartLoc, Vector_NetQuantize10 FPPVaultTopLoc, float CurJumpLandingHeight, float CurJumpLandingDist, bool bIsJumping, Vector_NetQuantize100 ForwardBlockDir, float VaultDist);// 0x265a9e8
	void ForceCancelVaultOnServer();// 0x265a98c
	enum FindBuffRelatedPawnState(FName _buffName);// 0x261e670
	void ExtendPawnStates();// 0x265a978
	bool EnterState(enum State);// 0x261e2e4
	void DelayHidden();// 0x265a964
	byte ConvertCharacterPoseStateToPoseType(byte InPoseState);// 0x265a8e4
	void Client_ShowLogDebugInfo(bool bLogInfo);// 0x265a85c
	void Client_ShowDebugString(Vector InLocation, FString InText, Actor* InActor, Color InColor, float InTime);// 0x265a6a4
	void Client_ShowDebugSphere(Vector InLocation, float InRadius, Color InColor, float InTime);// 0x265a548
	void Client_ShowDebugLine(Vector InStart, Vector InEnd, Color InColor, float InTime);// 0x265a3dc
	void Client_ShowDebugCone(Vector InLocation, float InRadius, Color InColor, float InTime, Vector forwardDir, float ang);// 0x265a1d8
	void Client_ShowDebugCapsule(Vector InLocation, float InRadius, float Length, Color InColor, float InTime, Rotator Rot, float ang);// 0x2659f9c
	void Client_ShowDebugBox(Vector Center, Color InColor, float InTime, Vector Extent, Quat Rot);// 0x2659dd8
	void ClearOneItem(ItemHandleBase* ItemHandle);// 0x2659d60
	void CheckSignalHP();// 0x2659d4c
	bool CheckCanLeanOutOnVehicle(bool bCheckState);// 0x2659cbc
	static bool CheckBackpackWeaponByStateOnServer(STExtraWeapon* Weapon, enum State);// 0x2659c00
	void CancelVaultOnServer();// 0x2659ba4
	void CancelVaultNetMulticast();// 0x2659b88
	void BPUpdateCompTransform(SceneComponent* Comp);// 0x2659b10
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x46f6b154
	void BPOnRespawned();// 0x46f6b154
	void BPOnRecycled();// 0x46f6b154
	int64 BP_GetCurrentStates();// 0x2659ae8
	float BP_CharacterModifyDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x265996c
	bool AllowState(enum State, bool withLog);// 0x2659898
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x26596f4

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	byte CharacterRegionSize;//[Offset: 0x5e9, Size: 1]
	FName PlayerType;//[Offset: 0x5f0, Size: 8]
	FString PlayerName;//[Offset: 0x5f8, Size: 12]
	uint32 PlayerKey;//[Offset: 0x604, Size: 4]
	FString PlayerUID;//[Offset: 0x608, Size: 12]
	FString PlayerOpenID;//[Offset: 0x614, Size: 12]
	bool IsPossessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	int TeamID;//[Offset: 0x63c, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x641, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x644, Size: 12]
	int playerFaceHandleID;//[Offset: 0x650, Size: 4]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 1]
	TimerHandle TimerHandle_ForceUpdateSpringArm;//[Offset: 0x688, Size: 8]
	SceneComponentState[] SpringArmStateList;//[Offset: 0x690, Size: 12]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x69c, Size: 4]
	bool showNickname;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	void SetShowNickname(bool isShow);// 0x2fc0bd8
	void ServerSetShowNicknameValue(bool flag);// 0x2fc0b10
	void OnRep_TeamID();// 0x26236a0
	void OnRep_ShowNicknameChangeEx();// 0x26235c8
	void OnRep_PlayerUID();// 0x235d4b8
	void OnRep_PlayerOpenID();// 0x235d4b8
	void OnRep_PlayerName();// 0x26234c8
	void OnRep_PlayerKey();// 0x26234ac
	void OnRep_bIsAI();// 0x262307c
	void OnForceUpdateSpringArmTimer();// 0x2fc0afc
	bool IsAlive();// 0x2620fb4
	FString GetPlayerKey();// 0x2fc0a68
	ActorComponent*[] GetNonSimulatedComponents_OnFighting();// 0x2fc09cc
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates();// 0x2fc0930
	ActorComponent*[] GetNonSimulatedComponents();// 0x2fc0894
	ActorComponent*[] GetNonDedicatedComponents();// 0x2fc07f8
	void ForceUpdateSpringArm();// 0x261e9cc
	void ClientAcknowledgeReconnection(uint32 Token);// 0x2fc0778

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	int ParentTableID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 8]

--------------------------------
Class: SceneComponentState
	SceneComponent* TargetComponent;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20, Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MinimumDuration;//[Offset: 0x28, Size: 4]
	float MaximumDuration;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bLoadAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bHasLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<FString,OnlyActorComponent*> CacheComponents;//[Offset: 0xd0, Size: 60]
	OnlyActorComponent*[] CacheUpdateComponents;//[Offset: 0x10c, Size: 12]

--------------------------------
Class: OnlyActorComponent.ActorComponent.Object
	byte bCanEverUpdate;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0xd0, Size: 1]
	<class Object,enum> NeedTickComponentClassList;//[Offset: 0xd4, Size: 60]
	TickListItem[] NeedTickComponentList;//[Offset: 0x110, Size: 12]
	byte RoleBits;//[Offset: 0x11c, Size: 1]

--------------------------------
Class: TickListItem
	ActorComponent* Comp;//[Offset: 0x0, Size: 4]
	enum RoleType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	TickControlComponent* TickControlComp;//[Offset: 0x3e0, Size: 4]
	bool MeshAlwaysTickPoseAndRefreshBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool UseBlueprintSetMeshComponentUpdateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	bool AutoEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 1]
	enum VehicleType;//[Offset: 0x3eb, Size: 1]
	MaterialInterface* BrokenMat;//[Offset: 0x3ec, Size: 4]
	ParticleSystem* PS_Explosion;//[Offset: 0x3f0, Size: 40]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x418, Size: 40]
	float HitEffectInterval;//[Offset: 0x440, Size: 4]
	<FName,ParticleSoftWrapperArray> ParticleSoftWrapperMap;//[Offset: 0x444, Size: 60]
	<FName,ParticleRuntimeDataArray> ParticleRuntimeDataMap;//[Offset: 0x480, Size: 60]
	<FName,ParticleSoftWrapperArray> PendantParticleCache;//[Offset: 0x4bc, Size: 60]
	Texture2D* VehicleIcon;//[Offset: 0x4f8, Size: 4]
	enum CameraDataType;//[Offset: 0x4fc, Size: 1]
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fd, Size: 1]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fe, Size: 1]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ff, Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x500, Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x504, Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool bCanChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x50c, Size: 4]
	bool ImmuePassageDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x514, Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51a, Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x51c, Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x524, Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	int MainMaterialIndex;//[Offset: 0x52c, Size: 4]
	FText VehicleDisplayName;//[Offset: 0x530, Size: 12]
	Vector AirDropVelocity;//[Offset: 0x53c, Size: 12]
	StaticMesh* AirdropParachuteMesh;//[Offset: 0x548, Size: 40]
	FName AirDropParachuteSocketName;//[Offset: 0x570, Size: 8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578, Size: 1]
	<int,float> ViewOffsetOfSpecialSeatsInFPP;//[Offset: 0x57c, Size: 60]
	bool SupportMusicGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool VehicleBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	float BackpackCapacity;//[Offset: 0x5bc, Size: 4]
	FName BackpackName;//[Offset: 0x5c0, Size: 8]
	FString[] BackpackSupportModeIDList;//[Offset: 0x5c8, Size: 12]
	int[] marr_MidIndexes;//[Offset: 0x5d4, Size: 12]
	float EnterVehicleCameraBlendTime;//[Offset: 0x5e0, Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x5e4, Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x5e8, Size: 4]
	float voiceCheckCD;//[Offset: 0x5ec, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x5f0, Size: 4]
	float VoiceCheckDis;//[Offset: 0x5f4, Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x5f8, Size: 4]
	float voiceCheckSpeed;//[Offset: 0x5fc, Size: 4]
	delegate OnSeatAttached;//[Offset: 0x620, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x62c, Size: 12]
	delegate OnSeatChange;//[Offset: 0x638, Size: 12]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 1]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x648, Size: 4]
	enum VehicleHealthState;//[Offset: 0x664, Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x665, Size: 1]
	bool bIsEnableInputs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x666, Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x667, Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 1]
	Vector BloodEffectScale;//[Offset: 0x66c, Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x678, Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x67c, Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x680, Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x684, Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x688, Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x68c, Size: 4]
	VehicleStatComponent* VehicleStatCollector;//[Offset: 0x690, Size: 4]
	VehicleComponent*[] VehicleComps;//[Offset: 0x694, Size: 12]
	float EnActiveTimeThreshold;//[Offset: 0x6a8, Size: 4]
	bool mb_IsFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 1]
	bool FreezeNeedChangeVehiclePhysx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4, Size: 1]
	bool FreezeDisableTickVehicleSuspension;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b5, Size: 1]
	bool mb_IsSafeSpawnedNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	bool bCanVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bd, Size: 1]
	float VehicleHitThreshold;//[Offset: 0x6c8, Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x6cc, Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x6dc, Size: 4]
	VehBackpackItem[] VehicleBackpackItems;//[Offset: 0x6e8, Size: 12]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x700, Size: 12]
	delegate OnClientExitVehicleEvent;//[Offset: 0x70c, Size: 12]
	delegate OnClientChangeSeatEvent;//[Offset: 0x718, Size: 12]
	float VehicleEnterDistance;//[Offset: 0x728, Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x72c, Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x730, Size: 4]
	bool EnableTickEnterSphereAsyncLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73d, Size: 1]
	float AsyncLoadResDistance;//[Offset: 0x740, Size: 4]
	float TickEnterSphereAsyncLoadResInterval;//[Offset: 0x744, Size: 4]
	bool EnableCullWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74d, Size: 1]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x750, Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x754, Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x758, Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x764, Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x770, Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x774, Size: 4]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	float PeneTerrainProtectionInterval;//[Offset: 0x784, Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x788, Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x78c, Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x7c0, Size: 4]
	SoftObjectPath SoundCompClass;//[Offset: 0x7d0, Size: 24]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x7e8, Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x7ec, Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x7f0, Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x7f4, Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x7f8, Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x7fc, Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x800, Size: 4]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0x804, Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x808, Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x80c, Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x810, Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x814, Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x818, Size: 4]
	AkAudioEvent* Sfx_EngineStart;//[Offset: 0x81c, Size: 4]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0x820, Size: 4]
	CarMusicConfigBlueprint[] BlueprintEditCarMusicConfigs;//[Offset: 0x824, Size: 12]
	CarMusicConfig[] CarMusicConfigs_Table;//[Offset: 0x830, Size: 12]
	CarMusicConfig[] OriginCarMusicConfigs_Table;//[Offset: 0x83c, Size: 12]
	CarMusicConfig[] CarMusicConfigs_Blueprint;//[Offset: 0x848, Size: 12]
	CarMusicWrapper[] LoadedMusic;//[Offset: 0x854, Size: 12]
	bool bMusicLoops_UseTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	float PlayMusicChance;//[Offset: 0x864, Size: 4]
	int CurMusicIndex;//[Offset: 0x868, Size: 4]
	float EngineSfxEndDelayTime;//[Offset: 0x874, Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x878, Size: 1]
	STExtraVehicleSfxLoop EngineSfxLoop;//[Offset: 0x87c, Size: 80]
	STExtraVehicleSfxLoop FireSfxLoop;//[Offset: 0x8cc, Size: 80]
	STExtraVehicleSfxLoop HornSfxLoop;//[Offset: 0x91c, Size: 80]
	STExtraVehicleSfxLoop MusicSfxLoop;//[Offset: 0x96c, Size: 80]
	AkComponent* SoundComponent;//[Offset: 0x9bc, Size: 4]
	float RPMSfxScale;//[Offset: 0x9ec, Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0x9f0, Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xa08, Size: 12]
	enum VehicleSyncTag;//[Offset: 0xa14, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0xa18, Size: 4]
	VehicleSimViewData SimulateViewData;//[Offset: 0xa1c, Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0xa20, Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0xa24, Size: 4]
	delegate OnVehicleHealthStateChanged;//[Offset: 0xa28, Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa34, Size: 1]
	float MinRideAngleDgree;//[Offset: 0xa38, Size: 4]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa44, Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa45, Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0xa48, Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0xa4c, Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa8, Size: 1]
	bool bAntiStuckBoxNoRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa9, Size: 1]
	float StuckMinImpulse;//[Offset: 0xaac, Size: 4]
	float ContinuousStuckInterval;//[Offset: 0xab0, Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0xab4, Size: 4]
	float StuckResovingTime;//[Offset: 0xab8, Size: 4]
	float ContinuousStuckTimer;//[Offset: 0xac0, Size: 4]
	float StuckResovingTimer;//[Offset: 0xac4, Size: 4]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	bool bServerClearLinearVelocityZEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad9, Size: 1]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 1]
	float RespawnWaitingTime;//[Offset: 0xb24, Size: 4]
	float RespawnTickInterval;//[Offset: 0xb28, Size: 4]
	Vector RespawnPositionSudoku;//[Offset: 0xb2c, Size: 12]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb38, Size: 1]
	float RemoveVehicleBecauseDestoryWaitingTime;//[Offset: 0xbc0, Size: 4]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd4, Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0xbd8, Size: 12]
	VehicleAntiCheatTask*[] VACTasks;//[Offset: 0xbe4, Size: 12]
	VehicleAntiCheatTask*[] VacInstancedTasks;//[Offset: 0xbf0, Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2c, Size: 1]
	int AirSwapServerThres;//[Offset: 0xc30, Size: 4]
	VehicleLagVerifyConfig ShootVictimVerifyConfig;//[Offset: 0xc3c, Size: 4]
	<int,byte> TeammateNumInCar;//[Offset: 0xc58, Size: 60]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0xc94, Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0xc98, Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0xca0, Size: 40]
	bool bOnPlayerActiveRegionsChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc8, Size: 1]
	bool bInActiveRegions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc9, Size: 1]
	float VehicleStateLogInterval;//[Offset: 0xccc, Size: 4]
	bool bLogVehicleStateOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd0, Size: 1]
	bool bLogVehicleStateOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd1, Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd8, Size: 1]
	bool bForceDisableSkeletalMeshTickOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd9, Size: 1]
	Vector SeekLockOffset;//[Offset: 0xcdc, Size: 12]
	FName SeekLockSocket;//[Offset: 0xce8, Size: 8]
	float ProduceSoundInterval;//[Offset: 0xcf0, Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xcf8, Size: 12]
	delegate VehicleExplosionDelegate;//[Offset: 0xd04, Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xd10, Size: 4]
	bool IsAvatarItemVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd14, Size: 1]
	bool bAlwaysForceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd15, Size: 1]
	delegate OnEnterVehicle;//[Offset: 0xd18, Size: 12]
	STExtraPlayerController* BornLandVehicleCreator;//[Offset: 0xd2c, Size: 4]
	delegate ServerEnterVehicleEventDelegate;//[Offset: 0xd30, Size: 12]
	delegate ServerExitVehicleEventDelegate;//[Offset: 0xd3c, Size: 12]
	VehicleAvatarComponent* VehicleAvatarComponent;//[Offset: 0xd4c, Size: 4]
	delegate OnVehicleAvatarDataCopied;//[Offset: 0xd50, Size: 12]
	enum OnVehSkirtPoseType;//[Offset: 0xd5c, Size: 1]
	enum UAVOperateState;//[Offset: 0xd64, Size: 1]
	float SingleMoveRate;//[Offset: 0xd68, Size: 4]
	SoftObjectPath VehicleStatesConfigClass;//[Offset: 0xd70, Size: 24]
	SoftObjectPath VehicleBloodMaxHpConfigClass;//[Offset: 0xd88, Size: 24]
	int CurrentVehicleStatesData;//[Offset: 0xda0, Size: 4]
	PlayerTombBox*[] TombBoxOnVehicle;//[Offset: 0xdb0, Size: 12]
	STExtraBaseCharacter*[] StandingVehiclePlayers;//[Offset: 0xdbc, Size: 12]
	bool IsExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc8, Size: 1]
	FName ExplodedTombBoxPlaceSocket;//[Offset: 0xdd0, Size: 8]
	float TombBoxTraceLength;//[Offset: 0xdd8, Size: 4]
	float PlayerOutAngleCosin;//[Offset: 0xddc, Size: 4]
	bool EnableWalkableVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 1]
	bool VehicleMeshWalkable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde1, Size: 1]
	bool LinkedMeshWalkable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde2, Size: 1]
	bool UseLocalPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde3, Size: 1]
	bool MovebaseRelativeLocTrustClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde4, Size: 1]
	bool bFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde5, Size: 1]
	bool bNeedFrozenStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde6, Size: 1]
	bool bInHouseSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde7, Size: 1]
	float CLientSleepVehicleTolerance;//[Offset: 0xde8, Size: 4]
	float StaticFixAngel;//[Offset: 0xdec, Size: 4]
	float ClientAwakeVehicleTolerance;//[Offset: 0xdf0, Size: 4]
	float SleepVehicleTickTime;//[Offset: 0xdf4, Size: 4]
	float NetUpdateFrequencyInWaterDeactive;//[Offset: 0xe00, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0xe04, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0xe08, Size: 4]
	int VehicleSkinID;//[Offset: 0xe1c, Size: 4]
	float TickControlledFrequency;//[Offset: 0xe20, Size: 4]
	bool bRuntimeEnableTickControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe24, Size: 1]
	delegate OnVehicleEnterDelegate;//[Offset: 0xe2c, Size: 12]
	delegate OnVehicleExitDelegate;//[Offset: 0xe38, Size: 12]
	delegate OnVehicleHPChangedDelegate;//[Offset: 0xe44, Size: 12]
	delegate OnVehicleWheelsHPChangedDelegate;//[Offset: 0xe50, Size: 12]
	VehicleAIComponent* VehicleAIComponent;//[Offset: 0xe5c, Size: 4]
	void VehicleJump();// 0x260f91c
	void VehicleBeenDestroyedCleanInfoDisplay(enum InVehicleHealthState);// 0x26fd4e4
	bool TickRemoveVehicleBecauseDestory(float DeltaTime);// 0x26fd464
	float TestTakeDamage(float Damage, out const STRadialDamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x26fd290
	void StopFireVehicleWeapon(VehicleShootWeapon* VehicleWeapon);// 0x26fd218
	void StopAutoDriving();// 0x26fd204
	void StartFireVehicleWeapon(VehicleShootWeapon* VehicleWeapon, STExtraPlayerCharacter* Character);// 0x26fd148
	void StartAirDrop();// 0x26fd134
	void SpawnUnattachedEffectAsync(FName EffectName);// 0x26fd0bc
	void SpawnItemForVehicleBackpack(out const PickUpItemData[] ItemList);// 0x26fcfc0
	void SetVehicleWeaponTarget(VehicleShootWeapon* VehicleWeapon, out const Vector TargetLoc);// 0x26fceec
	void SetVehicleStates(int ID, bool bEnable, float fTime);// 0x26fcde0
	void SetVehicleHPMax(float MaxHP);// 0x26fcd68
	void SetVehicleHP(float HP);// 0x26fccf0
	void SetVehicleCustomName(FString InCustomVehicleName, const BattleItemHandleBase* InVehicleHandle);// 0x26fcc14
	void SetUAVOperateState(enum NewState);// 0x26fcb9c
	void SetSafeSpawn(bool ab_IsSafeSpawn);// 0x26fcb14
	void SetJoystickMoveVelocity(Vector2D moveVelocity);// 0x26fcaa4
	void SetFrozenStaticState(bool State);// 0x26fca24
	void SetAvatarMID(MaterialInterface* MatDMI);// 0x46f6b154
	void ServerStopFireVehicleWeapon(VehicleShootWeapon* VehicleWeapon);// 0x26fc970
	void ServerSetVehicleWeaponTarget(VehicleShootWeapon* VehicleWeapon, const Vector TargetLoc);// 0x26fc86c
	void ServerSetUsingHorn(bool bUse);// 0x26fc7a4
	void ServerSetIsVehicleSpringArmAutoReturn(bool bEnalbed);// 0x26fc6dc
	void ServerSetEnableInputs(bool bEnable);// 0x26fc65c
	void ServerSetBoosting(bool bEnalbed);// 0x26fc594
	void ServerSetAirControlF(float Rate);// 0x26fc4e0
	void ServerSetAirControlB(float Rate);// 0x26fc42c
	void ServerMoveTo(bool bSetLocation, Vector NewLocation, bool bSetRotation, Rotator NewRotation);// 0x26fc2b4
	void SendVehicleInUnderWaterChangedTimeToServer();// 0x26fc258
	void SendVehicleInAirChangedTimeToServer();// 0x26fc1fc
	void SendTriggerEventToServer(VehicleTriggerComponent* VTComp);// 0x26fc148
	void SendClient_ForceUpdate_ControlRotationOnVehicle_SimulateViewData();// 0x26daab4
	void RPC_Client_SeekLockRocketExploded();// 0x26fc12c
	void ResetJoystickMove();// 0x26fc118
	void RemoveAntiStuckBox();// 0x26fc104
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x26fc08c
	void PrintStats();// 0x256b214
	void PostLoadMesh();// 0x26fc070
	void PlaySfxOneShot(AkAudioEvent* AkEvent);// 0x26fbff8
	void OnUpdateEffects();// 0x46f6b154
	void OnSetTailLightValue(float LightValue);// 0x46f6b154
	void OnRep_VehicleSyncFlag();// 0x26fbfe4
	void OnRep_VehicleSoundComp();// 0x26fbfd0
	void OnRep_VehicleHealthState();// 0x26fbfbc
	void OnRep_SimulateViewData();// 0x26fbfa8
	void OnRep_SimulateFreeCameraViewData();// 0x26fbf94
	void OnRep_ServerLastReplicatedServer();// 0x26fbf80
	void OnRep_IsVehicleSpringArmAutoReturn();// 0x26fbf6c
	void OnRep_IsEngineStarted();// 0x26fbf58
	void OnRep_IsBoosting();// 0x26fbf44
	void OnRep_IsAirdroppingVehicle();// 0x26fbf30
	void OnRep_FrozenStatic();// 0x26fbf1c
	void OnRep_CurrentVehicleStatesData(int OldVehicleStatesData);// 0x26fbea4
	void OnFreezeVehicleEvent();// 0x26da590
	void OnEngineStop();// 0x46f6b154
	void OnEngineStart();// 0x46f6b154
	void OnClassLoad_VehicleSoundComp(SoftObjectPath LoadClass);// 0x26fbdac
	void OnBoostingChanged();// 0x46f6b154
	void OnAnimListLoaded();// 0x26fbd90
	void MultiCast_ApplyImpulse(const Vector Origin, float DamageOuterRadius, float BaseMomentumMag);// 0x26fbc80
	void LoadPendantParticle();// 0x26fbc6c
	void K2_SetLinkedMeshConstraint(bool IsContraint);// 0x46f6b154
	SkeletalMeshComponent* K2_GetLinkedComp();// 0x46f6b154
	bool IsUsingFPPModel();// 0x26fbc44
	bool IsUCAV();// 0x26fbc1c
	bool IsUAV();// 0x26fbbec
	bool IsPassengerShouldPossesVehicle();// 0x26fbbbc
	bool IsNotInWater();// 0x266c3ac
	bool IsMotorbike();// 0x26fbb94
	bool IsInMidAir();// 0x26fbb64
	bool IsHelicopter();// 0x26fbb3c
	bool IsEntirelyUnderWater();// 0x26fbb14
	bool IsEnableInputs();// 0x26fbaec
	bool IsElectronic_Failure();// 0x26fbac4
	bool IsBattleship();// 0x26fba9c
	bool IsAutoDriving();// 0x26fba74
	bool IsArmedVehicle();// 0x26fba4c
	bool IsAmphibiousVehicle();// 0x26fba24
	bool IsAirVehicle();// 0x26fb9f4
	bool IsActiveEffect(FName EffectName);// 0x26fb974
	void InitVehicle(int FuelPercent, bool bEngineOn, bool bInHouse);// 0x26fb858
	bool HasVehicleStates(int ID, int srcVehicleStatesData);// 0x26fb794
	bool HasAutoDriveTarget();// 0x26fb76c
	void HandleSeekLockRocketExplodedOnServer();// 0x26fb750
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x26fb6d0
	void HandleOnVehicleAvatarDataCopied();// 0x26fb6bc
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x26fb5b4
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x26fb41c
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x26fb314
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x26f3434
	void HandleLocalPlayerLeaveVehicle(STExtraPlayerCharacter* Player);// 0x26fb294
	void HandleLocalPlayerEnterVehicle(STExtraPlayerCharacter* Player);// 0x26fb214
	void HandleLocalPlayerDeadth(STExtraBaseCharacter* Player);// 0x26fb19c
	int GetWheelNum();// 0x26fb174
	float GetWheelHP(int Index);// 0x26fb0f4
	VehicleShootWeapon* GetVehicleWeapon(int SeatID, int WeaponListID);// 0x26fb030
	float GetVehicleHPMax();// 0x26fb008
	float GetVehicleHP();// 0x26fafe0
	Vector GetVehicleCenter();// 0x26faf98
	VehicleAIComponent* GetVehicleAIComponent();// 0x26faf7c
	bool GetSeatState(int Index);// 0x26faefc
	int GetSeatNum();// 0x26faed4
	Vector GetRotationInputDir();// 0x26023c4
	BattleItemHandleBase* GetItemHandle();// 0x26faeb8
	float GetForwardSpeed();// 0x2690e4c
	bool GetEnableTickEnterSphereAsyncLoadRes();// 0x26fae9c
	STExtraPlayerCharacter* GetDriver();// 0x26fae74
	void GetCullWaterCapsule(out Vector OutCapsulePointA, out Vector OutCapsulePointB, out float OutCullWaterCapsuleRadius, out float OutCullWaterCapsuleBlendWidth);// 0x26facd0
	void GetAllVehicleWeaponList(out VehicleShootWeapon*[] OutList);// 0x26fac30
	void ExitFPPVehicle();// 0x26fac1c
	void EnterFPPVehicle();// 0x26fac08
	void DestroyVehicleSelf();// 0x26fabf4
	void DestroyAndRespawnSelf();// 0x26fabe0
	void DeactiveEffect(FName EffectName);// 0x26fab68
	void CreateAntiStuckBox();// 0x26fab54
	void ClearInputs();// 0x26fab40
	bool CheckNeedVehicleTick(float DeltaTime);// 0x26faac0
	bool CheckHaveSpecialAttachActor();// 0x265be84
	bool CanVehicleJump();// 0x269162c
	bool CanBeSeekAndLocked(SeekAndLockWeaponComponent* TargetComponent);// 0x26faa38
	bool CanAutoDrivingNoDriver();// 0x26faa10
	bool CanAutoDriving();// 0x26fa9e8
	void BroadCastEnterVehicleEvent(bool IsSucc);// 0x26fa968
	void BroadcastClientVehicleExplosionEffect();// 0x26da3a4
	void AutoLoadEffect();// 0x26fa954
	void AfterBeginPlay();// 0x46f6b154
	void ActiveEffectAsync(FName EffectName);// 0x26fa8dc
	void ActiveEffect(FName EffectName);// 0x26fa864

--------------------------------
Class: ParticleSoftWrapperArray
	ParticleSoftWrapper[] WrapperArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleSoftWrapper
	ParticleSystem* Template;//[Offset: 0x0, Size: 40]
	Vector Location;//[Offset: 0x28, Size: 12]
	Rotator Rotation;//[Offset: 0x34, Size: 12]
	Vector Scale;//[Offset: 0x40, Size: 12]
	FName AttachSocketName;//[Offset: 0x50, Size: 8]
	bool bAutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: ParticleRuntimeDataArray
	ParticleRuntimeData[] DataArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ParticleRuntimeData
	ParticleSystemComponent* SpawnedComponent;//[Offset: 0x0, Size: 4]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.ActorComponent.Object
	float VaildExitVehicleHeight;//[Offset: 0xd0, Size: 4]
	STExtraVehicleSeat[] Seats;//[Offset: 0xd4, Size: 12]
	STExtraPlayerCharacter*[] SeatOccupiers;//[Offset: 0xe0, Size: 12]
	STExtraVehicleWeaponsOnSeat[] VehicleWeapons;//[Offset: 0xec, Size: 12]
	STExtraVehicleAttachment[] VehicleAttachmentsConfig;//[Offset: 0xf8, Size: 12]
	VehicleAttachmentBase*[] VehicleAttachments;//[Offset: 0x104, Size: 12]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0x110, Size: 12]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0x11c, Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0x128, Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	float ExitVehicleCharacterCapsuleRadiusFix;//[Offset: 0x130, Size: 4]
	bool bDrawExitVehicleEnterPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	byte[] SeatGUITypes;//[Offset: 0x140, Size: 12]
	delegate OnSeatAttached;//[Offset: 0x14c, Size: 12]
	delegate OnSeatDetached;//[Offset: 0x158, Size: 12]
	delegate OnSeatChanged;//[Offset: 0x164, Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x170, Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x17c, Size: 12]
	delegate OnDriverChange;//[Offset: 0x188, Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x194, Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x1a0, Size: 4]
	STExtraPlayerController* RemoteController;//[Offset: 0x1a8, Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac, Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x1b0, Size: 4]
	bool RemoveVehicleWeapon(int SeatID, int WeaponIndex);// 0x27a4ee0
	void RefreshOccupyCharacterAnimIns(STExtraBaseCharacter* PlayerCharacter);// 0x27a4e68
	void ProcessPawnUseVehWeaponRotation(STExtraBaseCharacter* InChar, FName AttachSocketName);// 0x27a4dac
	void OnRep_VehicleWeapons();// 0x27a4d98
	void OnRep_Occupiers();// 0x27a4d84
	void OnRep_Attachments();// 0x27a4d70
	bool IsSeatIndexAvailable(int SeatIndex);// 0x27a4cf0
	bool IsSeatAvailableTeam(STExtraBaseCharacter* InCharacter);// 0x27a4c70
	bool IsSeatAvailable(enum SeatType);// 0x27a4bf0
	int GetSeatNum();// 0x27a4bd4
	bool GetPlayerSeatInfo(STExtraBaseCharacter* InPlayer, out STExtraVehicleSeat SeatInfo);// 0x27a49d0
	STExtraBaseCharacter* GetPassenger(int SeatIndex);// 0x27a4948
	int GetInUseSeatNum();// 0x27a4920
	STExtraPlayerCharacter* GetDriver();// 0x27a48f8
	int GetChracterSeatIndex(STExtraBaseCharacter* Character);// 0x27a4878
	void ClientSetLocalWeaponWillCtr(STExtraPlayerCharacter* Character, VehicleShootWeapon* VehShootWeapon);// 0x27a477c
	void ClientSetLeaveVehicleLocation(STExtraPlayerCharacter* Character, Vector LeaveLocation);// 0x27a46a8
	void ClientChangeSeatCameraData(STExtraPlayerCharacter* Character, int OldIndex, int NewIndex);// 0x27a4564
	bool AddVehicleWeaponFromSupportKit(int SeatID, int WeaponIndex, int weaponIndexSupport);// 0x27a445c

--------------------------------
Class: VehicleComponent.ActorComponent.Object

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0, Size: 1]
	FName AnimCompTagName;//[Offset: 0x8, Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10, Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18, Size: 8]
	byte OccupyMovementMode;//[Offset: 0x20, Size: 1]
	byte HoldWeaponType;//[Offset: 0x21, Size: 1]
	enum[] WeaponTypeNewAllowList;//[Offset: 0x24, Size: 12]
	byte SeatSpecialType;//[Offset: 0x30, Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	bool NarrowSeatNeedUseCommomAimAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32, Size: 1]
	int GUIDisplayIndex;//[Offset: 0x34, Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x38, Size: 4]
	bool bEnableYawLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	Vector2D ViewYawLimit;//[Offset: 0x40, Size: 8]
	Rotator CharRotVsVehiRot;//[Offset: 0x48, Size: 12]
	byte SeatSideType;//[Offset: 0x54, Size: 1]
	bool bEnableVehicleWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool bEnableUsedAsFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]
	bool bEnableChangeFreeFireSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 1]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfig;//[Offset: 0x58, Size: 12]
	STExtraVehicleWeaponConfig[] VehicleWeaponConfigSupport;//[Offset: 0x64, Size: 12]
	bool bDefaultControlWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	FName VehicleWeaponSeatSocket;//[Offset: 0x78, Size: 8]
	bool bAddDynamicCapsuleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	float Radius;//[Offset: 0x84, Size: 4]
	float HalfHeight;//[Offset: 0x88, Size: 4]
	Transform CollisionOffset;//[Offset: 0x90, Size: 48]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	Vector ExitVehicleEnterPositionFix;//[Offset: 0xc4, Size: 12]
	Vector GrenadeThrowRelativeLocation;//[Offset: 0xd0, Size: 12]
	FName SeatAnimInsSlotName;//[Offset: 0xe0, Size: 8]
	class AnimInstance* SeatAnimInstance;//[Offset: 0xe8, Size: 4]

--------------------------------
Class: STExtraVehicleWeaponConfig
	FName VehicleWeaponSocket;//[Offset: 0x0, Size: 8]
	class VehicleShootWeapon* VehicleWeaponClass;//[Offset: 0x8, Size: 4]
	Vector2D ViewYawLimit;//[Offset: 0xc, Size: 8]
	Vector2D ViewPitchLimit;//[Offset: 0x14, Size: 8]
	bool bEnableAimAtTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bVerifyMuzzleDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	float MuzzleDirTor;//[Offset: 0x20, Size: 4]
	bool bVerifyMuzzleLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float MuzzleVehicleTore;//[Offset: 0x28, Size: 4]
	bool bVerifyMuzzleBoxRanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	Box MuzzleRangeBox;//[Offset: 0x30, Size: 28]
	float DistTorSquared;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: VehicleShootWeapon.STExtraShootWeapon.STExtraWeapon.Actor.Object
	float RotateSpeedOnVehicle;//[Offset: 0xe14, Size: 4]
	bool bUseVehWeaponDisableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 1]
	bool bUseVehWeaponView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe19, Size: 1]
	bool bAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1a, Size: 1]
	FName VehWeaponBindSocket;//[Offset: 0xe20, Size: 8]
	CameraOffsetData VehWeaponViewCameraData;//[Offset: 0xe28, Size: 104]
	bool bNeedCalcMuzzleSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe90, Size: 1]
	FName OnBlockMuzzleSocket;//[Offset: 0xe98, Size: 8]
	AnimSequence* VehicleWeaponIdle;//[Offset: 0xea0, Size: 4]
	AnimSequence* VehicleWeaponReload;//[Offset: 0xea4, Size: 4]
	AnimSequence* VehicleWeaponUnuseIdle;//[Offset: 0xea8, Size: 4]
	float VehicleWeaponReloadRate;//[Offset: 0xeac, Size: 4]
	AnimMontage* VehicleWeaponFireMontage;//[Offset: 0xeb0, Size: 4]
	bool bVehicleWeaponUseHandIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb4, Size: 1]
	FName VehicleWeaponGripSocketR;//[Offset: 0xeb8, Size: 8]
	FName VehicleWeaponGripSocketL;//[Offset: 0xec0, Size: 8]
	bool bControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec8, Size: 1]
	bool bEnableControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec9, Size: 1]
	bool bEnableAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeca, Size: 1]
	bool bEnableFreeCameraWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecb, Size: 1]
	bool bEnableExitWeaponViewWhenReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecc, Size: 1]
	bool bEnableReturnBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedc, Size: 1]
	bool bEnableRotateCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedd, Size: 1]
	bool bEnableScopeAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xede, Size: 1]
	bool bAnimFollowCameraOnlyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee1, Size: 1]
	FName CharacterSocket;//[Offset: 0xee8, Size: 8]
	bool bEnableShowVehicleWeaponUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	bool bEnableShowControlButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef1, Size: 1]
	bool bEnableShowSlotUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef2, Size: 1]
	bool bEnableShowInterferenceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef3, Size: 1]
	bool bEnableShowCompass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef4, Size: 1]
	bool bUsePredictLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef5, Size: 1]
	class GrenadePredictLine* GrenadePredictLineClass;//[Offset: 0xef8, Size: 4]
	FName GrenadePredictLineSocket;//[Offset: 0xf00, Size: 8]
	GrenadePredictLine* GrenadePredictLine;//[Offset: 0xf08, Size: 4]
	bool bCanConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0c, Size: 1]
	float FuelConsumptionRate;//[Offset: 0xf10, Size: 4]
	int VehicleSeatIndex;//[Offset: 0xf18, Size: 4]
	int VehicleSlotIndex;//[Offset: 0xf1c, Size: 4]
	float StartReloadDelayTime;//[Offset: 0xf30, Size: 4]
	float EndReloadDelayTime;//[Offset: 0xf40, Size: 4]
	STExtraPlayerCharacter* RefSeatPlayer;//[Offset: 0xf44, Size: 4]
	bool bLocalUseWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf48, Size: 1]
	Actor* OwnerActor;//[Offset: 0xf4c, Size: 4]
	VehicleWeaponReconnectData RecData;//[Offset: 0xf50, Size: 12]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0xf5c, Size: 4]
	bool bEnableAimAtTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf62, Size: 1]
	int BulletTypeTipMsgID;//[Offset: 0xf6c, Size: 4]
	Rotator TargetDir;//[Offset: 0xf70, Size: 12]
	void StartReloadAnim();// 0x27a6ca8
	void SetUsePawnControlRotation(STExtraPlayerCharacter* Character, bool IsUse, bool IsThirdPerson);// 0x27a6b94
	void SetTarget(out const Vector TargetLocation);// 0x27a6b04
	void ServerUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x27a6a40
	void RefreshWeaponCameraAndUI();// 0x27a6a2c
	void OnVehicleExplode();// 0x27a6a10
	void OnRep_Reconnect();// 0x27a69fc
	void OnRep_OwnerActor();// 0x27a69e8
	void NetMulticastReturnBullets();// 0x27a698c
	void MulUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed, const WeaponSyncData SyncData);// 0x27a6830
	void K2_SetSpecialMeshHide(bool IsHide);// 0x46f6b154
	void K2_OnUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x46f6b154
	void K2_OnReturnBullets();// 0x46f6b154
	MeshComponent* K2_GetWeaponMeshComp();// 0x46f6b154
	void HnadleScopeInAfterReload(uint64 CurrentPawnState);// 0x27a67b4
	void HandleWeaponStateChanged(enum LastState, enum NewState);// 0x27a66f8
	void HandleWeaponStartReload();// 0x27a66e4
	void HandleWeaponEndReload();// 0x27a66d0
	void HandleEndTouchScreenInReloading(byte FingerIndex);// 0x27a6650
	void HandleBeginTouchScreenInReloading(out const Vector2D Loc);// 0x27a65cc
	STExtraPlayerCharacter* GetPlayerCharacter();// 0x27a65a4
	STExtraVehicleBase* GetOwnerVehicle();// 0x27a657c
	Rotator GetOwnerCameraRotator();// 0x27a6534
	Transform GetCharacterSocketTransform();// 0x27a64d4
	void DoUsedOrNot(STExtraPlayerCharacter* Character, bool bUsed);// 0x27a6410
	bool CheckIsAutonomousOrObTarget();// 0x27a63e8
	void AfterReloadEnd();// 0x27a63d4

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	float voiceCheckCD;//[Offset: 0x874, Size: 4]
	float voiceCheckShowCD;//[Offset: 0x878, Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	float voiceCheckLeaveTime;//[Offset: 0x880, Size: 4]
	Vector voiceCheckVector;//[Offset: 0x884, Size: 12]
	float voiceDelayTime;//[Offset: 0x890, Size: 4]
	bool isInVoiceDelayTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 1]
	bool IsVoiceCheckSlience;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x895, Size: 1]
	bool bHasFinishedLoadingBulletTrackSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x896, Size: 1]
	WeaponVerifyConfig ShootVerifyConfig;//[Offset: 0x898, Size: 76]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e4, Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e5, Size: 1]
	bool bUseFixShootIDGen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e6, Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x8e8, Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x8f4, Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x900, Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x90c, Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0x918, Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0x924, Size: 12]
	delegate OnWeaponShootCommonDelegate;//[Offset: 0x930, Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x93c, Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0x948, Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0x954, Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0x960, Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0x96c, Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0x978, Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0x984, Size: 12]
	delegate OnBulletHitDelegate;//[Offset: 0x990, Size: 12]
	delegate OnShootIntervalModeChangeDelegate;//[Offset: 0x99c, Size: 12]
	delegate OnShootWeaponAutoDrop;//[Offset: 0x9a8, Size: 12]
	delegate OnWeaponDropStart;//[Offset: 0x9b4, Size: 12]
	delegate OnWeaponDropFinished;//[Offset: 0x9c0, Size: 12]
	delegate OnScopeIn;//[Offset: 0x9cc, Size: 12]
	delegate OnScopeOut;//[Offset: 0x9d8, Size: 12]
	delegate OnScopeInContinue;//[Offset: 0x9e4, Size: 12]
	delegate OnMaxBulletChange;//[Offset: 0x9f0, Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0x9fc, Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0xa08, Size: 4]
	BulletTrackComponent* CachedBulletTrackComponent;//[Offset: 0xa0c, Size: 4]
	CrossHairComponent* CachedCrossHairComponent;//[Offset: 0xa10, Size: 4]
	BulletHitInfoUploadComponent* CachedBulletHitInfoUploadComponent;//[Offset: 0xa14, Size: 4]
	int CurBulletNumInClip;//[Offset: 0xa18, Size: 4]
	int CurMaxBulletNumInOneClip;//[Offset: 0xa1c, Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0xa20, Size: 4]
	byte ShootMode;//[Offset: 0xa24, Size: 1]
	byte CurShootType;//[Offset: 0xa25, Size: 1]
	int CurShootTotalType;//[Offset: 0xa28, Size: 4]
	float VoiceCheckDis;//[Offset: 0xa2c, Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0xa30, Size: 4]
	float nowVoiceCheckDis;//[Offset: 0xa34, Size: 4]
	Vector ShootTargetLoc;//[Offset: 0xa38, Size: 12]
	float DeviationScale;//[Offset: 0xa44, Size: 4]
	bool bUpdateAnimToAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 1]
	int AngledSightID;//[Offset: 0xa4c, Size: 4]
	byte TraceChannel;//[Offset: 0xa50, Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0xa54, Size: 12]
	float LastImpactEffectTime;//[Offset: 0xa60, Size: 4]
	int BurstShootBulletsNum;//[Offset: 0xa64, Size: 4]
	int CurBurstShootIndex;//[Offset: 0xa68, Size: 4]
	Transform BoltActionTransform;//[Offset: 0xa70, Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa0, Size: 1]
	int ClientShootTimes;//[Offset: 0xaa4, Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0xaa8, Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0xaac, Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0xab0, Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0xab4, Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0xab8, Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0xabc, Size: 4]
	Vector BulletDecalScale;//[Offset: 0xac0, Size: 12]
	int CurBulletNumInClipOnSimulatedClients;//[Offset: 0xacc, Size: 4]
	bool bWantsToFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad0, Size: 1]
	float CurAutoReloadCD;//[Offset: 0xad4, Size: 4]
	bool CurAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad8, Size: 1]
	bool bAutoDropWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad9, Size: 1]
	float DropDuration;//[Offset: 0xadc, Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0xae0, Size: 4]
	WeaponVisualBulletClientModeConfigNew BulletTrackSkinConfig;//[Offset: 0xae8, Size: 168]
	bool bEnableSwitchToGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 1]
	byte CurShootWeaponState;//[Offset: 0xb91, Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0xba0, Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0xba4, Size: 4]
	ShootWeaponAutoTestHandle* AutoTestHandle;//[Offset: 0xba8, Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0xbac, Size: 4]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb0, Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb1, Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb2, Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0xbb4, Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0xbc0, Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0xbcc, Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0xbd8, Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0xbe4, Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0xbf0, Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0xbfc, Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc08, Size: 1]
	Vector OffsetTrueFPPLocation;//[Offset: 0xc0c, Size: 12]
	Rotator OffsetTrueFPPRotation;//[Offset: 0xc18, Size: 12]
	Vector OffsetTrueFPPCrouchLocation;//[Offset: 0xc24, Size: 12]
	Rotator OffsetTrueFPPCrouchRotation;//[Offset: 0xc30, Size: 12]
	Vector OffsetTrueFPPProneLocation;//[Offset: 0xc3c, Size: 12]
	Rotator OffsetTrueFPPProneRotation;//[Offset: 0xc48, Size: 12]
	Rotator OffsetTrueFPPScopeRotation;//[Offset: 0xc54, Size: 12]
	bool bUseTrueFPPOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	enum[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0xc64, Size: 12]
	int[] AttachedAttachmentID;//[Offset: 0xc70, Size: 12]
	int[] DefaultAttachedAttachmentID;//[Offset: 0xc7c, Size: 12]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0xcb8, Size: 4]
	BulletHitInfoRepData[] BulletHitDataRepArray;//[Offset: 0xccc, Size: 12]
	float HitDataTimeOut;//[Offset: 0xce4, Size: 4]
	bool bNeedForceSyncSimulatedClientsBulletsNumAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 1]
	bool bIsInfiniteBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce9, Size: 1]
	enum CurShootIntervalMode;//[Offset: 0xcea, Size: 1]
	bool bEnableReloadADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe10, Size: 1]
	bool bCanAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe11, Size: 1]
	void UpdateComponentTick();// 0x26e27d8
	bool StopFireFilter();// 0x26e27a8
	void StopFire(enum ToState);// 0x26e2728
	int StartReload();// 0x26e26f8
	bool StartFireFilter();// 0x26e26c8
	void StartFire();// 0x26e26ac
	int StartDropWeapon();// 0x256aee4
	void StartDoPreBarrel(float HandledTime);// 0x2369de8
	void StartDoBarrel();// 0x23d3c38
	void ShowDefaultScope(bool bShow);// 0x26e262c
	void ShowDefaultAttachmentComponentByType(enum Type, bool bVisible);// 0x26e2568
	bool ShouldVerifyWeaponFireInfoTime();// 0x26e2538
	bool ShouldVerifyShootProjectileBullet();// 0x26e2508
	bool ShouldVerifyProjectileShootInf();// 0x26e24d8
	void SetIsInfiniteBulletNum(bool bEnable);// 0x26e2458
	void SetCurShootType(byte shootType);// 0x26e23e0
	void SetCurrentBulletNumInClipOnServer(int Count, bool bMulticastToClient);// 0x26e231c
	void SetCurrentBulletNumInClipOnClient(int Count);// 0x26e22a4
	void SetCurReloadMethod(byte method);// 0x26e222c
	void SetAvailableWeaponAttachmentSocketTypeList(out enum[] List);// 0x26e2148
	bool ScopeOut();// 0x26e2118
	void ScopeInContinue();// 0x26e2104
	bool ScopeIn();// 0x26e20d4
	void S2C_SyncAllClientsBulletsNum(int BulletsNum);// 0x26e2054
	void RPC_ClientSetCurShootType(byte shootType);// 0x26e1fa0
	void RPC_ClientSetCurReloadMethod(byte method);// 0x26e1eec
	void RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne(int RemainBulletNumToReload);// 0x26e1e6c
	void RPC_Client_SetBulletNumInClip(int Count);// 0x26e1db8
	void RotateCrossHair(Rotator Rot);// 0x26e1d48
	void ResetInitialBulletNumInClip(bool bSetZero);// 0x26e1cc8
	void RefreshDirtyBullet();// 0x26e1cb4
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x46f6b154
	void OnWeaponShootHitDelegate__DelegateSignature(out const ShootWeaponDamageEvent DamageDetail, out const BulletHitInfoUploadData HitData, out const LocalShootHitData LocalHitData);// 0x46f6b154
	void OnWeaponShootDelegate__DelegateSignature();// 0x46f6b154
	void OnWeaponShootCommonDelegate__DelegateSignature();// 0x46f6b154
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(Actor* InHitActor, out const SecurityLogHitTargetInfo TargetInfo);// 0x46f6b154
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x46f6b154
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x46f6b154
	void OnWeaponEquipDelegate__DelegateSignature();// 0x46f6b154
	void OnStopFireDelegate__DelegateSignature();// 0x46f6b154
	void OnStartFireDelegate__DelegateSignature();// 0x46f6b154
	void OnShootWeaponDrop__DelegateSignature();// 0x46f6b154
	void OnShootWeaponAutoReloadDelegate__DelegateSignature();// 0x46f6b154
	void OnShootWeaponAutoDrop__DelegateSignature();// 0x46f6b154
	void OnShootIntervalModeChangeDelegate__DelegateSignature();// 0x46f6b154
	void OnScopeOut__DelegateSignature();// 0x46f6b154
	void OnScopeInContinue__DelegateSignature();// 0x46f6b154
	void OnScopeIn__DelegateSignature();// 0x46f6b154
	void OnRep_RepWeaponID(int OldVar);// 0x23628fc
	void OnRep_OwnerClientCreateWeaponData();// 0x23caed4
	void OnRep_HitDataArray();// 0x26e1ca0
	void OnRep_CurShootType();// 0x26e1c8c
	void OnRep_CurMaxBulletNumChange();// 0x26e1c78
	void OnRep_CurCurShootIntervalMode();// 0x26e1c64
	void OnRep_CurBulletNumInClipOnSimulatedClients();// 0x26e1c50
	void OnRep_BulletTrackSkinConfig();// 0x26e1c3c
	void OnRep_bIsInfiniteBulletNum();// 0x26e1c28
	void OnMaxBulletChange__DelegateSignature();// 0x46f6b154
	void OnLeftLastBulletWhenReloadOneByOne__DelegateSignature(int RemainNum);// 0x46f6b154
	void OnCurBulletChange__DelegateSignature();// 0x46f6b154
	void OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x46f6b154
	void OnBulletNumChangeDelegate__DelegateSignature();// 0x46f6b154
	void OnBulletHitDelegate__DelegateSignature(Actor* InHitActor, float ImpactPosDistanceToWeapon, Pawn* Player);// 0x46f6b154
	void NotifyServerNoneShootAction();// 0x26e1bcc
	void NotifyLeftLastBulletWhenReloadOneByOneOnServer(int RemainBulletNumToReload);// 0x26e1b54
	void NotifyClientNoneShootAction();// 0x26e1af8
	void LocalSetBulletNumInClip(int Count);// 0x26e1a80
	bool IsVehicleWeapon();// 0x26e1a58
	bool IsInPreFire();// 0x26e1a30
	bool IsEnableReloadADS();// 0x26e1a14
	bool IsDriverVehicleWeapon();// 0x26e19ec
	void HandleWeaponScopeUnEquiped(enum Type);// 0x26e1974
	void HandleWeaponScopeEquiped(enum Type);// 0x26e18fc
	byte GetWeaponReloadType();// 0x26e18d4
	float GetWeaponReloadTimeNew(bool bForceTactical);// 0x26e1844
	int GetWeaponID();// 0x26e181c
	bool GetWeaponHasInfiniteBulletsFromEntity();// 0x26e17f4
	int GetWeaponEntityInitBulletInClip();// 0x26e17cc
	float GetWeaponBodyLength();// 0x26e17a4
	float GetWeaponAimFOV();// 0x26e177c
	Vector GetVolleyShootDirection(Vector TargetLoc, Vector OldStartLoc, Vector NewStartLoc, Vector BulletDir);// 0x26e15a4
	ParticleSystem* GetVisualBulletTrackFX();// 0x26e157c
	bool GetVisualBulletTrackEnabled();// 0x26e1554
	WeaponVisualBulletItemConfig GetVisualBulletItemConfig();// 0x26e1514
	float GetVerticalRecoilFactorModifier();// 0x26dff24
	FName GetVerifyScopeSocketNameFromEntity();// 0x26e14d4
	float GetTraceDistanceFromEntity();// 0x26e14ac
	FName GetSilencerSocketNameFromEntity();// 0x26e146c
	ShootWeaponEntity* GetShootWeaponEntityComponent();// 0x26e1444
	ShootWeaponEffectComponent* GetShootWeaponEffectComponent();// 0x26e141c
	byte GetShootTypeFromEntity();// 0x26e13f4
	int GetShootIntervalShowNumberFromEntity();// 0x26e13cc
	float GetShootIntervalFromEntity();// 0x26e13a4
	FName GetShellDropSocketNameFromEntity();// 0x26e1364
	int GetScopeID(bool bIsAngledOpticalSight);// 0x26e12dc
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex, bool bForceAngledSight);// 0x26e11c8
	MeshComponent* GetScopeAimCameraSecondScopeByType(FName SocketName, enum Type, int SocketIndex);// 0x26e10b8
	float GetReloadTimeMagOutFromEntity();// 0x26e1090
	float GetReloadTimeFromEntity();// 0x26e03ec
	FName GetReloadTIDName(byte method);// 0x26e1000
	float GetReloadTacticalTimeFromEntity();// 0x26e0fd8
	float GetReloadDurationStartFromEntity();// 0x26e0fb0
	float GetReloadDurationLoopFromEntity();// 0x26e0f88
	Transform GetRelativeMuzzleTransform();// 0x26e0f20
	float GetReferenceDistance();// 0x26e0ef8
	float GetRangeModifier();// 0x26e0ed0
	SRangeAttenuateConfig[] GetRangeAttenuateFromEntity();// 0x26e0e3c
	float GetPreFireTimeFromEntity();// 0x26e0e14
	float GetPostReloadTimeFromEntity();// 0x26e0dec
	float GetPostFireTimeFromEntity();// 0x26e0dc4
	Transform GetMuzzleTransform();// 0x26e0d5c
	FName GetMuzzleSocketNameFromEntity();// 0x26e0d14
	float GetMaxValidHitTimeFromEntity();// 0x26e0cec
	int GetMaxProjectileBulletsNumSingleShotFromEntity();// 0x26e0cc4
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x26e0c9c
	int GetMaxBulletNumInOneClipFromEntity();// 0x26e0c74
	int GetMaxBulletNumInBarrelFromEntity();// 0x26e0c4c
	int GetInitBulletNumInClipFromEntity();// 0x26e0c24
	float GetImpactEffectSkipDistanceFromEntity();// 0x26e0bfc
	float GetHorizontalRecoilFactorModifier();// 0x26dfe84
	float GetHitPartCoff_Limbs(bool bTargetIsMonster);// 0x26e0b6c
	float GetHitPartCoff_Head(bool bTargetIsMonster);// 0x26e0adc
	float GetHitPartCoff_Hand(bool bTargetIsMonster);// 0x26e0a4c
	float GetHitPartCoff_Foot(bool bTargetIsMonster);// 0x26e09bc
	float GetHitPartCoff_Body(bool bTargetIsMonster);// 0x26e092c
	WeaponHitPartCoff GetHitPartCoff(bool bTargetIsMonster);// 0x26e0890
	bool GetHasSingleFireMode();// 0x26e0868
	bool GetHasBurstFireMode();// 0x26e0840
	bool GetHasAutoFireMode();// 0x26e0818
	float GetGameDeviationFactor();// 0x26e07f0
	FName GetFiringSuppressorSocketNameFromEntity();// 0x26e07b0
	float GetFireSensitiveYawRate();// 0x26e0788
	float GetFireSensitivePitchRate();// 0x26e0760
	Vector GetFinalBulletLaunchPos(Vector InitMuzle, out const Vector InitMuzleDir, bool bNeedPullBackMuzzle);// 0x26e060c
	int GetExtraShootIntervalShowNumberFromEntity();// 0x26e05e4
	float GetExtraShootIntervalFromEntity();// 0x26e05bc
	float GetExtraRangeModifier();// 0x26e0594
	float GetDeviationFactorModifire();// 0x26e056c
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x26e04ec
	byte GetCurSightType();// 0x26e04c4
	enum GetCurShootIntervalMode();// 0x26e04a8
	int GetCurrentBulletNumInClip();// 0x26e048c
	float GetCurReloadTimeModifire();// 0x26e0464
	float GetCurReloadTimeMagOut();// 0x26e043c
	float GetCurReloadTimeMagIn();// 0x26e0414
	float GetCurReloadTime();// 0x26e03ec
	byte GetCurReloadMethod();// 0x26e03c4
	float GetCrossHairInitSize();// 0x26e039c
	float GetCrossHairBurstSpeed();// 0x26e0374
	float GetCrossHairBurstIncreaseSpeed();// 0x26e034c
	bool GetClipHasInfiniteBulletsFromEntity();// 0x26e0324
	MeshComponent* GetChildMeshComp(FName compTag);// 0x26e02a4
	float GetBurstShootIntervalFromEntity();// 0x26e027c
	float GetBurstShootCDFromEntity();// 0x26e0254
	int GetBurstShootBulletsNumFromEntity();// 0x26e022c
	ItemDefineID GetBulletTypeFromEntity();// 0x26e01e0
	float GetBulletRangeEntity();// 0x26e01b8
	int GetBulletNumSingleShotFromEntity();// 0x26e0190
	float GetBulletGravityModifier();// 0x26e0168
	float GetBulletGravityExtraOffset();// 0x26e0140
	float GetBulletFireSpeedFromEntity();// 0x26e0118
	float GetBaseImpactDamageEntity();// 0x26e00f0
	enum[] GetAvailableWeaponAttachmentSocketTypeList();// 0x26e0024
	int GetAvailableBulletsNumInBackpack(bool bAdjustInfiniteBullets);// 0x26dff9c
	bool GetAutoReloadFromEntity();// 0x26dff74
	bool GetADSManualStop();// 0x26dff4c
	float GetAccessoriesVRecoilFactorModifier();// 0x26dff24
	float GetAccessoriesVRecoilFactor();// 0x26dfefc
	float GetAccessoriesRecoveryFactor();// 0x26dfed4
	float GetAccessoriesHRecoilFactorModifier();// 0x26dfeac
	float GetAccessoriesHRecoilFactor();// 0x26dfe84
	float GetAccessoriesFinalDeviationFactor();// 0x26dfe5c
	float GetAccessoriesDeviationFactor();// 0x26dfe34
	float GetAccessoriesAllRecoilFactorModifier();// 0x26dfe0c
	void ForceSyncSimulatedClientsBulletsNumAfterReload(int InCurBulletNum);// 0x26dfd58
	void ForceSyncAllClientsBulletsNumOnServer();// 0x26dfd44
	void FixBulletNumWithValideData();// 0x26dfd30
	bool EnablePlayBoltAnimation();// 0x26dfd08
	void EnableInfiniteBullets(bool bEnable);// 0x26dfc88
	bool CheckShootVoiceDisValidOnReplay();// 0x26dfc58
	bool CheckShootEnviroment();// 0x26dfc28
	bool CheckServerNeedStopFire();// 0x26dfbf8
	bool CheckCanSimulateOBBulletTrack();// 0x26dfbc8
	void CheckAsyncLoadBulletTrackSkin(out const WeaponVisualBulletClientModeConfigNew Config);// 0x26dfa78
	bool CanSwitchToGrenade();// 0x26dfa5c
	void AsyncLoadBulletTrackSkinFinished();// 0x26dfa48

--------------------------------
Class: STExtraWeapon.Actor.Object
	Transform WeaponAttachMeshOffset;//[Offset: 0x300, Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x330, Size: 48]
	bool isFPPReloadUseAddSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	Transform FPPWeaponOffsetReload;//[Offset: 0x370, Size: 48]
	bool isFPPReloadUseSpecialOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x3b0, Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x3e0, Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x410, Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x440, Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x470, Size: 48]
	int CrossHairType;//[Offset: 0x4a0, Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x4a4, Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x4a8, Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x4b0, Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x4b8, Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x4bc, Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x4c8, Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x4d4, Size: 12]
	delegate OnWeaponChangeStateCommon;//[Offset: 0x4e0, Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x4ec, Size: 12]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x4f8, Size: 12]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x504, Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x510, Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x51c, Size: 12]
	delegate OnEquipOrUnEuipAttachmentDelegate;//[Offset: 0x528, Size: 12]
	delegate OnWeaponTriggerEventDelegate;//[Offset: 0x534, Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x540, Size: 4]
	enum CurFreshWeaponState;//[Offset: 0x544, Size: 1]
	enum SyncFreshWeaponStateForRep;//[Offset: 0x545, Size: 1]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x546, Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x547, Size: 1]
	int ReconnectOpIndex;//[Offset: 0x548, Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x550, Size: 88]
	Vector2D ClientScreenSize;//[Offset: 0x5a8, Size: 8]
	SceneComponent*[] UpdateOptimizationList;//[Offset: 0x5b0, Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	FName SpesificLogicGrenadeSlot;//[Offset: 0x5c0, Size: 8]
	enum[] AutoClientStateSyncDisableList;//[Offset: 0x5c8, Size: 12]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x5d8, Size: 104]
	int WeaponBeginPlayTimeStamp;//[Offset: 0x640, Size: 4]
	bool bPlayBackpackToIdleAnimWhenGet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 1]
	Actor* CustomEquipAttachActor;//[Offset: 0x648, Size: 4]
	int RepWeaponID;//[Offset: 0x64c, Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x650, Size: 24]
	FName LogicSocket;//[Offset: 0x668, Size: 8]
	FName AttachSocket;//[Offset: 0x670, Size: 8]
	byte SurviveWeaponPropSlot;//[Offset: 0x678, Size: 1]
	WeaponTriggerEventHandleSkill* SkillHandleComp;//[Offset: 0x67c, Size: 4]
	float PostFireHandledTime;//[Offset: 0x680, Size: 4]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x684, Size: 4]
	byte CurWeaponState;//[Offset: 0x688, Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x68c, Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x690, Size: 4]
	WeaponEffectComponent* WeaponEffectComponent;//[Offset: 0x694, Size: 4]
	bool bWaitForReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	<SceneComponent*,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x69c, Size: 60]
	float UnMatchSyncStateInterval;//[Offset: 0x6dc, Size: 4]
	bool bNeedHandleCreateOnOwnerClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x6e4, Size: 4]
	UAECharAnimListCompBase* CachedUAECharAnimListCompBase;//[Offset: 0x6e8, Size: 4]
	float AIMinAttackDist;//[Offset: 0x6ec, Size: 4]
	float AIMaxAttackDist;//[Offset: 0x6f0, Size: 4]
	float AIAttackDist;//[Offset: 0x6f4, Size: 4]
	MeshSynData[] WeaponAvatarSyncData;//[Offset: 0x6f8, Size: 12]
	SceneComponent* CurAttachComponent;//[Offset: 0x704, Size: 4]
	bool bSimulatedClientInitStateFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	bool bNeedDisableWeaponAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x711, Size: 1]
	WeaponLogicBaseComponent*[] TickComponentList;//[Offset: 0x720, Size: 12]
	WeaponLogicBaseComponent*[] HandleExtraRelavanceCompList;//[Offset: 0x72c, Size: 12]
	bool EnableWeaponReloadAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	ActorComponent*[] CrossHairComps;//[Offset: 0x75c, Size: 12]
	byte WeaponUIType;//[Offset: 0x768, Size: 1]
	bool bForceHideBackpackWeaponBaseOnGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 1]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x850, Size: 4]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0x860, Size: 4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0x864, Size: 12]
	bool bChangeWeaponStateNotifyLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	enum LastWeaponStateCache;//[Offset: 0x871, Size: 1]
	bool WhetherCheckLockTakeOutWeapon();// 0x23fddbc
	void WeaponNotifyChangeStateDelegate__DelegateSignature(enum State);// 0x46f6b154
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x46f6b154
	void UpdateReconnectWeapon();// 0x27043cc
	void UpdateCreateWeapon();// 0x27043b8
	void TriggerWeaponEvent(enum Event);// 0x2704338
	void SetWeaponAttrModifierEnable(FString AttrModifierID, bool Enable);// 0x270425c
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);// 0x27041a8
	void RPC_ClientChangeFreshWeaponState(enum State);// 0x27040f4
	void RPC_Client_SetActorHiddenInGame(bool _bHidden);// 0x270406c
	bool ReceiveActorHiddenInGame(bool bNewHidden);// 0x46f6b154
	void ReAttachWeaponMeshWhenEquiped();// 0x2704058
	void PlayLocalShellDropFX();// 0x46f6b154
	void OnWeaponTriggerEventDelegate__DelegateSignature(enum Event);// 0x46f6b154
	void OnWeaponMeshLoadFinished(int SlotID, bool IsEquipped);// 0x2361770
	void OnWeaponDrawHUD__DelegateSignature(HUDWidgetBase* WeaponHudWidget, Canvas* Canvas);// 0x46f6b154
	void OnShootWeaponChangeStateDelegate__DelegateSignature(enum LastState, enum NewState);// 0x46f6b154
	void OnRep_WeaponReconnectReplicateData();// 0x2704044
	void OnRep_SyncFreshWeaponStateForRep();// 0x2704030
	void OnRep_SimulatedOwnerPawn();// 0x270401c
	void OnRep_SimulatedOwnerActor();// 0x2704008
	void OnRep_RepWeaponID(int OldVar);// 0x23628fc
	void OnRep_OwnerClientCreateWeaponData();// 0x23caed4
	void OnRep_bPlayBackpackToIdleAnimWhenGet();// 0x2703ff4
	void OnRep_AvatarMeshChanged();// 0x2703fe0
	void OnRep_AttachmentReplication();// 0x2510b44
	void OnReleaseTrigger();// 0x25b6730
	void OnRecoverOnClientDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x46f6b154
	void OnReconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x46f6b154
	void OnPushTrigger();// 0x23fe648
	void OnGetOwnerActorDelegate__DelegateSignature(Actor* OwnerActor);// 0x46f6b154
	void OnEquipOrUnEuipAttachmentDelegate__DelegateSignature(bool IsEquip, BackpackWeaponAttachHandle* attachHandle);// 0x46f6b154
	void OnDrop();// 0x2703fc4
	void OnDisconnectToClientOnServerDelegate__DelegateSignature(STExtraWeapon* Weapon);// 0x46f6b154
	void OnChangeWeaponStateNotify();// 0x2703fb0
	void NotifyServerChangeState(enum State);// 0x2703f38
	bool NeedPut2BackWhenDisUse();// 0x2703f08
	void LockChangeWeaponStateNotify(bool bLock, bool bFlushNotify);// 0x2703e38
	bool JudgeHasEquipedComponentSlot(byte Slot);// 0x2703db8
	bool IsLocalOrSpectorPlayer();// 0x2703d90
	bool HasComponentSlot(byte Slot);// 0x2703d10
	enum GetWeaponTypeNew();// 0x2703ce8
	StaticMeshComponent* GetWeaponStaticMeshComponent();// 0x2703cc0
	byte GetWeaponState();// 0x2703c80
	byte GetWeaponSlot();// 0x2703c58
	int GetWeaponSkillIndex();// 0x2703c30
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x2703c08
	enum GetWeaponOwnerObserverType();// 0x2703be0
	FString GetWeaponName();// 0x2703b4c
	MeshComponent* GetWeaponMeshComponent();// 0x2703b1c
	WeaponEntity* GetWeaponEntityComponent();// 0x2703af4
	WeaponEffectComponent* GetWeaponEffectComponent();// 0x2703acc
	FString GetWeaponDetailInfo();// 0x2703a38
	FName GetWeaponCollapseSocket();// 0x27039f0
	WeaponAttrModifyConfig[] GetWeaponAttrModifyConfigList();// 0x270391c
	FName GetWeaponAttachSocket();// 0x27038d4
	ItemDefineID GetWeaponAttachmentIDBySocketType(enum SocketType);// 0x2703840
	float GetSwitchFromIdleToBackpackTime(bool WithAnimAdjust);// 0x27037b8
	float GetSwitchFromBackpackToIdleTime(bool WithAnimAdjust);// 0x2703730
	float GetSwitchAnimPlayRate(bool bWantEquip, float AnimLength);// 0x2703660
	FString GetStaticMeshPath();// 0x27035cc
	FString GetSKMeshPath();// 0x2703538
	FString GetOwnerPlayerName();// 0x27034a4
	PlayerController* GetOwnerPlayerController();// 0x2703474
	Pawn* GetOwnerPawn();// 0x270344c
	FString GetOwnerName();// 0x27033b8
	Controller* GetOwnerController();// 0x2703388
	Actor* GetOwnerActor();// 0x2703358
	ItemDefineID GetItemDefineID();// 0x270330c
	WeaponComponentItemData GetComponentSlotTarget(byte Slot);// 0x2703100
	LinearColor GetColorByTeamID(int TeamID);// 0x46f6b154
	ItemHandleBase* GetBackpackItemHandle();// 0x27030d8
	WeaponAttachmentSlot[] GetAvailableWeaponAttachment();// 0x2703044
	void DoDisableWeaponAnim();// 0x2703030
	void DettachWeaponForSomeTimeThenAttachBackFinish();// 0x270301c
	void CreateSkillHandleCompAfterCreateWeaponHandleCallback(ItemDefineID DefineID, BattleItemHandleBase* BattleItemHandle);// 0x2702f48
	void ClearWeaponAttrModifier();// 0x2702f34
	bool CheckWeaponMainMeshLoadFinished();// 0x2702f0c
	void CheckReparentWeaponCustomMesh();// 0x2702ef8
	void ChangeSequenceState(enum StateType);// 0x2702e78
	bool BlueprintSetWeaponAttrModifierEnable(FString AttrModifierID, bool bNewEnable);// 0x46f6b154
	bool BlueprintClearWeaponAttrModifier();// 0x46f6b154

--------------------------------
Class: WeaponVerifyConfig
	int VerifyIgnoreType;//[Offset: 0x0, Size: 4]
	bool bVerifySooterSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float ShooterMuzzleOffsetAdditional;//[Offset: 0x8, Size: 4]
	float ShooterMuzzleCircleAddit;//[Offset: 0xc, Size: 4]
	bool bUseCompressDataUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bUseZipWhileCompress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bVerifyAttachDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bForceAttach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	float MaxAttachDistanceHorizon;//[Offset: 0x14, Size: 4]
	float MaxAttachDistanceZ;//[Offset: 0x18, Size: 4]
	float MinAttachDistanceZ;//[Offset: 0x1c, Size: 4]
	float MaxGunRoot;//[Offset: 0x20, Size: 4]
	float MaxMuzzleGun;//[Offset: 0x24, Size: 4]
	float DistMuzzleGun;//[Offset: 0x28, Size: 4]
	float MuzzleHighCD;//[Offset: 0x2c, Size: 4]
	float AimFlyCD;//[Offset: 0x30, Size: 4]
	bool bVerifyRpgController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVerifyFakeTraceBock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float MaxBackTraceSize;//[Offset: 0x38, Size: 4]
	float MinKickBackPitch;//[Offset: 0x3c, Size: 4]
	float MinKickBackYaw;//[Offset: 0x40, Size: 4]
	float MaxDirChangeAreaEval;//[Offset: 0x44, Size: 4]
	bool bUseLegacyShootRateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: CameraOffsetData
	FName DataName;//[Offset: 0x0, Size: 8]
	FName[] ExclusionDataNames;//[Offset: 0x8, Size: 12]
	Vector RelativeLocationOffset;//[Offset: 0x14, Size: 12]
	Vector SocketOffset;//[Offset: 0x20, Size: 12]
	Vector TargetOffset;//[Offset: 0x2c, Size: 12]
	float TargetArmLength;//[Offset: 0x38, Size: 4]
	float SpringArmLength;//[Offset: 0x3c, Size: 4]
	float TargetArmLengthAdditiveOffset;//[Offset: 0x40, Size: 4]
	float FieldOfView;//[Offset: 0x44, Size: 4]
	float AdditiveOffsetFov;//[Offset: 0x48, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x4c, Size: 4]
	bool bDoCollisionTestModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bUsePawnControlRotationModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	bool bEnableCameraLagModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool bEnableCameraRotationLagModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 1]
	bool bCameraLagSpeedModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float CameraLagSpeed;//[Offset: 0x5c, Size: 4]
	enum OperateType;//[Offset: 0x60, Size: 1]

--------------------------------
Class: WeaponAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	delegate OnScopeEquipDelegate;//[Offset: 0x65c, Size: 12]
	delegate OnScopeUnEquipDelegate;//[Offset: 0x668, Size: 12]
	bool bIsEquipScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 1]
	delegate OnWeaponPartsEquipped;//[Offset: 0x678, Size: 12]
	BattleItemHandleBase* handleRecord;//[Offset: 0x684, Size: 4]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x68c, Size: 60]
	MeshSynData[] defaultSynData;//[Offset: 0x6cc, Size: 12]
	STExtraWeapon* OwnerWeapon;//[Offset: 0x6e8, Size: 4]
	PrimitiveComponent*[] meshComponentList_for_outline;//[Offset: 0x6ec, Size: 12]
	delegate OnSkinDefaultItemListLoaded;//[Offset: 0x6f8, Size: 16]
	int AsyncSkinDefaultItemLoadReqID;//[Offset: 0x708, Size: 4]
	bool bUseScopeSectionOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c, Size: 1]
	bool bPreCacheAutonomouseMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70d, Size: 1]
	bool ShouldDisplayByQuality(int SlotID);// 0x27c4f8c
	void SetPendantSocketType(enum SocketType);// 0x27c4f14
	void ResetAttachmentSocket();// 0x27c4f00
	void ResetAttachmentParent();// 0x27c4eec
	bool RePickItemHandle();// 0x27c4ec4
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* Handle);// 0x27c4e44
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x237e58c
	void RecreateMeshByHandle(BattleItemHandleBase* PendingRecreateHandle);// 0x27c4dcc
	void PutOnRefitMaterial(BattleItemHandleBase* refitMaterialHandle);// 0x27c4d54
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* weaponHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x27c4c44
	bool PutOnEquipmentByResID(int resID);// 0x237e504
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x237e3f4
	void PutOffRefitMaterial();// 0x27c4c30
	bool PutOffEquimentByResID(int resID);// 0x237e36c
	void PrepareRenderMaterialAssets(out WeaponMeshCfg meshPack, out SoftObjectPath[] MaterialAssets);// 0x27c49e4
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynData SyncData);// 0x27c48c8
	void OnWeaponPartsEquipEvent__DelegateSignature(int WeaponSlotID, bool IsEquipped);// 0x46f6b154
	void OnSkinDefaultItemHandleListLoaded(BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x27c47a0
	void OnScopeUnequipDelegate__DelegateSignature(enum AttachmentSocketType);// 0x46f6b154
	void OnScopeEquipDelegate__DelegateSignature(enum AttachmentSocketTypeD);// 0x46f6b154
	void OnMeshLoaded(SoftObjectPath AssetList, BattleItemHandleBase* ItemHandles, bool isReplaced);// 0x27c4614
	void OnItemHandleLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x27c4548
	void OnItemHandleListLoaded(BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x27c4420
	void OnDefaultItemLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x27c4354
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x237df74
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x237dd24
	bool LoadSkinDefaultMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x27c425c
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad);// 0x237dc50
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x237db50
	void LoadDefaultAttachmentsAsync();// 0x27c4248
	bool IsTeammate();// 0x237db20
	bool IsAutonomousAvatar();// 0x277be04
	void InitRefitAttachment(BattleItemHandleBase* weaponHandle);// 0x27c41d0
	void InitMasterComponent(MeshComponent* MasterComp);// 0x27c4150
	void InitialAvatarParam(int AGender);// 0x23fda24
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x237d834
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x237d7b4
	void InitDefaultAttachment(BattleItemHandleBase* weaponHandle);// 0x27c40d8
	BattleItemHandleBase* GetWeaponHandle();// 0x27c40b0
	Controller* GetWeaponController();// 0x27c4088
	STExtraWeapon* GetOwnerWeapon();// 0x27c4060
	STExtraBaseCharacter* GetOwnerCharacter();// 0x27c4038
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x237d450
	bool GetMeshPack(BattleItemHandleBase* Handle, out WeaponMeshCfg meshCfg);// 0x27c3e3c
	BattleItemHandleBase* GetEquippedHandle(int SlotID);// 0x237d014
	AvatarEntityFactory* GetEntityFactory();// 0x237ceb8
	byte GetCurSightType();// 0x27c3e14
	MeshComponent* GetAttachmentSocketTransform(int SlotID);// 0x279ba74
	AnimationAsset* GetAttachmentAnim(enum SlotID, int AnimIdx);// 0x27c3d50
	BattleItemHandleBase* GenerateAvatarHandle(int AvatarResID);// 0x27c3cd0
	BattleItemHandleBase* FetchReloadHandleFromSkinList(STExtraPlayerController* PC, BattleItemHandleBase* AttachmentInterface, BattleItemHandleBase* GunInterface);// 0x27c3bc8
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x237c6d0
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x237c650
	bool CheckSlotIsEquipped(int SlotID, bool bIncludingDefault);// 0x27c3afc
	void CheckScopeSectionOptVisibility(const bool InTargetVisibility);// 0x27c3a7c
	bool CheckIsResIDCompatibleWithMesh(int resID);// 0x27c39fc
	bool CheckIsAlreadyEquipped(ItemDefineID DefineID);// 0x27c396c
	bool ApplyStaticMeshByID(int Slot, StaticMesh* pSM, MaterialInstance* Mat, BattleItemHandleBase* Handle);// 0x237c3f8
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, MaterialInstance* Mat, BattleItemHandleBase* Handle);// 0x237c2a0
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* meshComp);// 0x237c08c
	void ApplyAttachment(BattleItemHandleBase* attachHandle);// 0x27c38f4
	void ApplyAnimation(int Slot, BattleItemHandleBase* Handle);// 0x27c3838

--------------------------------
Class: AvatarComponent.SceneComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x240, Size: 4]
	FName SkinWeightProfileName;//[Offset: 0x248, Size: 8]
	<enum> RegisteredUseSkinWeightProfileState;//[Offset: 0x250, Size: 60]
	<FName> RegisteredUseSkinWeightProfileState_IgnoreHandle;//[Offset: 0x28c, Size: 60]
	<int,SkinWeightProfileStates> Slot_UseSkinWeightProfileStatus_Map;//[Offset: 0x2c8, Size: 60]
	<int,MeshComponent*> meshComponentList;//[Offset: 0x304, Size: 60]
	<int,FName> slotToSocket;//[Offset: 0x340, Size: 60]
	<enum,MeshData> DefaultAvataConfig;//[Offset: 0x37c, Size: 60]
	<int,BattleItemHandleBase*> loadedItemList;//[Offset: 0x3b8, Size: 60]
	int Gender;//[Offset: 0x3f4, Size: 4]
	bool IsNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool ForceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	<SoftObjectPath,BattleItemHandleBase*> PendingLoadRes;//[Offset: 0x3fc, Size: 60]
	delegate OnAvatarEquipped;//[Offset: 0x438, Size: 12]
	delegate OnAvatarEquippedWithPath;//[Offset: 0x444, Size: 12]
	delegate OnAvatarMeshChangedEvent;//[Offset: 0x450, Size: 12]
	delegate OnAvatarAsyncLoadingFinished;//[Offset: 0x45c, Size: 12]
	delegate OnAllAvatarRenderFinished;//[Offset: 0x468, Size: 12]
	AvatarEntity*[] EntityTickList;//[Offset: 0x474, Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	delegate OnItemLoaded;//[Offset: 0x488, Size: 16]
	delegate OnItemListLoaded;//[Offset: 0x498, Size: 16]
	AvatarStreamableHandler[] StreamableHandles;//[Offset: 0x4a8, Size: 12]
	<int,AvatarEntity*> AvatarEntityList;//[Offset: 0x4bc, Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x4f8, Size: 4]
	<int,AsyncLoadMeshResReq> PendingLoadMeshRequestList;//[Offset: 0x4fc, Size: 60]
	<MaterialInterface*,MaterialInterface*> BaseMatMapping;//[Offset: 0x538, Size: 60]
	<MaterialInterface*,MaterialInterface*> MatInstanceMapping;//[Offset: 0x574, Size: 60]
	enum DisplayQuality;//[Offset: 0x5b1, Size: 1]
	SoftObjectPath[] LoadedPath;//[Offset: 0x5b4, Size: 12]
	class AvatarModule[] AvatarModuleTemplates;//[Offset: 0x5cc, Size: 12]
	<enum,AvatarModule*> AvatarModules;//[Offset: 0x5d8, Size: 60]
	<int,bool> AvatarOuterVisibilities;//[Offset: 0x620, Size: 60]
	void ShowAttachmentByIndex(int Index, bool bIsVisible);// 0x237ebb8
	bool SetupOnReadyPak(int resID);// 0x237eb38
	void SetDisplayQuality(enum Quality);// 0x237eac4
	MaterialInterface* SetByPassSystemQuality(MaterialInterface* matBase, MaterialInstance* matOrigion);// 0x237ea00
	void SetAvatarOuterVisiblity(int SlotID, bool IsVisible);// 0x2361770
	bool ResetSkinWeightProfileByHandle(int Slot, BattleItemHandleBase* Handle, SkeletalMeshComponent* TargetComp);// 0x237e8f8
	bool ResetSkinWeightProfile(int Slot, out SkinWeightProfileStates states);// 0x237e7cc
	void ResetComponentMaster();// 0x237e7b8
	void ResetAllAvataSlot();// 0x237e7a4
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x237e71c
	bool ReleaseMeshResourceMaterial(MeshComponent* meshComp, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x237e614
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x237e58c
	bool PutOnEquipmentByResID(int resID);// 0x237e504
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x237e3f4
	bool PutOffEquimentByResID(int resID);// 0x237e36c
	bool PutOffEquiment(int Slot);// 0x237e2ec
	void OnTriggerOutline();// 0x237e2d8
	void OnAsyncLoadRes(SoftObjectPath AssetRef, MeshComponent* meshComp, int MatIdx);// 0x237e158
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x237df74
	void OnAsyncLoadMesh(SoftObjectPath AssetRef, bool isReplaced);// 0x237de2c
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x237dd24
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad);// 0x237dc50
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x237db50
	bool IsTeammate();// 0x237db20
	bool IsTeamAthleticsMode();// 0x237daf8
	bool IsStandAloneMode();// 0x237dad0
	bool IsSlotHasEquipped(int Slot);// 0x237da50
	bool IsRunOnServer();// 0x237da28
	bool IsNeedReplaced(BackpackAvatarHandle* DoReplaceHandle);// 0x237d9a0
	bool IsMale();// 0x237d96c
	bool IsConsiderAnimHiddenByLOD(int InSlotID);// 0x237d8e4
	bool IsClientMode();// 0x237d8c8
	void InitializeAvatarModules();// 0x237d8b4
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x237d834
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x237d7b4
	StaticMesh* GetStaticMesh_BP(out MeshPackage meshPack);// 0x237d680
	SkeletalMesh* GetSkeletalMesh_BP(out MeshPackage meshPack);// 0x237d54c
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x237d450
	void GetMeshComponentList(out MeshComponent*[] MeshCompList, bool IncludingMaster);// 0x237d360
	MeshComponent* GetMeshCompBySlotID(int SlotID, bool IncludingMaster);// 0x237d294
	MeshComponent* GetMeshCompBySlot(enum SlotType, bool IncludingMaster);// 0x237d1c8
	MaterialInstance* GetMaterial_BP(out MeshPackage meshPack);// 0x237d094
	BattleItemHandleBase* GetLoadedHandleBase(int SlotID);// 0x237d014
	bool GetEquipmentMeshBySlot(int Slot, out MeshData meshPack);// 0x237cee8
	AvatarEntityFactory* GetEntityFactory();// 0x237ceb8
	enum GetDisplayQuality();// 0x237ce9c
	<MaterialInterface*,MaterialInterface*> GetBaseMatMapping();// 0x237cdc8
	static enum GetAvatarSlotTypeFromInt(int SlotTypeValue);// 0x237cd50
	bool GetAvatarOuterVisiblity(int SlotID);// 0x237ccc8
	AvatarModule* GetAvatarModule(enum ModuleType);// 0x237cbcc
	int GetAvatarGender();// 0x237cba4
	<int,AvatarEntity*> GetAvatarEntityList();// 0x237cb74
	AvatarEntity* GetAvatarEntity(int SlotID, FName Option, int SubSlotID);// 0x237ca6c
	enum GetApplyMeshType(int Slot, SkeletalMesh* SelfMesh);// 0x237c9a0
	void DrawOutlineEffect(bool Enable, int SlotID);// 0x237c8d8
	void DestroyMeshComponent(int SlotID);// 0x237c860
	AvatarEntity* CreateAvatarEntity(int SlotID, int SubSlotID);// 0x237c79c
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x237c6d0
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x237c650
	bool CheckIfAvatarPakDownloaded(BattleItemHandleBase* ItemHandle);// 0x237c5c8
	void AutoPutOnEquipmentByResID(int resID);// 0x237c550
	bool ApplyStaticMeshByID(int Slot, StaticMesh* pSM, MaterialInstance* Mat, BattleItemHandleBase* Handle);// 0x237c3f8
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, MaterialInstance* Mat, BattleItemHandleBase* Handle);// 0x237c2a0
	void ApplyMesh(MeshComponent* Component, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh, bool ReinitPose);// 0x237c150
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* meshComp);// 0x237c08c

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x98, Size: 12]
	float UnitWeight;//[Offset: 0xa4, Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa, Size: 1]
	bool CanBeClientHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab, Size: 1]
	bool IsNeedRepDefinedID();// 0x23f3158
	bool HanldeCleared();// 0x24da380
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x239628c
	bool HandleTryDisuse(enum Reason);// 0x28724a8
	bool HandleTake(int TakeCount, int TotalCount);// 0x28723dc
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x2395fc0
	bool HandleEnable(bool bEnable);// 0x2395f30
	bool HandleDrop(int InCount, enum Reason);// 0x2395e64
	bool HandleDisuse(enum Reason);// 0x2395ddc
	World* GetWorldInternal();// 0x28723ac
	ItemDefineID GetReadyPakItemDefineID();// 0x23afc00
	BattleItemData ExtractItemData();// 0x23972a0

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x1c, Size: 4]
	int MaxCount;//[Offset: 0x20, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x2c, Size: 60]
	ItemAssociation[] WeakAssociate;//[Offset: 0x68, Size: 12]
	ItemDefineID DefineID;//[Offset: 0x78, Size: 24]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x2878b68
	void RemoveWeakAssociation(ItemAssociation ItemAss);// 0x2878ab8
	void RemoveAssociation(FName Name);// 0x2878a40
	void Init(ItemDefineID InDefineID);// 0x28789b0
	ItemAssociation[] GetWeakAssociationList();// 0x287891c
	ItemAssociation GetWeakAssociation(int AssIdx);// 0x2878880
	ItemDefineID GetDefineID();// 0x287883c
	<FName,ItemAssociation> GetAssociationMap();// 0x287880c
	ItemAssociation[] GetAssociationListByTargetType(int Type);// 0x2878730
	ItemAssociation GetAssociationByTargetDefineID(ItemDefineID TargetDefineID);// 0x2878684
	ItemAssociation GetAssociation(FName Name);// 0x28785e4
	void AddWeakAssociation(ItemAssociation Association);// 0x2878534
	void AddAssociation(FName Name, ItemAssociation Association);// 0x287842c

--------------------------------
Class: BattleItemAdditionalData
	FName Name;//[Offset: 0x0, Size: 8]
	float FloatData;//[Offset: 0x8, Size: 4]
	FString StringData;//[Offset: 0xc, Size: 12]
	int IntData;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0, Size: 4]
	int TypeSpecificID;//[Offset: 0x4, Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	uint64 InstanceID;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0, Size: 24]
	FName TargetAssociationName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8, Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18, Size: 32]
	bool bTriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x40, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	bool bCanBeClientHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x48, Size: 12]
	BattleItemFeatureData FeatureData;//[Offset: 0x54, Size: 24]
	ItemAssociation[] Associations;//[Offset: 0x6c, Size: 12]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	FString Name;//[Offset: 0x18, Size: 12]
	FString Desc;//[Offset: 0x24, Size: 12]
	FString Icon;//[Offset: 0x30, Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0, Size: 4]
	int MaxCount;//[Offset: 0x4, Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int SortingPriority;//[Offset: 0x10, Size: 4]
	int ItemType;//[Offset: 0x14, Size: 4]

--------------------------------
Class: HandleMeshPack
	BattleItemHandleBase* Handle;//[Offset: 0x0, Size: 4]
	WeaponMeshCfg meshCfg;//[Offset: 0x8, Size: 344]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28, Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50, Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78, Size: 40]
	bool bOpUpdateTramsform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	MaterialInterface* MeshMat;//[Offset: 0xa8, Size: 40]
	<FName,float> MeshMatParams;//[Offset: 0xd0, Size: 60]
	MaterialInterface* baseMat;//[Offset: 0x10c, Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0x110, Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x138, Size: 12]
	UIWidgetRes[] WidgetList;//[Offset: 0x144, Size: 12]
	enum meshType;//[Offset: 0x150, Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0, Size: 4]
	FName AttachSocket;//[Offset: 0x8, Size: 8]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector2D DrawSize;//[Offset: 0x40, Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	int Gender;//[Offset: 0x18, Size: 4]
	enum OperationType;//[Offset: 0x1c, Size: 1]
	SyncAdditionDataArray SynAdditionalData;//[Offset: 0x20, Size: 12]
	int VersionNum;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: SyncAdditionDataArray
	SyncAdditionData[] AddiDataArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SyncAdditionData
	FName Name;//[Offset: 0x0, Size: 8]
	float FloatData;//[Offset: 0x8, Size: 4]
	FString StringData;//[Offset: 0xc, Size: 12]
	int IntData;//[Offset: 0x18, Size: 4]
	int Priority;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SkinWeightProfileStates
	enum[] states;//[Offset: 0x0, Size: 12]
	enum[] UseSWPStates;//[Offset: 0xc, Size: 12]
	bool LobbyIgnore_SkirtPose_Lobby_Paragliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool LobbyIgnore_Fashion_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	<enum> CurHasSkinWeightReasons;//[Offset: 0x1c, Size: 60]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4, Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8, Size: 4]
	MaterialInstance*[] additionalMats;//[Offset: 0xc, Size: 12]
	enum meshType;//[Offset: 0x18, Size: 1]
	int[] hiddenBy;//[Offset: 0x1c, Size: 12]
	int[] doHiddenSlots;//[Offset: 0x28, Size: 12]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x34, Size: 12]
	ReplacedSlotInfo materialReplacedBy;//[Offset: 0x40, Size: 8]
	HideBoneData[] hideBoneSlots;//[Offset: 0x48, Size: 12]
	ItemDefineID definedID;//[Offset: 0x58, Size: 24]
	enum subSlot;//[Offset: 0x70, Size: 1]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c, Size: 4]
	int SubSlotID;//[Offset: 0x20, Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24, Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28, Size: 4]
	AvatarComponent* AvatarComponent;//[Offset: 0x2c, Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30, Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38, Size: 120]
	MeshData CachedEntityMeshData;//[Offset: 0xb0, Size: 120]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 1]
	class Object* CachedAnimClass;//[Offset: 0x12c, Size: 4]
	FName SocketName;//[Offset: 0x130, Size: 8]
	SyncAdditionDataArray SavedAddData;//[Offset: 0x138, Size: 12]
	ParticleSystemComponent*[] ParticleComponents;//[Offset: 0x144, Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x150, Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x168, Size: 24]
	<FString,AvatarEntity*> SubEntityList;//[Offset: 0x180, Size: 60]
	void UpdateVisibility();// 0x2385398
	void UnRegisterTick();// 0x238537c
	void TickEntity(float DeltaTime);// 0x236c3f0
	void SetSocketName();// 0x2385360
	void SetParentDefineID(ItemDefineID ParentID);// 0x23852d4
	void SetAvatarVisibility(bool visibie, bool IsForCE);// 0x23851fc
	void SetAvatarEntityParticleVisibility(bool visibie);// 0x2385174
	void SetAdditionalData(SyncAdditionDataArray SyncData);// 0x2384f88
	void RevertEntityMeshData();// 0x2384f74
	void ResetEntityBeforePushToPool(bool DisableCheck);// 0x2384eec
	void RenderEntity(out SoftObjectPath SoftPath);// 0x2384e3c
	void RegisterTick();// 0x2384e20
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x2384d98
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x2384d10
	void PutOnDefaultEquipment(enum SlotType);// 0x2384c90
	void ParseAdditionalItem(SyncAdditionDataArray AddData);// 0x2384a90
	void OnPreRender();// 0x2384a74
	void OnPostRender();// 0x2384a58
	bool IsEntityAvailable(enum VisibilityType);// 0x23849d0
	bool IsAnimHiddenByLODEnable();// 0x23849a0
	bool IsAnimHiddenByLOD();// 0x2384970
	CustomWidgetComponent* InitWidgetComponent(class Object WidgetClass, FName WidgetName);// 0x23848a4
	void Init(int SlotID, int SubSlotID, AvatarComponent* AvatarComponent);// 0x238479c
	PhysicsAsset* GetRigidBodyAnimOverridePhysicsAsset(const int InGender);// 0x238471c
	enum GetMeshType(SkeletalMesh* SelfMesh);// 0x2384694
	MeshData GetMeshData();// 0x23845fc
	BattleItemHandleBase* GetLoadedHandle();// 0x23845d4
	ItemDefineID GetDefineID();// 0x2384580
	SyncAdditionDataArray GetAdditionalData();// 0x2384490
	void EnterRenderPipeline();// 0x2384474
	void EnterLogicPipeline();// 0x2384458
	void DrawOutline(bool bEnable);// 0x23843d0
	void DestoryRenderRes(int CurrSlotID);// 0x2384350
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x2384298
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x23841cc
	void ClearEquipmentLogic(bool putDefault);// 0x2384144
	bool ClearEquipedMeshWhenRepeatPutOn();// 0x2384114
	void ClearEntity(bool ForceClear);// 0x238408c
	void ApplyAnimation();// 0x2384070

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x640, Size: 4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x644, Size: 4]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x648, Size: 4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x64c, Size: 4]
	void SetupAttachMeshComponent(MeshComponent* meshComp, FName AttachSocket, out const Transform RelativeTrans);// 0x2433670
	Actor* GetBindOwner();// 0x243364c
	MeshComponent* GetAttachedMeshComponent();// 0x2433630
	void CreateParticle(ParticleSystem* ParticleRes, MeshComponent* meshComp, FName SocketName, out const Transform RelativeTrans);// 0x2433480
	void BindOwner(Actor* Owner);// 0x2433400
	void BindEvent(bool bShowWidget);// 0x2433378

--------------------------------
Class: AvatarStreamableHandler

--------------------------------
Class: AvatarEntityFactory.Object
	AvatarEntity* GetEntityByClass(int SlotID, int SubSlotID);// 0x23861bc
	AvatarEntity* CreateEntity(int SlotID, int SubSlotID);// 0x23860f0

--------------------------------
Class: AsyncLoadMeshResReq
	SoftObjectPath[] MeshResList;//[Offset: 0x0, Size: 12]
	BattleItemHandleBase*[] AvatarHandleList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AvatarModule.Object
	AvatarComponent* AvatarComp;//[Offset: 0x20, Size: 4]
	void SetModuleType(enum inType);// 0x23880e8
	enum GetModuleType();// 0x23880cc
	AvatarComponent* GetAvatarComp();// 0x23880b0

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemSkillsConfig[] SkillsConfig;//[Offset: 0xb8, Size: 12]
	SkillCoverConfig[] SkillsCoverConfig;//[Offset: 0xc4, Size: 12]
	bool EnableLobbyAvatarExtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	ExtraDamageReduceCfg ExtraDamageReduceCfg;//[Offset: 0xd4, Size: 24]
	enum SlotID;//[Offset: 0xec, Size: 1]
	enum subSlot;//[Offset: 0xed, Size: 1]
	enum avatarVisiblityType;//[Offset: 0xee, Size: 1]
	bool bUseAvatarSwitchLODTickOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 1]
	MeshPackage meshPack;//[Offset: 0xf0, Size: 672]
	MeshPackage replacedMeshPack;//[Offset: 0x390, Size: 672]
	enum[] hiddenFlags;//[Offset: 0x630, Size: 12]
	enum[] femaleHiddenFlags;//[Offset: 0x63c, Size: 12]
	enum[] replaceFlags;//[Offset: 0x648, Size: 12]
	enum[] femaleReplaceFlags;//[Offset: 0x654, Size: 12]
	enum[] ignoreFlags;//[Offset: 0x660, Size: 12]
	BackpackComponent* pBackpackComp;//[Offset: 0x66c, Size: 4]
	int itemCapacity;//[Offset: 0x670, Size: 4]
	int Durability;//[Offset: 0x674, Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x680, Size: 36]
	enum hideBoneSlot;//[Offset: 0x6a4, Size: 1]
	FName hideBoneName;//[Offset: 0x6a8, Size: 8]
	enum hatMeshType;//[Offset: 0x6b0, Size: 1]
	AvatarPendantConfig[] PendantConfigList;//[Offset: 0x6b4, Size: 12]
	<int,AvatarPendantConfig_SpecialParam> PendantSpecialConfigMap;//[Offset: 0x6c0, Size: 60]
	int DefaultExtendPendantID;//[Offset: 0x6fc, Size: 4]
	byte PendantTargetGender;//[Offset: 0x700, Size: 1]
	int PendantConfigIndex;//[Offset: 0x704, Size: 4]
	enum PendantSlotForMale;//[Offset: 0x708, Size: 1]
	FName PendantSocketForMale;//[Offset: 0x710, Size: 8]
	enum PendantSlotForFemale;//[Offset: 0x718, Size: 1]
	FName PendantSocketForFemale;//[Offset: 0x720, Size: 8]
	bool ForceIgnoreSlotSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool FemaleForceIgnoreSlotSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	AdditionalItem[] AdditionalItems;//[Offset: 0x72c, Size: 12]
	NotifySoundModifiedItem[] NotifySoundModifiedItems;//[Offset: 0x738, Size: 12]
	AvatarAnimOverrideData[] CharacterAnimListOverrideList;//[Offset: 0x744, Size: 12]
	byte CharacterAnimOverrideType;//[Offset: 0x750, Size: 1]
	ComparePriority ComparePriority;//[Offset: 0x754, Size: 8]
	int Priority;//[Offset: 0x75c, Size: 4]
	SyncAdditionData[] AdditionalDataList;//[Offset: 0x760, Size: 12]
	MatCutExcludeItem[] MatCutExcludeList;//[Offset: 0x76c, Size: 12]
	bool ConsiderPawnFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	SkinWeightProfileConfig SkinWeightProfileConfig;//[Offset: 0x77c, Size: 28]
	SkinWeightProfileConfig SkinWeightProfileConfig_Male;//[Offset: 0x798, Size: 28]
	bool bAllowBakeMeshOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4, Size: 1]
	void RemoveSkillsAfterDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int KillingHitDamageTypeID, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x23966d4
	void RemoveSkills();// 0x23966c0
	void OnCharacterAttrChangedWithDetailEvent(Actor* Owner, FString AttrName, float deltaVal, float resultVal);// 0x2396560
	bool IsVirtualAvatarHandle();// 0x2396530
	bool IsNamedSlotMatCutExclude(out const FName InSlotName, const byte InCameraMode, STExtraBaseCharacter* Owner);// 0x2396410
	bool IsForceIgnoreSlotSocket(bool IsMaleGender);// 0x2396380
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x239628c
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x2395fc0
	bool HandleEnable(bool bEnable);// 0x2395f30
	bool HandleDrop(int InCount, enum Reason);// 0x2395e64
	bool HandleDisuse(enum Reason);// 0x2395ddc
	int GetSubSlotID();// 0x2395dac
	FString GetStaticMesh(bool IsMale);// 0x2395cc8
	int GetSlotID();// 0x2395c98
	ItemSkillsConfig[] GetSkillTemplates_Implementation();// 0x2395ba8
	FString GetSkeletalMesh(bool IsAutonomous, bool IsMale);// 0x2395a74
	enum[] GetReplaceFlags(bool IsMale);// 0x2395990
	BackpackComponent* GetBackpackComponent();// 0x2395968
	bool CompareCutPriority(BackpackAvatarHandle* AvatarHandle);// 0x23958e8
	bool CheckCanPickUp(CharacterAvatarComponent* AvatarComp, int nowCapcity, enum Reason);// 0x23957e0
	bool CanAddSkill();// 0x23957b0
	void AddSkills();// 0x239579c
	void AddAdditionalEffect(bool AddEffect);// 0x239571c

--------------------------------
Class: ItemSkillsConfig
	class UTSkill* SkillTemplateClass;//[Offset: 0x0, Size: 40]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bImmediatelyRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: UTSkill.Actor.Object
	bool bNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	FString SkillName;//[Offset: 0x2f0, Size: 12]
	FName SkillGroup;//[Offset: 0x300, Size: 8]
	enum[] SkillTypes;//[Offset: 0x308, Size: 12]
	bool bSinglePhaseRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	bool bOBResimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315, Size: 1]
	enum SkillCastType;//[Offset: 0x316, Size: 1]
	bool bShouldMonopolize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x317, Size: 1]
	bool bMonopolizeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	bool bCheckFirstPhaseConditions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b, Size: 1]
	bool bKeepCastingWhenDisconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x320, Size: 296]
	int SkillCategory;//[Offset: 0x448, Size: 4]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	bool USE_NEW_SKILLCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 1]
	bool bTryAddToPendingListWhenInitSkillWithUIIfControllerIsNotAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44e, Size: 1]
	UAEBlackboardParameter[] BlackboardParamList;//[Offset: 0x450, Size: 12]
	int ItemID;//[Offset: 0x45c, Size: 4]
	UTSkillPhase* BasePhase;//[Offset: 0x460, Size: 4]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x464, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x4a0, Size: 4]
	int CurComponentNameIndex;//[Offset: 0x4a4, Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	SkillGlobalUIDDataAsset* LoadedGlobalUIDDataAsset;//[Offset: 0x4b0, Size: 4]
	UTSkillManagerComponent* SpecificSkillCompRef;//[Offset: 0x4b4, Size: 8]
	UAEBlackboard* SpecificBlackBlackRef;//[Offset: 0x4bc, Size: 8]
	void StopSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int coolDownIndex);// 0x250af64
	void SetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent, float percentage);// 0x5498ca4
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType, int PhaseIndex);// 0x27560f4
	bool JumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseID);// 0x5498bd8
	bool IsCDOK(UTSkillManagerComponent* SkillManagerComponent);// 0x5498b50
	UTSkillManagerComponent* GetSpecificSkillManager();// 0x5498b28
	UAEBlackboard* GetSpecificBlackboard();// 0x5498b00
	float GetSkillPhasePercentage(UTSkillManagerComponent* SkillManagerComponent);// 0x5498a80
	UTSkillPhase* GetSkillPhase(int PhaseIndex);// 0x54989f8
	ActorComponent* GetComponentByTag(class ActorComponent ComponentClass, FName Tag);// 0x5498934
	void FillPhases();// 0x5498920
	void DoSkillCoolDown(UTSkillManagerComponent* SkillManagerComponent, int coolDownIndex);// 0x549885c
	bool CanBePlayed(UTSkillManagerComponent* SkillManagerComponent, bool bShowErrorMsg);// 0x5498788

--------------------------------
Class: UTSkillCreateData
	bool bSkillActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float Interval;//[Offset: 0x4, Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0x8, Size: 4]
	UTSkillCDBase*[] SkillCDs;//[Offset: 0xc, Size: 12]
	<int,UTSkillWidget*> SkillUIs;//[Offset: 0x18, Size: 60]
	<FString,int> SkillUIPathToHandle;//[Offset: 0x54, Size: 60]
	SoftClassPath SkillMainWidget;//[Offset: 0x90, Size: 24]
	bool bInitMainSkillUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	<enum,SlateBrush> SkillIcons;//[Offset: 0xac, Size: 60]
	int SkillMainWidgetHandle;//[Offset: 0xe8, Size: 4]
	float Range;//[Offset: 0xf0, Size: 4]
	UTSkillPhase*[] Phases;//[Offset: 0xf4, Size: 12]
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	int CoolDownMessageID;//[Offset: 0x104, Size: 4]
	FName[] AsyncLoadingSkillUI;//[Offset: 0x108, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x114, Size: 12]
	bool bIsUsing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]

--------------------------------
Class: UTSkillCDBase.Object
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x1c, Size: 8]
	UTSkill* OwnerSkill;//[Offset: 0x24, Size: 8]
	enum cdType;//[Offset: 0x2c, Size: 1]
	FString cdTypeStr;//[Offset: 0x30, Size: 12]
	UTSkillManagerComponent* CurOwnerManager;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: UTSkillManagerComponent.ActorComponent.Object
	UTSkillSynData[] SkillSynData;//[Offset: 0x100, Size: 12]
	UTSkillSynSinglePhaseData[] SkillSynSinglePhaseData;//[Offset: 0x118, Size: 12]
	delegate OnSkillCDChanged;//[Offset: 0x130, Size: 12]
	SkillCDRepData[] SyncSkillCDDatas;//[Offset: 0x13c, Size: 12]
	UTAddedSkillSturct[] RepAddedSkillStructList;//[Offset: 0x148, Size: 12]
	delegate ChangeActorBlackboard;//[Offset: 0x160, Size: 12]
	Actor* OwnerActor;//[Offset: 0x16c, Size: 4]
	Object*[] TestList;//[Offset: 0x170, Size: 12]
	class UTSkill[] SkillArchetypes;//[Offset: 0x17c, Size: 12]
	class UTSkill[] SkillHardReferenceList;//[Offset: 0x188, Size: 12]
	int[] SkillInitIndices;//[Offset: 0x194, Size: 12]
	int[] SkillInitIndicesOnHighLevelDevices;//[Offset: 0x1a0, Size: 12]
	UTSkill*[] Skills;//[Offset: 0x1ac, Size: 12]
	UAEUserWidget*[] AsyncLoadedSkillUI;//[Offset: 0x1b8, Size: 12]
	UAEUserWidget* SkillUIRoot;//[Offset: 0x1c4, Size: 4]
	PanelWidget* SkillUIRootPanel;//[Offset: 0x1c8, Size: 4]
	<UTSkill*,UAEBlackboard*> SkillsBlackboardMap;//[Offset: 0x1cc, Size: 60]
	<Actor*,UAEBlackboard*> ActorBlackboardMap;//[Offset: 0x208, Size: 60]
	<UTSkill*,int> SkillToIndexMap;//[Offset: 0x244, Size: 60]
	<UTSkill*,int> SkillCurPhaseIndexes;//[Offset: 0x280, Size: 60]
	<UTSkill*,int> LastPhaseIndexes;//[Offset: 0x2bc, Size: 60]
	<int> PendingSkillForResume;//[Offset: 0x2f8, Size: 60]
	UTSkillCreateData[] SkillBaseDatas;//[Offset: 0x334, Size: 12]
	delegate OnSkillHit;//[Offset: 0x3d0, Size: 12]
	delegate OnSkillCast;//[Offset: 0x3dc, Size: 12]
	float PhasePercentage;//[Offset: 0x428, Size: 4]
	<int,int> UIDToSyncSkillActiveStateData;//[Offset: 0x42c, Size: 60]
	SkillActiveRepData[] SyncSkillActiveStateDatas;//[Offset: 0x468, Size: 12]
	<int,int> UIDToSyncSkillCDDatas;//[Offset: 0x478, Size: 60]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x4b4, Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x4dc, Size: 40]
	bool bDebugSkillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool bNeedBeginInitOnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c, Size: 1]
	delegate SkillStopEvent;//[Offset: 0x550, Size: 12]
	UTAddedSkillSturct[] LoadingSkillStructList;//[Offset: 0x55c, Size: 12]
	class Object[] PendingRemoveSkillClass;//[Offset: 0x568, Size: 12]
	<int,SkillBlackBoardSyncDataArrayWrapper> CurrentParameters;//[Offset: 0x574, Size: 60]
	delegate SkillStartEvent;//[Offset: 0x5b0, Size: 12]
	UTSkill*[] PendingPassiveSkills;//[Offset: 0x5bc, Size: 12]
	SkillGlobalUIDDataAsset* SkillGlobalUIDDataAsset;//[Offset: 0x5c8, Size: 4]
	FString LastESkillTargetDesc;//[Offset: 0x5e0, Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x5ec, Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x5f0, Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x5f8, Size: 4]
	<FString,TimerHandle> SkillTimerMap;//[Offset: 0x5fc, Size: 60]
	<UTSkill*> PendingSkillUIWaitingForInitWhenControllerIsAvailable;//[Offset: 0x644, Size: 60]
	SkillParamater[] SkillParamaters;//[Offset: 0x680, Size: 12]
	void UpdateSyncSkillCDData(int SkillUID);// 0x54a7b84
	void UpdateSyncSkillActiveState(int SkillUID);// 0x54a7b0c
	void UnRegisterActorBlackBorad(Actor* InActor);// 0x54a7a94
	void TryDeleteOneSkillByClass(class UTSkill SkillTemplateClass, bool IsImmediately);// 0x54a7938
	void TryAddOneSkill(out class UTSkill skillTemplate, bool bActive);// 0x54a7828
	void TryActivateSkill(int SkillIndex, bool bActive);// 0x54a775c
	bool TriggerEvent(int SkillID, byte EventType);// 0x2756a68
	bool TraceTarget(Vector StartTrace, Vector EndTrace, enum TargetType, float Radius, out Actor* TargetActor);// 0x54a7580
	void SyncOneSkillState(bool RepSkillCD, bool RepSkillActiveState, int RequestUID);// 0x54a7468
	void SwitchSkill(int SkillID, byte EventType);// 0x54a73a4
	bool StopSkillWithSlot(int SkillSlot, enum StopReason);// 0x54a72d8
	int StopSkillWithID(int SkillID, enum StopReason);// 0x54a720c
	void StopSkillSpecific(UTSkill* Skill, enum Reason);// 0x54a7150
	void StopSkillAll(enum StopReason);// 0x54a70d0
	bool ShouldTriggerEvent(int SkillID, byte EventType);// 0x54a7004
	bool SetupOwnerAndSystem();// 0x54a6fdc
	void SetSkillState(out const UTSkillStateSyncData[] syncStateDatas);// 0x54a6f10
	void SetSkillOwner(Actor* tempActor);// 0x2507ca0
	void SetSkillLastPhase(UTSkill* Skill, int PhaseIndex);// 0x54a6e54
	void SetSkillCurPhase(UTSkill* Skill, int PhaseIndex);// 0x54a6d98
	bool SetSkillActive(int SkillIndex, bool bActive, bool bForceSet);// 0x54a6c74
	void SetCurSkill(int SkillIndex, int SkillSlot);// 0x54a6bb8
	void SetAllCDTime(float InNewCDTime);// 0x54a6b40
	void ServerTriggerEvent(int SkillUID, byte EventType);// 0x54a6a44
	bool ServerStartSkill(int SkillID, bool bAutoCast);// 0x54a6970
	void ServerSetParameters(const SkillBlackBoardSyncData[] InData, int InSlotIndex);// 0x54a6834
	void ServerNotifyRandomSeed(int Seed);// 0x54a6780
	void ResimulateAllSynData();// 0x23b7e18
	void RequestSkillStates(bool RepSkillCD, bool RepSkillActiveState, const int[] RequestUIDs);// 0x54a6600
	void RepSkillSynSinglePhaseData();// 0x25a9540
	void RepSkillSynData();// 0x25a95ec
	void RepSkillHitInfo();// 0x54a65ec
	void RepOneSkillSynData(int SkillSlot, int theLastSkill);// 0x54a6530
	void RemoveTriggerSkillPair(UTSkill* Skill);// 0x54a64b0
	void RemoveSkillUIWidget(FString SkillClassName, SoftObjectPath objPath);// 0x54a6308
	void RemoveSkillRecord(UTSkill* Skill, float reserveTime);// 0x54a624c
	void RemoveAddedSkill(int SkillUID);// 0x54a61d4
	void RegistSkillUIWidgetBP(FString SkillClassName, SoftObjectPath objPath);// 0x54a602c
	void RegisterActorBlackBorad(Actor* InActor, UAEBlackboard* RegisterBlackboard);// 0x54a5f70
	static void RefreshSkillCDFromRepData_One(World* CurWorld, UTSkillCDBase* TargetSkillCD, out const UTSkillSyncData_CD FromCDData);// 0x54a5e20
	int RandRangeSyn(int StartIndex, int EndIndex);// 0x54a5ce8
	bool PreCheckNewSkill(int SkillID);// 0x54a5c60
	void PlayHurtSkillEffect(UTSkillHitInfo TheSkillHitInfo);// 0x54a5b20
	void OnStopSkill(UTSkill* Skill, enum StopReason);// 0x54a5a5c
	static bool OnSameTeam(Actor* A, Actor* B);// 0x54a59a0
	void OnRep_SkillHitInfo();// 0x54a5984
	void OnRep_SkillCDDatas();// 0x54a5970
	void OnRep_SkillActiveState();// 0x54a595c
	void OnRep_AddedSkillList(UTAddedSkillSturct[] originList);// 0x54a57c4
	void OnInterruptSkill(UTSkill* Skill, enum StopReason);// 0x54a5700
	void OnControllerArrived();// 0x54a56ec
	void OnAsyncLoadFinishedByItem(int SkillIndex, FString SkillTemplatePath);// 0x54a55c0
	void ModifySkillCD(FString SkillName, int Index, enum Op, float Value);// 0x54a540c
	bool LoadSyncIfLoadingBySkillUID(int SkillUID);// 0x54a538c
	bool LoadSyncIfLoadingByClassName(FString SkillClassName);// 0x54a52a0
	bool LoadSyncIfLoading(class UTSkill SkillClass);// 0x54a518c
	bool IsTheSkillInCasting(int SkillIndex);// 0x54a510c
	bool IsReadyToCastSkill(int SkillID);// 0x54a5084
	bool IsHasInitSkillSystem();// 0x54a5068
	bool IsCastingSkill();// 0x54a5038
	void InitSkillSystemAync();// 0x54a5024
	void InitSkillSystem(bool isDedicateServer);// 0x54a4f9c
	UTSkill* InitAndGetSkill(int SkillID, out int SkillSlotIndex);// 0x54a4ec0
	UAEBlackboard* GetUAEBlackboard(UTSkill* InSkill);// 0x54a4e40
	int GetSkillUIDByPath(FString SkillObjPath);// 0x54a4d4c
	int GetSkillUIDByName(FString ClassName);// 0x54a4c58
	int GetSkillUIDByIndex(int SkillIndex);// 0x4a3f84c
	UTSkillStateSyncData[] GetSkillState();// 0x54a4b70
	int GetSkillSlotBySkill(UTSkill* param1);// 0x54a4af0
	UTSkill*[] GetSkillsByGroup(FName SkillGroup);// 0x54a4a08
	UTSkillPhase* GetSkillPhaseByIndex(class Object SkillClass, int PhaseIndex);// 0x54a4944
	FString GetSkillPathByUID(int SkillUID);// 0x54a4860
	FString GetSkillNameByUID(int SkillUID);// 0x54a477c
	FString GetSkillName(int SkillIndex);// 0x54a46a0
	UTSkillBaseWidget* GetSkillMemberByTag(class Object SkillClass, FString Tag);// 0x54a456c
	int GetSkillLastPhase(UTSkill* Skill);// 0x54a4470
	int GetSkillIndexByUID(int SkillUID);// 0x54a43e8
	int GetSkillIndexByPathFormArchetype(FString PathName);// 0x54a42f4
	int GetSkillIndexByClassName(FString ClassName);// 0x54a4200
	int GetSkillIndexByClass(class Object SkillClass, bool bFetchArchetypes);// 0x54a412c
	int GetSkillIndex(UTSkill* Skill);// 0x54a40ac
	static int GetSkillGlobalUIDByClass(class Object SkillClass);// 0x54a4034
	int GetSkillCurPhase(UTSkill* Skill);// 0x54a3f38
	UTSkill* GetSkillByUID(int SkillUID);// 0x54a3eb0
	UTSkill* GetSkillByName(FString SkillName);// 0x54a3dbc
	UTSkill* GetSkillByClassName(FString SkillClassName);// 0x54a3cc8
	UTSkillCreateData GetSkillBaseDataBySkill(UTSkill* Skill);// 0x54a3c40
	UTSkillCreateData GetSkillBaseDataByIndex(int SkillIndex);// 0x54a3bb8
	UTSkillCreateData GetSkillBaseDataByClass(class Object SkillClass);// 0x54a3b30
	class UTSkill GetSkillArcheTypeByClassName(FString archeClassName, out int TargetIndex);// 0x54a39ac
	UTSkill* GetSkill(int SkillID);// 0x54a3924
	byte GetRealOwnerRoleSafety();// 0x277be04
	bool GetParamBySelector(FName SelectedKeyName, int InSlotIndex, out SkillBlackBoardSyncData OutData);// 0x54a37d8
	UTSkill*[] GetCurSkills();// 0x54a3744
	UTSkillPhase*[] GetCurSkillPhases();// 0x54a36b0
	UTSkillPhase* GetCurSkillPhase(int SkillSlot);// 0x54a3630
	int[] GetCurSkillIndexes();// 0x54a35c4
	int GetCurSkillIndexBySlot(int SkillSlot);// 0x54a3544
	int GetCurSkillIndex();// 0x54a3528
	UTSkill* GetCurSkill(int SkillSlot);// 0x54a34a8
	int[] GetCurMonopolizeSkills();// 0x54a3414
	int GetCastingSlotBySkillID(int SkillID);// 0x54a3394
	float GetAllMaxCDTimeAverage();// 0x54a336c
	float GetAllCDTimeAverage();// 0x54a3344
	int[] GetAllCastingSkillIndex();// 0x54a32b0
	bool ForceInitSkillByClassName(FString SkillClassName);// 0x54a31bc
	int FindRelatedCurSkillIndex(int SkillID, out int tempRelatedSkillSlot, bool PeekSlotIndex);// 0x54a3098
	void DeleteOneSkillByClass(class UTSkill SkillTemplateClass, bool bCheckItemExist);// 0x54a2f34
	void ClientStartSkill(int SkillID, bool bAutoCast);// 0x54a2e68
	void ClearSkill(bool bDeleteSkill);// 0x54a2de0
	bool CheckNewSkill(int SkillID, out int ReplaceSkillSlot);// 0x54a2d04
	void CheckAutoSkill();// 0x54a2ce8
	void BothSideSetParameters(out const SkillBlackBoardSyncData[] InData, int InSlotIndex);// 0x54a2bcc
	void BeginAddSkillByItemAsync(out UTAddedSkillSturct temp);// 0x54a2b18
	void AddTriggerSkillPair(UTSkill* InSkill);// 0x54a2a98
	void AddOneSkillToAddList(int FoundSkillIndex, out class UTSkill skillTemplate, bool bActive);// 0x54a2944
	void AddOneSkillByAddedSkillSturct(out UTAddedSkillSturct temp);// 0x54a2890

--------------------------------
Class: UTSkillSynData
	int CurSkillUID;//[Offset: 0x0, Size: 4]
	int Token;//[Offset: 0x4, Size: 4]
	int PhaseIndexes;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UTSkillSynSinglePhaseData
	int CurSkillUID;//[Offset: 0x0, Size: 4]
	int CurSkillPhase;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SkillCDRepData
	int SkillUID;//[Offset: 0x0, Size: 4]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UTSkillSyncData_CD
	int skillCDIndex;//[Offset: 0x0, Size: 4]
	float lastActiveTime;//[Offset: 0x4, Size: 4]
	bool bIsCDReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIsTickFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	float InitEnergy;//[Offset: 0xc, Size: 4]
	float MaxEnergy;//[Offset: 0x10, Size: 4]
	float CurEnergy;//[Offset: 0x14, Size: 4]
	float DeltaEnergy;//[Offset: 0x18, Size: 4]
	float SyncCount;//[Offset: 0x1c, Size: 4]
	float TickCountTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: UTAddedSkillSturct
	int SkillUID;//[Offset: 0x0, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int LoadingSlot;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAEBlackboard.Object
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x1c, Size: 720]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x54bb3e4
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x54bb300
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x54bb1c0
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator VectorValue);// 0x54bb0ec
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x54bb018
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x54baf44
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x54bae70
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x54bad9c
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x54bacc8
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x54babf4
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x54bab18
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x54baa84
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x54ba9f0
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x54ba95c
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x54ba8c8
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x54ba834
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x54ba7a0
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x54ba70c
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x54ba678
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x54ba5e4
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x54ba550
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x54ba4bc
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x54ba428
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x54ba344
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x54ba2a0
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x54ba1b0
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x54ba10c
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x54ba078
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x54b9fdc
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x54b9f48
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x54b9eb4
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x54b9e20
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x54b9d8c
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x54b9cf8
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x54b9c14
	void FillBlackboard_BP(UAEBlackboardParameter[] ParamList);// 0x54b9ab0
	void AddValueByParam(out const UAEBlackboardParameter NewParam);// 0x54b9970

--------------------------------
Class: UAEBlackboardContainer
	<FName,Object*> ObjectParamMap;//[Offset: 0x0, Size: 60]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x3c, Size: 60]
	<FName,class Object> ClassParamMap;//[Offset: 0x78, Size: 60]
	<FName,byte> EnumParamMap;//[Offset: 0xb4, Size: 60]
	<FName,int> IntParamMap;//[Offset: 0xf0, Size: 60]
	<FName,uint32> UIntParamMap;//[Offset: 0x12c, Size: 60]
	<FName,float> FloatParamMap;//[Offset: 0x168, Size: 60]
	<FName,bool> BoolParamMap;//[Offset: 0x1a4, Size: 60]
	<FName,FString> StringParamMap;//[Offset: 0x1e0, Size: 60]
	<FName,FName> NameParamMap;//[Offset: 0x21c, Size: 60]
	<FName,Vector> VectorParamMap;//[Offset: 0x258, Size: 60]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x294, Size: 60]

--------------------------------
Class: UAEBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UAEBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]
	UAEBlackboardParameterDefaultValue DefaultValue;//[Offset: 0x10, Size: 136]

--------------------------------
Class: UAEBlackboardParameterDefaultValue
	Object* DefaultObject;//[Offset: 0x0, Size: 40]
	class Class* DefaultClass;//[Offset: 0x28, Size: 40]
	byte DefaultEnum;//[Offset: 0x50, Size: 1]
	int DefaultInt;//[Offset: 0x54, Size: 4]
	float DefaultFloat;//[Offset: 0x58, Size: 4]
	bool DefaultBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	FString DefaultString;//[Offset: 0x60, Size: 12]
	FName DefaultName;//[Offset: 0x70, Size: 8]
	Vector DefaultVector;//[Offset: 0x78, Size: 12]

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: SkillActiveRepData
	int SkillUID;//[Offset: 0x0, Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: UTSkillHitInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillUID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	bool flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	byte HitSurfaceType;//[Offset: 0x1a, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Actor*[] ToPawn;//[Offset: 0x0, Size: 12]
	Actor* FromPawn;//[Offset: 0xc, Size: 4]
	int SkillID;//[Offset: 0x10, Size: 4]
	int SkillPhaseID;//[Offset: 0x14, Size: 4]
	byte HitSurfaceType;//[Offset: 0x18, Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: SkillBlackBoardSyncDataArrayWrapper
	SkillBlackBoardSyncData[] Array;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SkillBlackBoardSyncData
	int IntValue;//[Offset: 0x0, Size: 4]
	float FloatValue;//[Offset: 0x4, Size: 4]
	bool BoolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FName NameValue;//[Offset: 0x10, Size: 8]
	FString StringValue;//[Offset: 0x18, Size: 12]
	Vector VectorValue;//[Offset: 0x24, Size: 12]
	Rotator RotatorValue;//[Offset: 0x30, Size: 12]
	Actor* ReplicatedActorPointer;//[Offset: 0x3c, Size: 4]
	FName Name;//[Offset: 0x40, Size: 8]
	byte Type;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SkillGlobalUIDDataAsset.DataAsset.Object
	<FString,int> AllSkillUIDMap;//[Offset: 0x20, Size: 60]
	<int,FString> AllSkillPathMap;//[Offset: 0x5c, Size: 60]
	<int,FString> DebugSkillPathMap;//[Offset: 0x98, Size: 60]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 4]
	int Seed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SkillParamater
	bool bUseTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName SkillTag;//[Offset: 0x8, Size: 8]
	enum SkillType;//[Offset: 0x10, Size: 1]
	float CDRecoveryScale;//[Offset: 0x14, Size: 4]
	float SkillRuntimeScale;//[Offset: 0x18, Size: 4]

--------------------------------
Class: UTSkillStateSyncData
	UTSkillStateSyncDataParam syncParam;//[Offset: 0x0, Size: 2]
	int SkillUID;//[Offset: 0x4, Size: 4]
	bool bSkillActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	UTSkillSyncData_CD[] CDSyncDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UTSkillStateSyncDataParam
	bool bSyncActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSyncCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	FString PhaseName;//[Offset: 0xd4, Size: 12]
	int PhaseIndex;//[Offset: 0xe0, Size: 4]
	FString PhaseDescription;//[Offset: 0xe4, Size: 12]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0xf4, Size: 8]
	Color US;//[Offset: 0x104, Size: 4]
	Color THEM;//[Offset: 0x108, Size: 4]
	Color Other;//[Offset: 0x10c, Size: 4]
	int ActionsTopHalfCount;//[Offset: 0x110, Size: 4]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x114, Size: 92]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x170, Size: 4]
	bool TryJumpToPhase(UTSkillManagerComponent* SkillManagerComponent, int PhaseID);// 0x54aa54c
	void StopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x24fbdb0
	void StartPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x2730c60
	void RepeatPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x257e3dc
	bool PlaySkillHurtEffect(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x54aa480
	bool PlaySkillHurtAppearances(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x54aa3b4
	void PickTargets(UTSkillManagerComponent* SkillManagerComponent);// 0x23f5f9c
	bool OnEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x54aa2e8
	bool OnCustomEvent(UTSkillManagerComponent* SkillManagerComponent, byte TheEventType);// 0x27d0330
	float GetChargePhaseRate(UTSkillManagerComponent* SkillManagerComponent);// 0x54aa268
	bool ForceStopPhase(UTSkillManagerComponent* SkillManagerComponent);// 0x24dc0d4
	bool ClearAttachments();// 0x259b02c

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0, Size: 4]
	float AltPhaseDuration;//[Offset: 0x4, Size: 4]
	float CacheMouseInputTime;//[Offset: 0x8, Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bCoolDownStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	int coolDownIndex;//[Offset: 0x10, Size: 4]
	UTSkillCondition*[] PhaseConditions;//[Offset: 0x14, Size: 12]
	UTSkillEffect* PhaseConditionFailAction;//[Offset: 0x20, Size: 4]
	UTSkillPicker* Picker;//[Offset: 0x24, Size: 4]
	UTSkillEffect*[] Actions;//[Offset: 0x28, Size: 12]
	UTSkillEffect*[] HurtAppearances;//[Offset: 0x34, Size: 12]
	enum PhaseType;//[Offset: 0x40, Size: 1]
	FString EnterPhaseTipString;//[Offset: 0x44, Size: 12]
	UTSkillEventEffectMapForEditor*[] EditorEventEffectMap;//[Offset: 0x50, Size: 12]

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	bool IsTargetOK(Object* SkillManagerComponent, Actor* Target);// 0x549b7f0
	bool IsOK_Internal();// 0x27d1694
	bool IsOK(Object* SkillManagerComponent);// 0x549b768
	UTSkill* GetOwnerSkill();// 0x549b720

--------------------------------
Class: UTSkillBaseWidget.ActorComponent.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	FString WidgetDescription;//[Offset: 0xdc, Size: 12]
	Actor* BuffTargetActor;//[Offset: 0xe8, Size: 4]
	UTSkill* OwnerSkill;//[Offset: 0xec, Size: 8]
	int ParentNodeIndex;//[Offset: 0xf4, Size: 4]
	FString Tag;//[Offset: 0xf8, Size: 12]
	Object* CurOwnerActorComponent;//[Offset: 0x104, Size: 4]
	void SetValueAsWeakObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x549dcd8
	void SetValueAsVector(out const UAEBlackboardKeySelector Key, Vector VectorValue);// 0x549dbf4
	void SetValueAsString(out const UAEBlackboardKeySelector Key, FString StringValue);// 0x549dab4
	void SetValueAsRotator(out const UAEBlackboardKeySelector Key, Rotator RotatorValue);// 0x549d9e0
	void SetValueAsObject(out const UAEBlackboardKeySelector Key, Object* ObjectValue);// 0x549d90c
	void SetValueAsName(out const UAEBlackboardKeySelector Key, FName NameValue);// 0x549d838
	void SetValueAsInt(out const UAEBlackboardKeySelector Key, int IntValue);// 0x549d764
	void SetValueAsFloat(out const UAEBlackboardKeySelector Key, float FloatValue);// 0x549d690
	void SetValueAsEnum(out const UAEBlackboardKeySelector Key, byte EnumValue);// 0x549d5bc
	void SetValueAsClass(out const UAEBlackboardKeySelector Key, class Object ClassValue);// 0x549d4e8
	void SetValueAsBool(out const UAEBlackboardKeySelector Key, bool BoolValue);// 0x549d40c
	void SetOwnerSkillManager(UTSkillManagerComponent* pMgr);// 0x23d0ab0
	bool IsExistWeakObject(out const UAEBlackboardKeySelector Key);// 0x549d378
	bool IsExistVector(out const UAEBlackboardKeySelector Key);// 0x549d2e4
	bool IsExistString(out const UAEBlackboardKeySelector Key);// 0x549d250
	bool IsExistRotator(out const UAEBlackboardKeySelector Key);// 0x549d1bc
	bool IsExistObject(out const UAEBlackboardKeySelector Key);// 0x549d128
	bool IsExistName(out const UAEBlackboardKeySelector Key);// 0x549d094
	bool IsExistInt(out const UAEBlackboardKeySelector Key);// 0x549d000
	bool IsExistFloat(out const UAEBlackboardKeySelector Key);// 0x549cf6c
	bool IsExistEnum(out const UAEBlackboardKeySelector Key);// 0x549ced8
	bool IsExistClass(out const UAEBlackboardKeySelector Key);// 0x549ce44
	bool IsExistBool(out const UAEBlackboardKeySelector Key);// 0x549cdb0
	Object* GetValueAsWeakObject(out const UAEBlackboardKeySelector Key);// 0x549cd1c
	Actor* GetValueAsWeakActor(out const UAEBlackboardKeySelector Key);// 0x549cc38
	Vector GetValueAsVector(out const UAEBlackboardKeySelector Key);// 0x549cb94
	FString GetValueAsString(out const UAEBlackboardKeySelector Key);// 0x549caa4
	Rotator GetValueAsRotator(out const UAEBlackboardKeySelector Key);// 0x549ca00
	Object* GetValueAsObject(out const UAEBlackboardKeySelector Key);// 0x549c96c
	FName GetValueAsName(out const UAEBlackboardKeySelector Key);// 0x549c8d0
	int GetValueAsInt(out const UAEBlackboardKeySelector Key);// 0x549c83c
	float GetValueAsFloat(out const UAEBlackboardKeySelector Key);// 0x549c7a8
	byte GetValueAsEnum(out const UAEBlackboardKeySelector Key);// 0x549c714
	class Object GetValueAsClass(out const UAEBlackboardKeySelector Key);// 0x549c680
	bool GetValueAsBool(out const UAEBlackboardKeySelector Key);// 0x549c5ec
	Actor* GetValueAsActor(out const UAEBlackboardKeySelector Key);// 0x549c508
	UAEBlackboard* GetUAEBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x549c480
	UAEBlackboard* GetUAEBlackboard();// 0x27d0b9c
	UTSkillManagerComponent* GetOwnerSkillManager();// 0x549c450
	Actor* GetOwnerPawn();// 0x549c420
	<Actor*,UAEBlackboard*> GetActorBlackboardBySkillComp(UTSkillManagerComponent* InOwnerSkillManager);// 0x549c220
	<Actor*,UAEBlackboard*> GetActorBlackboard();// 0x549c070

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float fADScale;//[Offset: 0x108, Size: 4]
	float fAPScale;//[Offset: 0x10c, Size: 4]
	void UpdateAction(Object* InstanceNodeContainer, float DeltaSeconds);// 0x254cb88
	void UndoAction(Object* InstanceNodeContainer);// 0x4ba382c
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x2500abc
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x276a9f0
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x257df5c
	UTSkill* GetOwnerSkill();// 0x549ea84
	void DoHurtAppearance(UTSkillManagerComponent* SkillManagerComponent, Actor* Victim);// 0x25cb7a0
	bool DoAction(Object* InstanceNodeContainer);// 0x54997a4

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0x108, Size: 32]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0x134, Size: 12]
	Actor*[] IgnoreTargets;//[Offset: 0x140, Size: 12]
	UTSkillPickerFilter*[] Filters;//[Offset: 0x14c, Size: 12]
	bool TickPicker(float DeltaTime);// 0x54ab8a0
	bool PickTargetsInner(Vector OriginPoint);// 0x277dcac
	bool PickTargets(Vector OriginPoint);// 0x54ab818

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0, Size: 1]
	UAEBlackboardKeySelector PickerOriginBlackboardKey;//[Offset: 0x8, Size: 8]
	enum PickerTargetType;//[Offset: 0x10, Size: 1]
	int PickerMaxCount;//[Offset: 0x14, Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	bool bUseNewOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bIgnoreOwnerVehicleWhenTracePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0, Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8, Size: 8]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte HitPos;//[Offset: 0x11, Size: 1]
	FName BoneName;//[Offset: 0x18, Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20, Size: 12]
	byte hitPhysMatType;//[Offset: 0x2c, Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float DisToScreenCenter;//[Offset: 0x30, Size: 4]

--------------------------------
Class: UTSkillPickerFilter.Object
	void HandleFilterArray(out UTSkillPickedTarget[] inArray, Actor* Owner);// 0x54ab490

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte SkillEventType;//[Offset: 0x108, Size: 1]
	FName[] InterestedOwnerTags;//[Offset: 0x10c, Size: 12]
	UTSkillEffect* SkillEffect;//[Offset: 0x118, Size: 4]
	SkillConditionWarpper[] Conditions;//[Offset: 0x11c, Size: 12]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0x128, Size: 12]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UTSkillWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	UTSkillManagerComponent* SkillManager;//[Offset: 0x370, Size: 4]
	class Object* SkillClass;//[Offset: 0x374, Size: 4]
	int SkillUIID;//[Offset: 0x378, Size: 4]
	void TriggerPassiveEvent(byte SkillEvent);// 0x54ad2e8
	void TriggerEvent(byte SkillEvent);// 0x54ad270
	void SetSkillUIID(int ID);// 0x54ad1f8
	void SetSkillManager(UTSkillManagerComponent* Manager);// 0x54ad184
	void SetSkillClass(class Object InSkillClass);// 0x54ad110
	void RemoveSkillUI();// 0x2451bc0
	void RemoveFromUIManager();// 0x54ad094
	void OnSkillWidgetInitFinish();// 0x24b11ac
	bool IsCDReady();// 0x54ad06c
	bool IsCastingCD();// 0x54ad044
	int GetSkillUIID();// 0x25de404
	FString GetSkillName();// 0x54acf6c
	UTSkillManagerComponent* GetSkillManger();// 0x27d9f54
	int GetSkillIndexBySkillComponent(UTSkillManagerComponent* InComponent);// 0x54acecc
	int GetSkillIndex();// 0x54ace78
	class Object GetSkillClass();// 0x54ace5c
	float[] GetSkillCDProgess();// 0x54acdcc
	float[] GetSkillCDByType(int Type);// 0x54accf4
	UTSkillCDBase*[] GetSkillCDBases();// 0x54acbdc
	UTSkill* GetSkill();// 0x54acb6c
	float GetMaxEnergy(int Index);// 0x54acaec
	PlayerController* GetLocalPlayerController();// 0x54acac4
	float GetEnergyValue(int Index);// 0x54aca00
	float GetEnergyThreshold(int Index);// 0x54ac980
	float GetDeltaEnergy(int Index);// 0x54ac900
	float GetCurrentCountTime(int Index);// 0x54ac880
	void DoRemove();// 0x54ac86c

--------------------------------
Class: SkillCoverConfig
	class UTSkill* SkillCoverClass;//[Offset: 0x0, Size: 40]
	class UTSkill* SkillCoveredClass;//[Offset: 0x28, Size: 40]

--------------------------------
Class: ExtraDamageReduceCfg
	FString AttachmentID;//[Offset: 0x0, Size: 12]
	ExtraDamageReduce[] ExtraDamageReduceArray;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ExtraDamageReduce
	enum AvatarPosition;//[Offset: 0x0, Size: 1]
	float DamageReduceScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MeshPackage
	FName SockectName;//[Offset: 0x0, Size: 8]
	StaticMesh* maleStMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30, Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0x58, Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0x80, Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xa8, Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0xd0, Size: 40]
	MaterialInterface* maleMat;//[Offset: 0xf8, Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x120, Size: 40]
	int LodMatDeviceQualityLevel;//[Offset: 0x148, Size: 4]
	MaterialInterface* maleLODMat;//[Offset: 0x150, Size: 40]
	MaterialInterface* femaleLODMat;//[Offset: 0x178, Size: 40]
	MaterialSet[] replaceMaleMaterials;//[Offset: 0x1a0, Size: 12]
	MaterialSet[] replaceFemaleMaterials;//[Offset: 0x1ac, Size: 12]
	MaterialSet[] additionalMaleMats;//[Offset: 0x1b8, Size: 12]
	MaterialSet[] additionalFemaleMats;//[Offset: 0x1c4, Size: 12]
	MaterialInterface* baseMat;//[Offset: 0x1d0, Size: 4]
	MaterialInterface* AdvancedParentMat;//[Offset: 0x1d4, Size: 4]
	MaterialInterface* AdvancedParentMat_Male;//[Offset: 0x1d8, Size: 4]
	MaterialInterface* AdvancedParentMat_Female;//[Offset: 0x1dc, Size: 4]
	MaterialInterface* lobbyWingSuitMat;//[Offset: 0x1e0, Size: 40]
	AvatarAnimList[] AvatarAnimList;//[Offset: 0x208, Size: 12]
	LobbyAnimConfigData[] AnimConfigData;//[Offset: 0x214, Size: 12]
	FName MaleAvatarStyle;//[Offset: 0x220, Size: 8]
	FName FemaleAvatarStyle;//[Offset: 0x228, Size: 8]
	LobbyEntity[] CurEntity;//[Offset: 0x230, Size: 12]
	ParticleSet[] maleParticles;//[Offset: 0x23c, Size: 12]
	ParticleSet[] femaleParticles;//[Offset: 0x248, Size: 12]
	class AnimInstance* animBPClass;//[Offset: 0x258, Size: 40]
	PhysicsAsset* OverridePhysicsAsset_Male;//[Offset: 0x280, Size: 4]
	PhysicsAsset* OverridePhysicsAsset_Female;//[Offset: 0x284, Size: 4]
	bool IsReplacedMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	FName OverrideMaleSocketName;//[Offset: 0x290, Size: 8]
	FName OverrideFeMaleSocketName;//[Offset: 0x298, Size: 8]

--------------------------------
Class: MaterialSet
	enum targetSlot;//[Offset: 0x0, Size: 1]
	FName targetMatSlotName;//[Offset: 0x8, Size: 8]
	MaterialInterface* targetMat;//[Offset: 0x10, Size: 40]
	Texture2D* FXLight_MaskTEX;//[Offset: 0x38, Size: 4]
	Texture2D* FXLight_TEX;//[Offset: 0x3c, Size: 4]
	LinearColor FXLight_Color;//[Offset: 0x40, Size: 16]
	LinearColor FXLight_TEXPanner;//[Offset: 0x50, Size: 16]
	LinearColor FXLight_TEXUV;//[Offset: 0x60, Size: 16]
	float UseFXLight_Scalar;//[Offset: 0x70, Size: 4]
	float UV0or1;//[Offset: 0x74, Size: 4]

--------------------------------
Class: AvatarAnimList
	AnimSequence* AnimSeq;//[Offset: 0x0, Size: 40]
	float Alpha;//[Offset: 0x28, Size: 4]
	enum PoseType;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: LobbyAnimConfigData
	byte SceneType;//[Offset: 0x0, Size: 1]
	LobbyPosGenderAnim[] LobbyAnimData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LobbyPosGenderAnim
	byte PoseIndexType;//[Offset: 0x0, Size: 1]
	LobbyGenderAnim[] GenderPoseAnimAsset;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LobbyGenderAnim
	byte GenderType;//[Offset: 0x0, Size: 1]
	LobbyPoseAnim[] PoseAnimAsset;//[Offset: 0x4, Size: 12]

--------------------------------
Class: LobbyPoseAnim
	FName Pose;//[Offset: 0x0, Size: 8]
	AnimationAsset* AnimAsset;//[Offset: 0x8, Size: 40]

--------------------------------
Class: LobbyEntity
	FString RelatedAttrbute;//[Offset: 0x0, Size: 12]
	FName RelatedComTag;//[Offset: 0x10, Size: 8]
	FName Tag;//[Offset: 0x18, Size: 8]
	class LobbyBaseAction* LobbyAction;//[Offset: 0x20, Size: 4]

--------------------------------
Class: LobbyBaseAction.Object
	bool IsTickAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: ParticleSet
	ParticleSystem* Particle;//[Offset: 0x0, Size: 40]
	ParticleSystem* LobbyParticle;//[Offset: 0x28, Size: 40]
	FName SocketName;//[Offset: 0x50, Size: 8]
	Transform Transform;//[Offset: 0x60, Size: 48]

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate ItemBeforeRemovedDelegate;//[Offset: 0xec, Size: 12]
	delegate ItemListUpdatedDelegate;//[Offset: 0xf8, Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0x104, Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0x110, Size: 12]
	delegate SingleItemListUpdate;//[Offset: 0x11c, Size: 12]
	delegate SingleItemListDelete;//[Offset: 0x128, Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0x134, Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0x140, Size: 12]
	delegate ItemOperationInfoDelegate;//[Offset: 0x14c, Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x158, Size: 12]
	delegate ItemClearAllDelegate;//[Offset: 0x164, Size: 12]
	delegate ItemInitialPickupDelegate;//[Offset: 0x170, Size: 12]
	delegate SuitSkinUpdatedDelegate;//[Offset: 0x17c, Size: 12]
	delegate SuitSkinCDDelegate;//[Offset: 0x188, Size: 12]
	delegate ItemUpdatedDelegate;//[Offset: 0x194, Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x1a0, Size: 12]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x1ac, Size: 12]
	LimitItem[] LimitItemList;//[Offset: 0x1b8, Size: 12]
	bool showBounty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	ItemDefineID[] DisuseButUndropItemList;//[Offset: 0x1c8, Size: 12]
	BattleItemData[] ItemList;//[Offset: 0x1d4, Size: 12]
	IncNetArrayNew ItemListNetNew;//[Offset: 0x1e0, Size: 24]
	IncNetArrayNew ItemListNetCacheNew;//[Offset: 0x1f8, Size: 24]
	bool bNewNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x211, Size: 1]
	bool AutoEquipAimAKM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x212, Size: 1]
	SuitSkinList SuitSkinList;//[Offset: 0x214, Size: 28]
	GlidSkinUnit[] GlidSkinList;//[Offset: 0x230, Size: 12]
	ItemHandleBase*[] ItemHandleList;//[Offset: 0x240, Size: 12]
	<ItemDefineID,ItemHandleBase*> ItemHandleMap;//[Offset: 0x24c, Size: 60]
	int CapacityThreshold;//[Offset: 0x288, Size: 4]
	float Capacity;//[Offset: 0x28c, Size: 4]
	float OtherCapacity;//[Offset: 0x290, Size: 4]
	float OccupiedCapacity;//[Offset: 0x294, Size: 4]
	int virtualitemid;//[Offset: 0x2a8, Size: 4]
	int[] LimitedClothAvatarIDArray;//[Offset: 0x2ac, Size: 12]
	void UseSuitSkinServer(int Index);// 0x2f97a50
	void UseSuitSkinClient(int Index);// 0x2f979d8
	bool UseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x2f97890
	float UpdateOtherCapacity();// 0x25d3450
	float UpdateCapacity();// 0x2362e5c
	void UnlockUpdateItemListReceive();// 0x2f9787c
	void UnequipItem(ItemDefineID DefineID);// 0x2f977f4
	void TryMergeItemHandles(ItemDefineID DefineID);// 0x2f9776c
	bool TestPickupItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x2f974c4
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x2f973a0
	bool SwapItem(ItemDefineID DefineID1, ItemDefineID DefineID2);// 0x2f972b4
	void ServerSetShowBounty(bool bShowBounty);// 0x2f971ec
	void ServerEnableItem(ItemDefineID DefineID, bool bUse);// 0x2f970bc
	int ReturnItem(ItemDefineID DefineID, int Count, bool bCallHandlePickup);// 0x2f96f98
	bool RemoveItemHandle(ItemDefineID DefineID);// 0x2f96f00
	void ReceiveItemListNew();// 0x236beb4
	void ReceiveCapacity();// 0x236bc90
	bool PickupItem(ItemDefineID DefineID, BattleItemPickupInfo PickupInfo, enum Reason);// 0x2f96c44
	void OnRep_SuitSkinListNet();// 0x2f96c30
	void OnRep_specialCountLimit();// 0x2f96c1c
	void OnRep_showBounty();// 0x2f96c08
	void OnRep_OtherCapacity();// 0x235d4b8
	void OnRep_ItemListNetNew();// 0x2f96bf4
	void OnRep_ItemList();// 0x2f96be0
	void OnRep_Capacity();// 0x2f96bcc
	void NotifyItemUpdated(ItemDefineID DefineID);// 0x2f96b3c
	void NotifyItemRemoved(ItemDefineID DefineID);// 0x2f96aac
	void NotifyItemListUpdated();// 0x251ecac
	void NotifyCapacityUpdated();// 0x251ec90
	BattleItemHandleBase* NewItemHandle(ItemDefineID DefineID);// 0x2f96a14
	void ModifyItemHandleEquippingState(ItemHandleBase* ItemHandle, bool bEquipping);// 0x2f96950
	void ModifyItemHandleCount(ItemHandleBase* ItemHandle, int Count);// 0x2f96894
	void ModifyAimNotAutoUseForAKM(bool bEquipAimAKM);// 0x2f967cc
	void ModifyAimNotAutoUse(bool bEequipAim);// 0x2f96704
	void LockUpdateItemListReceive();// 0x2f966f0
	FString ItemsToString();// 0x2f9665c
	bool IsAutoUse(int ItemID);// 0x46f6b154
	bool HasItemBySubType(int subtype);// 0x2f965dc
	bool HasItemByDefindIdRange(int LowValue, int HighValue);// 0x2f96518
	World* GetWorld_BP();// 0x2f964f0
	BattleItemData GetLeastElectrictyBattleItemData(ItemDefineID DefineID, FString AdditionalDataName);// 0x2f96324
	void GetItemListByTypeSpecificID(int TypeSpecificID, out BattleItemData[] OutItemList);// 0x2f96224
	BattleItemData[] GetItemListByDefineID(ItemDefineID DefineID);// 0x2f96100
	<ItemDefineID,ItemHandleBase*> GetItemHandleMap();// 0x2f960c8
	ItemHandleBase*[] GetItemHandleList();// 0x2f96058
	BattleItemData GetItemByDefineID(ItemDefineID DefineID);// 0x2f95f38
	bool GetIsOpenLimitCloseStatus(out const ItemDefineID DefineID);// 0x2f95e98
	BattleItemData GetFirstItemByDefineIDIgnoreInstance(ItemDefineID DefineID);// 0x2f95d78
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x2f95ccc
	BattleItemData[] GetAllItemList();// 0x2f95c2c
	void ForceNetUpdate();// 0x2567e30
	void EquipItem(ItemDefineID DefineID);// 0x2f95ba4
	bool DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x2f95a84
	bool DisuseItem(ItemDefineID DefineID, enum Reason);// 0x2f959a8
	BattleItemHandleBase* CreateItemHandleInternal(ItemDefineID DefineID);// 0x2f95910
	ItemHandleBase* CreateItemHandle(ItemDefineID DefineID);// 0x2f95878
	void CreateBattleItemHandleAsync(ItemDefineID DefineID);// 0x46f6b154
	int ConsumeItem(ItemDefineID DefineID, int Count);// 0x2f957a4
	void ClientUpdateSingleItem(const ItemDefineID DefineID);// 0x2f95724
	void ClientSuitSkinIntoCD(float CDSkill);// 0x25a2eec
	void ClientBroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x2f9560c
	void ClientBroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x2f954f4
	void ClearItems();// 0x257e478
	int CheckCapacityForItem(ItemDefineID DefineID, int Count);// 0x2f95420
	bool CanDisuseToBackpack(ItemDefineID DefineID);// 0x2f95390
	void BroadcastItemOperationInfoDelegate(out const ItemOperationInfo ItemOperationInfo);// 0x2f952e8
	void BroadcastItemOperationFailedDelegate(ItemDefineID DefineID, enum OperationType, enum FailedReason);// 0x2f951d8
	void BroadcastItemOperationDelegate(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x2f950c8
	void BroadcastInitialPickupDelegate();// 0x2f950b4
	bool AddItemHandle(ItemDefineID DefineID, ItemHandleBase* ItemHandle);// 0x2f94fd8
	void AddClientItemHandle(BattleItemHandleBase* ItemHandle);// 0x2f94f60

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LimitItem
	int item_type;//[Offset: 0x0, Size: 4]
	int subtype;//[Offset: 0x4, Size: 4]
	int Num;//[Offset: 0x8, Size: 4]

--------------------------------
Class: IncNetArrayNew
	NetArrayUnitNew[] incArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: NetArrayUnitNew
	BattleItemNetNew Unit;//[Offset: 0x0, Size: 88]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: BattleItemNetNew
	ItemDefineIDNet DefineIDNet;//[Offset: 0x0, Size: 16]
	int Count;//[Offset: 0x28, Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bCanBeClientHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x30, Size: 12]
	ItemAssociationNet[] AssociationsNet;//[Offset: 0x3c, Size: 12]
	ItemAssociation[] Associations;//[Offset: 0x48, Size: 12]

--------------------------------
Class: ItemDefineIDNet
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	uint64 InstanceID;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ItemAssociationNet
	byte AssociationType;//[Offset: 0x0, Size: 1]
	ItemDefineIDNet itemNet;//[Offset: 0x8, Size: 16]

--------------------------------
Class: SuitSkinList
	SuitSkinUnit[] SuitSkinList;//[Offset: 0x0, Size: 12]
	int currUseIndex;//[Offset: 0xc, Size: 4]
	float CDTime;//[Offset: 0x10, Size: 4]
	bool SuitSkinOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	int willUseIndexBeforeSkill;//[Offset: 0x18, Size: 4]

--------------------------------
Class: SuitSkinUnit
	int stype_type;//[Offset: 0x0, Size: 4]
	int Slot;//[Offset: 0x4, Size: 4]
	int style_id;//[Offset: 0x8, Size: 4]
	bool lock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	ItemDefineID[] ItemDefineList;//[Offset: 0x10, Size: 12]
	GameModePlayer_WearInfo suitWear;//[Offset: 0x1c, Size: 144]
	Suit_WearInfo suitWearNet;//[Offset: 0xac, Size: 20]
	ItemDefineID[] WearItemList;//[Offset: 0xc0, Size: 12]

--------------------------------
Class: GameModePlayer_WearInfo
	GameModePlayer_WearItem[] EquipedSkinList;//[Offset: 0x0, Size: 12]
	GameModePlayer_WearItem[] EquipedPendantList;//[Offset: 0xc, Size: 12]
	GameModePlayer_WearItem[] WeaponPendantList;//[Offset: 0x18, Size: 12]
	GameModePlayer_WearItem[] WingAvatarList;//[Offset: 0x24, Size: 12]
	GameModePlayerItem[] WeaponSkinAvatarList;//[Offset: 0x30, Size: 12]
	GameModePlayerItem[] WeaponSkinAbilityList;//[Offset: 0x3c, Size: 12]
	GameModePlayerItem[] WeaponAttachmentAvatarList;//[Offset: 0x48, Size: 12]
	GameModePlayerItem[] VehicleSkinAvatarList;//[Offset: 0x54, Size: 12]
	GameModePlayerItem[] VehicleSkinAbilityList;//[Offset: 0x60, Size: 12]
	GameModePlayer_ItemExtraInfo[] VehiclePendantInfoList;//[Offset: 0x6c, Size: 12]
	GameModePlayer_ItemCustomName[] ItemCustomNameList;//[Offset: 0x78, Size: 12]
	GameModePlayerItem[] TombBoxAvatarList;//[Offset: 0x84, Size: 12]

--------------------------------
Class: GameModePlayer_WearItem
	int WearPart_ItemID;//[Offset: 0x0, Size: 4]
	int WearItemID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayer_ItemExtraInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int[] ItemPendantList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameModePlayer_ItemCustomName
	int ItemID;//[Offset: 0x0, Size: 4]
	FString CustomName;//[Offset: 0x4, Size: 12]

--------------------------------
Class: Suit_WearInfo
	GameModePlayer_WearItem[] EquipedSkinList;//[Offset: 0x0, Size: 12]
	int WeaponSkinAvatarListCount;//[Offset: 0xc, Size: 4]
	int VehicleSkinAvatarListCount;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GlidSkinUnit
	int glid_item_id;//[Offset: 0x0, Size: 4]
	GlidCost[] cost_list;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GlidCost
	int cost_item_id;//[Offset: 0x0, Size: 4]
	int cost_count;//[Offset: 0x4, Size: 4]
	int own_count;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ItemOperationInfo
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum BattleItemOperationType;//[Offset: 0x18, Size: 1]
	byte Reason;//[Offset: 0x19, Size: 1]
	int Count;//[Offset: 0x1c, Size: 4]
	Object* Source;//[Offset: 0x20, Size: 4]
	bool bTriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0, Size: 12]
	BodyAttachmentAttrModify[] BodyAttachmentAttrModifiers;//[Offset: 0xc, Size: 12]
	FString BodyDurabilityIndexName;//[Offset: 0x18, Size: 12]

--------------------------------
Class: BodyAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0, Size: 12]
	Transform SocketRelativeTransform;//[Offset: 0x10, Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: AvatarPendantConfig_SpecialParam
	FName SpecialUseExplanation;//[Offset: 0x0, Size: 8]
	Transform AdditionalTransform2SocketRelativeTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: AdditionalItem
	enum SlotID;//[Offset: 0x0, Size: 1]
	int ItemID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: NotifySoundModifiedItem
	FString NotifyName;//[Offset: 0x0, Size: 12]
	AkAudioEvent* AkAudioEvent;//[Offset: 0xc, Size: 4]
	bool bIsOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bIsSwitchGroupName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	FString DefaultState;//[Offset: 0x14, Size: 12]
	FString SwitchState;//[Offset: 0x20, Size: 12]

--------------------------------
Class: AvatarAnimOverrideData
	byte Layer;//[Offset: 0x0, Size: 1]
	class UAECharAnimListCompBase* AnimListCompClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	WeaponAnimTypeConfig WeaponAnimTypeConfig;//[Offset: 0x1a4, Size: 20]
	WeaponAnimTypeConfig[] WeaponAnimTypeConfigStack;//[Offset: 0x1b8, Size: 12]
	CharacterAsynLoadedTypeAnim[] CharacterAsynLoadedAnims;//[Offset: 0x1c4, Size: 12]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	PlayerShovelAnimData[] ShovelAnimDataList;//[Offset: 0xfc, Size: 12]
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x158, Size: 60]
	AnimationAsset*[] AnimationCatcheList;//[Offset: 0x194, Size: 12]
	void RequestAddChildComponent(UAEAnimListComponentBase* ChildComp, byte AnimLayer);// 0x2884238
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x2507d20

--------------------------------
Class: WeaponAnimTypeConfig
	int UID_Runtime;//[Offset: 0x0, Size: 4]
	SubAnimTypeConfig WeaponSubAnimType_Aim;//[Offset: 0x4, Size: 1]
	SubAnimTypeConfig WeaponSubAnimType_Peek;//[Offset: 0x5, Size: 1]
	SubAnimTypeConfig WeaponSubAnimType_Fire;//[Offset: 0x6, Size: 1]
	AnimMapData[] SubAnimCustomList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SubAnimTypeConfig
	enum SubAnimType;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimMapData
	class AnimInstance* AnimInstance;//[Offset: 0x0, Size: 40]
	FName SubAnimSlotName;//[Offset: 0x28, Size: 8]

--------------------------------
Class: PlayerShovelAnimData
	byte shoveAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ShovelAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* AnimAsset;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 4]
	AnimationAsset* Animation;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterAsynLoadedTypeAnim
	byte AnimTypeAsynLoaded;//[Offset: 0x0, Size: 1]
	FString AnimsCatorgeryName;//[Offset: 0x4, Size: 12]
	CharacterAnimTypeAsynLoadedPhaseData Anim;//[Offset: 0x10, Size: 72]

--------------------------------
Class: CharacterAnimTypeAsynLoadedPhaseData
	FString PhaseName;//[Offset: 0x0, Size: 12]
	<byte,AnimationAsset*> PhaseAnimSoftPtr;//[Offset: 0xc, Size: 60]

--------------------------------
Class: ComparePriority
	enum SlotID;//[Offset: 0x0, Size: 1]
	int Priority;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MatCutExcludeItem
	byte ExcludeCameraMode;//[Offset: 0x0, Size: 1]
	FName[] ExcludeCutSlotNameList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SkinWeightProfileConfig
	enum[] UseSkinWeightProfileStatus;//[Offset: 0x0, Size: 12]
	enum[] UseSWPStates;//[Offset: 0xc, Size: 12]
	bool LobbyIgnore_SkirtPose_Lobby_Paragliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool LobbyIgnore_Fashion_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]

--------------------------------
Class: STExtraDamageType.DamageType.Object
	<enum,float> DamageAdditionalRateMap;//[Offset: 0x30, Size: 60]
	<enum,float> AdditionaAbsoluteDamageMap;//[Offset: 0x6c, Size: 60]
	<enum,float> MomentumAbsoluteRateMap;//[Offset: 0xa8, Size: 60]
	byte STExtraDamageType;//[Offset: 0xe4, Size: 1]
	float STExtraDamage;//[Offset: 0xe8, Size: 4]
	int STExtraDamageAdditionalParam;//[Offset: 0xec, Size: 4]
	bool bForceWeaponAttackFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool isCanDamageSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	float DamageScaleOfSelf;//[Offset: 0xf4, Size: 4]
	bool isCanDamageTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float DamageScaleOfTeammate;//[Offset: 0xfc, Size: 4]
	bool bPlayCamersShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool isCanOverrideDamageTeammateByMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	bool bUseNewKillInfoCaculate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102, Size: 1]
	Texture2D* WeaponIcon;//[Offset: 0x104, Size: 4]
	FText KillTemplate;//[Offset: 0x108, Size: 12]
	FText KillDownTemplate;//[Offset: 0x114, Size: 12]
	FText DamageName;//[Offset: 0x120, Size: 12]
	FText LocalCauserKillInfoTemplate;//[Offset: 0x12c, Size: 12]
	FText LocalVictimKillInfoTemplate;//[Offset: 0x138, Size: 12]
	FText CauserTeammateKillInfoTemplate;//[Offset: 0x144, Size: 12]
	FText VictimTeammateKillInfoTemplate;//[Offset: 0x150, Size: 12]
	int VictimerTlogStatisticsID;//[Offset: 0x15c, Size: 4]
	int CauserTlogStatisticsID;//[Offset: 0x160, Size: 4]
	bool bIsVictimerCaculateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	bool bIsCauserCaculateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165, Size: 1]
	FString GetVictimName(UAECharacter* causer, UAECharacter* Victim, Controller* CauserInstigator, FString NormalName);// 0x2664e70
	<enum,float> GetMomentumAbsoluteRateMap(Actor* InAttacker);// 0x2664c70
	void GetKillOrPutDownMessageData(out const ClientFatalDamageRecordData Data, out KillOrPutDownMessage Message, bool bIsLocalCauser, bool bIsLocalVictim, bool bIsVictimTeammate, bool bIsCauserTeammate);// 0x26648f0
	FString GetIsTeammateVictim(FString CauserName, FString VictimeName, FString DamageResult);// 0x266473c
	FString GetIsTeammateCauser(FString CauserName, FString VictimeName, FString DamageResult);// 0x2664588
	FString GetIsLocalVictim(FString CauserName, FString DamageResult);// 0x2664434
	FString GetIsLocalCauser(FString VictimName, FString DamageResult);// 0x26642e0
	<enum,float> GetDamageAdditionalRateMap(Actor* InAttacker);// 0x26640e0
	FString GetCauserName(UAECharacter* causer, UAECharacter* Victim, Controller* CauserInstigator, FString NormalName);// 0x2663f10
	<enum,float> GetAdditionaAbsoluteDamageMap(Actor* InAttacker);// 0x2663d10

--------------------------------
Class: ClientFatalDamageRecordData
	byte ClientFatalItemType;//[Offset: 0x0, Size: 1]
	FString causer;//[Offset: 0x4, Size: 12]
	FString CauserUID;//[Offset: 0x10, Size: 12]
	uint32 CauserKey;//[Offset: 0x1c, Size: 4]
	FString VictimName;//[Offset: 0x20, Size: 12]
	FString VictimUID;//[Offset: 0x2c, Size: 12]
	uint32 VictimKey;//[Offset: 0x38, Size: 4]
	int DamageType;//[Offset: 0x3c, Size: 4]
	int AdditionalParam;//[Offset: 0x40, Size: 4]
	int[] KillFXItemID;//[Offset: 0x44, Size: 12]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bIsVictimMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	int ResultHealthStatus;//[Offset: 0x54, Size: 4]
	byte RecordRelationShip;//[Offset: 0x58, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x5c, Size: 4]
	bool IsKilledByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int causerAnchorPlatformResID;//[Offset: 0x64, Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x68, Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x6c, Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x70, Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x74, Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x78, Size: 4]
	FString CauserPicURL;//[Offset: 0x7c, Size: 12]
	FString VictimPicURL;//[Offset: 0x88, Size: 12]
	FString CauserMedalPicUrl;//[Offset: 0x94, Size: 12]
	FString VictimMedalPicUrl;//[Offset: 0xa0, Size: 12]
	FString RealKillerName;//[Offset: 0xac, Size: 12]
	int RealKillNum;//[Offset: 0xb8, Size: 4]
	int AliveTeamNum;//[Offset: 0xbc, Size: 4]
	int LocalPlayerAssistNum;//[Offset: 0xc0, Size: 4]
	byte MaxKillerStatus;//[Offset: 0xc4, Size: 1]
	ExcellentOperationRecordData[] ExcellentOperationInfos;//[Offset: 0xc8, Size: 12]
	bool AllTeammateDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool AllTeammateKillBySameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	class DamageType* DamageTypeClass;//[Offset: 0xd8, Size: 4]

--------------------------------
Class: ExcellentOperationRecordData
	byte OperationResultType;//[Offset: 0x0, Size: 1]
	int AdditionalNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0, Size: 1]
	FString AttackActionName;//[Offset: 0x4, Size: 12]
	FString AttackName;//[Offset: 0x10, Size: 12]
	bool bIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int KillNum;//[Offset: 0x20, Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	FString FullMsg;//[Offset: 0x28, Size: 12]
	int victimAnchorPlatformResID;//[Offset: 0x34, Size: 4]
	FString CauserPlayerName;//[Offset: 0x38, Size: 12]
	FString VictimPlayerName;//[Offset: 0x44, Size: 12]
	FString NumberMsg;//[Offset: 0x50, Size: 12]
	ExcellentOperationRecordData[] ExcellentOperationInfos;//[Offset: 0x5c, Size: 12]
	bool bNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: CharacterAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	delegate OnItemHandleListLoadFinished;//[Offset: 0x688, Size: 12]
	MeshSynData[] AvatarSyncData;//[Offset: 0x694, Size: 12]
	MeshSynData[] OverrideSyncData;//[Offset: 0x6a0, Size: 12]
	float PlayerBackPackCapacity;//[Offset: 0x6ac, Size: 4]
	bool GlideGlobalVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	BattleItemHandleBase*[] LoadedHandleList;//[Offset: 0x6b4, Size: 12]
	bool bForeceDisableSKinweight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	bool bIsLobbyIgnore_SkirtPose_Lobby_Paragliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 1]
	bool bIsLobbyIgnore_Fashion_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c2, Size: 1]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c3, Size: 1]
	BattleItemHandleBase*[] itemHandleCache;//[Offset: 0x6d4, Size: 12]
	int[] ignoreSlots;//[Offset: 0x6e0, Size: 12]
	int WholeBodyModelID;//[Offset: 0x6ec, Size: 4]
	SkeletalMesh* ZombieSkeletalMesh;//[Offset: 0x6f0, Size: 4]
	enum[] ConsiderAnimHiddenByLODList;//[Offset: 0x6f4, Size: 12]
	enum[] ForceUpdateHiddenBonesSlotList;//[Offset: 0x700, Size: 12]
	bool WaitCondition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c, Size: 1]
	int EnableEquipAvatarSkin;//[Offset: 0x710, Size: 4]
	int EnableEquipAvatarPendant;//[Offset: 0x714, Size: 4]
	int ClearPendingEntityCfg;//[Offset: 0x718, Size: 4]
	AvatarEntity*[] PendingUpdateBoneList;//[Offset: 0x71c, Size: 12]
	<int,AsyncLoadRenderResReq> PendingLoadRenderRequestList;//[Offset: 0x728, Size: 60]
	PendingDeleteEntity[] PendingDeleteEntityList;//[Offset: 0x764, Size: 12]
	int SimulateDefaultHandleID;//[Offset: 0x770, Size: 4]
	<int,ChildHandleList> ChildItems;//[Offset: 0x778, Size: 60]
	FName IgnoreSkinWeightAnimSlotName;//[Offset: 0x7b8, Size: 8]
	<enum,DefaultAvatarConfig> DefaultAvatarHandles;//[Offset: 0x7c0, Size: 60]
	<enum,ItemDefineID> DefaultAvatar4ReadyPak;//[Offset: 0x7fc, Size: 60]
	int[] PinchFaceIDs;//[Offset: 0x838, Size: 12]
	int PauseIMPhysicsCountWhenDetachFromVehicle;//[Offset: 0x844, Size: 4]
	int PauseIMPhysicsCountWhenLeaveParachute;//[Offset: 0x848, Size: 4]
	bool AsyncLoadOnClientModeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	bool bEnableLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	MaterialInterface* SuperLowMaterial;//[Offset: 0x85c, Size: 4]
	int[] EnableBatchList;//[Offset: 0x860, Size: 12]
	float FarDistance;//[Offset: 0x86c, Size: 4]
	float MiddleDistance;//[Offset: 0x870, Size: 4]
	float FarTime;//[Offset: 0x874, Size: 4]
	float MiddleTime;//[Offset: 0x878, Size: 4]
	bool ShouldUseHairDynamicEffect();// 0x23ffee0
	bool ShouldDisplayByQuality(int SlotID);// 0x23ffe60
	void SetSkinMaterialInternel(MeshComponent* meshComp, MaterialInterface* MatSkin, FName SlotName, int SlotID);// 0x23ffd14
	bool SetSkinMaterial(int SlotID);// 0x23ffc94
	void SetSelfSkinWeightProfile(SkeletalMeshComponent* SkeletalMeshCmp, FName ProfileName, bool bUseSkinWeightProfile, int SlotID, enum Reason);// 0x23ffaf8
	void SetNormalMaterial(out MeshPackage meshPack, MeshComponent* meshComp, int SlotID);// 0x23ff9d8
	void SetIgnoreSlots(BackpackAvatarHandle* avatar);// 0x23ff960
	void SetColorMaterial(int SlotID, MeshComponent* meshComp, MaterialInstance* Material, out MeshPackage meshPack);// 0x23ff7fc
	void SetCastShadowEnabled(bool IsEnabled);// 0x23ff77c
	bool SetBodySuitsMaterial(out MeshPackage meshPack, MeshComponent* meshComp);// 0x23ff698
	void SetAvatarVisibility(enum SlotType, bool Visible, bool IsForCE);// 0x23ff584
	void SetAvatarSectionVisibility(bool Visible, const byte InCameraMode);// 0x23ff4bc
	void SetAvatarGender(int AGender);// 0x23ff444
	void SetAsyncLoadingOnClientModeEnabled(bool IsEnable);// 0x23ff3c4
	void SetAllSelfSkinWeightProfileByState(enum profilestate, FName ProfileName, bool bUseSkinWeightProfile, enum Reason);// 0x23ff26c
	void SetAllSelfSkinWeightProfile(FName ProfileName, bool bUseSkinWeightProfile, enum Reason);// 0x23ff158
	bool ResetSkinWeightProfile(int Slot, out SkinWeightProfileStates states);// 0x237e7cc
	void RenderEntityInStandAloneMode(CharacterAvatarEntity* AvatarEntity);// 0x23ff0e0
	void RemovePendingDeleteEntity(AvatarEntity* AVEntity);// 0x23ff068
	void ReloadAvatarWithSlotList(enum[] InSlotList, bool needDirectLoad);// 0x23fef34
	BattleItemHandleBase* ReloadAvartItemHandle(BattleItemHandleBase* InItemHandleBase);// 0x23feeb4
	void ReloadAllEquippedAvatar(bool ForceAutonoumous);// 0x237e71c
	void RegisterSkinWeightProfileStateWithTempName(bool bUseSkinWeightProfile, FName TempStateName);// 0x23fedec
	void RegisterSkinWeightProfileState(bool bUseSkinWeightProfile, enum InSkinWeightProfileState);// 0x23fed24
	void RefreshMaterials();// 0x23fed10
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x237e58c
	void RefreshAvatar();// 0x23fecfc
	void PutOnEquipmentsByResIDList(out <int,int> AvatarList);// 0x23febc8
	bool PutOnEquipmentByItemHandleInner(BattleItemHandleBase* Handle, SkeletalMesh* skMesh, StaticMesh* stMesh, bool bClear);// 0x23fea70
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x237e3f4
	bool PutOnChildEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, int ParentSlotID);// 0x23fe9a4
	void PushHandlesToPipeline(BattleItemHandleBase*[] handleList);// 0x23fe8c0
	bool ProcessAssetFilter(out AsyncLoadRenderResReq RenderResReq);// 0x23fe7f8
	bool PreFiltHandles(BackpackAvatarHandle* AvatarHandle, out MeshSynData SyncData);// 0x23fe6dc
	void PauseIMSimulation(int InPauseFrameCount);// 0x23fe664
	void OnRespawned();// 0x23fe648
	void OnReplayTargetChanged(FString LastPlayerUID, FString NewPlayerUID);// 0x23fe55c
	void OnReplacedMeshNotLoaded(CharacterAvatarEntity* TargetEntity);// 0x23fe4e4
	void OnRep_BackPackCapacityChanged();// 0x23fe4d0
	void OnRep_AvatarMeshChanged();// 0x23fe4bc
	void OnRecycled();// 0x23fe4a0
	void OnParachuteStateChanged(byte preState, byte CurState);// 0x23fe3e4
	void OnMeshLoaded(SoftObjectPath AssetList, BattleItemHandleBase* ItemHandles, bool isReplaced);// 0x23fe258
	void OnLobbyEmoteMontageStartEvent(int EmoteIndex);// 0x23fe1e0
	void OnLobbyEmoteMontageFinishedEvent(int EmoteIndex);// 0x23fe168
	void OnItemHandleLoaded(ItemDefineID DefineID, BattleItemHandleBase* ItemHandle);// 0x23fe09c
	void OnItemHandleListLoaded(BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x23fdf74
	void OnCharacterDetachedFromVehicle(STExtraVehicleBase* InLastVehicle);// 0x23fdefc
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x237df74
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x237dd24
	bool LoadMeshsAsync(BattleItemHandleBase* handleList, bool needDirectLoad);// 0x237dc50
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x237db50
	bool IsTeammate();// 0x237db20
	bool IsSlotNeedReplaced(int SlotID);// 0x23fde7c
	bool IsReadyToNextStep(out bool IsReadyState);// 0x23fddec
	bool IsPinceFace();// 0x23fddbc
	bool IsNeedLoadMeshListSync();// 0x23fdd94
	bool IsNamedSectionCutExclude(out const FName InMatSlotName, const int InAvatarSlotIndex, const byte InCameraMode);// 0x23fdc74
	bool IsInLowDevice();// 0x23fdc4c
	bool IsForceUpdateHiddenBonesSlot(int InSlotID);// 0x23fdbcc
	bool IsForceUpdateHiddenBonesComp(SkeletalMeshComponent* InSkeletalMeshComp);// 0x23fdb4c
	bool IsConsiderAnimHiddenByLOD(int InSlotID);// 0x237d8e4
	bool IsBattle_ROLE_AutonomousProxy();// 0x23fdb24
	bool IsAdditionalItemsHiddenBy(int itemResID);// 0x23fdaa4
	void InitialAvatarParam(int AGender);// 0x23fda24
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x237d834
	void InitDefaultAvatarByResID(int avatarGender, int head, int hair);// 0x23fd91c
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x237d7b4
	bool InitBodyMeshByHead(BackpackAvatarHandle* AvatarHandle);// 0x234510c
	void HideHeadBone(bool IsHide);// 0x23fd89c
	bool HasSkinWeightProfileBySlotID(int SlotID, enum profilestate);// 0x23fd7d8
	void HandleHeadEntityFaceInfo(bool bNeedFaceInfo);// 0x23fd758
	enum[] GetVisibleAvatarSlots(bool bCheckInner, bool bCheckOuter);// 0x23fd624
	FString GetPlayerName();// 0x23fd594
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x237d450
	MaterialInterface* GetHighQualityBaseMaterial(MaterialInstance* matIns, MaterialInterface* AdvancedMat, bool FindBaseMat);// 0x23fd484
	int[] GetHandleParentSlot(BattleItemHandleBase* ItemHandle);// 0x23fd3a8
	AvatarEntityFactory* GetEntityFactory();// 0x237ceb8
	BattleItemHandleBase* GetDefaultHandle(enum SlotID);// 0x23fd328
	int[] GetDefaultBodyItemIDList();// 0x23fd294
	void GetDefaultBodyHandles(BackpackAvatarHandle* HeadHandle, out BackpackAvatarHandle*[] BodyHandleList);// 0x23fd1a8
	bool GetDefaultAvatar4ReadyPak(enum SlotID, out ItemDefineID DefaultAvatar);// 0x23fd0cc
	void GetCurAvatarIDList(out int[] IDList);// 0x23fd02c
	BackpackAvatarHandle* GetBattleItemFromResID(int resID);// 0x23fcfa4
	<int,FString> GetAvatarHiddenSlotMap();// 0x23fcec8
	bool EnableEquipAvatarPendantFeature();// 0x23fcea0
	void CopyFromOthers(CharacterAvatarComponent* Other, SkeletalMeshComponent* UseOwnMasterComp, enum[] CopySlots);// 0x23fcd2c
	void CopyFromOtherAvatarComp(CharacterAvatarComponent* Other, enum[] ExcludeSlots, bool NeedAsyncLoad);// 0x23fcbb0
	void ClearPendingDeleteEntity();// 0x23fcb9c
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x237c6d0
	bool CheckShouldEquipDefaultItem(int Slot);// 0x23fcb1c
	void CheckOverrideRigidBodyAsset();// 0x23fcb08
	bool CheckIsHiddenByOther(int itemResID);// 0x23fca88
	bool CheckIfAvatarPakDownloaded(BattleItemHandleBase* ItemHandle);// 0x237c5c8
	bool CheckEntityDisabled(BackpackAvatarHandle* AvatarHandle);// 0x23fca08
	void CheckAlreadyEquipped(BackpackAvatarHandle* AvatarHandle);// 0x23fc990
	MaterialInstance* ApplySSSMaterial(MaterialInstance* NormalSkinMat, MeshComponent* meshComp, FName SlotName);// 0x23fc880
	void ApplyMaterialOnlySkinSlot(BattleItemHandleBase* ItemHandle, MeshComponent* meshComp);// 0x23fc7c4
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* meshComp);// 0x237c08c

--------------------------------
Class: AsyncLoadRenderResReq
	RenderResSet[] RenderResList;//[Offset: 0x0, Size: 12]
	BattleItemHandleBase*[] AvatarHandleList;//[Offset: 0xc, Size: 12]
	int IsAutonomousAvatar;//[Offset: 0x18, Size: 4]
	bool NeedReAsyncMeshList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: RenderResSet
	SoftObjectPath MeshRes;//[Offset: 0x0, Size: 24]
	SoftObjectPath[] MatRes;//[Offset: 0x18, Size: 12]
	SoftObjectPath[] ParticleRes;//[Offset: 0x24, Size: 12]

--------------------------------
Class: PendingDeleteEntity
	AvatarEntity* PendingDeleteEntity;//[Offset: 0x0, Size: 4]
	bool NeedPutDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int SlotID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ChildHandleList
	ChildHandleInfo[] ChildHandles;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ChildHandleInfo
	BackpackAvatarHandle* ChildHandle;//[Offset: 0x0, Size: 4]
	int ParentSlot;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DefaultAvatarConfig
	ItemDefineID ItemID;//[Offset: 0x0, Size: 24]
	class BattleItemHandleBase* ItemHandle;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CharacterAvatarEntity.AvatarEntity.Object
	bool PendingRenderFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 1]
	int EquipedPendantSlotID;//[Offset: 0x1c0, Size: 4]
	int EquipedDefaultPendantSlotID;//[Offset: 0x1c4, Size: 4]
	FName[] NeedUnHideBone;//[Offset: 0x1c8, Size: 12]
	bool ForceHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	int[] ChildOf;//[Offset: 0x1d8, Size: 12]
	bool MarkMatOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	void UpdateVisibility();// 0x2385398
	void SetVisibilityProcess(bool Inner, bool Outer);// 0x2403694
	void SetSlotMeshByReplacedMark(bool ReplacedMark);// 0x2403614
	bool SetSlotHidden(int Slot, int DoHiddenSlot, bool ShouldHide);// 0x2403504
	void SetParticleVisiblity(bool Visible);// 0x2403484
	void SetInnerVisibility(bool isShow);// 0x2403404
	void ResetEntityBeforePushToPool(bool DisableCheck);// 0x2384eec
	bool ReplaceTargetSlotMesh(int SourceSlot, int DestSlot, bool ReplaceMark);// 0x24032f4
	void ReplaceTargetMaterial(int SourceSlot, int DestSlot, bool IsReplace);// 0x24031ec
	void RenderEntity(out SoftObjectPath SoftPath);// 0x2384e3c
	void RefreshVisable();// 0x24031d8
	void RefreshForAvatarVisibilityFreature(bool InTargetVisibility);// 0x2384d98
	bool PutOnEquipmentLogic(BattleItemHandleBase* ItemHandle);// 0x2384d10
	void PutOnDefaultEquipment(enum SlotType);// 0x2384c90
	void ProcessSelfBoneVisbility();// 0x24031c4
	void ProcessReplaceMaterial(bool NeedReplace);// 0x2403144
	void ProcessBoneVisibility(bool HideMark);// 0x24030c4
	void ParseAdditionalItem(SyncAdditionDataArray SyncData);// 0x2384a90
	void OnMeshLODChanged(int PredictedLOD);// 0x240304c
	void OnLoadParticles();// 0x236bc58
	bool IsConsiderAnimHiddenByLOD();// 0x2403024
	bool IsChildEntity();// 0x2402ffc
	bool IsAnimHiddenByLODEnable();// 0x23849a0
	bool IsAnimHiddenByLOD();// 0x2384970
	void GetReplacingSlots(out int[] DoReplaceSlots);// 0x2402f5c
	enum GetMeshType(SkeletalMesh* SelfMesh);// 0x2384694
	ItemDefineID GetDefineID();// 0x2384580
	SyncAdditionDataArray GetAdditionalData();// 0x2384490
	void EnterRenderPipeline();// 0x2384474
	void EnterLogicPipeline();// 0x2384458
	void DoPostLogic();// 0x235d4b8
	void DealWithSelfReplaceMaterial();// 0x2402f48
	void DealSlotHidden(bool ShouldHide);// 0x2402ec0
	void DealSelfReplaced();// 0x2402eac
	void DealSelfHide();// 0x2402e98
	void DealHideBone();// 0x2402e84
	bool CreateAndApplyResource(out SoftObjectPath SoftPath);// 0x2384298
	void CollectParticleResource(out <enum,ResourceList> CollectRes);// 0x2402d88
	void CollectMeshResource(out <enum,ResourceList> CollectRes);// 0x2402c8c
	void CollectMaterialResource(out <enum,ResourceList> CollectRes);// 0x2402b90
	void CollectDesiredResource(out <enum,ResourceList> CollectRes, bool DisableCheck);// 0x2402a44
	void CollectAnimResource(out <enum,ResourceList> CollectRes);// 0x2402948
	void ClearEquipmentRenderData(int CurrSlotID, bool putDefault);// 0x23841cc
	void ClearEquipmentLogic(bool putDefault);// 0x2384144
	void ClearEntity(bool ForceClear);// 0x238408c
	void CheckPendantForEquipmentPutOn(BackpackAvatarHandle* InItemHandle);// 0x24028c8
	void CheckPendantForEquipmentPutOff();// 0x24028ac
	void CheckDefaultPendantForEquipmentPutOn(BackpackAvatarHandle* InItemHandle);// 0x240282c
	void ApplySocketRelativeTransform(BackpackAvatarHandle* AvatarHandle);// 0x24027ac
	void ApplyOverrideMaterial();// 0x236bc04
	void ApplyMeshCompCollision();// 0x2402798
	void ApplyAnimation();// 0x2384070

--------------------------------
Class: ResourceList
	SoftObjectPath[] ResourcesPath;//[Offset: 0x0, Size: 12]

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0xa5c, Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0xa60, Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa64, Size: 1]
	<int> TouchIndexSet;//[Offset: 0xa68, Size: 60]
	byte OnFireTouchFingerIndex;//[Offset: 0xaa4, Size: 1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0xaac, Size: 1]
	int TouchEndTriggerSkillID;//[Offset: 0xab0, Size: 4]
	byte OnPreBuildFingerIndex;//[Offset: 0xab4, Size: 1]
	bool bPreBuildView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab5, Size: 1]
	bool bPreBuildClickDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab6, Size: 1]
	<int> TeamPlayerHPChangedIndexs;//[Offset: 0xab8, Size: 60]
	byte EditorArchiveDataType;//[Offset: 0xaf4, Size: 1]
	byte RuntimeArchiveDataType;//[Offset: 0xaf5, Size: 1]
	delegate OnPlayerContollerTouchBegin;//[Offset: 0xaf8, Size: 12]
	delegate OnPlayerContollerTouchJoystick;//[Offset: 0xb04, Size: 12]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0xb64, Size: 60]
	<FName,float> ScopeZoomMap;//[Offset: 0xba0, Size: 60]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0xbdc, Size: 12]
	byte[] IgnoreCameraMovePendingArray;//[Offset: 0xbe8, Size: 12]
	byte[] AddTouchMoveFingerArray;//[Offset: 0xbf4, Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc00, Size: 1]
	MotionControlConfig MotionControlConfig;//[Offset: 0xc04, Size: 40]
	byte OnFreeCameraFingerIndex;//[Offset: 0xc2c, Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0xc30, Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0xc34, Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0xc38, Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0xc3c, Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xc40, Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xc44, Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xc48, Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xc4c, Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xc50, Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xc54, Size: 4]
	float RecoverLagDelayTime;//[Offset: 0xc58, Size: 4]
	bool bInTombBoxGenerator_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5c, Size: 1]
	bool bInItemGenerator_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5d, Size: 1]
	float InItemGeneratorUIRefreshTime_C;//[Offset: 0xc60, Size: 4]
	float CurInItemGeneratorUIRefreshTime_C;//[Offset: 0xc64, Size: 4]
	float MotionControlPitchReverce_C;//[Offset: 0xc68, Size: 4]
	float MotionControlLeft_C;//[Offset: 0xc6c, Size: 4]
	float MotionControlRight_C;//[Offset: 0xc70, Size: 4]
	float MotionControlGravityX_C;//[Offset: 0xc74, Size: 4]
	bool bLandScapeOrientation_C;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 1]
	float MotionFilterX;//[Offset: 0xcc8, Size: 4]
	float MotionFilterY;//[Offset: 0xccc, Size: 4]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xcd0, Size: 12]
	Vector2D StartPosition;//[Offset: 0xcdc, Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0xce4, Size: 8]
	bool CouldStartFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd04, Size: 1]
	bool bCameraFreeMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd05, Size: 1]
	float CameraFreeMovingSpeedScale;//[Offset: 0xd08, Size: 4]
	FString FollowCandidateName;//[Offset: 0xd0c, Size: 12]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0xd18, Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0xd54, Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0xd60, Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0xd90, Size: 1]
	int8 CurrentBuildingIndex;//[Offset: 0xd91, Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0xd94, Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd98, Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9d, Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0xda0, Size: 12]
	LinearColor CrossHairColor;//[Offset: 0xdac, Size: 16]
	byte AutoAimType;//[Offset: 0xdbc, Size: 1]
	byte MeleeAutoAimType;//[Offset: 0xdee, Size: 1]
	byte HandFightAutoAimType;//[Offset: 0xe20, Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe52, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe53, Size: 1]
	Vector2D AimBtnPosC;//[Offset: 0xe54, Size: 8]
	Vector2D AimBtnSizeC;//[Offset: 0xe5c, Size: 8]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0xe70, Size: 12]
	ClientFatalDamageRecordData FatalDamageRecord;//[Offset: 0xe7c, Size: 220]
	ClientTeamerMaxKillerRecord[] ClientTeamerMaxKillerRecord;//[Offset: 0xf58, Size: 12]
	SensibilityConfig SensibilityConfig;//[Offset: 0xf64, Size: 216]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c, Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103d, Size: 1]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0x1040, Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0x104c, Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0x1058, Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0x1064, Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0x1070, Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0x107c, Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0x1088, Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0x1094, Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0x10a0, Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0x10ac, Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0x10b8, Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0x10c4, Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0x10d0, Size: 12]
	delegate OnPlayerEnterAvatarDisplay;//[Offset: 0x10dc, Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0x10e8, Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0x10f4, Size: 12]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0x1100, Size: 12]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0x110c, Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0x1118, Size: 12]
	delegate OnNightBeggan;//[Offset: 0x1124, Size: 12]
	delegate OnNightEnded;//[Offset: 0x1130, Size: 12]
	delegate OnIsInFortressChanged;//[Offset: 0x113c, Size: 12]
	delegate OnPlayerEnterOrLeaveFlyingVehicle;//[Offset: 0x1148, Size: 12]
	delegate OnPlayerEnterPossessActor;//[Offset: 0x1154, Size: 12]
	delegate OnDisPlaySubtitle;//[Offset: 0x1160, Size: 12]
	delegate OnSetDynamicSubtitle;//[Offset: 0x116c, Size: 12]
	int SelectedNightRenderConfig;//[Offset: 0x1178, Size: 4]
	delegate OnInitTaskData;//[Offset: 0x117c, Size: 12]
	delegate OnInitCollectionData;//[Offset: 0x1188, Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0x1194, Size: 12]
	<int,int> EmoteItemIDToBPIDMap;//[Offset: 0x11a0, Size: 60]
	<int,FString> EmoteBPIDToHandlePath;//[Offset: 0x11dc, Size: 60]
	<int,FString> EmoteItemIDToImagePathMap;//[Offset: 0x1218, Size: 60]
	delegate OnPlayerEnterArea;//[Offset: 0x1254, Size: 12]
	delegate OnPlayerKilling;//[Offset: 0x1260, Size: 12]
	delegate OnPickupItem;//[Offset: 0x126c, Size: 12]
	delegate OnDropItem;//[Offset: 0x1278, Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0x1284, Size: 12]
	delegate OnTaskConditionActived;//[Offset: 0x1290, Size: 12]
	delegate OnTaskConditionDeactived;//[Offset: 0x129c, Size: 12]
	delegate OnMyObserversChangeDelegate;//[Offset: 0x12b8, Size: 12]
	delegate OnApplicationactivatedDelegate;//[Offset: 0x12c4, Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0x12d0, Size: 108]
	delegate OnUITouchMoveEvent;//[Offset: 0x133c, Size: 12]
	delegate OnStartFireEvent;//[Offset: 0x1348, Size: 12]
	delegate OnStopFireEvent;//[Offset: 0x1354, Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0x1360, Size: 12]
	delegate OnReleaseScreen;//[Offset: 0x136c, Size: 12]
	delegate OnFingerMove;//[Offset: 0x1378, Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0x1384, Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0x1390, Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0x139c, Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0x13a8, Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0x13b4, Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0x13c0, Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0x13cc, Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0x13d8, Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0x13e4, Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0x13f0, Size: 12]
	delegate OnDamageToOther;//[Offset: 0x13fc, Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x1408, Size: 12]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0x1414, Size: 12]
	delegate OnLocalCharacterSignalHPChangeDelegate;//[Offset: 0x1420, Size: 12]
	delegate OnServerCharacterSignalHPChangeDelegate;//[Offset: 0x142c, Size: 12]
	delegate OnLocalCharacterSignalHPRemaingingTimeDelegate;//[Offset: 0x1438, Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0x1444, Size: 12]
	delegate OnRank;//[Offset: 0x1450, Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0x145c, Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0x1468, Size: 12]
	delegate OnUseMainSlot;//[Offset: 0x1474, Size: 12]
	delegate OnBackpackMainSlot;//[Offset: 0x1480, Size: 12]
	delegate OnRemoveMainSlot;//[Offset: 0x148c, Size: 12]
	delegate OnRepPlayerState;//[Offset: 0x1498, Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0x14a4, Size: 12]
	delegate OnGameModeStateChangeDelegate;//[Offset: 0x14b0, Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0x14c0, Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0x14cc, Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0x14d8, Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0x14e4, Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0x14f0, Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x150c, Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x1510, Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0x151c, Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0x1528, Size: 12]
	delegate OnPostTakeDamageDelegate;//[Offset: 0x1534, Size: 12]
	delegate OnLostConnection;//[Offset: 0x1540, Size: 12]
	delegate OnReconnected;//[Offset: 0x154c, Size: 12]
	delegate OnExitGame;//[Offset: 0x1558, Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x1564, Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1570, Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x157c, Size: 12]
	delegate OnSetPlayerMaker;//[Offset: 0x1588, Size: 12]
	delegate OnRefreshTrainingSensitivityList;//[Offset: 0x1594, Size: 12]
	delegate PlayerControllerPossessEvent;//[Offset: 0x15a0, Size: 12]
	delegate PlayerControllerUnPossessEvent;//[Offset: 0x15ac, Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x15d0, Size: 4]
	CanvasPanel* NewbieMonsterShowWidget;//[Offset: 0x15d4, Size: 4]
	float NewbieMonsterShowAngle;//[Offset: 0x15d8, Size: 4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x15dc, Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x15e0, Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x15e4, Size: 4]
	SecurityCollectorComponent* SecurityCollector;//[Offset: 0x15e8, Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ec, Size: 1]
	int DebugInitDropId;//[Offset: 0x170c, Size: 4]
	int ZombieTotalForOnePlayer;//[Offset: 0x1710, Size: 4]
	float ZombieTotalForOnePlayerRatio;//[Offset: 0x1714, Size: 4]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171c, Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171d, Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x1720, Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x1724, Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x1728, Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x172c, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x1730, Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x1734, Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1738, Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x173c, Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1760, Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x1784, Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x178c, Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x1794, Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x17b8, Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x17c0, Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x17c8, Size: 36]
	enum LastLimitDataState;//[Offset: 0x17ec, Size: 1]
	<enum,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x17f0, Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x182c, Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x1830, Size: 4]
	float MoveCameraSpeedLimit;//[Offset: 0x1834, Size: 4]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1838, Size: 1]
	bool ShouldShowCampInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1839, Size: 1]
	bool ShouldShowCameraDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183a, Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183b, Size: 1]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x183c, Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x1840, Size: 4]
	int SkillDeadBoxEffectIndex;//[Offset: 0x1850, Size: 4]
	bool bIsDebugImpactEffectForAutonomousGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1854, Size: 1]
	float ImpactEffectStartScaleDistanceGM;//[Offset: 0x1858, Size: 4]
	float ImpactEffectEndScaleDistanceGM;//[Offset: 0x185c, Size: 4]
	float ImpactEffectStartScaleValueGM;//[Offset: 0x1860, Size: 4]
	float ImpactEffectEndScaleValueGM;//[Offset: 0x1864, Size: 4]
	bool IsConsiderAdaptationOffsetY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1868, Size: 1]
	byte CurCameraMode;//[Offset: 0x1869, Size: 1]
	FName AutoScopeAimCompName;//[Offset: 0x1870, Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1878, Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x187c, Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x187d, Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x187e, Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x187f, Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1880, Size: 4]
	float CanMoveCDTime;//[Offset: 0x1884, Size: 4]
	float CanSprintCDTime;//[Offset: 0x1888, Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x188c, Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x1890, Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1894, Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x1898, Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x18a4, Size: 4]
	float SpecialDeviceRate;//[Offset: 0x18a8, Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x18ac, Size: 60]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e8, Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e9, Size: 1]
	GameModeConfig NormalModeConfig;//[Offset: 0x18ec, Size: 20]
	GameModeConfig TAModeConfig;//[Offset: 0x1900, Size: 20]
	HitEffectConfig HitEffectConfig;//[Offset: 0x1914, Size: 8]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x1920, Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1924, Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1925, Size: 1]
	float AccumulateYawInput;//[Offset: 0x1928, Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x192c, Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1930, Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1931, Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1932, Size: 1]
	float NoRespondArea;//[Offset: 0x1934, Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x1938, Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193c, Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x193d, Size: 1]
	byte sprintOptType;//[Offset: 0x193e, Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x1940, Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x1944, Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x1948, Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x194c, Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1950, Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x1951, Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x1954, Size: 4]
	float LastJoystickOpacity;//[Offset: 0x1958, Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195c, Size: 1]
	bool bFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195d, Size: 1]
	bool bKeepFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195e, Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x1960, Size: 60]
	float DoubleClickFireTimeThreshold;//[Offset: 0x199c, Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x19a0, Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x19a4, Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x19a8, Size: 4]
	float TouchForceFireThreshold;//[Offset: 0x19ac, Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b0, Size: 1]
	float TouchForceFireThreshold_TA;//[Offset: 0x19b4, Size: 4]
	bool bUseTouchForce_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b8, Size: 1]
	int EnableShovel_TA;//[Offset: 0x19bc, Size: 4]
	bool CrouchShovel_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c0, Size: 1]
	bool IsHelmetFightingHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c1, Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x19c4, Size: 4]
	byte TouchFireType;//[Offset: 0x19c8, Size: 1]
	float TestForce;//[Offset: 0x19cc, Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x19d0, Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x19dc, Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19e8, Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19e9, Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19ea, Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19eb, Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x19ec, Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x19f0, Size: 4]
	float AutoSprintThreshold;//[Offset: 0x19f4, Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x19f8, Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x19fc, Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x1a00, Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a04, Size: 1]
	float CurrentCameraFOV;//[Offset: 0x1a08, Size: 4]
	float MinFovChangeView;//[Offset: 0x1a0c, Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x1a10, Size: 48]
	int GameTipMsgID;//[Offset: 0x1a40, Size: 4]
	FString GameTipParam1;//[Offset: 0x1a44, Size: 12]
	FString GameTipParam2;//[Offset: 0x1a50, Size: 12]
	float GameTipAnimPlayRate;//[Offset: 0x1a5c, Size: 4]
	float AutoSprintCD;//[Offset: 0x1a9c, Size: 4]
	<uint32,TeamMateStateInfo> TeamMateStates;//[Offset: 0x1aa4, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x1ae0, Size: 60]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x1b1c, Size: 60]
	bool bEnableSignalBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5c, Size: 1]
	class GameMode[] AdditionalSignalBarDisplayGameModes;//[Offset: 0x1b60, Size: 12]
	delegate OnReceiveHasSignal;//[Offset: 0x1b6c, Size: 12]
	CharacterAvatar_WearInfo PlayerWearInfo;//[Offset: 0x1b7c, Size: 24]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1bb0, Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1c78, Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1c7c, Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1c80, Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x1c90, Size: 4]
	FString[] ForbitPickList;//[Offset: 0x1c9c, Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb4, Size: 1]
	int pickupPlayerChoice;//[Offset: 0x1cb8, Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cbc, Size: 1]
	int blackEndTime;//[Offset: 0x1cc0, Size: 4]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc4, Size: 1]
	delegate OnRepNewPawn;//[Offset: 0x1cc8, Size: 12]
	int GiftItemAppearCount;//[Offset: 0x1cd4, Size: 4]
	int GiftItemAppearCountTrehold;//[Offset: 0x1cd8, Size: 4]
	float RescueRemainingSeconds;//[Offset: 0x1cdc, Size: 4]
	float RescueTotalSeconds;//[Offset: 0x1ce0, Size: 4]
	float RescueReduceSeconds;//[Offset: 0x1ce4, Size: 4]
	float m_LastFindingPathReciveTime;//[Offset: 0x1ce8, Size: 4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cec, Size: 1]
	bool IsCurrentUsePersistStateView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ced, Size: 1]
	bool IsSkipCheckCameraView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cee, Size: 1]
	float FreeViewUpRate;//[Offset: 0x1cf0, Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x1cf4, Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x1cf8, Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cfc, Size: 1]
	int[] TouchCacheWeightSetting;//[Offset: 0x1d00, Size: 12]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d20, Size: 1]
	byte CurSightZoomFingerIndex;//[Offset: 0x1d64, Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x1d65, Size: 1]
	byte PlaceCakeFingerIndex;//[Offset: 0x1d66, Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d74, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x1dd0, Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x1e0c, Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x1e10, Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x1e14, Size: 4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x1e18, Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x1e1c, Size: 4]
	delegate OnObservedItemChanged;//[Offset: 0x1e48, Size: 12]
	int MapPathMarkID;//[Offset: 0x1e54, Size: 4]
	BattleItemData[] ObservedItemList;//[Offset: 0x1e74, Size: 12]
	IncNetArrayNew NetObservedItemList;//[Offset: 0x1e80, Size: 24]
	delegate OnViewTargetPoseChangedDelegate;//[Offset: 0x1eec, Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x1ef8, Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x1f04, Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x1f10, Size: 12]
	delegate OnOverrideClickQuitSpectating;//[Offset: 0x1f1c, Size: 12]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x1f28, Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f34, Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x1f38, Size: 12]
	uint32[] OBAvaliablePlayerKeys;//[Offset: 0x1f44, Size: 12]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x1f94, Size: 4]
	ObservedData ObservedData;//[Offset: 0x1f98, Size: 88]
	delegate OnSignalHPChanged;//[Offset: 0x1ff0, Size: 12]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2001, Size: 1]
	delegate OnToggleOBMapShowHide;//[Offset: 0x2008, Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x2014, Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x2020, Size: 12]
	delegate WeaponEquipAttachment;//[Offset: 0x202c, Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x2038, Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x2054, Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x2058, Size: 4]
	int CurrentOBWidgetFarStyteDistance;//[Offset: 0x205c, Size: 4]
	int CurrentOBWidgetHideStyteDistance;//[Offset: 0x2060, Size: 4]
	bool OBNoUIMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2068, Size: 1]
	int fireMode;//[Offset: 0x2070, Size: 4]
	bool rightFireInvisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2074, Size: 1]
	float fireDelayMode2;//[Offset: 0x2078, Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x207c, Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x207d, Size: 1]
	bool bFireNotToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x207e, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x207f, Size: 1]
	STExtraBaseCharacter*[] nowNearCharacterList;//[Offset: 0x2080, Size: 12]
	STExtraVehicleBase*[] nowNearVehicleList;//[Offset: 0x208c, Size: 12]
	STExtraVehicleBase*[] nowNearBlowVehicleList;//[Offset: 0x2098, Size: 12]
	STExtraShootWeapon*[] nowShotWeaponList;//[Offset: 0x20a4, Size: 12]
	STExtraShootWeapon*[] nowOneShotWeaponList;//[Offset: 0x20b0, Size: 12]
	Actor*[] nowGrenadeList;//[Offset: 0x20bc, Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c8, Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x20cc, Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x20d8, Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x20e4, Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x20f0, Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x20fc, Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2109, Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x210c, Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x2118, Size: 12]
	delegate OnStartShrinkCircle;//[Offset: 0x2124, Size: 12]
	delegate OnInBomingArea;//[Offset: 0x2130, Size: 12]
	delegate OnReceiveInviteNextBattle;//[Offset: 0x213c, Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2148, Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x214c, Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x2158, Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2164, Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x2168, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x216c, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x2170, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x2174, Size: 4]
	float RealTimePawnHeight;//[Offset: 0x2178, Size: 4]
	float AntiCheckParachuteTime;//[Offset: 0x217c, Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x2194, Size: 4]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x21b4, Size: 16]
	delegate OnViewTargetChange;//[Offset: 0x21c4, Size: 12]
	Actor* ThePlane;//[Offset: 0x21d0, Size: 4]
	delegate OnClientToServerWeaponCreated;//[Offset: 0x21dc, Size: 12]
	float GameAssistantJoyStickOpacity;//[Offset: 0x21e8, Size: 4]
	STExtraWeapon*[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x21f0, Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x2208, Size: 4]
	FString murderName;//[Offset: 0x2210, Size: 12]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221c, Size: 1]
	FString murderUID;//[Offset: 0x2220, Size: 12]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x222c, Size: 1]
	InformPlayerTypeInfo[] DyingDamageInstigatorsList;//[Offset: 0x2230, Size: 12]
	FString LastBreathMurder;//[Offset: 0x223c, Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2248, Size: 1]
	FString LastBreathMurderUID;//[Offset: 0x224c, Size: 12]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2258, Size: 1]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x225c, Size: 4]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x22c4, Size: 60]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x2300, Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x2348, Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x234c, Size: 4]
	int CurrOBAirDropID;//[Offset: 0x2350, Size: 4]
	WaterSoundVolume*[] WaterSoundVolumeList;//[Offset: 0x2354, Size: 12]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x2360, Size: 60]
	Vector AlwaysLoadLevelOrigin;//[Offset: 0x2440, Size: 12]
	float AlwaysLoadLevelRadius;//[Offset: 0x244c, Size: 4]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x2468, Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246c, Size: 1]
	float NetCullDistanceFactorForLowMemory;//[Offset: 0x2470, Size: 4]
	FString ClientActivePlatformProfileName;//[Offset: 0x2474, Size: 12]
	bool HasPostExecDSCommandArrived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24bc, Size: 1]
	delegate OnDSCommandArrived;//[Offset: 0x24c0, Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x24cc, Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d0, Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x24d4, Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d8, Size: 1]
	StateType ServerStateType;//[Offset: 0x24e0, Size: 16]
	StateType ClientStateType;//[Offset: 0x24f0, Size: 16]
	bool ConcertNeedInitParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2501, Size: 1]
	<STExtraBaseCharacter*> FriendOBRelevancyCharacterSet;//[Offset: 0x2504, Size: 60]
	PreProcessedRelevancySet PreProcessedRelevancySet;//[Offset: 0x2540, Size: 60]
	int[] ArrGrenadeIDs;//[Offset: 0x2584, Size: 12]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2594, Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2595, Size: 1]
	bool bIsHideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2596, Size: 1]
	bool bShouldHideAllIngameUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2597, Size: 1]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a8, Size: 1]
	bool bEnableNetRelevantCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a9, Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25aa, Size: 1]
	bool bGameModeEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25ab, Size: 1]
	bool bGameModeEnableAutonomousOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25ac, Size: 1]
	bool bEnableNewObserverSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25ad, Size: 1]
	bool UseHeartbeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25bc, Size: 1]
	float HeartbeatFrequency;//[Offset: 0x25c0, Size: 4]
	int64 LastHeartbeatTime;//[Offset: 0x25c8, Size: 8]
	HeartbeatData HeartbeatData;//[Offset: 0x25d0, Size: 24]
	float ObjArrayUsageStatisticFrequency;//[Offset: 0x25e8, Size: 4]
	MonsterTreasureBox* CurOperatedMonsterTreasureBox;//[Offset: 0x25f4, Size: 4]
	MonsterTreasureBox*[] ClientMonsterTreasureBoxList;//[Offset: 0x25f8, Size: 12]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x2604, Size: 4]
	Actor*[] ServerTreasureBoxList;//[Offset: 0x2608, Size: 12]
	Actor* CurOperatedTreasureBox;//[Offset: 0x2614, Size: 4]
	Actor* GameModeActor;//[Offset: 0x2618, Size: 4]
	FString DefaultHUDClassPath;//[Offset: 0x2624, Size: 12]
	BountyBoughtInfo[] BountyBoughtItemList;//[Offset: 0x2630, Size: 12]
	Actor* CandidateBoardingHelicopter;//[Offset: 0x263c, Size: 4]
	RescueHelicopterBase* CachedHelicopter;//[Offset: 0x2640, Size: 4]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x2644, Size: 4]
	MaterialInstanceDynamic*[] BloodDecalMaterials;//[Offset: 0x2648, Size: 12]
	<int,BackpackDecalHandle*> LocalDecalHandleMap;//[Offset: 0x2654, Size: 60]
	<byte,SlotWeaponData> SavedWeaponSlotData;//[Offset: 0x2690, Size: 60]
	int SelectedZombieWaveIndex;//[Offset: 0x26d4, Size: 4]
	bool IsTickToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d8, Size: 1]
	bool IsOnceToBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26ec, Size: 1]
	int BuildCnt;//[Offset: 0x26f0, Size: 4]
	int BuildMax;//[Offset: 0x26f4, Size: 4]
	int BuildIndex;//[Offset: 0x26f8, Size: 4]
	bool bIsBuildUIEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26fc, Size: 1]
	delegate OnPlayerSelectZombieWave;//[Offset: 0x2700, Size: 12]
	int ConstructableConfigurations;//[Offset: 0x2720, Size: 4]
	int PlayerStartSerialNum;//[Offset: 0x2728, Size: 4]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x272c, Size: 4]
	bool bIsDoingRespawnReinitUIWork;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x276c, Size: 1]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x2770, Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x277c, Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2780, Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2781, Size: 1]
	WaterSwimActor*[] ClientLocalSwimActors;//[Offset: 0x2784, Size: 12]
	AutoTestSystemComponent* AutoTestSystemComp;//[Offset: 0x2790, Size: 4]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x2794, Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x27a0, Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x27a4, Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x27a8, Size: 60]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x27e4, Size: 60]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x2824, Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x2828, Size: 4]
	int BOptimizeBulletHit_Server;//[Offset: 0x282c, Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x2830, Size: 68]
	bool bIsOpeningGameModeGuideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2874, Size: 1]
	TaskControllerComponent* TaskControllerComponent;//[Offset: 0x2878, Size: 4]
	bool bHasInitTaskController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x287c, Size: 1]
	SeasonTaskListener* SeasonTaskListener;//[Offset: 0x2880, Size: 4]
	STExtraPlayerController*[] TeammatesYouKilled_UsedByServer;//[Offset: 0x289c, Size: 12]
	uint32 LastKillerKey;//[Offset: 0x28ac, Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x28b0, Size: 4]
	DelaySendingMsgComponent* DelaySendingMsgComp;//[Offset: 0x2918, Size: 4]
	bool bHasWinFinalGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291c, Size: 1]
	bool bScaleScreenSizeCullingDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291d, Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291f, Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x2920, Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x2924, Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x2930, Size: 8]
	int IdCardMarkType;//[Offset: 0x293c, Size: 4]
	Rotator SavedRotation;//[Offset: 0x2944, Size: 12]
	TimerHandle TimerHandle_ClearFireSign;//[Offset: 0x2950, Size: 8]
	float ClearFireSignDelayTime;//[Offset: 0x2958, Size: 4]
	bool DisableJoystickMultiControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2968, Size: 1]
	int VehicleControlMode;//[Offset: 0x296c, Size: 4]
	bool VehicleJoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2970, Size: 1]
	Actor*[] ZombieList;//[Offset: 0x2974, Size: 12]
	bool bLastClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a8, Size: 1]
	HitEffectComponent* HitEffectComponent;//[Offset: 0x29ac, Size: 4]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29b0, Size: 1]
	<int,int> ActivitdedIDMap;//[Offset: 0x29b4, Size: 60]
	TeamateStateChangedCompressData TeammateStateChangeCompressedData;//[Offset: 0x29f0, Size: 36]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x2a14, Size: 20]
	float StreamingDistanceScaleFlying;//[Offset: 0x2a28, Size: 4]
	int[] PostPickupItems;//[Offset: 0x2a2c, Size: 12]
	bool bIsPlayerInWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a38, Size: 1]
	delegate OnPlayerInOutWhiteCircleChangedDelegate;//[Offset: 0x2a3c, Size: 12]
	delegate OnShowCharmPlayerCountDownDelegate;//[Offset: 0x2a48, Size: 12]
	delegate PlayerVehiclePawnStateChanged;//[Offset: 0x2a54, Size: 12]
	TrainingGroundWidget* TrainingUIBP;//[Offset: 0x2a74, Size: 8]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7c, Size: 1]
	bool NeedScreenShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7d, Size: 1]
	FrameCaptureActor* FrameCapturePtr;//[Offset: 0x2a80, Size: 4]
	class FrameCaptureActor* FrameCaptureClass;//[Offset: 0x2a84, Size: 4]
	int GlideCount;//[Offset: 0x2a8c, Size: 4]
	WingSyncInfo selfWingInfo;//[Offset: 0x2a94, Size: 12]
	int SpecMotionRestCostCount;//[Offset: 0x2aa0, Size: 4]
	int GlideSubType;//[Offset: 0x2aa4, Size: 4]
	bool bShouldShowGlideConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2aac, Size: 1]
	int GlideConfigState;//[Offset: 0x2ab0, Size: 4]
	bool isGMTestKillFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2afc, Size: 1]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x2b00, Size: 4]
	bool IsGlobalTeamAssembleDisplayOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b04, Size: 1]
	bool IsEnableTeamAssembleDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b05, Size: 1]
	delegate TeamAssembleDisplayChanged;//[Offset: 0x2b08, Size: 12]
	TeamAssembleAvatarDisplayInfo[] TeamAssemableDisplayInfoList;//[Offset: 0x2b14, Size: 12]
	delegate OnSwitchToTeamAssembleViewState;//[Offset: 0x2b20, Size: 12]
	int TimeToSwitchToTeamAssembleView;//[Offset: 0x2b2c, Size: 4]
	float TeamAssembleTimeTolerance;//[Offset: 0x2b30, Size: 4]
	int TeamAssembleMinPlayers;//[Offset: 0x2b34, Size: 4]
	delegate MainUIVisibilityChanged;//[Offset: 0x2b38, Size: 12]
	bool HasSwitchToTeamAssembleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b44, Size: 1]
	int DynamicPointLightsNum;//[Offset: 0x2b48, Size: 4]
	int LastDynamicPointLightsNum;//[Offset: 0x2b4c, Size: 4]
	bool HasCheckUpdateTeamAssemableData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b50, Size: 1]
	int TimeOffsetToUpdateTeamAssemable;//[Offset: 0x2b54, Size: 4]
	int DisplayWeaponID;//[Offset: 0x2b58, Size: 4]
	int DisplayVehicleID;//[Offset: 0x2b5c, Size: 4]
	int DisplayBackpackID;//[Offset: 0x2b60, Size: 4]
	int DisplayHelmetID;//[Offset: 0x2b64, Size: 4]
	float TVLiveEventDataCollectInterval;//[Offset: 0x2b68, Size: 4]
	StateType StateTypeOnReplay;//[Offset: 0x2b70, Size: 16]
	class NewbieGuideComponent* NewbieCompPath;//[Offset: 0x2b80, Size: 40]
	uint32[] BornLandVehicleRelevance;//[Offset: 0x3070, Size: 12]
	STExtraVehicleBase* OwnerVehicleOnBornLand;//[Offset: 0x307c, Size: 4]
	TickControlComponent* TickControlComp;//[Offset: 0x3090, Size: 4]
	bool LockControllerYawToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3094, Size: 1]
	OccupationManagerComponent* occupationManager;//[Offset: 0x3098, Size: 8]
	enum CurrentWeaponFunction;//[Offset: 0x30a8, Size: 1]
	float WeaponFunctionChangingInterval;//[Offset: 0x30ac, Size: 4]
	bool bWeaponFunctionIsChanging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30b0, Size: 1]
	float WeaponFunctionLastChangingTime;//[Offset: 0x30b4, Size: 4]
	DynamicWeatherExMgr* DynamicWeatherExMgr;//[Offset: 0x30b8, Size: 4]
	int WeatherIndex;//[Offset: 0x30c8, Size: 4]
	bool bDstWeatherFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d8, Size: 1]
	bool bCanDropItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d9, Size: 1]
	class AssetPreLoadingComponent* AssetPreLoadingComponentClassSoftPtr;//[Offset: 0x30e0, Size: 40]
	int EnableAssetPreLoadingMinDeviceLevel;//[Offset: 0x3108, Size: 4]
	bool bEnableAssetPreLoadingOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310c, Size: 1]
	TouchInterface* MainControllerwTouchInterface;//[Offset: 0x3110, Size: 8]
	bool bIsLayoutLRSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3119, Size: 1]
	bool bDisplayDamageNumber;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311a, Size: 1]
	Object*[] CachedPreLoadClassList;//[Offset: 0x3120, Size: 12]
	class ObserverHostComponent* ObserverHostComponentPath;//[Offset: 0x3130, Size: 40]
	ObserverHostComponent* ObserverHostComponent;//[Offset: 0x3158, Size: 4]
	bool bReceivedOnRepPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315c, Size: 1]
	bool bReceivedOnRepPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315d, Size: 1]
	OBTypeUISource* OBTypeUISourceOjb;//[Offset: 0x3160, Size: 4]
	delegate VaultFailDSCppDelegate;//[Offset: 0x3168, Size: 12]
	delegate FailedOnClientDelegate;//[Offset: 0x3174, Size: 12]
	bool bIsOpenGraySceneOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3180, Size: 1]
	bool bSceneIsGrayOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3181, Size: 1]
	float FadeGrayInterpSpeed;//[Offset: 0x3184, Size: 4]
	float TotalTalkTime;//[Offset: 0x3188, Size: 4]
	delegate OnRoomModeReceive;//[Offset: 0x318c, Size: 12]
	bool bShowResPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a9, Size: 1]
	int iCampToolStatusFromServer;//[Offset: 0x31ac, Size: 4]
	bool bCampPrivileges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b0, Size: 1]
	bool bShowAirLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b1, Size: 1]
	bool bUseDistanceMeasurement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b2, Size: 1]
	bool bShowTeammateKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b3, Size: 1]
	bool bDice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b4, Size: 1]
	bool bCampGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b5, Size: 1]
	RCRBodyBoundingSize RCRBodyBoundingSizeConfig;//[Offset: 0x31c4, Size: 212]
	<FString> CurrentUIStyleNameSet;//[Offset: 0x329c, Size: 60]
	FString[] UIStyleWhiteList;//[Offset: 0x32d8, Size: 12]
	bool bCurJoystickVisState_old;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e4, Size: 1]
	bool bJoystickCollapsedByUIStyle_old;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e5, Size: 1]
	UserWidgetStyle*[] CurrentApplyStyle;//[Offset: 0x32e8, Size: 12]
	<int,enum> PopKartMarkIDList;//[Offset: 0x32f4, Size: 60]
	float PopKartMarkVisibilityDistance;//[Offset: 0x3330, Size: 4]
	class Actor* WeaponDamageMonitorSoftClass;//[Offset: 0x3338, Size: 40]
	int CharmValue;//[Offset: 0x3360, Size: 4]
	FString playerFaceInfo;//[Offset: 0x3364, Size: 12]
	bool bPlayGunMasterVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3370, Size: 1]
	delegate OnTouchInterfaceChangedDelegate;//[Offset: 0x3374, Size: 12]
	delegate OnBountyBuyItemListDelegate;//[Offset: 0x3380, Size: 12]
	delegate OnPlayerHitFireBtnDelegate;//[Offset: 0x338c, Size: 12]
	STExtraBaseCharacter* DelayReloadAvatarChar;//[Offset: 0x339c, Size: 8]
	PlayerCameraPossessManager* OwnedCameraPossessManager;//[Offset: 0x33a4, Size: 4]
	int CurrentMarkInstanceID;//[Offset: 0x33a8, Size: 4]
	bool bIsEnableUploadPersonalOP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33b0, Size: 1]
	ScreenAppearanceActor* ScreenAppearanceMgr;//[Offset: 0x33b4, Size: 4]
	delegate OnClientBountyBuyItemResult;//[Offset: 0x33b8, Size: 12]
	void WakeUpVehicles(float Radius);// 0x26c5394
	void VisualizeItem();// 0x235d4b8
	void ViewVehicle(float YawAdd, float PitchAdd, Vector Loc);// 0x26c5280
	void ViewPlane();// 0x26c526c
	void UseSkill(int SkillID);// 0x26c51f4
	void UserDropItemOperation(ItemDefineID DefineID);// 0x26c516c
	void UseItem(int ID);// 0x26c50f4
	void UpdateSurfboardUI();// 0x26c50e0
	void UpdateSelfRevivalCountdown(int CurCountdown);// 0x26c5060
	void UpdatePoseViewPitchLimit();// 0x26c504c
	void UnLoadUserWidgetStyleByPath(FString PathString);// 0x26c4fbc
	void UnLoadUserWidgetStyle(UserWidgetStyle* Style);// 0x26c4f44
	void UnLoadAllUserWidgetStyle();// 0x26c4f30
	void UnLoadAllLand(bool bUnLoadAll);// 0x26c4eb0
	void UnLoadAllCollision(bool Unload);// 0x26c4e30
	void UGCServerBountyBuyItemSingle(int ItemID, int ItemCount);// 0x26c4d34
	void UGCServerBountyBuyItem(BountyBuyingInfo InBuyingInfo);// 0x26c4c7c
	void UGCClientSyncBountyBoughtItemList(const BountyBoughtInfo[] ServerBountyBoughtItemList);// 0x26c4be4
	void UGCClientBountyBuyItemResult(BountyBuyingResultInfo InBuyingResultInfo);// 0x26c4b48
	void Turn(float Rate);// 0x26c4ad0
	void TryExitVehicle();// 0x2486fdc
	void TryEnterVehicle(STExtraVehicleBase* Vehicle, enum SeatType);// 0x2486f20
	void TryEnterClosestVehicle(enum SeatType);// 0x26c4a58
	bool TryControlRemotePawn(Pawn* ControledPawn);// 0x26c49d8
	void TryChangeToVehicleSeat(int SeatIndex);// 0x26c4960
	void TryChangeSeatVehicle();// 0x26c494c
	void TriggerOnUITouchMoveEvent(Vector Loc);// 0x26c48cc
	void TraceTestLandscape(float X, float Y, float Z);// 0x26c47cc
	void TouchMove(Vector Loc, byte FingerIndex);// 0x26c4700
	bool TouchEnd(byte PressType);// 0x26c4680
	void TouchBegin(byte PressType);// 0x26c4608
	void ToServerRPC_ChangeTeammateImprisonmentStatus(FString TeammateName, bool bDoImprisonment);// 0x26c44e4
	void ToggleVehicleSync(bool Val);// 0x26c4464
	void ToggleUserCmdDeltaSendAck(bool Val);// 0x26c43e4
	void ToggleUserCmdDeltaFlag(bool Val);// 0x26c14b4
	void ToggleUserCmdDeltaCheckSum(bool Val);// 0x26c4364
	void ToggleUserCmdDelta(bool Val);// 0x26c14b4
	void ToggleServerAcknowledgePossession(bool Val);// 0x26c42e4
	void ToggleSceneInpute();// 0x26c42c4
	void ToggleOBTPPFollowFreeView();// 0x26c42b0
	void ToggleEnableOBBulletTrackEffectSetting(bool bEnable);// 0x26c4230
	void ToggleCheatLocation(bool Val);// 0x26c41b0
	void ToggleAICruising();// 0x26c419c
	void TextCreateBeKilledMaxKillerTip(int inNumber);// 0x26c4124
	void TextCreateAddKillMaxKillerTip(int inNumber);// 0x26c40ac
	void TestSpawnFakeChar();// 0x235d4b8
	void TestShowTeamerKillTip(int ResultType, int KillNum, int ResPlatformID);// 0x26c3fac
	void TestShowLeftQueueTip();// 0x26c3f98
	void TestSelfIsMaxKillerRecordCont(int Count);// 0x26c3f20
	void TestSelfIsMaxKillerRecord();// 0x26c3f0c
	void TestNewbieGuide(int InItemID);// 0x26c3e94
	void TestMapMarkClient(int inAlertID, int IconID, int testFuncIndex);// 0x26c3d94
	void TestFindStraightPath(bool bEnable, float DistanceLimit);// 0x26c3ccc
	void TestExcellentOperation(int StartOperationTypeID, int Count, bool CurIsSpectating);// 0x26c3bc4
	void TestEnterAvatarDisplay();// 0x26b1a84
	void TestEnableTeamAssemable();// 0x26c3bb0
	void TestDropAllAndReplace();// 0x26c3b9c
	void TestCreateNewEspecialFatalDamage(int inNumber);// 0x26c3b24
	void TestAyncLoadFXWidget(int Index, int Type);// 0x26c3a68
	void TestAddOperationTip(int TipID);// 0x26c39f0
	void TeamNoAlwaysRelevant();// 0x26c39dc
	void TeamMateUAVStateChanged(STExtraPlayerState* STPlayerState, TeamateStateUAVChangedCompressData ChangedCompressedData);// 0x26c38f4
	void TeamMateStateChanged(STExtraPlayerState* STPlayerState, TeamateStateChangedCompressData ChangedCompressedData);// 0x26c37f0
	int TakeItem(ItemDefineID DefineID, int Count, bool bCallHandleDrop);// 0x26c36cc
	void SwitchViewTarget();// 0x26c36b8
	void SwitchToDeadBox();// 0x26c36a4
	void SwitchTeamAssembleDisplayGlobally(bool IsEnable);// 0x26c3624
	void SwitchStaticConfigZombie();// 0x26c35c8
	void SwitchSpawnZombie();// 0x26c356c
	void SwitchMouseCursorShowState();// 0x26c3558
	void SwitchGenerateItem();// 0x26c34fc
	void SwitchCameraModeScope(byte Mode, STExtraBaseCharacter* InCharacter);// 0x26c3440
	void SwitchCameraModeByOrder();// 0x26c342c
	void SwitchCameraMode(byte Mode, STExtraBaseCharacter* InCharacter, bool IsUseLerpFPP, bool IsForceSwitch);// 0x26c32d0
	void SwapWeaponByPropSlotOnServer(byte Slot1, byte Slot2, bool bForce);// 0x26c31c8
	void StopRotatingOBFreeViewCameraCounterclockwise();// 0x235d4b8
	void StopRotatingOBFreeViewCameraClockwise();// 0x235d4b8
	void StopBuildingMode(bool HideUI, bool ShrinkMenu);// 0x26c30ec
	void StopAutoDoorTest(int ConfigGraphIndex);// 0x26c3074
	void StatFindStraightPath();// 0x26c3060
	void StatClientAllWeaponsInfo();// 0x26c304c
	void StatBackpackItemsData();// 0x235d4b8
	void StartStateSign(enum State);// 0x26c2fd4
	void StartRotatingOBFreeViewCameraCounterclockwise();// 0x235d4b8
	void StartRotatingOBFreeViewCameraClockwise();// 0x235d4b8
	void StartRecord();// 0x26c2fc0
	void StartReadyCountDown();// 0x26c2fac
	void StartPreBuildingMode();// 0x26c2f8c
	void StartLandOnGroundAfterJumpPlane();// 0x26c2f78
	void StartGame();// 0x26c2f64
	void StartFreeCamera(byte FigerIndex);// 0x26c2eec
	void StartAutoDoorTest(int ConfigGraphIndex, float WorldSizeX, float WorldSizeY, float BlockLoadTime, float WorldLEftTopX, float WorldLeftTopY, float BlockSizeX, float BlockSizeY);// 0x26c2c84
	void StartAirDropSpecified(float X, float Y);// 0x26c2bc8
	void StartAirDrop(int Index);// 0x26c2b50
	void StartAirAttackSpecified(float X, float Y, float Radius);// 0x26c2a50
	void StartAirAttack(int Index);// 0x26c29d8
	void SpectatorCameraChange_Broadcast(bool bDie);// 0x26c2908
	void SpawnWingManMiniMap(out const Vector Pos);// 0x26c2878
	void SpawnWeaponDamageMonitor(float Distance);// 0x26c27c4
	void SpawnVehicleWithPath(FString Path);// 0x26c2734
	void SpawnVehicle();// 0x26c2720
	void SpawnBattleFlagActor(STExtraBaseCharacter* Inviter, STExtraBaseCharacter* Recevier, int Type);// 0x46f6b154
	void SpawnAITest(int Num, byte BehaviorTreeIndex, float Radius, out FString AvatarList);// 0x26c25b0
	void SpawnAITeam(int Num, int AITeamID, byte Difficulty);// 0x26c24b0
	void SpawnAI(int Num, byte Difficulty, bool bAIRandomlySpawn);// 0x26c23a8
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x26c2330
	void SimulateTouch(bool IsLoop);// 0x26c22b0
	void ShowVaultEnable();// 0x26c2294
	void ShowTouchInterface(bool bShow);// 0x26c220c
	void ShowTimeFromStartOfServer(float serverSec);// 0x26c218c
	void ShowTimeFromStart();// 0x26c2178
	void ShowSpeedAndAdditionalDamage();// 0x235d4b8
	void ShowPoints(const Vector[] Points, const Color Color, float LifeTime);// 0x26c2060
	void ShowNavLink(float Meters);// 0x236ffe8
	void ShowMovePath(const Vector[] Path);// 0x26c1fc8
	void ShowHideMainUI(bool bShow);// 0x26c1f48
	void ShowGM();// 0x26c1f34
	void ShowFireBtn(bool bShow);// 0x46f6b154
	void ShowBulletShoot(Vector StartLoc, Rotator Rot);// 0x26c1e5c
	void ShowBox(const Vector Center, const Vector Box, const Quat Rotation, const Color Color, bool bPersistentLines, float LifeTime, byte DepthPriority, float Thickness);// 0x26c1be0
	void ShowAnimationButton(bool isShow, int NewUIType);// 0x26c1b10
	void ShowAllRoles();// 0x26c1afc
	bool ShouldIgnoreTouchMove(byte FingerIndex);// 0x26c1a70
	bool ShouldForceFPPView(STExtraPlayerCharacter* InCharacter);// 0x26c19f0
	void SetVirtualStickVisibility(bool bJSVisiable);// 0x26c1970
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint, bool bUIOnly);// 0x26c18a0
	void SetVirtualAutoHideMode(bool AutoHide, float AutoHideTime);// 0x26c17d8
	void SetViewYawLimit(float YawMin, float YawMax);// 0x26c171c
	void SetViewPitchLimit(float PitchMin, float PitchMax);// 0x26c1660
	void SetupTeamAssembleDisplayInfoBlueprint();// 0x46f6b154
	void SetupTeamAssembleDisplayInfo();// 0x26c164c
	void SetTouchMoveCache(out const int[] EachMoveWeightSetting);// 0x26c15ac
	void SetTimeSpeedFactor(float Val);// 0x26c1534
	void SetTimeSpeedCheck(bool Val);// 0x26c14b4
	void SetTickBuild(bool IsOpen, bool IsSelfOnly);// 0x26c13e4
	void SetTeammateForbitPick(bool bForbit, int LogType);// 0x26c12d4
	void SetSubTitleDynamicInfo(FString Key, FString Value);// 0x26c11dc
	void SetStateLeftTime(int LeftTime);// 0x26c1164
	void SetSpeed(float Modifier);// 0x26c10ec
	void SetSkillFingerIndex(byte FingerIndex);// 0x26c1074
	void SetServerLevelLoadingMode(bool bNewLoadAll);// 0x23910d8
	void SetScopeFingerIndex(bool TouchBegin, byte FingerIndex);// 0x26c0fac
	void SetPlayerMark(Vector Loc);// 0x26c0ef0
	void SetPlayerMapMultiMark(Vector NewLoc, bool bAdd, int MaxNum, bool bClearAll);// 0x26c0d20
	void SetPlaneEnabled(bool InEnable);// 0x26c0ca0
	void SetPeekFingerIndex(bool TouchBegin, byte FingerIndex, bool AutoCancelPeek);// 0x26c0b8c
	void SetNoFalling(float Value);// 0x26c0b14
	void SetNoCollison();// 0x26c0b00
	void SetMyObserversTeamID(int InTeamID);// 0x26c0a88
	void SetMovable(bool IsMovable);// 0x26c0a08
	void SetMaxHealth(float HP);// 0x26c0990
	void SetLandCollison(bool HasCollision);// 0x26c0910
	void SetJumpVel(int InVel);// 0x236ffe8
	void SetJoyStickScale(float JSScale);// 0x26c0898
	void SetJoystickOperatingMode(byte OperatingMode, float GoStraightAngle);// 0x26c07dc
	void SetJoyStickOpacity(float JSOpacity);// 0x26c0764
	void SetJoyStickInteractionSize(Vector2D JSInteractionSize);// 0x26c06f4
	void SetJoystickFreeViewOpacity(bool isOpenFreeView);// 0x26c0674
	void SetJoyStickCenter(Vector2D JSCenter);// 0x26c0604
	void SetIsSnowy(bool bSnowy);// 0x26c0584
	void SetIsRainy(bool bRainy);// 0x26c0504
	void SetIsLayoutLRSwitchOpened(bool bInIsLayoutLRSwitchOpened);// 0x26c0484
	void SetIsBlizzard(bool bBlizzard);// 0x26c0404
	void SetGameStateReconnectInfoToClient(ReConnectGameStateInfo ReConnectInfo);// 0x26c02d8
	void SetGameStateModeUI(const FString[] ModeUIMgr);// 0x26c01e4
	void SetGameModeID(FString GameModeID);// 0x26c0100
	void SetEnableVoiceByPlayerKey(STExtraPlayerState* State, bool Enable);// 0x26c003c
	void SetEnableMoveInputStateSixteenDir(bool Enable);// 0x26bffbc
	void SetCustomFlightRoute(float StartX, float StartY, float EndX, float EndY);// 0x26bfe74
	void SetCurrentCameraFOV(float FOV, byte Mode);// 0x26bfd70
	void SetControlRotation(out const Rotator NewRotation);// 0x26bfce4
	void SetClientSpawnAndBackpackWeaponReplicatedDataArray(uint32 CharacterGUID, const ItemDefineID[] DataList);// 0x26bfbd4
	void SetCirCenterFixed(bool Enable, float X, float Y);// 0x26bfac8
	void SetCanJump(bool CanJump);// 0x26bfa48
	void SetCanCloseParachute(bool CanCloseParachute);// 0x26bf9c8
	void SetCameraFreeMoveSpeedScale(const float InCameraFreeMoveSpeedScale);// 0x26bf950
	void SetbShowJudgePlayerList(bool bShowJudge);// 0x26bf8d0
	void SetBlueCircleRaidationHiddenInGame(bool bNewHidden);// 0x26bf850
	void SetBlueCircleHiddenInGame(bool bNewHidden);// 0x26bf7d0
	void SetAngledSightFingerIndex(bool TouchBegin, byte FingerIndex);// 0x26bf708
	void SetAirDropEnable(bool Enable);// 0x26bf688
	void SetAirAttackEnable(bool Enable);// 0x26bf608
	void ServerUseSkill(int SkillID);// 0x26bf554
	void ServerUseItem(ItemDefineID DefineID, BattleItemUseTarget Target, enum Reason);// 0x26bf3a4
	void ServerUpdateCurrentBuildIndex(int8 idx);// 0x26bf2e8
	void ServerTriggerSelectGrenade(int GrenadeID);// 0x26bf234
	void ServerTriggerMysteriosPointEscape(const int InMysteriosID);// 0x26bf180
	void ServerTriggerCharacterEntryEvent(enum EntryEvent);// 0x26bf0cc
	void ServerTriggerCharacterCustomEvent(byte SkillEvent);// 0x26bf018
	void ServerTestPaintDecal(int ID, const PlayerDecalData DecalData);// 0x26bee90
	void ServerStopFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StopFireInfo InStopFireInfo);// 0x26bed4c
	void ServerStartPreBarrel(STExtraCharacter* TargetCharacter, float HandledTime);// 0x26bec50
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, Vector P_MapCenterLoc, Vector P_PlaneStartLoc, float P_PlaneStartYaw);// 0x26be988
	void ServerStartMonsterTreasureBox();// 0x26be974
	void ServerStartFire(STExtraBaseCharacter* TargetCharacter, STExtraShootWeapon* TargetWeapon, const StartFireInfo InStartFireInfo);// 0x26be830
	void ServerStartBarrel(STExtraBaseCharacter* TargetCharacter);// 0x26be77c
	void ServerShowSyncVehicleMark(MarkSyncData SyncData);// 0x26be370
	void ServerSetShootType(STExtraBaseCharacter* TargetCharacter, byte shootType, STExtraShootWeapon* TargetWeapon);// 0x26be22c
	void ServerSetReloadMethod(STExtraBaseCharacter* TargetCharacter, byte reloadMethod);// 0x26be130
	void ServerSetObsverLocation(const Vector locat);// 0x26be074
	void ServerSetIsFreeView(bool isFreeView);// 0x26bdfac
	void ServerSetFreeCameraRotationOnVehicle(Rotator InRotation, bool IsAutoReturn);// 0x26bde98
	void ServerSetFreeCamera(Rotator InRotation);// 0x26bddec
	void ServerSetControlRotationOnVehicle(Rotator InRotation, bool IsFreeCamera);// 0x26bdcd8
	void ServerSetControlRotation(const Rotator NewRotation);// 0x26bdc24
	void ServerSetAllowViewCharmInfo(bool Allow_View);// 0x26bdb5c
	void ServerSendVeheclePoint();// 0x26bdb00
	void ServerSendTeammatesKDA();// 0x26bdaa4
	void ServerSelectZombieWave(int ZombieWaveIndex);// 0x26bd9f0
	void ServerRPC_RequestWindOnBoard(bool bOnBoard);// 0x26bd928
	void ServerRPC_RequestPlayerInfo(FString inUIDStr);// 0x26bd860
	void ServerRPC_GunMasterMediaPlayCounter(int inSelfCount);// 0x26bd7ac
	void ServerRPC_EnterObserveFlow(enum inObFlowIndex);// 0x26bd6f8
	void ServerRPC_ChangeVehicleAvatar(STExtraVehicleBase* InVehicle, const int InChangeTargetSkinID);// 0x26bd5fc
	void ServerReportWatchGamePlayerInfoButtonClick(WatchGamePlayerInfoButtonClick PlayerInfoButtonClick);// 0x26bd524
	void ServerReplicateExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x26bd2c0
	void ServerReceiveUIInitMsgFromClient();// 0x26bd260
	void ServerReceiveThePlane(int64 TimeStamp);// 0x26bd1a8
	void ServerReceiveServerStateType(StateType ReceivedType, StateType ClientType, int64 TimeStamp);// 0x26bcfd0
	void ServerPayMysteriosPointEscapeCash(const int InMysteriosID);// 0x26bcf1c
	void ServerOperateActor(Actor* Box, int OperateType);// 0x26bce20
	void ServerOpenParachute();// 0x26bcdbc
	void ServerObserveKiller();// 0x26bcd60
	void ServerObserveCharacter(uint32 InPlayerKey);// 0x26bccac
	void ServerObserveAirDropBox(int BoxId);// 0x26bcbf8
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, STExtraBaseCharacter* Target);// 0x26bcae0
	void ServerLockYawToPlayer(bool InLockControllerYawToPlayer);// 0x26bca18
	void ServerLeaveCustomSpectating();// 0x26bc9bc
	void ServerJumpFromPlane();// 0x26bc958
	void ServerHeartbeat(const HeartbeatData InHeartbeatData);// 0x26bc888
	void ServerHearSound(int AkEventID, const Vector AkLocation);// 0x26bc784
	void ServerHandleMsg(enum Msg);// 0x26bc6d0
	void ServerHandleHitDataArraySplit(STExtraShootWeapon* TargetWeapon, const SacStructSplit InAntiCheatData);// 0x26bc5a4
	void ServerHandleHitDataArrayNew(STExtraShootWeapon* TargetWeapon, const SacStructNew InAntiCheatData);// 0x26bc470
	void ServerHandleHitDataArray(STExtraShootWeapon* TargetWeapon, const SACData InAntiCheatData);// 0x26bc2e8
	void ServerGetTotalPlayers();// 0x26bc28c
	void ServerFindingPath(Vector StartPoint, Vector EndPoint);// 0x26bc154
	void ServerFight();// 0x26bc0f0
	void ServerExitFromHelicopter(STExtraVehicleBase* ExitVehicle);// 0x26bc03c
	void ServerExitFreeCamera();// 0x26bbfe0
	void ServerDumpPlayerInfo();// 0x26bbf84
	void ServerDropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x26bbe20
	void ServerDriveFireBalloon(STExtraFireBalloon* FireBalloon, bool bNewDrive);// 0x26bbd10
	void ServerDoRequestConcertSync(ConcertPlayerActor* InConcertPlayerActor);// 0x26bbc5c
	void ServerDoPickupRevivalFlag();// 0x26bbc00
	void ServerDisuseItem(ItemDefineID DefineID, enum Reason);// 0x26bbae4
	void ServerControlFireBalloonMove(STExtraFireBalloon* FireBalloon, float MoveUpValue);// 0x26bb9e8
	void ServerCMD_RPC(FString Cmd);// 0x26bb920
	void ServerCMD(FString Cmd);// 0x26bb890
	void ServerClientEnterOrExitSnowBoard(STExtraVehicleBase* ExitVehicle, bool IsEnter);// 0x26bb780
	void ServerClearTeammatesCache();// 0x26bb724
	void ServerCheatCommand(const CheatCommandInfo InCheatCommandInfo);// 0x26bb628
	void ServerChangeWeaponFunction(enum NewWeaponFunction);// 0x26bb574
	void ServerChangeStatePC(enum TargetStateType);// 0x26bb4fc
	void ServerChangeGlideConfigState();// 0x26bb4a0
	void ServerCatchRabbit(Actor* Rabbit);// 0x26bb3ec
	void ServerBountyBuyItemSingle(int ItemID, int ItemCount);// 0x26bb2f0
	void ServerBountyBuyItem(BountyBuyingInfo InBuyingInfo);// 0x26bb238
	void ServerBoardHelicopter_GunMaster(Actor* InTargetHelicopter);// 0x26bb184
	void ServerBoardHelicopter(RescueHelicopterBase* Helicopter);// 0x26bb0d0
	void Sequence_SetNearClipPlane(bool bEnable, int NearClip, int DataPriority);// 0x26bafc4
	void Sequence_PlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x26badec
	void Sequence_HapticFeedBackByID(int ID, float VirateAlpha);// 0x26bad30
	void Sequence_ForceFeedBack(SoftObjectPath ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x26bab48
	void SendToServerRemoteControlClientInitOK(RemoteControlComponent* RemoteControl);// 0x26baa94
	void SendToClientPlayerBePrompt(int ClientFatalItemType, FString CauserInfo, FString VictimInfo);// 0x26ba924
	void SendStringMsg(FString Message, int msgID);// 0x26ba850
	void SendServerReportImprisonmenter();// 0x26ba7ec
	void SendEndTouchScreenUICommand(out FString UIMsg);// 0x26ba74c
	void SendDeviceInfo(const FString PlatformProfileName, const DeviceInfo DeviceInfo);// 0x26ba604
	void ScopeOut();// 0x26ba5f0
	void ScopeIn();// 0x26ba5dc
	void SaveRotation();// 0x26ba5c8
	void S2CRPC_SyncReportInfoToClient(FString murderName, const bool IsAI, FString murderUID, const bool IsMurderSameTeam, const InformPlayerTypeInfo[] InformPlayersListOnServer, const FString[] TeammatesYouAttackFirstOnServer);// 0x26ba2b8
	void S2C_SubmitQuestionResponse(const bool AnswerResult);// 0x26ba1f0
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, FString PromptText, float TotalTime);// 0x26ba034
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x26b9e8c
	void S2C_GetQuestionResponse(const int QuestionID, WarteringAreaCPP* CurrentNPC);// 0x26b9d90
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x26b9be8
	void RunOnNextFrameEvent();// 0x26b9bd4
	void RunOnNextFrame__DelegateSignature();// 0x46f6b154
	void RspShutdownRemotePawn(enum PawnType, float ShutDownTime);// 0x26b9b10
	void RspRecallRemotePawn(Pawn* ControledPawn, bool bSucceed, float MaxRecallTime);// 0x26b99fc
	void RspPauseRemotePawn(Pawn* ControledPawn, bool bSucceed);// 0x26b9930
	void RspControlRemotePawn(Pawn* ControledPawn, bool bSucceed);// 0x26b9864
	void RPC_TopFiveChooseContinue();// 0x26b9808
	void RPC_ShowTopFiveTipsNotify();// 0x26b97ac
	void RPC_SetPlayerInitialItemListForClient(const GameModePlayerItem[] InServerInitialItemList);// 0x26b9714
	void RPC_Server_ShootSpecialBullet(Transform LaunchTrans, STExtraShootWeapon* TargetWeapon);// 0x26b9590
	void RPC_Server_ShootSeekAndLockProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf, const SeekAndLockRPGBulletUploadData UploadData);// 0x26b9170
	void RPC_Server_ShootProjectileBullet(STExtraShootWeapon* TargetWeapon, Transform Trans, int Pellet, ShootTimeData InShootTimeInf);// 0x26b8da0
	void RPC_Server_ShootMultiEnergyAccumulateProjectileBulletsSimulate(STExtraShootWeapon* TargetWeapon, const ShootMultiBulletsParam[] LaunchParams, float CurAccEnergyPercent);// 0x26b8c44
	void RPC_Server_SendData(const byte[] DataArray, const PointDamageEvent DamageEvent, bool BoolParam, int IntParam, enum EnumParam, FString StringParam, const float[] ArrayParam, STExtraBaseCharacter* ActorParam);// 0x26b8904
	void RPC_Server_RequestRefreshOwnerPawnHealth();// 0x26b88a8
	void RPC_Server_ReportRenderQualityCVars(const RenderQualityCVarsToSync CVarsToSync);// 0x26b87fc
	void RPC_Server_ReportPeerVisualFieldActorList(const Actor*[] VisualFieldActorList);// 0x26b8734
	void RPC_Server_RemovePhotonDestructibleFragment(const HitResult Hit);// 0x26b8674
	void RPC_Server_RemoveFracturedMeshFragment(Actor* ImpactActor, Actor* OtherActor, Vector NormalImpulse, const HitResult Hit);// 0x26b84c0
	void RPC_Server_NotifySwapMainWeaponFinished(byte Slot1, byte Slot2);// 0x26b83c4
	void RPC_Server_NotifyServerProjectileBulletImpact(const ExplosionProjectileHitInfo InExProjectileHitInfo, ProjectileBulletBase* Bullet);// 0x26b82b8
	void RPC_Server_NotifyServerLaserProjectileBulletAutoExplode(ProjectileBulletBase* Bullet, const ExplosionProjectileHitInfo InExpProjectileInfo);// 0x26b81ac
	void RPC_Server_NotifyBreakWindow(UAEHouseActor* OwnerTarget, UAEWindowRepData Window);// 0x26b7ed0
	void RPC_Server_NorifyServerOpenedPickUpBoxes(const int[] BoxUniqueIDList, enum BoxType);// 0x26b7db8
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x26b7d5c
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon(const ItemDefineID[] WeaponIDArray);// 0x26b7c94
	void RPC_Server_NorifyServerAddFirstOpenedMonsterTombBoxes(const int[] MonsterUniqueIDArray);// 0x26b7bcc
	void RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes(const int[] AirDropBoxIDArray);// 0x26b7b04
	void RPC_Server_FetchIsPlayGunMasterVideoValue();// 0x26b7aa8
	void RPC_Server_EnablePlayerWeaponModuleSystem(bool bEnable);// 0x26b79e0
	void RPC_Server_ClientHasReactivated();// 0x26b7984
	void RPC_Server_ClientHasFinishedRecoverWeapon(STExtraWeapon* Weapon, const WeaponReconnectReplicateData RecoverData);// 0x26b783c
	void RPC_Server_ChangeWeaponState(STExtraWeapon* Weapon, enum StateType);// 0x26b7740
	void RPC_ReviveState_GiveUpRevive();// 0x26b76e4
	void RPC_RequireDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr);// 0x26b7630
	void RPC_PushDynamicWeatherInfo(DynamicWeatherMgr* DynamicWeatherMgr, WeatherControllerRepData RepWeatherInfo);// 0x26b7510
	void RPC_OwnerClient_WeaponWarmUpEnd(STExtraWeapon* Weapon);// 0x26b745c
	void RPC_OwnerClient_SwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x26b7304
	void RPC_OwnerClient_SetLastBreathMurder(FString MurderPlayerName, const bool IsAI, FString murderUID, const bool IsMurderSameTeam);// 0x26b7120
	void RPC_OwnerClient_SetIsUsingBattery();// 0x26b70c4
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x26b6ffc
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const AttrModifyItem ItemData);// 0x26b6e38
	void RPC_OwnerClient_PlayerConsumeItem(const ItemDefineID ID, int Count);// 0x26b6d3c
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, byte Reason);// 0x26b6c40
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, byte Reason);// 0x26b6b44
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachmentList(const WeaponAttachmentEquipNotifyData[] DataList);// 0x26b6a7c
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(byte WeaponPropSlot, const ItemDefineID DefineID, bool bEquip);// 0x26b6924
	void RPC_OwnerClient_HandleAIShootBulletHit(Vector BulletStart, Vector BulletEnd);// 0x26b67ec
	void RPC_OwnerClient_FlushPlayerHealthChangeHistory(const float[] ChangeHistory, STExtraBaseCharacter* TargetPlayer);// 0x26b66dc
	void RPC_OwnerClient_ClientPlayItemOperationSound(FString BankName, FString SoundName, Actor* TargetActor);// 0x26b656c
	void RPC_OwnerClient_ClearAllInventoryData(const ItemDefineID[] WeaponIDList, uint32 PawnGUID);// 0x26b645c
	void RPC_NotifyClientLoadingComplete();// 0x26b6400
	void RPC_NotifyAliveTeammateNum(int TeamAliveNum);// 0x26b634c
	void RPC_GiveUpGame();// 0x26b62f0
	void RPC_GetPlayerInitialItemListFromServer();// 0x26b6294
	void RPC_DrawDebug_Sphere(const Vector Center, float Radius, Color Color, float LifeTime);// 0x26b6144
	void RPC_DrawDebug_Line(const Vector Start, const Vector End, Color Color, float LifeTime);// 0x26b5fec
	void RPC_ClientTriggerWeaponVoiceAndSound(STExtraWeapon* TheShootWeapon, Vector TheCharacterLoc, enum WeaponStateType);// 0x26b5ed0
	void RPC_ClientTriggerMoveVoice(STExtraBaseCharacter* TheCharacter, Vector voiceCheckVector);// 0x26b5dfc
	void RPC_ClientTriggerMoveSound(STExtraBaseCharacter* TheCharacter, Vector Location, byte FootStepState);// 0x26b5ce0
	void RPC_ClientNotifyRCRRelevant(STExtraBaseCharacter* TheCharacter, Vector Location, Rotator Rotation);// 0x26b5bc8
	void RPC_ClientNotifyRCRLocation(STExtraBaseCharacter* TheCharacter, Vector Location);// 0x26b5af4
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x26b5928
	void RPC_Client_SetIsPlayGunMasterVideoValue(const bool InIsPlayGunMasterVideo);// 0x26b58a0
	void RPC_Client_PlayerBulletHitVehicleSound(Vector Loc, Rotator Rot);// 0x26b5778
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, bool bAI, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, FName CauserName);// 0x26b54d0
	void RPC_Client_ForceClearMoveAndStyle();// 0x26b5474
	void RPC_Client_DestroyWeapon(FName LogicSocket, const ItemDefineID ID, bool bEnableBroadcast);// 0x26b5310
	void RPC_Client_CircleRun(int Index, int TotalNum);// 0x26b5214
	void RPC_CheckAliveTeammateNum();// 0x26b51b8
	void RPC_C2S_RequestSyncMurderImprisonmentStatus(FString TeammateName);// 0x26b50f0
	void RPC_C2S_ClientSetHelmetHideInGame(bool IsHide);// 0x26b5020
	void RevivalTemateSuccess();// 0x26b5004
	void RevivalTemateFail(FString Reason);// 0x26b4f6c
	float RetriveMobileContentScaleFactor();// 0x26b4f44
	GameModePlayerParams RetrievePlayerParamTest(PlayerID PlayerID);// 0x26b4e80
	void RestoreDefaultInteractionSize(int JSIndex);// 0x26b4e08
	void RespHasSignalBar(bool bHas);// 0x26b4d7c
	void RespawnResetPlayerStata(UAEPlayerController* PlayerController);// 0x26b4d04
	void RespawnRecoverData(UAEPlayerController* PC);// 0x26b4c8c
	void ResetToSavedRotation();// 0x26b4c78
	void ResetRotationWithParam(float Pitch, float Yaw, float Roll);// 0x26b4b78
	void ResetRotation(float Pitch, float Yaw, float Roll);// 0x26b4a78
	void ResetMissingUIUpdate();// 0x46f6b154
	void RequireNetCullingDistanceByDevice();// 0x26b4a1c
	void RequireDeviceInfo();// 0x26b4a00
	void RequestPlayerNewbieInfo();// 0x26b49ec
	void RequestHasSignalBar();// 0x26b4988
	void ReqSwitchPersonPerspective(bool IsNewFPP);// 0x26b48c0
	void ReqRecallRemotePawn(RemoteControlComponent* RemoteControl);// 0x26b480c
	void ReqPauseRemotePawn(RemoteControlComponent* RemoteControl);// 0x26b4758
	void ReqControlRemotePawn(RemoteControlComponent* RemoteControl);// 0x26b46a4
	void ReportWatchGamePlayerInfoButtonClick();// 0x26b4690
	void ReportAntiCheatInfo();// 0x26b467c
	void ReplaySwitchWeatherByWeatherID(int WeatherID);// 0x26b4604
	void ReplayRPC_TeammateStateChanged(int TeammateIndex);// 0x26b4580
	void RemoveTouchMoveFinger(byte FingerIndex);// 0x26b4508
	void RemoveTimerHandle(out TimerHandle TimerHandle);// 0x26b447c
	void RemoveMarkedWrapperActorMonitor(int WrapperActorNetGUID, uint32 MonitorPlayerKey);// 0x26b4380
	void RemoveAllDoors();// 0x26b436c
	void ReInitUIAfterReCreatePawn(UAEPlayerController* UAEPC);// 0x26b42f4
	void ReInitParachuteItem();// 0x26b42e0
	void RegisterWaitNetObj(UAEUserWidget* Widget, FString NetObj);// 0x26b420c
	void RegistConnectRepProperty(STExtraPlayerController* ObPC);// 0x26b418c
	void RefreshTrainingSensitivityList__DelegateSignature();// 0x46f6b154
	void RefreshPlayerOBInfoButtonState();// 0x26b4178
	void RecoverTeamAssembleState();// 0x26b4164
	void RecordTouch(bool Start);// 0x26b40e4
	void RecordPressFireBtnFrame();// 0x26b40d0
	void RecordPathPoint();// 0x26b40bc
	void ReceiveClientRestart();// 0x46f6b154
	void ReceiveBackpackComponent();// 0x26b40a0
	void ReceiveAutoTouchMove();// 0x46f6b154
	void QuitSpectating();// 0x26b4084
	void PutVehiclesToSleep(float Radius);// 0x26b400c
	void PrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x26b3ee8
	void PrintMovementLog(int PrintLog);// 0x26b3e70
	void PrintDownCollision();// 0x26b3e5c
	void PrintAIFloatDebugInfo(int Range);// 0x26b3de4
	void PressGrenade(bool isThrow);// 0x46f6b154
	void PressFire(int FingerIndex);// 0x46f6b154
	void PostTakeDamageDelegate__DelegateSignature(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x46f6b154
	void PostInitPlayerParams();// 0x26b3dc8
	void PlaySequencer(FString Path);// 0x26b3ce4
	void PlayItemOperationSoundByBP(FString BankName, FString SoundName, Actor* TargetActor);// 0x26b3bb4
	void PlayEscapeHelicopterAnim();// 0x235d4b8
	void PlayerVehiclePawnStateChanged__DelegateSignature(STExtraPlayerController* PlayerController);// 0x46f6b154
	void PlayerSelectZombieWaveDelegate__DelegateSignature(int SelectedZombieWave);// 0x46f6b154
	void PlayerLiveStateChangedInOB(enum State, Character* OwnerCharacter);// 0x26b3af8
	void PlayerKillingDelegate__DelegateSignature();// 0x46f6b154
	void PlayerHitFireBtnDelegate__DelegateSignature(bool isRightBtn);// 0x46f6b154
	void PlayerEnterAreaDelegate__DelegateSignature(int AreaID);// 0x46f6b154
	void PlayerDoEmoteDelegate__DelegateSignature(int EmoteIndex);// 0x46f6b154
	void PlayerControllerToggleDelegate__DelegateSignature(bool bOpen);// 0x46f6b154
	void PlayerControllerPossess__DelegateSignature(Pawn* PossessedPawn);// 0x46f6b154
	void PlayDisplayAvatarEmote(FString InEmotePlayerName, int InEmoteID);// 0x26b39e0
	void PickupFromShop(int ItemID, int Count, bool ForceSell);// 0x26b38d8
	void OpenVehicleMusicGame();// 0x26b38bc
	void OpenParachute();// 0x26b38a8
	void OpenOnceBuild(int BuildIndexByUser, int BuildMaxByUser);// 0x26b37ec
	void OnYearMonsterInMiniMap();// 0x26b37bc
	void OnWeaponEquipAttachmentDelegate__DelegateSignature(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x46f6b154
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x46f6b154
	void OnWallFeedBack(bool _WallFeedBack);// 0x26b373c
	void OnViewTargetSignalHPChanged(float NewSignalHP);// 0x26b36c4
	void OnViewTargetPoseChanged(byte LastPose, byte NewPose);// 0x26b3608
	void OnViewTargetPlayerStateChanged();// 0x26b35f4
	void OnViewTargetDetachedFromVehicle(STExtraVehicleBase* LastVehicle);// 0x26b357c
	void OnViewTargetChangeVehicleSeat();// 0x26b3568
	void OnViewTargetChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0x46f6b154
	void OnViewTargetAttachedToVehicle(STExtraVehicleBase* InVehicle);// 0x26b34f0
	void OnUseMainSlot__DelegateSignature(byte Slot);// 0x46f6b154
	void OnUseInventoryItemDelegate__DelegateSignature();// 0x46f6b154
	void OnUnequipWeaponDelegate__DelegateSignature();// 0x46f6b154
	void OnUITouchMoveDelegate__DelegateSignature(Vector Loc);// 0x46f6b154
	void OnUIInitMsgReceivedFromClient__DelegateSignature(STExtraPlayerController* PC);// 0x46f6b154
	void OnUAEUserWdigetNativeConstruct(UAEUserWidget* Widget, World* InWorld);// 0x26b3434
	void OnTrainingSensitivityRefreshEvent();// 0x26b3420
	void OnTouchInterfaceChangedDelegate__DelegateSignature();// 0x46f6b154
	void OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x46f6b154
	void OnTeammatesAllDie();// 0x26b340c
	void OnTeammateLogin(int InTeamID);// 0x26b3394
	void OnTeammateHPChangeDelegate__DelegateSignature();// 0x46f6b154
	void OnTaskConditionDeactivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x46f6b154
	void OnTaskConditionActivedDelegate__DelegateSignature(byte TaskConditionType, VariableSet* DataSource);// 0x46f6b154
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x46f6b154
	void OnSwitchWeaponDelegate__DelegateSignature();// 0x46f6b154
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x46f6b154
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x46f6b154
	void OnStopFireDelegate__DelegateSignature();// 0x46f6b154
	void OnStartFireSign();// 0x26b3380
	void OnStartFireDelegate__DelegateSignature();// 0x46f6b154
	void OnStartAutoSprintCountDown__DelegateSignature();// 0x46f6b154
	void OnSpectatorChange__DelegateSignature();// 0x46f6b154
	void OnSpectatorCameraChange(bool bDie);// 0x46f6b154
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, FString PromptText, float TotalTime);// 0x46f6b154
	void OnShowAutoSprintButton__DelegateSignature(bool Visible, Vector2D showPos, bool IsInside);// 0x46f6b154
	void OnShowAnimationButton(bool isShow, int NewUIType);// 0x26b32b0
	void OnSetPlayerMaker__DelegateSignature(Vector Loc);// 0x46f6b154
	void OnSetPlaneRouteForCamp(Vector StartPos, Vector EndPos, float RouteLengthInMap, float RouteWidgetRotateAngle, Vector2D CanJumpLocInMap);// 0x26b30f0
	void OnServerFinishPickupRevivalFlag();// 0x26b30d4
	void OnServerCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP);// 0x46f6b154
	void OnRepTeammateChange__DelegateSignature();// 0x46f6b154
	void OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x46f6b154
	void OnRepPlayerState__DelegateSignature();// 0x46f6b154
	void OnRepNotify_SetBattleOwner();// 0x26b30c0
	void OnRepNewPawn__DelegateSignature(Pawn* NewPawn);// 0x46f6b154
	void OnRep_WeatherFog();// 0x26b30ac
	void OnRep_WeaponSystemReconnectReplicateData();// 0x26b3098
	void OnRep_WeaponReconnectOpIndex();// 0x26b3084
	void OnRep_WeaponFunctionChanged();// 0x26b3070
	void OnRep_UsedSimulation();// 0x26b3054
	void OnRep_TeamID();// 0x26b3038
	void OnRep_TeamAssemableDisplayInfoList();// 0x26b3024
	void OnRep_SwitchWeatherByIndex();// 0x26b3010
	void OnRep_STExtraBaseCharacter();// 0x26b2ffc
	void OnRep_ShouldShowGlideConfig();// 0x26b2fe8
	void OnRep_ServerStateType();// 0x26b2fd4
	void OnRep_SelfWingInfo();// 0x26b2fc0
	void OnRep_SelectedZombieWaveIndex();// 0x26b2fac
	void OnRep_RoomMode();// 0x26b2f90
	void OnRep_Plane();// 0x26b2f7c
	void OnRep_Pawn_BP();// 0x46f6b154
	void OnRep_ObservedItemList();// 0x26b2f68
	void OnRep_OBAvaliablePlayerKeys();// 0x26b2f54
	void OnRep_NeedScreenShot();// 0x26b2f40
	void OnRep_InWateringRangeBP();// 0x46f6b154
	void OnRep_InWateringRange();// 0x26b2eec
	void OnRep_ImprisonmentTeammateSucess();// 0x26b2ed8
	void OnRep_GlideConfigState();// 0x26b2ec4
	void OnRep_ForbitPickEffect();// 0x26b2eb0
	void OnRep_ForbitPick();// 0x26b2e9c
	void OnRep_EnableTeamAssembleDisplay();// 0x26b2e88
	void OnRep_DeadTombBox();// 0x26b2e74
	void OnRep_ClientSettingBaseOnGameMode();// 0x26b2e60
	void OnRep_CanOpenParachute();// 0x26b2e4c
	void OnRep_CanJump();// 0x26b2e38
	void OnRep_CanImprisonmentTeammate();// 0x26b2e24
	void OnRep_CampToolStatus();// 0x26b2e10
	void OnRep_CameraFreeMoving();// 0x26b2dfc
	void OnRep_BlackEntTime();// 0x26b2de8
	void OnRep_BattleSceneAvatarDisplayInfoList();// 0x26b2dd4
	void OnRep_BackpackComponent();// 0x26b2dc0
	void OnRemoveMainSlot__DelegateSignature(byte Slot);// 0x46f6b154
	void OnReleaseScreen__DelegateSignature(byte FingerIndex);// 0x46f6b154
	void OnReleaseFireBtnDelegate__DelegateSignature();// 0x46f6b154
	void OnReconnected__DelegateSignature();// 0x46f6b154
	FString OnRecieveCrash();// 0x46f6b154
	void OnReceiveHasSignal__DelegateSignature(bool HasSignal);// 0x46f6b154
	void OnRank__DelegateSignature(int Kills, int Rank);// 0x46f6b154
	void OnPlayerUseRecoverItem();// 0x26b2dac
	void OnPlayerStateChanged();// 0x26b2d98
	void OnPlayerReConnected(int LostPlayerKey);// 0x26b2ce4
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x46f6b154
	void OnPlayerPutDownActorDelegate__DelegateSignature(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x46f6b154
	void OnPlayerPickUpActorDelegate__DelegateSignature(byte SurvivePickUpGlobalCategory, int ID);// 0x46f6b154
	void OnPlayerNameChange__DelegateSignature(FString changedplayername);// 0x46f6b154
	void OnPlayerLostConnection(int LostPlayerKey);// 0x26b2c30
	void OnPlayerInOutWhiteCircleChangedDelegate__DelegateSignature(bool bIsInWhiteCircle);// 0x46f6b154
	void OnPlayerHitFireBtn(bool bIsRightBtn);// 0x26b2bb0
	void OnPlayerClickDriveBtn();// 0x26b2b9c
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);// 0x26b2adc
	void OnPlayerBuffExist(FName BuffName);// 0x26b2a24
	void OnPickUpTargetDelegate__DelegateSignature(STExtraPlayerController* PlayerController, Actor* Target, int AdditionalParam, int pickCount);// 0x46f6b154
	void OnPickupItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0x46f6b154
	void OnPickUpExpand();// 0x26b29bc
	void OnPickUpCollapsed(bool isCollapsed);// 0x26b293c
	void OnPawnStateChange__DelegateSignature(uint64 CurrentPawnState);// 0x46f6b154
	void OnOneTeamPlayerHPChangeDelegate__DelegateSignature(int Index);// 0x46f6b154
	void OnOneFloatValueDelegate__DelegateSignature(float theValue);// 0x46f6b154
	void OnOccupyNewbieGuide(int inGuideID);// 0x26b28c4
	void OnObserverLevelLoaded();// 0x26b28b0
	void OnObservedWeaponSightChanged();// 0x26b289c
	void OnObservedUsingWeaponChanged();// 0x26b2888
	void OnObservedPlayerWeaponChangeState(enum CurState);// 0x26b2810
	void OnObservedItemUpdate(ItemHandleBase* Handle);// 0x26b2798
	void OnObservedItemsChanged();// 0x26b2784
	void OnObservedItemRemoved(ItemDefineID DefineID);// 0x26b26fc
	void OnObservedDisuseWeapon(byte PropSlot);// 0x26b2684
	void OnObservedBulletNumChanged();// 0x26b2670
	void OnNightStateChangedDelegate__DelegateSignature();// 0x46f6b154
	void OnNewbieGuideHandlePickUp(int inPickUpID);// 0x26b25f8
	void OnMyObserversChangeDelegate__DelegateSignature(STExtraPlayerController* ObserverController, bool IsEnter);// 0x46f6b154
	void OnMarkedWrapperActorDisappeared(int WrapperActorNetGUID);// 0x26b2578
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);// 0x46f6b154
	void OnMainControlPanelHideAllUI();// 0x26b2558
	void OnLostConnection__DelegateSignature();// 0x46f6b154
	void OnLocalCharacterTemperatureChangeDelegate__DelegateSignature(float currentTP, float ratioHP);// 0x46f6b154
	void OnLocalCharacterSignalHPRemaingingTimeDelegate__DelegateSignature(float RemainingTime);// 0x46f6b154
	void OnLocalCharacterSignalHPChangeDelegate__DelegateSignature(float CurrentSignalHP, float PreSignalHP, float ratioSignalHP);// 0x46f6b154
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float CurrentHP, float ratioHP);// 0x46f6b154
	void OnLoadAsyncWidget();// 0x26b2544
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x46f6b154
	void OnItemRemoved(ItemDefineID DefineID);// 0x26b24bc
	void OnItemOperationInfo(BackpackComponent* Sender, out const ItemOperationInfo ItemOperationInfo);// 0x26b23d0
	void OnItemOperation(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x26b22c0
	void OnIsInFortressChangedDelegate__DelegateSignature(bool bInIsInFortress);// 0x46f6b154
	void OnInterruptAutoSprintCountDown__DelegateSignature();// 0x46f6b154
	FString OnGetCrashInfo();// 0x26b222c
	void OnGameStartDelegate__DelegateSignature();// 0x46f6b154
	void OnGameStartCountDownDelegate__DelegateSignature(float CountDownTime);// 0x46f6b154
	void OnGameModeStateChangeDelegate__DelegateSignature(FName CurrentState);// 0x46f6b154
	void OnGameModeStateChanged();// 0x46f6b154
	void OnFirstInviteChat();// 0x26b21c4
	void OnFingerMove__DelegateSignature(byte FingerIndex, Vector Loc);// 0x46f6b154
	void OnExitGame__DelegateSignature();// 0x46f6b154
	void OnEquipWeaponDelegate__DelegateSignature();// 0x46f6b154
	void OnEnterBattleResultStep();// 0x26b21b0
	void OnEnableTeamAssembleDisplayView(bool IsEnable);// 0x46f6b154
	void OnDSOthersWeaponVS(STExtraWeapon* TheWeapon, enum WeaponStateType);// 0x26b20f4
	void OnDSOthersSkillStart(STExtraBaseCharacter* SkillCharacter);// 0x26b207c
	void OnDSOthersLandedSound(STExtraBaseCharacter* LandedCharacter);// 0x26b2004
	void OnDropItemDelegate__DelegateSignature(int ItemID, int Count, STExtraPlayerController* PC);// 0x46f6b154
	void OnDoubleClickCheckDelegate__DelegateSignature(byte FingerIndex);// 0x46f6b154
	void OnDeathBoxSpawnedDelegate__DelegateSignature(Transform SpawnTransform);// 0x46f6b154
	void OnDeadBoxExpand();// 0x26b1ff0
	void OnDeadBoxCollapsed(bool isCollpased);// 0x26b1f70
	void OnClientToServerWeaponCreated__DelegateSignature(out const ItemDefineID[] WeaponIDArray);// 0x46f6b154
	void OnClientReportPeerVisualFieldAcotrList__DelegateSignature(int CampID, Actor*[] PeerVisualFieldActorList);// 0x46f6b154
	void OnClientGameCountDown(float CountDown);// 0x26b1ef8
	void OnClientBountyBuyItemResult__DelegateSignature(int ResultID, int ProductID);// 0x46f6b154
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(STExtraVehicleBase* nowVehicle, Vector posVector, float showTime);// 0x46f6b154
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(STExtraShootWeapon* nowWeapon, Vector posVector, float showTime, bool isslience, bool isexplosion);// 0x46f6b154
	void OnCharacterRecoveryHealthEvent();// 0x26b1ee4
	void OnCharacterRecoveryHealth__DelegateSignature();// 0x46f6b154
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);// 0x46f6b154
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(STExtraBaseCharacter* nowCharacter, Vector posVector, float showTime);// 0x46f6b154
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(Vector posVector, float showTime);// 0x46f6b154
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(Actor* nowActor, float checkDis);// 0x46f6b154
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, Character* OwnerCharacter, int HealthStatus);// 0x46f6b154
	void OnChangeBattleOwnerDelegate__DelegateSignature();// 0x46f6b154
	void OnBuyRevivalTeammate(int TeammateIndex);// 0x26b1e64
	void OnBuyRevivalSign();// 0x26b1e48
	void OnBackpackMainSlot__DelegateSignature(byte Slot);// 0x46f6b154
	void OnAutoSprintActive__DelegateSignature();// 0x46f6b154
	void OnAppActivatedDelegate__DelegateSignature(bool bIsActive);// 0x46f6b154
	void OnAllPostExecDSCommandArrived();// 0x26b1e2c
	void OnAirAttackEventNotify(byte airattacktype, int waveindex, enum AirAttackMode);// 0x26b1d2c
	void On3DTouchForceChangeDelegate__DelegateSignature();// 0x46f6b154
	void ObserveWhoKilledMe();// 0x26b1d18
	void ObserveCharacter(FString InPlayerName);// 0x26b1c34
	void ObserveAirDropBox(int BoxId);// 0x26b1bbc
	void OBForceToggleOBTPPView();// 0x26b1ba8
	void OBCameraMoveNear();// 0x26aeb24
	void OBCameraMoveFar();// 0x26aeb24
	void NotifyServerFixLevel(int FixConfigIndex, bool bUnLoad);// 0x26b1a98
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);// 0x46f6b154
	void NotifyEnterAvatarDisplayState();// 0x26b1a84
	void Notify_Client_UIMsg_WithParams(FString InMsgName, FString InModuleName, FString InParamsCollection);// 0x26b18fc
	void NormalTeamateLogin(int InTeamID);// 0x26b1884
	void NewbieGuideYearMonsterInMapDelegate__DelegateSignature();// 0x46f6b154
	void MoveUp(float Rate);// 0x26b180c
	void MoveToSuperTeamAI();// 0x26b17f8
	void MoveToAI();// 0x26b17e4
	void MoveTo(float X, float Y, float Z);// 0x26b16e4
	void MoveRight(float Rate);// 0x26b166c
	void MoveNeareastVehicleTo(float X, float Y, float Z);// 0x26b156c
	void MoveForward(float Rate);// 0x26b14f4
	void ModifyTouchIndex(Vector Loc, byte FingerIndex);// 0x26b1428
	void MemberVoiceLBS(int member, int Status, bool isRobot);// 0x46f6b154
	void MemberVoice(int member, int Status, bool isRobot);// 0x46f6b154
	void MarkStartFireFrame();// 0x26b1414
	void MarkLocationToMapPath(int TypeID);// 0x26b139c
	void LuaActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x26b1318
	void LookUp(float Rate);// 0x26b12a0
	void LocalTestPaintDecal(int ID);// 0x236ffe8
	void LocalTestGameResult(int ModeID, int TeamMemNum);// 0x238dad8
	void LocalRefreshObMapPlayerList();// 0x26b128c
	void LocalProfileFootprint();// 0x26b1278
	void LocalProfileDecal();// 0x26b1264
	void LocalGetGameStateReconnectInfo();// 0x26b1250
	void LoadUserWidgetStyleByPath(FString PathString);// 0x26b11c0
	void LoadUserWidgetStyle(UserWidgetStyle* Style);// 0x26b1148
	void LoadAllLand(bool bLoadAll);// 0x26b10c8
	void LerpFPPCamera();// 0x26b10b4
	void LeaveSpectating();// 0x26b10a0
	void LeaveObserveMe(STExtraPlayerController* InController);// 0x26b1028
	void KillSomeTeamerBekilledCount(int Count);// 0x26b0fb0
	void KillSomeOne(FString InPlayerName);// 0x26b0f20
	void KillSomeEnemyCount(int Count);// 0x26b0ea8
	void KillSomeCount(int Count);// 0x26b0e30
	void KillAll();// 0x26b0e1c
	void Kill(int GivenNumber);// 0x26b0da4
	void JumpFromPlane();// 0x26b0d90
	void JoystickTriggerSprint(bool bIsSprint);// 0x46f6b154
	bool IsViewTarget(const Actor* pActor);// 0x26b0d04
	bool IsUse3DTouch();// 0x26b0cdc
	bool IsTombBoxTeammate(const PlayerTombBox* TombBox);// 0x26b0c5c
	bool IsTeammate(const STExtraBaseCharacter* InCharacter);// 0x26b0bdc
	bool IsTeamAssembleDisplayLevelLoaded();// 0x26b0bac
	bool IsTeamAssembleDisplayEnabled();// 0x26b0b84
	bool IsTaskFit(GameModePlayerTaskData TaskData);// 0x26b0a64
	bool IsStartInRightHalfScreen(float BeginX, float CurViewPortDPIScale);// 0x26b0954
	bool IsScopeFireEnabled();// 0x26ac620
	bool IsSameTeam(const Pawn* Other);// 0x26b08d4
	bool IsReleasePosInAimBtnRange(Vector Loc);// 0x26b084c
	bool IsPlayingOBReplay();// 0x26b0824
	bool IsOwningHelicopter(RescueHelicopterBase* Helicopter);// 0x26b07a4
	bool IsOBTypeUIState();// 0x26b077c
	bool IsOBGM();// 0x26b0754
	bool IsMurderSelfDefense(FString InformMurderName);// 0x26b06bc
	bool IsMoveable_DontConsiderFollowingState();// 0x26b0694
	bool IsMoveable();// 0x26b066c
	bool IsLycanGameMode();// 0x26b0644
	bool IsLastBreathOrRescueingOther();// 0x26b061c
	bool IsJoystickTouched();// 0x26b05f4
	bool IsJoystickCollapsedCountOverZero_old();// 0x26b05cc
	bool IsInRevival();// 0x26b05a4
	bool IsInPlane();// 0x26b057c
	bool IsInParachuteOpen();// 0x26b0554
	bool IsInParachuteJump();// 0x26b052c
	bool IsInParachute();// 0x26b0504
	bool IsInInitial();// 0x26b04dc
	bool IsIngoreSvrSetViewTarget();// 0x26b04ac
	bool IsInFreeCameraView();// 0x26b0490
	bool IsInFinish();// 0x26b0468
	bool IsInFight();// 0x26b0440
	bool IsInDead();// 0x26b0410
	bool IsInBuildingMode();// 0x26b03e8
	bool IsForceSwitchTeamView(bool bEnable);// 0x26b0358
	bool IsForbitPickMakeEffect();// 0x26b0330
	bool IsForbitPick(out const FName tombName);// 0x26b029c
	bool IsFollowFireMode();// 0x26b0274
	bool IsEnableGalaxyFace();// 0x26b0244
	bool IsCompleteReplayPlaying();// 0x26b021c
	bool IsCharacterInAir();// 0x26b01f4
	bool IsChangeUseVehicleAvatar(STExtraVehicleBase* InVehicle);// 0x26b0174
	bool IsCanViewEnemy();// 0x26b014c
	bool IsCanImprisonmentTeammate();// 0x26b0124
	bool IsAllowActorTouchMove();// 0x26b00fc
	bool IsAirDropRep2Client(int BoxId);// 0x26b007c
	bool IsAGMPlayer();// 0x26b0054
	bool Is3DTouchOpenned();// 0x26b002c
	void InternalServerStartMonsterTreasureBox(MonsterTreasureBox* Box);// 0x26aff78
	void InsertGrenadeIDInOrder(int GrenadeID);// 0x236ffe8
	bool InRemoteControlState();// 0x26aff50
	void InputTouchRepeat(const byte FingerIndex, const Vector Location, float Force);// 0x26afe38
	void InputTouchEnd(const byte FingerIndex, const Vector Location, float Force);// 0x26afd20
	void InputTouchBegin(const byte FingerIndex, const Vector Location, float Force);// 0x26afc08
	void InitWeatherConfigComponent();// 0x26afbf4
	void InitTaskDatas(uint32 InPlayerKey);// 0x26afb7c
	void InitTaskDataDelegate__DelegateSignature(int TaskID, int process, FString ext_info);// 0x46f6b154
	void InitTaskData(int TaskID, int process, FString ext_info);// 0x26afa08
	void InitTaskComponent();// 0x26af9f4
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x46f6b154
	void InitJoyStickAfterActivation();// 0x46f6b154
	void InitIngameUIRoot(UAEUserWidget* Root);// 0x26af97c
	void InitCollectionDataDelegate__DelegateSignature(int ItemID, int CurrentCount, int TotalCount);// 0x46f6b154
	void InitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x26af87c
	void InitBountySystemProductList(StoreProductInfo[] ProductList);// 0x26af6d0
	void ImprisonmentTeammate(FString TeammateName);// 0x26af608
	void IgnoreFilterSignalGunPoints(int OpenID);// 0x26af590
	bool HasPickupPropsNearby();// 0x26af568
	bool HasDeathBoxesNearby();// 0x26af540
	void HandleUpdateShovelingRelease();// 0x26af52c
	void HandleUpdateShovelingPressed();// 0x26af518
	void HandleUpdateShoveling();// 0x26af504
	void HandleTogglePlayerListInOB();// 0x26af4f0
	void HandleToggleOBTeamList(bool InShow);// 0x26af470
	void HandleToggleMapInOB();// 0x26af45c
	void HandleToggleFreeViewReplay();// 0x26af448
	void HandleSwitchToTeammateWithBlend(Key InKey);// 0x26af268
	void HandleSwitchToTeammatePrev();// 0x26af434
	void HandleSwitchToTeammateNext();// 0x26af420
	void HandleSwitchToTeammate(Key InKey);// 0x26af268
	void HandleSwitchToTeam_PostTeamID();// 0x26af254
	void HandleSwitchToTeam_InputOneNum(Key InKey);// 0x26af09c
	void HandleSwitchToTeam_DelOneNum();// 0x26af088
	void HandleSwitchToTeam_ClearInputNum();// 0x26af074
	void HandleSwitchToTeam(int InTeamID);// 0x26aeffc
	void HandleSwitchPersonViewPress();// 0x26aefe8
	void HandleShowMedicBulletHitTips(FString ShootPlayerName, uint64 ShootPlayerUID, int ShootPlayerTeamID, FString HitPlayerName, uint64 HitPlayerUID, int HitPlayerTeamID);// 0x26aed70
	void HandleRevivalTipsInfo(FString CauserName, FString VictimName, int RevivalType);// 0x26aec00
	void HandleReSetOBPositionDistance();// 0x26aebec
	void HandleReduceOBPositionDistance();// 0x26aebd8
	void HandleOBToggleProjSmokeAlpha();// 0x26aebc4
	void HandleOBSSwitchToPreTeam();// 0x235d4b8
	void HandleOBSSwitchToPlayerThird();// 0x235d4b8
	void HandleOBSSwitchToPlayerSecond();// 0x235d4b8
	void HandleOBSSwitchToPlayerFourth();// 0x235d4b8
	void HandleOBSSwitchToPlayerFirst();// 0x235d4b8
	void HandleOBSSwitchToNextTeam();// 0x235d4b8
	void HandleOBSSwitchTeamLogo();// 0x235d4b8
	void HandleMsg(enum Msg);// 0x26aeb4c
	void HandleLeaveFreeViewInOB();// 0x26aeb24
	void HandleLandOnGroundEnd();// 0x26aeb38
	void HandleEnterFreeViewInOB();// 0x26aeb24
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x26aea54
	void HandleClientHasReactivated();// 0x26aea40
	void HandleCameraModeChanged(byte NewMode, STExtraBaseCharacter* InCharacter);// 0x26ae984
	void HandleBreakUAEWindow(int WinNum);// 0x26ae904
	void HandleBisOpenEnemyHeadUI();// 0x235d4b8
	void HandleAddOBPositionDistance();// 0x26ae8f0
	void GunmasterBountyBuyDelegate__DelegateSignature(const BountyBoughtInfo[] ServerBountyBoughtItemList);// 0x46f6b154
	int GotoSpectating(int TeammatePlayerid);// 0x26ae868
	void GotoFlying();// 0x26ae854
	void GMTest_ReqPlayerInfo(FString inUIDStr);// 0x26ae7c4
	void GMSpawnWingManMiniMap(float X, float Y);// 0x26ae708
	void GMSpawnMonsterBoxWithPos(float X, float Y, float Z);// 0x26ae608
	void GMSpawnMonsterBox();// 0x26ae5f4
	void GMSetBoolPoisonCircle();// 0x26ae5e0
	void GMSetBoolAirDrop();// 0x26ae5cc
	void GMSetBoolAirAttack();// 0x26ae5b8
	void GMSetBoolAI();// 0x26ae5a4
	void GMOpenWeather(int OpenWeatherID);// 0x26ae52c
	void GMMoveAllAITogether(float X, float Y);// 0x26ae470
	void GMEnableRandom();// 0x26ae45c
	void GMEnableAllComponent();// 0x26ae448
	void GMDisplayGameTipWithParam(int ID, FString param1, FString param2);// 0x26ae26c
	void GMDisableRandom();// 0x26ae258
	void GMDisableAllComponent();// 0x26ae244
	void GMCUseSkill(int InSkillIndex);// 0x26ae1cc
	void GMCSaveTeammate(FString InPlayerName, int InReduceTime);// 0x26ae0a4
	void GMCloseWeather(int CloseWeatherID);// 0x26ae02c
	int GetWriteCircleDistance();// 0x26ae004
	WeatherConfigComponent* GetWeatherConfigComponent();// 0x26adfdc
	void GetWatchPlayerList(out STExtraPlayerState*[] OutPlayers, bool ExcludeMyself);// 0x26adee4
	float GetViewPortDPIScale();// 0x26adebc
	VehicleUserComponent* GetVehicleUserComp();// 0x26ade94
	int GetUseMotionControlType();// 0x26ade6c
	bool GetUseMotionControlLog();// 0x26ade44
	bool GetUseMotionControlEnable();// 0x26ade1c
	float GetTouchForceFireThreshold();// 0x26addf4
	float GetTouchForce(byte FingerIndex);// 0x26add74
	Actor* GetThePlane();// 0x26add54
	MonsterTreasureBox*[] GetTeamMonsterTreasureBoxList();// 0x26adcc0
	STExtraPlayerState* GetTeammatePlayerStateFromPlayerTombBox(const PlayerTombBox* TombBox);// 0x26adc40
	int GetTeamAliveNum();// 0x26adc18
	SpringArmComponent* GetTargetedSpringArm();// 0x26adbf0
	int GetStatTriangles();// 0x26adbc8
	FString GetStatMemory();// 0x26adb34
	int GetStatDrawCalls();// 0x26adb0c
	int GetSpecMotionRestCount();// 0x26adae4
	int GetSpecialAreaID();// 0x26adabc
	bool GetShouldAutoScopeWhenPeek();// 0x26ada94
	Rotator GetSensibilityRate(bool bIsMotionControl);// 0x26ad9fc
	BattleSceneAvatarDisplayInfo GetSelfAvatarDisplayInfo();// 0x26ad964
	byte GetScopeFingerIndex();// 0x26ad93c
	bool GetRevivalGotoSpectatingConfig(out int RevivalGotoSpectatingTime, out FString RevivalGotoSpectatingTips);// 0x26ad83c
	int GetRevivalCountDownTime();// 0x26ad814
	FString GetRemarkNameByGID(FString actorName, FString actorUID);// 0x46f6b154
	bool GetPoseViewLimit(out float PitchMin, out float PitchMax, out enum HitState);// 0x26ad6d4
	STScreenAppearanceComponent* GetPlayerScreenAppearanceComponent();// 0x26ad6ac
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x26ad5a4
	STExtraBaseCharacter* GetPlayerCharacterSafety();// 0x26ad57c
	STExtraBaseCharacter* GetPlayerCharacterFinally();// 0x26ad554
	SeasonTaskListener* GetPermanentTaskController();// 0x26ad52c
	int GetPeekMode();// 0x26ad504
	Transform GetPaintDecalTargetTransform();// 0x26ad4a4
	MonsterTreasureBox* GetOpennedNearestMonsterBox();// 0x26ad47c
	float GetOccupiedCapacity();// 0x26ad454
	void GetObserversList(out STExtraPlayerController*[] OutList);// 0x26ad3b4
	int GetObservedTeammateId();// 0x26ad394
	CameraComponent* GetNowUseCamera();// 0x26ad36c
	Vector GetNewestAirDropBoxPos();// 0x26ad324
	STExtraPlayerController*[] GetMyObserverList();// 0x26ad290
	FString GetMurderUID();// 0x26ad170
	FString GetMurderName();// 0x26ad050
	bool GetMurderIsAI();// 0x26ad018
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x26ace98
	MonsterTreasureBox*[] GetMonsterTreasureBoxList();// 0x26ace04
	byte GetMaxTouchForceFinger();// 0x26acdc4
	Vector2D GetJoyStickVisualSize();// 0x26acd84
	float GetJoyStickOpacity();// 0x26acd5c
	Vector2D GetJoyStickCenter();// 0x26acd1c
	bool GetIsShowPeek();// 0x26accf4
	bool GetIsMurderSameTeam();// 0x26accbc
	bool GetIsLayoutLRSwitchOpened();// 0x26acc9c
	bool GetIsFreeCamera();// 0x26acc7c
	bool GetIsAutoAimEnabled();// 0x26acc54
	int GetGlideCount();// 0x26acc2c
	void GetGameStateReconnectInfoOnServer();// 0x26acbd0
	void GetGameScreenSize();// 0x26acbbc
	GameModeConfig GetGameModeConfig(bool needLocalRefresh);// 0x26acb20
	int GetFriendDistance();// 0x23985c4
	Vector GetFocalLocation();// 0x26acad0
	InformPlayerTypeInfo[] GetDyingDamageInstigatorsList();// 0x26aca34
	enum GetCurrentStateType();// 0x26aca0c
	STExtraVehicleBase* GetCurrentControllingVehicle();// 0x26ac9e4
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x26ac9bc
	RemoteControlComponent* GetCurRemoteControl();// 0x26ac994
	STExtraPlayerState* GetCurPlayerState();// 0x26ac96c
	int GetCurPlayerId();// 0x26ac944
	STExtraBaseCharacter* GetCurPlayerCharacter();// 0x26ac91c
	Vector GetCurPawnLocation();// 0x26ac8d4
	Pawn* GetCurPawn();// 0x26ac8ac
	float GetCurFPS();// 0x26ac884
	Rotator GetControlLookRotation();// 0x26ac830
	Vector GetControlLookPoint(int LineTraceRange, out bool HitTaget);// 0x26ac740
	class Object GetClassFromBPClassManager(class Object BaseClass);// 0x26ac6c0
	PlayerTombBox* GetCacheDeadTombBox();// 0x26ac698
	BackpackComponent* GetBackpackComponent();// 0x26ac670
	int GetAimMode();// 0x26ac648
	bool GetAimFireEnable();// 0x26ac620
	SearchedTombBoxAndWrapperListResult[] GenerateAirDropData(int BoxId);// 0x26ac588
	void GameModeGotoNextState();// 0x26ac574
	void GameModeGotoFightingState();// 0x26ac560
	void FreezeRCRVisualization(bool bFreeze);// 0x23910d8
	void FreeCameraTouchMove(Vector Loc, byte FingerIndex);// 0x26ac494
	void ForceServerSetControlRotationOnVehicle();// 0x26ac480
	void ForceReleaseCurTouchMoveFinger();// 0x26ac46c
	void FlushShapePool();// 0x235d4b8
	void FireTakeDamagedEvent(Vector CauserLocation);// 0x26ac3ec
	void FireOrGrenade();// 0x26ac3d8
	uint32 FindOBAvaliablePlayer();// 0x26ac3b0
	void FillTeamAssemableDisplayItemDetail(out TeamAssembleAvatarDisplayInfo DetailInfo, GameModePlayerParams PlayerParam, Pawn* PlayerPawn);// 0x26abf60
	void Fight();// 0x26abf48
	void FadeSceneToGrayOnDeath(bool bSet);// 0x26abec8
	BattleSceneAvatarDisplayInfo ExtractAvatarDisplayInfo(STExtraPlayerCharacter* TargetCharacter);// 0x26abde8
	void ExitNightState();// 0x26abdd4
	void ExitFreeCamera(bool IsForceReset);// 0x26abd54
	void ExitCameraFreeMoveMode();// 0x26abd40
	void ExecDSCommand(const FString DSCommand);// 0x26abca8
	void ExcuteLuaGM(FString Func, FString Params);// 0x46f6b154
	void EnterSpectating(uint32 OBPlayerkey);// 0x26abc30
	void EnterNightState();// 0x26abc1c
	void EnterCameraFreeMoveMode();// 0x26abc08
	void EndTouchScreen(byte FingerIndex);// 0x26abb90
	void EndForceTouchFire();// 0x26abb7c
	void EnableRCRVisualization(byte VisualizationLevel);// 0x24bc5e4
	void EnablePlayerWeaponModuleSystem(bool bEnable);// 0x26abafc
	void EnablePlayerInHouse(bool bIsIn);// 0x26aba7c
	void EnableMyLandscapeDraw();// 0x26aba68
	void EnableItem(ItemDefineID DefineID);// 0x26ab9e0
	void EnableBuildingMode(bool checkVehicle);// 0x26ab954
	void DynamicCreateComponents();// 0x26ab940
	void DumpObjectByName(FString ObjectName);// 0x26ab85c
	void DropItem(ItemDefineID DefineID, int Count, enum Reason);// 0x26ab74c
	void DoUITouchMove(Vector Loc, float SizeX, float SizeY, float LeftOffset, float BottomOffset, CanvasPanelSlot* Slot);// 0x26ab560
	void DoubleClickCancel(const byte FingerIndex);// 0x26ab4e8
	void DoTouchMove(float Yaw, float Pitch);// 0x46f6b154
	void DoRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x26ab434
	void DoGiveUpRevivalTemmates(RevivalPointActor* RevivalPoint);// 0x26ab380
	void DoAfterCanNotPickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x46f6b154
	void DisuseItem(int ID);// 0x26ab308
	void DisplayGameWarnTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x26ab12c
	void DisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x26aaf50
	void DisplayGameTipWithMsgIDAndFullParams(int ID, FString param1, FString param2, UAEBlackboard* ExtraParams);// 0x26aad2c
	void DisplayGameTipWithMsgID(int ID);// 0x26aacb4
	void DisplayGameTipForLowFPSWarning(int ID, FString param1, FString param2);// 0x26aaad8
	void DispatchPlayerReconnectedEvent();// 0x26aaac4
	void DispatchPlayerLostEvent();// 0x26aaab0
	void DispatchPlayerExitEvent();// 0x26aaa9c
	void DisableMyLandscapeDraw();// 0x26aaa88
	void DisableItem(ItemDefineID DefineID);// 0x26aaa00
	void DelayForceExitFreeCamera();// 0x26aa9ec
	void DebugWorldPlayerAvatarInfo();// 0x26aa9d8
	void DebugSetUIVisibility(bool bUIVisibility);// 0x46f6b154
	void DebugPlayerVision();// 0x26aa9c4
	void DebugEnableFerrisWheelTick(bool bEnable);// 0x26aa944
	void DebugEnableDrawSearchLine(int bEnabled);// 0x26aa8cc
	void DebugEnableBulletImpact(int bEnabled);// 0x26aa854
	void DebugAirDropPickInfo(float DrawTime, float BoxDrawSize, float BoxDrawLineLength, float ListWrapperDrawSize, float ListWrapperDrawLineLength);// 0x26aa6c4
	void DealGetAllNearShotWeapon(float disRate);// 0x26aa64c
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);// 0x26aa590
	void DealGetAllNearMoveCharacter(float checkDis);// 0x26aa518
	void DeactiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x26aa454
	void CurrentPawnStateChange(uint64 CurrentPawnState);// 0x26aa3d8
	void CreateNewClientFatalDamageInfo(int inNumber);// 0x26aa360
	void CorrectVehicleState(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x26aa164
	void ConsumeRevivalSign();// 0x26aa148
	void ConsumeDecalItem(int ItemID, int Count);// 0x26aa08c
	void CollectAllPlayerWeaponPosInfo();// 0x26aa078
	void CloseOnceBuild(int cnt);// 0x26a9fc4
	void ClientVisualizeRCR(const RCRVisualizationInfo Info, byte Level);// 0x26a9e00
	void ClientUnpossessPawn(STExtraBaseCharacter* ControledPawn);// 0x26a9d4c
	void ClientSyncBountyBoughtItemList(const BountyBoughtInfo[] ServerBountyBoughtItemList);// 0x26a9cb4
	void ClientStartOnPlane();// 0x26a9c98
	void ClientStartOnlineGame();// 0x26a9c78
	void ClientStartMonsterTreasureBox();// 0x26a9c5c
	void ClientShowNavLink(const NavLinkInfo[] LinkDatas);// 0x26a9bc4
	void ClientSetTotalPlayers(const PlayerStaticInfoInOB[] InPlayerStaticInfoList, const PlayerBaseInfoInOB[] InTotalPlayers, const RouteSegment[] RouteSegmentData);// 0x26a99e8
	void ClientSetControlRotation(const Rotator NewRotation);// 0x26a996c
	void ClientSetAIPosToTarget(Vector StartPos, Vector TargetPos);// 0x26a9880
	void ClientSetAIPos(uint32 keyID, Vector Pos, bool IsStart);// 0x26a9758
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);// 0x26a9688
	void ClientRPC_NotifyRequestDone(const PlayerOBInfo inInfo);// 0x26a9564
	void ClientRPC_ChangeVehicleAvatarSucceedNotify(FString UserName, int VehicleAvatarID);// 0x26a9488
	void ClientReceiveConcertSyncData(ConcertPlayerActor* InConcertPlayerActor, ConcertSendSyncData InSyncData);// 0x26a9110
	void ClientQuitViewEnemy();// 0x26a90f4
	void ClientPrintStringToScreen(FString inString, LinearColor TextColor, float Duration);// 0x26a8f7c
	void ClientPlayerFiringInOB(uint32 InPlayerKey, Vector InHitPos);// 0x26a8ea8
	void ClientOperateActor(Actor* Actor, int OperateType);// 0x26a8dec
	void ClientOnHurt();// 0x26a8dd0
	void ClientOnDamageToOther(float _DamageToOther);// 0x26a8d50
	void ClientObserveCharacter(uint32 InPlayerKey, bool IsOnPlane, StateType StateType, Actor* NextViewTarget);// 0x26a8bcc
	void ClientObJudgeKill(FString InPlayerKey);// 0x26a8ae8
	void ClientHeartbeat(float DeltaTime);// 0x26a8a70
	void ClientHearSound(int AkEventID, const Vector AkLocation);// 0x26a89a4
	void ClientGiveUpRevivalTemmates();// 0x26a8990
	void ClientGameStarted();// 0x26a8970
	void ClientFriendBattleEnd();// 0x26a8954
	void ClientFindingPathRcv(const Vector[] PathPoints);// 0x26a888c
	void ClientExitFromHelicopter(bool SkipOpenParachute);// 0x26a8804
	void ClientEnterViewBox(int BoxId);// 0x26a8784
	void ClientEndOnlineGame();// 0x26a8764
	void ClientDisplayGameTipWithMsgIDAndString(int ID, FString param1, FString param2);// 0x26a85f4
	void ClientDisplayGameTipWithMsgID(int ID);// 0x26a8540
	void ClientCheatCommandResult(const CheatCommandResultInfo InCheatCommandResultInfo);// 0x26a84a8
	void ClientChangeWeaponFunction(enum NewWeaponFunction);// 0x26a83f4
	void ClientChangeStatePC(StateType TargetStateType);// 0x26a8354
	void ClientBountyBuyItemResult(BountyBuyingResultInfo InBuyingResultInfo);// 0x26a82b8
	void ClearStateSign(enum State);// 0x26a8240
	void ClearFireSign();// 0x26a822c
	Vector2D ClampFreeCamIconOffset(out const Geometry MyGeometry);// 0x26a818c
	bool CientRevivalTemmates();// 0x26a8164
	void CheckUpdateTeamAssembleDisplayInfo();// 0x26a8150
	void CheckTeammateAvatarDisplayInfoInit();// 0x26a813c
	void CheckGoalAchieved();// 0x26a8128
	void CheckAddUnLoadUserWidgetStyleTimerHandle(UserWidgetStyle* Style);// 0x26a80b0
	void ChangeWeaponFunction(enum NewWeaponFunction);// 0x26a8038
	void ChangeTeamAssembleDisplayViewState(bool IsEnable);// 0x26a7fb8
	void ChangeSpectatorStateToFreeView();// 0x26a7fa4
	void ChangeGlideState();// 0x26a7f90
	void ChangeCampStatus(bool ShowAirLine, bool UseDistanceMeasurement, bool ShowTeammateKillInfo, bool Dice, bool AIHelper, int CampStatusFromServer, bool ShowResPoint);// 0x26a7d30
	void ChangeAllowOBPlayerKeys(uint32[] InPlayerList);// 0x26a7c4c
	bool CanUseRemmoteControl();// 0x26a7c1c
	void CanSeeAllUI(bool bUIVisibility);// 0x26a7b9c
	bool CanScaleScreenSizeCulling();// 0x26a7b74
	bool CanClientObJudgeKill(FString InPlayerKey);// 0x26a7a88
	bool CanBePickUpByItemID(out const ItemDefineID DefineID);// 0x26a79e8
	bool CanBePickUp(Actor* Target, int AdditionalParam, int pickCount);// 0x26a78d8
	void CallTeamMateUAVStateChanged(TeamMateStateInfo TeamMateInfo);// 0x26a7820
	void CallTeamMateStateChanged(TeamMateStateInfo TeamMateInfo);// 0x26a7768
	void CallShowTouchInterface(bool InShow);// 0x26a76e0
	void CallShowMedicBulletHitTips(Actor* HitPlayer);// 0x26a7668
	void CallSendServerReportImprisonmenter();// 0x26a7654
	void CallSendClientData();// 0x26a7640
	void CallEscapeHelicopter(int PlayAnimImmediately, float CallHeight);// 0x238dad8
	bool CalledOverrideClickQuitSpectating();// 0x26a7610
	void CalInputFromRotaionRate(out float OutPitch, out float OutYaw, out bool bIsAddPitch, out bool bIsAddYaw, Vector CurMotionData, float PitchReverce, MotionControlConfig Config, float Left, float Right, bool bLandScapeOrientation);// 0x26a7200
	Vector2D CalcAttactBtnPos(float locX, float locY, float SizeX, float SizeY);// 0x26a7098
	void C2SRPC_RequestSyncReportInfo();// 0x26a703c
	void C2S_SubmitQuestionRequest(const int QuestionID, const int AnswerID);// 0x26a6f40
	void C2S_SendUIStyleInfoToDS(bool bIsLoad, FString UIStyleName);// 0x26a6e1c
	void C2S_RequestSkillPrompt();// 0x26a6dc0
	void C2S_RequestBeingRescuedRemainingTime();// 0x26a6d64
	void C2S_GetQuestionRequest();// 0x26a6d08
	void BuildArroundMySelf();// 0x26a6cf4
	void BroadcastVaultFailDSCpp();// 0x26a6ce0
	void BroadcastFatalDamageToClientSimple(ClientFatalDamageRecordDataSimple Data);// 0x26a6aa0
	void BroadcastFatalDamageToClient(ClientFatalDamageRecordData Data);// 0x26a6944
	void BroadcastClientsSpawnExplosionEffect(class STExtraExplosionEffect Template, Transform Trans, Actor* ActorOwner, Pawn* InstigatorPawn, enum method);// 0x26a66e0
	void BroadcastBeMaxKillerToClient(byte CurMaxKillerStatus, FString MaxKillerName, uint32 MaxKillerKey, int KillNum);// 0x26a6568
	bool BPGetIsAndroidSimulator();// 0x26a6540
	void BPClientCheatCommandResult(out const CheatCommandResultInfo InCheatCommandResultInfo);// 0x46f6b154
	void BPCastUIMsgWithTwoParam(FString Func, FString module, FString param1, FString param2);// 0x26a6398
	void BPCastUIMsgWithParam(FString Func, FString module, FString param1);// 0x26a6250
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x46f6b154
	void BlueprintOnWidgetInit(UAEUserWidget* Widget);// 0x26a61d8
	void BeginTouchScreen(Vector Loc, byte FingerIndex);// 0x26a610c
	void BackToGameDataRefresh();// 0x26a60f8
	bool AutoSelectViewTarget();// 0x26a60d0
	void AutoSelectTeammateToView();// 0x26a60bc
	void AsanTest();// 0x26a60a8
	void ApplyGameModeProfile(FString ProfileName);// 0x26a6010
	void AirDropVehicle(int Index, float Z);// 0x26a5f54
	void AddWeaponPendantItem(int WeaponID, int pendantID);// 0x26a5e98
	void AddTouchMoveFinger(byte FingerIndex, byte Priority, out const Vector TouchLoc);// 0x26a5d80
	void AddTeammatesYouKilled(STExtraPlayerController* TeammateYouKill);// 0x26a5d08
	void AddSignalGunGM(int gmType, int GeneralBoxTime);// 0x26a5c4c
	void AddMarkedWrapperActorMonitor(int WrapperActorNetGUID, uint32 MonitorPlayerKey);// 0x26a5b50
	void AddMapPathOnBothMap(int TypeID);// 0x26a5ad8
	void AddItem(int ID, int Count);// 0x26a5a1c
	void ActiveTaskTrigger(byte ConditionType, VariableSet* InDataSource);// 0x26a5958
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x26a58d8

--------------------------------
Class: UAEPlayerController.PlayerController.Controller.Actor.Object
	TimerHandle TimerHandle_DelayedNotifyBattleBeginPlay;//[Offset: 0x580, Size: 8]
	FName PlayerType;//[Offset: 0x5b0, Size: 8]
	FString PlayerName;//[Offset: 0x5b8, Size: 12]
	uint32 PlayerKey;//[Offset: 0x5c4, Size: 4]
	FString PlayerUID;//[Offset: 0x5c8, Size: 12]
	FString PlayerOpenID;//[Offset: 0x5e0, Size: 12]
	int TeamID;//[Offset: 0x5ec, Size: 4]
	Vector CharacterLocation;//[Offset: 0x5f0, Size: 12]
	int RoomMode;//[Offset: 0x5fc, Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x600, Size: 20]
	int PlayerStartID;//[Offset: 0x614, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x61c, Size: 112]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	Character* MainCharacter;//[Offset: 0x690, Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 1]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	Actor* CastUIMsgTempActorParam;//[Offset: 0x6a4, Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x6a8, Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x6ac, Size: 12]
	int playerFaceHandleID;//[Offset: 0x6b8, Size: 4]
	SuitSkinData SuitSkinData;//[Offset: 0x6bc, Size: 28]
	WeaponModData[] WeaponModDatas;//[Offset: 0x6d8, Size: 12]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x6e4, Size: 12]
	GameModePlayer_WearInfo InitialWearInfo;//[Offset: 0x6f0, Size: 144]
	<int,int> WeaponAvatarItemList;//[Offset: 0x780, Size: 60]
	VehicleAvatarItemPairData[] RepWeaponAvatarItemArray;//[Offset: 0x7bc, Size: 12]
	<int,GameModePlayerItemList> WeaponAttachmentItemList;//[Offset: 0x7c8, Size: 60]
	<int,VehicleAvatarSkinItem> VehicleAvatarItemList;//[Offset: 0x804, Size: 60]
	bool HasVehicleOnBornLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	VehicleAvatarItemPairData[] RepVehicleAvatarItemList;//[Offset: 0x844, Size: 12]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0x850, Size: 12]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x85c, Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x868, Size: 4]
	GameModePlayerDecalItem[] InitialDecalItemList;//[Offset: 0x86c, Size: 12]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x878, Size: 12]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0x884, Size: 12]
	int AnchorPlatResID;//[Offset: 0x890, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x894, Size: 4]
	int PassCardBuyType;//[Offset: 0x898, Size: 4]
	int PassCardBuyLevel;//[Offset: 0x89c, Size: 4]
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a0, Size: 1]
	int InitDropId;//[Offset: 0x8a4, Size: 4]
	int SeasonWeekIndex;//[Offset: 0x8a8, Size: 4]
	int JoinSourceType;//[Offset: 0x8ac, Size: 4]
	uint64[] LobbyTeammates;//[Offset: 0x8b0, Size: 12]
	delegate OnHasBegunPlay;//[Offset: 0x8cc, Size: 12]
	Pawn* DefaultControlPawn;//[Offset: 0x8d8, Size: 8]
	int64 LastGameResultTime;//[Offset: 0x8e0, Size: 8]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e8, Size: 1]
	bool bIsObserverHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e9, Size: 1]
	int OBGM;//[Offset: 0x8ec, Size: 4]
	bool bIsGMWatcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f1, Size: 1]
	bool bNeedCloseLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f2, Size: 1]
	float CloseLoadingSecond;//[Offset: 0x8f4, Size: 4]
	bool bIsAliveSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	delegate OnRepIsSpectatingDelegate;//[Offset: 0x8fc, Size: 12]
	uint32 WatchPlayerKey;//[Offset: 0x908, Size: 4]
	int ObserverEnemyDistSquare;//[Offset: 0x90c, Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x912, Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 1]
	delegate OnInitInGameUICompleted;//[Offset: 0x92c, Size: 12]
	UAEUserWidget* InGameUIRoot;//[Offset: 0x97c, Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988, Size: 1]
	bool bReconnecting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x989, Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0x998, Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0x9a4, Size: 12]
	delegate ClientPlayerControllerRecoveredDelegate;//[Offset: 0x9b0, Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0x9c8, Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0x9d4, Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0x9e0, Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0x9ec, Size: 12]
	int[] AvatarEditorTestList;//[Offset: 0x9fc, Size: 12]
	bool bDSNeedTickHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa08, Size: 1]
	FString MedalClubID;//[Offset: 0xa0c, Size: 12]
	int MedalClubLevel;//[Offset: 0xa18, Size: 4]
	float NegotiateDHKeyTimer;//[Offset: 0xa3c, Size: 4]
	float NegotiateDHKeyTimeout;//[Offset: 0xa40, Size: 4]
	int LastRetCodeZeroAndLenZeroThreshold;//[Offset: 0xa44, Size: 4]
	void UpdatePlayerOBBattleInfo(const FString UIDString, out const PlayerOBBattleInfo NewBattleInfo);// 0x2fd5288
	void UnloadAllLandscape();// 0x235d4b8
	void TestShowLiveTime();// 0x2fd5274
	void TestRemoveMapItem(int Type, int ID);// 0x2fd51b8
	void TestRemoveLiveMapItem(int ID);// 0x2fd5140
	void TestPushOneOBInfo();// 0x2fd512c
	void TestLuaNetwork();// 0x46f6b154
	void TestLogout();// 0x235d4b8
	void TestLiveTips(int Type);// 0x2fd50b4
	void TestAddMapItem(int Type, int ID);// 0x2fd4ff8
	void TestAddLiveMapItem(int ID);// 0x2fd4f80
	void SetUsedSimulationCVar(bool Value);// 0x2fd4f00
	void SetShowIslandNicknameValue(bool flag);// 0x2fd4e80
	void SetPanels(out const UAEUserWidget*[] panels);// 0x2fd4dd8
	void ServerTestLogout();// 0x2fd4d7c
	void ServerStartLuaDebuger(FString IP, FString Port);// 0x2fd4c54
	void ServerSetVoiceId(int VoiceID);// 0x2fd4ba0
	void ServerSetRobotVoiceId(int VoiceID);// 0x2fd4aec
	void ServerReportCollectedEventDataWithPlayerValidation(byte EventId, const CollectedEventKeysValues KeysValues);// 0x2fd4968
	void ServerReportCollectedEventData(byte EventId, const CollectedEventKeysValues KeysValues);// 0x2fd47e4
	void ServerLoadAllLevels();// 0x2fd47d0
	void ServerKickSelf();// 0x2fd4774
	void ServerHandleClassFieldAccessDenied(uint32 InPlayerKey, const FName InClassName, const FName InFieldName);// 0x2fd4610
	void ServerGetOneOBInfo(FString UID);// 0x2fd4548
	void ServerExitGame();// 0x2fd44ec
	void ServerAuthenticatePlayer(FString AuthKey);// 0x2fd4424
	void ServerAcknowledgeReconnection(uint32 Token);// 0x2fd4370
	void SendRawDataToServer(const byte[] InData);// 0x2fd42a8
	void SendRawDataToClient(const byte[] InData);// 0x2fd4210
	void RPC_ServerNegotiateDHKey(FString ClientPublicKey, FString CRC, int8 KeyIndex, int Seq);// 0x2fd4050
	void RPC_ClientNegotiateDHKey(FString Gen, FString Prime, FString ServerPublicKey, int8 KeyIndex, int Seq);// 0x2fd3e30
	void ResetUsedSimulationCVar();// 0x2fd3e1c
	void ResetToControlPawn();// 0x2fd3e00
	bool ReportCollectedEventDataWithPlayerValidation(byte EventId, delegate CollectReportedEventDataCallback);// 0x2fd3d10
	bool ReportCollectedEventData(byte EventId, out const CollectedEventData Data);// 0x2fd3bc8
	void ReleaseInGameUI();// 0x2fd3bac
	void RecordControlPawn();// 0x2fd3b90
	void PrintStatistics();// 0x235d4b8
	void PostLoginInit(UAEGameMode* GameMode);// 0x2fd3b10
	bool PlayerWillBeRevival();// 0x2fd3ae0
	void PlayerStartIDReceived();// 0x2fd3acc
	void OnSetVoiceId(int VoiceID);// 0x46f6b154
	void OnRep_WeaponAvatarItemList();// 0x2fd3ab8
	void OnRep_WatchPlayerKey();// 0x2fd3a9c
	void OnRep_VehicleAvatarItemList();// 0x2fd3a88
	void OnRep_UsedSimulation();// 0x26b3054
	void OnRep_TeamID();// 0x26b3038
	void OnRep_RoomMode();// 0x26b2f90
	void OnRep_PlayerOBInfoList();// 0x2fd3a74
	void OnRep_OBGM();// 0x2fd3a58
	void OnRep_NeedCloseLoading();// 0x2fd3a44
	void OnRep_LastGameResultTime();// 0x2fd3a28
	void OnRep_IsSpectatingEnemy();// 0x2fd3a0c
	void OnRep_IsSpectating();// 0x2fd39f0
	void OnRep_IsObserver();// 0x2fd39d4
	void OnRep_IsGMWatcher();// 0x2fd39b8
	void OnRep_ISGM();// 0x2fd39a4
	void OnRep_CharacterLocation();// 0x2fd3990
	void OnLocalSettingChanged();// 0x46f6b154
	void OnCharacterPositionUpdatedByServer(float Distance);// 0x2fd38dc
	void NotifyClientNetworkLost();// 0x2fd38c0
	void LoadAllLandscape();// 0x235d4b8
	void KickSelf();// 0x235d4b8
	bool IsSpectatorOrReplaying();// 0x2fd3898
	bool IsSpectator();// 0x2fd37d4
	bool IsRoomMode();// 0x2fd3874
	bool IsPureSpectator();// 0x2fd384c
	bool IsPlayerCollectedEventDataReportingEnabled();// 0x2fd3824
	bool IsObserverHost();// 0x2fd37fc
	bool IsObserver();// 0x2fd37d4
	bool IsOBGM();// 0x26b0754
	bool IsInTeamerSpeacting();// 0x2fd37ac
	bool IsInSpectatingEnemy();// 0x2fd3784
	bool IsInSpectating();// 0x2fd375c
	bool IsInDead();// 0x26b0410
	bool IsGMWatcher();// 0x2fd3734
	bool IsGlobalObserver();// 0x2fd370c
	bool IsFriendOrEnemySpectator();// 0x2fd36e4
	bool IsFriendObserver();// 0x2fd36bc
	bool IsExited();// 0x2fd36a0
	bool IsDemoRecSpectator();// 0x2fd3678
	bool IsDemoPlaySpectator();// 0x2fd3650
	void InitWithPlayerParams(out const GameModePlayerParams Params);// 0x2fd3370
	void InitWeaponAvatarItems();// 0x2fd334c
	void InitWeaponAttachmentAvatarItems();// 0x2fd3330
	void InitVehicleAvatarItems();// 0x2fd3314
	void InitPlayerWearInfo();// 0x2fd32f8
	void InitInGameUI(bool Respawn, bool bIsNetRecover);// 0x2fd3220
	void HandleBreakUAEWindow(int WinNum);// 0x26ae904
	int GotoSpectating(int PlayerID);// 0x26ae868
	Widget* GetWidgetByName(FString WidgetName, FString OuterName, bool bUseContains, FName LogicManager, bool bUseStartWith);// 0x2fd2ff0
	Widget* GetWidgetByClassPath2(FString WidgetName, class UAEUserWidget WidgetClass2);// 0x2fd2e80
	Widget* GetWidgetByClassPath(FString WidgetName, SoftObjectPath WidgetClass);// 0x2fd2d24
	bool GetWeaponPandentReflect(int wraponID, out int pendantID);// 0x2fd2c50
	bool GetWeaponModuleListWithOutParam(int WeaponID, out int[] OutList, int ModeID);// 0x2fd2b1c
	int[] GetWeaponModuleList(int WeaponID, int ModeID);// 0x2fd29fc
	int[] GetVehicleAvatarSkinList(const int InTargetVehicleID);// 0x2fd2920
	uint32 GetSpectatingPlayerKey();// 0x2fd28f0
	PlayerOBInfo[] GetPlayerOBInfoListReference();// 0x2fd28c0
	int GetPlayerOBInfoItemNum();// 0x25fa2b0
	FString GetOBPlayerUIDString(out const PlayerOBInfo PlayerOBInfo);// 0x2fd2764
	NetRelevancyGroup GetNetRelevancyGroup();// 0x2fd2748
	int64 GetInt64UID();// 0x2fd2720
	UAEUserWidget* GetIngameUIRoot();// 0x2fd26f0
	uint32 GetCurrentOBPlayerKey();// 0x2fd26c0
	int GetCurrentOBPlayerInfoIndex();// 0x2fd2698
	void ForceNetReady();// 0x2fd2684
	void ExitGame();// 0x2fd2670
	void ExhaustCPU();// 0x2fd265c
	void ExecDSCommand(const FString DSCommand);// 0x26abca8
	void ExcuteIntRecord(FString Key, int Count);// 0x2fd2534
	void ExcuteIntCounterRecord(FString Key, int Count);// 0x2fd240c
	void EnableInGameUI();// 0x2fd23f8
	void DumpViewTargetCriticalLevels();// 0x2fd23e4
	void DumpUAENetActors();// 0x235d4b8
	void DumpRegions();// 0x2fd23d0
	void DumpObjectRelations();// 0x235d4b8
	void DumpNetActors();// 0x235d4b8
	void DumpDemoNetActors();// 0x235d4b8
	void DumpCharacters();// 0x2fd23bc
	void DumpAllUI();// 0x235d4b8
	void DumpAllObjects();// 0x235d4b8
	void DumpAllGCObjects();// 0x235d4b8
	void DumpAllActors();// 0x235d4b8
	void DoCrash();// 0x235d4b8
	void DisableInGameUI();// 0x2fd23a8
	void DelayedNotifyBattleBeginPlay();// 0x2fd2394
	void DebugCollectedEvent(bool bCollectedEventDataReportingEnabled, int CollectedEventType);// 0x2fd22cc
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameState* UAEGameState, UAEPlayerController* UAEPlayerController, byte EventId);// 0x46f6b154
	void ClientShowTeammateEscapeNotice();// 0x2fd22b0
	void ClientRPC_CastUIMsgTwoParams(FString strMsg, FString module, FString param1, FString param2);// 0x2fd2100
	void ClientRPC_CastUIMsgParams(FString strMsg, FString module, const int Type);// 0x2fd1fc8
	void ClientRPC_CastUIMsg(FString strMsg, FString module);// 0x2fd1ed4
	void ClientRPC_BroadcastRespawnComplete();// 0x26ea428
	void ClientPushOneOBInfo(const PlayerOBInfo Info);// 0x2fd1de0
	void ClientInitPlayerOBInfoButton();// 0x25ebed0
	void ClientHandleClassFieldAccessDenied(const FName InClassName, const FName InFieldName);// 0x2fd1ccc
	void ClientBroadcastReconnectionSuccessful();// 0x2fd1cb0
	void ClientAcknowledgeReconnection(uint32 Token);// 0x2fd1c30
	void Client_DelFriendObservers(FString InPlayerName);// 0x2fd1b98
	void Client_AddFriendObservers(FString InPlayerName);// 0x2fd1b00
	void ClearWatchPlayerKey();// 0x2fd1aec
	void ClearUIFunctionCacheByUIMsg(FString strMsg, FString module);// 0x2fd19f8
	void CheckPlayerOBInfoButtonInit();// 0x2fd19dc
	bool CheckAcknowledgedPawn(Pawn* InPawn);// 0x2fd1954
	void CastUIMsgWithTarget(FString strMsg, FString module, out const FName TargetName);// 0x2fd1810
	void CastUIMsgWithActorParam(FString strMsg, Actor* Actor, FString module);// 0x2fd16d8
	void CastUIMsg(FString strMsg, FString module);// 0x2fd15e4
	bool CanObserveOtherPlayer(UAEPlayerController* OtherPC);// 0x2fd155c
	void CallLuaTableFunction(FString TableName, FString FunctionName);// 0x2fd1468
	void CallLuaGlobalFunction(FString FunctionName);// 0x2fd13d0
	void BroadcastRespawnComplete();// 0x2fd13bc
	void AutoSelectObservedTargetByServer();// 0x2fd1360

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0, Size: 12]
	int WeatherID;//[Offset: 0xc, Size: 4]
	float WeatherTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0, Size: 12]
	FString LocalAddr;//[Offset: 0xc, Size: 12]
	float AvgPing;//[Offset: 0x18, Size: 4]
	float MaxPing;//[Offset: 0x1c, Size: 4]
	float HighPingPercent;//[Offset: 0x20, Size: 4]
	float InBytesPerSecond;//[Offset: 0x58, Size: 4]
	float OutBytesPerSecond;//[Offset: 0x5c, Size: 4]
	float InPacketLostRate;//[Offset: 0x60, Size: 4]
	float OutPacketLostRate;//[Offset: 0x64, Size: 4]
	float OutSaturationRate;//[Offset: 0x68, Size: 4]
	float TotalPositionUpdatedDistance;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: MotionControlConfig
	float MotionRateYaw;//[Offset: 0x0, Size: 4]
	float MotionRatePitch;//[Offset: 0x4, Size: 4]
	float MotionAimRatePitch;//[Offset: 0x8, Size: 4]
	float MotionAimRateYaw;//[Offset: 0xc, Size: 4]
	float MotionRateYawThreshold;//[Offset: 0x10, Size: 4]
	float MotionRatePitchThreshold;//[Offset: 0x14, Size: 4]
	float MotionTouchAimRatePitch;//[Offset: 0x18, Size: 4]
	float MotionTouchAimRateYaw;//[Offset: 0x1c, Size: 4]
	float MotionTouchRatePitch;//[Offset: 0x20, Size: 4]
	float MotionTouchRateYaw;//[Offset: 0x24, Size: 4]

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc, Size: 12]
	int PlayerGender;//[Offset: 0x18, Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x20, Size: 12]
	int[] EquipedWeaponList;//[Offset: 0x2c, Size: 12]
	int[] EquipedWeaponAttachmentSkinList;//[Offset: 0x38, Size: 12]
	AnimMontage* DisplayAnimMontage;//[Offset: 0x44, Size: 4]

--------------------------------
Class: ClientTeamerMaxKillerRecord
	FString PlayerName;//[Offset: 0x0, Size: 12]
	bool bIsKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 32]
	SensibilityMode fireMode;//[Offset: 0x20, Size: 32]
	SensibilityMode MotionMode;//[Offset: 0x40, Size: 32]
	SensibilityMode MotionFireMode;//[Offset: 0x60, Size: 32]
	int XaxisInversionSwitch;//[Offset: 0x80, Size: 4]
	float VehicleEye;//[Offset: 0x84, Size: 4]
	float ParachuteEye;//[Offset: 0x88, Size: 4]
	float CamSenBuildTp;//[Offset: 0x8c, Size: 4]
	float CamSenBuildFp;//[Offset: 0x90, Size: 4]
	float FPPEye;//[Offset: 0x94, Size: 4]
	int SideMirrorModeC;//[Offset: 0x98, Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0x9c, Size: 60]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 4]
	float Sight1X;//[Offset: 0x4, Size: 4]
	float Sight2X;//[Offset: 0x8, Size: 4]
	float Sight3X;//[Offset: 0xc, Size: 4]
	float Sight4X;//[Offset: 0x10, Size: 4]
	float Sight6X;//[Offset: 0x14, Size: 4]
	float Sight8X;//[Offset: 0x18, Size: 4]
	float FPPNoAim;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0, Size: 4]
	int Type;//[Offset: 0x4, Size: 4]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xd0, Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	float GuideInterval;//[Offset: 0xd8, Size: 4]
	int MaxGuideLevel;//[Offset: 0xdc, Size: 4]
	NewbieGuideItem[] Items;//[Offset: 0xe0, Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0xec, Size: 4]
	int[] FinishedTips;//[Offset: 0xf0, Size: 12]
	int[] FinishedCounts;//[Offset: 0xfc, Size: 12]
	ZombieModeGuideInfo ZombieModeGuideInfo;//[Offset: 0x134, Size: 5]
	void SendNewbieMsg(int TipsID, bool IsStart, int tipsIndex);// 0x253bd2c
	void OnUIAssetLoadFinsh(LoadGuideUIFinishRet inFinishRet);// 0x253bcb0
	void OnGuideFinishEventTrigger(GSListenerBase* Trigger);// 0x253bc38
	void InitComponent(STExtraPlayerController* _OwnerController, int[] _FinishedTips, int[] _FinishedCounts, byte curPlayerCategory, bool isGMTest);// 0x253b9c8
	bool GetIsAllowNewGuide();// 0x253b9a0

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	byte Type;//[Offset: 0x10, Size: 1]
	int MaxGuideCounts;//[Offset: 0x14, Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x18, Size: 12]
	int Priority;//[Offset: 0x24, Size: 4]
	int MuteFlag;//[Offset: 0x28, Size: 4]
	int PreconditionID;//[Offset: 0x2c, Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x30, Size: 4]
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x34, Size: 12]
	STNewbieGuideSuccessListenerBase*[] QuickFinishedListener;//[Offset: 0x40, Size: 12]
	float Duration;//[Offset: 0x4c, Size: 4]
	NewbieGuideUIInfo[] UIInfos;//[Offset: 0x50, Size: 12]
	NewbieGuideModeSettings ModeSettings;//[Offset: 0x5c, Size: 36]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x1c, Size: 8]
	bool ReconnectRecover();// 0x242e898
	bool IsOK();// 0x23f3158

--------------------------------
Class: STNewbieGuideSuccessListenerBase.GSListenerBase.Object
	bool GuideFinishedByPlayer();// 0x253b688

--------------------------------
Class: GSListenerBase.Object
	delegate OnGSListenerBaseTrigger;//[Offset: 0x1c, Size: 12]
	Controller* OwnerController;//[Offset: 0x28, Size: 8]
	bool bAutoDisableWhenTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float DelayTime;//[Offset: 0x34, Size: 4]
	bool ReconnectRecover();// 0x242e898
	void OnEventTrigger();// 0x2374d20
	Actor* GetCurrentEventOwnerActor();// 0x236694c
	bool EnableListener();// 0x24da380
	bool DisableListener();// 0x23f3158

--------------------------------
Class: NewbieGuideUIInfo
	STNewbieGuideConditionBase*[] Conditions;//[Offset: 0x0, Size: 12]
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x10, Size: 40]
	bool isMountUIDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	FString MountName;//[Offset: 0x3c, Size: 12]
	FString MountOuterName;//[Offset: 0x48, Size: 12]
	AnchorData LayoutData;//[Offset: 0x54, Size: 40]
	FName LogicManagerNames;//[Offset: 0x80, Size: 8]
	class UAEUserWidget* WidgetClass2;//[Offset: 0x88, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int ZOrder;//[Offset: 0xb4, Size: 4]
	Widget* UIWidget;//[Offset: 0xb8, Size: 4]
	class Object* UIWidgetClass;//[Offset: 0xbc, Size: 4]

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 16]
	Anchors Anchors;//[Offset: 0x10, Size: 16]
	Vector2D Alignment;//[Offset: 0x20, Size: 8]

--------------------------------
Class: NewbieGuideModeSettings
	FString[] SubModeIDArray;//[Offset: 0x0, Size: 12]
	enum[] ModeTypeArray;//[Offset: 0xc, Size: 12]
	FString[] ModeUIArray;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ZombieModeGuideInfo
	bool isLanded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool isMonsterWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool isBossComing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool isFortressCloseWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool isFortressOpenWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: LoadGuideUIFinishRet

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x3e1e1c8

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24, Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int ZOrder;//[Offset: 0x50, Size: 4]
	bool bAntiAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	void SetZOrder(int InZOrder);// 0x3e1ece0
	void SetSize(Vector2D InSize);// 0x3e1ec70
	void SetPosition(Vector2D InPosition);// 0x3e1ec00
	void SetOffsets(Margin InOffset);// 0x3e1eb78
	void SetMinimum(Vector2D InMinimumAnchors);// 0x3e1eb08
	void SetMaximum(Vector2D InMaximumAnchors);// 0x3e1ea98
	void SetLayout(out const AnchorData InLayoutData);// 0x3e1ea00
	void SetAutoSize(bool InbAutoSize);// 0x3e1e980
	void SetAnchors(Anchors InAnchors);// 0x3e1e8f8
	void SetAlignment(Vector2D InAlignment);// 0x3e1e888
	int GetZOrder();// 0x3e1e860
	Vector2D GetSize();// 0x3e1e820
	Vector2D GetPosition();// 0x3e1e7e0
	Margin GetOffsets();// 0x3e1e79c
	AnchorData GetLayout();// 0x3e1e748
	bool GetAutoSize();// 0x3e1e720
	Anchors GetAnchors();// 0x3e1e6dc
	Vector2D GetAlignment();// 0x3e1e69c

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	void RPC_SrvSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf, double InClientTime);// 0x2734d2c
	void RPC_SrvSyncTimeLine(double InSrvSendTime, double InClientTime);// 0x2734c18
	void RPC_GetClientTimeRespond(int Index, int64 RealTime, int64 MonotonicTime, int64 MonotonicRawTime, int64 BootTime, int64 CustomTime);// 0x2734998
	void RPC_GetClientTimeRequest(int Index, int64 ServerTime);// 0x2734898
	void RPC_ClientSyncTimeLine_UnReliable(byte InIndex, uint16 InSrvInf);// 0x273479c
	void RPC_ClientSyncTimeLine(double InServerTime);// 0x27346dc
	void ReportDebugInfo(int RporetedId);// 0x2734628
	void OnServerAboutToReconnect();// 0x2734614
	void GetClientTimeInterval();// 0x2734600
	void CheckTimeLine();// 0x27345ec

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	float TimeStartDelay;//[Offset: 0xd4, Size: 4]
	float SyncInterval;//[Offset: 0xd8, Size: 4]
	uint32 ServerPhase;//[Offset: 0x23c, Size: 4]
	void RPC_SrvSyncTimeLine(byte InIndex, uint16 InSrvInf, TwgClientInfo InClientTime);// 0x2735a64
	void RPC_ClientSyncTimeLine(byte InIndex, uint16 InSrvInf);// 0x27359a0
	void OnTimeInspectorColdMove_Vehicle();// 0x273598c
	void OnTimeInspectorColdMove_Own();// 0x2735978
	void OnServerAboutToReconnect();// 0x2735964
	void CheckTimeLine();// 0x2735950

--------------------------------
Class: TwgClientInfo

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	int ShootVerifyFailedCount;//[Offset: 0xd0, Size: 4]
	bool bRepShouldUseNewBulletUpload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	VerifySwitch VsHitDetail;//[Offset: 0x17c, Size: 12]
	VerifySwitch VsFlyDist2D;//[Offset: 0x188, Size: 12]
	VerifySwitch VsFlyDist3D;//[Offset: 0x194, Size: 12]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x1a0, Size: 12]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x1ac, Size: 12]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x1b8, Size: 12]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x1c4, Size: 12]
	VerifySwitch VsNoHitDetail;//[Offset: 0x1d0, Size: 12]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x1dc, Size: 12]
	VerifySwitch VsFakeTraceMissMatchCb;//[Offset: 0x1e8, Size: 12]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x1f4, Size: 12]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x200, Size: 12]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x20c, Size: 12]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x218, Size: 12]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x224, Size: 12]
	VerifySwitch VsBoneScale;//[Offset: 0x230, Size: 12]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x23c, Size: 12]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x248, Size: 12]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x254, Size: 12]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x260, Size: 12]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x26c, Size: 12]
	VerifySwitch VsGunPosError;//[Offset: 0x278, Size: 12]
	VerifySwitch VsProneHigh;//[Offset: 0x284, Size: 12]
	VerifySwitch VsProneMiss;//[Offset: 0x290, Size: 12]
	VerifySwitch VsBoneLen01;//[Offset: 0x29c, Size: 12]
	VerifySwitch VsBoneLen02;//[Offset: 0x2a8, Size: 12]
	VerifySwitch VsBoneLen03;//[Offset: 0x2b4, Size: 12]
	VerifySwitch VsParaHRaw;//[Offset: 0x2c0, Size: 12]
	VerifySwitch VsParaHConv;//[Offset: 0x2cc, Size: 12]
	VerifySwitch VsParaZRaw;//[Offset: 0x2d8, Size: 12]
	VerifySwitch VsParaZConv;//[Offset: 0x2e4, Size: 12]
	VerifySwitch VsStartFireWeaponOwner;//[Offset: 0x2f0, Size: 12]
	VerifySwitch VsStartFireCharacterOwner;//[Offset: 0x2fc, Size: 12]
	VerifySwitch VsBoneLen04;//[Offset: 0x308, Size: 12]
	VerifySwitch VsFlyAimMiss;//[Offset: 0x314, Size: 12]
	VerifySwitch VsRpgMuzzleBorn;//[Offset: 0x320, Size: 12]
	VerifySwitch VsBackTraceExceedded;//[Offset: 0x32c, Size: 12]
	VerifySwitch VsBackTraceBad;//[Offset: 0x338, Size: 12]
	VerifySwitch VsKickBackBad;//[Offset: 0x344, Size: 12]
	VerifySwitch VsQuickFollowHit;//[Offset: 0x350, Size: 12]
	VerifySwitch VsFlyAimTraceShoot;//[Offset: 0x35c, Size: 12]
	VerifySwitch VsScattergunLine;//[Offset: 0x368, Size: 12]
	VerifySwitch VsClipOverflowed;//[Offset: 0x374, Size: 12]
	VerifySwitch VsPhaseTimeNoSync;//[Offset: 0x380, Size: 12]
	VerifySwitch VsPhaseTimeBad;//[Offset: 0x38c, Size: 12]
	VerifySwitch VsCameraLineDistance;//[Offset: 0x398, Size: 12]
	VerifySwitch VsCameraPawnDiff;//[Offset: 0x3a4, Size: 12]
	VerifySwitch VsBackTraceCalcFailed;//[Offset: 0x3b0, Size: 12]
	VerifySwitch VsBackTraceCalcAngelSeem;//[Offset: 0x3bc, Size: 12]
	VerifySwitch VsBackTraceCameraMatch;//[Offset: 0x3c8, Size: 12]
	VerifySwitch VsHitDataControllerMissMatch;//[Offset: 0x3d4, Size: 12]
	VerifySwitch VsMoveS3VerifyLost;//[Offset: 0x3e0, Size: 12]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x3ec, Size: 12]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x3f8, Size: 12]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x404, Size: 12]
	VerifySwitch VsTestSwitch;//[Offset: 0x410, Size: 12]
	VerifySwitch VsTestSwitchNew;//[Offset: 0x41c, Size: 12]
	VerifySwitch ClientTimeAccCheck;//[Offset: 0x428, Size: 12]
	VerifySwitch ClientPostionCheck;//[Offset: 0x434, Size: 12]
	int MaxShootPointPassWall;//[Offset: 0x440, Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x444, Size: 4]
	VerifySwitch VsBulletVictimClientPassWall;//[Offset: 0x448, Size: 12]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x454, Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x458, Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x45c, Size: 4]
	int MaxAllowVehicleAccTime1;//[Offset: 0x460, Size: 4]
	int MaxAllowVehicleAccTime2;//[Offset: 0x464, Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x468, Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x46c, Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x478, Size: 12]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x484, Size: 12]
	VerifySwitch VsJumpMaxHeight3;//[Offset: 0x490, Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x49c, Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x4a8, Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x4b4, Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x4c0, Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x4cc, Size: 12]
	VerifySwitch VsSysTimeRateCheckConv;//[Offset: 0x4d8, Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x4e4, Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x4f0, Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x4fc, Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x508, Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x514, Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x520, Size: 12]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x52c, Size: 12]
	int MaxMergedStrategy1;//[Offset: 0x538, Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x53c, Size: 4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x540, Size: 12]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x54c, Size: 12]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x558, Size: 12]
	float ShootTimeServerNoConnSpanPunishTime;//[Offset: 0x564, Size: 4]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x568, Size: 12]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x574, Size: 12]
	VerifySwitch ParachuteZVelocityCheck;//[Offset: 0x580, Size: 12]
	float MaxFuelConsume;//[Offset: 0x58c, Size: 4]
	void OnRep_UseNewBulletUpload();// 0x256e948
	void OnRep_ShootVerifyFailedCount();// 0x235d4b8
	void OnRecoverOnServer();// 0x256e934
	void OnPreReconnectOnServer();// 0x256e920
	void BeginShowDebug();// 0x235d4b8

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0, Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: SecurityCollectorComponent.ActorComponent.Object
	bool TransformInputInt(int InA, int InB, int64 InC, int InD, out int IoE, out int64 IoF);// 0x25c55e8
	void CalcClientCustomTime(int RealTime, int Monotonic, int MonotonicRaw, int BootTime, out int OutCustomTimeVersion, out int OutCustomTime);// 0x25c53f0

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18, Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c, Size: 4]
	float CameraSwitchTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0, Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4, Size: 12]
	float SpringArmLength;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0, Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0, Size: 4]
	float ViewPitchMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModeConfig
	int Gyroscope;//[Offset: 0x0, Size: 4]
	int OpenMirrorMode;//[Offset: 0x4, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool OneKeyScoreFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int SidewaysMode;//[Offset: 0xc, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: HitEffectConfig
	int HitEffectType;//[Offset: 0x0, Size: 4]
	int HitEffectColor;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x8, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x10, Size: 8]
	FName[] GrenadeLogicSlotList;//[Offset: 0x18, Size: 12]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: TeamMateStateInfo
	STExtraPlayerState* PlayerState;//[Offset: 0x0, Size: 4]
	Vector Location;//[Offset: 0x4, Size: 12]
	Rotator Rotation;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0xaec, Size: 4]
	FString IniTeamLeaderName;//[Offset: 0xaf0, Size: 12]
	enum LiveState;//[Offset: 0xafc, Size: 1]
	enum AILiveState;//[Offset: 0xafd, Size: 1]
	bool IsEvacuated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafe, Size: 1]
	delegate OnSelfPlayerStateLiveStateChangeDelegate;//[Offset: 0xb00, Size: 12]
	delegate OnMapMarkChange;//[Offset: 0xb18, Size: 12]
	delegate OnMapMultiMarkChange;//[Offset: 0xb24, Size: 12]
	delegate NoticeUIShowDamageEffect;//[Offset: 0xb30, Size: 12]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0xb3c, Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0xb44, Size: 4]
	float PlayerHealth;//[Offset: 0xb48, Size: 4]
	float PlayerHealthMax;//[Offset: 0xb4c, Size: 4]
	float PlayerTemperature;//[Offset: 0xb50, Size: 4]
	float PlayerTemperatureMax;//[Offset: 0xb54, Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0xb58, Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0xb70, Size: 24]
	enum EUAVUseType;//[Offset: 0xb88, Size: 1]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb89, Size: 1]
	enum RemoteControlPawnType;//[Offset: 0xb8a, Size: 1]
	enum RemoteControlState;//[Offset: 0xb8b, Size: 1]
	CharacterLocAndRot RemoteControlPawnLocAndRot;//[Offset: 0xb8c, Size: 24]
	enum eCurVehicleType;//[Offset: 0xba4, Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0xba5, Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0xba8, Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0xbb4, Size: 12]
	Vector MapMark;//[Offset: 0xbc0, Size: 12]
	Vector MapMark3DLocation;//[Offset: 0xbcc, Size: 12]
	Vector[] MapMultiMark;//[Offset: 0xbd8, Size: 12]
	float CanJumpPercent;//[Offset: 0xbe4, Size: 4]
	float ForceJumpPercent;//[Offset: 0xbe8, Size: 4]
	STExtraPlayerState*[] TeamMatePlayerStateList;//[Offset: 0xbec, Size: 12]
	bool bInWinePlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04, Size: 1]
	TimerHandle DelayFreshTeammateHandle;//[Offset: 0xc08, Size: 8]
	int PlayerLayerID;//[Offset: 0xc10, Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0xc14, Size: 16]
	int KillGoblinScore;//[Offset: 0xc24, Size: 4]
	int HurtGoblinScore;//[Offset: 0xc28, Size: 4]
	int DeleverTargetScore;//[Offset: 0xc2c, Size: 4]
	int NotMeetGoblinScore;//[Offset: 0xc30, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xc38, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xc44, Size: 12]
	MarkSyncData[] SyncMarkDispatchData_Self;//[Offset: 0xc50, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData_Self;//[Offset: 0xc5c, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xc68, Size: 12]
	int TripleKillFullTime;//[Offset: 0xc84, Size: 4]
	int TripleKillIntervalTime;//[Offset: 0xc88, Size: 4]
	int QuadraKillIntervalTime;//[Offset: 0xc8c, Size: 4]
	int PentaKillIntervalTime;//[Offset: 0xc90, Size: 4]
	int TotalKillRequireCount;//[Offset: 0xc94, Size: 4]
	int SnipeHeadKillRequireDistance;//[Offset: 0xc98, Size: 4]
	int TeamMatePlayerStateIndex;//[Offset: 0xcb8, Size: 4]
	int Breath;//[Offset: 0xcbc, Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0xcc0, Size: 12]
	float EnegyBuffStage1;//[Offset: 0xccc, Size: 4]
	float EnegyBuffStage2;//[Offset: 0xcd0, Size: 4]
	float EnegyBuffStage3;//[Offset: 0xcd4, Size: 4]
	float EnegyBuffStage4;//[Offset: 0xcd8, Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0xcdc, Size: 4]
	float CurEnegyBuff;//[Offset: 0xce0, Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0xce4, Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0xce8, Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0xcec, Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0xcf0, Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0xcf4, Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0xcf8, Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0xcfc, Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0xd00, Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xd04, Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0xd10, Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1d, Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd28, Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd29, Size: 1]
	int[] TeamMatesExitState;//[Offset: 0xd2c, Size: 12]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd38, Size: 1]
	bool bHasEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd39, Size: 1]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3a, Size: 1]
	float InvisibleInMapAfterEscapedCD;//[Offset: 0xd3c, Size: 4]
	bool bIsvisibleInMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd40, Size: 1]
	bool ExceptionDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5c, Size: 1]
	PlayerLevel PvePlayerLevel;//[Offset: 0xd60, Size: 24]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0xd78, Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0xd84, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0xd88, Size: 4]
	BuildMaterialData[] BuildMat_GetList;//[Offset: 0xd8c, Size: 12]
	BuildMaterialData[] BuildMat_UseList;//[Offset: 0xd98, Size: 12]
	int MaxDecalCount;//[Offset: 0xdbc, Size: 4]
	IdeaDecalActor*[] DecalActorList;//[Offset: 0xdc0, Size: 12]
	float SignalHP;//[Offset: 0xe14, Size: 4]
	delegate OnSignalHPChange;//[Offset: 0xe18, Size: 12]
	int[] PlayerAchievementList;//[Offset: 0xe24, Size: 12]
	delegate OnCompleteAchievementTask;//[Offset: 0xe30, Size: 12]
	delegate OnPlayerAchievementListChangeDelegate;//[Offset: 0xe3c, Size: 12]
	float SignalHPRemainingTime;//[Offset: 0xe48, Size: 4]
	bool bHasGetRedEnvelopeByWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 1]
	int RemainingRevivalTime;//[Offset: 0xe9c, Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea0, Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea1, Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea2, Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea3, Size: 1]
	bool bHasRevivalSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea4, Size: 1]
	int SelfRevivalCountdown;//[Offset: 0xea8, Size: 4]
	bool bInRevivalArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeac, Size: 1]
	bool bOpenRecvQuickSign;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xead, Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0xeb0, Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0xeb8, Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0xec4, Size: 12]
	bool bCanRevivalSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	delegate CanRevivalSelfDelegate;//[Offset: 0xed4, Size: 12]
	Vector LastVehicleLocation;//[Offset: 0xf08, Size: 12]
	HunterTaskTeamMgr* HunterTeamDataMgr;//[Offset: 0xf1c, Size: 4]
	STExtraPlayerState*[] AssitPlayersCurKill;//[Offset: 0xf20, Size: 12]
	int[] HuntTeamIDList;//[Offset: 0xf2c, Size: 12]
	int[] HasShowRecords;//[Offset: 0xf38, Size: 12]
	<int> TeamCDSet;//[Offset: 0xf44, Size: 60]
	int HuntedTipMsgID;//[Offset: 0xf84, Size: 4]
	float TipCooldown;//[Offset: 0xf88, Size: 4]
	FName[] BuffNameListCanBeSync;//[Offset: 0xf8c, Size: 12]
	FName[] SyncToClientBuffNameList;//[Offset: 0xf98, Size: 12]
	<uint64,int> TeammateIconInstanceMap;//[Offset: 0xfa4, Size: 60]
	PopKartRaceInfo[] PopKartRaceList;//[Offset: 0xfe0, Size: 12]
	bool bInitPopKartMapData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfec, Size: 1]
	bool IsExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfed, Size: 1]
	int GunMasterMediaPlayCounterReplay;//[Offset: 0xff0, Size: 4]
	RenderQualityCVarsToSync RenderQualityCVarsToSync;//[Offset: 0xff4, Size: 8]
	byte CurResultType;//[Offset: 0xffc, Size: 1]
	void UpdateTeamPlayerLevel();// 0x26dadcc
	void UpdateMarkEvent();// 0x26dadb8
	void ShowGodzillaMapMark(bool bShow);// 0x46f6b154
	bool ShouldShowTrumpMark();// 0x26dad90
	void SetPlayerMapMultiMark(Vector Loc, bool bAdd, int MaxNum, bool bClearAll);// 0x26dac28
	void SetPlayerGiveUp(bool InGiveUp);// 0x26daba8
	void SetForceSyncTeammateData(bool IsForCE);// 0x26dab2c
	void ServerUpdatePlayerLevel();// 0x26daad0
	void RPC_TeammateNoticeUIDamageEffect();// 0x26daab4
	void RespondToPawnRescueingStatusChange(Character* _helpWho, Character* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper, float InReduceTime);// 0x26da8c8
	void RespondToPawnCanRescueOtherStatusChange(STExtraBaseCharacter* _helpWho, STExtraBaseCharacter* _ownerPawn, bool IsTurningInto);// 0x26da7c0
	void RespondToPawnBreathChange(float _health, byte _healthStatus, STExtraBaseCharacter* param2);// 0x26da6c0
	void RemoveAllTeammateIcon();// 0x26da6ac
	void RefreshRevivalState();// 0x26da698
	void RefreshFollowMark();// 0x26da684
	bool PopKartFinish(int Group);// 0x26da604
	int PlayersCountOnMyPlane();// 0x26da5dc
	void OnTeammatePlayerStateChanged__DelegateSignature();// 0x46f6b154
	void OnSelfPlayerStateLiveStateChangeDelegate__DelegateSignature();// 0x46f6b154
	void OnRevivalStateChangeDelegate__DelegateSignature(bool InRevivalState, bool IsIDCapPick, bool PlayAniAndSound);// 0x46f6b154
	void OnRevivalRemainingTimeChangeDelegate__DelegateSignature(int RemainingTime, int MaxTime);// 0x46f6b154
	void OnRep_VisualFieldInfo();// 0x26da5c8
	void OnRep_TopSegmentTimes();// 0x26da5ac
	void OnRep_TeamMatePlayerStateList();// 0x26da590
	void OnRep_TeamMatePlayerStateIndex();// 0x26da57c
	void OnRep_SignalHP();// 0x26da568
	void OnRep_RobotVoiceMemberId();// 0x26da54c
	void OnRep_RemainingRevivalTime();// 0x26da538
	void OnRep_RankNotify();// 0x26da524
	void OnRep_PvePlayerLevel();// 0x26da510
	void OnRep_PopKartPathMap();// 0x26da4fc
	void OnRep_PlayerReconnectEvent();// 0x26da4e8
	void OnRep_PlayerName();// 0x23444d8
	void OnRep_PlayerLostConnectionEvent();// 0x26da4d4
	void OnRep_PlayerLiveState();// 0x267e664
	void OnRep_PlayerKillsChange();// 0x267beac
	void OnRep_PlayerIsFollowing();// 0x26da4c0
	void OnRep_PlayerGiveUp();// 0x26da4a4
	void OnRep_PlayerExitGameEvent();// 0x26da490
	void OnRep_PlayerCurWeaponRecord();// 0x26da474
	void OnRep_PlayerAchievementList();// 0x26da460
	void OnRep_MarkSyncData();// 0x26da44c
	void OnRep_MarkSelfSyncData();// 0x26da438
	void OnRep_MapMarkNotify();// 0x26da424
	void OnRep_MapAirlineLocation();// 0x26da410
	void OnRep_LastVehicleLocation();// 0x26da3fc
	void OnRep_IsVisibleInMap();// 0x26da3e8
	void OnRep_IsIDCardCaptured();// 0x26da3d4
	void OnRep_IsEvacuated();// 0x26da3c0
	void OnRep_HPChanged();// 0x235d4b8
	void OnRep_HasRevivalSign();// 0x26da3a4
	void OnRep_HasEscaped();// 0x26da390
	void OnRep_HasBeenHunted();// 0x26da37c
	void OnRep_ChangeRevivalState();// 0x26da360
	void OnRep_ChangeInRevivingState();// 0x26da34c
	void OnRep_BuffNameList();// 0x26da338
	void OnRep_BreathChanged();// 0x26da324
	void OnRep_BPS();// 0x26da310
	void OnRep_bCanRevivalSelf();// 0x26da2fc
	void OnRep_Assists();// 0x26da2e0
	void OnRemoveBuff(out const FName BuffName);// 0x26da254
	void OnPlayerKillsChangeDelegate__DelegateSignature();// 0x46f6b154
	void OnPlayerAchievementListChangeDelegate__DelegateSignature();// 0x46f6b154
	void OnNotifyHuntedTarget(int HuntTeamID);// 0x26da1d4
	void OnNoticeUIShowDamageEffect__DelegateSignature(FString PUID);// 0x46f6b154
	void OnMapMultiMarkChange__DelegateSignature(Vector[] MapMultiMark);// 0x46f6b154
	void OnMapMarkChange__DelegateSignature(Vector MapMark);// 0x46f6b154
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float CurrentHP, float ratioHP);// 0x46f6b154
	void OnCurrentLiveStateChangeDelegate__DelegateSignature();// 0x46f6b154
	void OnCompleteAchievementTask__DelegateSignature(STExtraPlayerState* PlayerState, int Achievement);// 0x46f6b154
	void OnChangeHuntTeam(int HuntTeamID, bool bRemove);// 0x26da110
	void OnAddBuff(out const FName BuffName);// 0x26da084
	void On_RepRenderQualityCVarsToSync();// 0x26da070
	bool IsTaskExist(int TaskID);// 0x26d9ff0
	bool IsSinglePlayer();// 0x26d9fc8
	bool IsRobotMember(int memberID);// 0x26d9f40
	bool IsHaveExistingTask();// 0x26d9f18
	bool IsExited();// 0x26d9ef0
	bool IsAlive();// 0x26d9ec8
	bool InPopKartRace(int Group);// 0x26d9e48
	void InitPopKartMapData();// 0x26d9e2c
	void HuntTipCoolDownCallback();// 0x26d9e18
	uint32 GetUserIDByMemberID(int memberID);// 0x26d9d90
	FString[] GetTeamMateUIDList();// 0x26d9c9c
	int GetTeammateRevivalCount();// 0x26d9c74
	void GetTeamMatePlayerStateList(out STExtraPlayerState*[] OutList, bool ExcludeMyself);// 0x26d9b84
	STExtraPlayerState* GetTeamMatePlayerStateFromPlayerKey(uint32 InPlayerKey);// 0x26d9b04
	int GetTeammateIndex(STExtraPlayerState* Teammate);// 0x26d9a84
	STExtraPlayerState* GetTeammateByName(FString TeammateName);// 0x26d99ec
	bool GetTeammateBeKilledByPlayerName(FString KilledName, bool ExcludeSelf);// 0x26d9908
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x26d98b0
	static void GetPopKartGroupByState(int State, out int RaceGroup, out int NodeIndex, out int Status);// 0x26d9704
	static int GetPopKartAreaStateValue(int RaceGroup, int NodeIndex, int Status);// 0x26d95f4
	float GetPlayerTemperature();// 0x26d95cc
	int GetPlayerTeamIndex();// 0x26d95a4
	float GetPlayerMaxTemperature();// 0x26d957c
	float GetPlayerMaxHealth();// 0x26d9554
	float GetPlayerHealth();// 0x26d952c
	bool GetPlayerEvacuated();// 0x26d9504
	Rotator GetPlayerCurRot();// 0x26d94bc
	Vector GetPlayerCurLoc();// 0x26d9474
	STExtraBaseCharacter* GetPlayerCharacter();// 0x26d944c
	float GetMaxEnegyBuff();// 0x26d93fc
	MarkSyncData GetMarkDataByInstanceID(int InInstanceID);// 0x26d9374
	float GetForceJumpPercent();// 0x26d9358
	float GetCanJumpPercent();// 0x26d933c
	float GetBreathPercentage();// 0x26d9314
	int GetBountyGold();// 0x46f6b154
	void GetAssitPlayersOfCurKill(out STExtraPlayerState*[] OutList);// 0x26d9274
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x26d9104
	void GetAlertDataByIndex(int Index, out int IconID, out int AlertID, out Vector Location, out enum Status);// 0x26d8f24
	void ForceNotifyAlertUpdate();// 0x26d8f10
	void FollowInitialTeamParachuteLeaderAndShowTips(FString LeaderName);// 0x26d8e2c
	void FadeTeammatesMapMark();// 0x26d8e18
	void DelayFreshTeammateIcon();// 0x26d8e04
	void CreateHunterTeamDataMgrConditionly();// 0x26d8df0
	bool ContainPopKartNode(int Group, int NodeIndex);// 0x26d8d2c
	void CompleteAchievementTask(int Achievement, bool IsNotifyOwnerClient);// 0x26d8c68
	void ClientRPC_CompleteAchievementTask(int Achievement);// 0x26d8be8
	void ClientDisplayGameTipWithMsgID(int ID, FString param1, FString param2);// 0x26d8a78
	void ChangeFadeMapMarkDist(float NewDist);// 0x26d8a04
	bool CanSelfRevive();// 0x26d89dc
	bool CanRevivalTeammate();// 0x26d89b4
	void CanRevivalSelfDelegate__DelegateSignature(bool bCanRevivalSelf);// 0x46f6b154
	bool CanBeRevival();// 0x26d898c
	byte CalculateEnegyStage();// 0x26d8964
	void BPCalculateKillMonterNum(int MonterLevel, int AddNum, int MonsterID, bool bHeadShot, int DamageType, int WeaponID);// 0x46f6b154
	void AddPopKartRaceNode(int Group, int NodeIndex);// 0x26d88a8
	void AddPopKartBeginNode(out PopKartRaceInfo Info);// 0x26d8808
	void AddEnegySafety(float AddVal);// 0x26d8790

--------------------------------
Class: UAEPlayerState.PlayerState.Info.Actor.Object
	bool binitializedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	PlayerRestartConfig PlayerRestartConfig;//[Offset: 0x350, Size: 64]
	float Pronetime;//[Offset: 0x390, Size: 4]
	float BeInWaterTime;//[Offset: 0x394, Size: 4]
	float SwimmingDistance;//[Offset: 0x398, Size: 4]
	float marchDistance;//[Offset: 0x39c, Size: 4]
	float travelDistance;//[Offset: 0x3a0, Size: 4]
	float driveDistance;//[Offset: 0x3a4, Size: 4]
	int destroyVehicleNum;//[Offset: 0x3a8, Size: 4]
	int rescueTimes;//[Offset: 0x3ac, Size: 4]
	float NightMarchDistance;//[Offset: 0x3b0, Size: 4]
	int KillWolfNum;//[Offset: 0x3b4, Size: 4]
	int GVMemberID;//[Offset: 0x3b8, Size: 4]
	FName PlayerType;//[Offset: 0x3c0, Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x3c8, Size: 8]
	uint32 PlayerKey;//[Offset: 0x3d0, Size: 4]
	FString RealPlayerName;//[Offset: 0x3d4, Size: 12]
	uint64 UID;//[Offset: 0x3e0, Size: 8]
	FString PlayerUID;//[Offset: 0x3e8, Size: 12]
	FString PlayerOpenID;//[Offset: 0x3f4, Size: 12]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	FString IconURL;//[Offset: 0x404, Size: 12]
	int Gender;//[Offset: 0x410, Size: 4]
	int PlayerLevel;//[Offset: 0x414, Size: 4]
	int SegmentLevel;//[Offset: 0x418, Size: 4]
	int TopSegmentTimes;//[Offset: 0x41c, Size: 4]
	delegate OnTopSegmentTimesChange;//[Offset: 0x420, Size: 12]
	FString LiveID;//[Offset: 0x42c, Size: 12]
	int LiveType;//[Offset: 0x438, Size: 4]
	int imprint_info;//[Offset: 0x43c, Size: 4]
	int AvatarBoxId;//[Offset: 0x440, Size: 4]
	int TeamID;//[Offset: 0x444, Size: 4]
	delegate OnTeamIDChange;//[Offset: 0x448, Size: 12]
	delegate OnLiveStatusChange;//[Offset: 0x454, Size: 12]
	FString UDPSenderAddress;//[Offset: 0x460, Size: 12]
	int PlayerBornPointID;//[Offset: 0x46c, Size: 4]
	int Kills;//[Offset: 0x470, Size: 4]
	int Assists;//[Offset: 0x47c, Size: 4]
	byte PlatformGender;//[Offset: 0x48c, Size: 1]
	bool bIsFireworksActOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d, Size: 1]
	int MatchLabel;//[Offset: 0x490, Size: 4]
	bool IsBanPublicMic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494, Size: 1]
	int JumpSegmentID;//[Offset: 0x498, Size: 4]
	uint32 Killer;//[Offset: 0x49c, Size: 4]
	FString KillerName;//[Offset: 0x4a0, Size: 12]
	HitDownPlayerTypeInfoData[] HitDownPlayersInfoData;//[Offset: 0x4ac, Size: 12]
	int8 is_regress;//[Offset: 0x4b8, Size: 1]
	int8 not_counter_ai;//[Offset: 0x4b9, Size: 1]
	int KillerWeaponId;//[Offset: 0x4bc, Size: 4]
	float KillerDistance;//[Offset: 0x4c0, Size: 4]
	int ShootWeaponShotNum;//[Offset: 0x4c4, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x4c8, Size: 4]
	int HeadShotNum;//[Offset: 0x4cc, Size: 4]
	int HealTimes;//[Offset: 0x4d0, Size: 4]
	float DamageAmount;//[Offset: 0x4d4, Size: 4]
	float ShootWeaponDamageAmount;//[Offset: 0x4d8, Size: 4]
	float HealAmount;//[Offset: 0x4dc, Size: 4]
	FString[] KillFlow;//[Offset: 0x4e0, Size: 12]
	SuitSkinFlow SuitSkinFlow;//[Offset: 0x534, Size: 12]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x54c, Size: 12]
	UseItemFlow[] UseItemFlow;//[Offset: 0x558, Size: 12]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x564, Size: 12]
	float OutsideBlueCircleTime;//[Offset: 0x570, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x574, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x580, Size: 4]
	int FirstOpenedMonsterTombBoxNum;//[Offset: 0x584, Size: 4]
	int PickupMonsterTombBoxNum;//[Offset: 0x588, Size: 4]
	int FirstOpenedSuperWeaponBoxNum;//[Offset: 0x58c, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x590, Size: 4]
	int[] BuildFlow;//[Offset: 0x594, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x5a0, Size: 12]
	int ZombieKilledUsingTraps;//[Offset: 0x5ac, Size: 4]
	float HitShelterDamage;//[Offset: 0x5b0, Size: 4]
	float ShelterTakeDamage;//[Offset: 0x5b4, Size: 4]
	int PlayerSetLevel;//[Offset: 0x5b8, Size: 4]
	float PlayerSetExp;//[Offset: 0x5bc, Size: 4]
	FlareGunReport FlareGunReport;//[Offset: 0x5c0, Size: 16]
	Vector LandLocation;//[Offset: 0x5d0, Size: 12]
	bool bHasPopupTopFiveTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	int TopFiveTipsUseResponse;//[Offset: 0x5e0, Size: 4]
	float SignalHealAmount;//[Offset: 0x5e4, Size: 4]
	int SignalHealCount;//[Offset: 0x5e8, Size: 4]
	Vector DeadLocation;//[Offset: 0x5ec, Size: 12]
	FString DeadDamangeType;//[Offset: 0x5f8, Size: 12]
	FString DeadTimeStr;//[Offset: 0x604, Size: 12]
	int DeadTimes;//[Offset: 0x610, Size: 4]
	int64[] KillerUIDs;//[Offset: 0x614, Size: 12]
	int BeDownTimes;//[Offset: 0x620, Size: 4]
	int KnockDownTimes;//[Offset: 0x624, Size: 4]
	int BeSavedTimes;//[Offset: 0x628, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x62c, Size: 80]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	int GamePlayingTime;//[Offset: 0x68c, Size: 4]
	int ObserverTime;//[Offset: 0x690, Size: 4]
	int TouchDownAreaID;//[Offset: 0x694, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x698, Size: 4]
	FString TouchDownObjectName;//[Offset: 0x69c, Size: 12]
	GameModePlayerTaskDataSim[] CompletedTaskList;//[Offset: 0x6a8, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x6b4, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x6c0, Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x6cc, Size: 12]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x6d8, Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x6e4, Size: 4]
	float InHelicopterTime;//[Offset: 0x6e8, Size: 4]
	int RevivalNum;//[Offset: 0x6ec, Size: 4]
	int BeRevivedNum;//[Offset: 0x6f0, Size: 4]
	int SelfRevivedNum;//[Offset: 0x6f4, Size: 4]
	int KillNumInVehicle;//[Offset: 0x6f8, Size: 4]
	int KillPlayerNum;//[Offset: 0x6fc, Size: 4]
	int KillAINum;//[Offset: 0x700, Size: 4]
	float TotalSprintDistance;//[Offset: 0x704, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x708, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x70c, Size: 4]
	int BreakDoorNum;//[Offset: 0x710, Size: 4]
	AreaTriggerRecord[] AreaTriggerRecordList;//[Offset: 0x714, Size: 12]
	UseItemFlow[] UseSpecificBulletFlow;//[Offset: 0x720, Size: 12]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0x72c, Size: 12]
	WeaponLobbyInitialData WeaponLobbyInitialData;//[Offset: 0x738, Size: 12]
	int WeaponCreateStuckAutoRecoverNum;//[Offset: 0x744, Size: 4]
	FString[] DestroyVehicleFlow;//[Offset: 0x748, Size: 12]
	int UseHelicoperNum;//[Offset: 0x754, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x758, Size: 4]
	int UseDragonBoatNum;//[Offset: 0x75c, Size: 4]
	byte CharmRankIndex;//[Offset: 0x760, Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0x764, Size: 60]
	float GlidingDistance;//[Offset: 0x7a0, Size: 4]
	int BreakGlassNum;//[Offset: 0x7a4, Size: 4]
	int SlidingTackleNum;//[Offset: 0x7a8, Size: 4]
	int ClimbObstacleNum;//[Offset: 0x7ac, Size: 4]
	<FString,RedpackData> FireworksRedpackData;//[Offset: 0x7b0, Size: 60]
	EmoteAnimIData[] EmoteAnimIDataArray;//[Offset: 0x7ec, Size: 12]
	bool showNickname;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8, Size: 1]
	int MemberIdInVoiceRoom;//[Offset: 0x7fc, Size: 4]
	int RobotVoiceMemberId;//[Offset: 0x800, Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804, Size: 1]
	int FollowState;//[Offset: 0x81c, Size: 4]
	int InviteTimes;//[Offset: 0x820, Size: 4]
	bool bCanBeWatchedByFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	int OpnedMosnterBoxNum;//[Offset: 0x828, Size: 4]
	delegate OnWolfKillNumChange;//[Offset: 0x848, Size: 12]
	GiftSentData[] GiftSentData;//[Offset: 0x854, Size: 12]
	GiftReceivedData[] GiftReceivedData;//[Offset: 0x860, Size: 12]
	int InactiveZombieCount;//[Offset: 0x86c, Size: 4]
	int DeactiveZombieCount;//[Offset: 0x870, Size: 4]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 1]
	int CollectedEventType;//[Offset: 0x878, Size: 4]
	bool bLiveVideoReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c, Size: 1]
	UAEDataTable* CollectedEventTable;//[Offset: 0x880, Size: 4]
	bool bCollectedEVLiveEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x884, Size: 1]
	GameBaseInfo GameBaseInfo;//[Offset: 0x888, Size: 104]
	int8 AreaID;//[Offset: 0x8f0, Size: 1]
	int8 PlatID;//[Offset: 0x8f1, Size: 1]
	float PlayerLandedTimeStamp;//[Offset: 0x8f4, Size: 4]
	bool IsRescueAllTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f8, Size: 1]
	bool PendingBecomeRescuer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f9, Size: 1]
	int KillKingNum;//[Offset: 0x8fc, Size: 4]
	<uint64,uint16> MutualAid;//[Offset: 0x900, Size: 60]
	<uint64,uint16> WhoRescuedMe;//[Offset: 0x93c, Size: 60]
	<uint64,uint16> IRescuedWhom;//[Offset: 0x978, Size: 60]
	<uint64,uint16> WhoRevivedMe;//[Offset: 0x9b4, Size: 60]
	<uint64,uint16> IRevivedWhom;//[Offset: 0x9f0, Size: 60]
	EmotionalMemoryData EmotionalMemoryData;//[Offset: 0xa2c, Size: 60]
	int MinimalLevelOfKillThanks;//[Offset: 0xa68, Size: 4]
	int KillThanksCount;//[Offset: 0xa6c, Size: 4]
	bool bPartiallyKillThanksToOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70, Size: 1]
	bool bPartiallyKillThanksFromOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa71, Size: 1]
	delegate ResponseCanShowKillThanksUIDelegate;//[Offset: 0xa74, Size: 12]
	delegate ResponseKillThanksDelegate;//[Offset: 0xa80, Size: 12]
	WeaponRecord CurWeaponRecord;//[Offset: 0xa90, Size: 72]
	UGCPlayerInfo UGCPlayerInfo;//[Offset: 0xad8, Size: 20]
	void SetGVMemberIDServerCall(int memberID);// 0x2fdb36c
	void SetGVMemberID(int memberID);// 0x2fdb2f4
	void ServerSetShowNicknameValue(bool flag);// 0x2fdb22c
	void Server_RequestCanShowKillThanksUI(const RequestResponseCanShowKillThanksUIContext Context);// 0x2fdb13c
	void Server_KillThanksTo(const RequestResponseKillThanksContext Context);// 0x2fdb070
	void ReportTriggerAreaData(byte TriggerAreaType, int TriggerAreaID);// 0x2fdafb4
	void ReportTaskExtInfo(int TaskID, FString ExtInfo);// 0x2fdae88
	void ReportTaskData(int TaskID, int process);// 0x2fdadcc
	void ReportSpecialCollection(int ItemID, int Count);// 0x2fdad10
	void ReportSecretAreaID(int SecretAreaID);// 0x2fdac98
	void ReportLandLocType(int TouchDownLocType, FString TouchDownLocName);// 0x2fdab6c
	void ReportLandArea(int TouchDownArea);// 0x2fdaaf4
	void ReportActivityEventDataExt(int EventId, int InCount, int ExtraParam, Vector Loc, FString Str);// 0x2fda8d0
	void ReportActivityEventData(TLog_ActivityEventType InEventType, int InCount);// 0x2fda7f8
	void RefreshWeaponDamageRecordList();// 0x2fda7e4
	void RecordUseHelicoper(uint32 UseHelicoperId);// 0x2fda76c
	void RecordUseDragonBoat(uint32 UseDragonBoatId);// 0x2fda6f4
	void RecordCharmRankInfo(byte RankIndex);// 0x2fda67c
	FString[] ParseKillFlowIntoArray(int RecorIndex);// 0x2fda548
	void OnReportSpecificBulletUsed(int ItemID, int Count);// 0x2fda48c
	void OnRep_WolfKillNumChange();// 0x267be90
	void OnRep_UID();// 0x2fda478
	void OnRep_UGCPlayerInfo();// 0x2fda464
	void OnRep_UDPSenderAddress();// 0x2fda448
	void OnRep_TopSegmentTimes();// 0x26da5ac
	void OnRep_TeamID();// 0x2fda434
	void OnRep_ShowNicknameChange();// 0x235d4b8
	void OnRep_RobotVoiceMemberId();// 0x26da54c
	void OnRep_PlayerKillsChange();// 0x267beac
	void OnRep_PlayerCurWeaponRecord();// 0x26da474
	void OnRep_OpenID();// 0x235d4b8
	void OnRep_MemberIdInVoiceRoom();// 0x2fda420
	void OnRep_MatchLabel();// 0x2fda40c
	void OnRep_LiveStatus();// 0x2fda3f0
	void OnRep_IsBanPublicMic();// 0x2fda3dc
	void OnRep_imprint_info();// 0x2fda3c8
	void OnRep_CollectItemRecord();// 0x2fda3b4
	void OnRep_Assists();// 0x26da2e0
	bool IsSpecialPickItemCollectionCompleted(int ItemID);// 0x2fda334
	bool IsSpecialPickItem(int ItemID);// 0x2fda2b4
	bool IsRobotMember(int memberID);// 0x26d9f40
	bool IsEscapeReasonable();// 0x26e2508
	bool IsCollectedEventMatchingType(byte EventId);// 0x2fda234
	int GetVIPLevel();// 0x2fda218
	uint32 GetUserIDByMemberID(int memberID);// 0x26d9d90
	int GetTriggerTimesByAreaType(int AreaType);// 0x2fda198
	int GetTriggerTimesByAreaID(int AreaID);// 0x2fda118
	TrainingStatisticsData GetTrainingStatisticsData();// 0x27189b0
	TeammateHeroData GetTeammateBattleResultData_Hero();// 0x2fda0d0
	GameModeTeammateBattleResultData GetTeammateBattleResultData();// 0x26d98b0
	FString GetPlayerKey();// 0x2fda03c
	GameModePlayerFlowResultData GetPlayerFlowResultData();// 0x2fd9ef8
	GameModePlayerBattleResultData_SuperCold GetPlayerBattleResultData_SuperCold();// 0x2fd9e40
	GameModePlayerBattleResultData_Hero GetPlayerBattleResultData_Hero();// 0x2fd9cf0
	GameModePlayerBattleResultData_GunMaster GetPlayerBattleResultData_GunMaster(FString Reason);// 0x2fd9b78
	GameModePlayerBattleResultData_BountyHunter GetPlayerBattleResultData_BountyHunter();// 0x2fd9ad4
	GameModePlayerBattleResultData GetPlayerBattleResultData();// 0x2fd9a78
	int GetMatchRank();// 0x2fd9a5c
	int64 GetInt64UID();// 0x2fd9a38
	HunterRevivalDataFlow GetHunterRevivalDataFlow();// 0x2fd9948
	int GetCharmRankIndex();// 0x2fd9920
	int GetActivityEventTimes(int EventId);// 0x2fd98a0
	void CollectTrainingStatisticsData();// 0x27183c4
	void ClientSetShowNicknameValue(bool flag);// 0x2fd9820
	void Client_ResponseKillThanks(const RequestResponseKillThanksContext Context);// 0x2fd9754
	void Client_ResponseCanShowKillThanksUI(const RequestResponseCanShowKillThanksUIContext Context);// 0x2fd9664
	void ChangeCollectItemRecord(int InItemID, bool InNewState);// 0x2fd95a0
	bool CanKillThanksTo(out RequestResponseKillThanksContext Context);// 0x2fd94e8
	void AddGiftSentData(UAEPlayerState* ReceiverPlayerState, int GiftID, int Count);// 0x2fd93e8
	void AddGiftReceivedData(UAEPlayerState* SenderPlayerState, int GiftID, int Count);// 0x2fd92e8

--------------------------------
Class: PlayerRestartConfig
	enum Reason;//[Offset: 0x0, Size: 1]
	Transform RestartTransform;//[Offset: 0x10, Size: 48]

--------------------------------
Class: HitDownPlayerTypeInfoData
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerUID;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SuitSkinFlow
	SuitSkinUnitFlow[] flowList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SuitSkinUnitFlow
	uint64 UID;//[Offset: 0x0, Size: 8]
	int ElapseTime;//[Offset: 0x8, Size: 4]
	int State;//[Offset: 0xc, Size: 4]
	int SuitID;//[Offset: 0x10, Size: 4]
	int LocationX;//[Offset: 0x14, Size: 4]
	int LocationY;//[Offset: 0x18, Size: 4]
	int LocationZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int SourceType;//[Offset: 0x14, Size: 4]
	int AdditionalParam;//[Offset: 0x18, Size: 4]
	DateTime Time;//[Offset: 0x20, Size: 8]
	FString TimeStr;//[Offset: 0x28, Size: 12]

--------------------------------
Class: DateTime

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	int UseCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0, Size: 4]
	enum SlotType;//[Offset: 0x4, Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int64 TimeStamp;//[Offset: 0x8, Size: 8]
	bool IsFromOthers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: VehicleDriveDisData
	int VehicleType;//[Offset: 0x0, Size: 4]
	int VehicleUseCount;//[Offset: 0x4, Size: 4]
	float driveDistance;//[Offset: 0x8, Size: 4]
	float DriveTime;//[Offset: 0xc, Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x10, Size: 4]
	float VehicleJumpDistanceMaxWithTeammate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: FlareGunReport
	int PickUpNum;//[Offset: 0x0, Size: 4]
	int FireNum;//[Offset: 0x4, Size: 4]
	int CallSuperAirDropSuccessNum;//[Offset: 0x8, Size: 4]
	int CallVehicleDropSuccessNum;//[Offset: 0xc, Size: 4]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0, Size: 4]
	int ArmorID;//[Offset: 0x4, Size: 4]
	int BackPackID;//[Offset: 0x8, Size: 4]
	int MainWeapon1ID;//[Offset: 0xc, Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10, Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c, Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20, Size: 12]
	int ViceWeaponID;//[Offset: 0x2c, Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30, Size: 12]
	int CloseWeaponID;//[Offset: 0x3c, Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x40, Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: GameModePlayerTaskDataSim
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	FString ext_info;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponID;//[Offset: 0x0, Size: 4]
	int KillCount;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0, Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: AreaTriggerRecord
	byte AreaType;//[Offset: 0x0, Size: 1]
	int AreaID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityEventReportData
	int EventId;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]
	Vector Location;//[Offset: 0x8, Size: 12]
	int[] ActivityAddiList;//[Offset: 0x14, Size: 12]
	FString ActivityAddiString;//[Offset: 0x20, Size: 12]

--------------------------------
Class: WeaponLobbyInitialData
	int[] BulletTrackSkinList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: RedpackData
	int Count;//[Offset: 0x0, Size: 4]
	FString RedpackID;//[Offset: 0x4, Size: 12]

--------------------------------
Class: EmoteAnimIData
	int EmoteIndex;//[Offset: 0x0, Size: 4]
	int EmoteAnimTimes;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GiftSentData
	int GiftID;//[Offset: 0x0, Size: 4]
	uint64 ReceiverUID;//[Offset: 0x8, Size: 8]
	int NumberReceived;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GiftReceivedData
	int GiftID;//[Offset: 0x0, Size: 4]
	uint64 SenderUID;//[Offset: 0x8, Size: 8]
	int NumberReceived;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4, Size: 4]

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FName,Property*> nameToProperty;//[Offset: 0x68, Size: 60]
	bool UsedLazyLoadTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	<FString,Property*> DataTableNameProperty;//[Offset: 0x100, Size: 60]

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	FString GameAppID;//[Offset: 0xc, Size: 12]
	FString OpenID;//[Offset: 0x18, Size: 12]
	int8 AreaID;//[Offset: 0x24, Size: 1]
	int8 PlatID;//[Offset: 0x25, Size: 1]
	FString ZoneID;//[Offset: 0x28, Size: 12]
	uint64 BattleID;//[Offset: 0x38, Size: 8]
	FString UserName;//[Offset: 0x40, Size: 12]
	uint64 RoleID;//[Offset: 0x50, Size: 8]
	int8 RoleType;//[Offset: 0x58, Size: 1]
	FString PicUrl;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: EmotionalMemoryData
	<int,MemoryDataArray> MemoryData;//[Offset: 0x0, Size: 60]

--------------------------------
Class: MemoryDataArray
	MemoryData[] MemoryDataArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: MemoryData
	enum RecordType;//[Offset: 0x0, Size: 1]
	FString[] Value;//[Offset: 0x4, Size: 12]
	uint16[] Num;//[Offset: 0x10, Size: 12]

--------------------------------
Class: WeaponRecord
	int WeaponID;//[Offset: 0x0, Size: 4]
	int FireCount;//[Offset: 0x4, Size: 4]
	int HitCount;//[Offset: 0x8, Size: 4]
	int KillCount;//[Offset: 0xc, Size: 4]
	float TotalDamage;//[Offset: 0x10, Size: 4]
	HitFlow[] HitFlow;//[Offset: 0x38, Size: 12]

--------------------------------
Class: HitFlow
	int AimType;//[Offset: 0x0, Size: 4]
	int Distance;//[Offset: 0x4, Size: 4]
	int IsKill;//[Offset: 0x8, Size: 4]
	float Damage;//[Offset: 0xc, Size: 4]
	bool bFallOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bFallOnGroundPostHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	byte[] PlayerStates;//[Offset: 0x14, Size: 12]
	byte HitPos;//[Offset: 0x20, Size: 1]

--------------------------------
Class: UGCPlayerInfo
	int MatchRank;//[Offset: 0x0, Size: 4]
	int VIPLevel;//[Offset: 0x4, Size: 4]
	UGCPlayerCustomInfo[] CustomInfoList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UGCPlayerCustomInfo
	FString PropKey;//[Offset: 0x0, Size: 12]
	float PropValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RequestResponseCanShowKillThanksUIContext
	bool bCanShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum CanShowKillThanksUIOperation;//[Offset: 0x1, Size: 1]
	Actor* TombBox;//[Offset: 0x4, Size: 4]
	FString UID;//[Offset: 0x8, Size: 12]
	FString IconURL;//[Offset: 0x14, Size: 12]
	int Gender;//[Offset: 0x20, Size: 4]
	int PlatformGender;//[Offset: 0x24, Size: 4]
	int SegmentLevel;//[Offset: 0x28, Size: 4]
	int PlayerLevel;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: RequestResponseKillThanksContext
	int Result;//[Offset: 0x0, Size: 4]
	Actor* TombBox;//[Offset: 0x4, Size: 4]
	FString UID;//[Offset: 0x8, Size: 12]

--------------------------------
Class: TLog_ActivityEventType
	byte ActivityEventID;//[Offset: 0x0, Size: 1]
	Vector ActivityEventLoc;//[Offset: 0x4, Size: 12]

--------------------------------
Class: TrainingStatisticsData
	TrainingStatisticsItem[] ItemList;//[Offset: 0x0, Size: 12]
	TrainingStatisticsItem_Int32[] Int32ItemList;//[Offset: 0xc, Size: 12]
	TrainingStatisticsItem_Int64[] Int64ItemList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: TrainingStatisticsItem
	FString ItemName;//[Offset: 0x0, Size: 12]
	float ItemValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TrainingStatisticsItem_Int32
	FString ItemName;//[Offset: 0x0, Size: 12]
	int ItemValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TrainingStatisticsItem_Int64
	FString ItemName;//[Offset: 0x0, Size: 12]
	uint64 ItemValue;//[Offset: 0x10, Size: 8]

--------------------------------
Class: TeammateHeroData
	int FinalHeroId;//[Offset: 0x0, Size: 4]
	int FinalHeroLevel;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModeTeammateBattleResultData
	FString Name;//[Offset: 0x0, Size: 12]
	uint64 UID;//[Offset: 0x10, Size: 8]
	int Kill;//[Offset: 0x18, Size: 4]
	FString State;//[Offset: 0x1c, Size: 12]
	float travelDistance;//[Offset: 0x28, Size: 4]
	float marchDistance;//[Offset: 0x2c, Size: 4]
	float driveDistance;//[Offset: 0x30, Size: 4]
	float NightMarchDistance;//[Offset: 0x34, Size: 4]
	int KillWolfNum;//[Offset: 0x38, Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0x3c, Size: 4]
	float DamageAmount;//[Offset: 0x40, Size: 4]
	float ShootWeaponDamageAmount;//[Offset: 0x44, Size: 4]
	float HealAmount;//[Offset: 0x48, Size: 4]
	int AssistNum;//[Offset: 0x4c, Size: 4]
	int HeadShotNum;//[Offset: 0x50, Size: 4]
	float surviveTime;//[Offset: 0x54, Size: 4]
	float ObserverTime;//[Offset: 0x58, Size: 4]
	int RevivalNum;//[Offset: 0x5c, Size: 4]
	int BeRevivedNum;//[Offset: 0x60, Size: 4]
	int rescueTimes;//[Offset: 0x64, Size: 4]
	int DestroyVehicles;//[Offset: 0x68, Size: 4]
	FString[] KillFlow;//[Offset: 0x6c, Size: 12]
	int deduplicate_kill;//[Offset: 0x78, Size: 4]
	float OutsideBlueCircleTime;//[Offset: 0x7c, Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x80, Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x8c, Size: 4]
	int FirstOpenedMonsterTombBoxNum;//[Offset: 0x90, Size: 4]
	int FirstOpenedSuperWeaponBoxNum;//[Offset: 0x94, Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x98, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x9c, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	int GamePlayingTime;//[Offset: 0xa4, Size: 4]
	int TouchDownAreaID;//[Offset: 0xa8, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0xac, Size: 4]
	FString TouchDownObjectName;//[Offset: 0xb0, Size: 12]
	AreaTriggerRecord[] AreaTriggerRecordList;//[Offset: 0xbc, Size: 12]
	int KillerWeaponId;//[Offset: 0xc8, Size: 4]
	float KillerDistance;//[Offset: 0xcc, Size: 4]
	PVETeammateData[] PVETeammateData;//[Offset: 0xd0, Size: 12]
	int[] peak_kill_score_list;//[Offset: 0xdc, Size: 12]

--------------------------------
Class: PVETeammateData
	int MonsterKillTotalNum;//[Offset: 0x0, Size: 4]
	int MonsterHeadShootKillTotalNum;//[Offset: 0x4, Size: 4]
	float MonsterDamageAmount;//[Offset: 0x8, Size: 4]
	<int,int> MonsterKillIDToNum;//[Offset: 0xc, Size: 60]

--------------------------------
Class: GameModePlayerFlowResultData.TLogBaseInfo
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x28, Size: 12]

--------------------------------
Class: TLogBaseInfo
	FString OpenID;//[Offset: 0x0, Size: 12]
	int8 AreaID;//[Offset: 0xc, Size: 1]
	int8 PlatID;//[Offset: 0xd, Size: 1]
	FString ZoneID;//[Offset: 0x10, Size: 12]
	uint64 BattleID;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GameModePlayerBattleResultData_SuperCold
	int MakeFiresNum;//[Offset: 0x0, Size: 4]
	int DeerBBQNum;//[Offset: 0x4, Size: 4]
	int ChichenBBQNum;//[Offset: 0x8, Size: 4]
	int UseKFNum;//[Offset: 0xc, Size: 4]
	int UseUAVNum;//[Offset: 0x10, Size: 4]
	int KFUsingTime;//[Offset: 0x14, Size: 4]
	int UAVUsingTime;//[Offset: 0x18, Size: 4]
	int SkateboardUsingCount;//[Offset: 0x1c, Size: 4]
	int SkateboardUsingTime;//[Offset: 0x20, Size: 4]
	int SkateboardUsingDistance;//[Offset: 0x24, Size: 4]
	KillAnimalData[] AnimalKillFlow;//[Offset: 0x28, Size: 12]

--------------------------------
Class: KillAnimalData
	byte AnimalType;//[Offset: 0x0, Size: 1]
	int KillNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_Hero
	HeroSkillData[] HeroSkillDatas;//[Offset: 0x0, Size: 12]
	int FinalHeroId;//[Offset: 0xc, Size: 4]
	int FinalHeroLevel;//[Offset: 0x10, Size: 4]
	<uint64,TeammateHeroData> TeammateDatas;//[Offset: 0x14, Size: 60]

--------------------------------
Class: HeroSkillData
	int HeroID;//[Offset: 0x0, Size: 4]
	int HeroUsingCount;//[Offset: 0x4, Size: 4]
	HeroBaseInfo HeroRecord;//[Offset: 0x8, Size: 32]
	<int,SkillRecordData> SkillRecords;//[Offset: 0x28, Size: 60]

--------------------------------
Class: HeroBaseInfo
	int MaxLevel;//[Offset: 0x0, Size: 4]
	int TimeSeconds;//[Offset: 0x4, Size: 4]
	int KillCount;//[Offset: 0x8, Size: 4]
	int TotalDamage;//[Offset: 0xc, Size: 4]
	int TotalHeal;//[Offset: 0x10, Size: 4]
	int SaveCount;//[Offset: 0x14, Size: 4]
	int KillCountInAir;//[Offset: 0x18, Size: 4]
	int TotalDamageInAir;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SkillRecordData
	<FString,int> RecordList;//[Offset: 0x0, Size: 60]

--------------------------------
Class: GameModePlayerBattleResultData_GunMaster
	GunMaterialData[] GunMaterialDatas;//[Offset: 0x0, Size: 12]
	int EscapeType;//[Offset: 0xc, Size: 4]
	int BountyNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GunMaterialData
	int TypeSpecificID;//[Offset: 0x0, Size: 4]
	int GunMaterialNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData_BountyHunter
	int DragonBreathCastTimes;//[Offset: 0x0, Size: 4]
	int[] PlayerAchievementList;//[Offset: 0x4, Size: 12]
	int BountyGold;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GameModePlayerBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainingPlayerCount;//[Offset: 0xc, Size: 4]
	int TotalPlayerCount;//[Offset: 0x10, Size: 4]
	int RemainingTeamCount;//[Offset: 0x14, Size: 4]
	int TotalTeamCount;//[Offset: 0x18, Size: 4]
	bool IsSolo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsSafeExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	uint64 Killer;//[Offset: 0x20, Size: 8]
	FString KillerName;//[Offset: 0x28, Size: 12]
	HitDownPlayerTypeInfoData[] HitDownPlayersInfoData;//[Offset: 0x34, Size: 12]
	int ShootWeaponShotNum;//[Offset: 0x40, Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x44, Size: 4]
	int HealTimes;//[Offset: 0x48, Size: 4]
	FString[] KillFlow;//[Offset: 0x4c, Size: 12]
	int[] KillsInCircle;//[Offset: 0x58, Size: 12]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x64, Size: 12]
	int PickupMonsterTombBoxNum;//[Offset: 0x70, Size: 4]
	<FString,RedpackData> FireworksRedpackData;//[Offset: 0x74, Size: 60]
	GiftSentData[] GiftSentData;//[Offset: 0xb0, Size: 12]
	GiftReceivedData[] GiftReceivedData;//[Offset: 0xbc, Size: 12]
	uint64 parachute_leader_uid;//[Offset: 0xc8, Size: 8]
	UseItemFlow[] UseItemFlow;//[Offset: 0xd0, Size: 12]
	int destroyVehicleNum;//[Offset: 0xdc, Size: 4]
	int is_escape;//[Offset: 0xe0, Size: 4]
	GameModeTeammateBattleResultData[] TeammateList;//[Offset: 0xe4, Size: 12]
	Vector LandLocation;//[Offset: 0xf0, Size: 12]
	int TopFiveTipsUseResponse;//[Offset: 0xfc, Size: 4]
	float SignalHealAmount;//[Offset: 0x100, Size: 4]
	int SignalHealCount;//[Offset: 0x104, Size: 4]
	Vector DeadLocation;//[Offset: 0x108, Size: 12]
	FString DeadDamangeType;//[Offset: 0x114, Size: 12]
	FString DeadTimeStr;//[Offset: 0x120, Size: 12]
	FString logoutime;//[Offset: 0x12c, Size: 12]
	float Pronetime;//[Offset: 0x138, Size: 4]
	float BeInWaterTime;//[Offset: 0x13c, Size: 4]
	float SwimmingDistance;//[Offset: 0x140, Size: 4]
	int BeDownTimes;//[Offset: 0x144, Size: 4]
	int KnockDownTimes;//[Offset: 0x148, Size: 4]
	int BeSavedTimes;//[Offset: 0x14c, Size: 4]
	int PickUpAirDrops;//[Offset: 0x150, Size: 4]
	EquipmentData EquipmentData;//[Offset: 0x154, Size: 80]
	int Rank;//[Offset: 0x1a4, Size: 4]
	int TotalScore;//[Offset: 0x1a8, Size: 4]
	int FollowState;//[Offset: 0x1ac, Size: 4]
	int InviteTimes;//[Offset: 0x1b0, Size: 4]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	int GamePlayingTime;//[Offset: 0x1b8, Size: 4]
	int TouchDownAreaID;//[Offset: 0x1bc, Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x1c0, Size: 4]
	FString TouchDownObjectName;//[Offset: 0x1c4, Size: 12]
	GameModePlayerTaskDataSim[] CompletedTaskList;//[Offset: 0x1d0, Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x1dc, Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x1e8, Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x1f4, Size: 12]
	int KillNumInVehicle;//[Offset: 0x200, Size: 4]
	float TotalSprintDistance;//[Offset: 0x204, Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x208, Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x20c, Size: 4]
	int BreakDoorNum;//[Offset: 0x210, Size: 4]
	AreaTriggerRecord[] AreaTriggerRecordList;//[Offset: 0x214, Size: 12]
	int[] BuildFlow;//[Offset: 0x220, Size: 12]
	int[] DestroyShelterFlow;//[Offset: 0x22c, Size: 12]
	float HitShelterDamage;//[Offset: 0x238, Size: 4]
	int ZombieKilledUsingTraps;//[Offset: 0x23c, Size: 4]
	float ShelterTakeDamage;//[Offset: 0x240, Size: 4]
	int PlayerSetLevel;//[Offset: 0x244, Size: 4]
	float PlayerSetExp;//[Offset: 0x248, Size: 4]
	MonsterTreasureBoxData[] MonsterTreasureBoxOpenFlow;//[Offset: 0x24c, Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0x258, Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0x25c, Size: 4]
	BuildMaterialData[] BuildMaterialGetList;//[Offset: 0x260, Size: 12]
	BuildMaterialData[] BuildMaterialUseList;//[Offset: 0x26c, Size: 12]
	UseItemFlow[] UseSpecificBulletFlow;//[Offset: 0x278, Size: 12]
	int WeaponCreateStuckAutoRecoverNum;//[Offset: 0x284, Size: 4]
	PVESelfData[] PVESelfData;//[Offset: 0x288, Size: 12]
	ActivityEventReportData[] ActivityEventRecordList;//[Offset: 0x294, Size: 12]
	FString[] DestroyVehicleFlow;//[Offset: 0x2a0, Size: 12]
	int UseHelicoperNum;//[Offset: 0x2ac, Size: 4]
	float UseHelicoperDistance;//[Offset: 0x2b0, Size: 4]
	int UseDragonBoatNum;//[Offset: 0x2b4, Size: 4]
	byte CharmRankIndex;//[Offset: 0x2b8, Size: 1]
	int DrivingHelicopterTime;//[Offset: 0x2bc, Size: 4]
	int InHelicopterTime;//[Offset: 0x2c0, Size: 4]
	int ChangedYearBeastWarmScore;//[Offset: 0x2c4, Size: 4]
	float GlidingDistance;//[Offset: 0x2c8, Size: 4]
	int BreakGlassNum;//[Offset: 0x2cc, Size: 4]
	int ClimbObstacleNum;//[Offset: 0x2d0, Size: 4]
	EmoteAnimIData[] EmoteAnimIDataArray;//[Offset: 0x2d4, Size: 12]
	int BattleshipDestroiedNum;//[Offset: 0x2e0, Size: 4]
	int BattleshipShieldBrokenNum;//[Offset: 0x2e4, Size: 4]
	<uint64,uint16> MutualAid;//[Offset: 0x2e8, Size: 60]
	<uint64,uint16> WhoRescuedMe;//[Offset: 0x324, Size: 60]
	<uint64,uint16> IRescuedWhom;//[Offset: 0x360, Size: 60]
	<uint64,uint16> WhoRevivedMe;//[Offset: 0x39c, Size: 60]
	<uint64,uint16> IRevivedWhom;//[Offset: 0x3d8, Size: 60]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0, Size: 4]
	Vector BoxLocation;//[Offset: 0x4, Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10, Size: 8]

--------------------------------
Class: BuildMaterialData
	int MatID;//[Offset: 0x0, Size: 4]
	int MatCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PVESelfData
	FString[] ZombieKillFlow;//[Offset: 0x0, Size: 12]
	float DamageFromMonsterAmount;//[Offset: 0xc, Size: 4]
	int SurvivalSeconds;//[Offset: 0x10, Size: 4]

--------------------------------
Class: HunterRevivalDataFlow
	HunterRevivalData[] HunterRevivalDatas;//[Offset: 0x0, Size: 12]

--------------------------------
Class: HunterRevivalData
	uint32 RevivalTime;//[Offset: 0x0, Size: 4]
	uint32 RevivalType;//[Offset: 0x4, Size: 4]
	FString RevivalPosStr;//[Offset: 0x8, Size: 12]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0, Size: 12]
	Rotator Rot;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0, Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	int LayerID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0, Size: 1]
	int TypeID;//[Offset: 0x4, Size: 4]
	FString WidgetClassPath;//[Offset: 0x8, Size: 12]
	Vector Location;//[Offset: 0x14, Size: 12]
	Rotator Rotation;//[Offset: 0x20, Size: 12]
	int InstanceID;//[Offset: 0x2c, Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x30, Size: 24]
	enum MapAdded;//[Offset: 0x48, Size: 1]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	Property*[] DeltaProperties;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: CustomMarkEventData
	float CreateTime;//[Offset: 0x0, Size: 4]
	int CustomState;//[Offset: 0x4, Size: 4]
	FString CustomString;//[Offset: 0x8, Size: 12]
	enum InWhichMap;//[Offset: 0x14, Size: 1]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0, Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4, Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0xe60, Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0xe64, Size: 4]
	ParticleSystemComponent*[] PSCs;//[Offset: 0xe74, Size: 12]
	bool bNeedPlayWheelEnterWaterEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xebc, Size: 1]
	float PlayEnterWaterEffectSpeed;//[Offset: 0xec0, Size: 4]
	ParticleSystem* WheelContactWaterEffect;//[Offset: 0xec8, Size: 40]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0xef0, Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0xf18, Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0xf24, Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0xf2c, Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0xf30, Size: 4]
	bool bWheelEffectUseSocketBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf34, Size: 1]
	int ValidTransformMinWheelNum;//[Offset: 0xf38, Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0xf3c, Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0xf48, Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0xf4c, Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0xf60, Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0xf64, Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0xf68, Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0xf6c, Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0xf70, Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0xf74, Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0xf78, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0xf7c, Size: 4]
	STExtraVehicleSfxLoop WheelSlipSfxLoop;//[Offset: 0xf80, Size: 80]
	STExtraVehicleWheelSfxOnSurface WheelSfxOnSurface;//[Offset: 0xfd0, Size: 76]
	AkComponent* AkComp_WheelFriction;//[Offset: 0x101c, Size: 4]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0x1030, Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0x1034, Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0x105c, Size: 4]
	ParticleSystem* PlumeSmokeTemplate;//[Offset: 0x1064, Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0x1068, Size: 4]
	FString LoopSmokeCmpName;//[Offset: 0x106c, Size: 12]
	SoftObjectPath DustConfigClass;//[Offset: 0x1078, Size: 24]
	SoftObjectPath AccelerationPlumeLoopClass;//[Offset: 0x1090, Size: 24]
	SoftObjectPath AccelerationPlumeSmokeClass;//[Offset: 0x10a8, Size: 24]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0x10c0, Size: 5]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c5, Size: 1]
	PopKartPassDoorAccelerate PopKartPassDoorAccelerate;//[Offset: 0x1130, Size: 16]
	float PopKartPassDoorAccelerateValidTime;//[Offset: 0x1140, Size: 4]
	float PopKartAccelerateEffectElapseTime;//[Offset: 0x1144, Size: 4]
	float PopKartAccelerateEffecTime;//[Offset: 0x1148, Size: 4]
	int PopKartAccelerateEffectTag;//[Offset: 0x114c, Size: 4]
	float PopKartWheelDamageFallOff;//[Offset: 0x1150, Size: 4]
	int PopKartAccelerateTips;//[Offset: 0x1154, Size: 4]
	int CanNotPopKartPassDoorAccelerateTips;//[Offset: 0x1158, Size: 4]
	float UsePopKartPassDoorAccelerateThreshold;//[Offset: 0x115c, Size: 4]
	float UsePopKartPassDoorAccelerateThrottleThreshold;//[Offset: 0x1160, Size: 4]
	AkAudioEvent* Sfx_PopKartAccelerate;//[Offset: 0x1164, Size: 4]
	FName IsStoppedBlackboardKeyName;//[Offset: 0x1168, Size: 8]
	FName TargetLocationBlackboardKeyName;//[Offset: 0x1170, Size: 8]
	FName PathingLocationBlackboardKeyName;//[Offset: 0x1178, Size: 8]
	FName PathInputLocationBlackboardKeyName;//[Offset: 0x1180, Size: 8]
	void STServerUpdateState(int8 InSteeringInput, int8 InThrottleInput, int8 InBrakeInput, int8 InHandbrakeInput, int8 CurrentGear);// 0x2707730
	void ProcessPopKartCameraEffect(bool Enable, STExtraBaseCharacter* BC);// 0x2707660
	void PostLoadMesh();// 0x26fc070
	void PopKartJump(float UpSpeed);// 0x27075e0
	void PopKartAccelerate(float AcceleratePercent, float MaxSpeed, float minSpeed);// 0x27074d8
	void OnWheelsLanded();// 0x27074c4
	void OnRep_ReplicatedState();// 0x235d4b8
	void OnRep_PopKartAccelerateEffectTags();// 0x27074a8
	void OnRep_DustConfigClass();// 0x2707494
	void OnRep_AccelerationPlumeSmokeClass();// 0x2707480
	void OnRep_AccelerationPlumeLoopClass();// 0x270746c
	void OnPopKartPassDoorAccelerate();// 0x2602b44
	void OnGearChanged(bool bIsUp);// 0x27073ec
	void OnEnablePopKartAccelerateEffect(float AccelerateEffecTime);// 0x270736c
	void OnDisablePopKartAccelerateEffect();// 0x2707350
	void MulticastDrawNavigationDebug(float DeltaSeconds, Vector TargetLocation, Vector PathingLocation, Vector PathInputLocation);// 0x27071c8
	void MulticastDrawAvoidanceDebugLineTraceSingle(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x2707040
	void MulticastDrawAvoidanceDebugLineTraceMulti(float DeltaSeconds, Vector LineTraceStart, Vector LineTraceEnd, const byte[] ObjectTypesToAvoid);// 0x2706eb8
	void MulticastDrawAvoidanceDebugBoxTraceSingle(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x2706c60
	void MulticastDrawAvoidanceDebugBoxTraceMulti(float DeltaSeconds, Vector BoxTraceStart, Vector BoxTraceEnd, Vector BoxHalfSize, Rotator BoxOrientation, const byte[] ObjectTypesToAvoid);// 0x2706a08
	float GetVehicleSpeed();// 0x27069e0
	float GetVehicleSlip();// 0x27069b0
	Vector GetRotationInputDir();// 0x26023c4
	int GetCurrentGear(float minSpeed);// 0x2706930
	bool CanUsePopKartPassDoorAccelerate();// 0x2706900
	void BroadcastClientVehicleWheelDestroyEffect();// 0x2602b60

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20, Size: 12]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0, Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x8, Size: 40]
	ParticleSystem* SlipFx;//[Offset: 0x30, Size: 40]
	ParticleSystem* HubFx;//[Offset: 0x58, Size: 40]
	float minSpeed;//[Offset: 0x80, Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x2e4, Size: 4]
	float MaxQuadLength;//[Offset: 0x2e8, Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x2ec, Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x2f0, Size: 4]
	float DefaultTrailWidth;//[Offset: 0x2f4, Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	float DefaultTrailLength;//[Offset: 0x2fc, Size: 4]
	float TextureLength;//[Offset: 0x300, Size: 4]
	int USegmentNum;//[Offset: 0x304, Size: 4]
	int CoordU;//[Offset: 0x308, Size: 4]
	int SlippingCoordU;//[Offset: 0x30c, Size: 4]
	int BrokenCoordU;//[Offset: 0x310, Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x318, Size: 4]
	float AdditionalTextureLength;//[Offset: 0x31c, Size: 4]
	int AdditionalCoordU;//[Offset: 0x320, Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x324, Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x328, Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x330, Size: 4]
	void UpdateInput(out const TrailMarkInputData[] NewInput);// 0x273b184
	void StopUpdate();// 0x273b170
	bool IsUpdating();// 0x273b148

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x570, Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57d, Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57e, Size: 1]
	enum CollisionMode;//[Offset: 0x57f, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x580, Size: 4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x5a4, Size: 12]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x5b0, Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x5bc, Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x5d8, Size: 60]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x614, Size: 12]
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles);// 0x57c0b20
	void SetSectionTessellationTriangles(int SectionIndex, out const int[] TessellationTriangles, bool bShouldMoveArray);// 0x57c09ec
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x57c0928
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x57c0864
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x57c07a0
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x57c064c
	void RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x46f6b154
	bool IsMeshSectionVisible(int SectionIndex);// 0x57c05cc
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x57c054c
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x57c04cc
	int GetNumSections();// 0x57c04a4
	int GetLastSectionIndex();// 0x57c047c
	int FirstAvailableMeshSectionIndex();// 0x57c0454
	void EndBatchUpdates();// 0x57c0440
	bool DoesSectionExist(int SectionIndex);// 0x57c03c0
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bGenerateTessellationTriangles, enum UpdateFrequency);// 0x57bfef8
	void CookCollisionNow();// 0x57bfee4
	void ClearMeshSection(int SectionIndex);// 0x57bfe6c
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x57bfdf4
	void ClearCollisionConvexMeshes();// 0x57bfde0
	void ClearAllMeshSections();// 0x57bfdcc
	void ClearAllMeshCollisionSections();// 0x57bfdb8
	void BeginBatchUpdates();// 0x57bfd9c
	void AddCollisionConvexMesh(Vector[] ConvexVerts);// 0x57bfcb4

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	int[] IndexBuffer;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0, Size: 12]
	Box BoundingBox;//[Offset: 0xc, Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 12]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: TrailMarkInputData
	bool bContainValidData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Vector Normal;//[Offset: 0x40, Size: 12]
	enum Type;//[Offset: 0x4c, Size: 1]
	bool bBackWheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x394, Size: 12]
	FName[] ExtraOptBoneNames;//[Offset: 0x3a0, Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	VehicleWheel*[] WheelHubs;//[Offset: 0x3bc, Size: 12]
	byte[] SpecialModifyCollisionList;//[Offset: 0x3c8, Size: 12]
	int[] SpecialModifyShapeIndexList;//[Offset: 0x3d4, Size: 12]
	FName RootBodyName;//[Offset: 0x3e0, Size: 8]
	bool bAllowCollisionWeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x3f0, Size: 4]
	float ServerInitForceSleepPhysicsDelay;//[Offset: 0x424, Size: 4]
	float ClientInitForceSleepPhysicsDelay;//[Offset: 0x428, Size: 4]
	<uint32,CachedWheelData> mapCachedWheelData;//[Offset: 0x43c, Size: 60]
	void OnExpoldeStopWheel();// 0x2700c10
	void MoveWheelShapeHeight(float Height);// 0x2700b98
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x2700a98
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x270090c
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x270080c
	float GetFinalThrottleInput();// 0x27007e4
	float GetDisToLand();// 0x27007b4
	float GetBrakeInput();// 0x270078c
	void ForceWheelsRotate(float DriveTorque);// 0x2700714
	void ClearDestroyedWheel();// 0x2700700

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x288, Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2f4, Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x310, Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x338, Size: 88]
	float AckermannAccuracy;//[Offset: 0x390, Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13c, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x140, Size: 12]
	float Mass;//[Offset: 0x14c, Size: 4]
	float DragCoefficient;//[Offset: 0x150, Size: 4]
	float ChassisWidth;//[Offset: 0x154, Size: 4]
	float ChassisHeight;//[Offset: 0x158, Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	float DragArea;//[Offset: 0x160, Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x164, Size: 4]
	float MaxEngineRPM;//[Offset: 0x168, Size: 4]
	float DebugDragMagnitude;//[Offset: 0x16c, Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x170, Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x17c, Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x180, Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x184, Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x188, Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x18c, Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x190, Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x194, Size: 4]
	VehicleWheel*[] Wheels;//[Offset: 0x198, Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b0, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1b4, Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1b8, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1bc, Size: 4]
	float RVOSteeringStep;//[Offset: 0x1c0, Size: 4]
	float RVOThrottleStep;//[Offset: 0x1c4, Size: 4]
	int AvoidanceUID;//[Offset: 0x1c8, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1cc, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1d0, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1d4, Size: 4]
	float AvoidanceWeight;//[Offset: 0x1d8, Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1dc, Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1e8, Size: 20]
	float RawSteeringInput;//[Offset: 0x200, Size: 4]
	float RawThrottleInput;//[Offset: 0x204, Size: 4]
	float RawBrakeInput;//[Offset: 0x208, Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20c, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20c, Size: 1]
	float SteeringInput;//[Offset: 0x210, Size: 4]
	float ThrottleInput;//[Offset: 0x214, Size: 4]
	float BrakeInput;//[Offset: 0x218, Size: 4]
	float HandbrakeInput;//[Offset: 0x21c, Size: 4]
	float IdleBrakeInput;//[Offset: 0x220, Size: 4]
	float StopThreshold;//[Offset: 0x224, Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x228, Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x22c, Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x234, Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x23c, Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x244, Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c, Size: 1]
	bool EnableCleanDynamicInterval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	int SleepingFramesToCleanDynamicInterval;//[Offset: 0x27c, Size: 4]
	void SetUseAutoGears(bool bUseAuto);// 0x58ea768
	void SetThrottleInput(float Throttle);// 0x58ea6e8
	void SetTargetGear(int GearNum, bool bImmediate);// 0x58ea624
	void SetSteeringInput(float Steering);// 0x58ea5a4
	void SetPhysActive(bool bActive);// 0x58ea524
	void SetHandbrakeInput(bool bNewHandbrake);// 0x27af0e4
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x58ea4a0
	void SetGroupsToIgnore(int GroupFlags);// 0x58ea428
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x58ea3a4
	void SetGroupsToAvoid(int GroupFlags);// 0x58ea32c
	void SetGearUp(bool bNewGearUp);// 0x58ea2ac
	void SetGearDown(bool bNewGearDown);// 0x58ea22c
	void SetBrakeInput(float Brake);// 0x58ea1ac
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x58ea128
	void SetAvoidanceGroup(int GroupFlags);// 0x58ea0b0
	void SetAvoidanceEnabled(bool bEnable);// 0x58ea030
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x58e9e4c
	bool GetUseAutoGears();// 0x58e9e24
	int GetTargetGear();// 0x58e9dfc
	float GetForwardSpeed();// 0x58e9dcc
	float GetEngineRotationSpeed();// 0x58e9da4
	float GetEngineMaxRotationSpeed();// 0x58e9d7c
	int GetCurrentGear();// 0x58e9d54

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName TireBoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x1c, Size: 4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	Vector Offset;//[Offset: 0x24, Size: 12]
	float ShapeRadius;//[Offset: 0x30, Size: 4]
	float ShapeWidth;//[Offset: 0x34, Size: 4]
	float Mass;//[Offset: 0x38, Size: 4]
	float DampingRate;//[Offset: 0x3c, Size: 4]
	float SteerAngle;//[Offset: 0x40, Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	TireType* TireType;//[Offset: 0x48, Size: 4]
	TireConfig* TireConfig;//[Offset: 0x4c, Size: 4]
	float LatStiffMaxLoad;//[Offset: 0x50, Size: 4]
	float LatStiffValue;//[Offset: 0x54, Size: 4]
	float LongStiffValue;//[Offset: 0x58, Size: 4]
	float SuspensionForceOffset;//[Offset: 0x5c, Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x60, Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x64, Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x68, Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x6c, Size: 4]
	byte SweepType;//[Offset: 0x70, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x74, Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x78, Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c, Size: 4]
	int WheelIndex;//[Offset: 0x80, Size: 4]
	float DebugLongSlip;//[Offset: 0x84, Size: 4]
	float DebugLatSlip;//[Offset: 0x88, Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c, Size: 4]
	float DebugWheelTorque;//[Offset: 0x94, Size: 4]
	float DebugLongForce;//[Offset: 0x98, Size: 4]
	float DebugLatForce;//[Offset: 0x9c, Size: 4]
	Vector Location;//[Offset: 0xa0, Size: 12]
	Vector OldLocation;//[Offset: 0xac, Size: 12]
	Vector Velocity;//[Offset: 0xb8, Size: 12]
	bool IsInAir();// 0x58e95cc
	float GetSuspensionOffset();// 0x58e95a4
	float GetSteerAngle();// 0x58e957c
	float GetRotationAngle();// 0x58e9554

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x20, Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24, Size: 12]
	float[] TireFrictionVsSlipGraph;//[Offset: 0x34, Size: 12]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float FrictionScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 4]
	FName BoneName;//[Offset: 0x8, Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 12]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 88]
	float MaxRPM;//[Offset: 0x58, Size: 4]
	float MOI;//[Offset: 0x5c, Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60, Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64, Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68, Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 4]
	float CentreBias;//[Offset: 0x10, Size: 4]
	float FrontBias;//[Offset: 0x14, Size: 4]
	float RearBias;//[Offset: 0x18, Size: 4]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 4]
	float FinalRatio;//[Offset: 0xc, Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c, Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20, Size: 4]
	float ClutchStrength;//[Offset: 0x24, Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 4]
	float DownRatio;//[Offset: 0x4, Size: 4]
	float UpRatio;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 4]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float BrakeInput;//[Offset: 0x8, Size: 4]
	float HandbrakeInput;//[Offset: 0xc, Size: 4]
	int CurrentGear;//[Offset: 0x10, Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 4]
	float FallRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CachedWheelData
	bool WheelsInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float WheelSuspensionOffset;//[Offset: 0x4, Size: 4]
	PhysicalMaterial* WheelContactMaterial;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	class UserWidget* SettleAccountUI;//[Offset: 0x26c8, Size: 40]
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x26f0, Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x26fc, Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x2708, Size: 12]
	delegate OnSkillStartDelegate;//[Offset: 0x2714, Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x2720, Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x272c, Size: 12]
	delegate OnPlayerGetOnOffBigAirShipDelegate;//[Offset: 0x2738, Size: 12]
	delegate OnGetOnVehicleDelegate;//[Offset: 0x2744, Size: 12]
	STScreenAppearanceComponent* ScreenAppearanceComp;//[Offset: 0x2750, Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x2754, Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x2758, Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x275c, Size: 4]
	float IndoorCheckDistance;//[Offset: 0x2760, Size: 4]
	float IndoorCheckTime;//[Offset: 0x2764, Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x2768, Size: 4]
	delegate OnPlayerIndoorStateChangedEvent;//[Offset: 0x276c, Size: 12]
	delegate OnPlayerIndoorLowerStateChangedEvent;//[Offset: 0x2778, Size: 12]
	byte ParachuteState;//[Offset: 0x2790, Size: 1]
	byte LastParachuteState;//[Offset: 0x2792, Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x2794, Size: 4]
	float SwimZDir;//[Offset: 0x2798, Size: 4]
	float SwimRotateX_Ex;//[Offset: 0x279c, Size: 4]
	delegate OnParachuteStateChangedDelegate;//[Offset: 0x27a0, Size: 12]
	delegate OnParachuteAnimSubInstanceNeedSwitch;//[Offset: 0x27ac, Size: 12]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x27bc, Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x27c0, Size: 4]
	STParachuteCloudData[] ParachuteCloudAssestList;//[Offset: 0x27c4, Size: 12]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x27d0, Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x27d4, Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x27d8, Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x27dc, Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x27e0, Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x27e4, Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x27e8, Size: 4]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x27f0, Size: 192]
	class CameraShake* FreeFallCamShake;//[Offset: 0x28c8, Size: 4]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28cc, Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x28d0, Size: 4]
	float VehicleRightInputRate;//[Offset: 0x28d4, Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d8, Size: 1]
	bool bHasSendBulletFlyPassEarRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d9, Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x28dc, Size: 4]
	bool bIsParachuteAnimBeingAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28e3, Size: 1]
	bool IsLocalActuallyAngledSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f0, Size: 1]
	bool IsLocalActuallyScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f1, Size: 1]
	AngledSightRepData AngledSightRepData;//[Offset: 0x28f2, Size: 2]
	delegate OnPlayerHasPossessed;//[Offset: 0x28f4, Size: 12]
	int TrySightCorrectionTime;//[Offset: 0x2904, Size: 4]
	float SightCorrectionDelay;//[Offset: 0x2908, Size: 4]
	bool IsStartObserverMainSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290c, Size: 1]
	bool IsStartObserverAngleSightCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290d, Size: 1]
	int CurrentSightCorrectionTimes;//[Offset: 0x2910, Size: 4]
	bool isRecommendBattery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291d, Size: 1]
	FString[] ShowDebugAnimNodeTypeList;//[Offset: 0x2924, Size: 12]
	float ClientHUDStateCheckFrequency;//[Offset: 0x2934, Size: 4]
	bool CheckForActivityRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2938, Size: 1]
	ActicityDisallowedData[] PreConfiguredActivityDisallowedData;//[Offset: 0x293c, Size: 12]
	int CurrentActivityID;//[Offset: 0x2948, Size: 4]
	int CurrentActivityIndex;//[Offset: 0x294c, Size: 4]
	WarteringAreaCPP* MiniTreeRef;//[Offset: 0x2950, Size: 4]
	bool bOpenPlatformGameFootEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2954, Size: 1]
	PawnChooserData PawnChooserData;//[Offset: 0x2958, Size: 112]
	delegate OnSelectedActorDelegate;//[Offset: 0x29c8, Size: 12]
	ActivityAnimationRepData ActivityAnimationRepData;//[Offset: 0x29d4, Size: 4]
	ActivityAnimationRepData PrevActivityAnimationRepData;//[Offset: 0x29d8, Size: 4]
	PartyDanceStateData PlayerPartyDanceState;//[Offset: 0x29e8, Size: 32]
	<enum,PartyDance> PartyDancingMontageMap;//[Offset: 0x2a0c, Size: 60]
	int DancePartyItemSubType;//[Offset: 0x2a48, Size: 4]
	AnimMontage*[] CurrentPlayingPartyDanceAnimation;//[Offset: 0x2a4c, Size: 12]
	STExtraPlayerCharacter* OtherDancingPartner;//[Offset: 0x2a58, Size: 8]
	<enum,ParticleSystem*> DanceParticleMap;//[Offset: 0x2a60, Size: 60]
	<enum,Transform> DanceParticleMapOffset;//[Offset: 0x2a9c, Size: 60]
	<enum,ParticleSystemComponent*> DanceParticleInstances;//[Offset: 0x2ad8, Size: 60]
	PlayerRoleCacheFrameData WeaponManagerUsedPlayerRoleCacheFrameData;//[Offset: 0x2b18, Size: 16]
	PlayerSecurityInfoCollector* PlayerSecurityInfoCollector;//[Offset: 0x2b2c, Size: 4]
	delegate OnApplicationactivatedDelegate;//[Offset: 0x2b30, Size: 12]
	MaterialBillboardComponent* ReplayEnemyFrameUI;//[Offset: 0x2b3c, Size: 8]
	StaticMeshComponent* FootMarkComponent;//[Offset: 0x2b44, Size: 8]
	float ThresholdHeight;//[Offset: 0x2b4c, Size: 4]
	float FootMarkScaling;//[Offset: 0x2b50, Size: 4]
	Texture* GreenMarkTexture;//[Offset: 0x2b58, Size: 4]
	Texture* BlueMarkTexture;//[Offset: 0x2b5c, Size: 4]
	Texture* RedMarkTexture;//[Offset: 0x2b60, Size: 4]
	MaterialInstance* FootMarkMaterialInstance;//[Offset: 0x2b64, Size: 4]
	SoftObjectPath GreenMarkPath;//[Offset: 0x2b68, Size: 24]
	SoftObjectPath BlueMarkPath;//[Offset: 0x2b80, Size: 24]
	SoftObjectPath RedMarkPath;//[Offset: 0x2b98, Size: 24]
	SoftObjectPath FootMarkMaterialPath;//[Offset: 0x2bb0, Size: 24]
	float AreaCheckTime;//[Offset: 0x2bd4, Size: 4]
	int AreaEventID;//[Offset: 0x2bd8, Size: 4]
	float AreaCheckDis;//[Offset: 0x2bdc, Size: 4]
	<int> ReachAreaSet;//[Offset: 0x2be0, Size: 60]
	bool bIsBeginAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c20, Size: 1]
	bool bIgonreWeatherEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c21, Size: 1]
	CustomVoiceGroup CustomVoiceChannel;//[Offset: 0x2c30, Size: 20]
	bool bIsEnablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c45, Size: 1]
	delegate OnActivityAnimationChanged;//[Offset: 0x2c48, Size: 12]
	bool bIsOnBigAirShip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c54, Size: 1]
	FString[] TriggerLevelsClientWhiteList;//[Offset: 0x2c58, Size: 12]
	FString[] TriggerLevelsClientBlackList;//[Offset: 0x2c64, Size: 12]
	bool bFlyingUseFreeFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c70, Size: 1]
	CharacterFlyingComponent* FlyingComponent;//[Offset: 0x2c74, Size: 4]
	delegate OnPlayerExitParachute;//[Offset: 0x2c78, Size: 12]
	bool bEnterDeferredPlaneAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c84, Size: 1]
	bool bAllowLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c85, Size: 1]
	Vector ExtraLauncherTargetLocationForValidation;//[Offset: 0x2c88, Size: 12]
	Vector ExtraLauncherStartLocationForValidation;//[Offset: 0x2c94, Size: 12]
	float ExtraTargetDist;//[Offset: 0x2ca0, Size: 4]
	AnimMontage* ExtraLaunchAnimMontage;//[Offset: 0x2ca4, Size: 4]
	bool bExtraLaunching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca8, Size: 1]
	Vector ExtraLaunchTargetLocation;//[Offset: 0x2cb8, Size: 12]
	float ExtraLaunchDuration;//[Offset: 0x2cc4, Size: 4]
	float ExtraLaunchFallingDamageFactor;//[Offset: 0x2cc8, Size: 4]
	float ExtraLaunchLengthValidator;//[Offset: 0x2ccc, Size: 4]
	enum TargetStateTypeCacheForReplay;//[Offset: 0x2cd0, Size: 1]
	SyncPersionalOPInfo ReplayOPState;//[Offset: 0x2cd4, Size: 8]
	void XmasStarHitServer(FString NewParam);// 0x26979d4
	void XmasStarHitMulti(FString Name);// 0x269790c
	void UpdateParachuteFallingCameraDistance(float Alpha);// 0x2697894
	void UpdateIndoorState(bool IsIndoor);// 0x26977cc
	void TouchCancelSkillLock();// 0x26977b8
	void SyncLatestPlayerStatus(byte LatestParachuteState);// 0x2697704
	void SyncDeadTombBoxToController(PlayerTombBox* _DeadTombBox);// 0x262c174
	void SwitchSightAngledServer(byte Type, bool IsOnlyTurn);// 0x26975f4
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x2697528
	void SwitchSightAngled(byte Type, bool IsOnlyTurn);// 0x2697464
	void SwitchCameraToParachuteOpening();// 0x2697448
	void SwitchCameraToParachuteFalling();// 0x269742c
	void SwitchCameraToNormal();// 0x2697410
	void SwitchCameraFromParachuteOpeningToTPPUpdate(float Alpha);// 0x2697398
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x46f6b154
	void SwitchCameraFromParachuteOpeningToTPPFinish();// 0x2697384
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x46f6b154
	void StopCamShake();// 0x2697368
	void StartUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x26972f0
	void StartSwitchColdDown(float SwitchColdDownTime);// 0x2697278
	void StartCamShake();// 0x269725c
	void ShowNightVisionFrame();// 0x262b18c
	void ShowFootMark(STExtraVehicleBase* InVehicle);// 0x26971e4
	bool ShouldTriggerEntryEvent(enum EntryEvent);// 0x2697164
	bool ShouldSetRotation();// 0x2697134
	bool ShouldDropBagItem(out const ItemDefineID SkillItemID);// 0x269709c
	void SetupExtraLaunch_Stop(bool bClearVelocity);// 0x2697014
	void SetupExtraLaunch(out const Vector InTargetLocation, float Duration);// 0x2696f34
	void SetSwimRotateX_Ex(float NewSwimRotateX);// 0x2696ebc
	void SetRainyEffectParam(byte EffectType, float InRainyEffectParam);// 0x2696e00
	void SetRainyEffectEnable(byte EffectType, bool InEnable, float InRainyEffectParam);// 0x2696cf4
	void SetPitchViewAngle(float MinPitch, float MaxPitch);// 0x2696c30
	void SetParachuteState(byte State);// 0x2696bb0
	void SetActorMoveable(bool bMoveable);// 0x2696b30
	void ServerSetBulletFlySoundData(STExtraPlayerCharacter* PlayerCharacter, STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x26969c4
	void ServerRPC_UploadPersionalOp(SyncPersionalOPInfo NewPersonalOP);// 0x26968e8
	void ServerPreSetExtraJump(out const Vector InTargetLocation, out const Vector InStartLocationLocation, bool InAllowLaunch);// 0x26967a8
	void ServerOnApplicationactivated(bool bActive);// 0x26966e0
	void S2C_ExtraLaunchCharacter_ServerForceStop(bool bClearVelocity);// 0x2696660
	void RequestLoadParachuteAnim();// 0x2696644
	void ReqSetShoulderCameraMode(bool bShoulderMode);// 0x269657c
	bool ReplayCreateEnemyFrameUI();// 0x269654c
	void RemoveTriggerLevelsClientWhiteList(FString LevelName);// 0x2696468
	void RemoveTriggerLevelsClientBlackList(FString LevelName);// 0x2696384
	void ReleaseTrigger(enum Hand);// 0x2696304
	void RefreshAllAvatarVisibilityForBeObservedFinish();// 0x26962f0
	void RefreshAllAvatarVisibilityForBeObserved();// 0x26962dc
	void RefreshActivityAnimation();// 0x26962c8
	void PushTrigger(enum Hand);// 0x2696248
	void ProneWithTerrain(Rotator CharacterRotation, bool IsMoving, float Offset, float deap);// 0x26960f4
	void PossessedBy(Controller* NewController);// 0x26256d4
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x46f6b154
	void ParachuteAnimSubInstanceNeedSwitch(bool bParam);// 0x2696074
	void OnSkillStartDelegate__DelegateSignature(int SkillID);// 0x46f6b154
	void OnSkillFinishedDelegate__DelegateSignature(enum StopReason, int SkillID, bool HasThrownGrenade);// 0x46f6b154
	void OnSelectedActorDelegate__DelegateSignature(out const ChooserActorInfo[] ChooserInfos);// 0x46f6b154
	void OnScopeOutDelegate__DelegateSignature(bool bIsBegin);// 0x46f6b154
	void OnScopeOutAction(bool InActionStart);// 0x2695ff4
	void OnScopeInDelegate__DelegateSignature(bool bIsBegin);// 0x46f6b154
	void OnScopeInAction(bool InActionStart);// 0x2695f74
	void OnRep_TriggerLevelsClientWhiteList();// 0x2695f60
	void OnRep_TriggerLevelsClientBlackList();// 0x2695f4c
	void OnRep_STPlayerController();// 0x2695f38
	void OnRep_ReplayOPState();// 0x2695f24
	void OnRep_PlayerPartyDanceState();// 0x2695f10
	void OnRep_ParachuteState(byte State);// 0x2695e90
	void OnRep_IsEnablePickup();// 0x2695e7c
	void OnRep_ChangePlatformGameFootEffect();// 0x2695e68
	void OnRep_AngleSightStateChanged();// 0x2695e54
	void OnRep_ActivityAnimationRepData();// 0x2695e40
	void OnRank(int Kills, int Rank);// 0x2695d84
	void OnPlayerGetOnOffBigAirShipDelegate__DelegateSignature(Actor* Ship, bool bOn);// 0x46f6b154
	void OnPlayerControllerStateChanged(enum TargetStateType);// 0x2695d04
	void OnPartyDanceAnimationLoaded(AnimMontage* InMontage);// 0x2695bf8
	void OnMiniTreeTriggerServerLogicCPP(FString ExMsg);// 0x2695b60
	void OnLoadParachuteAnimCompleted();// 0x2695b4c
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x46f6b154
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);// 0x46f6b154
	void OnFollowStateChange();// 0x2622ac8
	void OnBPStateCheckIn();// 0x46f6b154
	void OnAvatarEquippedSucc(int SlotType, bool IsEquipped);// 0x2695a88
	void OnApplicationactivatedDelegate__DelegateSignature(bool bIsActive);// 0x46f6b154
	void OnActorSelected(out const ChooserActorInfo[] SelectedActorInfos);// 0x26959e0
	void MulticastSetShoulderCameraMode(bool bShoulderMode);// 0x2695958
	void MiniTreeTriggerServerLogic_Multicast();// 0x26958fc
	bool IsSwitchCoolingDownFinish();// 0x26958cc
	bool IsSelectedMetCondition(Actor* SelectedActor);// 0x2695844
	bool IsReplayViewTarget();// 0x262158c
	bool IsLocalControlOrView();// 0x269581c
	bool IsHoldAimButton();// 0x46f6b154
	bool IsGrenadeEmpty();// 0x265b8e4
	void InitPawnChooser();// 0x2695808
	void InitFootMarkColor();// 0x26957f4
	void InitAirAttackLocatorComponent();// 0x26957e0
	void HideNightVisionFrame();// 0x2620de0
	void HideFootMark(STExtraVehicleBase* InVehicle);// 0x2695768
	void HandlePlayerGetOnOffBigAirShip(Actor* Ship, bool bOn);// 0x269569c
	void HandleParachuteAnimChanged(enum TargetStateType);// 0x2695624
	void HandleBulletOverlap(Actor* BulletActor, out const HitResult HitResult, out const HitResult[] HitResults);// 0x26954d8
	void HandleAIInstigateBulletOverlap(STExtraBaseCharacter* InstigatorCharacter, out const HitResult HitResult, out const HitResult[] HitResults);// 0x269538c
	float GetSwimRotateX_Ex();// 0x2695364
	int GetSkillIndexByActivityID();// 0x46f6b154
	AnimationAsset* GetPlayerParachuteAnimByAnimType(byte AnimType);// 0x26952e4
	STExtraPlayerController* GetPlayerControllerSafety();// 0x261fe90
	void GetOnVehicleDelegate__DelegateSignature();// 0x46f6b154
	enum[] GetDisallowedStates(int ActivityID);// 0x46f6b154
	Vector GetBonePos(FName BoneName);// 0x2695250
	Rotator GetAngledSightRotator(STExtraShootWeapon* NewParam);// 0x26951b8
	void FreeFallShakeCam();// 0x26951a4
	void FinishUpdatingParachuteFallingCameraDistance(int nearPlaneDistance);// 0x269512c
	void ExtraLaunchCharacter_Stop(bool bClearVelocity);// 0x2695064
	void ExtraLaunchCharacter_ServerForceStop(bool bClearVelocity);// 0x2694fdc
	void ExtraLaunchCharacter(const Vector InTargetLocation, float Duration);// 0x2694ed8
	void EnterParachuteNone();// 0x2694ec4
	void EnablePickUp(bool IsEnable);// 0x2694e44
	void DynamicCreateComponents();// 0x2694e30
	void DumpCharacterAnimBPVars();// 0x2694e1c
	void DisableFallingDamageForPerioud(float Duration);// 0x2694d9c
	void ClientPlayEarSound(STExtraShootWeapon* InstigateWeapon, Vector FlySoundPos);// 0x2694c88
	void ClientHUDStateCheck(float DeltaTime);// 0x2694c10
	void ClearHPUI();// 0x261cfe8
	bool CanPerformExtraLaunch(out const Vector InTargetLocation);// 0x2694b70
	bool CanAnimInstanceCacheParachuteAnim(STExtraAnimInstance* MyAnimInstance);// 0x2694af0
	Vector CalculateExtraLaunchVelocity();// 0x2694aa0
	void C2S_ExtraLaunchCharacter_Stop(bool bClearVelocity);// 0x2694a20
	void C2S_ExtraLaunchCharacter(out const Vector InTargetLocation, float Duration);// 0x2694948
	bool AllowTriggerActivities(bool bCheckCanReceive);// 0x26948c0
	void AddTriggerLevelsClientWhiteList(FString LevelName);// 0x26947dc
	void AddTriggerLevelsClientBlackList(FString LevelName);// 0x26946f8

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xfc, Size: 4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0x100, Size: 12]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x110, Size: 48]
	CurveVector* NearClipToFOVCurve;//[Offset: 0x140, Size: 4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x144, Size: 4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x148, Size: 12]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x154, Size: 12]
	<int,ScreenParticleEffectData> CustomScreenEffectMap;//[Offset: 0x160, Size: 60]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x19c, Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x1a8, Size: 4]
	void StopScreenParticleEffect(byte EffectType);// 0x2716310
	void StopScreenEffect(int InKey);// 0x2716298
	void StopScreenAppearance(FString AppearanceName, bool StopFromPlayFunc);// 0x27161bc
	void StopAllScreenParticleEffect();// 0x27161a8
	void StopAllScreenAppearance();// 0x2716194
	void SetTextureParameterValue(FString AppearanceName, FName ParamName, Texture* tex);// 0x271607c
	void SetScreenParticleParam(byte EffectType, float InEffectValue);// 0x2715fc0
	void SetAppearanceActive(out const FName AppearanceName, bool bNewActive, bool bReset);// 0x2715e94
	void SetAllAppearancesActive(bool bNewActive, bool bReset);// 0x2715dc4
	void PlayScreenParticleEffect(byte EffectType, float InEffectValue);// 0x2715d08
	void PlayScreenEffect(int InKey, out const ScreenParticleEffectData InEffectData);// 0x2715b5c
	MaterialInstanceDynamic* PlayPresentScreenAppearance(FString AppearanceName);// 0x2715a70
	MaterialInstanceDynamic* PlayCustomScreenAppearance(FString AppearanceName, MaterialInterface* MatToPlay, float LifeSpan, bool HideUI);// 0x2715900
	void OnPlayScreenEffect_Internal(int InKey);// 0x2715888
	void OnAsyncLoadingFinished(int AppearancePresentIndex);// 0x2715810
	bool IsScreenAppearancePlaying(FString AppearanceName);// 0x2715778
	void HandleEffectLoadFinish(byte EffectType);// 0x2715700

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0, Size: 12]
	float LifeSpan;//[Offset: 0xc, Size: 4]
	AppearanceMatPeriodData[] PeriodParams;//[Offset: 0x10, Size: 12]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool SetDiffParamIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	AppearanceMatIndoorData[] IndoorParams;//[Offset: 0x20, Size: 12]
	bool LastIndoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x30, Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58, Size: 4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x5c, Size: 4]
	bool bHoldMatRef;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	MaterialInterface* LoadedMaterial;//[Offset: 0x64, Size: 4]

--------------------------------
Class: AppearanceMatPeriodData
	FName ParamName;//[Offset: 0x0, Size: 8]
	float HalfPeriod;//[Offset: 0x8, Size: 4]
	float CurrentTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AppearanceMatIndoorData
	FName IndoorParamName;//[Offset: 0x0, Size: 8]
	float IndoorRatio;//[Offset: 0x8, Size: 4]
	float prevValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0, Size: 4]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0, Size: 1]
	bool bUseParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	ParticleSystem* ParticleEffect;//[Offset: 0x8, Size: 40]
	FName ParticleParamName;//[Offset: 0x30, Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x38, Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x44, Size: 4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	float CurrentParamValue;//[Offset: 0x4c, Size: 4]
	bool bUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	CurveBase* Curve;//[Offset: 0x58, Size: 40]
	bool bAutoStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	float Duration;//[Offset: 0x84, Size: 4]

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x650, Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x680, Size: 48]
	Transform ScopeRelativeTransform;//[Offset: 0x6b0, Size: 48]
	void SetActivate(bool _IsActivate);// 0x2544794

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xd0, Size: 4]
	float AALOpenSensibility;//[Offset: 0xd4, Size: 4]
	float OpenAALFOV;//[Offset: 0xd8, Size: 4]
	int MaxDist;//[Offset: 0xdc, Size: 4]
	int minDist;//[Offset: 0xe0, Size: 4]
	int DangerDist;//[Offset: 0xe4, Size: 4]
	CameraModifyData ADSModify;//[Offset: 0xf0, Size: 336]
	ParticleSystem* FreeArrowParticle;//[Offset: 0x240, Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x268, Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x290, Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x294, Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x298, Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x2a0, Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x2a4, Size: 4]
	float ArrowScalePlus1;//[Offset: 0x2a8, Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x2ac, Size: 4]
	float ArrowScalePlus2;//[Offset: 0x2b0, Size: 4]
	float BeginCheckDist;//[Offset: 0x2b4, Size: 4]
	float ShortDist;//[Offset: 0x2b8, Size: 4]
	byte ChannelType;//[Offset: 0x2bc, Size: 1]
	Vector TargetLocation;//[Offset: 0x2c0, Size: 12]
	void SwitchAALCamera(bool bOpen);// 0x235c034
	void SetItemExsist(bool bExsist);// 0x235bfb4
	void SetFinalLocation();// 0x235bfa0
	void SetAALFov(bool bOpen);// 0x235bf20
	void ServerSetAirAttackLocation(Vector BeginLocation, Vector EndLocation);// 0x235bde8
	void OnFreeArrowLoadFinsh();// 0x235bdd4
	void OnCalledActorLoadFinish(Vector Location);// 0x235bd54
	float GetTargetDistance();// 0x235bd2c
	bool GetAALAvaliable();// 0x235bd04

--------------------------------
Class: CameraModifyData
	FName ModifyName;//[Offset: 0x0, Size: 8]
	float LifeTime;//[Offset: 0x8, Size: 4]
	float TargetArmLength;//[Offset: 0xc, Size: 4]
	SceneComponent* AttachParentComp;//[Offset: 0x10, Size: 4]
	FName AttachSocket;//[Offset: 0x18, Size: 8]
	bool AttachKeepRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	Transform AttachRelativeTransform;//[Offset: 0x30, Size: 48]
	bool bModifyAttachRelativeLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	Vector AttachRelativeLocation;//[Offset: 0x64, Size: 12]
	float RelativeLocationOffsetInterpSpeed;//[Offset: 0x70, Size: 4]
	bool OverrideSocketOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	Vector SocketOffset;//[Offset: 0x78, Size: 12]
	bool bEnableModifySocketOffetZViaPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	Vector2D SocketOffetPitchMapZOffset;//[Offset: 0x88, Size: 8]
	Vector2D SocketOffetPitchRange;//[Offset: 0x90, Size: 8]
	bool OverrideTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	Vector TargetOffset;//[Offset: 0x9c, Size: 12]
	Rotator DesiredRotationOffset;//[Offset: 0xa8, Size: 12]
	float ProbeSize;//[Offset: 0xb4, Size: 4]
	bool bModifySpringArmUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb8, Size: 1]
	bool bSpringArmUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb8, Size: 1]
	bool bModifyDoCollisionTest;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb8, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb8, Size: 1]
	bool bModifyEnableCameraLag;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb8, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb8, Size: 1]
	bool bModifyEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb8, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb8, Size: 1]
	bool bModifyUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb9, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb9, Size: 1]
	float CameraLagSpeed;//[Offset: 0xbc, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0xc0, Size: 4]
	bool bModifyShouldTraceArmOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 1]
	bool bShouldTraceArmOrigin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 1]
	float ArmLengthInterpSpeed;//[Offset: 0xc8, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0xcc, Size: 4]
	float SocketOffsetInterpSpeed;//[Offset: 0xd0, Size: 4]
	float DesiredRotationOffsetInterpSpeed;//[Offset: 0xd4, Size: 4]
	bool bModifyCameraUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 1]
	bool bCameraUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 1]
	float FieldOfView;//[Offset: 0xdc, Size: 4]
	Vector SpringArmRelativeScale3D;//[Offset: 0xe0, Size: 12]
	Transform CameraAdditiveOffset;//[Offset: 0xf0, Size: 48]
	float FieldOfViewInterpSpeed;//[Offset: 0x120, Size: 4]
	Rotator CameraRotOffset;//[Offset: 0x124, Size: 12]
	float CameraRotOffsetInterpSpeed;//[Offset: 0x130, Size: 4]
	enum OperateType;//[Offset: 0x134, Size: 1]
	FName[] ExclusionDataNames;//[Offset: 0x138, Size: 12]
	FName[] SameGroupDataNames;//[Offset: 0x144, Size: 12]

--------------------------------
Class: AirAttackLocatorCalledActor.Actor.Object
	float DestoryTime;//[Offset: 0x2e4, Size: 4]
	float AirAttackDelayTime;//[Offset: 0x2e8, Size: 4]
	int IconID;//[Offset: 0x2ec, Size: 4]
	float AttackAreaRadius;//[Offset: 0x2f0, Size: 4]

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor*[] CollisionIgnoreActors;//[Offset: 0x748, Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 1]
	void AddCollisionIgnoreActor(Actor* IgnoreActor);// 0x242ff54

--------------------------------
Class: STParachuteCloudData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	ParticleSystem* CloudFastAsset;//[Offset: 0x4, Size: 4]
	ParticleSystem* CloudSlowAsset;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0, Size: 64]
	SceneComponent* ParentComp;//[Offset: 0x40, Size: 4]
	FName ParentSocketName;//[Offset: 0x48, Size: 8]
	float TargetArmLength;//[Offset: 0x54, Size: 4]
	Vector SocketOffset;//[Offset: 0x58, Size: 12]
	Vector TargetOffset;//[Offset: 0x64, Size: 12]
	Transform RelativeTransform;//[Offset: 0x70, Size: 48]
	float ProbeSize;//[Offset: 0xa0, Size: 4]
	byte ProbeChannel;//[Offset: 0xa4, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	float CameraLagSpeed;//[Offset: 0xac, Size: 4]
	enum PerspectiveMode;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: CameraParams
	Transform RelativeTransform;//[Offset: 0x0, Size: 48]
	float FieldOfView;//[Offset: 0x30, Size: 4]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: AngledSightRepData
	byte AngledSightType;//[Offset: 0x0, Size: 1]
	bool IsOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: ActicityDisallowedData
	enum[] DisallowedStates;//[Offset: 0x0, Size: 12]
	int ActivityID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WarteringAreaCPP.UAERegionActor.Actor.Object
	delegate OnPlayerBeforeAttachedToThisDelegate;//[Offset: 0x338, Size: 12]
	delegate OnPlayerAttachedToThisDelegate;//[Offset: 0x344, Size: 12]
	delegate OnPlayerDettachedFromThisDelegate;//[Offset: 0x350, Size: 12]
	delegate OnBattleResult;//[Offset: 0x35c, Size: 12]
	bool bModifyCharacterMeshTrans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool bForceSkipCharacterMeshRotCheckWhenHasThisMiniTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	bool bCanEnterVehicleWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 1]
	bool bCanPickUpWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b, Size: 1]
	BunnyDanceSyncData DanceTimeStamp;//[Offset: 0x36c, Size: 12]
	float CurrentScale;//[Offset: 0x378, Size: 4]
	int CurActTime;//[Offset: 0x37c, Size: 4]
	PlayerController*[] PlayerCDTable;//[Offset: 0x380, Size: 12]
	bool bIsInMasterCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	FName SocketBaseTags;//[Offset: 0x390, Size: 8]
	float CurrentCarouselRotationAccel;//[Offset: 0x398, Size: 4]
	float CurrentCarouselRotation;//[Offset: 0x39c, Size: 4]
	int CurrentInteractingPlayerCount;//[Offset: 0x3a0, Size: 4]
	int PlayerNumberForTriggerEvent;//[Offset: 0x3a4, Size: 4]
	SocketAttachmentInternalData[] OccupiedSockets;//[Offset: 0x3a8, Size: 12]
	SocketAttachmentNameTable[] SocketNames;//[Offset: 0x3b4, Size: 12]
	int AttachedNumber;//[Offset: 0x3c4, Size: 4]
	<SceneComponent*,int> SkeletalMeshAttachCounter;//[Offset: 0x3c8, Size: 60]
	SkeletalAnimationSyncData[] SkeletalAnimationSyncData;//[Offset: 0x404, Size: 12]
	SkeletalAnimationSyncData[] PrevSkeletalAnimationSyncData;//[Offset: 0x410, Size: 12]
	Vector[] DropOffLocations;//[Offset: 0x41c, Size: 12]
	enum DropOffLocationType;//[Offset: 0x428, Size: 1]
	bool bDropOffRelativeUseLocationOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	int AssociatedSkillIndex;//[Offset: 0x42c, Size: 4]
	STExtraBaseCharacter*[] AttachedPlayers;//[Offset: 0x430, Size: 12]
	byte IsDayTime;//[Offset: 0x43c, Size: 1]
	bool bSimAnimUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d, Size: 1]
	bool ShowRabbitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43e, Size: 1]
	Pawn*[] PawnDoneList;//[Offset: 0x440, Size: 12]
	bool bUseSkinWeightProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	bool bUseFixedDropPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 1]
	enum FixedDropOffLocationType;//[Offset: 0x44e, Size: 1]
	Vector[] FixedRelativeDropPositions;//[Offset: 0x450, Size: 12]
	enum InteractiveObjectType;//[Offset: 0x45c, Size: 1]
	bool bCanBePicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 1]
	bool UseDropFixedPosition();// 0x27bf298
	void StopDancing_Multicast(const Actor*[] Players);// 0x27bf1d0
	void StartDancing_Multicast(int MontageIndex, const Actor*[] Players);// 0x27bf0c0
	void SpawnTreeParticleCPP_Multicast(PlayerController* PlayerController);// 0x27bf00c
	static void SetupMinimapDisplay(UAEPlayerController* pController, out const LoveTreeData[] treeData);// 0x27bef30
	void SetCDFlagByPC(PlayerController* PlayerController);// 0x27beeb8
	void ServerDoWaterLogic(PlayerController* PlayerController, FString ExMsg);// 0x46f6b154
	void ResetPCByTime(PlayerController* PlayerController, float CDTime);// 0x27bedfc
	void OnTimeStampRep(out const BunnyDanceSyncData SyncData);// 0x27bed58
	void OnStopDancing(out const Actor*[] Players);// 0x25b6d74
	void OnStartDancing(int MontageIndex, out const Actor*[] Players);// 0x27bec6c
	void OnSpawnTreeParticleCPP(PlayerController* PlayerController);// 0x27bebec
	void OnSkeletalAnimationSyncData(out const SkeletalAnimationSyncData InSkeletalAnimationSyncData);// 0x46f6b154
	void OnSkeletalAnimationStateChanged(SceneComponent* AttachedComponent, bool bShouldStartAnimation);// 0x46f6b154
	void OnRep_TimeStamp(out const BunnyDanceSyncData SyncData);// 0x27beb50
	void OnRep_SkeletalAnimationSyncData();// 0x27beb3c
	void OnRep_ShowRabbitAnim();// 0x23444bc
	void OnRep_PawnDoneList();// 0x23444f4
	void OnRep_IsDayTime();// 0x23c70dc
	void OnRep_CurrentScaleCPP();// 0x27beb28
	void OnRep_CurrentScaleBP();// 0x46f6b154
	void OnRep_CurrentInteractingPlayerCount();// 0x27bead4
	void OnRep_CurActTimeCPP();// 0x27bea80
	void OnRep_CurActTimeBP();// 0x46f6b154
	void OnRep_AttachedNumber();// 0x27bea20
	void OnPlayersDance(out const Actor*[] Players, int MontageIndex, float JoinTime);// 0x27be8ec
	void OnPlayerNumberChanged(int Number);// 0x46f6b154
	void OnPlayerDettachedFromThisDelegate__DelegateSignature(STExtraCharacter* Player);// 0x46f6b154
	void OnPlayerDetached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x46f6b154
	void OnPlayerBeforeAttachedToThisDelegate__DelegateSignature(STExtraCharacter* Player);// 0x46f6b154
	void OnPlayerAttachedToThisDelegate__DelegateSignature(STExtraCharacter* Player);// 0x46f6b154
	void OnPlayerAttached(Actor* AttachedPlayer, SceneComponent* AttachedComponent);// 0x46f6b154
	void OnPCCDCleared(PlayerController* PlayerController);// 0x46f6b154
	void OnClientCurrentInteractingPlayerCountChanged();// 0x46f6b154
	void OnBattleResult__DelegateSignature();// 0x46f6b154
	bool IsDropFixedRelativePositionSetUp();// 0x27be8bc
	bool GetIsPCInCD(PlayerController* PlayerController);// 0x27be83c
	Vector GetDropFixedRelativePosition(Actor* DropOwner);// 0x27be7a4
	STExtraBaseCharacter*[] GetAttachedPlayers();// 0x27be710
	void DispatchPlayerDance_Multicast(const Actor*[] Players, int MontageIndex, float JoinTime);// 0x27be5b8
	bool CanTriggertEvent(Pawn* CurPawn);// 0x46f6b154
	int CacheAssociatedSkillIndex();// 0x46f6b154

--------------------------------
Class: UAERegionActor.Actor.Object
	bool bStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	enum RegionSize;//[Offset: 0x2e9, Size: 1]
	bool bNeedUpdateNetworkInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ea, Size: 1]
	void ToggleRegionID(bool bOn);// 0x2fddad8

--------------------------------
Class: BunnyDanceSyncData
	int CurrentIndex;//[Offset: 0x0, Size: 4]
	bool bIsDancing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float TimeStamp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: SocketAttachmentInternalData
	FName SocketName;//[Offset: 0x0, Size: 8]
	SceneComponent* SocketBase;//[Offset: 0x8, Size: 4]
	Actor* AttachedPlayer;//[Offset: 0xc, Size: 4]
	Vector OffsetLoc;//[Offset: 0x10, Size: 12]
	Rotator OffsetRot;//[Offset: 0x1c, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x28, Size: 4]
	bool bFemaleUseDiffAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	AnimMontage* FemaleAnimMontage;//[Offset: 0x30, Size: 4]

--------------------------------
Class: SocketAttachmentNameTable
	FName SocketName;//[Offset: 0x0, Size: 8]
	Vector OffsetLoc;//[Offset: 0x8, Size: 12]
	Rotator OffsetRot;//[Offset: 0x14, Size: 12]
	AnimMontage* AnimMontage;//[Offset: 0x20, Size: 4]
	bool bFemaleUseDiffAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	AnimMontage* FemaleAnimMontage;//[Offset: 0x28, Size: 4]

--------------------------------
Class: SkeletalAnimationSyncData
	SceneComponent* SocketBase;//[Offset: 0x0, Size: 4]
	bool Status;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: LoveTreeData
	int ID;//[Offset: 0x0, Size: 4]
	Vector Loc;//[Offset: 0x4, Size: 12]
	float minRate;//[Offset: 0x10, Size: 4]
	float maxRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PawnChooserData
	bool MasterSwitchOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString[] EnabledGameModeID;//[Offset: 0x4, Size: 12]
	float DetectAngle;//[Offset: 0x10, Size: 4]
	Rotator RotationOffset;//[Offset: 0x14, Size: 12]
	class Actor[] Classes;//[Offset: 0x20, Size: 12]
	Vector LocationOffset;//[Offset: 0x2c, Size: 12]
	float DetectRaduis;//[Offset: 0x38, Size: 4]
	float TickInterval;//[Offset: 0x3c, Size: 4]
	bool EnableDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool IsConsideringVehicleBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	float HorizontalTestRatio;//[Offset: 0x44, Size: 4]
	float VerticalCoverRatio;//[Offset: 0x48, Size: 4]
	bool DEBUGMODE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool isSelectUIShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	ChooserActorInfo[] PreChooserInfos;//[Offset: 0x60, Size: 12]
	bool isDebugTrainingUIBP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]

--------------------------------
Class: ChooserActorInfo
	Actor* ChooseActor;//[Offset: 0x0, Size: 4]
	int ChooseDistance;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ActivityAnimationRepData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PartyDanceStateData
	enum DanceState;//[Offset: 0x0, Size: 1]
	SoftObjectPath Montage;//[Offset: 0x8, Size: 24]

--------------------------------
Class: PartyDance
	AnimMontage* MontageToPlay;//[Offset: 0x0, Size: 40]
	AnimMontage* MontageToPlay_FPP;//[Offset: 0x28, Size: 40]
	<int,AnimMontage*> ItemMontageMap;//[Offset: 0x50, Size: 60]
	<int,AnimMontage*> ItemMontageMap_FPP;//[Offset: 0x8c, Size: 60]

--------------------------------
Class: PlayerRoleCacheFrameData

--------------------------------
Class: PlayerSecurityInfoCollector.ActorComponent.Object
	int[] EnergyItemIDList;//[Offset: 0xfc, Size: 12]
	int[] EnergySpeedUpPhaseIndexList;//[Offset: 0x108, Size: 12]
	bool bEnableDetailFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool bEnableDetailHurtFlowLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	ClientCircleFlow CurCircleFlow;//[Offset: 0x118, Size: 228]
	ClientCircleFlow CollectCircleFlow;//[Offset: 0x1fc, Size: 228]
	HurtFlow CurHurtFlow;//[Offset: 0x2e0, Size: 256]
	ClientJumpFlow JumpFlow;//[Offset: 0x3e0, Size: 152]
	ClientSecPlayerKillFlow SecPlayerKillFlow;//[Offset: 0x478, Size: 80]
	float ReportJoyStickInterval;//[Offset: 0x594, Size: 4]
	bool bFatalDamageNeedResetHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	void StartOnPlane();// 0x2578bb8
	void PlayerCanJump();// 0x2578ba4
	void HandleSyncCircleInfo(int Index);// 0x2578b2c
	void HandleCharacterSafeZoneTips(float SafeZoneTime);// 0x2578ab4
	void HandleCharacterCircleWaveOver(int Index);// 0x2578a3c
	void HandleCharacterCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x2578914
	void HandleCharacterBlueCircleRun(float BlueCircleRunTime);// 0x257889c
	void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);// 0x2578824
	void HandleCharacterAttrChangedWithDetail(Actor* nowActor, FString AttrName, float ValueDelta, float ResultValue);// 0x25786c4
	void ExitParachute();// 0x25786b0
	void EnterParachute();// 0x257869c
	void EnterJumping();// 0x2578688

--------------------------------
Class: ClientCircleFlow
	uint32 ClientStartTime;//[Offset: 0x0, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x4, Size: 12]
	FString PicUrl;//[Offset: 0x10, Size: 12]
	uint32 GameStartTime;//[Offset: 0x1c, Size: 4]
	uint16 NewCircleBornTime;//[Offset: 0x20, Size: 2]
	int NewCirclePositionX;//[Offset: 0x24, Size: 4]
	int NewCirclePositionY;//[Offset: 0x28, Size: 4]
	int NewCirclePositionRadius;//[Offset: 0x2c, Size: 4]
	int8 NewCircleCount;//[Offset: 0x30, Size: 1]
	int PlayerPositionX;//[Offset: 0x34, Size: 4]
	int PlayerPositionY;//[Offset: 0x38, Size: 4]
	int PlayerPositionZ;//[Offset: 0x3c, Size: 4]
	int PlayerHP;//[Offset: 0x40, Size: 4]
	uint16 OldCircleMoveTime;//[Offset: 0x44, Size: 2]
	uint16 OldCircleMoveEndTime;//[Offset: 0x46, Size: 2]
	uint16 PlayerOutTime;//[Offset: 0x48, Size: 2]
	byte CirclePoisonCount;//[Offset: 0x4a, Size: 1]
	int16 CirclePoisonMin;//[Offset: 0x4c, Size: 2]
	int16 CirclePoisonMax;//[Offset: 0x4e, Size: 2]
	int16 CirclePoisonAvg;//[Offset: 0x50, Size: 2]
	int16 CirclePoisonTotal;//[Offset: 0x52, Size: 2]
	byte CirclePoisonDrop;//[Offset: 0x54, Size: 1]
	byte CirclePoisonDead;//[Offset: 0x55, Size: 1]
	byte RecoveryCount;//[Offset: 0x56, Size: 1]
	int RecoveryMin;//[Offset: 0x58, Size: 4]
	int RecoveryMax;//[Offset: 0x5c, Size: 4]
	int RecoveryTotal;//[Offset: 0x60, Size: 4]
	int8 EnergyRecoveryCount;//[Offset: 0x64, Size: 1]
	int EnergyRecoveryMin;//[Offset: 0x68, Size: 4]
	int EnergyRecoveryMax;//[Offset: 0x6c, Size: 4]
	int EnergyRecoveryTotal;//[Offset: 0x70, Size: 4]
	int8 EnergyStartLv;//[Offset: 0x74, Size: 1]
	uint16 EnergyStartTime;//[Offset: 0x76, Size: 2]
	FString EnergyItemUse;//[Offset: 0x78, Size: 12]
	uint16 EnergyLvTimeInfo;//[Offset: 0x84, Size: 2]
	FString EnergyRunFastTime;//[Offset: 0x88, Size: 12]
	FString EnergyRecoveryLvTimeInfo;//[Offset: 0x94, Size: 12]
	int8 EnergyEndLv;//[Offset: 0xa0, Size: 1]
	uint16 EnergyEndTime;//[Offset: 0xa2, Size: 2]
	int PlayerMoveDis;//[Offset: 0xa4, Size: 4]
	uint16 PlayerSpeedMax;//[Offset: 0xa8, Size: 2]
	uint16 PlayerSpeedAvg;//[Offset: 0xaa, Size: 2]
	uint16 PlayerCarSpeedMax;//[Offset: 0xac, Size: 2]
	uint16 PlayerCarSpeedAvg;//[Offset: 0xae, Size: 2]
	int PlayerSquatMoveDis;//[Offset: 0xb0, Size: 4]
	uint16 PlayerSquatMoveTime;//[Offset: 0xb4, Size: 2]
	int PlayerCreepMoveDis;//[Offset: 0xb8, Size: 4]
	uint16 PlayerCreepMoveTime;//[Offset: 0xbc, Size: 2]
	int PlayerRunMoveDis;//[Offset: 0xc0, Size: 4]
	uint16 PlayerRunMoveTime;//[Offset: 0xc4, Size: 2]
	int PlayerDriveMoveDis;//[Offset: 0xc8, Size: 4]
	uint16 PlayerDriveMoveTime;//[Offset: 0xcc, Size: 2]
	byte PlayerCar;//[Offset: 0xce, Size: 1]
	uint16 PlayerCameraDistanceMax;//[Offset: 0xd0, Size: 2]
	byte SecCircleFlowID;//[Offset: 0xd2, Size: 1]
	byte AutoAimType;//[Offset: 0xd3, Size: 1]
	uint16 AutoAimTime;//[Offset: 0xd4, Size: 2]
	byte[] MrpcsFlowData;//[Offset: 0xd8, Size: 12]

--------------------------------
Class: HurtFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 PlatID;//[Offset: 0x30, Size: 1]
	int8 AreaID;//[Offset: 0x31, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int8 MrpcsFlowcount_;//[Offset: 0x50, Size: 1]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString EnemyOpenID;//[Offset: 0x7c, Size: 12]
	FString EnemyUserName;//[Offset: 0x88, Size: 12]
	uint64 EnemyRoleID;//[Offset: 0x98, Size: 8]
	int EnemyRoleType;//[Offset: 0xa0, Size: 4]
	uint32 HurtTime;//[Offset: 0xa4, Size: 4]
	int HurtType;//[Offset: 0xa8, Size: 4]
	int HitType;//[Offset: 0xac, Size: 4]
	int DamageStart;//[Offset: 0xb0, Size: 4]
	int DamageReduce;//[Offset: 0xb4, Size: 4]
	int ArmorDef;//[Offset: 0xb8, Size: 4]
	int HPstart;//[Offset: 0xbc, Size: 4]
	int HPEnd;//[Offset: 0xc0, Size: 4]
	int ArmorHPStart1;//[Offset: 0xc4, Size: 4]
	int ArmorHPEnd1;//[Offset: 0xc8, Size: 4]
	int ArmorHPStart2;//[Offset: 0xcc, Size: 4]
	int ArmorHPEnd2;//[Offset: 0xd0, Size: 4]
	int CarHPStart;//[Offset: 0xd4, Size: 4]
	int CarHPEnd;//[Offset: 0xd8, Size: 4]
	int FallHeight;//[Offset: 0xdc, Size: 4]
	int HypoxiaTime;//[Offset: 0xe0, Size: 4]
	int HypoxiaHurtTotal;//[Offset: 0xe4, Size: 4]
	int PlayerKilled;//[Offset: 0xe8, Size: 4]
	int ArmorKill;//[Offset: 0xec, Size: 4]
	int CarKill;//[Offset: 0xf0, Size: 4]
	int IfIsAI;//[Offset: 0xf4, Size: 4]
	uint32 HurtFlowID;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: ClientJumpFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x8, Size: 12]
	FString MapName;//[Offset: 0x14, Size: 12]
	int8 WeatherID;//[Offset: 0x20, Size: 1]
	int64 GameStartTime;//[Offset: 0x28, Size: 8]
	uint32 StartJumpTime;//[Offset: 0x30, Size: 4]
	uint32 EndJumpTime;//[Offset: 0x34, Size: 4]
	uint32 PlayerJumpTime;//[Offset: 0x38, Size: 4]
	uint32 PlayerOpenTime;//[Offset: 0x3c, Size: 4]
	uint32 PlayerLandTime;//[Offset: 0x40, Size: 4]
	int PlayerJumpPositionX;//[Offset: 0x44, Size: 4]
	int PlayerJumpPositionY;//[Offset: 0x48, Size: 4]
	int PlayerJumpPositionZ;//[Offset: 0x4c, Size: 4]
	int PlaneJumpPositionX;//[Offset: 0x50, Size: 4]
	int PlaneJumpPositionY;//[Offset: 0x54, Size: 4]
	int PlaneJumpPositionZ;//[Offset: 0x58, Size: 4]
	int PlayerLandPositionX;//[Offset: 0x5c, Size: 4]
	int PlayerLandPositionY;//[Offset: 0x60, Size: 4]
	int PlayerLandPositionZ;//[Offset: 0x64, Size: 4]
	uint32 PlayerLandDistance;//[Offset: 0x68, Size: 4]
	uint32 PlayerSpeedMax1;//[Offset: 0x6c, Size: 4]
	uint32 PlayerSpeedMax2;//[Offset: 0x70, Size: 4]
	FString GVoiceTeamID;//[Offset: 0x74, Size: 12]
	FString GVoiceRoomID;//[Offset: 0x80, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x8c, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x90, Size: 4]

--------------------------------
Class: ClientSecPlayerKillFlow
	int64 ClientStartTime;//[Offset: 0x0, Size: 8]
	int8 SecPlayerKillFlowID;//[Offset: 0x8, Size: 1]
	int GunID;//[Offset: 0xc, Size: 4]
	uint32 KilledPlayerKey;//[Offset: 0x10, Size: 4]
	RecoilInfo RecoilInfo;//[Offset: 0x14, Size: 54]

--------------------------------
Class: RecoilInfo
	int16 VerticalRecoilMin;//[Offset: 0x0, Size: 2]
	int16 VerticalRecoilMax;//[Offset: 0x2, Size: 2]
	int16 VerticalRecoilVariation;//[Offset: 0x4, Size: 2]
	int16 VerticalRecoveryModifier;//[Offset: 0x6, Size: 2]
	int16 VerticalRecoveryClamp;//[Offset: 0x8, Size: 2]
	int16 VerticalRecoveryMax;//[Offset: 0xa, Size: 2]
	int16 LeftMax;//[Offset: 0xc, Size: 2]
	int16 RightMax;//[Offset: 0xe, Size: 2]
	int16 HorizontalTendency;//[Offset: 0x10, Size: 2]
	int16 BulletPerSwitch;//[Offset: 0x12, Size: 2]
	int16 TimePerSwitch;//[Offset: 0x14, Size: 2]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	int16 RecoilSpeedVertical;//[Offset: 0x18, Size: 2]
	int16 RecoilSpeedHorizontal;//[Offset: 0x1a, Size: 2]
	int16 RecovertySpeedVertical;//[Offset: 0x1c, Size: 2]
	int16 RecoilValueClimb;//[Offset: 0x1e, Size: 2]
	int16 RecoilValueFail;//[Offset: 0x20, Size: 2]
	int16 RecoilModifierStand;//[Offset: 0x22, Size: 2]
	int16 RecoilModifierCrouch;//[Offset: 0x24, Size: 2]
	int16 RecoilModifierProne;//[Offset: 0x26, Size: 2]
	int16 RecoilHorizontalMinScalar;//[Offset: 0x28, Size: 2]
	int16 BurstEmptyDelay;//[Offset: 0x2a, Size: 2]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	int16 ShootSightReturnSpeed;//[Offset: 0x2e, Size: 2]
	int16 AccessoriesVRecoilFactor;//[Offset: 0x30, Size: 2]
	int16 AccessoriesHRecoilFactor;//[Offset: 0x32, Size: 2]
	int16 AccessoriesRecoveryFactor;//[Offset: 0x34, Size: 2]

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialSpriteElement[] Elements;//[Offset: 0x550, Size: 12]
	void SetElements(out const MaterialSpriteElement[] NewElements);// 0x49ee154
	void AddElement(MaterialInterface* Material, CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, CurveFloat* DistanceToSizeCurve);// 0x49edf70

--------------------------------
Class: MaterialSpriteElement
	MaterialInterface* Material;//[Offset: 0x0, Size: 4]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x4, Size: 4]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float BaseSizeX;//[Offset: 0xc, Size: 4]
	float BaseSizeY;//[Offset: 0x10, Size: 4]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x14, Size: 4]

--------------------------------
Class: CustomVoiceGroup
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	Vector VoicePosition;//[Offset: 0x4, Size: 12]
	int ID;//[Offset: 0x10, Size: 4]

--------------------------------
Class: CharacterFlyingComponent.ActorComponent.Object
	float AddForceWeaken;//[Offset: 0xfc, Size: 4]
	bool bFlyingSimulateUpdown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	float UpdownDeltaZOffset;//[Offset: 0x104, Size: 4]
	float UpdownDeltaZOffsetMax;//[Offset: 0x108, Size: 4]
	enum[] EnterNotAllowedStateList;//[Offset: 0x10c, Size: 12]
	enum[] FlyingNotAllowedStateList;//[Offset: 0x118, Size: 12]
	bool bFlyingStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	bool bFlyingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131, Size: 1]
	Vector_NetQuantize100 FlyingMoveVelocity;//[Offset: 0x134, Size: 12]
	bool bIgnoreMoveWhenConflictInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int bAddforceUpOrDown;//[Offset: 0x144, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x158, Size: 4]
	float HorizontalSpeedModifier;//[Offset: 0x15c, Size: 4]
	float VerticalSpeedModifier;//[Offset: 0x160, Size: 4]
	delegate OnFlyingMoveEnd;//[Offset: 0x164, Size: 12]
	bool bSimulateCheckWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool bSimulateMoveSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	bool bAllowSmoothCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x172, Size: 1]
	bool bAllowSmoothInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x173, Size: 1]
	float SmoothNetUpdateTime;//[Offset: 0x174, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x178, Size: 4]
	float MaxAllowPositionDistanceSqAtAutonomousClient;//[Offset: 0x17c, Size: 4]
	float MaxAllowPositionToleranceAtSimulateClient;//[Offset: 0x180, Size: 4]
	float MaxAllowRotationToleranceAtSimulateClient;//[Offset: 0x184, Size: 4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0x188, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x18c, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x190, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x194, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x198, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x19c, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x1a0, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x1a4, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x1a8, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x1ac, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x1b0, Size: 4]
	float DifferencePitchBetweenCharcterAndCamera;//[Offset: 0x1b4, Size: 4]
	bool bOpenSimulateTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	STFlyingMoveState STReplicateFlyingMoveState;//[Offset: 0x1bc, Size: 60]
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, out const Rotator ControlRotation);// 0x2407d00
	void UpdateFlyingMoveState(float DeltaTime, float ThrottleInput, float SteerInput, out const Rotator ControlRotation);// 0x2407bac
	void UpdateFlyingJoystickSensitivity(float FlyingJoystickSensitivity);// 0x2407b34
	void UpdateFlyingAccurateMoveComponent(float DeltaTime);// 0x2407abc
	void SetMaxRightSpeed(float MaxRightSpeed);// 0x2407a48
	void SetMaxForwardSpeed(float MaxForwardSpeed);// 0x24079d4
	void ServerUpdateState(float TimeStamp, float InThrottleInput, float InSteeringInput, const Vector ClientLoc, const Rotator ControlRotation);// 0x24077f8
	bool ServerStartFlying(float FallingTime, Vector DestPosition);// 0x2407720
	bool ServerPauseFlying();// 0x24076f8
	void ServerEnterFlyingState(bool bEnter, bool bSetParachuteAnim);// 0x2407628
	void PostNetReceiveNewState();// 0x2407614
	void PlayerAddImpulse(Vector Impulse, bool bVelocityChange);// 0x2407540
	void PlayerAddForce(bool bAdd, Vector Force);// 0x2407464
	void OnRep_ReplicatedFlyingMoveState();// 0x2407450
	void OnRep_bFlyingStart();// 0x240743c
	void OnPreReconnectOnServer();// 0x2407428
	void OnPlayerExitParachute(STExtraPlayerCharacter* Character);// 0x24073b0
	void NotifyServerAddforceUpOrDown(int bUpOrDown);// 0x24072fc
	void NotifyPlayerSimulateUpdown(bool bUpdown, float DeltaZOffset, float DeltaZOffsetMax);// 0x24071f0
	void NotifyPlayerFlyingMove(bool bMove, Vector Velocity, bool bIgnoreWhenConflictInput);// 0x24070c8
	void NotifyPlayerEnterFlying(bool bEnter, float FlyingJoystickSensitivity);// 0x2407000
	void ModifyFlyingDisabledState(bool bMergeOrRemove, enum[] PawnStateList);// 0x2406ecc
	bool IsFlying();// 0x2406eb0
	void GMServerStartFlying(float FallingTime, Vector DestPosition);// 0x2406d9c
	float GetReplicatedRightInput();// 0x2406d74
	float GetReplicatedForwardInput();// 0x2406d4c
	void ClientStartFlying(float FallingTime, Vector StartPosition, Vector DestPosition);// 0x2406bcc
	void ClientPauseFlying();// 0x2406b70
	void ClientEnterFlyingState(bool bEnter);// 0x2406aa8
	void ClientAjustPosition(const Vector ServerLoc, const Rotator ServerRotation);// 0x24069ac

--------------------------------
Class: STFlyingMoveState
	bool bIsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ThrottleInput;//[Offset: 0x4, Size: 4]
	float SteerInput;//[Offset: 0x8, Size: 4]
	Rotator ControlRotation;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize100 Location;//[Offset: 0x18, Size: 12]
	Rotator Rotation;//[Offset: 0x24, Size: 12]
	Vector_NetQuantize100 Velocity;//[Offset: 0x30, Size: 12]

--------------------------------
Class: SyncPersionalOPInfo
	int UniqueIndex;//[Offset: 0x0, Size: 4]
	byte OPType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PlayerTombBox.Actor.Object
	int DefaultObjectPoolSize;//[Offset: 0x35c, Size: 4]
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x360, Size: 12]
	float CustomPickUpRadius;//[Offset: 0x36c, Size: 4]
	FName tombName;//[Offset: 0x370, Size: 8]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x380, Size: 4]
	FString TombPlayerUID;//[Offset: 0x384, Size: 12]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x390, Size: 4]
	int DeadTime;//[Offset: 0x394, Size: 4]
	int BoxLifeSpan;//[Offset: 0x398, Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	Actor* AttachedActor;//[Offset: 0x3a0, Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	enum BoxType;//[Offset: 0x3a5, Size: 1]
	uint32 OwnerUniqueID;//[Offset: 0x3a8, Size: 4]
	FString[] SkinResList;//[Offset: 0x3ac, Size: 12]
	bool bBoxVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	Character* BoxOwner;//[Offset: 0x3bc, Size: 4]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x3c4, Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x3cc, Size: 4]
	float TombBoxSkinAnimPlayDelay;//[Offset: 0x3d0, Size: 4]
	TombboxDeadEffect TombBoxSkinList;//[Offset: 0x3d4, Size: 92]
	FString TombBoxSkinTable;//[Offset: 0x430, Size: 12]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	int DropGroupID;//[Offset: 0x440, Size: 4]
	Vector DropStartLocation;//[Offset: 0x444, Size: 12]
	void SwitchToDeadTombBox();// 0x23c70dc
	void ShowTombBoxSkin();// 0x257cd30
	void SetVisible(bool IsVisible);// 0x257ccb4
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x257cb2c
	void RegisterToCurveAnimComponent();// 0x2423270
	void RegisterModifyItems();// 0x257cb18
	void PlayTombBoxParticle();// 0x23444d8
	void OnTombBoxResLoaded(int ReqID, FString ResName);// 0x257c9ec
	void OnRespawned();// 0x257c9d0
	void OnRep_VisibilityChange();// 0x257c9bc
	void OnRep_LoadDefaultSkin();// 0x257c9a8
	void OnRep_ChangeBoxMesh();// 0x257c994
	void OnRep_BoxType();// 0x257c980
	void OnRep_BoxPickupWrapperActor();// 0x257c96c
	void OnRep_BoxLifeSpan();// 0x257c958
	void OnRep_AttachmentReplication();// 0x2510b44
	void OnRep_AttachedActor();// 0x257c944
	void OnRemoveItemInWrapper();// 0x257c930
	void OnRecycled();// 0x2453248
	void OnOwnerPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCaster, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x257c684
	void HideDeadTombApparence();// 0x23444bc
	int GetUniqueInstanceID();// 0x257c65c
	int GetTombboxLifespan();// 0x257c634
	PickUpListWrapperActor* GetBoxPickupWrapperActor();// 0x257c608
	void GenerateTreasureBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName);// 0x257c518
	void GeneratePlayerBackpackWrappersToGround();// 0x23fe4a0
	void GeneratePlayerBackpackWrappers();// 0x257c4fc
	PickUpListWrapperActor* GenerateBoxWrappersInner(class Object WrapperClass, out const PickUpItemData[] DataList, FName BoxName, bool AttachToBox);// 0x257c308
	void GenerateBoxWrappersByPickUpItemDataList(out const PickUpItemData[] DataList, FName BoxName);// 0x257c1b8
	void GenerateBoxWrappersByItemsData(out const AirDropBoxGenerateWrapperItemData[] ItemsData, FName BoxName);// 0x257c0c8
	void GenerateAirDropBoxWrappers(out const AirDropBoxGenerateWrapperItemData[] DataList, FName AirBoxName, int AirDropBoxID);// 0x257bf94
	void CollectPlayerTombBoxDropWrapperList(out PickUpItemData[] OutItemDataList);// 0x257be90
	void ApplyTombSkin(int SkinType);// 0x257be18

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x5a4, Size: 12]
	bool bDestroyAfterEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc, Size: 1]
	enum BoxType;//[Offset: 0x5e4, Size: 1]
	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);// 0x2565880
	void RPC_Broadcast_ForceSyncAllData(const PickUpItemData[] DataList);// 0x256575c
	void OnWrapperEmptyDelegate__DelegateSignature();// 0x46f6b154
	void OnSomeonePickItemDelegate__DelegateSignature(uint32 PlayerKey);// 0x46f6b154
	void OnRep_PickUpDataList();// 0x235d4b8
	void OnPickUpDataListChangedDelegate__DelegateSignature();// 0x46f6b154
	void OnBoxEmptyDelegate__DelegateSignature(int BoxId);// 0x46f6b154
	PickUpItemData[] GetDataList();// 0x2565608
	bool FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount);// 0x23d15c4

--------------------------------
Class: PickUpWrapperActor.UAENetActor.Actor.Object
	float CustomPickUpRadius;//[Offset: 0x380, Size: 4]
	bool bDestroyStaticMeshComponentDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	ItemDefineID DefineID;//[Offset: 0x388, Size: 24]
	int Count;//[Offset: 0x3a0, Size: 4]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 1]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a7, Size: 1]
	FName OwnerName;//[Offset: 0x3a8, Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x3b0, Size: 4]
	Actor* AttachedActor;//[Offset: 0x3b4, Size: 4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x3b8, Size: 12]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x3c8, Size: 4]
	bool bUseCustomTrainingModePickUpColdCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	bool bEnableTrainingModeRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd, Size: 1]
	float TrainingModeDropLifeTime;//[Offset: 0x3d0, Size: 4]
	bool bUseRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d4, Size: 1]
	bool bForceRelevantForNetworkRepays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3dc, Size: 1]
	bool bOnRepCountInBP;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3dc, Size: 1]
	FString PedestalClassPath;//[Offset: 0x3e0, Size: 12]
	int DefaultObjectPoolSize;//[Offset: 0x3ec, Size: 4]
	StaticMeshComponent* RootMeshComp;//[Offset: 0x3f0, Size: 4]
	SoftObjectPath LightBeamConfig;//[Offset: 0x400, Size: 24]
	Vector LightBeamSpawnRelatedPosition;//[Offset: 0x418, Size: 12]
	ParticleSystemComponent* LightBeamComonent;//[Offset: 0x424, Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x444, Size: 4]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	DropGroundEffectInfo DropGroundEffectInfo;//[Offset: 0x450, Size: 128]
	DropGroundEffectInfo DropTrailEffectInfo;//[Offset: 0x4d0, Size: 128]
	ParticleSystemComponent* DropGroundEffectComp;//[Offset: 0x550, Size: 4]
	float LightBeamLiftSpan;//[Offset: 0x578, Size: 4]
	Object* TriggerHost;//[Offset: 0x588, Size: 4]
	Object* TriggerHostActor;//[Offset: 0x58c, Size: 4]
	bool bUseDropCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590, Size: 1]
	int DropGroupID;//[Offset: 0x594, Size: 4]
	Vector DropStartLocation;//[Offset: 0x598, Size: 12]
	void UpdateAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x2568d6c
	FString ToDetailString();// 0x2568cd0
	void ShowMesh(bool bShow);// 0x2568c50
	void ShowActor();// 0x2568c3c
	void SetDropLocation(bool bUseCurve, int GroupID, Vector StartLoc, Vector EndLoc);// 0x2568ab4
	void SetDefineID(out const ItemDefineID DID);// 0x2568a24
	void SetCountOnServerAfterSpawn(int _Count);// 0x25689ac
	void SetActorToGround(Actor* IgnoreActor);// 0x25688f8
	void SetActorAttachTo(Actor* TargetActor, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies, FName SocketName);// 0x25686ac
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(const BattleItemAdditionalData[] DataList);// 0x25685b8
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time, bool bPendingDestroy);// 0x25684a8
	void RegisterToCurveAnimComponent();// 0x2568494
	void ReceiveOnRep_Count();// 0x46f6b154
	void PickUpWrapperShow__DelegateSignature();// 0x46f6b154
	void PickUpWrapperHide__DelegateSignature(float InRefreshTimeStamp);// 0x46f6b154
	void PickUpWrapperDestroy__DelegateSignature();// 0x46f6b154
	void OnWrapperPickedDelegate__DelegateSignature();// 0x46f6b154
	void OnRep_DropGroundEffectInfo();// 0x2568480
	void OnRep_Count();// 0x256846c
	void OnRep_AttachedActor();// 0x2568458
	void OnPostSetActorHiddenInGame(bool bNewHidden);// 0x46f6b154
	void OnLoadDropEffectFinish(DropGroundEffectInfo effectInfo);// 0x2568210
	void OnAsyncLoadLightBeam(SoftObjectPath _softPath, bool bShowParticle);// 0x25680c8
	void ModifyData(int _Count);// 0x2568050
	void MarkIsDropedByPlayerOnServer(bool Ret, Actor* AttachTarget, PrimitiveComponent* AttachComponent);// 0x2567f44
	void LoadLightBeam(bool bShowParticle, bool bForceLight);// 0x2567e74
	int GetNetGUIDOffsetValue();// 0x2567e4c
	PickUpItemData[] GetDataList();// 0x2565608
	void ForceNetUpdate();// 0x2567e30
	bool FinishPickedUp(Actor* OwnerTarget, int AdditionalParam, int pickCount);// 0x23d15c4
	bool CheckPickUpDataIsWeapon();// 0x2567e08
	void BPOnRespawned();// 0x46f6b154
	void BPOnRecycled();// 0x46f6b154
	void BPDoPickUp(Actor* PickUpOwner, int AdditionalParam, int pickCount);// 0x46f6b154
	void AddToRegionBasedNetConsideration();// 0x2567df4
	void AddAdditionalDataListOnServerAfterSpawn(BattleItemAdditionalData[] DataList);// 0x2567c54

--------------------------------
Class: UAENetActor.Actor.Object

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0, Size: 24]
	int Count;//[Offset: 0x18, Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c, Size: 12]
	int InstanceID;//[Offset: 0x28, Size: 4]

--------------------------------
Class: DropGroundEffectInfo
	float GroundEffectLifeSpan;//[Offset: 0x0, Size: 4]
	Transform EffectTransform;//[Offset: 0x10, Size: 48]
	ParticleSystem* GroundEffect;//[Offset: 0x40, Size: 40]
	FString EffectPath;//[Offset: 0x68, Size: 12]
	bool bShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75, Size: 1]
	bool bEffectActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76, Size: 1]

--------------------------------
Class: TombboxDeadEffect
	ParticleSystem* DeadBoxSmokeEffect;//[Offset: 0x0, Size: 4]
	ParticleSystem* DeadBoxTwinkleEffect;//[Offset: 0x4, Size: 4]
	<int,ItemTombParticle> ItemEffect;//[Offset: 0x8, Size: 60]
	StaticMesh* DeadBoxMesh;//[Offset: 0x44, Size: 4]
	SkeletalMesh* DeadBoxAnimMesh;//[Offset: 0x48, Size: 4]
	class Object* DeadBoxAnimInstanceClass;//[Offset: 0x4c, Size: 4]
	AnimMontage* DeadBoxAnimMontage;//[Offset: 0x50, Size: 4]
	ParticleSystemComponent* SmokeParticle;//[Offset: 0x54, Size: 4]
	ParticleSystemComponent* TwinkleParticle;//[Offset: 0x58, Size: 4]

--------------------------------
Class: ItemTombParticle
	ParticleSystem* SoftPS;//[Offset: 0x0, Size: 40]
	ParticleSystemComponent* PS;//[Offset: 0x28, Size: 4]

--------------------------------
Class: AirDropBoxGenerateWrapperItemData
	class PickUpWrapperActor* WrapperClass;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraAnimInstance.STExtraAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	Rotator C_SightAngledRotOffset;//[Offset: 0x10a8, Size: 12]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b4, Size: 1]
	bool C_IsPickingUpItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b5, Size: 1]
	Rotator SwimRotate;//[Offset: 0x10b8, Size: 12]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c4, Size: 1]
	float C_HoldingShieldAlpha;//[Offset: 0x10c8, Size: 4]
	AnimMontage* C_FreeFallingStartMontage;//[Offset: 0x10cc, Size: 4]
	AnimMontage* C_PickUPMontage;//[Offset: 0x10d0, Size: 4]
	AnimMontage* C_RevivalMontage;//[Offset: 0x10d4, Size: 4]
	Rotator OwnerAimRotation;//[Offset: 0x10d8, Size: 12]
	Rotator LastOwnerAimRotation;//[Offset: 0x10e4, Size: 12]
	MutexPair[] mutexByList;//[Offset: 0x10f0, Size: 12]
	float StandbyAnimTimeInterval_Config;//[Offset: 0x1100, Size: 4]
	enum[] StandbyAnimPawnStateExclusion;//[Offset: 0x1108, Size: 12]
	<int,AnimTypeArray> StandyAnimType;//[Offset: 0x1114, Size: 60]
	enum[] StandbyGameModeType;//[Offset: 0x1150, Size: 12]
	enum[] AllowStandbyAnimWeaponTypes;//[Offset: 0x115c, Size: 12]
	int CurMapID;//[Offset: 0x1170, Size: 4]
	AnimMontage* CurStandbyAnimMontage;//[Offset: 0x1178, Size: 4]
	int[] DanceEmoteIdArray;//[Offset: 0x117c, Size: 12]
	void TryPlayStandbyAnim();// 0x260a270
	void SetVelocityZFactor(float NewFactor);// 0x260a1f8
	void PostCacheParamList(float DeltaSeconds);// 0x46f6b154
	void OnEmoteAnimFinished(int EmoteIndex, int StopReason);// 0x260a13c
	void InterrupteStandbyAnim(STExtraBaseCharacter* SelfRef);// 0x260a0c4
	void DumpAllProperties();// 0x260a0b0
	void DumpAllAnimInstancesInThisWorld();// 0x235d4b8
	PlayerAnimList CacheAnimVarList();// 0x260a074
	void AsyncAnimStandbyCallback(AnimationAsset* retAsset);// 0x2609ffc

--------------------------------
Class: STExtraAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	STExtraBaseCharacter* C_OwnerCharacter;//[Offset: 0x3e4, Size: 4]
	bool AutonomousProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	AnimMontage* C_MontageRescue;//[Offset: 0x3ec, Size: 4]
	enum AnimInstanceType;//[Offset: 0x3f0, Size: 1]
	byte LastPoseTypeCache;//[Offset: 0x3f1, Size: 1]
	STExtraAnimMontageData[] MontagePlayQueue;//[Offset: 0x408, Size: 12]
	STExtraAnimFM_SubAnimMapReplacer_Weapon SubAnimReplacer_Weapon;//[Offset: 0x424, Size: 76]
	STExtraAnimFM_Character CharacterParam;//[Offset: 0x470, Size: 216]
	STExtraAnimFM_Move MoveParam;//[Offset: 0x548, Size: 236]
	STExtraAnimFM_Character_Movement MovementParam;//[Offset: 0x634, Size: 196]
	STExtraAnimFM_Character_Swim SwimParam;//[Offset: 0x6f8, Size: 92]
	STExtraAnimFM_Weapon WeaponParam;//[Offset: 0x754, Size: 108]
	STExtraAnimFM_Weapon_Aim AimParam;//[Offset: 0x7c0, Size: 168]
	STExtraAnimFM_Weapon_GunOperation GunOperationParam;//[Offset: 0x868, Size: 260]
	STExtraAnimFM_Weapon_Grenade GrenadeParam;//[Offset: 0x96c, Size: 56]
	STExtraAnimFM_IK IKParam;//[Offset: 0x9a4, Size: 224]
	STExtraAnimFM_Foregrip ForegripParam;//[Offset: 0xa84, Size: 152]
	STExtraAnimFM_ADS ADSParam;//[Offset: 0xb1c, Size: 300]
	STExtraAnimFM_Parachute ParachuteParam;//[Offset: 0xc48, Size: 84]
	STExtraAnimFM_Character_Hurt HurtParam;//[Offset: 0xc9c, Size: 92]
	STExtraAnimFM_Character_Death DeathParam;//[Offset: 0xcf8, Size: 60]
	STExtraAnimFM_Character_EyeWatch EyeWatchParam;//[Offset: 0xd34, Size: 168]
	STExtraAnimFM_Character_Hair HairParam;//[Offset: 0xddc, Size: 84]
	STExtraAnimFM_Shoveling ShovelingParam;//[Offset: 0xe30, Size: 440]
	STExtraAnimFM_WeaponDrop WeaponDropParam;//[Offset: 0xfe8, Size: 108]
	STExtraAnimFM_LOD LODParam;//[Offset: 0x1054, Size: 68]
	AnimMontage* C_MontageImpactDead_Fly;//[Offset: 0x1098, Size: 4]
	float StopDeathAnimSpeedThreshold;//[Offset: 0x109c, Size: 4]
	float StopDeathAnimCheckDelay;//[Offset: 0x10a0, Size: 4]
	void UpdateSubAnimInstanceAnimList(bool bUpdate);// 0x236c368
	void PlayPostReloadWeaponAnimation(int RemainBulletNumToReload);// 0x260bc64
	void PlayPlayerDeadAnimation();// 0x260bc50
	void OnRespawned_BP();// 0x23b7e18
	void OnRecycled_BP();// 0x23b7dfc
	void OnPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x260b9ac
	void HandlePlayerWeaponStateChanged(enum NewState);// 0x260b92c
	void HandlePlayerPoseChange(byte LastPose, byte NewPose);// 0x260b868
	void HandlePlayerPickUp(STExtraBaseCharacter* SelfRef);// 0x2507ca0
	void HandlePlayerEnterRescueState(bool bBeginRescueing);// 0x260b7e0
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x46f6b154
	void HandlePlayerAnimMontagePlayDelegate(AnimMontage* MontageToPlay, bool bWantsPlay, float PlayRate, FName StartSection, byte MontagePlayType, float StartPosition, bool PlayDirectly);// 0x260b5a0
	void HandlePlayerAnimMontageJumpSectionDelegate(FName StartSection, AnimMontage* MontageToPlay);// 0x260b4dc
	void HandleOwnerAnimEvent(FName EventMsg);// 0x260b45c
	void HandleAnimPlaySlotAnimDelegate(AnimSequenceBase* AnimSequence, bool bWantsPlay, FName SlotName, float PlayRate, float BlendTime);// 0x260b2b0
	byte GetRole();// 0x260b288

--------------------------------
Class: AnimInstanceBase.AnimInstance.Object
	bool bUpdateWhenNotRender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	SubAnimUpdateCondition*[] UpdateAnimConditions;//[Offset: 0x350, Size: 12]
	FString[] FunctionModuleWhenNotRender;//[Offset: 0x35c, Size: 12]
	bool IsSyncGroupRoot_Toggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	bool IsFunctionModuleRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	STExtraCharacter* C_Character;//[Offset: 0x39c, Size: 4]
	STExtraBaseCharacter* C_BaseCharacter;//[Offset: 0x3a0, Size: 4]
	STExtraSimpleCharacter* C_SimpleCharacter;//[Offset: 0x3a4, Size: 4]
	<AnimationAsset*,AnimationAsset*> AnimRefMap;//[Offset: 0x3a8, Size: 60]
	void UpdateWhenOnlyTickMontage_BP(float DeltaSeconds);// 0x46f6b154
	void UpdateWhenOnlyTickMontage(float DeltaSeconds);// 0x236c3f0
	void UpdateSubAnimInstanceAnimList(bool bUpdate);// 0x236c368
	void UpdateFuntionModuleByName(float DeltaSeconds, FString FunctionModuleName, bool bSyncUpdate);// 0x236c1dc
	void UpdateFuntionModule_Async(float DeltaSeconds);// 0x236c15c
	void UpdateFuntionModule(float DeltaSeconds);// 0x236c0dc
	void UpdateDirtyFunctionModule_Remove(float DeltaSeconds);// 0x236c05c
	void UpdateDirtyFunctionModule_Add(float DeltaSeconds);// 0x236bfdc
	void UpdateDirtyFunctionModule(float DeltaSeconds);// 0x236bf5c
	void UnInitFunctionModule();// 0x236bf48
	void ResetSubAnimNodeAnimClass_BP(FName SubInstanceSlotName);// 0x236bed0
	void ResetAllSubAnimNode();// 0x236beb4
	AnimInstance* ReplaceSubAnimNodeAnimClass_BP(FName SubInstanceSlotName, class AnimInstance NewAnimClass);// 0x236bdf0
	void RecycleFunctionModule();// 0x236bdd4
	void OnRespawned_BP();// 0x46f6b154
	void OnRecycled_BP();// 0x46f6b154
	void InitFunctionModule();// 0x236bdc0
	void HandleUpdateAnimAssetEvent(byte UpdateAnimAssetEvent);// 0x236bd40
	STExtraSimpleCharacter* GetOwnerSimpleCharacter();// 0x236bd18
	STExtraCharacter* GetOwnerCharacter();// 0x236bcf0
	STExtraBaseCharacter* GetOwnerBaseCharacter();// 0x236bcc8
	void ForceRemoveDirtyFunctionModule();// 0x236bcac
	void ForceInitFunctionModule();// 0x236bc90
	void EmptyRemoveFMList();// 0x236bc74
	void EmptyFunctionModule();// 0x236bc58
	void EmptyFMList();// 0x236bc3c
	void EmptyAddFMList();// 0x236bc20
	void CollectFunctionModule();// 0x236bc04
	void ClearFunctionModule();// 0x236bbe8

--------------------------------
Class: MutexPair
	AnimMontage* Condition;//[Offset: 0x0, Size: 8]
	AnimMontage* mutTarget;//[Offset: 0x8, Size: 8]

--------------------------------
Class: AnimTypeArray
	byte[] DynamicLoadingAnimType;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SubAnimUpdateCondition.Object
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool CachedNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	void SetEnable(bool InEnable);// 0x271bd88
	bool NeedUpdate_Internal(AnimInstanceBase* AnimInstance);// 0x271bd00
	bool NeedUpdate(AnimInstanceBase* AnimInstance);// 0x271bc78
	bool CheckNeedUpdate(AnimInstanceBase* AnimInstance);// 0x271bbb8

--------------------------------
Class: PlayerAnimList
	PlayerAnimData ReloadAnim;//[Offset: 0x0, Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x8, Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x10, Size: 8]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 4]
	float Rate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraAnimMontageData
	AnimMontage* Montage;//[Offset: 0x0, Size: 4]

--------------------------------
Class: STExtraAnimFM_SubAnimMapReplacer_Weapon.AnimFunctionModule
	bool bSubAnimIsLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	WeaponAnimTypeConfig CurrentWeaponAnimUID;//[Offset: 0x38, Size: 20]

--------------------------------
Class: AnimFunctionModule
	bool bIsPendingKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool Enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool EnableUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool EnableAsyncUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool EnableOverrideNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	int UpdatePriorty;//[Offset: 0x10, Size: 4]
	bool bHasInited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	AnimInstanceBase* OwnerAnimInstance;//[Offset: 0x18, Size: 8]
	ScriptStruct* TheStruct;//[Offset: 0x20, Size: 4]
	int LastCachedNeedUpdate;//[Offset: 0x28, Size: 4]
	bool CheckRefSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool CachedNeedAsyncUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool CachedNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	AnimInstanceBase* CachedUpdateAnimInstance;//[Offset: 0x30, Size: 4]
	bool bWriteable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: STExtraAnimFM_Character.AnimFunctionModule
	float PLAYER_TURN_RESET_TIME;//[Offset: 0x68, Size: 4]
	bool b_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	Rotator r_ViewRotation;//[Offset: 0x70, Size: 12]
	Rotator r_OwnerRotation;//[Offset: 0x7c, Size: 12]
	Rotator r_ControlRotation;//[Offset: 0x88, Size: 12]
	byte e_LastPoseType;//[Offset: 0x94, Size: 1]
	byte e_PoseType;//[Offset: 0x95, Size: 1]
	float f_PoseChangeCD;//[Offset: 0x98, Size: 4]
	bool b_IsCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	bool b_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	float f_CharacterYawRotateRate;//[Offset: 0xa0, Size: 4]
	float f_CharacterYawRotateRate_Reverse;//[Offset: 0xa4, Size: 4]
	AnimSequence* as_TurnAnim;//[Offset: 0xa8, Size: 4]
	bool b_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	bool b_IsTurning_PlayAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad, Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae, Size: 1]
	bool b_IsOnControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf, Size: 1]
	bool b_IsDoingReaload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	bool b_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	bool b_WaistFollowingController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 1]
	Rotator r_DeltaRotationYawBetweenControlAndOwner;//[Offset: 0xb4, Size: 12]
	Rotator r_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xc0, Size: 12]
	bool b_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]

--------------------------------
Class: STExtraAnimFM_Move.STExtraAnimFM_EventInterface.AnimFunctionModule
	float ReloadMoveSpeed;//[Offset: 0x68, Size: 4]
	float MoveDirParachuteLerpSpeed;//[Offset: 0x6c, Size: 4]
	float MoveDirNormalLerpSpeed;//[Offset: 0x70, Size: 4]
	float SwitchPoseTransTime;//[Offset: 0x74, Size: 4]
	float ScopeVelocityInterpSpeed;//[Offset: 0x78, Size: 4]
	byte e_MovementMode;//[Offset: 0x7c, Size: 1]
	byte e_LastMovementMode;//[Offset: 0x7d, Size: 1]
	Vector v_MoveVelocity;//[Offset: 0x80, Size: 12]
	Vector v_MoveDir;//[Offset: 0x8c, Size: 12]
	float MovementBlendTime;//[Offset: 0x98, Size: 4]
	bool b_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	bool b_IsFlyingWithoutParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	bool b_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 1]
	BlendSpace* bs_MovementBSCache_Stand;//[Offset: 0xa0, Size: 4]
	BlendSpace* bs_MovementBSCache_Crouch;//[Offset: 0xa4, Size: 4]
	BlendSpace* bs_MovementBSCache_Prone;//[Offset: 0xa8, Size: 4]
	AnimSequence* as_SwitchPose_Stand_To_Crouch;//[Offset: 0xac, Size: 4]
	AnimSequence* as_SwitchPose_Stand_To_Prone;//[Offset: 0xb0, Size: 4]
	AnimSequence* as_SwitchPose_Crouch_To_Stand;//[Offset: 0xb4, Size: 4]
	AnimSequence* as_SwitchPose_Crouch_To_Prone;//[Offset: 0xb8, Size: 4]
	AnimSequence* as_SwitchPose_Prone_To_Stand;//[Offset: 0xbc, Size: 4]
	AnimSequence* as_SwitchPose_Prone_To_Crouch;//[Offset: 0xc0, Size: 4]
	BlendSpace* bs_MovementBSCache_Stand_Dest;//[Offset: 0xc4, Size: 4]
	BlendSpace* bs_MovementBSCache_Crouch_Dest;//[Offset: 0xc8, Size: 4]
	BlendSpace* bs_MovementBSCache_Prone_Dest;//[Offset: 0xcc, Size: 4]
	AnimSequence* as_SwitchPose_Stand_To_Crouch_Dest;//[Offset: 0xd0, Size: 4]
	AnimSequence* as_SwitchPose_Stand_To_Prone_Dest;//[Offset: 0xd4, Size: 4]
	AnimSequence* as_SwitchPose_Crouch_To_Stand_Dest;//[Offset: 0xd8, Size: 4]
	AnimSequence* as_SwitchPose_Crouch_To_Prone_Dest;//[Offset: 0xdc, Size: 4]
	AnimSequence* as_SwitchPose_Prone_To_Stand_Dest;//[Offset: 0xe0, Size: 4]
	AnimSequence* as_SwitchPose_Prone_To_Crouch_Dest;//[Offset: 0xe4, Size: 4]
	byte CacheLastPose;//[Offset: 0xe8, Size: 1]
	byte CacheNewPose;//[Offset: 0xe9, Size: 1]

--------------------------------
Class: STExtraAnimFM_EventInterface.AnimFunctionModule

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float AnimLength;//[Offset: 0x64, Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68, Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80, Size: 4]
	byte NotifyTriggerMode;//[Offset: 0x84, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0x88, Size: 12]
	int SampleIndexWithMarkers;//[Offset: 0x94, Size: 4]
	BlendSample[] SampleData;//[Offset: 0x98, Size: 12]
	EditorElement[] GridSamples;//[Offset: 0xa4, Size: 12]
	BlendParameter BlendParameters;//[Offset: 0xb0, Size: 24]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 4]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 24]
	float InterpolationSpeedPerSec;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 4]
	Vector SampleValue;//[Offset: 0x4, Size: 12]
	float RateScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 4]
	float Weights;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 12]
	float Min;//[Offset: 0xc, Size: 4]
	float Max;//[Offset: 0x10, Size: 4]
	int GridNum;//[Offset: 0x14, Size: 4]

--------------------------------
Class: STExtraAnimFM_Character_Movement.AnimFunctionModule
	float f_FallingVelocityZFactor;//[Offset: 0x74, Size: 4]
	float f_FallingSpeedInScoping_UnLockIK;//[Offset: 0x78, Size: 4]
	Vector v_MoveVelocityInWorldSpace;//[Offset: 0x7c, Size: 12]
	float MoveVelocityLength2D;//[Offset: 0x88, Size: 4]
	bool b_MovingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	bool b_MovingOnGroundAndMovbale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 1]
	bool b_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 1]
	byte e_JumpType;//[Offset: 0x8f, Size: 1]
	bool b_IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	bool b_MovementUpBodyOverrideIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 1]
	bool b_EnableMovementUpBodyOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 1]
	float b_WalkAdditiveAlpha;//[Offset: 0x94, Size: 4]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool b_IsFallingReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	float f_MoveVelocity_X_FallingZFactor;//[Offset: 0x9c, Size: 4]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool b_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2, Size: 1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3, Size: 1]
	float f_MaxFallingSpeed;//[Offset: 0xa4, Size: 4]
	BlendSpace1D* bs_MovementUpBodyOverride;//[Offset: 0xac, Size: 4]
	BlendSpace1D* bs_FallingBS;//[Offset: 0xb0, Size: 4]
	AnimSequence* as_JumpStart;//[Offset: 0xb4, Size: 4]
	AnimSequence* as_LandLight;//[Offset: 0xb8, Size: 4]
	AnimSequence* as_LandHeavy;//[Offset: 0xbc, Size: 4]
	CurveFloat* C_FallingIKCurve;//[Offset: 0xc0, Size: 4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: STExtraAnimFM_Character_Swim.AnimFunctionModule
	float f_SwimSpeed;//[Offset: 0x44, Size: 4]
	bool b_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float f_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0x4c, Size: 4]
	float f_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0x50, Size: 4]
	BlendSpace* bs_SwimBS_Up;//[Offset: 0x54, Size: 4]
	BlendSpace* bs_SwimBS_Down;//[Offset: 0x58, Size: 4]

--------------------------------
Class: STExtraAnimFM_Weapon.AnimFunctionModule
	bool b_HasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	byte e_WeaponType;//[Offset: 0x51, Size: 1]
	enum e_WeaponTypeNew;//[Offset: 0x52, Size: 1]
	byte e_WeaponHoldType;//[Offset: 0x53, Size: 1]
	enum e_WeaponState;//[Offset: 0x54, Size: 1]
	byte e_LastWeaponType;//[Offset: 0x55, Size: 1]
	bool b_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]
	bool b_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 1]
	bool b_IsUsingFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool b_IsAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool b_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	bool b_IsMeleeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 1]
	bool b_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	AnimMontage* ReloadMontage;//[Offset: 0x60, Size: 4]
	AnimMontage* PreFireMontage;//[Offset: 0x64, Size: 4]
	AnimSequence* as_IdleAddtive;//[Offset: 0x68, Size: 4]

--------------------------------
Class: STExtraAnimFM_Weapon_Aim.STExtraAnimFM_EventInterface.AnimFunctionModule
	Rotator r_ScopeAimOffsetStand;//[Offset: 0x80, Size: 12]
	bool b_IsScoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	bool b_IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 1]
	bool b_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 1]
	byte e_SightType;//[Offset: 0x8f, Size: 1]
	bool b_ScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	float f_RecoilKickADS;//[Offset: 0x94, Size: 4]
	bool b_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	float f_SightSlowBlendStandBaseAlpha;//[Offset: 0x9c, Size: 4]
	bool b_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	AimOffsetBlendSpace* bs_AimBlendSpace;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: STExtraAnimFM_Weapon_GunOperation.AnimFunctionModule
	int WeaponReloadSlotIndex;//[Offset: 0x74, Size: 4]
	float f_FireAlpha;//[Offset: 0x78, Size: 4]
	bool b_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	float f_WeaponState_EQ_Reload;//[Offset: 0x80, Size: 4]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	bool b_ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 1]
	float f_ReloadAnimAdditive_Alpha;//[Offset: 0x88, Size: 4]
	float f_ReloadAnimAdditive_Alpha_SpeedIn;//[Offset: 0x8c, Size: 4]
	float f_ReloadAnimAdditive_Alpha_SpeedOut;//[Offset: 0x90, Size: 4]
	float f_HandleFolderFactor;//[Offset: 0x94, Size: 4]
	float f_ProneHandleAlpha;//[Offset: 0x98, Size: 4]
	bool b_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	bool b_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x9e, Size: 1]
	bool b_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f, Size: 1]
	Rotator r_RecoilADSRotation;//[Offset: 0xa0, Size: 12]
	bool b_IsBolting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	<enum,int> RandomWeaponAnimSectionIndex;//[Offset: 0xb0, Size: 60]
	BlendSpace* bs_ObstructedAnim;//[Offset: 0xec, Size: 4]
	AnimMontage* PreFireMontage;//[Offset: 0xf0, Size: 4]
	PlayerAnimData OutPlayerAnimData;//[Offset: 0xf4, Size: 8]
	SpringArmComponent* ScopeSpringArm;//[Offset: 0xfc, Size: 4]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x240, Size: 4]
	Vector SocketOffset;//[Offset: 0x244, Size: 12]
	Vector TargetOffset;//[Offset: 0x250, Size: 12]
	float ProbeSize;//[Offset: 0x25c, Size: 4]
	byte ProbeChannel;//[Offset: 0x260, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x261, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x261, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x261, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x261, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x261, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x261, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x261, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x261, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x262, Size: 1]
	float CameraLagSpeed;//[Offset: 0x264, Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x268, Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x26c, Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x270, Size: 4]
	void SetActive(bool bNewActive, bool bReset);// 0x23505d0
	Rotator GetTargetRotation();// 0x2498710

--------------------------------
Class: STExtraAnimFM_Weapon_Grenade.AnimFunctionModule
	bool b_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool b_IsGrenadeTypeHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]

--------------------------------
Class: STExtraAnimFM_IK.AnimFunctionModule
	orceLockParam ForceLockCopyBone;//[Offset: 0x80, Size: 8]
	orceLockTwoParam ForceLockIK;//[Offset: 0x88, Size: 12]
	float BlendSpeed;//[Offset: 0x94, Size: 4]
	bool b_EnableIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool B_NeedCopyBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool B_CopyHandRBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	float LeftHandBlendWeight;//[Offset: 0x9c, Size: 4]
	float RightHandBlendWeight;//[Offset: 0xa0, Size: 4]
	<enum,ForceIKState> ForceIKStateMap;//[Offset: 0xa4, Size: 60]

--------------------------------
Class: orceLockParam

--------------------------------
Class: orceLockTwoParam.orceLockParam

--------------------------------
Class: ForceIKState

--------------------------------
Class: STExtraAnimFM_Foregrip.AnimFunctionModule
	orceLockParam ForceLockForegrip;//[Offset: 0x74, Size: 8]
	bool b_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool b_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	BlendSpace1D* bs_ForegripAnim;//[Offset: 0x80, Size: 4]
	float f_ForegripAnimParam;//[Offset: 0x84, Size: 4]
	float f_BlendForgripWeight;//[Offset: 0x88, Size: 4]
	float f_BlendForgripWeight_Left;//[Offset: 0x8c, Size: 4]
	float f_BlendForgripWeight_Right;//[Offset: 0x90, Size: 4]
	bool b_ShouldBlendForegripIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]

--------------------------------
Class: STExtraAnimFM_ADS.AnimFunctionModule
	Vector FirstAimSpine_StandAndCrouch;//[Offset: 0x74, Size: 12]
	Vector FirstAimSpine_Prone;//[Offset: 0x80, Size: 12]
	Vector2D v_ScopeAimRollRangeIN;//[Offset: 0x8c, Size: 8]
	Vector2D v_ScopeAimRollRangeOut;//[Offset: 0x94, Size: 8]
	float f_ScopeAimInterSpeed_Spector;//[Offset: 0x9c, Size: 4]
	Vector FirstAimSpine;//[Offset: 0xa0, Size: 12]
	Rotator r_C_FPPOffsetRotation_half;//[Offset: 0xac, Size: 12]
	Vector C_FPPOffsetLocation;//[Offset: 0xb8, Size: 12]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	Rotator r_ScopeAimRotation;//[Offset: 0xc8, Size: 12]
	Vector r_ScopeAimTransform;//[Offset: 0xd4, Size: 12]
	STCharacterMovementComponent* pCharacterMovementComponent;//[Offset: 0x128, Size: 4]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bClientAdjustPositionApplyNetworkMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66e, Size: 1]
	bool bSendClientAdjustmentUseRealMovementMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66f, Size: 1]
	bool bSendClientAdjustmentUseRealVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x670, Size: 1]
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x671, Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x672, Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x674, Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x678, Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x67c, Size: 4]
	bool bPassWallAdjustmentIsOpenSecondCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x680, Size: 1]
	bool bServerPassWallForceSafty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x681, Size: 1]
	bool bOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x682, Size: 1]
	bool bOpenPassWallPenetratingRevise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x683, Size: 1]
	bool bPassWallIgnoreHitPawnBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x684, Size: 1]
	bool bOpenCombinePassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x685, Size: 1]
	bool bServerCheckIfClientAuthorativeUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x686, Size: 1]
	bool bPassWallCheckNotMoveStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x687, Size: 1]
	float CombinePassWallCheckDeltaTime;//[Offset: 0x688, Size: 4]
	bool bAroundHasDynamicBodybyUseAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	float PassWallBoxOverlapCheckHalfExtentWidth;//[Offset: 0x690, Size: 4]
	float PassWallBoxOverlapCheckHalfExtentHeight;//[Offset: 0x694, Size: 4]
	float MaxPrisonmentMove;//[Offset: 0x698, Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69d, Size: 1]
	float TimeThresholdForceLeaveFallingState;//[Offset: 0x6a0, Size: 4]
	float FallingInPlaceDistanceSq;//[Offset: 0x6a4, Size: 4]
	bool bDoSecondCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 1]
	bool bDoShapeTransformTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 1]
	bool bSimulateStaticFallingToWalking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6aa, Size: 1]
	bool bCombineMoveBagCheckActorNotMoveStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	bool bCombineMoveBagOverlapTestByDynamic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd, Size: 1]
	bool bIsOpenCheckClientFallingFloorHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fe, Size: 1]
	float CheckClientFallingFloorHitByClientPosXYOffset;//[Offset: 0x700, Size: 4]
	float CheckClientFallingFloorHitByClientPosHeightOffset;//[Offset: 0x704, Size: 4]
	float CheckClientFallingFloorHitImpactPointOffset;//[Offset: 0x708, Size: 4]
	float CheckClientFallingFloorHitTimeStamp;//[Offset: 0x70c, Size: 4]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x714, Size: 4]
	float EnterShovelingMoveModeMinTime;//[Offset: 0x718, Size: 4]
	bool bIsOpenEnterShovelingMoveModeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	bool bShowEnterShovelingMoveModeBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71d, Size: 1]
	float EnterShovelingMoveModeCheckTimeout;//[Offset: 0x720, Size: 4]
	float EnterShovelCD;//[Offset: 0x724, Size: 4]
	float DSEnterShovelCD;//[Offset: 0x728, Size: 4]
	float ShovelingCollisionLength;//[Offset: 0x72c, Size: 4]
	float ShovelingCollisionWidth;//[Offset: 0x730, Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x734, Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x738, Size: 4]
	float UseVelocityDirMinSpeed;//[Offset: 0x73c, Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x740, Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x744, Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x748, Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x74c, Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x750, Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x754, Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x758, Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x75c, Size: 4]
	float MinusGradeShovelingDCC1;//[Offset: 0x760, Size: 4]
	float MinusGradeShovelingDCC2;//[Offset: 0x764, Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x768, Size: 4]
	float StopShovelingSpeed;//[Offset: 0x770, Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x774, Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x778, Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x77c, Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x78c, Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x790, Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x794, Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x798, Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x79c, Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x7a0, Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x7a4, Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x7a8, Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x7b0, Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x7c8, Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x7cc, Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x7d0, Size: 4]
	float nowShovelingSpeed;//[Offset: 0x7d4, Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x7d8, Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4, Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e5, Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x7e6, Size: 1]
	float PreShovelFov;//[Offset: 0x7e8, Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x818, Size: 1]
	float TimeSpeedFactor;//[Offset: 0x81c, Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x821, Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x822, Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x824, Size: 4]
	float JumpOffVelocityFactor;//[Offset: 0x828, Size: 4]
	PrimitiveComponent* LastMovementBase;//[Offset: 0x82c, Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x831, Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x834, Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x838, Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x83c, Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x840, Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x844, Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x848, Size: 4]
	float WalkSpeedCurveScale;//[Offset: 0x84c, Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x850, Size: 4]
	float ProneFloorAngle;//[Offset: 0x854, Size: 4]
	float ProneFloorZ;//[Offset: 0x858, Size: 4]
	float JumpFloorAngle;//[Offset: 0x85c, Size: 4]
	float JumpFloorZ;//[Offset: 0x860, Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x864, Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x868, Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86c, Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x870, Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x874, Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x878, Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x878, Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x87c, Size: 4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x924, Size: 1]
	float CheckDistanceAhead;//[Offset: 0x928, Size: 4]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x92c, Size: 4]
	ParticleSystem* ShovelingEffectParticle;//[Offset: 0x930, Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0x934, Size: 4]
	int MaxMultiJumpCount;//[Offset: 0x950, Size: 4]
	int CurrentMultiJumpCount;//[Offset: 0x954, Size: 4]
	float MultiJumpSpeed;//[Offset: 0x958, Size: 4]
	float LocationDiff;//[Offset: 0x95c, Size: 4]
	float LocationInterpSpeed;//[Offset: 0x960, Size: 4]
	float RotationDiff;//[Offset: 0x964, Size: 4]
	float RotationInterpSpeed;//[Offset: 0x968, Size: 4]
	float MinMovebaseSpeed;//[Offset: 0x96c, Size: 4]
	bool TryMultiJump();// 0x25fb6d4
	FString ToStringHasLocation(FString Subtitle);// 0x25fb588
	FString ToStringHasExtendInfoHasMiddleSimply(FString Subtitle, FString MiddleSimplyStr, bool bIsShowMesh);// 0x25fb33c
	FString ToStringHasExtendInfo(FString Subtitle);// 0x25fb1f0
	void SeverAddRotationVelocity(const Vector RotationVelocity);// 0x25fb134
	void SetShovelEnabledFlags(enum InShovelEnabledFlags);// 0x25fb0bc
	void SetProneFloorZ(float InProneFloorZ);// 0x25fb044
	void SetProneFloorAngle(float InProneFloorAngle);// 0x25fafcc
	void SetJumpFloorZ(float InJumpFloorZ);// 0x25faf54
	void SetJumpFloorAngle(float InJumpFloorAngle);// 0x25faedc
	void ServerMoveFloor(float TimeStamp, Actor* HitActor, PrimitiveComponent* HitComp, Vector ImpactPoint, Vector ImpactNormal, byte ClientMovementMode);// 0x25fac7c
	void ServerMoveEx(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode, const ServerMoveExtraParams ExtraParams);// 0x25fa86c
	void SendLevelTime(float LevelTime);// 0x25fa7c8
	void PrintExtendInfoHasMiddleSimply(FString Title, FString Subtitle, FString MiddleSimplyStr, FString EndStr, bool bIsShowMesh, bool bIsShowCamera);// 0x25fa42c
	void PhysicsFlyDistance(float DeltaTime, out const Vector flyVelocity);// 0x25fa358
	void OnRespawned();// 0x242d4e4
	void OnRecycled();// 0x242d4c8
	void OnRecoverOnServer();// 0x25fa33c
	void OnPreReconnectOnServer();// 0x25fa328
	float K2_GetProneFloorZ();// 0x25fa300
	float K2_GetProneFloorAngle();// 0x25fa2d8
	float K2_GetJumpFloorZ();// 0x25fa2b0
	float K2_GetJumpFloorAngle();// 0x25fa288
	bool IsWalkable(out const HitResult Hit);// 0x25fa1dc
	bool IsProning();// 0x25fa1b4
	FString GetToString();// 0x25fa118
	STExtraBaseCharacter* GetSTCharacter();// 0x25fa0f0
	enum GetShovelEnabledFlags();// 0x25fa0c8
	float GetPawnRealVelocity();// 0x25fa0a0
	float GetLastServerMoveTime();// 0x25fa078
	bool GetIsOpenShovelingAbility();// 0x25fa050
	bool GetIsOpenLongPressShovelingAbility();// 0x25fa028
	bool GetIsOpenCrouchShovelingAbility();// 0x25fa000
	float GetEnterShovelingMoveModeMinTime();// 0x25f9fd8
	bool DragOnGround(float DeltaTime);// 0x25f9f58
	void DoMultiJump();// 0x25f9f0c
	void ClientVeryShortAdjustPositionReliable(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x25f9cbc
	void ClientVeryShortAdjustPositionAndRotationReliable(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x25f9a04
	void ClientVeryShortAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x25f974c
	void ClientSetShovelEnabledFlags(enum InShovelEnabledFlags);// 0x25f96cc
	void ClientAdjustPositionAndRotation(float TimeStamp, Vector NewLoc, Rotator NewRot, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x25f93a4
	void ChangePhysxShapeFlag();// 0x235d4b8
	bool CanJump();// 0x25f937c

--------------------------------
Class: ServerMoveExtraParams
	float ClientWorldTime;//[Offset: 0x0, Size: 4]
	float MaxMoveSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraAnimFM_Parachute.AnimFunctionModule
	byte ParachuteState;//[Offset: 0x44, Size: 1]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 1]
	Rotator r_DeltaViewOffset;//[Offset: 0x48, Size: 12]

--------------------------------
Class: STExtraAnimFM_Character_Hurt.AnimFunctionModule
	bool b_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	Vector v_HurtDir;//[Offset: 0x48, Size: 12]
	BlendSpace* bs_HitBlendSpace;//[Offset: 0x58, Size: 4]

--------------------------------
Class: STExtraAnimFM_Character_Death.AnimFunctionModule
	bool b_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool b_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	float f_EnterNearDeathCDTime;//[Offset: 0x38, Size: 4]

--------------------------------
Class: STExtraAnimFM_Character_EyeWatch.AnimFunctionModule
	float NeckTurnSpeed;//[Offset: 0x50, Size: 4]
	float NeckNotTurnAngle;//[Offset: 0x54, Size: 4]
	float NeckTurnUILeftAngle;//[Offset: 0x58, Size: 4]
	float NeckTurnUIRightAngle;//[Offset: 0x5c, Size: 4]
	float NeckTurnUIUPAngle;//[Offset: 0x60, Size: 4]
	float NeckTurnUIDownAngle;//[Offset: 0x64, Size: 4]
	float NeckMapAngleUp;//[Offset: 0x68, Size: 4]
	float NeckMapAngleDown;//[Offset: 0x6c, Size: 4]
	float NeckMapCrouchAngleUp;//[Offset: 0x70, Size: 4]
	float NeckMapCrouchAngleDown;//[Offset: 0x74, Size: 4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0x78, Size: 4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0x7c, Size: 4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0x80, Size: 4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0x84, Size: 4]
	float NeckMapAngleLeft;//[Offset: 0x88, Size: 4]
	float NeckMapAngleRight;//[Offset: 0x8c, Size: 4]
	float NeckMapCrouchAngleLeft;//[Offset: 0x90, Size: 4]
	float NeckMapCrouchAngleRight;//[Offset: 0x94, Size: 4]
	bool b_ApplyTurnAroundAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	Rotator r_HeadRotOffset;//[Offset: 0x9c, Size: 12]

--------------------------------
Class: STExtraAnimFM_Character_Hair.AnimFunctionModule
	bool b_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	Vector v_MoveVelocityInWorldSpaceReverse;//[Offset: 0x48, Size: 12]

--------------------------------
Class: STExtraAnimFM_Shoveling.AnimFunctionModule
	AnimForShovel AnimForShovel;//[Offset: 0x50, Size: 264]
	Rotator ShovelingRotation;//[Offset: 0x158, Size: 12]
	Rotator UpShovelingRotationAdd;//[Offset: 0x164, Size: 12]
	Rotator ShovelingRotationCS;//[Offset: 0x170, Size: 12]
	Rotator UpShovelingRotationAddCS;//[Offset: 0x17c, Size: 12]
	Rotator FloorRotation;//[Offset: 0x188, Size: 12]
	AnimSequence* ShovelEnterAnim;//[Offset: 0x194, Size: 4]
	AnimSequence* ShovelLoopAnim;//[Offset: 0x198, Size: 4]
	AnimSequence* ShovelLeaveAnim;//[Offset: 0x19c, Size: 4]
	bool bIsFppAndHasGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	STCharacterMovementComponent* pCharacterMovementComponent;//[Offset: 0x1a4, Size: 4]

--------------------------------
Class: AnimForShovel
	BlendSpace1D* bs1_ShovelAnim;//[Offset: 0x0, Size: 4]
	BlendSpace* bs_ShovelAnim_Floor;//[Offset: 0x4, Size: 4]
	BlendSpace1D* bs1_ShovelAnim_Pitch;//[Offset: 0x8, Size: 4]
	BlendSpace1D* bs1_ShovelAnim_Unarm;//[Offset: 0xc, Size: 4]
	BlendSpace* bs_ShovelAnim_Unarm_Floor;//[Offset: 0x10, Size: 4]
	AnimSequence* se_ShovelAnim_F;//[Offset: 0x14, Size: 4]
	AnimationAsset* bs1_Shovel;//[Offset: 0x18, Size: 40]
	AnimationAsset* bs_Shovel_Floor;//[Offset: 0x40, Size: 40]
	AnimationAsset* bs1_Shovel_Pitch;//[Offset: 0x68, Size: 40]
	AnimationAsset* bs1_Shovel_Unarm;//[Offset: 0x90, Size: 40]
	AnimationAsset* bs_Shovel_Unarm_Floor;//[Offset: 0xb8, Size: 40]
	AnimationAsset* se_Shovel_F;//[Offset: 0xe0, Size: 40]

--------------------------------
Class: STExtraAnimFM_WeaponDrop.AnimFunctionModule
	float AimBlendSpaceAlpha;//[Offset: 0x68, Size: 4]

--------------------------------
Class: STExtraAnimFM_LOD.AnimFunctionModule
	byte u_LODLevel;//[Offset: 0x35, Size: 1]
	bool b_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool b_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	float LODLevel2DistanceFactorMin;//[Offset: 0x38, Size: 4]
	float LODLevel2DistanceFactorMax;//[Offset: 0x3c, Size: 4]
	float LODLevel1DistanceFactorMax;//[Offset: 0x40, Size: 4]

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int DefaultObjectPoolSize;//[Offset: 0xbd4, Size: 4]
	float IdleWalkSpeedRatio;//[Offset: 0xbdc, Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0xbe0, Size: 4]
	float SprintRunSpeedRatio;//[Offset: 0xbe4, Size: 4]
	float SidewaysSpeedRatio;//[Offset: 0xbe8, Size: 4]
	float MaxSpeedModeRatio;//[Offset: 0xbec, Size: 4]
	int GlobalTlogID;//[Offset: 0xbf0, Size: 4]
	int PersonalTlogID;//[Offset: 0xbf4, Size: 4]
	bool bRecordPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf8, Size: 1]
	bool bRecordTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf9, Size: 1]
	int IdleBlendSpaceValue;//[Offset: 0xbfc, Size: 4]
	delegate OnChangeAnimParam;//[Offset: 0xc00, Size: 12]
	float jumpCheckOnGroundProtect;//[Offset: 0xc0c, Size: 4]
	CapsuleComponent* RootCapsule;//[Offset: 0xc14, Size: 4]
	CapsuleComponent* HitBox_Stand;//[Offset: 0xc18, Size: 4]
	bool bDeactivationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1c, Size: 1]
	delegate OnTakeDamageModify_Override;//[Offset: 0xc20, Size: 16]
	bool bIsOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3c, Size: 1]
	TimerHandle OnResumeMoveHandle;//[Offset: 0xc40, Size: 8]
	bool bCanControlByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 1]
	bool bSetWalkStandState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc49, Size: 1]
	bool CanBeHiddenMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4a, Size: 1]
	float ImpluseScale;//[Offset: 0xc4c, Size: 4]
	bool bIgnoreMonsters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc50, Size: 1]
	bool bHoldWeaponHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc51, Size: 1]
	float ImpluseZScale;//[Offset: 0xc54, Size: 4]
	float DelayRemoveDeadBody;//[Offset: 0xc58, Size: 4]
	bool EnableRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5c, Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0xc60, Size: 4]
	bool ShowKillStreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64, Size: 1]
	<int,MonsterDeathData> deadTypeConfigs;//[Offset: 0xc68, Size: 60]
	float PlayerFirstProbability;//[Offset: 0xca4, Size: 4]
	float HatredRevolution;//[Offset: 0xca8, Size: 4]
	float[] AnimUpdateRateParams;//[Offset: 0xcac, Size: 12]
	bool bUseCustomAnimUpdateRateParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb8, Size: 1]
	float[] CustomAnimUpdateRateParams;//[Offset: 0xcbc, Size: 12]
	bool bCanSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc8, Size: 1]
	SceneComponent* HitBoxComponent;//[Offset: 0xccc, Size: 4]
	delegate SimpleCharacterBirthEvent;//[Offset: 0xcd0, Size: 12]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0xcdc, Size: 4]
	CrowdAgentComponent* CrowdAgent;//[Offset: 0xce0, Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xce4, Size: 4]
	PathInterpSyncComponent* PathInterpSync;//[Offset: 0xce8, Size: 4]
	InterpMovementComponent* InterpMovement;//[Offset: 0xcec, Size: 4]
	STExtraMonsterAnimInstance* monsterAnimInstance;//[Offset: 0xcf0, Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0xcf4, Size: 4]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf8, Size: 1]
	SimpleLagCompensationComponent* LagCompensationComponent;//[Offset: 0xcfc, Size: 4]
	float WalkSpeed;//[Offset: 0xd00, Size: 4]
	float RunSpeed;//[Offset: 0xd04, Size: 4]
	byte SpawnType;//[Offset: 0xd08, Size: 1]
	MonsterBornStateConfig BornStateType;//[Offset: 0xd0c, Size: 12]
	MonsterShotGunDamageEventBroadcastData[] CachedShotGunDamageDataListOneFrame;//[Offset: 0xd18, Size: 12]
	float MonsterDamageEXP;//[Offset: 0xd24, Size: 4]
	float MonsterKillEXP;//[Offset: 0xd28, Size: 4]
	int MonsterLevel;//[Offset: 0xd2c, Size: 4]
	Actor* AttackTarget;//[Offset: 0xd30, Size: 4]
	Actor* OwnerTreasureBox;//[Offset: 0xd34, Size: 4]
	float SpeedValueFight;//[Offset: 0xd38, Size: 4]
	float SpeedValueClimb;//[Offset: 0xd3c, Size: 4]
	float StunHealthPercentageThreshold;//[Offset: 0xd40, Size: 4]
	float StunProbability;//[Offset: 0xd44, Size: 4]
	float StunDuration;//[Offset: 0xd48, Size: 4]
	bool NoBattleEnterStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4c, Size: 1]
	FString MonsterStunAttrModitfyName;//[Offset: 0xd50, Size: 12]
	MonsterStunAttrModitfyConfig[] MonsterStunAttrModitfyConfigList;//[Offset: 0xd5c, Size: 12]
	int MonsterUniqueID;//[Offset: 0xd68, Size: 4]
	Vector DamagePos_HeadOffset;//[Offset: 0xd6c, Size: 12]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd79, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7a, Size: 1]
	Vector HurtDir;//[Offset: 0xd7c, Size: 12]
	float HurtDistance;//[Offset: 0xd88, Size: 4]
	float HurtResetDefaultTime;//[Offset: 0xd8c, Size: 4]
	float ZombieSleepToDie;//[Offset: 0xda4, Size: 4]
	bool bEnableSimpleCharacterCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda8, Size: 1]
	delegate OnSimpleCharacterWeaponStateChanged;//[Offset: 0xdac, Size: 12]
	delegate OnSimpleCharacterAnimEvent;//[Offset: 0xdb8, Size: 12]
	MonsterDurationData[] InitDurationData;//[Offset: 0xdc8, Size: 12]
	float[] FallSpeedSetting;//[Offset: 0xdd8, Size: 12]
	MonsterClimbData CurrentClimbData;//[Offset: 0xde4, Size: 8]
	enum CurrentJumpExPhase;//[Offset: 0xdec, Size: 1]
	bool IsInAIPathLinkRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xded, Size: 1]
	float MeshMaxVisibleDelay;//[Offset: 0xdf0, Size: 4]
	float DelayOpenCollisionTime;//[Offset: 0xdf8, Size: 4]
	FName BornCollisitionTag;//[Offset: 0xe00, Size: 8]
	bool bPlayHitEvenIfPlayingMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe08, Size: 1]
	PrimitiveComponent* BornCollision;//[Offset: 0xe0c, Size: 4]
	Transform BornCollisionTrans;//[Offset: 0xe10, Size: 48]
	FName BornCollisionAttach;//[Offset: 0xe40, Size: 8]
	StaticMesh* BoxModel;//[Offset: 0xe48, Size: 4]
	bool bEnabledForceFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4c, Size: 1]
	int DamageSyncFrameFrequency;//[Offset: 0xe50, Size: 4]
	bool EnableDamageSyncFrequencyControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe54, Size: 1]
	uint64 LastDamageSyncFrameCount;//[Offset: 0xe58, Size: 8]
	PartDamageComponent* PartDamageComponent;//[Offset: 0xe60, Size: 4]
	UAEMonsterAnimListComponentBase* MonsterAnimListComponent;//[Offset: 0xe64, Size: 4]
	FName MainAnimListTag;//[Offset: 0xe68, Size: 8]
	int[] MonsterAnimListNum;//[Offset: 0xe70, Size: 12]
	float HearRadius;//[Offset: 0xe80, Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0xe84, Size: 4]
	bool IsShowDamageNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8c, Size: 1]
	bool bIsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8d, Size: 1]
	bool bIsShowKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8e, Size: 1]
	delegate OnFinishJumpToTarget;//[Offset: 0xe90, Size: 12]
	bool bIsJumpingToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9c, Size: 1]
	float DisableCollisionPeriod;//[Offset: 0xea0, Size: 4]
	bool bDisableCollisionBothSide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea4, Size: 1]
	FString[] DrawDebugInfoContentList;//[Offset: 0xeac, Size: 12]
	delegate OnSimpleCharacterHpChange;//[Offset: 0xec8, Size: 12]
	SkeletalMesh* MeshResourceForHighendDevice;//[Offset: 0xed8, Size: 40]
	SkeletalMesh* MeshResourceForLowendDevice;//[Offset: 0xf00, Size: 40]
	void StopAIAndCrouch();// 0x26ead8c
	void StartJumpToTarget(out const Vector TargetLocation, float GravityScale, float Speed, bool bIsSkill, bool bIsLowArc);// 0x26eabd0
	void StartJump_Multicast(const Vector Vel, float GravityScale, bool bIsSkill, bool bRotFollowVel);// 0x26eaa64
	void ShowBeHitAnim(Actor* causer);// 0x26ea9ec
	void SetIsOnGround(bool onGround);// 0x26ea964
	void PostTakeDamage(float Damage, out const HitResult HitResult, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, bool IsHeadShot);// 0x26ea73c
	void OpenDeadBodyRagDoll_Client(byte deadPoseType);// 0x26ea6bc
	void OnStateLeave(enum EnteredState);// 0x26239a0
	void OnStateInterrupted(int stateID, int InterruptedBy);// 0x26238dc
	void OnStateEnter(enum EnteredState);// 0x262385c
	void OnRep_ReplicatedMovement();// 0x23d0bcc
	void OnRep_MonsterAnimListNum(int[] preAnimListNum);// 0x26ea5d8
	void OnRep_JumpingToTarget();// 0x26ea5c4
	void OnRep_IdleBlendSpaceValue();// 0x26ea5b0
	void OnRep_Health(float PrevHealth);// 0x26232f8
	void OnPathInterpStatusChanged(bool bIsStart, bool bIsVault);// 0x26ea4e0
	void OnJumpToTargetImpact(out const HitResult ImpactResult);// 0x26ea444
	void OnHitAnimPlay();// 0x26ea428
	void OnCanControlByPlayerChangeEvent();// 0x46f6b154
	void On_RepCanControlByPlayer();// 0x26ea414
	bool LeaveState(enum State);// 0x2621c64
	bool HasState(enum State);// 0x2620cb0
	void HandleStunEnd();// 0x26ea400
	void HandleReceiveBornType();// 0x26ea3ec
	SkeletalMeshComponent* GetWeaponAttachMesh(STExtraWeapon* Weapon);// 0x265b61c
	SceneComponent* GetWeaponAttachComp();// 0x265b5ec
	FString GetUIDisplayName();// 0x46f6b154
	STExtraSimpleCharacterPhysics* GetSimpleCharacterPhysics();// 0x26ea3d0
	STExtraPlayerController* GetPlayerControllerSafety();// 0x261fe90
	bool EnterState(enum State);// 0x261e2e4
	void DisappearOnDeath();// 0x26ea3bc
	void ClearOnDeathByPose(Controller* EventInstigator, int DamageType, byte deadPoseType);// 0x26ea2bc
	void CalculateUniqueIDOnServer();// 0x26ea2a0
	void BroadcastCompactClientsSimulateShotGunDamage(const MonsterShotGunDamageEventBroadcastData[] DataList);// 0x26ea1ac
	void BroadcastCompactClientsSimulateDamage(float Damage, int damageTypeID, Pawn* DamageInstigatorPawn, bool IsHeadShotDamage);// 0x26ea008
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26e9d84
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26e9ad8
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26e9858
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26e95d8
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26e934c
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26e90b0
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26e8e30
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26e8bb0
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26e8904
	void BroadcastClientsDeath(float Damage, const DamageEvent DamageEvent, Actor* DamageCauser, Controller* killController, bool IsHeadShotDamage, int TypeID);// 0x26e86b4
	void BroadcastClientAnimMsg(FString AnimMsg);// 0x26e85ec
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x46f6b154
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x46f6b154
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent, int damageTypeID);// 0x26e8430
	bool AllowState(enum State, bool withLog);// 0x2659898

--------------------------------
Class: MonsterDeathData
	byte PoseType;//[Offset: 0x0, Size: 1]
	Vector deadDir;//[Offset: 0x4, Size: 12]
	Vector deadUpDir;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	float VelocityDampingOnGround;//[Offset: 0xd4, Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0xd8, Size: 4]
	float StepHeight;//[Offset: 0xdc, Size: 4]
	float VehicleHitFeedBack;//[Offset: 0xe0, Size: 4]
	float VehicleImpluseScale;//[Offset: 0xe4, Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0xe8, Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0xec, Size: 4]
	int LinkJumpVelocityAngle;//[Offset: 0xf0, Size: 4]
	int LinkJumpVelocityValue;//[Offset: 0xf4, Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	enum FindGroundTraceType;//[Offset: 0xf9, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x140, Size: 4]
	bool StopSkillSimulate();// 0x26eebe4
	bool StopImpulseSimulate();// 0x26eebbc
	bool StartSkillSimulate(Vector InVelocity, bool PreventPenetration);// 0x26eeae0
	bool StartImpulseSimulate(Vector InVelocity, bool PreventPenetration);// 0x26eea04
	void SetVelocity(Vector InVelocity);// 0x26ee984
	void SetSimulatePhysics(bool bInEnabled);// 0x26ee908
	void SetEnabled(bool InEnabled);// 0x2429a34
	void SetCharacterMovementActive(bool _bIsActive);// 0x26ee888
	bool IsOnGround();// 0x26ee860
	Vector GetVelocity();// 0x26ee818
	Vector GetTouchGroundVelocity();// 0x26ee7d0
	bool FindGround();// 0x26ee7a8
	void AddVelocity(Vector InVelocity);// 0x26ee728
	void ActivatePhysics();// 0x26ee714

--------------------------------
Class: CrowdAgentComponent.ActorComponent.Object
	float AgentRadius;//[Offset: 0xd4, Size: 4]
	float SegmentRadius;//[Offset: 0xd8, Size: 4]
	float Height;//[Offset: 0xdc, Size: 4]
	float MaxSpeed;//[Offset: 0xe0, Size: 4]
	float MaxForce;//[Offset: 0xe4, Size: 4]
	float QueryNeighborRadius;//[Offset: 0xe8, Size: 4]
	float QueryBoundaryRadius;//[Offset: 0xec, Size: 4]
	float StopMoveDistance;//[Offset: 0xf0, Size: 4]
	bool bSimulateCrowdAgent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	class NavigationQueryFilter* FilterClass;//[Offset: 0xf8, Size: 4]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	bool bNeedTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 1]
	void StopMove();// 0x2429b28
	void SetMaxSpeed(float MaxSpeed);// 0x2429ab0
	void SetEnabled(bool InEnabled);// 0x2429a34
	void RandomMoveToPosition(float Radius);// 0x24299bc
	void MoveToLoc(out const Vector Loc);// 0x242992c
	void MoveToActor(const Actor* Actor);// 0x24298b4
	bool IsMoving();// 0x242988c
	Vector GetVelocity();// 0x2429844
	float GetMaxSpeed();// 0x242981c

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xfc, Size: 56]
	float Snapshot_Timestamp;//[Offset: 0x134, Size: 4]
	RepSnapshot_Location Snapshot_Location;//[Offset: 0x138, Size: 12]
	RepMovement RepMovement;//[Offset: 0x144, Size: 52]
	RepSnapshot Snapshot;//[Offset: 0x178, Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x1b0, Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x1b4, Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x1b8, Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x1bc, Size: 4]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x1c0, Size: 360]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool bEnableTurnAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32a, Size: 1]
	bool FlipTurnRightFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32b, Size: 1]
	float TurnThreshold;//[Offset: 0x354, Size: 4]
	CurveFloat* TurnTimeCurve;//[Offset: 0x358, Size: 4]
	float TurnSpeed;//[Offset: 0x35c, Size: 4]
	Vector LastUpdateLocation;//[Offset: 0x360, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x370, Size: 16]
	void SetVelocity(out const Vector Velocity);// 0x25df558
	void SetFindFloorTraceUseLastZ(bool bUseLaseZ);// 0x25df4dc
	void SetEnabled(bool InEnabled);// 0x25df460
	void SetDragLocationJudgeUseCorrectZ(bool bUseCorrectZ);// 0x25df3e4
	void SetDragLocationFindFloor(bool bFindFloor);// 0x25df368
	void SetAngularVelocity(float PitchSpeed, float YawSpeed, float RollSpeed);// 0x25df268
	void OnRep_Snapshot();// 0x25df254
	void OnRep_Movement();// 0x25df240
	Vector GetVelocity();// 0x25df1f8
	void ForceUpdate(bool ClearVelocity);// 0x25df178
	void ClearRepSnapShot();// 0x25df15c

--------------------------------
Class: RepSnapshot
	Rotator Rotation;//[Offset: 0x10, Size: 12]
	Vector LinearVelocity;//[Offset: 0x1c, Size: 12]
	Vector AngularVelocity;//[Offset: 0x28, Size: 12]
	float ToleranceYaw;//[Offset: 0x34, Size: 4]

--------------------------------
Class: RepSnapshot_Location
	Vector Location;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0, Size: 4]
	float AngularDeltaThreshold;//[Offset: 0x4, Size: 4]
	float AngularInterpAlpha;//[Offset: 0x8, Size: 4]
	float AngularRecipFixTime;//[Offset: 0xc, Size: 4]
	float LinearDeltaThresholdSq;//[Offset: 0x10, Size: 4]
	float LinearInterpAlpha;//[Offset: 0x14, Size: 4]
	float LinearRecipFixTime;//[Offset: 0x18, Size: 4]
	float SpeedThresholdSq;//[Offset: 0x1c, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x20, Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x24, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x28, Size: 4]
	float FindFloorInterval;//[Offset: 0x2c, Size: 4]
	float FindFloorTraceZUp;//[Offset: 0x30, Size: 4]
	float FindFloorTraceZDown;//[Offset: 0x34, Size: 4]
	bool bFindFloorWhenSmoothInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	float InterpFindFloorInterval;//[Offset: 0x3c, Size: 4]
	bool bFindFloorTraceUseLastZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bDragLocationJudgeUseCorrectZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bDragLocationFindFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	SmoothParamsBySpeed[] SmoothParams;//[Offset: 0x44, Size: 12]
	CurveFloat* RotationTimeCurve;//[Offset: 0x50, Size: 4]
	float DisableRotationThreshold;//[Offset: 0x54, Size: 4]
	bool bGetInterpVelocityWhenStopMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float InterpVelocityWhenStopMoveLimit;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: SmoothParamsBySpeed
	float Speed;//[Offset: 0x0, Size: 4]
	float LinearDeltaThresholdSq;//[Offset: 0x4, Size: 4]
	float SmoothNetUpdateLocationTime;//[Offset: 0x8, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0xc, Size: 4]
	float MaxPredictMoveTime;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PathInterpSyncComponent.ActorComponent.Object
	bool bUseForVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	PawnVaultConfig[] VaultConfigData;//[Offset: 0xe8, Size: 12]
	<FName,PawnPathInterpCurveConfig> PathInterpCurveConfigData;//[Offset: 0xf4, Size: 60]
	<FName,PathInterpAnimData> PathInterpAnimData;//[Offset: 0x130, Size: 60]
	float InterpCorrectionTimeInterval;//[Offset: 0x16c, Size: 4]
	float LineInterpStopRadius;//[Offset: 0x170, Size: 4]
	PlayerAIVaultAnimData LoopAnimData;//[Offset: 0x178, Size: 16]
	PlayerAIVaultAnimData StartAnimData;//[Offset: 0x188, Size: 16]
	PlayerAIVaultAnimData EndAnimData;//[Offset: 0x198, Size: 16]
	CurveFloat* CurUpCurve;//[Offset: 0x1ec, Size: 4]
	CurveFloat* CurForwardCurve;//[Offset: 0x1f0, Size: 4]
	void PawnStartVault(float BlockDistance, float BlockHeight, float BlockLength, float BlockMaxFall, float BlockMaxDist, Vector StartPos, Vector hitpoint, Rotator movedir);// 0x255c08c
	void PawnStartPathNodeInterp(const RepPathNodeData[] PathNodeData, Vector SvrStartLoc);// 0x255bf9c
	void NotifyServerPathProgress(int PathIndex, float PathTime);// 0x255bed8
	void DoPathNodeInterp(float lookAtBlockHeight, float BlockLength, Vector StartPos, Vector EndPos);// 0x255bd6c

--------------------------------
Class: PawnVaultConfig
	FName AnimKey;//[Offset: 0x0, Size: 8]
	CurveFloat* UpCurve;//[Offset: 0x8, Size: 4]
	CurveFloat* ForwardCurve;//[Offset: 0xc, Size: 4]
	float BlockDistance;//[Offset: 0x10, Size: 4]
	float BlockHeight;//[Offset: 0x14, Size: 4]
	float BlockLength;//[Offset: 0x18, Size: 4]
	bool bIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float CountTime;//[Offset: 0x20, Size: 4]
	float PlaySpeed;//[Offset: 0x24, Size: 4]

--------------------------------
Class: PawnPathInterpCurveConfig
	CurveFloat* UpCurve;//[Offset: 0x0, Size: 4]
	CurveFloat* ForwardCurve;//[Offset: 0x4, Size: 4]
	float CurveTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PathInterpAnimData
	AnimMontage* PlayerAnimSoftPtr;//[Offset: 0x0, Size: 40]
	AnimMontage* ZombieAnimSoftPtr;//[Offset: 0x28, Size: 40]

--------------------------------
Class: PlayerAIVaultAnimData
	FName AnimKey;//[Offset: 0x0, Size: 8]
	float MoveLength;//[Offset: 0x8, Size: 4]
	float SpeedScale;//[Offset: 0xc, Size: 4]

--------------------------------
Class: RepPathNodeData
	Vector Location;//[Offset: 0x0, Size: 12]
	float SpeedScale;//[Offset: 0xc, Size: 4]
	FName AnimKey;//[Offset: 0x10, Size: 8]
	FName CurveKey;//[Offset: 0x18, Size: 8]

--------------------------------
Class: InterpMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	FlyPathFollowingComponent* FlyPathFollowingComp;//[Offset: 0x138, Size: 8]
	float MaxMoveSpeed;//[Offset: 0x140, Size: 4]
	bool bUseDirectionAdjustVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 1]
	float ScalePower;//[Offset: 0x148, Size: 4]
	float MinScaleFactor;//[Offset: 0x14c, Size: 4]
	bool bFindFloorWhenMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150, Size: 1]
	bool bFindLandscapeAsFloorOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x150, Size: 1]
	byte FindFloorChannel;//[Offset: 0x151, Size: 1]
	float FindFloorTraceZUp;//[Offset: 0x154, Size: 4]
	float FindFloorTraceZDown;//[Offset: 0x158, Size: 4]
	bool bTestPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	byte TestPassWallChannel;//[Offset: 0x15d, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15e, Size: 1]
	float AvoidanceWeight;//[Offset: 0x160, Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x164, Size: 4]
	bool bUseCustomAvoidanceShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x168, Size: 1]
	float CustomAvoidanceRadius;//[Offset: 0x16c, Size: 4]
	float CustomAvoidanceHalfHeight;//[Offset: 0x170, Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x174, Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x178, Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x17c, Size: 4]
	bool bHasRequestedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x184, Size: 12]
	Character* CharacterOwner;//[Offset: 0x190, Size: 4]
	int AvoidanceUID;//[Offset: 0x1a4, Size: 4]

--------------------------------
Class: FlyPathFollowingComponent.NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	float DefaultFlyHeight;//[Offset: 0x2a0, Size: 4]
	float MinFlyHeight;//[Offset: 0x2a4, Size: 4]
	float NavAgentRadius;//[Offset: 0x2a8, Size: 4]
	byte SweepTraceChannel;//[Offset: 0x2ac, Size: 1]
	byte[] DynamicTraceObjectTypes;//[Offset: 0x2b0, Size: 12]
	bool bDrawCurMoveTargetLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	bool bDrawSweepLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 1]
	bool bDrawPathRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2be, Size: 1]

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	float maxCheckDis;//[Offset: 0x260, Size: 4]
	float maxCheckDisTime;//[Offset: 0x264, Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	float PlayerHalfHeight;//[Offset: 0x270, Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x274, Size: 4]
	float MaxTransferDis;//[Offset: 0x278, Size: 4]
	float AgentRadiusMultiplier;//[Offset: 0x27c, Size: 4]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bDrawNavPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	float DrawNavPathInterval;//[Offset: 0x284, Size: 4]
	bool bDrawCurTargetLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x104, Size: 4]
	NavigationData* MyNavData;//[Offset: 0x114, Size: 4]
	void OnNavDataRegistered(NavigationData* NavData);// 0x401f4f4
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x401f374
	Vector GetPathDestination();// 0x401f32c
	byte GetPathActionType();// 0x401f304

--------------------------------
Class: STExtraMonsterAnimInstance.AnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacter* C_OwnerMonsterCharacter;//[Offset: 0x3e4, Size: 4]
	bool C_State_IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	bool C_State_IsInBattle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 1]
	bool C_State_IsProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb, Size: 1]
	bool C_State_IsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool C_State_IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	Vector C_State_HurtingDir;//[Offset: 0x3f0, Size: 12]
	float C_State_HurtingPoseAlpha;//[Offset: 0x3fc, Size: 4]
	float C_MoveSpeed;//[Offset: 0x400, Size: 4]
	float C_MoveForwardSpeed;//[Offset: 0x404, Size: 4]
	float C_MoveRightSpeed;//[Offset: 0x408, Size: 4]
	float C_MoveSpeedRate;//[Offset: 0x40c, Size: 4]
	bool bNegativeSpeedEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	bool bClientTurnEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	float bCLientTurnMinDuration;//[Offset: 0x414, Size: 4]
	Vector C_MoveForce;//[Offset: 0x418, Size: 12]
	float C_PlayMoveAnimThreshold;//[Offset: 0x424, Size: 4]
	enum C_IsInBattleState;//[Offset: 0x428, Size: 1]
	bool C_State_IsRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	bool C_State_IsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 1]
	bool C_State_IsJumpStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 1]
	bool C_State_IsFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	bool C_State_Observing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	bool C_State_IsStuning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e, Size: 1]
	bool C_State_AIPathRunning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42f, Size: 1]
	bool C_State_Climbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	enum C_State_ClimbPhase;//[Offset: 0x431, Size: 1]
	enum C_State_JumpExPhase;//[Offset: 0x432, Size: 1]
	bool C_IsClimpPhaseVerticalToHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x433, Size: 1]
	bool C_ShouldIdleInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	bool C_ShouldUseHurtAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x435, Size: 1]
	bool C_bRandomHurtDirect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x436, Size: 1]
	bool C_HasShootWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x437, Size: 1]
	Rotator C_AimRot;//[Offset: 0x438, Size: 12]
	bool C_UseDeadSnapPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	float StopDeathAnimSpeedThreshold;//[Offset: 0x448, Size: 4]
	float StopDeathAnimCheckDelay;//[Offset: 0x44c, Size: 4]
	bool bOnFireCheckIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	float FireCheckStopBlend;//[Offset: 0x454, Size: 4]
	bool bAutoSetDeathDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	float StopFallingDeathAnimCheckDelay;//[Offset: 0x460, Size: 4]
	int C_IdleBlendSpaceValue;//[Offset: 0x468, Size: 4]
	bool C_LeftLegDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 1]
	bool C_FirstStopDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46d, Size: 1]
	bool C_SecondStopDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46e, Size: 1]
	bool C_Turn_Left;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46f, Size: 1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	FName StopCurveName;//[Offset: 0x478, Size: 8]
	float C_StopCurveOutput;//[Offset: 0x480, Size: 4]
	int C_StopLegAnimType;//[Offset: 0x484, Size: 4]
	AnimSequence* C_Idle;//[Offset: 0x488, Size: 4]
	AnimSequence* C_Idle_Crouch;//[Offset: 0x48c, Size: 4]
	AnimSequence* C_Idle_Prone;//[Offset: 0x490, Size: 4]
	AnimSequence* C_Combat_Idle;//[Offset: 0x494, Size: 4]
	AnimSequence* C_Combat_Idle_Crouch;//[Offset: 0x498, Size: 4]
	AnimSequence* C_Combat_Idle_Prone;//[Offset: 0x49c, Size: 4]
	AnimSequence* C_Run;//[Offset: 0x4a0, Size: 4]
	AnimSequence* C_Run_Fighting;//[Offset: 0x4a4, Size: 4]
	BlendSpace* C_Hit;//[Offset: 0x4a8, Size: 4]
	AnimMontage* C_Stiff;//[Offset: 0x4ac, Size: 4]
	AnimSequence* C_Jump_Start;//[Offset: 0x4b0, Size: 4]
	AnimSequence* C_JumpEx_Start;//[Offset: 0x4b4, Size: 4]
	AnimSequence* C_JumpEx_Loop;//[Offset: 0x4b8, Size: 4]
	AnimSequence* C_JumpEx_End;//[Offset: 0x4bc, Size: 4]
	BlendSpace1D* C_Fall;//[Offset: 0x4c0, Size: 4]
	AnimSequence* C_Fall_Stand;//[Offset: 0x4c4, Size: 4]
	AnimSequence* C_Fall_Stand_Speed0;//[Offset: 0x4c8, Size: 4]
	AnimSequence* C_Fall_Stand_Speed1;//[Offset: 0x4cc, Size: 4]
	AnimSequence* C_Fall_Stand_Speed2;//[Offset: 0x4d0, Size: 4]
	AnimSequence* C_Fall_Stand_Speed3;//[Offset: 0x4d4, Size: 4]
	AnimSequence* C_Climb_WallVerticalLoop;//[Offset: 0x4d8, Size: 4]
	AnimSequence* C_Climb_WallVerticalToHorizontal;//[Offset: 0x4dc, Size: 4]
	AnimSequence* C_Climb_WallHorizontal;//[Offset: 0x4e0, Size: 4]
	AnimSequence* C_Climb_WallHorizontalToVertical;//[Offset: 0x4e4, Size: 4]
	AnimSequence* C_Climb_Window;//[Offset: 0x4e8, Size: 4]
	AnimSequence* C_Climb_SingleHands;//[Offset: 0x4ec, Size: 4]
	AnimSequence* C_Climb_DoubleHands;//[Offset: 0x4f0, Size: 4]
	AnimMontage* C_NormalDeath;//[Offset: 0x4f4, Size: 4]
	AnimMontage* C_HeadShotDeath;//[Offset: 0x4f8, Size: 4]
	AnimMontage* C_ImpulesDeath;//[Offset: 0x4fc, Size: 4]
	AnimMontage* C_MovingDeath;//[Offset: 0x500, Size: 4]
	AnimMontage* C_ClimbWallDeath;//[Offset: 0x504, Size: 4]
	AnimMontage* C_BurningDeath;//[Offset: 0x508, Size: 4]
	AnimMontage* C_MeleeDeath;//[Offset: 0x50c, Size: 4]
	AnimMontage* C_GobackDeath;//[Offset: 0x510, Size: 4]
	AnimSequence* C_Observe;//[Offset: 0x514, Size: 4]
	AimOffsetBlendSpace* C_WeaponAim;//[Offset: 0x518, Size: 4]
	AimOffsetBlendSpace* C_WeaponAim_Crouch;//[Offset: 0x51c, Size: 4]
	AimOffsetBlendSpace* C_WeaponAim_Prone;//[Offset: 0x520, Size: 4]
	AnimSequence* C_InSitu_Walk;//[Offset: 0x524, Size: 4]
	AnimSequence* C_Backward_Walk;//[Offset: 0x528, Size: 4]
	AnimMontage* C_BreakWallAnim;//[Offset: 0x52c, Size: 4]
	AnimMontage* C_NormalDeath_Falling;//[Offset: 0x530, Size: 4]
	UAEMonsterAnimListComponentBase* MonsterAnimListComponent;//[Offset: 0x54c, Size: 4]
	FString OwnerClassPath;//[Offset: 0x550, Size: 12]
	STExtraAnimFM_Monster_Turning MonsterTurningFM;//[Offset: 0x55c, Size: 100]
	void OnWeaponStateChanged(enum CurState);// 0x26901a8
	void OnPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x268ff04
	void OnPawnBorn(enum PawnState, byte BornType);// 0x268fe48
	void OnLeaveState(enum State);// 0x268fdd0
	void OnEnterState(enum State);// 0x268fd58
	void OnAnimLoadedFinished(MonsterAsyncloadAnimParams MonsterAsyncloadAnimParams);// 0x268fcd8
	bool IsFightrunning();// 0x249eeb4
	void HandleStiff(bool Active);// 0x268fc58
	void HandleAnimEventMsg(FString Msg);// 0x268fbc8
	enum GetSPCState();// 0x268fba0
	AnimationAsset* GetMonsterAnimByPoseType(byte PoseType);// 0x268fb20
	AnimationAsset*[] GetMonsterAnimArrayByPoseType(byte PoseType);// 0x268fa44
	void CacheParamList(float DeltaSeconds);// 0x248ff40
	void CacheAnimVarList(bool ForceRefreshVar);// 0x268f9c4

--------------------------------
Class: UAEMonsterAnimListComponentBase.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	MonsterAnimPhaseData[] MosterAnimDatas;//[Offset: 0x210, Size: 12]
	bool bUseRunAnimSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	float runAnimSpeed;//[Offset: 0x220, Size: 4]
	float runFightingAnimSpeed;//[Offset: 0x224, Size: 4]
	delegate OnMonsterAnimLoadedFinished;//[Offset: 0x228, Size: 12]
	void SortAnimations();// 0x275c210
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x2507ca0
	void OnAsyncLoadingFinished(AsyncLoadMonsterAnimParams loadAnimParams);// 0x275c06c
	void OnAsyncLoadingFinished(MonsterAsyncloadAnimParams loadAnimParams);// 0x275bfec
	AnimationAsset*[] GetMonsterPhaseAnimAssetsByType(byte PoseType);// 0x275bf10
	MonsterAnimPhaseData[] GetMonsterAnimPhaseDataByType(byte PoseType);// 0x275bde0
	AnimationAsset*[] GetMonsterAnimArrayByType(byte PoseType);// 0x275bd04
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x2507d20

--------------------------------
Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPair[] AnimDataPairs;//[Offset: 0x1a4, Size: 12]
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x1b0, Size: 4]
	<int,float> moveAnimSpeed;//[Offset: 0x1b4, Size: 60]
	float PlayMoveDeathMinimumDist;//[Offset: 0x1f0, Size: 4]
	delegate OnAnimLoadedFinished;//[Offset: 0x1f4, Size: 12]
	void SortAnimations();// 0x25dbda4
	void RemoveChildComponent(UAEAnimListComponentBase* ChildComponent);// 0x2507ca0
	void OnAsyncLoadingFinished(AsyncLoadAnimParams loadAnimParams);// 0x25dbc00
	void AddChildComponent(UAEAnimListComponentBase* ChildComponent, int Layer);// 0x2507d20

--------------------------------
Class: AnimDataPair
	int PoseTypeID;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* AnimHardPtr;//[Offset: 0x30, Size: 4]

--------------------------------
Class: MonsterAnimPhaseData
	byte PosType;//[Offset: 0x0, Size: 1]
	FName PhaseName;//[Offset: 0x8, Size: 8]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x10, Size: 40]
	AnimationAsset* PhaseAnimHardPtr;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AsyncLoadMonsterAnimParams

--------------------------------
Class: MonsterAsyncloadAnimParams
	byte PosType;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AsyncLoadAnimParams

--------------------------------
Class: STExtraAnimFM_Monster_Turning.AnimFunctionModule
	AnimSequence* as_TurnAnim_Left;//[Offset: 0x38, Size: 4]
	AnimSequence* as_TurnAnim_Right;//[Offset: 0x3c, Size: 4]
	bool b_IsTurningLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool b_IsTurningRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	float TurnResetTimeDefault;//[Offset: 0x44, Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x48, Size: 4]
	float MoveMaxSpeedWhenTuring;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: SimpleCharAnimParamList
	int IdleBlendSpaceValue;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SimpleLagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool bUsePhysVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 1]

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2, Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3, Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 1]
	float TolerateShootPointDistanceSqured;//[Offset: 0xe8, Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xec, Size: 4]
	bool bVerifyHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0xf4, Size: 12]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0x104, Size: 4]
	float TolerateSimulatedDelayTime;//[Offset: 0x108, Size: 4]
	bool bVerifyBulletFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	bool bVerifyMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e, Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f, Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 1]
	bool bVerifyShooterWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x113, Size: 1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	float BulletFlyTimeVerifyMinTime;//[Offset: 0x118, Size: 4]
	float TolerateBulletFlyTimePercentage;//[Offset: 0x11c, Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x120, Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x124, Size: 4]
	float TolerateShootHitAngle;//[Offset: 0x128, Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x12c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x130, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x134, Size: 4]
	float TolerateShootRange;//[Offset: 0x138, Size: 4]
	byte[] TraceObjectTypes;//[Offset: 0x13c, Size: 12]
	float ShooterWeaponRange;//[Offset: 0x148, Size: 4]
	float ShooterWeaponHeight;//[Offset: 0x14c, Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x154, Size: 4]
	float TolerateShootMuzzleHeight;//[Offset: 0x158, Size: 4]
	bool bUseSimpleVerifyHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	bool bUseSimpleVerifyHitParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d, Size: 1]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e, Size: 1]
	float TolerateLocusSingle;//[Offset: 0x160, Size: 4]
	float TolerateLocusDist;//[Offset: 0x164, Size: 4]
	float TolerateLocusSegment;//[Offset: 0x168, Size: 4]
	float TolerateBoxExpand;//[Offset: 0x16c, Size: 4]
	float TolerateLocusZOffsetUp;//[Offset: 0x170, Size: 4]
	float TolerateLocusZOffsetDown;//[Offset: 0x174, Size: 4]
	float LocusSearchBackTime;//[Offset: 0x178, Size: 4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x17c, Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x180, Size: 4]
	float MaxGunPosLength;//[Offset: 0x184, Size: 4]
	Vector GiftHeadBoundingBoxUpperOffset;//[Offset: 0x188, Size: 12]
	Vector GiftHeadBoundingBoxLowerOffset;//[Offset: 0x194, Size: 12]
	bool bVerifyBonePointInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	float BonePointTorelate;//[Offset: 0x1a4, Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x1a8, Size: 4]
	Character* CharacterOwner;//[Offset: 0x1ac, Size: 4]
	float SimulatedCharacterServerTime();// 0x24fe8e4
	void RPC_DrawHeadBox(CharacterHistoryData DataToDraw);// 0x24fe7d8

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0xd4, Size: 8]
	ShootVictimAntiCheatAsset* AcAsset;//[Offset: 0xdc, Size: 4]

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0, Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0, Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4, Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10, Size: 12]
	Vector Offset;//[Offset: 0x1c, Size: 12]
	Vector PitchOffset;//[Offset: 0x28, Size: 12]
	float ReferenceHSlope;//[Offset: 0x34, Size: 4]
	float ReferenceVSlope;//[Offset: 0x38, Size: 4]
	float HMinScale;//[Offset: 0x3c, Size: 4]
	float VMinScale;//[Offset: 0x40, Size: 4]
	float HMaxScale;//[Offset: 0x44, Size: 4]
	float VMaxScale;//[Offset: 0x48, Size: 4]

--------------------------------
Class: ShootVictimAntiCheatAsset.Object
	<FName,KAggregateGeom> BoneGeoms;//[Offset: 0x1c, Size: 60]

--------------------------------
Class: CharacterHistoryData
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Box BoundBox;//[Offset: 0x18, Size: 28]
	Box HeadBoundBox;//[Offset: 0x34, Size: 28]
	bool IsInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	Vector VehicleLocation;//[Offset: 0x54, Size: 12]
	enum MoveBaseState;//[Offset: 0x60, Size: 1]

--------------------------------
Class: MonsterBornStateConfig
	enum PawnState;//[Offset: 0x0, Size: 1]
	int BornType;//[Offset: 0x4, Size: 4]
	int FrontBornType;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MonsterShotGunDamageEventBroadcastData
	ItemDefineID CauserWeaponID;//[Offset: 0x0, Size: 24]
	int DamageEventType;//[Offset: 0x18, Size: 4]
	float[] DamageList;//[Offset: 0x1c, Size: 12]
	Pawn* DamageInstigatorPawn;//[Offset: 0x28, Size: 4]
	bool bIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: MonsterStunAttrModitfyConfig
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: MonsterDurationData
	enum DurationType;//[Offset: 0x0, Size: 1]
	float DurationValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MonsterClimbData
	enum ClimbPhase;//[Offset: 0x0, Size: 1]
	float ClimbLocZ;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PartDamageComponent.ActorComponent.Object
	MaterialInterface* HiddenMaterial;//[Offset: 0xfc, Size: 4]
	SkeletalMesh* damageSkeletalMesh;//[Offset: 0x100, Size: 4]
	SkeletalMesh* originSkeletalMesh;//[Offset: 0x104, Size: 4]
	bool IsPartDamaging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	PartDamagePair[] PartDamagePairs;//[Offset: 0x10c, Size: 12]
	void SwitchedToNewPose(enum activePart);// 0x242dd48
	void ProcessDamagePart(enum activePart, bool Active);// 0x25599a4

--------------------------------
Class: PartDamagePair
	bool isDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum partName;//[Offset: 0x1, Size: 1]
	float brokenDamage;//[Offset: 0x4, Size: 4]
	float accumDamage;//[Offset: 0x8, Size: 4]
	SoftObjectPath FXPath;//[Offset: 0x10, Size: 24]
	FName FXSocket;//[Offset: 0x28, Size: 8]
	byte NewPose;//[Offset: 0x30, Size: 1]
	FName newAnimListTag;//[Offset: 0x38, Size: 8]
	AnimMontage* switchListAnimation;//[Offset: 0x40, Size: 4]
	float switchListTime;//[Offset: 0x44, Size: 4]
	FName MaterialSlotName;//[Offset: 0x48, Size: 8]
	FString attrModName;//[Offset: 0x50, Size: 12]
	PartDamageAttrModitfyConfig[] attrMods;//[Offset: 0x5c, Size: 12]
	BloodSetting BloodSetting;//[Offset: 0x68, Size: 56]

--------------------------------
Class: PartDamageAttrModitfyConfig
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BloodSetting
	int DecalId;//[Offset: 0x0, Size: 4]
	int decalMaxID;//[Offset: 0x4, Size: 4]
	Rotator decalRotateStartDir;//[Offset: 0x8, Size: 12]
	Rotator decalRotateEndDir;//[Offset: 0x14, Size: 12]
	float decalOffsetMinDistance;//[Offset: 0x20, Size: 4]
	float decalOffsetMaxDistance;//[Offset: 0x24, Size: 4]
	Vector decalScale3D;//[Offset: 0x28, Size: 12]
	float decalShowDelay;//[Offset: 0x34, Size: 4]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	bool bHitOtherDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]

--------------------------------
Class: STPointDamageEvent.PointDamageEvent.DamageEvent
	int ItemID;//[Offset: 0xa0, Size: 4]

--------------------------------
Class: PointDamageEvent.DamageEvent
	float Damage;//[Offset: 0x8, Size: 4]
	Vector_NetQuantizeNormal ShotDirection;//[Offset: 0xc, Size: 12]
	HitResult HitInfo;//[Offset: 0x18, Size: 136]

--------------------------------
Class: RadialDamageEvent.DamageEvent
	RadialDamageParams Params;//[Offset: 0x8, Size: 20]
	Vector Origin;//[Offset: 0x1c, Size: 12]
	HitResult[] ComponentHits;//[Offset: 0x28, Size: 12]

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 4]
	float MinimumDamage;//[Offset: 0x4, Size: 4]
	float InnerRadius;//[Offset: 0x8, Size: 4]
	float OuterRadius;//[Offset: 0xc, Size: 4]
	float DamageFalloff;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PoisonDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: MeleeDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte MeleeWeaponSubType;//[Offset: 0xa4, Size: 1]
	byte AvatarDamagePosition;//[Offset: 0xa5, Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 1]

--------------------------------
Class: FallingDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	Vector FallingSpeed;//[Offset: 0xa4, Size: 12]

--------------------------------
Class: DrowningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STBurningDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: STAirAttackRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface[] WheelSfxOnSurface;//[Offset: 0x20, Size: 12]

--------------------------------
Class: WheelSfxOnSurface
	PhysicalMaterial* SurfaceMaterial;//[Offset: 0x0, Size: 4]
	AkAudioEvent* EventStart;//[Offset: 0x4, Size: 4]
	AkAudioEvent* EventStop;//[Offset: 0x8, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoop.STExtraVehicleSfxLoopBase
	AkAudioEvent* AkEvent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: STExtraVehicleSfxLoopBase
	AkComponent* AKComp;//[Offset: 0x0, Size: 4]
	<uint32,float> MapRTPC;//[Offset: 0x4, Size: 60]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x26c, Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x270, Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x27c, Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x280, Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x284, Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28c, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28c, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28e, Size: 1]
	bool bForceUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28e, Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28e, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x29c, Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x2a0, Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2a4, Size: 4]
	FString EventName;//[Offset: 0x2a8, Size: 12]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x539a934
	void UseEarlyReflections(AkAuxBus* AuxBus, bool Left, bool Right, bool Floor, bool Ceiling, bool Back, bool Front, bool SpotReflectors, FString AuxBusName);// 0x539a638
	void StopPlayingID(int StopEventID);// 0x539a5c0
	void Stop();// 0x539a5ac
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x539a418
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x539a398
	void SetRTPCValueGlobally(FString RTPC, float Value);// 0x539a270
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x539a104
	void SetOutputBusVolume(float BusVolume);// 0x539a08c
	void SetListeners(out const AkComponent*[] Listeners);// 0x5399fec
	void SetEarlyReflectionOrder(int NewEarlyReflectionOrder);// 0x5399f74
	void SetAutoDestroy(bool in_AutoDestroy);// 0x5399ef8
	void SetAttenuationScalingFactor(float Value);// 0x5399e80
	void PostTrigger(FString Trigger);// 0x5399d9c
	int PostAssociatedAkEvent();// 0x5399d74
	int PostAkEventByName(FString in_EventName);// 0x5399cdc
	int PostAkEvent(AkAudioEvent* AkEvent, FString in_EventName);// 0x5399c00
	bool IsStart();// 0x5399be4
	bool HasActiveEvents();// 0x5399bbc
	float GetAttenuationRadius();// 0x5399b94

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: STExtraVehicleWheelSfxOnSurface.STExtraVehicleSfxLoopBase
	PhysicalMaterial* LastSurfaceMaterial;//[Offset: 0x40, Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0x44, Size: 4]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0, Size: 1]
	int8 ThrottleInput;//[Offset: 0x1, Size: 1]
	int8 BrakeInput;//[Offset: 0x2, Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3, Size: 1]
	int8 CurrentGear;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PopKartPassDoorAccelerate
	bool CanUsePassDoorAccelerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float PassAcceleratePercent;//[Offset: 0x4, Size: 4]
	float MaxSpeed;//[Offset: 0x8, Size: 4]
	float minSpeed;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PlayerLevel
	float CurrentExp;//[Offset: 0x0, Size: 4]
	float LevelUpExp;//[Offset: 0x4, Size: 4]
	float LastLevelUpExp;//[Offset: 0x8, Size: 4]
	int CurrentLevel;//[Offset: 0xc, Size: 4]
	int NextLevel;//[Offset: 0x10, Size: 4]
	float TotalDamage;//[Offset: 0x14, Size: 4]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x2e4, Size: 4]
	int DecalId;//[Offset: 0x2e8, Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x2f0, Size: 112]
	STExtraPlayerState* OwnerPS;//[Offset: 0x360, Size: 4]
	void OnRep_DecalInfo();// 0x24ece8c

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0, Size: 4]
	Transform Transform;//[Offset: 0x10, Size: 48]
	enum ParentType;//[Offset: 0x50, Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x54, Size: 8]

--------------------------------
Class: HunterTaskTeamMgr.Actor.Object
	int MapMarkItemID;//[Offset: 0x2e4, Size: 4]
	int MapScanerItemID;//[Offset: 0x2e8, Size: 4]
	int HuntTaskTimeOut;//[Offset: 0x2ec, Size: 4]
	int HuntTaskID;//[Offset: 0x2f0, Size: 4]
	float HuntTaskScanInterval;//[Offset: 0x2f4, Size: 4]
	HunterTaskListener* HunterTaskListener;//[Offset: 0x2f8, Size: 4]
	HuntedTeammateInfo[] BeingHuntedPlayersInTeam;//[Offset: 0x2fc, Size: 12]
	HuntTargetInfo TargetHuntedPlayer;//[Offset: 0x308, Size: 28]
	HuntTargetRepInfo[] HuntTargetRepInfoList;//[Offset: 0x324, Size: 12]
	HuntTaskPickerInfo HuntPickerInfo;//[Offset: 0x330, Size: 20]
	int[] LocalMapMarkIDList;//[Offset: 0x344, Size: 12]
	int LocalMarkInstID;//[Offset: 0x350, Size: 4]
	Actor*[] VisitedHunterStores;//[Offset: 0x354, Size: 12]
	int CurrentTeamID;//[Offset: 0x360, Size: 4]
	MarkSyncData LocalMarkData;//[Offset: 0x364, Size: 88]
	<int> MapMarkIDSet;//[Offset: 0x3bc, Size: 60]
	void UpdateHuntedPlayerInfoInTeam(STExtraPlayerState* PlayerState, float Dist);// 0x24ebb10
	void SetHuntedTargetInfo(HuntTargetInfo TargetInfo);// 0x24eba50
	void RemoveHuntTargetPlayer(STExtraPlayerState* PlayerState);// 0x24eb9d8
	void RemoveHuntedPlayerInTeam(STExtraPlayerState* PlayerState);// 0x24eb960
	bool PickHuntTask(Object* Picker);// 0x24eb8e0
	void OnUpdateBeingHuntedTeammate();// 0x46f6b154
	void OnTaskCompleted(int TaskID);// 0x46f6b154
	void OnRep_TargetHuntedPlayer();// 0x24eb8cc
	void OnRep_HuntTaskPickerInfo();// 0x24eb8b8
	void OnRep_HuntTargetRepInfoList();// 0x24eb8a4
	void OnRep_BeingHuntedPlayersInTeam();// 0x24eb890
	void OnNotifyHuntTargetRepInfoList();// 0x46f6b154
	bool IsTaskExist(int TaskID);// 0x24eb810
	bool HasPlayerBeingHunted(STExtraPlayerState* PlayerState);// 0x24eb790
	bool HandleUseTaskItem(int TaskID, Object* Picker);// 0x24eb6cc
	void GetVisitedHunterStores(out Actor*[] OutList);// 0x24eb62c
	int GetTaskCompletedTimes(int TaskID);// 0x24eb5ac
	void AddOrUpdateHuntTargetPlayer(HuntTargetRepInfo RepInfo);// 0x24eb480
	void AddHuntedPlayerInTeam(STExtraPlayerState* PlayerState, float Dist);// 0x24eb3c4

--------------------------------
Class: HunterTaskListener.UniversalTaskController.ActorComponent.Object
	<int,int> TaskCompletedTimes;//[Offset: 0x1a8, Size: 60]
	HunterTaskTeamMgr* DataOwner;//[Offset: 0x1e4, Size: 4]
	bool OnHandleUseTaskItem(int TaskID, Object* Picker);// 0x24ea830
	int GetTaskCompletedTimes(int TaskID);// 0x24ea7b0

--------------------------------
Class: UniversalTaskController.ActorComponent.Object
	delegate OnNotifyTaskInfo;//[Offset: 0xd0, Size: 12]
	<int,TaskEventCache> AutoTriggerEventRecord;//[Offset: 0xdc, Size: 60]
	TaskRepInfo[] ReplicatedTaskList;//[Offset: 0x118, Size: 12]
	UniversalTaskMgr* OwnerManager;//[Offset: 0x124, Size: 4]
	<int,UniversalTaskBlackboard*> TaskBlackboardMap;//[Offset: 0x128, Size: 60]
	<int,int> TaskProgressRecord;//[Offset: 0x164, Size: 60]
	void TriggerOccupyEvent(int TaskID);// 0x5538e34
	void OnTaskDoneNotify(int TaskID);// 0x46f6b154
	void OnRep_ReplicatedTaskList();// 0x5538e20
	void OnRep_OwnerManager();// 0x5538e0c
	void OnClientReceiveOwnerManager();// 0x46f6b154
	void Initialize(UniversalTaskMgr* TaskMgr);// 0x236c05c
	bool HasTask(int TaskID);// 0x5538d8c
	int GetTaskNumber();// 0x5538d64
	UniversalTaskMgr* GetOwnerTaskMgr();// 0x5538d3c

--------------------------------
Class: TaskEventCache
	float[] TriggerTimerList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: TaskRepInfo
	int TaskID;//[Offset: 0x0, Size: 4]
	int CurrentProcess;//[Offset: 0x4, Size: 4]
	int TotalProcess;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UniversalTaskMgr.Actor.Object
	<int,FString> TaskTemplateMap;//[Offset: 0x2e8, Size: 60]
	<int,int> AdditionMapList;//[Offset: 0x324, Size: 60]
	FString[] GlobalTaskClassList;//[Offset: 0x360, Size: 12]
	class UniversalTaskController* PlayerTaskControllerClass;//[Offset: 0x36c, Size: 4]
	bool bApplyToObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	<int,UniversalTask*> PlayerTaskMap;//[Offset: 0x374, Size: 60]
	<int> PlayerBornTaskSet;//[Offset: 0x3b0, Size: 60]
	UniversalTask*[] GlobalTaskList;//[Offset: 0x3ec, Size: 12]
	<SharedBlackboardAsset*,UniversalTaskBlackboard*> SharedBlackboards;//[Offset: 0x3f8, Size: 60]
	UniversalTaskController*[] AllTaskControllers;//[Offset: 0x434, Size: 12]
	void SetPlayerTaskTargetProgress(int InTaskID, int TargetProgress);// 0x553b9d0
	void RunGlobalTasks();// 0x553b9bc
	void RunAllPlayerTask();// 0x553b9a8
	void RegisterPlayerBornTaskListener(UniversalTaskController* ParentController);// 0x553b930
	void OnTaskDoneNotify(UniversalTaskController* Controller, int TaskID);// 0x46f6b154
	void OnTaskControllerRegistered(UniversalTaskController* TaskController);// 0x46f6b154
	void OnGameStateReady();// 0x46f6b154
	bool NeedReplicatedTask(int TaskID);// 0x25b443c
	bool IsPlayerTaskTemplateExist(int InTaskType);// 0x553b8b0
	bool IsPlayerBornTask(int InTaskID);// 0x553b830
	UniversalTaskBlackboard* InstantiateTaskBlackboardByType(int InTaskID, int InTaskTypeID, UniversalTaskController* ParentController);// 0x553b728
	UniversalTask* GetTaskByID(int InTaskID);// 0x2520370
	bool CreatePlayerBornTaskFormDataTable();// 0x46f6b154
	void CreateOnePlayerTask(int InTaskID, int InTaskTypeID, bool IsPlayerBornTask, bool RunTask, int TargetProgress);// 0x553b584
	void CreateGlobalTasks();// 0x553b570
	bool CreateAndRegisterPlayerTaskListener(int InTaskID, int InTaskTypeID, UniversalTaskController* ParentController);// 0x553b468
	bool ConstructTaskFlow();// 0x46f6b154

--------------------------------
Class: UniversalTask.UAETriggerObject.Object
	int TaskID;//[Offset: 0x138, Size: 4]
	int TaskTypeID;//[Offset: 0x13c, Size: 4]
	int TargetTaskProgress;//[Offset: 0x140, Size: 4]
	int CurrentTaskProgress;//[Offset: 0x144, Size: 4]
	enum TaskRunningState;//[Offset: 0x148, Size: 1]
	UniversalTaskNode* RootNode;//[Offset: 0x14c, Size: 4]
	bool bIsLuaTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	UniversalTaskBlackboard* TaskBlackboard;//[Offset: 0x154, Size: 4]
	SharedBlackboardAsset* SharedBlackboardAsset;//[Offset: 0x158, Size: 4]
	UniversalTaskFuncBPBase* TaskFuncBP;//[Offset: 0x15c, Size: 4]
	UniversalTaskNode*[] AllTaskNodes;//[Offset: 0x160, Size: 12]
	UniversalTaskActionNodeEvent*[] EventRoots;//[Offset: 0x16c, Size: 12]
	UniversalTaskActionNodeEvent*[] AutoTriggerEvents;//[Offset: 0x178, Size: 12]
	<Guid,DerivedTaskNodeModifiedDetail> DerivedTaskModifiedNodesDetail;//[Offset: 0x184, Size: 60]
	bool bIsEventTriggerTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	UniversalTaskBlackboardParameter[] BlackboardParamList;//[Offset: 0x1c4, Size: 12]
	UniversalTask* BaseTaskAsset;//[Offset: 0x1d0, Size: 4]
	class Object* TaskEventFunctionLibrary;//[Offset: 0x1d4, Size: 4]
	TriggerEventKeySelector TaskEventSelector;//[Offset: 0x1d8, Size: 8]
	Actor* OwnerActor;//[Offset: 0x1e0, Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x1e4, Size: 4]
	FString ContextString;//[Offset: 0x1e8, Size: 12]
	UniversalTaskNode*[] NodeEntryList;//[Offset: 0x1f4, Size: 12]
	UniversalTaskNode*[] NodeTickList;//[Offset: 0x200, Size: 12]
	UniversalTaskNode*[] TempTickList;//[Offset: 0x20c, Size: 12]
	UniversalTaskController*[] PlayerTaskListenerList;//[Offset: 0x218, Size: 12]
	UniversalTaskController*[] PlayerTaskListenerTempList;//[Offset: 0x224, Size: 12]
	UniversalTaskController* CurrentTaskControllerRef;//[Offset: 0x230, Size: 8]
	UniversalTaskBlackboard* CurrentTaskBlackboardRef;//[Offset: 0x238, Size: 8]
	UniversalTaskBlackboard* SharedTaskBlackboardRef;//[Offset: 0x240, Size: 8]
	void TriggerTaskEventFrequently(UniversalTaskNode* EventRoot, UniversalTaskController* InTaskListener, UniversalTaskBlackboard* BlackBoard);// 0x5534ab4
	void TriggerTaskEventByListener(FString EventName, UniversalTaskController* InTaskListener);// 0x553498c
	void TriggerTaskEventByFrequency(float TimeDelta);// 0x5534914
	void TriggerTaskEvent(FString EventName);// 0x5534830
	void Tick(float DeltaSeconds);// 0x55347b8
	void StopFlow();// 0x55347a4
	void SetSharedTaskBlackboard(UniversalTaskBlackboard* SharedBlackboard);// 0x553472c
	void SetOwnerComponent(ActorComponent* NewOwner);// 0x55346b4
	void SetOwnerActor(Actor* NewOwner);// 0x553463c
	void RunFlowOnce();// 0x5534628
	void RunFlow();// 0x5534614
	void ResumeFlow();// 0x5534600
	void ReceiveTaskExecute();// 0x46f6b154
	void PauseFlow();// 0x55345ec
	void InitTaskBlackboard();// 0x55345d8
	UniversalTaskBlackboard* GetTaskBlackboard();// 0x55345b0
	FString GetTableValueAsString(enum ParamType);// 0x55344d4
	int GetTableValueAsInt32(enum ParamType);// 0x5534454
	UniversalTaskBlackboard* GetSharedTaskBlackboard();// 0x553442c
	UniversalTaskNode* GetRootNode();// 0x24deb64
	UniversalTaskController* GetPlayerTaskController();// 0x5534404
	ActorComponent* GetOwnerComponent();// 0x55343dc
	Actor* GetOwnerActor();// 0x2e62780
	Vector GetEventValueAsVector(out const FName Key);// 0x5534338
	FString GetEventValueAsString(out const FName Key);// 0x5534248
	Object* GetEventValueAsObject(out const FName Key);// 0x55341b4
	int GetEventValueAsInt(out const FName Key);// 0x5534120
	float GetEventValueAsFloat(out const FName Key);// 0x553408c
	bool GetEventValueAsBool(out const FName Key);// 0x5533ff8
	Actor* GetCurrentListeningActor();// 0x5533fd0
	void ExecuteTaskByListener(UniversalTaskController* InTaskListener);// 0x5533f58
	void EndPlay();// 0x235d4b8
	void BeginPlay();// 0x235d4b8
	void AddPlayerTaskListener(UniversalTaskController* InTaskListener);// 0x5533ee0

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x1c, Size: 1]
	FString TriggerName;//[Offset: 0x20, Size: 12]
	Actor* OuterActor;//[Offset: 0x2c, Size: 4]
	class Object[] TriggerEventsClass;//[Offset: 0x30, Size: 12]
	TriggerAction*[] TriggerActions;//[Offset: 0x3c, Size: 12]
	TriggerCondition*[] TriggerConditions;//[Offset: 0x48, Size: 12]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x54, Size: 4]
	<TriggerEvent*> TriggeredEvents;//[Offset: 0x74, Size: 60]
	<TriggerAction*> CompleteActions;//[Offset: 0xb0, Size: 60]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0xec, Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	float TickInterval;//[Offset: 0x108, Size: 4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	FString Description;//[Offset: 0x110, Size: 12]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	Property*[] EventParams;//[Offset: 0x120, Size: 12]

--------------------------------
Class: UniversalTaskNode.Object
	Guid NodeGuid;//[Offset: 0x24, Size: 16]
	UniversalTask* OwnerUniversalTask;//[Offset: 0x34, Size: 4]
	UniversalTaskNode* ParentNode;//[Offset: 0x38, Size: 4]
	UniversalTaskNodePinOut[] OutputPinList;//[Offset: 0x3c, Size: 12]
	enum CurrentState;//[Offset: 0x48, Size: 1]
	void TriggerTaskEvent(FString EventName);// 0x553f470
	void SetSharedBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x553f39c
	void SetSharedBlackboardValueAsVector(out const TaskBlackboardKeySelector Key, Vector VectorValue);// 0x553f2b8
	void SetSharedBlackboardValueAsString(out const TaskBlackboardKeySelector Key, FString StringValue);// 0x553f178
	void SetSharedBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key, Rotator VectorValue);// 0x553f0a4
	void SetSharedBlackboardValueAsObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x553efd0
	void SetSharedBlackboardValueAsName(out const TaskBlackboardKeySelector Key, FName NameValue);// 0x553eefc
	void SetSharedBlackboardValueAsInt(out const TaskBlackboardKeySelector Key, int IntValue);// 0x553ee28
	void SetSharedBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key, float FloatValue);// 0x553ed54
	void SetSharedBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key, byte EnumValue);// 0x553ec80
	void SetSharedBlackboardValueAsClass(out const TaskBlackboardKeySelector Key, class Object ClassValue);// 0x553ebac
	void SetSharedBlackboardValueAsBool(out const TaskBlackboardKeySelector Key, bool BoolValue);// 0x553ead0
	void SetNodeState(enum NewState);// 0x553ea5c
	void SetCurrentTaskProgress(int Progress);// 0x553e9e4
	void SetBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x553e910
	void SetBlackboardValueAsVector(out const TaskBlackboardKeySelector Key, Vector VectorValue);// 0x553e82c
	void SetBlackboardValueAsString(out const TaskBlackboardKeySelector Key, FString StringValue);// 0x553e6ec
	void SetBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key, Rotator VectorValue);// 0x553e618
	void SetBlackboardValueAsObject(out const TaskBlackboardKeySelector Key, Object* ObjectValue);// 0x553e544
	void SetBlackboardValueAsName(out const TaskBlackboardKeySelector Key, FName NameValue);// 0x553e470
	void SetBlackboardValueAsInt(out const TaskBlackboardKeySelector Key, int IntValue);// 0x553e39c
	void SetBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key, float FloatValue);// 0x553e2c8
	void SetBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key, byte EnumValue);// 0x553e1f4
	void SetBlackboardValueAsClass(out const TaskBlackboardKeySelector Key, class Object ClassValue);// 0x553e120
	void SetBlackboardValueAsBool(out const TaskBlackboardKeySelector Key, bool BoolValue);// 0x553e044
	void OnTick(float DeltaSeconds);// 0x46f6b154
	void OnTaskCompleted();// 0x553e030
	void OnEndPlay();// 0x46f6b154
	void OnBeginPlay();// 0x46f6b154
	bool IsNodeActive();// 0x553e00c
	bool IsDedicatedServer();// 0x553dfe4
	bool IsBlackboardExistWeakObject(out const TaskBlackboardKeySelector Key);// 0x553df50
	bool IsBlackboardExistVector(out const TaskBlackboardKeySelector Key);// 0x553debc
	bool IsBlackboardExistString(out const TaskBlackboardKeySelector Key);// 0x553de28
	bool IsBlackboardExistRotator(out const TaskBlackboardKeySelector Key);// 0x553dd94
	bool IsBlackboardExistObject(out const TaskBlackboardKeySelector Key);// 0x553dd00
	bool IsBlackboardExistName(out const TaskBlackboardKeySelector Key);// 0x553dc6c
	bool IsBlackboardExistInt(out const TaskBlackboardKeySelector Key);// 0x553dbd8
	bool IsBlackboardExistFloat(out const TaskBlackboardKeySelector Key);// 0x553db44
	bool IsBlackboardExistEnum(out const TaskBlackboardKeySelector Key);// 0x553dab0
	bool IsBlackboardExistClass(out const TaskBlackboardKeySelector Key);// 0x553da1c
	bool IsBlackboardExistBool(out const TaskBlackboardKeySelector Key);// 0x553d988
	void GoToNext(int PinIndex);// 0x553d910
	float GetTimeSeconds();// 0x553d8e8
	int GetTaskType();// 0x553d8c0
	int GetTaskTargetProcess();// 0x553d898
	int GetTaskID();// 0x553d870
	UniversalTaskBlackboard* GetTaskBlackboard();// 0x553d848
	bool GetTableParameterString(out FString Dest, enum ParamType);// 0x553d758
	bool GetTableParameterInt32(out int Dest, enum ParamType);// 0x553d680
	Object* GetSharedBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key);// 0x553d5ec
	Vector GetSharedBlackboardValueAsVector(out const TaskBlackboardKeySelector Key);// 0x553d548
	FString GetSharedBlackboardValueAsString(out const TaskBlackboardKeySelector Key);// 0x553d458
	Rotator GetSharedBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key);// 0x553d3b4
	Object* GetSharedBlackboardValueAsObject(out const TaskBlackboardKeySelector Key);// 0x553d320
	FName GetSharedBlackboardValueAsName(out const TaskBlackboardKeySelector Key);// 0x553d284
	int GetSharedBlackboardValueAsInt(out const TaskBlackboardKeySelector Key);// 0x553d1f0
	float GetSharedBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key);// 0x553d15c
	byte GetSharedBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key);// 0x553d0c8
	class Object GetSharedBlackboardValueAsClass(out const TaskBlackboardKeySelector Key);// 0x553d034
	bool GetSharedBlackboardValueAsBool(out const TaskBlackboardKeySelector Key);// 0x553cfa0
	int GetRuntimeOutputPinNumber();// 0x553cf84
	UniversalTaskNode* GetParentNode();// 0x2e81f14
	UniversalTask* GetOwner();// 0x2e81cc8
	ActorComponent* GetOuterComponent();// 0x553cf5c
	Actor* GetOuterActor();// 0x553cf34
	enum GetNodeState();// 0x553cf18
	Actor* GetListenActor();// 0x553cef0
	UniversalTaskNode*[] GetFollowNodesByPinIndex(int PinIndex);// 0x553ce14
	FString GetEventValueAsString(out const TriggerEventParamKeySelector Key);// 0x553cd0c
	int GetEventValueAsInt(out const TriggerEventParamKeySelector Key);// 0x553cc5c
	float GetEventValueAsFloat(out const TriggerEventParamKeySelector Key);// 0x553cbac
	bool GetEventValueAsBool(out const TriggerEventParamKeySelector Key);// 0x553cafc
	int GetCurrentTaskProcess();// 0x553cad4
	Object* GetBlackboardValueAsWeakObject(out const TaskBlackboardKeySelector Key);// 0x553ca40
	Vector GetBlackboardValueAsVector(out const TaskBlackboardKeySelector Key);// 0x553c99c
	FString GetBlackboardValueAsString(out const TaskBlackboardKeySelector Key);// 0x553c8ac
	Rotator GetBlackboardValueAsRotator(out const TaskBlackboardKeySelector Key);// 0x553c808
	Object* GetBlackboardValueAsObject(out const TaskBlackboardKeySelector Key);// 0x553c774
	FName GetBlackboardValueAsName(out const TaskBlackboardKeySelector Key);// 0x553c6d8
	int GetBlackboardValueAsInt(out const TaskBlackboardKeySelector Key);// 0x553c644
	float GetBlackboardValueAsFloat(out const TaskBlackboardKeySelector Key);// 0x553c5b0
	byte GetBlackboardValueAsEnum(out const TaskBlackboardKeySelector Key);// 0x553c51c
	class Object GetBlackboardValueAsClass(out const TaskBlackboardKeySelector Key);// 0x553c488
	bool GetBlackboardValueAsBool(out const TaskBlackboardKeySelector Key);// 0x553c3f4
	void ExecuteNext(int PinIndex);// 0x553c37c

--------------------------------
Class: UniversalTaskNodePinOut
	Guid PinId;//[Offset: 0x0, Size: 16]
	UniversalTaskNode*[] FollowNodes;//[Offset: 0x10, Size: 12]

--------------------------------
Class: TaskBlackboardKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UniversalTaskBlackboard.Object
	<FName,Object*> ObjectParamMap;//[Offset: 0x1c, Size: 60]
	<FName,Object*> WeakObjectParamMap;//[Offset: 0x58, Size: 60]
	<FName,class Object> ClassParamMap;//[Offset: 0x94, Size: 60]
	<FName,byte> EnumParamMap;//[Offset: 0xd0, Size: 60]
	<FName,int> IntParamMap;//[Offset: 0x10c, Size: 60]
	<FName,uint32> UIntParamMap;//[Offset: 0x148, Size: 60]
	<FName,float> FloatParamMap;//[Offset: 0x184, Size: 60]
	<FName,bool> BoolParamMap;//[Offset: 0x1c0, Size: 60]
	<FName,FString> StringParamMap;//[Offset: 0x1fc, Size: 60]
	<FName,FName> NameParamMap;//[Offset: 0x238, Size: 60]
	<FName,Vector> VectorParamMap;//[Offset: 0x274, Size: 60]
	<FName,Rotator> RotatorParamMap;//[Offset: 0x2b0, Size: 60]
	void SetValueAsWeakObject(out const FName KeyName, Object* ObjectValue);// 0x55373cc
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x55372e8
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x55371a8
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x55370d4
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x5537000
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x5536f2c
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x5536e58
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x5536d84
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x5536cb0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x5536bdc
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x5536b00
	bool IsExistWeakObject(out const FName KeyName);// 0x54baa84
	bool IsExistVector(out const FName KeyName);// 0x54ba9f0
	bool IsExistString(out const FName KeyName);// 0x54ba95c
	bool IsExistRotator(out const FName KeyName);// 0x54ba8c8
	bool IsExistObject(out const FName KeyName);// 0x54ba834
	bool IsExistName(out const FName KeyName);// 0x54ba7a0
	bool IsExistInt(out const FName KeyName);// 0x54ba70c
	bool IsExistFloat(out const FName KeyName);// 0x54ba678
	bool IsExistEnum(out const FName KeyName);// 0x54ba5e4
	bool IsExistClass(out const FName KeyName);// 0x54ba550
	bool IsExistBool(out const FName KeyName);// 0x54ba4bc
	Object* GetValueAsWeakObject(out const FName KeyName);// 0x5536a6c
	Vector GetValueAsVector(out const FName KeyName);// 0x55369c8
	FString GetValueAsString(out const FName KeyName);// 0x55368d8
	Rotator GetValueAsRotator(out const FName KeyName);// 0x5536834
	Object* GetValueAsObject(out const FName KeyName);// 0x55367a0
	FName GetValueAsName(out const FName KeyName);// 0x5536704
	int GetValueAsInt(out const FName KeyName);// 0x5536670
	float GetValueAsFloat(out const FName KeyName);// 0x55365dc
	byte GetValueAsEnum(out const FName KeyName);// 0x5536548
	class Object GetValueAsClass(out const FName KeyName);// 0x55364b4
	bool GetValueAsBool(out const FName KeyName);// 0x5536420

--------------------------------
Class: TriggerEventParamKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]
	FString ParamData;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SharedBlackboardAsset.DataAsset.Object
	<FName,byte> SharedBlackboardParameters;//[Offset: 0x20, Size: 60]

--------------------------------
Class: UniversalTaskFuncBPBase.UniversalTaskNode.Object
	TaskFuncNameSelector FuncNameKey;//[Offset: 0x50, Size: 8]

--------------------------------
Class: TaskFuncNameSelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: UniversalTaskActionNodeEvent.UniversalTaskActionNode.UniversalTaskNode.Object
	FString EventName;//[Offset: 0x4c, Size: 12]
	TriggerEventKeySelector CustomEventSelector;//[Offset: 0x58, Size: 8]
	bool bIsAutoTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float TriggerFrequency;//[Offset: 0x64, Size: 4]

--------------------------------
Class: UniversalTaskActionNode.UniversalTaskNode.Object
	bool OnExecute();// 0x46f6b154

--------------------------------
Class: TriggerEventKeySelector
	FName SelectedKeyName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: DerivedTaskNodeModifiedDetail
	UniversalTaskNode* ModifiedNode;//[Offset: 0x0, Size: 4]
	<FName> ModifiedPropertyNames;//[Offset: 0x4, Size: 60]

--------------------------------
Class: UniversalTaskBlackboardParameter
	FName Name;//[Offset: 0x0, Size: 8]
	byte Type;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x1c, Size: 4]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	enum ExecPolicy;//[Offset: 0x35, Size: 1]
	UAETriggerObject* ParentTrigger;//[Offset: 0x38, Size: 4]
	UAELevelDirector* ActionOuterActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: VariableSet.Object
	<FName,UAETriggerVariableDesc> BlackboardVariableDescList;//[Offset: 0x1c, Size: 60]
	VariableSetCachedActors DataActors;//[Offset: 0x58, Size: 64]

--------------------------------
Class: UAETriggerVariableDesc
	enum Type;//[Offset: 0x0, Size: 1]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: UAELevelDirector.Actor.Object
	LevelDirectorInstCondition[] InstanceConditions;//[Offset: 0x2e4, Size: 12]
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x2f0, Size: 12]
	FString[] ClassPaths;//[Offset: 0x2fc, Size: 12]
	FString ConfigFilePath;//[Offset: 0x308, Size: 12]
	class UAELevelDirector_PlayerRepInfo* PlayerRepInfoClass;//[Offset: 0x314, Size: 4]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x318, Size: 16]
	<uint32,UAELevelDirector_PlayerRepInfo*> AllPlayersRepInfo;//[Offset: 0x328, Size: 60]
	UAETriggerFuncLib*[] FunctionLibList;//[Offset: 0x364, Size: 12]
	TriggersFlowTree* TriggersFlowTree;//[Offset: 0x370, Size: 4]
	<FString,UAETriggerObject*> TriggerObjectMap;//[Offset: 0x374, Size: 60]
	VariableSet* AllVariableSet;//[Offset: 0x3b0, Size: 4]
	FString DescData;//[Offset: 0x3b4, Size: 12]
	UAELevelDirector_PlayerRepInfo* CurLevelDirector_PlayerRepInfo;//[Offset: 0x3c0, Size: 4]
	<uint32,UAELevelDirector_PlayerRepInfo*> HistoryLevelDirector_PlayerRepInfos;//[Offset: 0x3c4, Size: 60]
	FString[] IDIP_Action_SpecialTag;//[Offset: 0x408, Size: 12]
	bool StartLevelDirector();// 0x5517c80
	void SetTriggerRunType(FString TriggerName, enum RunType);// 0x5517b58
	void RequestTriggerComplete(UAETriggerObject* CompleteTrigger);// 0x5517aa4
	void OnRep_LevelDirectorData();// 0x5517a90
	bool InitialLevelDirector();// 0x273c73c
	VariableSet* GetDataSet();// 0x5517a68
	bool FlowControllSubControll(FString[] TriggerNames);// 0x55178dc
	bool FlowControllOr(FString[] TriggerNames);// 0x5517750
	bool FlowControllOneSequence(FString TriggerName);// 0x5517664
	bool FlowControllMultiSequence(FString[] TriggerNames);// 0x55174d8
	bool FlowControllAnd(FString[] TriggerNames);// 0x551734c
	void ClientExecuteAction(FString ActionClassName, int64 UID, const TriggerParamRepData[] RepParams, bool IsKeep, bool IsRevert, UAELevelDirector_PlayerRepInfo* InLevelDirector_PlayerRepInfo);// 0x55170e8
	void AddEventToTrigger(FString TriggerName, class Object Event);// 0x5516fc0
	TriggerCondition* AddConditionToTrigger(FString TriggerName, class Object Condition);// 0x5516e90

--------------------------------
Class: LevelDirectorInstCondition
	int64 ConditionUniqueID;//[Offset: 0x0, Size: 8]
	TriggerCondition* Condition;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x1c, Size: 4]
	UAETriggerObject* ParentTrigger;//[Offset: 0x34, Size: 4]

--------------------------------
Class: LevelDirectorInstAction
	int64 ActionUniqueID;//[Offset: 0x0, Size: 8]
	TriggerAction* Action;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAELevelDirector_PlayerRepInfo.Info.Actor.Object
	TriggerActionRepData[] ActionRepDatas;//[Offset: 0x2e4, Size: 12]
	uint32 UniqueId;//[Offset: 0x2f0, Size: 4]
	UAELevelDirector* RelevantLevelDirector;//[Offset: 0x2f4, Size: 4]
	void OnRep_LevelDirector();// 0x5518728
	void OnRep_ActionRepDatas();// 0x5518714
	void ClientExecuteAction(const TriggerActionRepData InActionRepData);// 0x5518620

--------------------------------
Class: TriggerActionRepData
	int64 RepID;//[Offset: 0x0, Size: 8]
	int64 UID;//[Offset: 0x8, Size: 8]
	FString ActionClassName;//[Offset: 0x10, Size: 12]
	TriggerParamRepData[] ParamDatas;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: TriggerParamRepData
	byte ParamType;//[Offset: 0x0, Size: 1]
	byte ParamSubType;//[Offset: 0x1, Size: 1]
	FString ParamName;//[Offset: 0x4, Size: 12]
	byte[] ParamData;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0, Size: 16]

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0, Size: 12]
	int NodeID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x1c, Size: 12]
	FString[] EventsShowInUGC;//[Offset: 0x28, Size: 12]
	FString[] ConditionsShowInUGC;//[Offset: 0x34, Size: 12]
	FString[] ActionsShowInUGC;//[Offset: 0x40, Size: 12]
	VariableSet* DataSet;//[Offset: 0x4c, Size: 4]
	Actor* GetLastIteratorActor();// 0x551a71c

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0, Size: 12]
	FString ClassFullPath;//[Offset: 0xc, Size: 12]
	float RandomRadius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TriggersFlowTree.Object
	FlowNodeBase* RootNode;//[Offset: 0x1c, Size: 4]
	FlowNodeBase* TailNode;//[Offset: 0x20, Size: 4]
	FlowNodeBase* CurrentNode;//[Offset: 0x24, Size: 4]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x34, Size: 4]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x1c, Size: 4]
	UFlowNodeRepData RepData;//[Offset: 0x20, Size: 16]
	TriggersFlowTree* CarriedFlowTree;//[Offset: 0x34, Size: 4]
	enum NodeType;//[Offset: 0x38, Size: 1]
	UAETriggerObject*[] TriggerObjects;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: TriggerEvent.Object
	Object* EventInstigator;//[Offset: 0x1c, Size: 4]
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x2c, Size: 60]

--------------------------------
Class: TriggerEventListenerTrigger
	UAETriggerObject* ListenerTrigger;//[Offset: 0x0, Size: 4]

--------------------------------
Class: HuntedTeammateInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	float DangerDistance;//[Offset: 0xc, Size: 4]
	bool bIsNewHuntedTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: HuntTargetInfo
	STExtraPlayerState* TargetState;//[Offset: 0x0, Size: 8]
	Vector MarkCircleCenter;//[Offset: 0x8, Size: 12]
	float MarkCircleRadius;//[Offset: 0x14, Size: 4]
	bool bValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: HuntTargetRepInfo
	STExtraPlayerState* TargetState;//[Offset: 0x0, Size: 8]
	int MarkInstID;//[Offset: 0x8, Size: 4]
	Vector MarkCircleCenter;//[Offset: 0xc, Size: 12]
	float MarkCircleRadius;//[Offset: 0x18, Size: 4]
	float RotationAngle;//[Offset: 0x1c, Size: 4]
	FString PlayerKey;//[Offset: 0x20, Size: 12]

--------------------------------
Class: HuntTaskPickerInfo
	Vector PickerLocation;//[Offset: 0x0, Size: 12]
	float ScanRadius;//[Offset: 0xc, Size: 4]
	int HuntTaskTimeLeft;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PopKartRaceInfo
	int RaceGroup;//[Offset: 0x0, Size: 4]
	int[] NodeList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RenderQualityCVarsToSync
	float StaticMeshLodDistanceScale;//[Offset: 0x0, Size: 4]
	int ShadowQuality;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterAvatar_WearInfo
	CharacterAvatar_EquipSkinInfo[] EquipedSkinList;//[Offset: 0x0, Size: 12]
	CharacterAvatar_PendantInfo[] EquipedPendantList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: CharacterAvatar_EquipSkinInfo
	int ReplacedItemID;//[Offset: 0x0, Size: 4]
	CharacterAvatar_WearItemMetaInfo SkinMetaInfo;//[Offset: 0x4, Size: 20]

--------------------------------
Class: CharacterAvatar_WearItemMetaInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemType;//[Offset: 0x4, Size: 4]
	int ItemSubType;//[Offset: 0x8, Size: 4]
	int ItemLevel;//[Offset: 0xc, Size: 4]
	bool ValidInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: CharacterAvatar_PendantInfo
	int PendantItemID;//[Offset: 0x0, Size: 4]
	CharacterAvatar_WearItemMetaInfo AttachedItemMetaInfo;//[Offset: 0x4, Size: 20]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	PUBGDoor* TriggeredDoor;//[Offset: 0xd0, Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xd4, Size: 4]
	PUBGDoor*[] InRangeDoorList;//[Offset: 0xd8, Size: 12]
	int InRangeDoorListSize;//[Offset: 0xe4, Size: 4]
	int CheckRangeSize;//[Offset: 0xe8, Size: 4]
	int CheckRangeSizeOffset;//[Offset: 0xec, Size: 4]
	int CheckRangeInterval;//[Offset: 0xf0, Size: 4]
	int CurrentCheckRangeFrames;//[Offset: 0xf4, Size: 4]
	int HitInRangeFrameInterval;//[Offset: 0xf8, Size: 4]
	int HitOutRangeFrameInterval;//[Offset: 0xfc, Size: 4]
	bool HitDoorUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	bool DebugDrawShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101, Size: 1]
	float DebugDrawShapeTime;//[Offset: 0x104, Size: 4]
	void UpdateDoorBtnShow();// 0x2421b34
	void UpdateClientPlayerOurDoorRange();// 0x2421b20
	void UpdateClientPlayerInDoorRange();// 0x2421b0c
	void SetAutoOpenDoorMode(int Mode);// 0x2421a94
	void SetAutoOpenDoorEnable(bool bEnable);// 0x2421a14
	bool IsAimingExtraDoor(PUBGDoor* actionDoor);// 0x2421994
	PUBGDoor* GetPriorityDoor();// 0x242196c
	void DoorRequireRPC(PUBGDoor* actionDoor, bool bAimingExtraDoor);// 0x242185c
	void BP_SimulateUIClick(bool bExtraDoor);// 0x46f6b154
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x46f6b154

--------------------------------
Class: PUBGDoor.UAEDoorActor.UAENetActor.Actor.Object
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x33c, Size: 4]
	float autoOpenAngel;//[Offset: 0x340, Size: 4]
	float forwardSpeedRatio;//[Offset: 0x344, Size: 4]
	bool bHideButtons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	int doorState;//[Offset: 0x34c, Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350, Size: 1]
	float DoorOperateTime;//[Offset: 0x354, Size: 4]
	SceneComponent* RootScene;//[Offset: 0x358, Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x35c, Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x360, Size: 4]
	BoxComponent* InnerBox;//[Offset: 0x364, Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	int DoorStateEx;//[Offset: 0x36c, Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x374, Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x378, Size: 4]
	BoxComponent* InnerBoxEx;//[Offset: 0x37c, Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool bForceNoWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	delegate OnDoorAniFinsihDelegate;//[Offset: 0x384, Size: 12]
	delegate OnDoorStateChange;//[Offset: 0x390, Size: 12]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x39c, Size: 12]
	bool bUseDelayDoorAng;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	float fDoorDelayAng;//[Offset: 0x3ac, Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x3b0, Size: 4]
	bool bAutoSetPosAndExtent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	Vector SimulateBoxOrigin;//[Offset: 0x3b8, Size: 12]
	Vector SimulateBoxOriginEx;//[Offset: 0x3c4, Size: 12]
	Vector SimulateBoxExtent;//[Offset: 0x3d0, Size: 12]
	Vector SimulateTriggerBoxExtent;//[Offset: 0x3dc, Size: 12]
	Vector SimulateTriggerBoxCenter;//[Offset: 0x3e8, Size: 12]
	bool DebugDrawShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	float DebugDrawShapeTime;//[Offset: 0x3f8, Size: 4]
	byte RCRBoxIndex;//[Offset: 0x3fc, Size: 1]
	Actor* ParentActor;//[Offset: 0x400, Size: 8]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40a, Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40b, Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40d, Size: 1]
	Character* PlayerCharacter;//[Offset: 0x410, Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x414, Size: 4]
	TimerHandle DelayUnRegisterHandle;//[Offset: 0x420, Size: 8]
	float DelayUnRegisterTime;//[Offset: 0x428, Size: 4]
	bool Islocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	bool NeedShowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	bool IsLockAutoOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e, Size: 1]
	bool NeedDestroyChildActorCom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42f, Size: 1]
	DoorRotationMoation[] DoorMationList;//[Offset: 0x430, Size: 12]
	void SimulateOverlapCharacter(StaticMeshComponent* InDoorMesh, int InMultVal);// 0x2594e70
	void SetDoorNeedShowUI(bool InNeedShowUI);// 0x2594df0
	void SetDoorLock(bool InLock);// 0x2594d70
	void SetDoorBroken(bool bExtraDoor, Actor* brokenCauser);// 0x2594ca8
	void ResetUIOnClient();// 0x2594c94
	void RefreshUIOnClient();// 0x2594c80
	void Refresh_DoorIgnore(bool InIsExDoor, float InDoorAng);// 0x2594bb8
	void OpenDoorByParam(bool inRoom, bool extraDoor);// 0x2594ae8
	void OpenDoorBy(Character* Character, bool extraDoor);// 0x2594a24
	void OnRep_RepNeedShowUI();// 0x2594a10
	void OnRep_RepDoorStateEx();// 0x25949fc
	void OnRep_RepDoorState();// 0x25949e8
	void OnRep_RepDoorBrokenEx();// 0x25949d4
	void OnRep_RepDoorBroken();// 0x25949c0
	void OnEndOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2594878
	void OnEndOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2594730
	void OnDoorStateChange__DelegateSignature(PUBGDoor* door, Character* Character, int TargetState, bool IsExDoor);// 0x46f6b154
	void OnDoorRPC(Character* Character, bool bAimingExtraDoor);// 0x259466c
	void OnDoorAniFinsihDelegate__DelegateSignature(PUBGDoor* door);// 0x46f6b154
	void OnBeginOverlapEx(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2594470
	void OnBeginOverlap(PrimitiveComponent* activatedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2594274
	void On_DoorAniFinsihNew(StaticMeshComponent* InDoorMesh, bool extraDoor);// 0x25941b0
	bool IsTriggerDoor(bool IsEx);// 0x2594128
	bool IsInRoom(Character* Character);// 0x25940a8
	void Init(BoxComponent* interactionBox, StaticMeshComponent* doorMesh, bool inDoubleDoor, BoxComponent* interactionBoxEx, StaticMeshComponent* doorMeshEx);// 0x2593f10
	enum[] GetDamageableGameObjectType();// 0x2593e74
	bool GetCanBePicked();// 0x234dac8
	void ForceNetUpdate();// 0x2567e30
	void CloseDoorBy(Character* Character, bool extraDoor);// 0x2593db0
	void BP_DoorBroken_Callback(bool isBeginPlay, bool bExtraDoor);// 0x46f6b154
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);// 0x46f6b154
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);// 0x46f6b154
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);// 0x46f6b154

--------------------------------
Class: UAEDoorActor.UAENetActor.Actor.Object

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x560, Size: 12]
	float LineThickness;//[Offset: 0x56c, Size: 4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x493e564
	Vector GetUnscaledBoxExtent();// 0x493e53c
	Vector GetScaledBoxExtent();// 0x493e4e8

--------------------------------
Class: DoorRotationMoation
	StaticMeshComponent* doorMesh;//[Offset: 0x28, Size: 8]

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0xd4, Size: 4]
	FString Reason;//[Offset: 0xd8, Size: 12]
	int end_timeNoPerception;//[Offset: 0xe4, Size: 4]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0xe8, Size: 12]
	FString TeammateColor;//[Offset: 0xf4, Size: 12]
	FString MyColor;//[Offset: 0x100, Size: 12]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x10c, Size: 60]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x148, Size: 12]
	float SendMsgCD;//[Offset: 0x154, Size: 4]
	float lastShowChatTime;//[Offset: 0x158, Size: 4]
	float ShowChatDuration;//[Offset: 0x15c, Size: 4]
	RoundDiceInfo LastDiceInfo;//[Offset: 0x160, Size: 8]
	float LastSelfDiceTime;//[Offset: 0x168, Size: 4]
	float DiceRoundCD;//[Offset: 0x16c, Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x194, Size: 12]
	FString EndChar;//[Offset: 0x1a0, Size: 12]
	FString ColonChar;//[Offset: 0x1ac, Size: 12]
	<int,int> TextID2AudioID;//[Offset: 0x1b8, Size: 60]
	int[] audioChat;//[Offset: 0x1f4, Size: 12]
	int[] QuickTextIDList;//[Offset: 0x200, Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x20c, Size: 4]
	int itemIDOnGround;//[Offset: 0x220, Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x224, Size: 4]
	Vector hitItemPosition;//[Offset: 0x228, Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	Vector hitGroundPosition;//[Offset: 0x238, Size: 12]
	int DiceMsgID;//[Offset: 0x244, Size: 4]
	FString DiceMsg;//[Offset: 0x248, Size: 12]
	FString EndDiceMsg;//[Offset: 0x254, Size: 12]
	FString CongregationPlayerName;//[Offset: 0x260, Size: 12]
	QuickGroundFlag[] QuickGroundFlagList;//[Offset: 0x2b4, Size: 12]
	void UpdateQuickTextIDList();// 0x46f6b154
	void UpdateQuickItemText(int msgID, int resID, int alternateMsgID);// 0x46f6b154
	void UpdateFlagIcon();// 0x234fed4
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x240f170
	void ShowQuickPanel(bool bShow);// 0x240f0f0
	void ShowFlag(out const InGameChatMsg msgItem, enum flatType);// 0x240efdc
	void ServerSendMsg(const InGameChatMsg msgItem);// 0x240eee4
	void ServerSendDice(bool StartDice);// 0x240ee1c
	void SendDirtyFilterContent(FString Content);// 0x46f6b154
	void SendDirtyFilter(FString Name, FString Content, bool isMe, bool isSys, int msgID);// 0x46f6b154
	void ReportBattleChat(FString Msg);// 0x46f6b154
	void RemoveQuickGroundFlag(int InInstanceID);// 0x240eda4
	void RemoveInvalidQuickGroundFlag();// 0x240ed90
	void RemoveAllQuickGroundFlag();// 0x240ed7c
	void PostName(const AkAudioEvent* pEvent);// 0x240ed04
	void OnRep_QuickTextIDList();// 0x240ecf0
	void OnRep_LastSelfTime();// 0x240ecdc
	void OnRep_LastDiceInfo();// 0x240ecc8
	void OnInviteNextBattle(FString gid, FString Name);// 0x240ebdc
	void OnFilterFinish(FString filterText, FString callback_data);// 0x46f6b154
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x46f6b154
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x46f6b154
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x46f6b154
	bool IsStartRoundDice();// 0x240ebb4
	void InviteNextBattleReply(FString gid, FString Name, bool bReply);// 0x240ea7c
	float GetCurrentTimeSeconds();// 0x240ea54
	void FindTextIDByAudioID();// 0x46f6b154
	bool FindQuickGroundFlag(int InInstanceID, out QuickGroundFlag outFlag);// 0x240e974
	void EndDiceRound();// 0x240e960
	bool DiceRoundStartBySelf();// 0x240e938
	void CloseChatHistoryList();// 0x46f6b154
	void ClientReceiveMsg(const InGameChatMsg msgItem, bool isMe);// 0x240e824
	bool CanDiceNow();// 0x240e7fc
	void AddQuickGroundFlag(int InInstanceID, out const QuickGroundFlag InFlag);// 0x240e724
	void AddOneMsgToUI1(out const InGameChatMsg Item, FString Name, FString Content, int msgID, int audioID, bool isMe, bool PlaySound);// 0x46f6b154
	void AddFriendChat(FString gid, FString Name, FString Content, bool isSelf);// 0x240e490

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0, Size: 12]
	FString Content;//[Offset: 0xc, Size: 12]
	bool isSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int MsgType;//[Offset: 0x1c, Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0, Size: 1]
	int chatID;//[Offset: 0x4, Size: 4]
	int AlternateChatID;//[Offset: 0x8, Size: 4]
	int FlagIndex;//[Offset: 0xc, Size: 4]
	int traceDist;//[Offset: 0x10, Size: 4]
	float minDist;//[Offset: 0x14, Size: 4]

--------------------------------
Class: RoundDiceInfo
	float LastTeamDiceTime;//[Offset: 0x0, Size: 4]
	uint32 LastDicePlayerKey;//[Offset: 0x4, Size: 4]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x4, Size: 4]
	int flagID;//[Offset: 0x8, Size: 4]
	Vector hitPosition;//[Offset: 0xc, Size: 12]
	int ItemID;//[Offset: 0x18, Size: 4]
	bool isValidPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xfc, Size: 4]
	float PickUpZLimit;//[Offset: 0x100, Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0x108, Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0x114, Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0x118, Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0x11c, Size: 4]
	Vector2D RegionXRange;//[Offset: 0x120, Size: 8]
	Vector2D RegionYRange;//[Offset: 0x128, Size: 8]
	Vector PutDownOffset;//[Offset: 0x130, Size: 12]
	bool bEnableMultiObjPickUpVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0x140, Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x14c, Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x150, Size: 4]
	float DrawTime;//[Offset: 0x154, Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bEnableUpdatePlayerTombWrapperOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x15c, Size: 4]
	PrimitiveComponent* CacheRepBaseForGetRandomLoc;//[Offset: 0x160, Size: 4]
	Actor*[] PickupAvailableActorPool;//[Offset: 0x164, Size: 12]
	Actor*[] ConfirmedPickupActorPool;//[Offset: 0x170, Size: 12]
	void SetEnable(bool IsEnable);// 0x2566c34
	void ServerPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x2566b20
	void ServerPutDownTarget(Actor* Target);// 0x2566a6c
	void ServerPickUpTarget(Actor* Target, int AdditionalParam, int pickCount);// 0x2566928
	void ResetPickupPool();// 0x2566914
	void PutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x2566844
	void PutDownTarget(Actor* Target);// 0x25667cc
	void PickUpTarget(Actor* Target, int AdditionalParam, int pickCount);// 0x25666cc
	void NotifyMissPickupAvailableActor(Actor* Target);// 0x2566654
	void NotifyMeetPickupAvailableActor(Actor* Target);// 0x25665dc
	Vector GetRandomPutDownLocationWithPutDownOffset(float OverrideFindPutDownPointZThreshold);// 0x256654c
	Vector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);// 0x25664bc
	void GetConfirmedPickupAvailableActors(out <Actor*> OutSet);// 0x2566388
	void ControlClientPutDownTargetWithLocation(Actor* Target, Vector Loc);// 0x2566274
	void ControlClientPutDownTarget(Actor* Target);// 0x25661c0
	void ControlClientPickUpTarget(Actor* Target, int AdditionalParam);// 0x25660c4
	void ClampWorldLocation(out Vector OutVector);// 0x2566034

--------------------------------
Class: InGameChatMsg
	FString PlayerName;//[Offset: 0x0, Size: 12]
	uint32 playerIdentifier;//[Offset: 0xc, Size: 4]
	FString msgContent;//[Offset: 0x10, Size: 12]
	int msgID;//[Offset: 0x1c, Size: 4]
	int audioID;//[Offset: 0x20, Size: 4]
	bool hitValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	Vector hitPosition;//[Offset: 0x28, Size: 12]
	int itemIDOnGround;//[Offset: 0x34, Size: 4]

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0xd0, Size: 12]
	delegate OnDelSignMarkDelegate;//[Offset: 0xdc, Size: 12]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	int TextID_OutRange;//[Offset: 0xec, Size: 4]
	FString PreFix_Command;//[Offset: 0xf0, Size: 12]
	FString PreFix_Command_Res;//[Offset: 0xfc, Size: 12]
	FString PreFix_Mark;//[Offset: 0x108, Size: 12]
	int MinTraceDist;//[Offset: 0x114, Size: 4]
	int MaxTraceDist;//[Offset: 0x118, Size: 4]
	int ItemTraceDist;//[Offset: 0x11c, Size: 4]
	int RobotItemTraceDist;//[Offset: 0x120, Size: 4]
	int MaxAirDropMarkDist;//[Offset: 0x124, Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x128, Size: 4]
	int MiniMapAttentionIconID;//[Offset: 0x12c, Size: 4]
	int MiniMapThingIconID;//[Offset: 0x130, Size: 4]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x134, Size: 4]
	<int,FString> CommandTypeIDMap;//[Offset: 0x138, Size: 60]
	<FString,class Object> MarkNameClassMap;//[Offset: 0x174, Size: 60]
	<FString,QuickSignMark> MarkInfoMap;//[Offset: 0x1b0, Size: 60]
	<FString,float> MarkLifeTimeMap;//[Offset: 0x1ec, Size: 60]
	<FString,QuickSignIDArray> MarkTypeArrayMap;//[Offset: 0x228, Size: 60]
	<FString,int> MsgIDActorNetGUIDMap;//[Offset: 0x264, Size: 60]
	int[] ActorNetGUIDTrashArray;//[Offset: 0x2a0, Size: 12]
	FString[] TempIDArray;//[Offset: 0x2ac, Size: 12]
	<FString,int> MsgKey2MiniMapID;//[Offset: 0x320, Size: 60]
	<FString,int> MsgKey2MiniMapIconTypeID;//[Offset: 0x35c, Size: 60]
	<FString,int> ConfigKeyToTextID;//[Offset: 0x398, Size: 60]
	void SwitchAndLoadBankAndPlay(FName SwitchGroup, FName SwitchState, FString BankName, FString EventName);// 0x259d298
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool isSelf);// 0x46f6b154
	void SetTouchPointStatus();// 0x259d284
	void ServerSendMsg(const QuickSignMsg msgItem);// 0x259d16c
	void ServerDelMsg(FString msgID);// 0x259d0a4
	void RemoveActorMask(int ActorNetGUID);// 0x259cff0
	void OperMark(byte InputSignType, FString msgID);// 0x259cf1c
	void MakeQuickMark_PickupActorTombox(PickUpWrapperActor* PickUpActor, int TypespeacialID, int InstanceID);// 0x259ce1c
	void MakeQuickMark_PickupActor(PickUpWrapperActor* PickUpActor);// 0x259cda4
	void MakeQuickMark();// 0x259cd90
	void MakeQuickCommand(byte InputSignType, int AudioTextId, byte SignType);// 0x259cc90
	bool IsSelfMark(FString msgID);// 0x259cbf8
	bool IsRepliedMark(FString msgID);// 0x259cb60
	FString GetNewMsgID(int idx);// 0x259ca84
	bool GenerateMarkInfo(out const QuickSignMsg msgItem, out QuickSignMark MarkInfo);// 0x46f6b154
	void DelMarkFromPool(FString MsgMark);// 0x259c9f4
	void DealWithNewMsg(out const QuickSignMsg msgItem, bool isSelf, bool ShowChat);// 0x259c864
	void ClientReceiveMsg(const QuickSignMsg msgItem, bool isSelf);// 0x259c730
	void ClientDelMsg(FString msgID);// 0x259c698
	void AnalysisConfigKeyClass(FString ConfigID, FString ConfigScriptParam);// 0x259c5ac
	void AddMarkToPool(out const QuickSignMark MsgMark);// 0x259c478
	void AddActorMask(int ActorNetGUID);// 0x259c3c4

--------------------------------
Class: QuickSignMark
	FString msgID;//[Offset: 0x0, Size: 12]
	FString MarkType;//[Offset: 0xc, Size: 12]
	int PlayerInTeamIndex;//[Offset: 0x18, Size: 4]
	FString IconPath;//[Offset: 0x1c, Size: 12]
	FString IconBGPath;//[Offset: 0x28, Size: 12]
	FString IconOuterPath;//[Offset: 0x34, Size: 12]
	FString IconOuterBGPath;//[Offset: 0x40, Size: 12]
	FString ReplyID;//[Offset: 0x4c, Size: 12]
	Vector Loc;//[Offset: 0x58, Size: 12]
	int MaxNum;//[Offset: 0x64, Size: 4]
	int LifeSpan;//[Offset: 0x68, Size: 4]
	bool IsSelfMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	bool IsReplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d, Size: 1]

--------------------------------
Class: QuickSignIDArray
	FString[] InnerArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: QuickSignMsg
	FString msgID;//[Offset: 0x0, Size: 12]
	FString PlayerName;//[Offset: 0xc, Size: 12]
	Vector HitPos;//[Offset: 0x18, Size: 12]
	FString ConfigKey;//[Offset: 0x24, Size: 12]
	int audioID;//[Offset: 0x30, Size: 4]
	FString ParamString;//[Offset: 0x34, Size: 12]
	int BindActorGUID;//[Offset: 0x40, Size: 4]
	uint32 PlayerKey;//[Offset: 0x44, Size: 4]
	int MiniMapIconTypeId;//[Offset: 0x48, Size: 4]
	byte InputSignType;//[Offset: 0x4c, Size: 1]
	uint32 AuidoTextId;//[Offset: 0x50, Size: 4]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xd0, Size: 4]
	FString OwningPlayerName;//[Offset: 0xd4, Size: 12]
	UAETriggerObject*[] TaskTriggerObjects;//[Offset: 0xe0, Size: 12]
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0xec, Size: 60]
	<int,AreaParam> AreaParamCache;//[Offset: 0x128, Size: 60]
	int LastAreaID;//[Offset: 0x164, Size: 4]
	int RetrieveTaskAreaType(Vector PlayerLocation);// 0x23bb814
	int RetrieveLandLocType(FString TargetName);// 0x23bb728
	void ReportTaskAndSpecialCollection(byte TaskType, int TaskID, int process);// 0x23bb620
	bool RegisterEvent(class Object RegisterEventClass, UAETriggerObject* TriggerListener, byte TaskEventType);// 0x23bb510
	bool IsTriggerActive(int InTaskID);// 0x23bb490
	bool IsSpecialPickItem(int InItemID);// 0x23bb410
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName, int AreaID);// 0x23bb114
	bool IsCacheAreaParam();// 0x23bb0e8
	void HandlePlayerPickupItem(int ItemID, int Count, STExtraPlayerController* PC);// 0x23bafe8
	void HandlePlayerKilling();// 0x23bafd4
	void HandlePlayerEnterArea(int AreaID);// 0x23baf5c
	void HandlePlayerDropItem(int ItemID, int Count, STExtraPlayerController* PC);// 0x23bae5c
	void HandlePlayerDoEmote(int EmoteIndex);// 0x23bade4
	void HandleInitTaskData(int TaskID, int process, FString ext_info);// 0x23bac70
	void HandleInitCollectionData(int ItemID, int CurrentCount, int TotalCount);// 0x23bab70
	void HandleDeathBoxSpawned(Transform SpawnTransform);// 0x23baa90
	UAETriggerObject* GetTriggerObject(int InTaskID);// 0x23baa10
	int GetTaskSubTypeFromDataTable(int InTaskID);// 0x46f6b154
	bool GetTaskParamsFromDataTable(int InTaskID, out FString outMainConditionParam, out int outTargetProcess);// 0x46f6b154
	bool GetTaskParams(int InTaskID, out FString outMainConditionParamStr, out int outTaskProcess);// 0x23ba8cc
	FString GetTaskClassPath(byte TaskType, int TaskUID);// 0x23ba7a4
	int GetTaskAreaIDFromDataTable(Vector InPlayerLocation);// 0x46f6b154
	FString GetOwningPlayerName();// 0x23ba710
	FString GetMapName();// 0x23ba67c
	int GetLandLocIDFromDataTable(FString InTargetName);// 0x46f6b154
	void FireEvent(byte TaskEventType, int Param, FString ExtMsg);// 0x23ba504
	int FetchSpecifiedAreaIDByCache(Vector PlayerLocation);// 0x23ba47c
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x23ba3b8
	UAETriggerObject_Task* CreateTriggerObject(byte TaskType, int TaskID);// 0x23ba2ec
	bool AddTrigger(byte TaskType, int TaskID, int process, FString ext_info);// 0x23ba120
	void AddEventToTrigger(UAETriggerObject* TriggerObj, class Object Event, byte TaskEventType);// 0x23ba018
	void ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x23b9f54

--------------------------------
Class: AreaParam
	Vector[] AreaAnchors;//[Offset: 0x0, Size: 12]
	int BattleTextID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: UAETriggerObject_Task.UAETriggerObject.Object
	TriggerCondition* RootCondition;//[Offset: 0x130, Size: 4]
	byte[] TaskEventTypes;//[Offset: 0x134, Size: 12]
	TriggerAction*[] RedoTriggerActions;//[Offset: 0x140, Size: 12]
	int TaskID;//[Offset: 0x14c, Size: 4]
	byte TaskType;//[Offset: 0x150, Size: 1]
	void SetTaskProcess(int process, FString ext_info);// 0x2787818
	void RedoAction();// 0x270a21c
	void NofityTriggerComplete();// 0x2422910
	bool IsConditionsSatisfy(const TriggerEvent* Event);// 0x2787790
	void InitConfigurableCondition(int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x2787620
	void DeactiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x2787554
	TriggerCondition* CreateTeamActionCondition(byte TeamActionConType, float TimeIntervalForSameEmote);// 0x2787488
	TriggerCondition* CreateSpecifiedSpaceCondition(byte SpecifiedSpace);// 0x2787400
	TriggerCondition* CreateSpecifiedItemCondition(int ItemID);// 0x2787380
	TriggerCondition* CreateSpecifiedAreaCondition(byte SpecifiedArea);// 0x27872f8
	TriggerAction* CreateRedoAction(byte ActionType);// 0x2787270
	TriggerCondition* CreateORCondition(TriggerCondition*[] ChildConditions);// 0x2787184
	TriggerCondition* CreateOperatorCondition(class TriggerCondition_Operator OperatorClass, TriggerCondition*[] ChildConditions);// 0x2787050
	TriggerCondition* CreateKillPlayerCondition();// 0x2787028
	TriggerCondition* CreateGameModeCondition(enum GameModeType);// 0x2786fa8
	TriggerAction* CreateDoAction(byte ActionType);// 0x2786f20
	TriggerCondition* CreateCondition(class TriggerCondition ConditionClass);// 0x2786ea0
	TriggerCondition* CreateCollectItemCondition(int ItemID, int CollectCount);// 0x2786ddc
	TriggerCondition* CreateANDCondition(TriggerCondition*[] ChildConditions);// 0x2786cf0
	TriggerAction* CreateAction(byte ActionType);// 0x2786c68
	bool ConstructTask(int InTaskID, int InTaskSubType, FString InMainConditionParamStr, int InTargetProcess);// 0x2786aa4
	byte[] ConstructRedoActions();// 0x46f6b154
	byte[] ConstructEvents();// 0x46f6b154
	TriggerCondition* ConstructConditions();// 0x46f6b154
	byte[] ConstructActions();// 0x46f6b154
	void AddEventTypes(byte[] EventTypes);// 0x27869c0
	bool ActiveCondition(byte InTaskConditionType, VariableSet* InDataSource);// 0x27868ec

--------------------------------
Class: TriggerCondition_Operator.TriggerCondition_Task.TriggerCondition.Object
	TriggerCondition*[] ChildConditions;//[Offset: 0x3c, Size: 12]
	void AddChildCondition(TriggerCondition* NewChildCond);// 0x274d108

--------------------------------
Class: TriggerCondition_Task.TriggerCondition.Object
	byte TaskConditionType;//[Offset: 0x38, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	bool bIsConfigurable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a, Size: 1]
	void SetTargetParam(int Value);// 0x2374eec
	void SetConditionParam(int Value);// 0x2422ce4
	bool IsSatisfy(const TriggerEvent* Event);// 0x271bd00
	bool IsSameCondition(byte InTaskConditionType);// 0x274e7a0
	bool FillDataSource(VariableSet* InDataSource);// 0x274e718
	bool DeactiveCondition(VariableSet* InDataSource);// 0x274e690
	bool CompareParam(VariableSet* InDataSource);// 0x2384d10
	bool ActiveCondition(VariableSet* InDataSource);// 0x274e608

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0, Size: 12]
	byte Gender;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SyncOBDataActor.Actor.Object
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x30c, Size: 12]
	PlayerWeatherMap[] TotalPlayerWeatherMap;//[Offset: 0x318, Size: 12]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x324, Size: 12]
	OBPlayerAdditionalInfo[] OBPlayerInfoList;//[Offset: 0x330, Size: 12]
	BattleItemData[] CacheObservedItemListOnReplay;//[Offset: 0x384, Size: 12]
	IncNetArrayNew CacheOBItemOnReplay;//[Offset: 0x390, Size: 24]
	RouteSegment[] RouteSegmentData;//[Offset: 0x400, Size: 12]
	PlayerStaticInfoInOB[] TotalPlayers_s;//[Offset: 0x40c, Size: 12]
	<int,RouteSegment> RouteSegmentList;//[Offset: 0x418, Size: 60]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x454, Size: 12]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x460, Size: 12]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x46c, Size: 12]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x478, Size: 12]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x484, Size: 60]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	PlayerOBUIDMap[] TotalPlayerOBUIDMap;//[Offset: 0x528, Size: 12]
	PlayerOBFlowMap[] TotalPlayerOBFlowMap;//[Offset: 0x534, Size: 12]
	void SyncStopFirePlayers(const uint32[] InPlayerList);// 0x271f428
	void SyncStartFirePlayers(const uint32[] InPlayerList);// 0x271f390
	void OnRep_TotalPlayerWeatherMap();// 0x271f37c
	void OnRep_TotalPlayerOBUIDMap();// 0x271f368
	void OnRep_TotalPlayerOBFlowMap();// 0x271f354
	void OnRep_RouteSegmentList();// 0x271f340
	void OnRep_RefreshTotalPlayers();// 0x271f32c
	void OnRep_RefreshAirDropBox();// 0x271f318
	void OnRep_ObservedItemList_OnReplay();// 0x271f304
	void OnRep_ObservedItemList();// 0x271f2f0
	void OnPlayerRespawned(uint32 PlayerKey, bool bIsAI);// 0x271f22c
	void OnPlayerItemUpdate(ItemHandleBase* Handle);// 0x271f1b4
	Vector GetNewestAirDropBoxPos();// 0x271f16c
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x271efec

--------------------------------
Class: PlayerBaseInfoInOB
	int PosX;//[Offset: 0x0, Size: 4]
	int PosY;//[Offset: 0x4, Size: 4]
	int PosZ;//[Offset: 0x8, Size: 4]
	int Health;//[Offset: 0xc, Size: 4]
	int HealthMax;//[Offset: 0x10, Size: 4]
	int LiveState;//[Offset: 0x14, Size: 4]
	int KillNum;//[Offset: 0x18, Size: 4]
	int Yaw;//[Offset: 0x1c, Size: 4]
	int Pitch;//[Offset: 0x20, Size: 4]
	float SignalHP;//[Offset: 0x24, Size: 4]
	uint32 PlayerKey;//[Offset: 0x28, Size: 4]
	uint32 KillByCauserKey;//[Offset: 0x2c, Size: 4]
	int GruopID;//[Offset: 0x30, Size: 4]
	bool KillByObGMDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: PlayerWeatherMap
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	int WeatherIndex;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AirDropBoxInOb
	int BoxId;//[Offset: 0x0, Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Vector Pos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: OBPlayerAdditionalInfo
	uint32 uPlayerKey;//[Offset: 0x0, Size: 4]
	IncNetArrayNew OBItemList;//[Offset: 0x4, Size: 24]

--------------------------------
Class: RouteSegment
	int Index;//[Offset: 0x0, Size: 4]
	FString SegmentName;//[Offset: 0x4, Size: 12]
	float StartRatio;//[Offset: 0x10, Size: 4]
	float EndRatio;//[Offset: 0x14, Size: 4]

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PlayerOpenID;//[Offset: 0xc, Size: 12]
	FString PicUrl;//[Offset: 0x18, Size: 12]
	int TeamID;//[Offset: 0x24, Size: 4]
	byte IdxInTeam;//[Offset: 0x28, Size: 1]
	uint32 PlayerKey;//[Offset: 0x2c, Size: 4]
	FString PlayerUID;//[Offset: 0x30, Size: 12]
	int JumpSegmentID;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	FString PlayerName;//[Offset: 0x38, Size: 12]
	FString PlayerOpenID;//[Offset: 0x44, Size: 12]
	FString PlayerUID;//[Offset: 0x50, Size: 12]
	FString PicUrl;//[Offset: 0x5c, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	int TeamID;//[Offset: 0x6c, Size: 4]
	Pawn* Character;//[Offset: 0x70, Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	Vector ShootPos;//[Offset: 0x80, Size: 12]
	bool BeHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 1]
	bool bMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e, Size: 1]
	bool bHasDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f, Size: 1]
	FString StrPlayerKey;//[Offset: 0x90, Size: 12]
	byte IdxInTeam;//[Offset: 0xad, Size: 1]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0, Size: 4]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FString LogoPicUrl;//[Offset: 0x8, Size: 12]
	int KillNum;//[Offset: 0x14, Size: 4]
	int LiveMemberNum;//[Offset: 0x18, Size: 4]
	Vector LogoWorldPostion;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: PlayerOBUIDMap
	uint64 SrcOBPlayerUID;//[Offset: 0x0, Size: 8]
	uint64 DestOBPlayerUID;//[Offset: 0x8, Size: 8]
	bool bIsWatchingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: PlayerOBFlowMap
	uint64 SrcOBPlayerUID;//[Offset: 0x0, Size: 8]
	enum ObserveFlow;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0, Size: 12]
	FString PicUrl;//[Offset: 0xc, Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int TeamID;//[Offset: 0x1c, Size: 4]
	FString PlayerUID;//[Offset: 0x20, Size: 12]
	Vector[] PosList;//[Offset: 0x2c, Size: 12]
	float CanJumpLocInMapSelf;//[Offset: 0x3c, Size: 4]
	float ForceJumpLocInMapSelf;//[Offset: 0x40, Size: 4]

--------------------------------
Class: OwnerClientCreateWeaponCache
	ItemDefineID[] IDList;//[Offset: 0x0, Size: 12]
	uint32 CharacterGUID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x2e4, Size: 4]
	Actor* ReturnActor;//[Offset: 0x2e8, Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x308, Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x30c, Size: 4]
	float MinMovingSpeed;//[Offset: 0x324, Size: 4]
	float MaxMovingTime;//[Offset: 0x328, Size: 4]
	float ObservingTime;//[Offset: 0x32c, Size: 4]
	float TrackingDelay;//[Offset: 0x330, Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x334, Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x338, Size: 4]
	void CancelTrackingEnd(UAEPlayerController* PlayerController);// 0x24fdb68

--------------------------------
Class: InformPlayerTypeInfo
	FString InstigatorName;//[Offset: 0x0, Size: 12]
	bool IsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	FString InstigatorUID;//[Offset: 0x10, Size: 12]
	bool IsTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool IsMurder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool IsInCurrentWatchTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool IsHitDownPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	ItemDefineID LastUsedItemDefineID;//[Offset: 0xd8, Size: 24]
	float LastFinishCD;//[Offset: 0xf0, Size: 4]
	bool bIsRemoteControlling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 1]
	STExtraVehicleBase* Vehicle;//[Offset: 0xf8, Size: 4]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0xfc, Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0x100, Size: 4]
	enum VehicleUserState;//[Offset: 0x104, Size: 1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0x108, Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0x10c, Size: 4]
	bool bAllowTickUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	float UpdateClosestVehicleInterval;//[Offset: 0x118, Size: 4]
	STExtraVehicleBase*[] OverlappingVehicles;//[Offset: 0x124, Size: 12]
	STExtraVehicleBase*[] CullWaterRangeVehicles;//[Offset: 0x130, Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x13c, Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x154, Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	float VehiclePitchMin;//[Offset: 0x168, Size: 4]
	float VehiclePitchMax;//[Offset: 0x16c, Size: 4]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x170, Size: 4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x180, Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x194, Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x198, Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x19c, Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0, Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x1a4, Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x1a8, Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x1ac, Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x1b0, Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x1b8, Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x1c8, Size: 4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x1cc, Size: 4]
	Rotator InputExtraRot;//[Offset: 0x1d0, Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x1dc, Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x1ec, Size: 4]
	bool bResetInputExtraRotPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f9, Size: 1]
	bool isHelicopterSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa, Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x224, Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x22c, Size: 4]
	float ControllerYawClampMin;//[Offset: 0x234, Size: 4]
	float ControllerYawClampMax;//[Offset: 0x238, Size: 4]
	enum CurrentSeatType;//[Offset: 0x23c, Size: 1]
	delegate OnClientEnterVehicleDelegate;//[Offset: 0x254, Size: 12]
	delegate OnClientExitVehicleDelegate;//[Offset: 0x260, Size: 12]
	bool IsEnteredByJoystickClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	float ValidClickInterval;//[Offset: 0x270, Size: 4]
	float ValidClickDistance;//[Offset: 0x274, Size: 4]
	Vector2D ValidClickCenter;//[Offset: 0x278, Size: 8]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x28c, Size: 4]
	void UseVehicleWeaponOrNot();// 0x27b0000
	void UsePopKartPassDoorAccelerate();// 0x27affa4
	void UpdateVehWeaponPassengerViewLimit();// 0x27aff90
	void UpdatePassengerViewYawLimit();// 0x27aff7c
	void UpdatePassengerViewPitchLimit();// 0x27aff68
	void TurnVehicle(float Rate);// 0x236ffe8
	void TryUseHorn(bool bUse);// 0x27afee8
	void TryStopRemoteControlVehicle();// 0x27afed4
	void TryShutDownUnmannedVehicle();// 0x27afec0
	void TryRemoteControlVehicle(STExtraVehicleBase* InVehicle);// 0x27afe48
	void TryPauseUnmannedVehicle();// 0x27afe34
	bool TryLeanOutOrIn(bool bAutoLeanOut);// 0x27afdac
	void TryLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x27afd34
	void TryLaunchCurrentUnmannedVehicle();// 0x27afd14
	void TryExitVehicle();// 0x27afd00
	void TryEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x27afc44
	void TryChangeVehicleSeat();// 0x27afc30
	bool TryChangeToVehicleSeat(int SeatIndex);// 0x27afbb0
	bool TryChangeFreeFireSeatAndScopeIn();// 0x27afb88
	bool TryChangeFreeFireSeatAndLeanOut();// 0x27afb60
	void TryAutonomousDriving(bool bEnable);// 0x27afae0
	void ToggleHighSpeedMode();// 0x27afacc
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x46f6b154
	void TestForceTurnVehicle(Rotator Rotation, bool bIsAdd);// 0x27afa08
	void StopFireVehicleWeapon();// 0x27af9f4
	bool ShowVehicleWeaponUI();// 0x27af9cc
	void SetBrake(float Rate);// 0x27af954
	void SetBoosting(bool bEnabled);// 0x27af8d4
	void SetAirControlF(float Rate);// 0x27af85c
	void SetAirControlB(float Rate);// 0x27af7e4
	void ServerUseVehicleWeaponOrNot(int SeatID, bool bUse);// 0x27af6d4
	void ServerStopFireVehicleWeapon();// 0x27af678
	void ServerBoost();// 0x27af61c
	void Server_JoystickCenterClickHandler();// 0x27af5c0
	void SendToServerUnmannedVehicleUse();// 0x27af564
	void SendToServerUnmannedVehicleRecall();// 0x27af508
	void SendToServerUnmannedVehiclePause();// 0x27af4ac
	void RspStopRemoteControlVehicle(bool bSuccess, bool bKeepState);// 0x27af3d4
	void RspShutDownUnmannedVehicle(bool bSucceed);// 0x27af34c
	void RspResumeRemoteControlVehicle();// 0x2546a3c
	void RspRemoteControlVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType);// 0x27af238
	void RspPauseUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x27af16c
	void RspPauseRemoteControlVehicle();// 0x251ebf4
	void RspLeanOut(bool bOut);// 0x27af0e4
	void RspLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle, bool bSucceed);// 0x27af018
	void RspExitVehicle(bool bSuccess);// 0x27aef90
	void RspEnterVehicle(STExtraVehicleBase* InVehicle, bool bSuccess, enum SeatType, int SeatInd, enum FailReason);// 0x27aedf0
	void RspEnterControlledVehicle(STExtraVehicleBase* InVehicle, enum SeatType, bool bCanEnter);// 0x27aece0
	void RspChangeVehicleSeat(bool bSuccess, enum SeatType, int SeatInd, bool bNeedLeanOut, bool bNeedScopeIn, enum FailReason);// 0x27aeae4
	void RspAutonomousDriving(bool bEnable, bool bSucceed);// 0x27aea0c
	void ReqSyncViewTargetLastDriveInfo(STExtraPlayerController* ObserverController, STExtraBaseCharacter* ViewTargetCharacter);// 0x27ae910
	void ReqStopRemoteControlVehicle();// 0x27ae8b4
	void ReqShutDownUnmannedVehicle();// 0x27ae858
	void ReqResumeRemoteControlVehicle(STExtraVehicleBase* InVehicle);// 0x27ae7a4
	void ReqRemoteControlVehicle(STExtraVehicleBase* InVehicle);// 0x27ae6f0
	void ReqPauseUnmannedVehicle();// 0x27ae694
	void ReqMarkLastestVehicle(STExtraPlayerController* STEPC, STExtraVehicleBase* InVehicle);// 0x27ae598
	void ReqLeanOut(bool IsLeanOut);// 0x27ae4d0
	void ReqLaunchUnmannedVehicle(STExtraVehicleBase* InVehicle);// 0x27ae41c
	void ReqExitVehicle(Vector ClientVehicleVelocity);// 0x27ae360
	void ReqEraseLastDriveVehicle();// 0x27ae304
	void ReqEnterVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x27ae208
	void ReqEnterControlledVehicle(STExtraVehicleBase* InVehicle, enum SeatType);// 0x27ae10c
	void ReqChangeVehicleSeat(int InSeatIndex);// 0x27ae058
	void ReqChangeFreeFireSeatAndScopeIn(bool LeftSide);// 0x27adf90
	void ReqChangeFreeFireSeatAndLeanOut(bool LeftSide);// 0x27adec8
	void ReqAutonomousDriving(bool bEnable);// 0x27ade00
	void ProcessDragonBoatDrumSeat(bool enterDrumSeat);// 0x260b7e0
	void PostStopRemoteControlVehicle();// 0x2459524
	void OnUnmannedVehicle_Standby_Reconnet();// 0x46f6b154
	void OnShutDownUnmannedVehicleCompleted(float CDTime);// 0x46f6b154
	void OnServerReconnected();// 0x27addec
	void OnScopeInAfterChangeSeat();// 0x27addd8
	void OnRep_DefineID();// 0x27addc4
	void OnPauseUnmannedVehicleCompleted();// 0x46f6b154
	void OnLeanOutAfterChangeSeat();// 0x27addb0
	void OnLaunchUnmannedVehicleCompleted();// 0x46f6b154
	void OnInputAxisMoveRight(float Rate);// 0x46f6b154
	void OnInputAxisMoveForward(float Rate);// 0x46f6b154
	void OnExitVehicleCompleted();// 0x46f6b154
	void OnEnterVehicleCompleted(enum SeatType);// 0x46f6b154
	void OnCurrrentClosestVehicleChanged();// 0x46f6b154
	void OnClientReconnected();// 0x27add9c
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x46f6b154
	void NotifyResumeRemoteControlVehicle();// 0x240b860
	void NotifyPopKartWin(int RaceGroup);// 0x27add1c
	void NotifyPopKartBegin(int RaceGroup);// 0x2507ca0
	void NotifyPassDoorAccelerate();// 0x23d0bcc
	void NotifyLeaveVehicleFailed();// 0x2505784
	void NotifyGetPassDoorAccelerate();// 0x23d0bb0
	void NotifyEnterAccelerateJumpArea(STPopkartJumpArea* JumpArea);// 0x257e3dc
	void NotifyEnterAccelerateArea(STPopkartAccelerateArea* AccelerateArea);// 0x23d0ab0
	void MoveVehicleUp(float Rate);// 0x27adca4
	void MoveVehicleRight(float Rate);// 0x27adc2c
	void MoveVehicleForward(float Rate);// 0x27adbb4
	void MaintenanceVehicle(float addpercenthp, bool FixTire);// 0x27adaf0
	bool IsHighSpeedMode();// 0x27adac8
	bool IsControllingUnmannedVehicle();// 0x27adaa0
	bool IsAutoDriving();// 0x27ada78
	bool IsAirTaxiVehicleInReplay();// 0x25a16a8
	void InputJumpUp();// 0x27ada64
	void HandleVehicleWeaponToLastWeapon(byte TargetChangeSlot);// 0x27ad9ec
	void HandleLocalEquipWeaponFromBackpackFinished();// 0x27ad9d8
	void HandleLocalBackpackCurrentWeaponFinished();// 0x27ad9c4
	bool HandleClientReconnecting();// 0x27ad99c
	enum GetVehicleUserState();// 0x27ad980
	STExtraVehicleBase* GetCurrentClosestVehicle();// 0x24deb48
	STExtraShootWeapon* GetCharacterVehicleWeapon();// 0x27ad958
	void ForceExitVehicle(bool bApplyVehicleVelocity, FString Reason, bool bMustExit);// 0x27ad82c
	void FireVehicleWeapon();// 0x27ad818
	void ClientUpdateSingleItem(ItemDefineID DefineID);// 0x27ad710
	void ClientRetryChangeVehicleSeat(int InSeatIndex);// 0x27ad798
	void ClientDeleteSingleItem(ItemDefineID DefineID);// 0x27ad710
	void Client_UnbindTouchEvents();// 0x27ad6b4
	void Client_ShouldBindTouchEvents();// 0x27ad658
	bool CheckCanLeanOutVehicle();// 0x27ad630
	bool CanVehicleShoot(STExtraPlayerCharacter* PlayerCharacter);// 0x27ad5b0
	bool CanUseVehicleHorn();// 0x27ad588
	bool CanControlVehicle();// 0x27ad560
	bool CanAutoDriving();// 0x27ad538
	void BoostByPassenger();// 0x27ad524
	void AddVehicleFuel(float Amount);// 0x27ad4ac

--------------------------------
Class: STPopkartJumpArea.STPopkartAreaTrigger.Actor.Object
	float AcceleratePercent;//[Offset: 0x40c, Size: 4]
	float UpSpeed;//[Offset: 0x410, Size: 4]
	float MaxSpeed;//[Offset: 0x414, Size: 4]
	float minSpeed;//[Offset: 0x418, Size: 4]
	Vector JumpDirection;//[Offset: 0x41c, Size: 12]
	bool UseServerNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	void OnVehicleJump(STExtraWheeledVehicle* Vehicle);// 0x46f6b154
	void AccelerateVehicle(STExtraWheeledVehicle* Vehicle);// 0x2713f54

--------------------------------
Class: STPopkartAreaTrigger.Actor.Object
	enum AreaType;//[Offset: 0x2e4, Size: 1]
	byte RaceGroup;//[Offset: 0x2e5, Size: 1]
	byte NodeIndex;//[Offset: 0x2e6, Size: 1]
	int RacePathNameID;//[Offset: 0x2e8, Size: 4]
	int MapIconID;//[Offset: 0x2ec, Size: 4]
	int ShowMapMarkDistance;//[Offset: 0x2f0, Size: 4]
	int MapIconInstanceID;//[Offset: 0x2f4, Size: 4]
	AkAudioEvent* Sfx_EnterArea;//[Offset: 0x2f8, Size: 4]
	AkAudioEvent* Sfx_AreaBGM;//[Offset: 0x2fc, Size: 4]
	<enum> ExcludeVehicleType;//[Offset: 0x300, Size: 60]
	bool CheckSeatChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 1]
	<enum,float> VehicleAcceMaxSpeed;//[Offset: 0x340, Size: 60]
	bool NeedServerTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	Vector BoxExtent;//[Offset: 0x380, Size: 12]
	Vector BoxOffset;//[Offset: 0x38c, Size: 12]
	bool DrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	void NotifySeatStateChange(STExtraWheeledVehicle* Vehicle);// 0x46f6b154
	void LeaveAreaEffect(STExtraWheeledVehicle* Vehicle);// 0x46f6b154
	void EnterAreaEffect(STExtraWheeledVehicle* Vehicle);// 0x46f6b154

--------------------------------
Class: STPopkartAccelerateArea.STPopkartAreaTrigger.Actor.Object
	float AcceleratePercent;//[Offset: 0x40c, Size: 4]
	float MaxSpeed;//[Offset: 0x410, Size: 4]
	float minSpeed;//[Offset: 0x414, Size: 4]
	bool UseServerNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	Vector AccelerateDirection;//[Offset: 0x41c, Size: 12]
	void OnAccelerateVehicle(STExtraWheeledVehicle* Vehicle);// 0x46f6b154
	void AccelerateVehicle(STExtraWheeledVehicle* Vehicle);// 0x27128c0

--------------------------------
Class: SuitSkinData
	bool Open;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	StyleUnit[] SuitSkinList;//[Offset: 0x4, Size: 12]
	GlidSkinUnit[] GlidSkinList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: StyleUnit
	int stype_type;//[Offset: 0x0, Size: 4]
	int Slot;//[Offset: 0x4, Size: 4]
	int style_id;//[Offset: 0x8, Size: 4]
	bool lock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	GameModePlayerItem[] ItemList;//[Offset: 0x10, Size: 12]
	GameModePlayer_WearInfo wearInfo;//[Offset: 0x1c, Size: 144]

--------------------------------
Class: WeaponModData
	int ModeID;//[Offset: 0x0, Size: 4]
	WeaponModificationData[] WeaponModificationDataList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponModificationData
	int WeaponID;//[Offset: 0x0, Size: 4]
	int[] ModuleList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleAvatarItemPairData
	int DefaultItemID;//[Offset: 0x0, Size: 4]
	int ChangeSkinItemID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModePlayerItemList
	GameModePlayerItem[] PlayerItemList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VehicleAvatarSkinItem

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	uint64 UID;//[Offset: 0x8, Size: 8]
	uint32 PlayerKey;//[Offset: 0x10, Size: 4]
	int SegmentLevel;//[Offset: 0x14, Size: 4]
	int BattleMode;//[Offset: 0x18, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int GameCount;//[Offset: 0x20, Size: 4]
	int WinCount;//[Offset: 0x24, Size: 4]
	int TopTenCount;//[Offset: 0x28, Size: 4]
	int KillNum;//[Offset: 0x2c, Size: 4]
	float KDNum;//[Offset: 0x30, Size: 4]
	int Title_Type;//[Offset: 0x34, Size: 4]
	int Title_RankID;//[Offset: 0x38, Size: 4]
	int Title_RankType;//[Offset: 0x3c, Size: 4]
	int Title_RankNo;//[Offset: 0x40, Size: 4]
	int TopSegmentTime;//[Offset: 0x44, Size: 4]
	GameModePlayer_WearInfo OBPlayerWearInfo;//[Offset: 0x48, Size: 144]
	GameModePlayer_BattlePrepareDisplayWearInfo OBPlayerBattlePrepareDisplayWearInfo;//[Offset: 0xd8, Size: 60]

--------------------------------
Class: GameModePlayer_BattlePrepareDisplayWearInfo
	int[] DisplayWearAvatarInfoList;//[Offset: 0x0, Size: 12]
	int[] DisplayWearWeaponInfoList;//[Offset: 0xc, Size: 12]
	int[] DisplayWearBackpackInfoList;//[Offset: 0x18, Size: 12]
	int[] DisplayWearHelmetInfoList;//[Offset: 0x24, Size: 12]
	int[] DisplayVehicleInfoList;//[Offset: 0x30, Size: 12]

--------------------------------
Class: GameModePlayerDecalItem.GameModePlayerItem

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0, Size: 4]
	int process;//[Offset: 0x4, Size: 4]
	int week_index;//[Offset: 0x8, Size: 4]
	bool is_traced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool is_mode_fit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	FString ext_info;//[Offset: 0x10, Size: 12]

--------------------------------
Class: SpecialPickItem
	int task_id;//[Offset: 0x0, Size: 4]
	int item_id;//[Offset: 0x4, Size: 4]
	int cur_count;//[Offset: 0x8, Size: 4]
	int total_count;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PlayerOBBattleInfo
	int BattleMode;//[Offset: 0x0, Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int GameCount;//[Offset: 0x8, Size: 4]
	int WinCount;//[Offset: 0xc, Size: 4]
	int TopTenCount;//[Offset: 0x10, Size: 4]
	int KillNum;//[Offset: 0x14, Size: 4]
	FString KDNum;//[Offset: 0x18, Size: 12]
	int TopSegmentTimes;//[Offset: 0x24, Size: 4]

--------------------------------
Class: CollectedEventKeysValues
	FString[] Keys;//[Offset: 0x0, Size: 12]
	FString[] Values;//[Offset: 0xc, Size: 12]

--------------------------------
Class: CollectedEventData
	<FString,FString> KeyValueMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	Object* UtilsPtr;//[Offset: 0x370, Size: 8]
	float GridCheckSize;//[Offset: 0x378, Size: 4]
	float DeepCheckSize;//[Offset: 0x37c, Size: 4]
	int MaxPlayerLimit;//[Offset: 0x388, Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	int WeatherID;//[Offset: 0x390, Size: 4]
	FString WeatherName;//[Offset: 0x394, Size: 12]
	int RoomMode;//[Offset: 0x3a0, Size: 4]
	FString RoomName;//[Offset: 0x3a4, Size: 12]
	int MainModeId;//[Offset: 0x3b0, Size: 4]
	int CustomGameModeId;//[Offset: 0x3b4, Size: 4]
	int SeasonIdx;//[Offset: 0x3c0, Size: 4]
	int AirdropId;//[Offset: 0x3c4, Size: 4]
	float MeteorShowerRatio;//[Offset: 0x3c8, Size: 4]
	FString ItemTableName;//[Offset: 0x3cc, Size: 12]
	FString ItemClassPath;//[Offset: 0x3d8, Size: 12]
	<FString,int> ItemTypeParam;//[Offset: 0x3e4, Size: 60]
	<FString,int> ItemSubTypeParam;//[Offset: 0x420, Size: 60]
	<FString,int> VehicleTypeParam;//[Offset: 0x45c, Size: 60]
	<FString,int> VehicleSubTypeParam;//[Offset: 0x498, Size: 60]
	bool UseSelfAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d4, Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x4d8, Size: 12]
	float DeadTombBoxLifeSpan;//[Offset: 0x4e4, Size: 4]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x4ec, Size: 12]
	FString VehicleTableName;//[Offset: 0x4f8, Size: 12]
	FString VehicleClassPath;//[Offset: 0x504, Size: 12]
	int GameType;//[Offset: 0x510, Size: 4]
	int SubGameType;//[Offset: 0x514, Size: 4]
	<FString,float> BattleCustomConfig;//[Offset: 0x518, Size: 60]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x554, Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x558, Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x55c, Size: 4]
	int NetServerMaxTickRateInMatchRoom;//[Offset: 0x560, Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	bool bKillCharacterOnPlayerExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565, Size: 1]
	bool bUseSpawnItemZombieMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x566, Size: 1]
	SpawnZombieActiveMaxCfg[] SpawnZombieActiveMaxList;//[Offset: 0x568, Size: 12]
	SpawnZombieActiveMaxCfg[] SpawnZombieActiveMaxCfgList;//[Offset: 0x574, Size: 12]
	GroupSpotSceneComponent*[] ItemGroupComponents;//[Offset: 0x580, Size: 12]
	int[] BuildingAdvertismentIds;//[Offset: 0x58c, Size: 12]
	int MapId;//[Offset: 0x598, Size: 4]
	FString MapName;//[Offset: 0x59c, Size: 12]
	FString NavlinkPath;//[Offset: 0x5a8, Size: 12]
	FString NavMeshPath;//[Offset: 0x5b4, Size: 12]
	<int,RouteSegment> RouteSegmentList;//[Offset: 0x5c0, Size: 60]
	int IsGameModeFpp;//[Offset: 0x5fc, Size: 4]
	bool bIsUGCGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	bool bUseUserDefinedMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 1]
	DropdownSchemeData[] DropdownSchemeArray;//[Offset: 0x604, Size: 12]
	bool bKillThanksEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	bool bEnableSoundSpatialization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 1]
	int PeakCompetitionMatchType;//[Offset: 0x614, Size: 4]
	delegate OnPlayerStateChanged;//[Offset: 0x624, Size: 12]
	delegate OnGameModeInitFinished;//[Offset: 0x924, Size: 12]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x930, Size: 1]
	<byte,bool> EnabledCollectedEventDataEventIds;//[Offset: 0x934, Size: 60]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a8, Size: 1]
	float OBInfoTimeStep;//[Offset: 0xa78, Size: 4]
	float OBFiringTimeStep;//[Offset: 0xa7c, Size: 4]
	UAEPlayerController*[] ObserverControllerList;//[Offset: 0xad4, Size: 12]
	AdvertisementActorConfig[] AdvConfigList;//[Offset: 0xb2c, Size: 12]
	UAEAdvertisementActor*[] AdvActorList;//[Offset: 0xb38, Size: 12]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb44, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0xb48, Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0xb54, Size: 12]
	ReplaceTextureURLCfg[] ReplaceTextureURLList;//[Offset: 0xb60, Size: 12]
	ReplaceTextureURLCfg[] ReplaceMeshAssetPathList;//[Offset: 0xb6c, Size: 12]
	CakeInfo CakeInfo;//[Offset: 0xb78, Size: 24]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0xb90, Size: 4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0xb94, Size: 4]
	int GameRatingId;//[Offset: 0xb98, Size: 4]
	int ChooseRatingType;//[Offset: 0xb9c, Size: 4]
	uint32[] NeedReplayPlayers;//[Offset: 0xba0, Size: 12]
	int TotalPlayerNum;//[Offset: 0xbac, Size: 4]
	int TotalRealPlayerNum;//[Offset: 0xbb0, Size: 4]
	int TotalGeneratedPickup;//[Offset: 0xbb4, Size: 4]
	DSTestComponent* DSTestComponent;//[Offset: 0x10a0, Size: 4]
	DeadBoxItem[] InitialDeadBoxItemList;//[Offset: 0x10a4, Size: 12]
	<uint64,TrainingStatisticsData> TrainingStatisticsDataMap;//[Offset: 0x10d0, Size: 60]
	bool UseGMSpawnItemSpotDefaultTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1150, Size: 1]
	FString GMSpawnItemSpotDefaultTag;//[Offset: 0x1154, Size: 12]
	GMDataManager* DataManager;//[Offset: 0x11d8, Size: 4]
	GMComponentManager* ComponentManager;//[Offset: 0x11dc, Size: 4]
	ObjectPoolReservation[] ObjectPoolReservations;//[Offset: 0x11e0, Size: 12]
	float DelayKillDSTimeWhenClassFieldAccessDeniedTime;//[Offset: 0x11ec, Size: 4]
	void TestPlaneBannerInEditor();// 0x2fc9f58
	void SyncPlayerStaticInfo();// 0x2707350
	void SyncNewCorpsData(out const DSCorpsInfo[] OutCorpsData);// 0x2fc9e84
	void SyncLiveInfo(uint64 UID, FString LiveID, int LiveType);// 0x2fc9d00
	Pawn* SpawnUAEPawnFor(Controller* NewPlayer, Transform Trans);// 0x2fc9bc0
	void SoftKickPlayer(uint32 PlayerKey, FName PlayerType, bool bSendFailure, FString FailureMessage);// 0x2fc99dc
	void SoftCloseConnection(NetConnection* Connection, bool bSendFailure, FString FailureMessage);// 0x2fc9858
	void SetTrainingStatisticsData(uint64 UID, TrainingStatisticsData TrainingStatisticsData);// 0x2fc9750
	void SetPlayerOpenId(uint32 InPlayerKey, FString InPlayerOpenID);// 0x2fc9674
	void SetPlayerAllowWatch(uint32 PlayerKey, bool allowWatch);// 0x2fc95a8
	void SetEnablePlaneBanner(bool bEnable);// 0x2fc9528
	GameModeTeamBattleResultData RetrieveTeamBattleResultData(int TeamID);// 0x2fc9488
	int[] RetrieveRemainingTeams();// 0x2fc93ec
	GameModeMatchGoalAchievedData RetrieveGameModeMatchGoalAchievedData();// 0x2fc93a4
	void RestartPlayerAtPlayerStartWithClass(Controller* NewPlayer, Actor* StartSpot, class Pawn PawnClass);// 0x2fc929c
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x2fc91d8
	void Rescue(int RescuerKey, uint32 SavorKey);// 0x2fc9114
	bool ReportCollectedEventDataWithPlayerValidation(UAEPlayerController* UAEPlayerController, byte EventId, delegate CollectReportedEventDataCallback);// 0x2fc8fe0
	bool ReportCollectedEventDataWithPlayersValidation(byte EventId, delegate CollectReportedEventDataCallback);// 0x2fc8ef0
	bool ReportCollectedEventData(out const FString UID, byte EventId, out const CollectedEventData Data);// 0x2fc8d38
	void RemoveUnuseComponentInternal(ActorComponent* CompToRemove);// 0x26a58d8
	void RegisterItemGroupSpotsByTag(FName Tag, GroupSpotSceneComponent* GroupSpotComponent);// 0x2fc8c74
	void RegisterItemGroupSpots(GroupSpotSceneComponent* GroupSpotComponent);// 0x2fc8bf4
	void RefreshWatchTeammates(UAEPlayerController* InController, int InTeamID);// 0x2fc8b30
	void RefreshPlayerStaticInfo(uint32 InPlayerKey, FString InPlayerName, FString PlayerUID, int TeamID, byte IdxInTeam, int JumpSegmentID, bool IsLogin);// 0x2fc8830
	int RecoardAlivePlayerNum();// 0x2fc8800
	bool QuitGameIsNotEscape();// 0x266c840
	PlayerController* PreCreatePlayerController(uint32 PlayerKey);// 0x2fc8778
	void OnPlayerStopFire(uint32 InPlayerKey);// 0x2fc86f8
	void OnPlayerStartFire(uint32 InPlayerKey);// 0x2fc8678
	void OnPlayerRealExit(PlayerController* Exiting);// 0x2fc85f8
	void OnObserverLogout(UAEPlayerController* InController);// 0x2fc8580
	void OnObserverLogin(UAEPlayerController* InController);// 0x2fc8508
	void OnNotifyPlayerExit(UAEPlayerController* ExitPlayer, FString Message);// 0x46f6b154
	void OnNormalPlayerLogin(UAEPlayerController* InController);// 0x2fc8488
	void OnMsg(FString Msg);// 0x2fc83f0
	void NotifyTeamParamsSynced(out const GameModeTeamParams[] TeamParams);// 0x2fc831c
	void NotifyPrePlayerExit(uint32 PlayerKey, FName PlayerType);// 0x24e10d0
	void NotifyPlayerPrompt(uint32 PlayerKey, int TeamID, int PromptType, FString Msg);// 0x2fc8154
	void NotifyPlayerExit(uint32 PlayerKey, FName PlayerType, bool bDestroyPlayerController, bool bDestroyCharacter, bool bSendFailure, FString FailureMessage);// 0x2fc7ed4
	void NotifyPlayerAbleToExitSafely(uint32 PlayerKey, FName PlayerType);// 0x2fc7e10
	void NotifyGameModeInit();// 0x23bfc1c
	float ModifyFinalDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x2fc7c4c
	float ModifyDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x2fc7a88
	void Killed(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, out const DamageEvent DamageEvent);// 0x2fc7914
	void KillCharacterOnPlayerExit(PlayerController* PC);// 0x2fc7894
	bool IsPlayerCollectedEventDataReportingEnabled(UAEPlayerController* UAEPlayerController, byte EventId);// 0x2fc77d0
	bool IsFeatureSupported(enum SubSystemType);// 0x261e2e4
	bool IsCollectedEventEnabled(byte EventId);// 0x2fc7750
	void InitAdvertisement();// 0x2fc7734
	void Heartbeat();// 0x2fc7720
	bool HasMatchGoalAchieved();// 0x266c688
	void HandlePlayerPaintDecalResponse(uint32 PlayerKey, FName PlayerType, int Result, int DecalId, int Count);// 0x2fc7584
	void HandlePlayerGiftItemResponse(uint32 PlayerKey, FName PlayerType, int Result, int GiftResID, int Count);// 0x2fc73e8
	void GotoNearDeath(Controller* DamageInstigator, Pawn* VictimPawn);// 0x2fc7324
	int GetUniqueLogicID();// 0x2fc72fc
	TrainingStatisticsData GetTrainingStatisticsDataByUID(uint64 UID);// 0x2fc7254
	int GetSurvivingTeamCount();// 0x2fc7224
	int GetSurvivingCharacterCount();// 0x2fc71f4
	UAEPlayerState*[] GetPlayerStateListWithTeamID(int TeamID, FName PlayerType);// 0x2fc70cc
	UAEPlayerState* GetPlayerStateByUID(out const FString UID);// 0x2fc7024
	UAEPlayerController*[] GetPlayerControllerListWithTeamID(int TeamID, FName PlayerType);// 0x2fc6efc
	void GetPlayerAndRealAiNum(out int OutPlayerNum, out int OutRealAiNum);// 0x2fc6e14
	FString GetPlayerAddress(uint32 PlayerKey);// 0x2fc6d38
	UAEPlayerController*[] GetObserverControllerList();// 0x2fc6ca4
	DynamicBattleRankInfo[] GetDynamicBattleRankInfoList();// 0x2fc6bb4
	GameModePlayerParams[] GetDSPlayerList();// 0x2fc6ae4
	UAEPlayerState* FindPlayerStateWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x2fc6a20
	UAEPlayerController* FindPlayerControllerWithPlayerKey(uint32 PlayerKey, FName PlayerType);// 0x2fc695c
	UAEPlayerController* FindPlayerControllerWithInt64PlayerKey(int64 PlayerKey);// 0x2fc68d8
	void DestroyCharacterForPlayerController(PlayerController* PC);// 0x2fc6858
	void DebugEnterFriendObserver(UAEPlayerController* InController);// 0x2fc67d8
	void CreateDynamicComponentForPlayerController(PlayerController* NewPlayer);// 0x260477c
	void CreateDynamicComponentForCharacter(Pawn* NewPawn);// 0x2fc6758
	CollectedEventData CollectReportedEventDataCallback__DelegateSignature(UAEGameMode* UAEGameMode, UAEPlayerController* UAEPlayerController, byte EventId);// 0x46f6b154
	bool CheckPickupItemLimitedCount(out const ItemDefineID InTargetItem, const BackpackComponent* InTargetBackpack, const int InTargetPickupCount, out int OutLimitedItemCount);// 0x23c06b0
	bool CheckFeatureSupported(byte SubSystemId);// 0x2fc66d0
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x2fc65a8
	UAEPlayerState* BPFindPlayerStateWithPlayerKey(FString PlayerKey);// 0x2fc64bc
	UAEPlayerController* BPFindPlayerControllerWithPlayerKey(FString PlayerKey);// 0x2fc63d0

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: SpawnZombieActiveMaxCfg
	FString Name;//[Offset: 0x0, Size: 12]
	int Max;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x23d, Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23e, Size: 1]
	int WorldCompositionID;//[Offset: 0x240, Size: 4]
	float LastGenerateItemTime;//[Offset: 0x244, Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x248, Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	bool bHasRegisterToGenenrator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24e, Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24f, Size: 1]
	void SetGroupValid(bool Valid);// 0x2383b1c
	bool IsValidGroup();// 0x2faab10
	int FindWorldCompositionID();// 0x2faaae8
	void DoPickUp();// 0x2faaad4

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DropdownSchemeData
	int SchemeId;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	FString ItemName;//[Offset: 0x8, Size: 12]
	int MaxNum;//[Offset: 0x14, Size: 4]
	int MinNum;//[Offset: 0x18, Size: 4]
	int Probability;//[Offset: 0x1c, Size: 4]
	byte DropType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AdvertisementActorConfig
	FString resPath;//[Offset: 0x0, Size: 12]
	FString HttpImgPath;//[Offset: 0xc, Size: 12]
	Vector Loc;//[Offset: 0x18, Size: 12]
	Rotator Rot;//[Offset: 0x24, Size: 12]
	Vector Scale;//[Offset: 0x30, Size: 12]
	bool HideWhenFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]

--------------------------------
Class: UAEAdvertisementActor.StaticMeshActor.Actor.Object
	StaticMesh* StaticMesh;//[Offset: 0x2f4, Size: 4]
	FString StaticMeshPath;//[Offset: 0x2f8, Size: 12]
	FString PicUrl;//[Offset: 0x304, Size: 12]
	FrontendHUD* FrontendHUD;//[Offset: 0x310, Size: 4]
	float NetCullDistance;//[Offset: 0x318, Size: 4]
	bool ShouldBeDisabled(int DisableAdvertisementCategories);// 0x2fbf2f4
	void SetStaticMeshPath(FString InMeshPath);// 0x2fbf25c
	void SetScale(Vector InScale);// 0x2fbf1d4
	void SetHttpImage(FString InPicURL);// 0x2fbf13c
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x2fbf068
	void OnRep_PicURL();// 0x2fbf054
	void OnRep_MeshPath();// 0x2fbf040
	static int GetDisableAdvertisementCategories();// 0x2fbf014

--------------------------------
Class: ReplaceTextureURLCfg
	FString URL;//[Offset: 0x0, Size: 12]
	int ID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CakeInfo
	FString CakeActorPath;//[Offset: 0x0, Size: 12]
	FString CakeButtonImage;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x244, Size: 12]
	bool bUseCookedSpreadPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	byte BornIslandGroupType;//[Offset: 0x251, Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x254, Size: 196]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x31c, Size: 12]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	FString[] AreaIDList;//[Offset: 0x32c, Size: 12]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x338, Size: 12]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x344, Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x380, Size: 20]
	CurveFloat* SpotRateCurve;//[Offset: 0x394, Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x398, Size: 4]
	<FString,float> CategoryRates;//[Offset: 0x39c, Size: 60]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x3d8, Size: 60]
	Actor*[] BornIslandItems;//[Offset: 0x414, Size: 12]
	ItemGroupSpotSceneComponent*[] AllValidGroups;//[Offset: 0x420, Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x430, Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x438, Size: 8]
	<FString,int> ItemTypeParam;//[Offset: 0x440, Size: 60]
	<FString,int> ItemSubTypeParam;//[Offset: 0x47c, Size: 60]
	float DelayGenerateTime;//[Offset: 0x4b8, Size: 4]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x4f8, Size: 12]
	int TotalGeneratedPickup;//[Offset: 0x558, Size: 4]
	void WriteItemClassStatisticsDatas();// 0x2fae7c8
	void WriteGroupStatisticsDatas();// 0x2fae7b4
	void WriteBuildingStatisticsDatas();// 0x2fae7a0
	void WriteAllStatisticsDatasToLog();// 0x24e5e68
	void WriteAllStatisticsDatas();// 0x257e478
	void SetCatetoryRateConfig(float Scale, out <FString,float> Rates);// 0x2fae668
	void SetCatetoryRate(<FString,float> Rates);// 0x2fae504
	void RegisterItemGenerateSpawnData(ItemGenerateSpawnData Data);// 0x2fae380
	void RegisterBornIslandItem(Actor* Item);// 0x2507c20
	ItemGroupSpotSceneComponent* RandomSingleGroup(out GroupSpotSceneComponent*[] Groups, out const SpotGroupProperty GroupProperty);// 0x2fae270
	ItemGenerateSpawnData RandomItemGenerateSpawnData(out ItemGenerateSpawnData[] Items);// 0x2fae160
	void RandomGroupsByType(out const SpotGroupProperty GroupProperty);// 0x2fae0c8
	void RandomGroups();// 0x234fef0
	void RandomBornIslandGroups();// 0x257e45c
	void LoadItemGenerateTable();// 0x24aaeb0
	bool IsCatetoryEnabled();// 0x2fae0a0
	void InitItemGenerator(out FString InItemTableName, out <FString,int> InItemTypeParam, out <FString,int> InItemSubTypeParam);// 0x2fade78
	void InitCatetorysEx();// 0x2fade64
	void InitCatetorys();// 0x2fade50
	SpotGroupProperty GetSpotGroupPropertyByGroupType(byte SpotGroupType);// 0x2faddb0
	bool GetRandomItemClassArray(out FString Value, out FString Category, out ItemGenerateSpawnClass[] Results, bool RepeatGenerateItem);// 0x2fadbdc
	int GetItemTypeParamValueByName(FString Name);// 0x2fadaf0
	int GetItemSubTypeParamValueByName(FString Name);// 0x2fada04
	float GetCatetoryRate(FString Catetory);// 0x2fad96c
	void GenerateSpotOnTick(float DeltaTime);// 0x23d0ab0
	void DeleteValidGroups();// 0x2fad958
	void DeleteBornIslandItems();// 0x2fad944

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0xd4, Size: 4]
	FString ItemTableName;//[Offset: 0xd8, Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0xe4, Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	int DefaultParam;//[Offset: 0xec, Size: 4]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0xf0, Size: 60]
	SpotSceneComponent*[] AllSpotsToTick;//[Offset: 0x12c, Size: 12]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x138, Size: 60]
	GroupSpotSceneComponent*[] RepeatGroups;//[Offset: 0x174, Size: 12]
	float DetalRepeatTime;//[Offset: 0x180, Size: 4]
	float LineOffsetZ;//[Offset: 0x188, Size: 4]
	FString CookedFilePath;//[Offset: 0x18c, Size: 12]
	FString[] CookedFilePathForLayers;//[Offset: 0x198, Size: 12]
	UAESpotDataSerialize SpotDataSerialize;//[Offset: 0x1a8, Size: 144]
	bool bUseVehicleLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	int MaxItemCount;//[Offset: 0x23c, Size: 4]
	void RegisterWorldTileSpot(SpotSceneComponent* Spot);// 0x257e3dc
	void RegisterSpotComponentToTick(SpotSceneComponent* SpotComponent);// 0x24fbdb0
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x23f5f9c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x2f995e4
	void GeneratorWorldTileSpots(out WorldTileSpotArray SpotArray);// 0x2f99544
	void GenerateSpots();// 0x236bc90
	void GenerateSpotOnTick(float DeltaTime);// 0x23d0ab0
	Actor* GeneratePickupActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x2f99234
	void CheckTileLevelsVisible();// 0x23d0bcc

--------------------------------
Class: ItemActorComponent.ActorComponent.Object

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4, Size: 4]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10, Size: 60]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c, Size: 60]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88, Size: 60]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x4, Size: 1]
	int AllGroupSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0xc, Size: 4]
	int AllSpotCount;//[Offset: 0x10, Size: 4]
	int AllValidSpotCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: TableRowBase

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x4, Size: 12]
	float BuildingLocationX;//[Offset: 0x10, Size: 4]
	float BuildingLocationY;//[Offset: 0x14, Size: 4]
	int AllGroupSpotCount;//[Offset: 0x18, Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x1c, Size: 4]
	int AllSpotCount;//[Offset: 0x20, Size: 4]
	int AllValidSpotCount;//[Offset: 0x24, Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28, Size: 60]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	int AllSpotCount;//[Offset: 0x8, Size: 4]
	int AllValidSpotCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString ItemPath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int ItemCount;//[Offset: 0x14, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x18, Size: 12]
	int ItemTogetherCount;//[Offset: 0x24, Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0, Size: 1]
	int SpotGroupPercent;//[Offset: 0x4, Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8, Size: 12]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	int SpotPercentMin;//[Offset: 0x4, Size: 4]
	int SpotPercentMax;//[Offset: 0x8, Size: 4]
	int SpotPercentDot;//[Offset: 0xc, Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10, Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14, Size: 4]
	int ItemPerSpotTotal;//[Offset: 0x18, Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x1c, Size: 12]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x28, Size: 12]
	float DelayToBeginSpawn;//[Offset: 0x34, Size: 4]
	float CDBetweenSpawn;//[Offset: 0x38, Size: 4]

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0, Size: 12]
	int weight;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0, Size: 1]
	GroupSpotSceneComponent*[] AllGroupComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0, Size: 12]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemGenerateSpawnData
	int keyID;//[Offset: 0x0, Size: 4]
	FString ItemValue;//[Offset: 0x4, Size: 12]
	FString ItemCategory;//[Offset: 0x10, Size: 12]
	FString ItemSubCategory;//[Offset: 0x1c, Size: 12]
	int ItemWeight;//[Offset: 0x28, Size: 4]
	FString ItemPath;//[Offset: 0x2c, Size: 12]
	int ItemStackCount;//[Offset: 0x38, Size: 4]
	FString ItemTogetherPath;//[Offset: 0x3c, Size: 12]
	int ItemTogetherStackCount;//[Offset: 0x48, Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x4c, Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x50, Size: 4]
	FString MetaData;//[Offset: 0x54, Size: 12]

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x23d, Size: 1]
	float HalfHeight;//[Offset: 0x240, Size: 4]
	int SpotProbability;//[Offset: 0x244, Size: 4]
	int WorldCompositionID;//[Offset: 0x248, Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24d, Size: 1]
	float LineOffsetZ;//[Offset: 0x250, Size: 4]
	void SetSpotValid(bool Valid);// 0x2fbe5f4
	bool LineTraceSingle(Object* WorldContextObject, const Vector Start, const Vector End, bool bTraceComplex, out const Actor*[] ActorsToIgnore, out HitResult OutHit, bool bIgnoreSelf);// 0x2fbe344
	bool IsSpotValid();// 0x2526794
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x2fbe20c
	bool GenerateSpot();// 0x2fb00c0
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x2524b9c

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0, Size: 4]
	class Object* ItemClass;//[Offset: 0x4, Size: 4]
	int ItemCount;//[Offset: 0x8, Size: 4]
	FString MetaData;//[Offset: 0xc, Size: 12]
	FString ItemValue;//[Offset: 0x18, Size: 12]
	FString ItemCategory;//[Offset: 0x24, Size: 12]
	bool IsNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Actor* HostActor;//[Offset: 0x6c, Size: 4]

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0, Size: 4]
	SpotSceneComponent*[] AllSpotComponents;//[Offset: 0x4, Size: 12]

--------------------------------
Class: UAESpotDataSerialize

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x254, Size: 4]
	ItemSpotSceneComponent*[] SpotsCacheCur;//[Offset: 0x258, Size: 12]
	ItemSpotSceneComponent*[] SpotsCacheAll;//[Offset: 0x264, Size: 12]
	byte RegionType;//[Offset: 0x270, Size: 1]
	void SetGroupProperty(ItemGeneratorComponent* Generator, out const SpotGroupProperty Property);// 0x2fafa3c
	void RepeatSpots();// 0x2fafa28
	void RepeatSingleSpot(ItemSpotSceneComponent* Spot);// 0x2faf9b0
	void RegisterSpotsToGenerator();// 0x2faf99c
	void RandomSpotByType(byte SpotType, out ItemSpotSceneComponent*[] AllSpots, out const SpotTypeProperty Property);// 0x2faf7c4
	void RandomSingleSpot(out ItemSpotSceneComponent*[] Spots, out const SpotTypeProperty Property);// 0x2faf638
	float RandomRepeatGenerateItemCD(out const SpotGroupProperty GroupProperty);// 0x2faf598

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x254, Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x25c, Size: 12]
	byte SpotGroupType;//[Offset: 0x26c, Size: 1]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x270, Size: 4]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x274, Size: 4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x278, Size: 60]
	void SetSpotProperty(int CompositionID, byte GroupType, ItemGeneratorComponent* Generator, out const SpotTypeProperty Property, GroupSpotSceneComponent* Component, bool RepeatGenerateItem);// 0x2fb020c
	void RepeatSpotProperty(out const SpotTypeProperty Property);// 0x2fb00f0
	bool GenerateSpot();// 0x2fb00c0
	void GenerateItems(out ItemGenerateSpawnClass[] AllItemClass);// 0x2fb0028
	void DoPickUp(FString ItemValue, FString ItemCategory);// 0x2fafe94
	int CountCacheItemValeCategory();// 0x2fafe6c

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	VehicleSpotSceneComponent*[] VehicleSpotSceneComponentList;//[Offset: 0x244, Size: 12]
	VehicleSpotProperty[] VehicleSpotPropertys;//[Offset: 0x250, Size: 12]
	TreasureBoxSpotProperty[] TreasureBoxSpotPropertys;//[Offset: 0x25c, Size: 12]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	<byte,VehicleSpotComponentArray> AllVehicleSpots;//[Offset: 0x26c, Size: 60]
	<byte,VehicleSpotComponentArray> AllTreasureBoxSpots;//[Offset: 0x2a8, Size: 60]
	<FString,VehicleGenerateSpawnDataArray> VehicleGenerateSpawnDatas;//[Offset: 0x2e4, Size: 60]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x320, Size: 72]
	byte RegionType;//[Offset: 0x368, Size: 1]
	UAEDataTable* VehicleDataTable;//[Offset: 0x36c, Size: 4]
	<FString,int> VehicleTypeParam;//[Offset: 0x370, Size: 60]
	<FString,int> VehicleSubTypeParam;//[Offset: 0x3ac, Size: 60]
	<FString,float> CategoryRates;//[Offset: 0x3e8, Size: 60]
	void WriteVehicleSpotStatisticsDatas();// 0x2fe14a0
	void WriteVehicleClassStatisticsDatas();// 0x2fe148c
	void WriteAllVehicleStatisticsDatasToLog();// 0x2fe1478
	void WriteAllVehicleStatisticsDatas();// 0x235d4b8
	void SetCatetoryRate(<FString,float> Rates);// 0x2fe1314
	void RegisterVehicleGenerateSpawnData(VehicleGenerateSpawnData Data);// 0x2fe113c
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x23f5f9c
	void RandomTreasureBoxSpotsByType(out TreasureBoxSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x2fe0ffc
	void RandomTreasureBoxSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out TreasureBoxSpotProperty Property);// 0x2fe0ebc
	void RandomSpotsByType(out VehicleSpotProperty Property, out VehicleSpotComponentArray Spots);// 0x2fe0d7c
	void RandomSingleSpots(out VehicleSpotSceneComponent*[] AllSpots, out VehicleSpotProperty Property);// 0x2fe0c3c
	void RandomGroups();// 0x234fef0
	void LoadVehicleGenerateTable();// 0x46f6b154
	bool IsCatetoryEnabled();// 0x2fe0c14
	void InitVehicleGenerator(out FString InItemTableName, out <FString,int> InVehicleTypeParam, out <FString,int> InVehicleSubTypeParam);// 0x2fe09ec
	void InitCatetorys();// 0x2fe09d8
	int GetVehicleTypeParamValueByName(FString Name);// 0x2fe08ec
	int GetVehicleSubTypeParamValueByName(FString Name);// 0x2fe0800
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfoBySpotType(byte SpotType);// 0x2fe06bc
	VehicleGenerateRandomInfo GetVehicleSpotRandomInfo(out VehicleSpotProperty SpotProperty);// 0x2fe0528
	VehicleGenerateRandomInfo GetTreasureBoxSpotRandomInfo(out TreasureBoxSpotProperty SpotProperty);// 0x2fe0394
	VehicleGenerateSpawnData GetRandomVehicleClass(FString Category);// 0x2fe019c
	FString GetRandomCategory(out const SpotWeight[] SpotWeights);// 0x2f995e4
	float GetCatetoryRate(FString Catetory);// 0x2fe0104
	void GenerateSpotOnTick(float DeltaTime);// 0x23d0ab0
	void DeleteGroups();// 0x2fe00f0
	void CheckTileLevelsVisible();// 0x23d0bcc
	void AddVehicleSpotCount(byte SpotType, FString Path, float LocationX, float LocationY, float LocationZ);// 0x2fdfeec
	void AddVehicleClassCount(FString Path, bool IsValid, int Count);// 0x2fdfd74

--------------------------------
Class: VehicleSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotGroupType;//[Offset: 0x258, Size: 1]
	byte RegionType;//[Offset: 0x259, Size: 1]
	bool bHasGenerateSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 1]
	bool bRandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 1]
	float RandomRotationMin;//[Offset: 0x25c, Size: 4]
	float RandomRotationMax;//[Offset: 0x260, Size: 4]
	VehicleGenerateRandomInfo SpotRandomInfo;//[Offset: 0x268, Size: 32]
	void SetSpotRandomInfo(out VehicleGenerateRandomInfo RandomInfo);// 0x2fe3264
	bool GenerateSpot();// 0x2fb00c0

--------------------------------
Class: VehicleGenerateRandomInfo
	FString VehicleType;//[Offset: 0x0, Size: 12]
	FString VehiclePath;//[Offset: 0xc, Size: 12]
	float FuelPercent;//[Offset: 0x18, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]

--------------------------------
Class: VehicleSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int FuelPercentMin;//[Offset: 0x10, Size: 4]
	int FuelPercentMax;//[Offset: 0x14, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	byte RandomType;//[Offset: 0x19, Size: 1]
	float TotalCountMultiplierWithPalyerCount;//[Offset: 0x1c, Size: 4]
	int TotalCountRangeMin;//[Offset: 0x20, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x24, Size: 4]
	float ProbabilityPersent;//[Offset: 0x28, Size: 4]
	float ProbabilityPersentWithPalyerCount;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TreasureBoxSpotProperty
	byte SpotType;//[Offset: 0x0, Size: 1]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x4, Size: 12]
	int TotalCountRangeMin;//[Offset: 0x10, Size: 4]
	int TotalCountRangeMax;//[Offset: 0x14, Size: 4]

--------------------------------
Class: VehicleSpotComponentArray
	byte SpotType;//[Offset: 0x0, Size: 1]
	VehicleSpotSceneComponent*[] AllSpots;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnDataArray
	FString Catetory;//[Offset: 0x0, Size: 12]
	VehicleGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehicleGenerateSpawnData
	int keyID;//[Offset: 0x0, Size: 4]
	FString VehicleType;//[Offset: 0x4, Size: 12]
	FString VehicleSubType;//[Offset: 0x10, Size: 12]
	FString VehiclePath;//[Offset: 0x1c, Size: 12]
	int VehicleWeight;//[Offset: 0x28, Size: 4]
	bool SnapFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData[] VehicleSpotStatisticsData;//[Offset: 0x0, Size: 12]
	<FString,VehicleClassStatisticsData> VehicleClassStatisticsData;//[Offset: 0xc, Size: 60]

--------------------------------
Class: VehicleSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4, Size: 1]
	FString VehiclePath;//[Offset: 0x8, Size: 12]
	float VehicleLocationX;//[Offset: 0x14, Size: 4]
	float VehicleLocationY;//[Offset: 0x18, Size: 4]
	float VehicleLocationZ;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: VehicleClassStatisticsData.TableRowBase
	FString VehiclePath;//[Offset: 0x4, Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int AllVehicleCount;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DSTestComponent.ActorComponent.Object
	UAEGameMode* GameMode;//[Offset: 0xd0, Size: 4]
	void SpawnPlayer(int Count);// 0x2f99ff8

--------------------------------
Class: DeadBoxItem
	int item_id;//[Offset: 0x0, Size: 4]
	int cur_count;//[Offset: 0x4, Size: 4]
	int total_count;//[Offset: 0x8, Size: 4]
	int weight;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GMDataManager.Object
	GMDataSource*[] DataSources;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: GMDataSource.Object

--------------------------------
Class: GMComponentManager.Object
	<enum,ActorComponent*> Components;//[Offset: 0x1c, Size: 60]
	Object* OwnerGameMode;//[Offset: 0x58, Size: 8]
	GMSubSystemBase*[] ComponentConfigs;//[Offset: 0x60, Size: 12]

--------------------------------
Class: GMSubSystemBase.Object
	enum SubSystemId;//[Offset: 0x1c, Size: 1]
	class Object* SubSystemClass;//[Offset: 0x20, Size: 4]
	DynamicCompConfig[] DynamicComponents;//[Offset: 0x24, Size: 12]

--------------------------------
Class: DynamicCompConfig
	enum CompType;//[Offset: 0x0, Size: 1]
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	class Object* DynamicCompClass;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ObjectPoolReservation
	class Object* ObjectClass;//[Offset: 0x0, Size: 4]
	enum FeatureSetType;//[Offset: 0x4, Size: 1]
	int MinNumOverride;//[Offset: 0x8, Size: 4]
	int MaxNumOverride;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DSCorpsInfo
	uint64 CorpsID;//[Offset: 0x0, Size: 8]
	FString CorpsName;//[Offset: 0x8, Size: 12]
	int Icon;//[Offset: 0x14, Size: 4]
	int SegmentLevel;//[Offset: 0x18, Size: 4]

--------------------------------
Class: GameModeTeamBattleResultData
	FString Reason;//[Offset: 0x0, Size: 12]
	int RemainTeamCount;//[Offset: 0xc, Size: 4]
	int RemainAlivePlayerCount;//[Offset: 0x10, Size: 4]
	<FString,FString> PlayersLogoutTime;//[Offset: 0x14, Size: 60]
	GameModeCorpsDetailData[] RealTimeCorpsRank;//[Offset: 0x50, Size: 12]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	<uint64,RevengeEvent> RevengeEventList;//[Offset: 0x60, Size: 60]

--------------------------------
Class: GameModeCorpsDetailData
	FString Name;//[Offset: 0x0, Size: 12]
	int CorpsHeadIcon;//[Offset: 0xc, Size: 4]
	int KilledNum;//[Offset: 0x10, Size: 4]
	int SegmentLevel;//[Offset: 0x14, Size: 4]
	int RealtimeRank;//[Offset: 0x18, Size: 4]
	int DefeatPlayerNum;//[Offset: 0x1c, Size: 4]
	float TotalDamage;//[Offset: 0x20, Size: 4]
	float SurvivalTime;//[Offset: 0x24, Size: 4]

--------------------------------
Class: RevengeEvent
	<uint64,uint16> IRevengedWhom;//[Offset: 0x0, Size: 60]

--------------------------------
Class: GameModeMatchGoalAchievedData
	int RemainAlivePlayerCount;//[Offset: 0x0, Size: 4]
	int GamePlayingTime;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameModeTeamParams
	int TeamID;//[Offset: 0x0, Size: 4]
	int[] UIDs;//[Offset: 0x4, Size: 12]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int CollectedEventType;//[Offset: 0x14, Size: 4]

--------------------------------
Class: DynamicBattleRankInfo
	int BattleRank;//[Offset: 0x0, Size: 4]
	uint64 PlayerUID;//[Offset: 0x8, Size: 8]
	int RevivalTimes;//[Offset: 0x10, Size: 4]
	int64[] KillerUIDs;//[Offset: 0x14, Size: 12]
	int DeadTimes;//[Offset: 0x20, Size: 4]

--------------------------------
Class: GameModePlayerParams
	uint64 UID;//[Offset: 0x0, Size: 8]
	FName PlayerType;//[Offset: 0x8, Size: 8]
	FString PlayerName;//[Offset: 0x10, Size: 12]
	uint32 PlayerKey;//[Offset: 0x1c, Size: 4]
	uint32 WorldParallelismID;//[Offset: 0x20, Size: 4]
	int TeamID;//[Offset: 0x24, Size: 4]
	FString OpenID;//[Offset: 0x28, Size: 12]
	bool NeedScreenShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int PlayerBornPointID;//[Offset: 0x38, Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bIsGMWatcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	bool bHighPriorityRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 1]
	byte Gender;//[Offset: 0x40, Size: 1]
	FString PIC_URL;//[Offset: 0x44, Size: 12]
	int Level;//[Offset: 0x50, Size: 4]
	int Segment_Level;//[Offset: 0x54, Size: 4]
	int AvatarBoxId;//[Offset: 0x58, Size: 4]
	int TopSegmentTimes;//[Offset: 0x5c, Size: 4]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	GameModePlayerItem[] ItemList;//[Offset: 0x64, Size: 12]
	GameModePlayerItem[] fireworksInfo;//[Offset: 0x70, Size: 12]
	SuitSkinData SuitSkinData;//[Offset: 0x7c, Size: 28]
	WeaponModData[] WeaponModDatas;//[Offset: 0x98, Size: 12]
	GameModePlayerExpressionItem[] ExpressionItemList;//[Offset: 0xa4, Size: 12]
	GameModePlayerDecalItem[] DecalItemList;//[Offset: 0xb0, Size: 12]
	GameModePlayerTaskData[] TaskDataList;//[Offset: 0xbc, Size: 12]
	GameModePlayerItem[] WeaponAvatarList;//[Offset: 0xc8, Size: 12]
	GameModePlayerItem[] VehicleAvatarList;//[Offset: 0xd4, Size: 12]
	FString[] KeepWeaponDataList;//[Offset: 0xe0, Size: 12]
	GameModePlayer_WearInfo PlayerWearInfo;//[Offset: 0xec, Size: 144]
	PlayerOBInfo PlayerOBInfo;//[Offset: 0x180, Size: 288]
	GameModePlayerBanChat[] banList;//[Offset: 0x2a0, Size: 12]
	SpecialPickItem[] SpecialPickItem;//[Offset: 0x2ac, Size: 12]
	DeadBoxItem[] deadBoxItemList;//[Offset: 0x2b8, Size: 12]
	WeaponLobbyInitialData WeaponLobbyInitialData;//[Offset: 0x2c4, Size: 12]
	PlayerTotalWeaponsConfig PlayerTotalWeaponsConfig;//[Offset: 0x2d0, Size: 16]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0x2e0, Size: 48]
	int[] audioChat;//[Offset: 0x310, Size: 12]
	FName CurrentPlayerState;//[Offset: 0x320, Size: 8]
	FName CurrentCharacterState;//[Offset: 0x328, Size: 8]
	float SyncedTimestamp;//[Offset: 0x330, Size: 4]
	float DestinyValue;//[Offset: 0x334, Size: 4]
	float WarmScore;//[Offset: 0x338, Size: 4]
	int LeaderCount;//[Offset: 0x33c, Size: 4]
	uint64 LastGameLeaderUID;//[Offset: 0x340, Size: 8]
	uint64[] LastGameTeammatesUID;//[Offset: 0x348, Size: 12]
	int JumpSegmentID;//[Offset: 0x354, Size: 4]
	uint64 LastGameBattleID;//[Offset: 0x358, Size: 8]
	int YearBeastWarmScore;//[Offset: 0x360, Size: 4]
	float RatingScore;//[Offset: 0x364, Size: 4]
	bool bDoPlayerUseAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	float MaxRankingScore;//[Offset: 0x36c, Size: 4]
	float VSTeamRatingScore;//[Offset: 0x370, Size: 4]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	bool bObserverHost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375, Size: 1]
	int OBGM;//[Offset: 0x378, Size: 4]
	int ObserverEnemyDist;//[Offset: 0x37c, Size: 4]
	uint64 WatchPlayerKey;//[Offset: 0x380, Size: 8]
	byte PlatformGender;//[Offset: 0x388, Size: 1]
	bool bIsFireworksActOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	int MatchLabel;//[Offset: 0x38c, Size: 4]
	bool IsBanPublicMic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	int AnchorPlatColorID;//[Offset: 0x394, Size: 4]
	int AnchorPlatResID;//[Offset: 0x398, Size: 4]
	FString MedalClubID;//[Offset: 0x39c, Size: 12]
	int MedalClubLevel;//[Offset: 0x3a8, Size: 4]
	int PassCardBuyType;//[Offset: 0x3ac, Size: 4]
	int PassCardBuyLevel;//[Offset: 0x3b0, Size: 4]
	bool IsEnjoyCardOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	int64 LastGameResultTime;//[Offset: 0x3b8, Size: 8]
	int64 CorpsID;//[Offset: 0x3c0, Size: 8]
	int PlayerStartSerialNum;//[Offset: 0x3c8, Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	int special_ver;//[Offset: 0x3d0, Size: 4]
	bool allow_watch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d5, Size: 1]
	int CollectedEventType;//[Offset: 0x3d8, Size: 4]
	bool bLiveVideoReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool bCollectedEVLiveEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	PlayerCharmInfo CharmInfo;//[Offset: 0x3e0, Size: 16]
	PlayerPeakInfo PeakInfo;//[Offset: 0x3f0, Size: 64]
	WingManInfo WingManInfo;//[Offset: 0x430, Size: 36]
	int GlideTypeId;//[Offset: 0x454, Size: 4]
	bool bGlideConfigState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	int GlideCount;//[Offset: 0x45c, Size: 4]
	bool GlideGlobalVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	bool showIslandNickname;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	int InitDropId;//[Offset: 0x464, Size: 4]
	int SpecMotionRestCostCount;//[Offset: 0x468, Size: 4]
	int SeasonWeekIndex;//[Offset: 0x46c, Size: 4]
	int JoinSourceType;//[Offset: 0x470, Size: 4]
	int8 is_regress;//[Offset: 0x474, Size: 1]
	int8 not_counter_ai;//[Offset: 0x475, Size: 1]
	bool bCampPrivileges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x476, Size: 1]
	bool bShowAirLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x477, Size: 1]
	bool bUseDistanceMeasurement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	bool bShowTeammateKillInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 1]
	bool bDice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47a, Size: 1]
	bool bShowResPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47b, Size: 1]
	int iCampToolStatusFromServer;//[Offset: 0x47c, Size: 4]
	bool bAchieveAce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	byte room_team_pos;//[Offset: 0x481, Size: 1]
	UGCPlayerInfo UGCPlayerInfo;//[Offset: 0x484, Size: 20]
	FString playerFaceInfo;//[Offset: 0x498, Size: 12]
	int playerFaceHandleID;//[Offset: 0x4a4, Size: 4]
	int KillThanksCount;//[Offset: 0x4a8, Size: 4]
	bool bPartiallyKillThanksToOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	bool bPartiallyKillThanksFromOthersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ad, Size: 1]
	bool bPlayGunMasterVideo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ae, Size: 1]
	int imprint_info;//[Offset: 0x4b0, Size: 4]
	bool bNeedRCR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	uint64[] LobbyTeammates;//[Offset: 0x4b8, Size: 12]

--------------------------------
Class: GameModePlayerBanChat
	int end_time;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]
	int ban_type;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PlayerTotalWeaponsConfig
	int DefaultSelectedIndex;//[Offset: 0x0, Size: 4]
	PlayerWeaponsConfig[] WeaponsConfigList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: PlayerWeaponsConfig
	FString ConfigName;//[Offset: 0x0, Size: 12]
	SingleWeaponConfig[] WeaponDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: SingleWeaponConfig
	int WeaponID;//[Offset: 0x0, Size: 4]
	int[] AttachmentIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AchievementPrize
	int[] AnimationList;//[Offset: 0x0, Size: 12]
	int[] MedalList;//[Offset: 0xc, Size: 12]
	int[] NotifyTitleList;//[Offset: 0x18, Size: 12]
	int[] BulleEffectList;//[Offset: 0x24, Size: 12]

--------------------------------
Class: PlayerCharmInfo
	int CharmValue;//[Offset: 0x0, Size: 4]
	int CharmLevel;//[Offset: 0x4, Size: 4]
	int SeasonId;//[Offset: 0x8, Size: 4]
	bool AllowViewCharmValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: PlayerPeakInfo
	int LastPeakMatchScore;//[Offset: 0x0, Size: 4]
	int LastPeakKillScore;//[Offset: 0x4, Size: 4]
	int LastPeakRankScore;//[Offset: 0x8, Size: 4]
	int LastPeakRank;//[Offset: 0xc, Size: 4]
	int LastPeakKillNum;//[Offset: 0x10, Size: 4]
	int PeakSegmentLevel;//[Offset: 0x14, Size: 4]
	FString TeamName;//[Offset: 0x18, Size: 12]
	bool bIsTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int64 JoinTeamTime;//[Offset: 0x28, Size: 8]
	FString TeamLogoID;//[Offset: 0x30, Size: 12]

--------------------------------
Class: WingManInfo
	int CurrentWingManID;//[Offset: 0x0, Size: 4]
	FString CurrentWingManName;//[Offset: 0x4, Size: 12]
	bool bFuelNotEnoughHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bFuelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	WingManFuelInfo[] FuelInfoList;//[Offset: 0x14, Size: 12]
	bool bDisplayWingMan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: WingManFuelInfo
	int FuelID;//[Offset: 0x0, Size: 4]
	int FuelNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: NetRelevancyGroup

--------------------------------
Class: UAEGameState.GameState.GameStateBase.Info.Actor.Object
	delegate UAEGameStateReplicatedWorldTimeSecondsSynced;//[Offset: 0x340, Size: 12]
	int MonsterCount;//[Offset: 0x34c, Size: 4]
	int ItemCount;//[Offset: 0x350, Size: 4]
	int VehicleCount;//[Offset: 0x354, Size: 4]
	int InactiveZombieCount;//[Offset: 0x358, Size: 4]
	int DeactiveZombieCount;//[Offset: 0x35c, Size: 4]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool bEnableAllPlayerFixInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	AllPlayerFixInfo AllPlayerFixInfo;//[Offset: 0x364, Size: 72]
	bool IsGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	bool IsGeneRateZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1, Size: 1]
	bool IsGeneRateStaticConfigZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b2, Size: 1]
	bool IsCanRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b3, Size: 1]
	FString[] ModeUIManagerArray;//[Offset: 0x3b8, Size: 12]
	bool IsSetItemMaxCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	float ReplayStartRecordTime;//[Offset: 0x3d8, Size: 4]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool bUseMoveInputStateUseSixteenDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	int GameRatingId;//[Offset: 0x3e0, Size: 4]
	int ChooseRatingType;//[Offset: 0x3e4, Size: 4]
	bool IsMatchRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool bIsUGCGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	bool bUseUserDefinedMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 1]
	bool IsCompetitionOnline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb, Size: 1]
	bool IsGMatchRoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool bKillThanksEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	bool bEnableSoundSpatialization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 1]
	bool bShowKillingTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ef, Size: 1]
	bool bShowVoiceInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	int PeakCompetitionMatchType;//[Offset: 0x3f4, Size: 4]
	bool bCollectedEventDataReportingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	byte[] DisabledCollectedEventDataEventIds;//[Offset: 0x3fc, Size: 12]
	class WidgetToTextureRenderTarget2DManager* WidgetToTextureRenderTarget2DManagerClass;//[Offset: 0x408, Size: 40]
	class WidgetToTextureRenderTarget2DManager* LoadedWidgetToTextureRenderTarget2DManagerClass;//[Offset: 0x430, Size: 4]
	WidgetToTextureRenderTarget2DManager* WidgetToTextureRenderTarget2DManager;//[Offset: 0x434, Size: 4]
	void UpdateBornLandVehicles();// 0x267ec00
	void ServerUpdateServerTimeSeconds();// 0x2fccc34
	void OnRep_UseUserDefinedMap();// 0x2fccc20
	void OnRep_UseMoveInputStateUseSixteenDir();// 0x2fccc0c
	void OnRep_ShowVoiceInMinimap();// 0x2fccbf0
	void OnRep_ReplicatedWorldTimeSeconds();// 0x273bf50
	void OnRep_PeakCompetitionMatchType();// 0x2fccbd4
	void OnRep_ModeUIManagerArray();// 0x2fccbc0
	void OnRep_IsUGCGameMode();// 0x2fccbac
	void OnRep_bEnableSoundSpatialization();// 0x2fccb90
	void OnRep_AllPlayerFixInfo(out AllPlayerFixInfo OldInfo);// 0x2fcca24
	bool IsCollectedEventEnabled(byte EventId);// 0x2fcc9a4
	WidgetToTextureRenderTarget2DManager* GetWidgetToTextureRenderTarget2DManager();// 0x2fcc97c

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x320, Size: 8]
	FName PreviousMatchState;//[Offset: 0x328, Size: 8]
	int ElapsedTime;//[Offset: 0x330, Size: 4]
	void OnRep_MatchState();// 0x4975060
	void OnRep_ElapsedTime();// 0x49841b0

--------------------------------
Class: AllPlayerFixInfo
	SinglePlayerFixInfo[] RepData;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SinglePlayerFixInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	uint32 PlayerKey;//[Offset: 0xc, Size: 4]
	FString PlayerUID;//[Offset: 0x10, Size: 12]
	int AnchorPlatformResID;//[Offset: 0x1c, Size: 4]
	int AnchorPlatformColorID;//[Offset: 0x20, Size: 4]
	FString PicUrl;//[Offset: 0x24, Size: 12]
	FString MedalPicUrl;//[Offset: 0x30, Size: 12]

--------------------------------
Class: WidgetToTextureRenderTarget2DManager.Object
	<FName,TextureRenderTarget2DManagerWidgetInfo> NameToTextureRenderTarget2DManagerWidgetInfos;//[Offset: 0x1c, Size: 60]
	DrawTextToTextureRenderTarget2DParams[] CachedParams;//[Offset: 0x58, Size: 12]
	void ReleaseCachedParams();// 0x288edb0
	bool ReceivePreDrawTextToTextureRenderTarget2DAsync(out DrawTextToTextureRenderTarget2DParams Params);// 0x46f6b154
	void ReceivePostDrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params);// 0x46f6b154
	void DrawTextToTextureRenderTarget2DAsync(out const DrawTextToTextureRenderTarget2DParams Params, out const delegate OnWidgetToTextureRenderTarget2DManagerDrawn);// 0x288eb90

--------------------------------
Class: TextureRenderTarget2DManagerWidgetInfo
	class UserWidget* UserWidgetClass;//[Offset: 0x0, Size: 40]
	class UserWidget* LoadedUserWidgetClass;//[Offset: 0x28, Size: 4]
	UserWidget* UserWidget;//[Offset: 0x2c, Size: 4]
	FName UpdateWidgetFunctionName;//[Offset: 0x30, Size: 8]

--------------------------------
Class: DrawTextToTextureRenderTarget2DParams
	FText Text;//[Offset: 0x0, Size: 12]
	FName WidgetName;//[Offset: 0x10, Size: 8]
	int DrawWidth;//[Offset: 0x18, Size: 4]
	int DrawHeight;//[Offset: 0x1c, Size: 4]
	TextureRenderTarget2D* OptionalInOutTextureRenderTarget2D;//[Offset: 0x20, Size: 4]
	bool bMaterialInstanceDynamicCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x28, Size: 40]
	FName TextureParameterName;//[Offset: 0x50, Size: 8]
	MaterialInstanceDynamic* OptionalInOutMaterialInstanceDynamic;//[Offset: 0x58, Size: 4]
	FString Payload;//[Offset: 0x5c, Size: 12]
	bool bParamsCached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect*[] ImpactEffectList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	ParticleSystem* DefaultFX;//[Offset: 0x2e8, Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x2ec, Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x2f0, Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x2f4, Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x2f8, Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x2fc, Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x300, Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x304, Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x308, Size: 4]
	ParticleSystem* AutonomousFleshFX;//[Offset: 0x30c, Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x310, Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x314, Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x318, Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x31c, Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x320, Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x324, Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x328, Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x32c, Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x330, Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x334, Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x338, Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x33c, Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x340, Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x344, Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x348, Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x34c, Size: 4]
	ParticleSystem* FoodFX;//[Offset: 0x350, Size: 4]
	ParticleSystem* MonsterFleshFX;//[Offset: 0x354, Size: 4]
	ParticleSystem* IceEngravingFX;//[Offset: 0x358, Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	<FString,ParticleSystem*> ExtendFleshFX;//[Offset: 0x360, Size: 60]
	AkAudioEvent* DefaultSound;//[Offset: 0x39c, Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x3a0, Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x3a4, Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x3a8, Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x3ac, Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x3b0, Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x3b4, Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x3b8, Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x3bc, Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x3c0, Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x3c4, Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x3c8, Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x3cc, Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x3d0, Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x3d4, Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x3d8, Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x3dc, Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x3e0, Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x3e4, Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x3e8, Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x3ec, Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x3f0, Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x3f4, Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x3f8, Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x3fc, Size: 4]
	AkAudioEvent* FoodSound;//[Offset: 0x400, Size: 4]
	AkAudioEvent* MonsterFleshSound;//[Offset: 0x404, Size: 4]
	AkAudioEvent* IceEngravingSound;//[Offset: 0x408, Size: 4]
	DecalData DefaultDecal;//[Offset: 0x40c, Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x428, Size: 28]
	DecalData DirtDecal;//[Offset: 0x444, Size: 28]
	DecalData WaterDecal;//[Offset: 0x460, Size: 28]
	DecalData MetalDecal;//[Offset: 0x47c, Size: 28]
	DecalData WoodDecal;//[Offset: 0x498, Size: 28]
	DecalData GrassDecal;//[Offset: 0x4b4, Size: 28]
	DecalData GlassDecal;//[Offset: 0x4d0, Size: 28]
	DecalData FleshDecal;//[Offset: 0x4ec, Size: 28]
	DecalData FleshDecalAutomonous;//[Offset: 0x508, Size: 28]
	DecalData SteelDecal;//[Offset: 0x524, Size: 28]
	DecalData SandbagDecal;//[Offset: 0x540, Size: 28]
	DecalData SandDecal;//[Offset: 0x55c, Size: 28]
	DecalData ClothDecal;//[Offset: 0x578, Size: 28]
	DecalData PlasticDecal;//[Offset: 0x594, Size: 28]
	DecalData LeatherDecal;//[Offset: 0x5b0, Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x5cc, Size: 28]
	DecalData PaperDecal;//[Offset: 0x5e8, Size: 28]
	DecalData StoneDecal;//[Offset: 0x604, Size: 28]
	DecalData SnowDecal;//[Offset: 0x620, Size: 28]
	DecalData PopCanDecal;//[Offset: 0x63c, Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x658, Size: 28]
	DecalData LeafDecal;//[Offset: 0x674, Size: 28]
	DecalData CarDecal;//[Offset: 0x690, Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x6ac, Size: 28]
	DecalData IceDecal;//[Offset: 0x6c8, Size: 28]
	DecalData FoodDecal;//[Offset: 0x6e4, Size: 28]
	DecalData IceEngravingDecal;//[Offset: 0x700, Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x720, Size: 288]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	bool bFXOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x841, Size: 1]
	bool bIsAutonomousClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x842, Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x844, Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x848, Size: 4]
	SceneComponent* TargetImpactComp;//[Offset: 0x870, Size: 4]
	ParticleSystem* CachedImpactFX;//[Offset: 0x874, Size: 4]
	void TimerHideDecal();// 0x2600af4

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 4]
	float LifeSpan;//[Offset: 0x4, Size: 4]
	Material* DecalMaterial;//[Offset: 0x8, Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc, Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10, Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14, Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc, Size: 12]
	Vector VictimLocation;//[Offset: 0x18, Size: 12]
	Vector BulletPos;//[Offset: 0x24, Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x30, Size: 12]
	Vector ShootDir;//[Offset: 0x3c, Size: 12]
	int8 SurfaceType;//[Offset: 0x48, Size: 1]
	uint32 ShootID;//[Offset: 0x4c, Size: 4]
	uint16 CompensationTime;//[Offset: 0x50, Size: 2]
	Actor* Actor;//[Offset: 0x54, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x5c, Size: 8]
	int HitTargetLagTime;//[Offset: 0x64, Size: 4]
	int ClientShootTime;//[Offset: 0x68, Size: 4]
	byte HitBodyType;//[Offset: 0x6c, Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x70, Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x74, Size: 4]
	float DamageRate;//[Offset: 0x78, Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool bIsUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d, Size: 1]
	bool bShootToDeath;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d, Size: 1]
	bool bOutRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	FName BoneName;//[Offset: 0x80, Size: 8]
	Transform BoneTrans;//[Offset: 0x90, Size: 48]
	MoveBaseInfo_NetQuantize VictimBase;//[Offset: 0xc0, Size: 80]
	BulletID BulletID;//[Offset: 0x110, Size: 2]

--------------------------------
Class: MoveBaseInfo_NetQuantize

--------------------------------
Class: BulletID
	byte PelletID;//[Offset: 0x0, Size: 1]
	byte DataID;//[Offset: 0x1, Size: 1]

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x240, Size: 4]
	int SortOrder;//[Offset: 0x244, Size: 4]
	float FadeScreenSize;//[Offset: 0x248, Size: 4]
	float FadeStartDelay;//[Offset: 0x24c, Size: 4]
	float FadeDuration;//[Offset: 0x250, Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254, Size: 1]
	Vector DecalSize;//[Offset: 0x258, Size: 12]
	void SetSortOrder(int Value);// 0x495d418
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x495d3a0
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x495d298
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x495d220
	float GetFadeStartDelay();// 0x495d1f8
	float GetFadeDuration();// 0x495d1d0
	MaterialInterface* GetDecalMaterial();// 0x495d1a8
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x495d178

--------------------------------
Class: WaterSoundVolume.Actor.Object
	ShapeComponent*[] VolumeAreaList;//[Offset: 0x2e4, Size: 12]

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State*[] AllStateList;//[Offset: 0xd0, Size: 12]
	enum StartStateType;//[Offset: 0xdc, Size: 1]
	enum FinishStateType;//[Offset: 0xdd, Size: 1]
	delegate StateMsgNotify;//[Offset: 0xe0, Size: 12]
	State* CurrentState;//[Offset: 0xec, Size: 4]
	enum CurrentStateType;//[Offset: 0xf0, Size: 1]
	int64 CurrentStateEnterTime;//[Offset: 0xf8, Size: 8]
	enum LastStateType;//[Offset: 0x100, Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: StateType
	enum StateType;//[Offset: 0x0, Size: 1]
	int64 TimeStamp;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PreProcessedRelevancySet

--------------------------------
Class: HeartbeatData
	byte[] TssSdkAntiData;//[Offset: 0x0, Size: 12]
	int TssSdkAntiDataLen;//[Offset: 0xc, Size: 4]
	byte RetCode;//[Offset: 0x10, Size: 1]
	int NetworkStatus;//[Offset: 0x14, Size: 4]

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x3ec, Size: 12]
	float TotalHP;//[Offset: 0x3f8, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x3fc, Size: 4]
	float TotalTime;//[Offset: 0x400, Size: 4]
	int BoxId;//[Offset: 0x404, Size: 4]
	Vector GroupLoc;//[Offset: 0x408, Size: 12]
	float DestroyTime;//[Offset: 0x414, Size: 4]
	float OperationalDistance;//[Offset: 0x418, Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x41c, Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x420, Size: 4]
	Transform StandbyEffectTrans;//[Offset: 0x430, Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x460, Size: 4]
	Transform OpenningEffectTrans;//[Offset: 0x470, Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x4a0, Size: 4]
	Transform OpennedEffectTrans;//[Offset: 0x4b0, Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x4e0, Size: 4]
	Transform BrokenEffect1Trans;//[Offset: 0x4f0, Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x520, Size: 4]
	Transform BrokenEffect2Trans;//[Offset: 0x530, Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x560, Size: 4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x564, Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x568, Size: 4]
	class Controller[] InstigatorList;//[Offset: 0x56c, Size: 12]
	class Actor[] DamageCauserList;//[Offset: 0x578, Size: 12]
	enum PickUpBoxType;//[Offset: 0x584, Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	int IconID;//[Offset: 0x588, Size: 4]
	FString IconCustomStr;//[Offset: 0x58c, Size: 12]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59e, Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x5a0, Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x5a4, Size: 4]
	int HideLightColumn;//[Offset: 0x600, Size: 4]
	float GoUpAnimationWait;//[Offset: 0x608, Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x60c, Size: 4]
	float GoUpAnimationHight;//[Offset: 0x610, Size: 4]
	float GoUpAnimationYawSpeed;//[Offset: 0x618, Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x61c, Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x620, Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x62c, Size: 12]
	float ItemBoxZ;//[Offset: 0x638, Size: 4]
	bool NeedGoDownBeforeDestroied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	float NeedGoDownBeforeDestroiedDelay;//[Offset: 0x640, Size: 4]
	float GoDownStartTime;//[Offset: 0x644, Size: 4]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x64c, Size: 4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x650, Size: 4]
	Transform BoxTransform;//[Offset: 0x660, Size: 48]
	float CurHP;//[Offset: 0x6a4, Size: 4]
	float StartedTime;//[Offset: 0x6a8, Size: 4]
	enum CurState;//[Offset: 0x6ac, Size: 1]
	int StartedTeamId;//[Offset: 0x6b4, Size: 4]
	float CountDownTime;//[Offset: 0x6b8, Size: 4]
	float StartDestroytime;//[Offset: 0x6c0, Size: 4]
	int MonsterBoxId;//[Offset: 0x6c4, Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x6c8, Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x6cc, Size: 60]
	bool bIsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x70c, Size: 4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x710, Size: 4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x714, Size: 4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x718, Size: 4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x71c, Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x720, Size: 4]
	MonsterTreasureBoxGroupComponent* BornGropComponent;//[Offset: 0x730, Size: 4]
	Object* TriggerActionHost;//[Offset: 0x758, Size: 4]
	float TickFrequenceTime;//[Offset: 0x770, Size: 4]
	void SpawnBrokenParticle();// 0x2525b10
	void ShowMonsterTreasureBoxSkelemesh(bool isShow);// 0x46f6b154
	void ShowMonsterTreasureBox();// 0x2525afc
	void SetClientClientAutoActiveBoxCD(int CD);// 0x2525a84
	void OnTreasureBoxPicked__DelegateSignature();// 0x46f6b154
	void OnSomeonePickItem(uint32 InPC);// 0x2525a0c
	void OnRep_HideLightColumn();// 0x25259f8
	void OnRep_HasItems();// 0x25259e4
	void OnRep_CurState();// 0x25259d0
	void OnRep_CurHP();// 0x25259bc
	void OnRep_BoxTransform();// 0x25259a8
	void OnBoxEmpty();// 0x2525994
	bool IsShowIcon();// 0x252596c
	bool IsGoingToBeBroken();// 0x2525944
	int GetMonsterBoxId();// 0x252591c
	enum[] GetDamageableGameObjectType();// 0x2509c88
	enum GetCurState();// 0x25258f4
	int GetClientClientAutoActiveBoxCD();// 0x25258cc
	void DeActiveMonsterTreasureBox();// 0x25258b8
	bool CanBeDamaged();// 0x2525890
	void BPOnStopMonsterTreasureBox();// 0x46f6b154
	void BPOnStartMonsterTreasureBox();// 0x46f6b154
	void BPOnHideLightColumn();// 0x46f6b154
	void BPOnCountdownEnd();// 0x46f6b154
	void BPOnBreakMonsterTreasureBox();// 0x46f6b154
	void BPOnAnimationStop();// 0x46f6b154
	void BPOnAnimationAkAudioStop();// 0x46f6b154
	void BPOnAnimationAkAudioStart();// 0x46f6b154

--------------------------------
Class: UAEHouseActor.UAENetActor.Actor.Object
	bool TestCleanWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	float WindowHideDistanceSquared;//[Offset: 0x2fc, Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x300, Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x304, Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x308, Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x30c, Size: 12]
	<int,UAEWindowComponent*> WindowComponents;//[Offset: 0x318, Size: 60]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354, Size: 1]
	static void ProcessWindowCreateList();// 0x2fcd96c
	void OnRep_WindowList();// 0x2fcd958
	void BroadcastWindowRepDataUpdated(UAEWindowRepData InRepData);// 0x2fcd7a0

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0, Size: 48]
	FString PathToLoad;//[Offset: 0x30, Size: 12]
	int ID;//[Offset: 0x3c, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x44, Size: 4]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x648, Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c, Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x650, Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x658, Size: 40]
	ParticleSystem* BrokenEffect;//[Offset: 0x680, Size: 40]
	UAEWindowRepData CachedRepData;//[Offset: 0x6b0, Size: 80]
	void NotifyServerBroken();// 0x46f6b154
	void NotifyRepDataUpdated(bool bInitial, bool bLocal);// 0x2fdec38
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x46f6b154
	void LocalHandleWindowBroken(bool bInitial, bool bLocal);// 0x2fdeb68
	void HandleBroken(PlayerController* Instigator, bool bLocal);// 0x2fdeaa4
	UAEWindowRepData GetRepData();// 0x2fde998

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	CustomDropRule CustomDropRule;//[Offset: 0xd4, Size: 3]
	HitResult GroundHitInfo;//[Offset: 0xd8, Size: 136]
	int GridStep;//[Offset: 0x160, Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0x164, Size: 4]
	FString DropItemCfgTableName;//[Offset: 0x168, Size: 12]
	FString DropItemRuleTableName;//[Offset: 0x174, Size: 12]
	UAEDataTable* UGCDropItemCfgTable;//[Offset: 0x180, Size: 40]
	UAEDataTable* UGCDropItemRuleTable;//[Offset: 0x1a8, Size: 40]
	int ProduceID;//[Offset: 0x1d0, Size: 4]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x1d8, Size: 4]
	float DelayDropTime;//[Offset: 0x1e0, Size: 4]
	float TombBoxLifeTime;//[Offset: 0x1e4, Size: 4]
	ParticleSystem* DropGroundEffect;//[Offset: 0x1f0, Size: 40]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	Transform DropGroundEffectTransform;//[Offset: 0x220, Size: 48]
	float DropGroundItemLifeOverride;//[Offset: 0x250, Size: 4]
	bool IsAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	bool bIsIgonreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	float DropGroundEffectLifeSpan;//[Offset: 0x258, Size: 4]
	float DropGroundNetCullDistanceSquared;//[Offset: 0x25c, Size: 4]
	bool DropGroundInRandomCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	bool UseLocalCenterOffest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	Vector DropGroundCenterOffest;//[Offset: 0x264, Size: 12]
	float DropGroundOuterCircleRadius;//[Offset: 0x270, Size: 4]
	float DropGroundInnerCircleRadius;//[Offset: 0x274, Size: 4]
	float DropGroundStartAndgle;//[Offset: 0x278, Size: 4]
	float DropGroundEndAngle;//[Offset: 0x27c, Size: 4]
	bool bDropGroundAngleRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	Vector2D[] DropGroundAngleRangeList;//[Offset: 0x284, Size: 12]
	bool bApplyPickUpTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	bool bApplyBoxTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 1]
	bool bDropGroundForceStatic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 1]
	int OpenDropGroundEffect;//[Offset: 0x294, Size: 4]
	int RandomDropGroundEffect;//[Offset: 0x298, Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0x29c, Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	PickUpWrapperActor*[] GenerateActorList;//[Offset: 0x2a4, Size: 12]
	float MaxTraceDist;//[Offset: 0x2bc, Size: 4]
	bool bUseDropCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bUseDropCurveAnim_DropToTombBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]
	delegate OnItemSpawned;//[Offset: 0x2c4, Size: 12]
	DropItemCurveAnimComponent* DropItemCurveAnimComponent;//[Offset: 0x2d0, Size: 4]
	bool IsFoeceNotTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 1]
	Vector TraceGroundPoint(Vector StartPos, Actor* IgnoreActor);// 0x258f404
	void StartDropToPosition(Vector DestinPos, Character* KillerPawn, Actor* DeadPawn, bool InTraceGround);// 0x258f2a8
	void StartDrop(Actor* DeadCharacter, Controller* Killer);// 0x258f1ec
	void SetProduceID(int ProduceID);// 0x258f178
	void SetDropItemLifeSpan(int ItemTime);// 0x258f100
	void SetAutoDrop(bool bAutoDrop);// 0x258f080
	void RandomCircleDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x258ee30
	int PickItemByUnionRandom(int WeightCount, out RandomPropData[] WeightMap);// 0x258ed04
	int PickItemByIndependentRandom(int weight);// 0x258ec84
	void OnPickUpDataEmptyOnServer(Actor* SelfRef);// 0x46f6b154
	void OnOwnerPawnDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x258e9e0
	void NineGridDrop(out const PickUpItemData[] PropDatas, Transform PawnTrans, Actor* IgnorePawn, Actor* KillerActor);// 0x258e790
	FString GetWrapperActorPath(ItemDefineID DefineID);// 0x258e69c
	class Object GetWrapperActorClass(ItemDefineID DefineID);// 0x258e604
	PickUpWrapperActor*[] GetGenerateWrapperList();// 0x258e538
	FString GetDropItemCfgList(out DropItemConfig[] DropList);// 0x258e430
	FString GenerateDropItemByOwner(out DropPropData[] FinalDropItems);// 0x258e330
	bool DropToTreasureBox(out const DropPropData[] PropData, Actor* TargetActor, FString BoxName, enum BoxType, Vector SpawnLoc, bool ShouldTreasureBoxHidden, float InLifeTime, bool bAddToNewRegion);// 0x258dffc
	void DropToTombBox(out const PickUpItemData[] PropData, Character* DeadPawn, FString BoxName);// 0x258ddf8
	void DropToTarget(ItemDefineID DefineID, int Count, BackpackComponent* Backpack);// 0x258dce0
	Actor* DropToGround(out const PickUpItemData PropData, Transform WrapperTrans, Vector StartPos, bool ShowGroundEffect);// 0x258da90
	void DropToCommonTreasureBox(Actor* Producer);// 0x2490148
	void DropToCommonLootBox(Actor* Producer, Transform BoxTrans, CommonTreasureBox* CommonTreasureBox);// 0x258d920
	void DropOutProps(out const DropPropData[] PropData, Character* KillerPawn, Actor* DeadPawn, FString BoxName);// 0x258d730
	Actor* DropItemToGround(out const PickUpItemData PropData, out const Transform WrapperTrans, bool bSnapToGround);// 0x258d550
	void CalcDropItemListByDropRule(out const DropItemConfig DropRuleCfg, out DropPropData[] DropItemList);// 0x258d430

--------------------------------
Class: CustomDropRule
	bool bTraceIgnorePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bTraceIgnoreWarteringArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bAttachToTargetActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: DropItemCurveAnimComponent.ActorComponent.Object
	Vector2D RangeHigh;//[Offset: 0xd0, Size: 8]
	Vector CustomStartOffset;//[Offset: 0xd8, Size: 12]
	bool bUsePickUpSelfEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	bool UseTrailParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 1]
	bool ClientDropOneByOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6, Size: 1]
	float ClientDropOneByOneInterval;//[Offset: 0xe8, Size: 4]
	float CustomGravity;//[Offset: 0xec, Size: 4]
	float TrailParticleDelayTime;//[Offset: 0xf0, Size: 4]
	float LandDirectlyAfterTheReplicatedTime;//[Offset: 0xf4, Size: 4]
	float ParticleScale;//[Offset: 0xf8, Size: 4]
	ParticleSystem* DropTailsParticle;//[Offset: 0x100, Size: 40]
	ParticleSystem* DropTailsParticleSystem;//[Offset: 0x128, Size: 4]
	bool bUseDropGroundParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	float DropGroundParticleLifeTime;//[Offset: 0x130, Size: 4]
	ParticleSystem* DropGroundParticle;//[Offset: 0x138, Size: 40]
	ParticleSystem* DropGroundParticleSystem;//[Offset: 0x160, Size: 4]
	DropGroupContainer[] ItemGroupList;//[Offset: 0x164, Size: 12]
	CurveFloat* AnimCurve;//[Offset: 0x170, Size: 4]
	bool bUseAnimCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174, Size: 1]
	void OnDropTailsLoadFinsh2(int GroupID);// 0x2444eac
	void OnDropGroundLoadFinsh();// 0x2444e98
	void AddItemClient(int Group, Vector InStartPos, Vector InEndPos, Actor* Target);// 0x2444d28
	void AddDropActorServer(Actor* PickUpWrapper, Vector InStartPos, int UserAddr);// 0x2444c14

--------------------------------
Class: DropGroupContainer
	int GroupIndex;//[Offset: 0x0, Size: 4]
	float GroupTime;//[Offset: 0x4, Size: 4]
	ItemCurveAnim[] List;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ItemCurveAnim
	enum CurState;//[Offset: 0x0, Size: 1]
	bool ShowGroundEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float DropDuration;//[Offset: 0x4, Size: 4]
	float CurrentTime;//[Offset: 0x8, Size: 4]
	float DropStartSpeed;//[Offset: 0xc, Size: 4]
	float DelayDestroyParticleTime;//[Offset: 0x10, Size: 4]
	float DelayStartTime;//[Offset: 0x14, Size: 4]
	float DelayDestroyGroundParticleTime;//[Offset: 0x18, Size: 4]
	Vector StartPos;//[Offset: 0x1c, Size: 12]
	Vector EndPos;//[Offset: 0x28, Size: 12]
	Actor* TargetActor;//[Offset: 0x34, Size: 8]
	ParticleSystemComponent* TailParticleComponent;//[Offset: 0x3c, Size: 4]
	ParticleSystemComponent* GroundParticleComponent;//[Offset: 0x40, Size: 4]

--------------------------------
Class: RandomPropData
	int[] ItemIds;//[Offset: 0x0, Size: 12]
	int[] ItemCounts;//[Offset: 0xc, Size: 12]
	int RuleId;//[Offset: 0x18, Size: 4]
	int weight;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: DropItemConfig
	int ItemDropPercent;//[Offset: 0x0, Size: 4]
	int ItemDropRuleStartID;//[Offset: 0x4, Size: 4]
	int ItemDropRuleEndID;//[Offset: 0x8, Size: 4]
	int ItemDropMode;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DropPropData
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]
	int DropMode;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CommonTreasureBox.PlayerTombBox.Actor.Object
	void RegisterToCurveAnimComponent();// 0x2423270

--------------------------------
Class: MonsterTreasureBoxGroupComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	float WeightValue;//[Offset: 0x250, Size: 4]
	MonsterTreasureBox* CurMonsterTreasureBox;//[Offset: 0x254, Size: 4]
	delegate OnMonsterDie_MonsterTreasureBoxGroup;//[Offset: 0x258, Size: 12]
	delegate OnMonsterTreasureBoxActive;//[Offset: 0x264, Size: 12]
	delegate OnMonsterTreasureBoxBreak;//[Offset: 0x270, Size: 12]
	int CurLiveMonsterNum;//[Offset: 0x27c, Size: 4]
	MonsterSpotSceneComponent*[] CurrentMonsterSpotSceneComponent;//[Offset: 0x280, Size: 12]
	int64 LastSpawnTime;//[Offset: 0x2a0, Size: 8]
	bool IsStartGenerateMosnters;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	int CurMonsterRefeshPlanID;//[Offset: 0x2ac, Size: 4]
	int MaxLiveMonsterNum;//[Offset: 0x2b0, Size: 4]
	void Update(float DeltaTime);// 0x2526cbc
	void Reset();// 0x2526ca8
	void RegisterMonsterSpotSceneComponent(MonsterSpotSceneComponent* MonsterSpotSceneComponent);// 0x2526c30
	void MonsterTreasureBoxStateChanged(enum State);// 0x2526bb8
	void MonsterTreasureBoxBreak(FString MonsterTreasureBoxName);// 0x2526ad4
	void MonsterTreasureBoxActive(FString MonsterTreasureBoxName);// 0x25269f0
	void MonsterDie_MonsterTreasureBoxGroup(FString MonsterName);// 0x252690c
	MonsterTreasureBoxProbeComponent* GetMonsterTreasureBoxProbeComponent();// 0x25268e4
	int GetMonsterID();// 0x25268bc
	void GeneratorTreasureBox();// 0x25268a8
	void GeneratorMonsters(FString MonsterTreasureBoxGroupName);// 0x25267c4
	bool CanGeneratorTreaseurBox();// 0x2526794

--------------------------------
Class: MonsterSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int Label;//[Offset: 0x254, Size: 4]
	byte MonsterBornType;//[Offset: 0x258, Size: 1]
	Actor* GenerateActor(class Object ActorClass, out Vector ActorLocation, out Rotator ActorRotator, enum SpawnActorCollisionHandlingMethod, ItemGenerateSpawnClass ItemData);// 0x2524b9c

--------------------------------
Class: MonsterTreasureBoxProbeComponent.GameModeProbeComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	MonsterTreasureBoxGroupComponent*[] AllMonsterSpotGroups;//[Offset: 0x244, Size: 12]
	MonsterTreasureBoxGroupComponent*[] CurrentMonsterSpotGroups;//[Offset: 0x250, Size: 12]
	MonsterTreasureBoxTableData[] MonsterTreasureBoxTableDatas;//[Offset: 0x260, Size: 12]
	BTZombieModeLabelOfMonster[] ZombieModeLabelOfMonsters;//[Offset: 0x26c, Size: 12]
	BTZombieModeLevelZombiePlan[] ZombieModeLevelZombiePlans;//[Offset: 0x278, Size: 12]
	int MaxLiveMonsterNum;//[Offset: 0x288, Size: 4]
	MonsterTreasureBoxGroupComponent*[] NeedToUpdateMonsterSpotGroups;//[Offset: 0x28c, Size: 12]
	void Update(float DeltaTime);// 0x24aaecc
	void RegisterGroupSpotComponent(GroupSpotSceneComponent* GroupSpotComponent);// 0x23f5f9c
	void RangeMonsterTreasureBoxGroups(int WaveNum, int MonsterTreasureBoxNum, int DistanceWeight, int AngleWeight, int MonsterRefeshPlanID);// 0x2527a44
	void InitialItemTable();// 0x24e5e68
	BTZombieModeLevelZombiePlan[] GetZombieModeLevelZombiePlanTableDataByID(int ID);// 0x2527968
	BTZombieModeLabelOfMonster[] GetZombieModeLabelOfMonsterTableDataByMonsterId(int MonsterID);// 0x252788c
	BTZombieModeLabelOfMonster[] GetZombieModeLabelOfMonsterTableDataByLabel(int Label);// 0x25277b0
	BTZombieModeLabelOfMonster GetZombieModeLabelOfMonsterTableDataByID(int ID);// 0x2527724
	MonsterTreasureBoxTableData GetMonsterTreasureBoxTableDataByID(int ID);// 0x25275e0
	void GeneratorMonsterTreaseureBox();// 0x25275cc

--------------------------------
Class: GameModeProbeComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	void Update(float DeltaTime);// 0x24aaecc
	void UnInit();// 0x2451bf0
	void Init();// 0x24aaeb0

--------------------------------
Class: MonsterTreasureBoxTableData
	int ID;//[Offset: 0x0, Size: 4]
	FString PathName;//[Offset: 0x4, Size: 12]
	float TotalHP;//[Offset: 0x10, Size: 4]
	float TotalTime;//[Offset: 0x14, Size: 4]
	float BrokenHPPropotion;//[Offset: 0x18, Size: 4]
	int DropBoxId;//[Offset: 0x1c, Size: 4]
	FString MetaData;//[Offset: 0x20, Size: 12]

--------------------------------
Class: BTZombieModeLabelOfMonster
	int ID;//[Offset: 0x0, Size: 4]
	int weight;//[Offset: 0x4, Size: 4]
	int Label;//[Offset: 0x8, Size: 4]
	int MonsterID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BTZombieModeLevelZombiePlan
	int ID;//[Offset: 0x0, Size: 4]
	int PlanID;//[Offset: 0x4, Size: 4]
	int MonsterCount;//[Offset: 0x8, Size: 4]
	int MonsterID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BountyBoughtInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int BoughtCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: RescueHelicopterBase.Character.Pawn.Actor.Object
	int MaxRescueNum;//[Offset: 0x5e4, Size: 4]
	float FlyingZ;//[Offset: 0x5e8, Size: 4]
	float WaitingHeight;//[Offset: 0x5ec, Size: 4]
	BoxComponent* HelicopterBox;//[Offset: 0x5f0, Size: 4]
	int OwnerPlayerKey;//[Offset: 0x5f4, Size: 4]
	byte HelicopterState;//[Offset: 0x5f8, Size: 1]
	int HelicopterID;//[Offset: 0x5fc, Size: 4]
	Vector TargetLocation;//[Offset: 0x600, Size: 12]
	int[] PlayerKeys;//[Offset: 0x60c, Size: 12]
	float CountDownSeconds;//[Offset: 0x618, Size: 4]
	bool bCanSeeInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 1]
	Vector RandomTargetLoc(out const Vector InCenter, float InRadius, FName ValidActorTag, float InGrowRadiusBy);// 0x25accc8
	void OwnedByPlayer(int InPlayerKey);// 0x25acc50
	void OnRep_HelicopterState();// 0x25acc3c
	void OnPlayerRescued(STExtraBaseCharacter* Player);// 0x25acbc4
	void OnHelicopterLeft();// 0x25acbb0
	void OnHelicopterArrived();// 0x235d4b8
	bool IsOwnedByPlayer(int InPlayerKey);// 0x25acb30
	int GetOwnerPlayerKey();// 0x25acb14
	Vector GetHelicopterTargetLocation();// 0x25acaec
	int GetHelicopterId();// 0x25acad0
	void GetBoardedPlayerPlayerState(out STExtraPlayerState*[] PS);// 0x25aca30
	void BP_FlyToTargetLocation(out const Vector TargetLoc);// 0x46f6b154
	void BP_BoardPlayer(STExtraBaseCharacter* Player);// 0x46f6b154

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x2e4, Size: 60]
	MaterialInterface* MaterialInstances;//[Offset: 0x320, Size: 4]
	MaterialInterface* BoxTestMat;//[Offset: 0x324, Size: 4]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x330, Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x570, Size: 4]

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 4]
	Texture* DecalTexure;//[Offset: 0x4, Size: 4]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0xac, Size: 4]
	Texture* DecalTexure;//[Offset: 0xb0, Size: 4]
	int CoordX;//[Offset: 0xb4, Size: 4]
	int CoordY;//[Offset: 0xb8, Size: 4]

--------------------------------
Class: SlotWeaponData
	int ID;//[Offset: 0x0, Size: 4]
	int[] AttachmentIDList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x2e4, Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x2e8, Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x2ec, Size: 4]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x2f0, Size: 60]
	<int,AvatarDisplayAnimData> DisplayWeaponAnimInfoMap;//[Offset: 0x32c, Size: 60]
	WeaponAnimAsset WeaponAnimData;//[Offset: 0x368, Size: 128]
	class AnimInstance* AnimBP;//[Offset: 0x3e8, Size: 40]
	delegate OnWeaponBlendAnim;//[Offset: 0x410, Size: 12]
	enum[] ExcludeHiddenAvatarSlotList;//[Offset: 0x41c, Size: 12]
	<int,FName> slotToSocket;//[Offset: 0x428, Size: 60]
	FName OBPlayerName;//[Offset: 0x468, Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x470, Size: 4]
	CharacterAvatarComponent* OBAvatar;//[Offset: 0x474, Size: 4]
	StaticMeshComponent*[] StMeshList;//[Offset: 0x478, Size: 12]
	SkeletalMeshComponent*[] SkMeshList;//[Offset: 0x484, Size: 12]
	FName[] HideBoneNames;//[Offset: 0x490, Size: 12]
	SkeletalMesh*[] SkMeshResList;//[Offset: 0x49c, Size: 12]
	MeshComponent*[] WeaponAttachmentList;//[Offset: 0x4a8, Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x4b4, Size: 4]
	<BattleItemHandleBase*,SocketMesh> SkMeshUseOwnAnimBP;//[Offset: 0x4b8, Size: 60]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	bool bUseNewDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f5, Size: 1]
	void SetTrainingRangePlayerOBInfo(out const PlayerOBInfo InPlayerOBInfo);// 0x237b6a8
	bool SetOBTarget(STExtraCharacter* PlayerPawn, CharacterAvatarComponent* AvatarComp);// 0x237b5e4
	void SetEnable(bool IsEnable);// 0x237b564
	void RenderCaptureScene();// 0x237b550
	void RefreshAvatar(int SlotType, bool IsEquipped);// 0x237b48c
	SkeletalMesh* MergeMesh(out SkeletalMesh*[] SkMeshList, SkeletalMesh* RefMesh);// 0x237b39c
	void InitBGMat();// 0x46f6b154
	class AnimInstance GetWeaponAnimBP(const int TargetWeaponID);// 0x237b2e4
	AnimationAsset* GetWeaponAnimAsset(int TargetWeaponID, enum AnimType);// 0x237b1e8
	CharacterAvatarComponent* GetOBAvatarComponent();// 0x237b1c0
	AnimSequenceBase* GetAnimSeqAsset(SoftObjectPath AnimResRef);// 0x237b0c0
	void EquipWeapon(int PlayerKey);// 0x237b048
	void EquipPlayerAvatar(CharacterAvatarComponent* AvatarComponent, bool IsRefrsh);// 0x237af84
	void DisplayAvatar(bool IsEnable, STExtraCharacter* PlayerPawn);// 0x237aebc
	void CreateWeapon(bool IsSkeletalMesh);// 0x237ae3c
	void ApplyAnimation();// 0x237ae28

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0, Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8, Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30, Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58, Size: 40]

--------------------------------
Class: AvatarDisplayAnimData
	int WeaponID;//[Offset: 0x0, Size: 4]
	class AnimInstance* WeaponAnimBP;//[Offset: 0x8, Size: 40]
	AvatarDisplayPoseData[] DisplayAnimList;//[Offset: 0x30, Size: 12]

--------------------------------
Class: AvatarDisplayPoseData
	enum DisplayAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* DisplayAnim;//[Offset: 0x8, Size: 40]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2a4, Size: 1]
	float FOVAngle;//[Offset: 0x2a8, Size: 4]
	float OrthoWidth;//[Offset: 0x2ac, Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2b0, Size: 4]
	byte CaptureSource;//[Offset: 0x2b4, Size: 1]
	byte CompositeMode;//[Offset: 0x2b5, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2c0, Size: 1328]
	float PostProcessBlendWeight;//[Offset: 0x7f0, Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f4, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x800, Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x844, Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x850, Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x85c, Size: 1]
	void CaptureScene();// 0x4a50450
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x4a50320

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x23d, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x240, Size: 12]
	Actor*[] HiddenActors;//[Offset: 0x24c, Size: 12]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x258, Size: 12]
	Actor*[] ShowOnlyActors;//[Offset: 0x264, Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272, Size: 1]
	float LODDistanceFactor;//[Offset: 0x274, Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x278, Size: 4]
	int CaptureSortPriority;//[Offset: 0x27c, Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x280, Size: 12]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4a4fd78
	void ShowOnlyActorComponents(Actor* InActor);// 0x4a4fd00
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x4a4fc88
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4a4fc10
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x4a4fb98
	void HideComponent(PrimitiveComponent* InComponent);// 0x4a4fb20
	void HideActorComponents(Actor* InActor);// 0x4a4faa8
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x4a4fa30
	void ClearHiddenComponents();// 0x4a4fa1c

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 12]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: SocketMesh
	FName SocketName;//[Offset: 0x0, Size: 8]
	StaticMeshComponent* meshComp;//[Offset: 0x8, Size: 4]
	SkeletalMeshComponent* SkMeshComp;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WaterSwimActor.Actor.Object
	float WaterSufaceOffset;//[Offset: 0x2e4, Size: 4]
	float Damage;//[Offset: 0x2e8, Size: 4]
	float Interval;//[Offset: 0x2ec, Size: 4]
	class DamageType* DamageType;//[Offset: 0x2f0, Size: 4]
	class Pawn[] DamageFilters;//[Offset: 0x2f4, Size: 12]
	class WaterPoisonDamageManager* DamageManagerClass;//[Offset: 0x300, Size: 4]
	bool bIsWaterEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	BoxComponent* WaterBoxComp;//[Offset: 0x308, Size: 4]
	BoxComponent*[] UnWaterBoxCompList;//[Offset: 0x30c, Size: 12]
	bool IsLocationInWater(out const Vector Location, const float ZAxisTolerance);// 0x27c11f4
	bool GetWaterZHeight(out float MinHeight, out float MaxHeight);// 0x27c110c

--------------------------------
Class: WaterPoisonDamageManager.Info.Actor.Object
	WaterSwimActor*[] RegisteredWaterVolumes;//[Offset: 0x2e4, Size: 12]

--------------------------------
Class: AutoTestSystemComponent.ActorComponent.Object
	class ATTaskGraph[] ConfigGraphList;//[Offset: 0xd0, Size: 12]
	ATTaskGraph*[] TaskGraphList;//[Offset: 0xdc, Size: 12]
	bool StopExistGraph(int GraphIndex);// 0x23792ec
	bool StartNewGraph(int GraphIndex, out TaskGraphInitParam Param);// 0x237921c
	void RemoveTaskGraph(ATTaskGraph* Graph);// 0x23791a4
	void ProcessTaskGraph(ATTaskGraph* Graph);// 0x237912c
	void AddTaskGraph(ATTaskGraph* Graph);// 0x23790b4

--------------------------------
Class: ATTaskGraph.Object
	Vector2D DrawHudOffsetScale;//[Offset: 0x1c, Size: 8]
	float LineOffsetY;//[Offset: 0x24, Size: 4]
	enum GraphsState;//[Offset: 0x28, Size: 1]
	AutoTestSystemComponent* OwnerComp;//[Offset: 0x2c, Size: 4]
	ATTaskNodeBase*[] TaskNodeList;//[Offset: 0x30, Size: 12]
	void Tick(float DeltaTime);// 0x2374eec
	void RemoveTaskNode(ATTaskNodeBase* Node);// 0x2374e74
	void ReceiveTick(float DeltaTime);// 0x2374df4
	void ReceiveEndGraph();// 0x2374dd8
	void ReceiveBeginGraph();// 0x2374dbc
	void ProcessTask(ATTaskNodeBase* Task);// 0x2374d3c
	void EndGraph();// 0x2374d20
	void ChangeState(enum NewState);// 0x2374ca8
	void BeginGraph();// 0x2374c8c
	void AddTaskNode(ATTaskNodeBase* Node);// 0x2374c14

--------------------------------
Class: ATTaskNodeBase.Object
	FString NodeDescription;//[Offset: 0x1c, Size: 12]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	ATTaskGraph* OwnerGraph;//[Offset: 0x2c, Size: 4]
	enum NodeState;//[Offset: 0x30, Size: 1]
	ATTaskNodeBase* NextNode;//[Offset: 0x34, Size: 4]
	enum ExcuteResult;//[Offset: 0x38, Size: 1]
	FString ExcuteResultMsg;//[Offset: 0x3c, Size: 12]
	delegate OnNodeStateChangeDelegate;//[Offset: 0x48, Size: 12]
	delegate OnNodeExcuteResultDelegate;//[Offset: 0x54, Size: 12]
	void TickTask(float DeltaTime);// 0x2374eec
	void ReceiveTickTask(float DeltaTime);// 0x2374df4
	void ReceiveEndTask();// 0x2374dd8
	void ReceiveBeginTask();// 0x2374dbc
	void OnNodeStateChangeDelegate__DelegateSignature(ATTaskNodeBase* Node, enum OldState, enum NewState);// 0x46f6b154
	void OnNodeExcuteResultDelegate__DelegateSignature(ATTaskNodeBase* Node, enum Result, FString ResultMsg);// 0x46f6b154
	FString GetDescription();// 0x2377830
	void ForceEndTask();// 0x237781c
	void EndTask();// 0x2374d20
	void ChangeState(enum NewState);// 0x23777a4
	void BeginTask();// 0x2374c8c

--------------------------------
Class: TaskGraphInitParam

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0, Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8, Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x2e4, Size: 4]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor*> TeamFootprintInstanceActorMap;//[Offset: 0x0, Size: 60]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor*[] WorkingList;//[Offset: 0x0, Size: 12]
	TrailMarkActor*[] AssignableList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4, Size: 12]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x10, Size: 12]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x1c, Size: 12]
	bool bDisableSimulateClientBulletImpactFXOnlyForMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c, Size: 12]
	int[] HideBackpackWeaponDeviceQualityLevelConfigList;//[Offset: 0x38, Size: 12]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0, Size: 1]
	bool bApplyToLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4, Size: 12]
	class Object[] CachedClassList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: TaskControllerComponent.UniversalTaskController.ActorComponent.Object

--------------------------------
Class: SeasonTaskListener.UniversalTaskController.ActorComponent.Object
	<int,TaskRecord> TaskRecords;//[Offset: 0x1a8, Size: 60]
	<int,TaskDetailInfo> TaskGlobalMap;//[Offset: 0x1e4, Size: 60]
	delegate OnReceiveWeakTaskData;//[Offset: 0x220, Size: 12]
	delegate OnReceiveTasksSimpleInfos;//[Offset: 0x22c, Size: 12]
	float TaskReqFrequencyLimit;//[Offset: 0x238, Size: 4]
	<int,float> WeekDataReqTimeRecords;//[Offset: 0x23c, Size: 60]
	TaskSimpleInfo[] SimpleInfoList;//[Offset: 0x278, Size: 12]
	TaskDetailInfo[] DetailInfoList;//[Offset: 0x284, Size: 12]
	TaskExtraInfo ReqExtraInfo;//[Offset: 0x290, Size: 4]
	bool bComputeNonRealTimeTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 1]
	bool bEnableOpt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296, Size: 1]
	int EffectLimitNum;//[Offset: 0x298, Size: 4]
	int ActorLimitNum;//[Offset: 0x29c, Size: 4]
	bool bEnableReactivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	bool bUseDiffTypeStat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1, Size: 1]
	LimitActorDetail[] CounterLimitActorList;//[Offset: 0x2a4, Size: 12]
	LimitTypeActorUnion[] TypeCounterActorSet;//[Offset: 0x2b0, Size: 12]
	delegate OnActorOutLimitDelegate;//[Offset: 0x2bc, Size: 12]
	delegate OnActorLimitRegisterDelegate;//[Offset: 0x2c8, Size: 12]
	<FName,int> PersonalActorLimiteNum;//[Offset: 0x2d4, Size: 60]
	void UpdateRecord(int TaskID, int process, bool bIsModeFit, int TargetProcess, int WeekIndex);// 0x25c2310
	void UnRegisterActorForCounter(Actor* TargetActor);// 0x25c2298
	void S2C_ResponseTasksPage(int WeekIndex, const TaskDetailInfo[] TaskDetailList);// 0x25c2188
	void S2C_ResponseTaskSimpleInfo(const TaskSimpleInfo[] TaskSimpleInfos);// 0x25c20c0
	void RequestTasksByWeekIndex(int WeekIndex);// 0x25c2048
	void RequestTasksByID(out const int[] TaskIdList);// 0x25c1fa8
	bool RemoveValue(FName tempName);// 0x25c1f28
	void RegisterActorForCounter(Actor* TargetActor, FString ActorOwnerKey);// 0x25c1dfc
	void OnPlayerStartInitialized();// 0x25c1de8
	bool IsRealTimeComputingTask(int TaskType);// 0x25c1d68
	void HandleInitTaskData(int TaskID, int process, FString ExtInfo);// 0x25c1bf4
	void HandleInitCollectionData(int TaskID, int CurrentCount, int TotalCount);// 0x25c1af4
	bool GetModeFitResult(int TaskID);// 0x25c1a74
	int GetCurNumByName(FName tempName);// 0x25c19f4
	static SeasonTaskListener* GetClientTaskController(const Object* WorldContextObject);// 0x25c197c
	void GenerateReqExtraInfo();// 0x25c1968
	void EnableComputeNonRealTimeTask(bool IsEnable);// 0x25c18e8
	void ComputeAllTasksOnce();// 0x25c18d4
	void ChangeCurNumByName(FName tempName, int deltaNum);// 0x25c1818
	void C2S_RequestTasksPage(int WeekIndex, const TaskExtraInfo ExtraInfo);// 0x25c171c
	void C2S_RequestTaskSimpleInfo();// 0x25c16c0
	void C2S_RequestTasksDetail(const int[] TaskIdList, const TaskExtraInfo ExtraInfo);// 0x25c15b0
	bool AddValue(FName tempName);// 0x25c1530

--------------------------------
Class: TaskRecord
	TaskDetailInfo[] TaskDetailList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: TaskDetailInfo
	int TaskID;//[Offset: 0x0, Size: 4]
	int CurrentProcess;//[Offset: 0x4, Size: 4]
	int TotalProcess;//[Offset: 0x8, Size: 4]
	byte WeekIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: TaskSimpleInfo
	int WeekID;//[Offset: 0x0, Size: 4]
	int UnCompletedTaskNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: TaskExtraInfo
	float TalkTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: LimitActorDetail
	Actor* TargetActor;//[Offset: 0x0, Size: 8]
	FString OwnerKey;//[Offset: 0x8, Size: 12]
	int Order;//[Offset: 0x14, Size: 4]
	int TimeStamp;//[Offset: 0x18, Size: 4]
	bool bHasProcessed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: LimitTypeActorUnion
	FString ActorClassName;//[Offset: 0x0, Size: 12]
	LimitActorDetail[] CounterActorList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: PlayerRevivalComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0xd0, Size: 4]
	int GotoSpectatingTime;//[Offset: 0xd4, Size: 4]
	FString RevivalGotoSpectatingTips;//[Offset: 0xd8, Size: 12]
	int64 StartObserverTime;//[Offset: 0xe8, Size: 8]
	int64 FinishRevivalTime;//[Offset: 0xf0, Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0xf8, Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0xfc, Size: 8]
	DateTime BePickupTime;//[Offset: 0x108, Size: 8]
	void TickRevival(float DeltaSeconds);// 0x2577540
	void SetRemainingRevivalTime(int InValue);// 0x25774c8
	void SetCaptureIDCardStatus(bool InValue);// 0x2577448
	void OnPlayerRevived(STExtraPlayerController* SaviorPC);// 0x25773d0
	void OnPlayerQuitSpectating();// 0x25773bc
	void OnPlayerGotoSpectating();// 0x25773a8
	void OnPlayerExitGame();// 0x2577394
	void OnPlayerEscapeWhenGameEnd(bool bIsPlayerAlive);// 0x2577314
	void LeaveRevivalState(uint32 SaviorKey);// 0x257729c
	bool IsInWaittingRevivalState();// 0x2577274
	int GetRevivalCountDownTime();// 0x2577258
	int GetRemainingRevivalTime();// 0x2577230
	bool GetCaptureIDCardStatus();// 0x2577208
	int64 FindPlayerUIDFromKey(uint32 PlayerKey);// 0x2577188
	bool FindNearestPointPos(out const Vector InPos, out Vector OutPos);// 0x2577090
	void EnterRevivalState();// 0x257707c
	void CaptureIDCard(out const RevivalCardItemPickData InPickupData);// 0x2576fcc
	void BePickupRevivalCard(out const RevivalCardItemPickData InPickupData);// 0x2576f1c

--------------------------------
Class: RevivalPointActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x2e4, Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x2e8, Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x2ec, Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x2f0, Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x2f4, Size: 4]
	bool UseRevivalCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	float RevivalCDTime;//[Offset: 0x2fc, Size: 4]
	bool UseRevivalCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	int RevivalCount;//[Offset: 0x304, Size: 4]
	int ID;//[Offset: 0x308, Size: 4]
	enum CurState;//[Offset: 0x30c, Size: 1]
	enum preState;//[Offset: 0x30d, Size: 1]
	int RevivalTime;//[Offset: 0x310, Size: 4]
	int CurRevivalTime;//[Offset: 0x314, Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	int OperationalDistance;//[Offset: 0x31c, Size: 4]
	<enum,ParticleSystem*> RevivalPointPS;//[Offset: 0x320, Size: 60]
	Transform PTowEleTransform;//[Offset: 0x360, Size: 48]
	<enum,ParticleSystem*> PTowEleMap;//[Offset: 0x390, Size: 60]
	FString ExParticleComponentTag;//[Offset: 0x3cc, Size: 12]
	<enum,AkAudioEvent*> RevivalPointSounds;//[Offset: 0x3d8, Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x414, Size: 4]
	int SmokingdisappearTime;//[Offset: 0x418, Size: 4]
	bool UseShowMiniMapIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41c, Size: 1]
	int IconID;//[Offset: 0x420, Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x424, Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x430, Size: 8]
	float RevivalCDTimeCur;//[Offset: 0x438, Size: 4]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x450, Size: 8]
	void StartRevival();// 0x25afa10
	bool RevivalPlayers(STExtraPlayerController* InPC);// 0x25af990
	bool RecheckCurrentRevivingPlayers();// 0x25af968
	void OnRep_ShowSmoking();// 0x25af954
	void OnRep_RevivalPointState(enum LastPreState);// 0x25af8dc
	void OnRep_RevivalCDTimeCur();// 0x25af8c8
	void OnRep_CurrentRevivingPlayers();// 0x25af8b4
	bool IsPlayerRevivedCurrently(uint32 PlayerKey);// 0x25af834
	bool GiveUpRevivalPlayers(STExtraPlayerController* InPC);// 0x25af7b4
	float GetRevivalCDTimeCurPercent();// 0x25af78c
	float GetRevivalCDTimeCur();// 0x25af764
	float GetRevivalCDTime();// 0x25af73c
	int GetId();// 0x25af714
	void DistanceChangedEvent(float Scale);// 0x46f6b154

--------------------------------
Class: RevivalCardItemPickData
	uint32 PickUpPlayerID;//[Offset: 0x0, Size: 4]
	uint32 DroperPlayerID;//[Offset: 0x4, Size: 4]
	int64 PickupTime;//[Offset: 0x8, Size: 8]
	int64 DroperTime;//[Offset: 0x10, Size: 8]
	FString PickUpName;//[Offset: 0x18, Size: 12]
	FString DroperPlayerName;//[Offset: 0x24, Size: 12]

--------------------------------
Class: DelaySendingMsgComponent.ActorComponent.Object
	STExtraPlayerController* MyPC;//[Offset: 0xd0, Size: 4]
	<FName,EventCD> DelayEvent;//[Offset: 0xd4, Size: 60]
	float CheckSendingAllowedDelta;//[Offset: 0x110, Size: 4]
	EventCD CoolDownCD;//[Offset: 0x114, Size: 32]
	delegate DelaySendingMsgDelegate;//[Offset: 0x140, Size: 12]
	bool bOpenDelayComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	void SetUIMsgByDelayEventName(FName EventName, FString UIMsg);// 0x2440334
	bool CanEventExecuteImmediately(FName EventName);// 0x24402b4

--------------------------------
Class: EventCD
	FString UIMsg;//[Offset: 0x8, Size: 12]
	CoolDownType[] StateList;//[Offset: 0x14, Size: 12]

--------------------------------
Class: CoolDownType
	FName OtherStateType;//[Offset: 0x0, Size: 8]
	enum PStateType;//[Offset: 0x8, Size: 1]
	float CDTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HitEffectComponent.ActorComponent.Object
	int AutonomousHitEffectCacheLimit;//[Offset: 0xd0, Size: 4]
	int SimulatedHitEffectCacheLimit;//[Offset: 0xd4, Size: 4]
	HitEffectDataAsset* DefaultHitEffect;//[Offset: 0xd8, Size: 40]
	<FName,HitEffectDataAsset*> ExtraHitEffects;//[Offset: 0x100, Size: 60]
	HitEffectCachedData[] AutonomousHitEffectList;//[Offset: 0x13c, Size: 12]
	HitEffectCachedData[] SimulatedHitEffectList;//[Offset: 0x148, Size: 12]
	<HitEffectDataAsset*,ParticleSystem*> CachedImpactFXMap;//[Offset: 0x154, Size: 60]
	Object*[] HitEffectCachedList;//[Offset: 0x1a0, Size: 12]
	HitEffectDataAsset* HitEffectDataAsset;//[Offset: 0x1ac, Size: 4]

--------------------------------
Class: HitEffectDataAsset.DataAsset.Object
	<Vector2D,HitEffectItemDataList> HitEffectDirectionOverrideDataMap;//[Offset: 0x20, Size: 60]
	ParticleSystem* DefaultFX;//[Offset: 0x5c, Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x60, Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x64, Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x68, Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x6c, Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x70, Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x74, Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x78, Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x7c, Size: 4]
	ParticleSystem* AutonomousFleshFX;//[Offset: 0x80, Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x84, Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x88, Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x8c, Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x90, Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x94, Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x98, Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x9c, Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0xa0, Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0xa4, Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0xa8, Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0xac, Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0xb0, Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0xb4, Size: 4]
	ParticleSystem* CarFX;//[Offset: 0xb8, Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0xbc, Size: 4]
	ParticleSystem* IceFX;//[Offset: 0xc0, Size: 4]
	ParticleSystem* FoodFX;//[Offset: 0xc4, Size: 4]
	ParticleSystem* MonsterFleshFX;//[Offset: 0xc8, Size: 4]
	ParticleSystem* IceEngravingFX;//[Offset: 0xcc, Size: 4]
	ParticleSystem* NewYearSculptureFX;//[Offset: 0xd0, Size: 4]
	ParticleSystem* AirVehicleSteelFX;//[Offset: 0xd4, Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	<FString,ParticleSystem*> ExtendFleshFX;//[Offset: 0xdc, Size: 60]
	AkAudioEvent* DefaultSound;//[Offset: 0x118, Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x11c, Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x120, Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x124, Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x128, Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x12c, Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x130, Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x134, Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x138, Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x13c, Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x140, Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x144, Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x148, Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x14c, Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x150, Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x154, Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x158, Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x15c, Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x160, Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x164, Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x168, Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x16c, Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x170, Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x174, Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x178, Size: 4]
	AkAudioEvent* FoodSound;//[Offset: 0x17c, Size: 4]
	AkAudioEvent* MonsterFleshSound;//[Offset: 0x180, Size: 4]
	AkAudioEvent* IceEngravingSound;//[Offset: 0x184, Size: 4]
	AkAudioEvent* NewYearSculptureSound;//[Offset: 0x188, Size: 4]
	AkAudioEvent* AirVehicleSteelSound;//[Offset: 0x18c, Size: 4]
	DecalData DefaultDecal;//[Offset: 0x190, Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x1ac, Size: 28]
	DecalData DirtDecal;//[Offset: 0x1c8, Size: 28]
	DecalData WaterDecal;//[Offset: 0x1e4, Size: 28]
	DecalData MetalDecal;//[Offset: 0x200, Size: 28]
	DecalData WoodDecal;//[Offset: 0x21c, Size: 28]
	DecalData GrassDecal;//[Offset: 0x238, Size: 28]
	DecalData GlassDecal;//[Offset: 0x254, Size: 28]
	DecalData FleshDecal;//[Offset: 0x270, Size: 28]
	DecalData FleshDecalAutomonous;//[Offset: 0x28c, Size: 28]
	DecalData SteelDecal;//[Offset: 0x2a8, Size: 28]
	DecalData SandbagDecal;//[Offset: 0x2c4, Size: 28]
	DecalData SandDecal;//[Offset: 0x2e0, Size: 28]
	DecalData ClothDecal;//[Offset: 0x2fc, Size: 28]
	DecalData PlasticDecal;//[Offset: 0x318, Size: 28]
	DecalData LeatherDecal;//[Offset: 0x334, Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x350, Size: 28]
	DecalData PaperDecal;//[Offset: 0x36c, Size: 28]
	DecalData StoneDecal;//[Offset: 0x388, Size: 28]
	DecalData SnowDecal;//[Offset: 0x3a4, Size: 28]
	DecalData PopCanDecal;//[Offset: 0x3c0, Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x3dc, Size: 28]
	DecalData LeafDecal;//[Offset: 0x3f8, Size: 28]
	DecalData CarDecal;//[Offset: 0x414, Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x430, Size: 28]
	DecalData IceDecal;//[Offset: 0x44c, Size: 28]
	DecalData FoodDecal;//[Offset: 0x468, Size: 28]
	DecalData IceEngravingDecal;//[Offset: 0x484, Size: 28]

--------------------------------
Class: HitEffectItemDataList
	<byte,ParticleSystem*> ItemDataListMapNew;//[Offset: 0x0, Size: 60]

--------------------------------
Class: HitEffectCachedData
	DecalComponent* HitDecalComp;//[Offset: 0x0, Size: 4]
	ParticleSystemComponent* HitParticleComp;//[Offset: 0x4, Size: 4]
	AkComponent* AKComp;//[Offset: 0x8, Size: 4]

--------------------------------
Class: TeamateStateChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	float Health;//[Offset: 0x14, Size: 4]
	float HealthMax;//[Offset: 0x18, Size: 4]
	float Temperature;//[Offset: 0x1c, Size: 4]
	float SignalHP;//[Offset: 0x20, Size: 4]

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	uint32 View;//[Offset: 0xc, Size: 4]
	byte Roll;//[Offset: 0x10, Size: 1]
	byte uavType;//[Offset: 0x11, Size: 1]

--------------------------------
Class: TrainingGroundWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	<FString,TrainingHeadWidgetInfo> PlayerHeadWidgetMap;//[Offset: 0x380, Size: 60]
	<FString,PlayerOBInfo> PlayerInfosMap;//[Offset: 0x3c8, Size: 60]
	CanvasPanel* HeadUIRoot;//[Offset: 0x404, Size: 4]
	void SendRequestPlayerInfo(FString inUIDStr);// 0x273ba88
	void OnWidgetInitialized();// 0x273ba74
	void OnRefreshPlayersHeadWidget(out const ChooserActorInfo[] ChooseInfos);// 0x273b9d4
	void OnOpenPlayerInfoDetailUI(out const PlayerOBInfo CurPlayerInfo);// 0x273b8d0
	bool GetPlayerInfoByUID(FString inUIDStr, out PlayerOBInfo CurPlayerInfo);// 0x273b71c

--------------------------------
Class: TrainingHeadWidgetInfo
	OBModePositionWidget* WidgetPtr;//[Offset: 0x0, Size: 4]

--------------------------------
Class: OBModePositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* OBCanvasPanelSlot;//[Offset: 0x370, Size: 4]
	CanvasPanel* OBPanel;//[Offset: 0x374, Size: 4]
	STExtraBaseCharacter* CachedCharacter;//[Offset: 0x378, Size: 4]
	STExtraPlayerState* CachedPlayerState;//[Offset: 0x37c, Size: 4]
	WeaponManagerComponent* CacheWeaponComponent;//[Offset: 0x380, Size: 4]
	PlayerInfoInOB CachedPlayerInfo;//[Offset: 0x384, Size: 180]
	Vector4 Limit;//[Offset: 0x440, Size: 16]
	int heightPlus;//[Offset: 0x450, Size: 4]
	int rightPlus;//[Offset: 0x454, Size: 4]
	Vector2D UIOffset;//[Offset: 0x458, Size: 8]
	Vector LocOffset;//[Offset: 0x460, Size: 12]
	float CachedHealth;//[Offset: 0x46c, Size: 4]
	float CachedBreathPercent;//[Offset: 0x470, Size: 4]
	int TargetDistance;//[Offset: 0x474, Size: 4]
	float MagnificationCoefficient;//[Offset: 0x478, Size: 4]
	bool bShowDeathBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c, Size: 1]
	bool bUseWeseeStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47d, Size: 1]
	enum RelationshipWithRecordTarget;//[Offset: 0x47e, Size: 1]
	UserWidget* DeathBoxUI;//[Offset: 0x480, Size: 8]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x4a0, Size: 4]
	int NativeWidgetID;//[Offset: 0x4b0, Size: 4]
	bool bForceRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	bool isUsingDynamicZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 1]
	void SetPlayerCharacter(STExtraPlayerController* Controller, int idx);// 0x254cf20
	void RefreshWeaponIconStatusDetail(out const ItemDefineID DefineItem);// 0x46f6b154
	void RefreshWeaponBulletStatus(bool bHasBullet);// 0x46f6b154
	void RefreshTrainingWidget(PlayerInfoInOB PlayerInfo);// 0x254cd5c
	void RefreshPlayerHealth(float hpRatio, float breathRatio, bool IsNearDeath);// 0x254cc4c
	void RefreshOpenWeaponIconStatus(bool IsOpen);// 0x46f6b154
	void RefreshDistance(int Distance, float fovDistance);// 0x254cb88
	void ReceiveUseWeseeStyle(out const enum RelationshipWithTarget);// 0x254caf8
	void OpenShowWeaponIcon();// 0x254cae4
	void OnItemClicked();// 0x254cad0
	void HandleWeaponChange();// 0x254cabc
	void HandleCheckCurWeaponBulletChange();// 0x254caa8
	static int GetWidgetID();// 0x254ca80
	void CloseShowWeaponIcon();// 0x254ca6c
	void CheckOwnWeaponStatus();// 0x254ca58

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xfc, Size: 60]
	FName LeftLogicSocketName;//[Offset: 0x138, Size: 8]
	FName RightLogicSocketName;//[Offset: 0x140, Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x148, Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x184, Size: 60]
	<FName,class STExtraWeapon> SoftGrenadeLogicSocketToWeaponClassMap;//[Offset: 0x1c0, Size: 60]
	int[] BagLevel1IDList;//[Offset: 0x1fc, Size: 12]
	int[] BagLevel2IDList;//[Offset: 0x208, Size: 12]
	int[] BagLevel3IDList;//[Offset: 0x214, Size: 12]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x220, Size: 4]
	bool bIgnoreCheckLockTakeOutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	int LockTakeOutWeaponMsgID;//[Offset: 0x228, Size: 4]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	FName CurUseWeaponLogicSocket;//[Offset: 0x230, Size: 8]
	STExtraWeapon* CachedCurUseWeapon;//[Offset: 0x238, Size: 4]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x240, Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	FName LastUseDiffSlotLogicSlot;//[Offset: 0x250, Size: 8]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x258, Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x260, Size: 8]
	byte LastUseLogicSlotRep;//[Offset: 0x268, Size: 1]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool bLockTakeOutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x26c, Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x278, Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x284, Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x290, Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x29c, Size: 12]
	delegate OnClientHasFinishedCreateWeaponDelegate;//[Offset: 0x2a8, Size: 12]
	delegate SimulatedWeaponChangedDelegate;//[Offset: 0x2b4, Size: 12]
	float WeaponCreateSeqLastTime;//[Offset: 0x2cc, Size: 4]
	int WeaponCreateSeqStuckPickUpCount;//[Offset: 0x2d0, Size: 4]
	<FName,STExtraWeapon*> InventoryData;//[Offset: 0x2e0, Size: 60]
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x31c, Size: 60]
	STExtraWeapon*[] BackpackPistolList;//[Offset: 0x358, Size: 12]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x378, Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x388, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x3c0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x3f8, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x430, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x468, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientTempSpecialWeapon;//[Offset: 0x4a0, Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientShiftGrenadeWeapon;//[Offset: 0x4d8, Size: 56]
	SimulateWeaponDataMgr SimulateWeaponDataMgr;//[Offset: 0x510, Size: 12]
	SimulateWeaponDataMgr LocalCachedSimulateWeaponDataMgr;//[Offset: 0x51c, Size: 12]
	int8 BagLevel;//[Offset: 0x528, Size: 1]
	int8 LocalCachedBagLevel;//[Offset: 0x529, Size: 1]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x52c, Size: 4]
	STExtraWeapon* TemporaryWeaponReplicated;//[Offset: 0x530, Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x534, Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x538, Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x53c, Size: 4]
	FName SwitchTargetLogicSocket;//[Offset: 0x540, Size: 8]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x56c, Size: 4]
	<FName,STExtraWeapon*> OldInventoryData;//[Offset: 0x570, Size: 60]
	WeaponSystemDataOnSimulateClient DefWeaponSystemDataOnSimulateClient;//[Offset: 0x5d0, Size: 56]
	void UpdateOwnerClientCreateWeapon();// 0x27cb60c
	void SwitchWeaponBySlot(byte Slot, bool bUseAnimation);// 0x27cb548
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x27cb534
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(byte Slot1, byte Slot2);// 0x46f6b154
	void SimulatedWeaponSightChangedDelegate__DelegateSignature();// 0x46f6b154
	void SimulatedWeaponChangedDelegate__DelegateSignature();// 0x46f6b154
	void SetCurrentTemporaryWeapon(STExtraWeapon* InVehicleWeapon, bool IsServerCall);// 0x27cb470
	void SetAllWeaponVisable(bool isShow);// 0x27cb3f0
	void RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer(byte Slot);// 0x27cb378
	void PushAutoTriggerWeaponEventTaskWhenEquipWeapon(out const AutoTriggerWeaponEventParam Param, bool bClearAllOldAutoTriggerWeaponTasks);// 0x27cb270
	void PreSwitchWeaponEnd();// 0x234fef0
	void OnRep_WeaponSystemDataOnSimulateTempSpecialWeapon();// 0x27cb25c
	void OnRep_WeaponSystemDataOnSimulateShiftGrenadeWeapon();// 0x27cb248
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x27cb234
	void OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x27cb220
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x27cb20c
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x27cb1f8
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x27cb1e4
	void OnRep_TemporaryWeaponReplicated(STExtraWeapon* LastVehicleWeapon);// 0x27cb16c
	void OnRep_SimulateWeaponDataMgr(SimulateWeaponDataMgr OldData);// 0x27cb050
	void OnRep_LockTakeOutWeapon(bool bOldVal);// 0x27cafd0
	void OnRep_CurrentWeaponReplicated();// 0x27cafbc
	void OnRep_CurrentWeaponLogicSocket();// 0x27cafa8
	void OnRep_CurrentShieldWeaponReplicated();// 0x27caf94
	void OnRep_BagLevel();// 0x27caf78
	void OnReconnectOnServer();// 0x240b87c
	void OnReconnectOnClient();// 0x240b860
	void OnClientHasFinishedCreateWeaponDelegate__DelegateSignature();// 0x46f6b154
	void LogInventoryDataInfo();// 0x27caf64
	bool LocalSwapWeaponByPropSlot(byte Slot1, byte Slot2, bool bForce);// 0x27cae54
	void LocalForceFinishSwitchWeapon();// 0x27cae40
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x46f6b154
	void LocalEquipWeaponFromBackpackFinishedCallback();// 0x27cae2c
	void LocalBackpackCurerrentWeaponFinishedCallback();// 0x27cae18
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x46f6b154
	bool IsWeaponSpawnDataCacheIsEmpty();// 0x27cadf0
	bool IsRecoveringWeaponOnServer();// 0x27cadc8
	bool IsCreatingWeaponOnServer();// 0x27cad94
	void HandleGetWeaponFinished(byte Slot);// 0x242dd48
	FString GetWeaponNameByWeaponID(int inWeaponID);// 0x27cacb8
	STExtraWeapon*[] GetShootWeaponList();// 0x27cac24
	FName GetShieldWeaponSlot();// 0x27cabe4
	STExtraWeapon* GetShieldWeapon();// 0x27cabbc
	byte GetPropSlotByLogicSocket(FName LogicSocket);// 0x27cab3c
	FName GetLogicSocketBySlot(byte Slot);// 0x27caab4
	STExtraWeapon* GetLastUsedWeapon();// 0x27caa84
	STExtraWeapon* GetLastUsedNoneGrenadeWeapon();// 0x27caa54
	STExtraWeapon* GetInventoryWeaponByPropSlotOnServerOrAutonomousClient(byte Slot);// 0x27ca9d4
	STExtraWeapon* GetInventoryWeaponByPropSlot(byte Slot);// 0x27ca954
	STExtraWeapon* GetInventoryWeaponByLogicSocket(FName LogicSocket);// 0x27ca8d4
	byte GetGrenadeTypeOfWeapon(STExtraWeapon* Weapon);// 0x27ca854
	FString GetGrenadeTimerIconOfWeapon(STExtraWeapon* Weapon);// 0x27ca778
	int GetGrenadeSkillById(ItemDefineID ID);// 0x27ca6e8
	FString GetGrenadeIconOfWeapon(STExtraWeapon* Weapon);// 0x27ca60c
	ItemDefineID GetGrenadeDefindIDBySlot(FName LogicSlot);// 0x27ca574
	STExtraWeapon* GetCurrentUsingWeapon();// 0x27ca54c
	byte GetCurrentUsingPropSlot();// 0x27ca524
	FName GetCurrentUsingLogicSocketOnServer();// 0x27ca4e4
	FName GetCurrentUsingLogicSocket();// 0x27ca4e4
	STExtraWeapon* GetCurrentTemporaryWeapon();// 0x27ca4bc
	int GetBagLevelBySpesificID(int ID);// 0x27ca43c
	int GetBagLevel();// 0x240b808
	STExtraWeapon*[] GetAllInventoryWeaponList(bool bForceUseMapData);// 0x27ca358
	ItemDefineID[] GetAllInventoryWeaponIDList(bool bForceUseMapData);// 0x27ca274
	void ForceUpdateWeaponPoseByBagLevelOnServer();// 0x240b7ec
	bool ForceStopWeaponCreateSeqAndRecoverByWeaponReconnectOnServer();// 0x27ca244
	void ForceBroadcastChangeInventoryDataEvent(byte Slot);// 0x27ca1cc
	void ForceBroadcastChangeCurrentDataEvent();// 0x27ca1b8
	void ForceBroadcastChangeAllInventoryDataEvent();// 0x27ca1a4
	void EnableAllBroadcast(bool bEnable);// 0x27ca128
	void DropWeapon(STExtraWeapon* Weapon, enum Reason);// 0x27ca064
	void DeleteGrenadeSlotAndDefindID(FName LogicSlot);// 0x27c9fec
	void DebugReconnectToClientOnServer();// 0x27c9fd8
	void DebugDisconnetToServerOnClient();// 0x27c9fc4
	void ClearAllInventoryData();// 0x23b7e18
	void ClearAllAutoTriggerWeaponEventTasks();// 0x27c9f4c
	void ChangeInventoryDataDelegate__DelegateSignature(byte TargetChangeSlot);// 0x46f6b154
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(byte TargetChangeSlot);// 0x46f6b154
	void ChangeCurrentUsingWeaponAfterWeaponsSpawnedOnServer(byte Slot);// 0x27c9ed4
	void AddOrSetGrenadeSlotAndDefindID(FName LogicSlot, ItemDefineID ID);// 0x27c9e00

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	FName LogicSocket;//[Offset: 0x8, Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int ClientResetBulletNum;//[Offset: 0x34, Size: 4]
	int OperationIndex;//[Offset: 0x38, Size: 4]
	Character* OwnerCharacter;//[Offset: 0x3c, Size: 4]
	FString OwnerCharacterName;//[Offset: 0x40, Size: 12]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	uint32 OwnerNetGUID;//[Offset: 0x50, Size: 4]
	FName SpesificLogicGrenadeSlot;//[Offset: 0x58, Size: 8]
	Actor* CustomEquipAttachActor;//[Offset: 0x60, Size: 4]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0, Size: 4]
	byte Slot;//[Offset: 0x10, Size: 1]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	ItemDefineID ID;//[Offset: 0x18, Size: 24]
	int OperationIndex;//[Offset: 0x30, Size: 4]
	Actor* CustomEquipAttachActor;//[Offset: 0x34, Size: 4]

--------------------------------
Class: SimulateWeaponDataMgr
	WeaponSystemDataOnSimulateClient[] WeaponSystemDataList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AutoTriggerWeaponEventParam
	int TargetOwnerRole;//[Offset: 0x0, Size: 4]
	enum TargetEvent;//[Offset: 0x4, Size: 1]
	ItemDefineID TargetWeaponID;//[Offset: 0x8, Size: 24]
	bool bIgnoreItemIDInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum[] ForceExitPawnStateList;//[Offset: 0x24, Size: 12]
	float DelayTimeBeforeDoTask;//[Offset: 0x30, Size: 4]

--------------------------------
Class: FrameCaptureActor.Actor.Object
	GameGuardFrameCapture* FrameCapture;//[Offset: 0x2e4, Size: 4]
	delegate DownloadCompleteEvent;//[Offset: 0x2e8, Size: 16]
	FString LastUploadFileName;//[Offset: 0x2f8, Size: 12]
	STExtraWeapon*[] CacheWeapons;//[Offset: 0x304, Size: 12]
	STExtraPlayerController* MainRolePlayer;//[Offset: 0x310, Size: 4]
	STExtraBaseCharacter* MainRole;//[Offset: 0x314, Size: 4]
	float PastWeaponShootTime;//[Offset: 0x318, Size: 4]
	float OutOfCombatTime;//[Offset: 0x31c, Size: 4]
	int KillNumThreshold;//[Offset: 0x320, Size: 4]
	int AlivePlayers;//[Offset: 0x324, Size: 4]
	bool IsEnableCapture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	FString RealFilePath;//[Offset: 0x32c, Size: 12]
	bool UploadCaptureFrames();// 0x2499218
	void Tick(float DeltaSeconds);// 0x2499198
	void SetUploadPath();// 0x235d4b8
	void OnFrameSaved();// 0x235d4b8
	void OnDownloadCompleteEvent__DelegateSignature(bool bSucceeded, FString SourceUrl);// 0x46f6b154
	void OnBulletHit(Actor* InHitActor, float ImpactPosDistanceToWeapon, Pawn* Player);// 0x2499098
	FString GetSubPath(FString FullName);// 0x2498f54
	FString GenerateFileFullPath();// 0x2498ec0
	bool DownloadCaptureFrames();// 0x2498e98
	void CreateCapture();// 0x2498e84
	void CaptureFrame();// 0x46f6b154
	void C2S_OnFramesUploaded(int res, FString URL);// 0x2498da8

--------------------------------
Class: GameGuardFrameCapture.Object
	int FetchFrameDelay;//[Offset: 0x20, Size: 4]
	MovieSceneCaptureProtocolSettings* ProtocolSettings;//[Offset: 0x48, Size: 4]
	void Tick();// 0x24a41ec
	void StartCapture();// 0x24a41d8
	void Initialize();// 0x24a41c4
	void Close();// 0x24a41b0

--------------------------------
Class: MovieSceneCaptureProtocolSettings.Object

--------------------------------
Class: WingSyncInfo
	int WingOilCount;//[Offset: 0x0, Size: 4]
	int CurrentWingManID;//[Offset: 0x4, Size: 4]
	bool bFuelSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	bool UseShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	WeatherInfo WeatherLevelInfo;//[Offset: 0xd8, Size: 20]
	FString LastLoadedWeatherLevelName;//[Offset: 0xec, Size: 12]
	FString DefaultWeatherLevelName;//[Offset: 0xf8, Size: 12]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	void UnloadStreamLevel(FString LevelName);// 0x2fe4358
	void SyncWeatherLevelInfo();// 0x2fe4344
	void OnUnLoadStreamLevelCompleted();// 0x2fe4330
	void OnRep_WeatherSyncCount();// 0x2fe431c
	void OnLoadStreamLevelCompleted();// 0x2fe4308
	void LoadWeatherLevel();// 0x2fe42f4
	void LoadStreamLevel(FString LevelName, int WeatherID);// 0x2fe41cc
	void LoadDefaultWeatherLevel();// 0x2fe41b8
	void Init();// 0x234fed4

--------------------------------
Class: TeamAssembleAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0, Size: 12]
	int PlayerGender;//[Offset: 0xc, Size: 4]
	int SeasonPassCardBuyType;//[Offset: 0x10, Size: 4]
	int SeasonPassCardBuyLevel;//[Offset: 0x14, Size: 4]
	bool NeedShowEnjoyCard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int PlatformGender;//[Offset: 0x1c, Size: 4]
	int TopSegmentTimes;//[Offset: 0x20, Size: 4]
	int CharmLevel;//[Offset: 0x24, Size: 4]
	bool AllowViewCharmValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int[] WearAvatarList;//[Offset: 0x2c, Size: 12]
	int[] WeaponAvatarList;//[Offset: 0x38, Size: 12]
	int[] VehicleAvatarList;//[Offset: 0x44, Size: 12]
	FString TeamLogoID;//[Offset: 0x50, Size: 12]
	int PlaneID;//[Offset: 0x5c, Size: 4]
	FString PlaneName;//[Offset: 0x60, Size: 12]
	FString VehicleName;//[Offset: 0x6c, Size: 12]
	bool bDisplayWingMan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool bIsTopCharmPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]

--------------------------------
Class: OccupationManagerComponent.ActorComponent.Object
	UAESkillManagerComponent* WeakSkillManagerPtr;//[Offset: 0xd8, Size: 8]
	byte OccupationLevel;//[Offset: 0xe0, Size: 1]
	byte OldOccupationLevel;//[Offset: 0xe1, Size: 1]
	int OccupationID;//[Offset: 0xe4, Size: 4]
	OccupationSkillConfig[] OccupationSkillsConfig;//[Offset: 0xe8, Size: 12]
	int TipTimeInterval;//[Offset: 0xfc, Size: 4]
	void RecordSavePersonAddHealthData();// 0x2555418
	void RecordSavePersonAccelateData();// 0x2555404
	void RecordReduceMedicalCastTime();// 0x25553f0
	void OnSkillActive(int Index, bool bActive);// 0x255532c
	void OnRep_WeakSkillManagerPtr();// 0x2555318
	void OnRep_OccupationLevel(byte OldOccupationLevelValue);// 0x25552a0
	void OnCharacterDead(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x2554ffc
	void ModifyOccupationLevel(int DiffValue);// 0x2554f84

--------------------------------
Class: UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	SkillPreloadDataAsset* SkillPreloadDataAsset;//[Offset: 0x68c, Size: 4]
	UTSkillEntryConfig[] SkillEntryConfigs;//[Offset: 0x690, Size: 12]
	byte TriggerSkillEventFromRole;//[Offset: 0x6a0, Size: 1]
	GSListenerBase* CurrentGSListener;//[Offset: 0x6a4, Size: 8]
	UAESkillStringEventEffectMapForEditor*[] TriggerSkillListenerByString;//[Offset: 0x6ac, Size: 12]
	UAESkillEventEffectMapForEditor*[] TriggerSkillListenerByUAEEume;//[Offset: 0x6b8, Size: 12]
	UTSkillEventEffectMapForEditor*[] TriggerSkillListenerByUTEume;//[Offset: 0x6c4, Size: 12]
	UAEGSLisenterEffectMapForEditor*[] TriggerSkillListenerByGS;//[Offset: 0x6d0, Size: 12]
	int CardChangeProtectTime;//[Offset: 0x6ec, Size: 4]
	void TriggerStringEvent(int SkillID, FString EventTypeStr);// 0x277c880
	void TriggerSkillEvent_RPC_UTSkillEventType(byte InEventEume, int SkillUID, byte fromRole);// 0x277c778
	void TriggerSkillEvent_RPC_String(FString InEventName, int SkillUID, byte fromRole);// 0x277c658
	void TriggerSkillEvent_RPC_EUAESkillEvent(byte InEventEume, int SkillUID, byte fromRole);// 0x277c550
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x27569a4
	void ServerTriggerStringEvent(int SkillUID, FString EventTypeStr);// 0x277c440
	void ServerTriggerSkillEvent(ItemDefineID ItemDefineID, byte EventType);// 0x277c324
	void ServerTriggerCurSkillEvent(byte UAEEvent, int SkillUID);// 0x277c228
	void OnGsListenerTrigger(GSListenerBase* Listener);// 0x277c1b0
	void OnEventPlayerAction(out const FName InAction, Actor* InEventActor);// 0x277c0dc
	bool IsCastingSkillIndex(int SkillIndex);// 0x277c05c
	bool InitOneSkill(class UTSkill skillTemplate, int SkillIndex, bool bActive);// 0x277bf44
	UTSkill* GetSkillByEntry(enum Entry);// 0x277bebc
	float GetRestCoolDownTime(int SkillID);// 0x277be34
	byte GetRealOwnerRoleSafety();// 0x277be04

--------------------------------
Class: SkillPreloadDataAsset.DataAsset.Object
	<FString,SkillPreloadInfo> SkillPreloadMap;//[Offset: 0x20, Size: 60]

--------------------------------
Class: SkillPreloadInfo
	class UTSkill[] PreloadSkillArray;//[Offset: 0x0, Size: 12]
	bool bIsOnlyHighLevelDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	FString Remarks;//[Offset: 0x10, Size: 12]

--------------------------------
Class: UTSkillEntryConfig
	enum Entry;//[Offset: 0x0, Size: 1]
	int SkillIndex;//[Offset: 0x4, Size: 4]
	FString Interrupts;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UAESkillStringEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	FString EventString;//[Offset: 0x134, Size: 12]

--------------------------------
Class: UAESkillEventEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte UAESkillEventType;//[Offset: 0x134, Size: 1]

--------------------------------
Class: UAEGSLisenterEffectMapForEditor.UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	SkillGSLisenterWarpper GSLisenter;//[Offset: 0x134, Size: 4]
	bool bIsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]

--------------------------------
Class: SkillGSLisenterWarpper
	GSListenerBase* ListenerBase;//[Offset: 0x0, Size: 4]

--------------------------------
Class: OccupationSkillConfig
	class UTSkill* SkillClass;//[Offset: 0x0, Size: 40]
	int SkillUIHandle;//[Offset: 0x28, Size: 4]
	byte SkillActiveLevel;//[Offset: 0x2c, Size: 1]
	int SkillGroupIndex;//[Offset: 0x30, Size: 4]

--------------------------------
Class: DynamicWeatherExMgr.DynamicWeatherMgr.Actor.Object
	bool UseCircleIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	int CircleIndex;//[Offset: 0x408, Size: 4]
	WeatherControllerRepData SrcControllerCfg;//[Offset: 0x40c, Size: 28]
	WeatherControllerRepData DstControllerCfg;//[Offset: 0x428, Size: 28]
	bool UseSwitchWeaterByIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	BlendWeatherCfg[] BlendWeatherList;//[Offset: 0x448, Size: 12]
	ScreenAppearanceCfg ScreenAppearanceCfg;//[Offset: 0x458, Size: 32]
	float TickOBPlayerCD;//[Offset: 0x478, Size: 4]
	float TickWeatherFogCD;//[Offset: 0x47c, Size: 4]
	float TickLocalWeatherIndexCD;//[Offset: 0x480, Size: 4]
	bool UseWeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	DynamicWeatherController* SrcController;//[Offset: 0x488, Size: 4]
	DynamicWeatherController* DstController;//[Offset: 0x48c, Size: 4]
	STScreenAppearanceComponent* ScreenAppearanceComponent;//[Offset: 0x490, Size: 4]
	STExtraPlayerController* LocalPlayerController;//[Offset: 0x494, Size: 4]
	bool UseLocalWeatherChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	bool UseWeatherFogCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499, Size: 1]
	WeatherFogCfg WeatherFogCfg;//[Offset: 0x49c, Size: 216]
	int CurrentWeatherIndex;//[Offset: 0x578, Size: 4]
	int LastWeatherIndex;//[Offset: 0x57c, Size: 4]
	PlayerKeyDstWeather[] PlayerKeyDstWeatherList;//[Offset: 0x580, Size: 12]
	PlayerKeyDstWeather[] OBPlayerKeyDstWeatherList;//[Offset: 0x58c, Size: 12]
	void LocalGotoNextWeather();// 0x244cb18
	void BlendWeatherByIndex(int Index);// 0x244caa0
	void BlendToWeatherFog(bool bDstWeatherFog);// 0x244ca20

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x2e4, Size: 68]
	int CurUseFixWeatherIndex;//[Offset: 0x328, Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x32c, Size: 28]
	<enum,DynamicWeatherController*> DynamicWeatherLookupTable;//[Offset: 0x348, Size: 60]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x384, Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x3a0, Size: 28]
	float ServerElapsedTime;//[Offset: 0x3bc, Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	enum NextWeatherStatus;//[Offset: 0x3c5, Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x3c8, Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x3d0, Size: 12]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x3ec, Size: 4]
	enum UICountDownType;//[Offset: 0x402, Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x403, Size: 1]
	void StartTransition();// 0x244d88c
	void SoftReconnectRecoverData(UAEPlayerController* PC);// 0x244d814
	void RPCRequireControl();// 0x244d800
	void RPCRequire();// 0x244d7ec
	void RPC_S2C_UINotify(enum WeatherStatus);// 0x244d76c
	void RPC_S2C_ForceStopDynamicWeatherChange();// 0x234daf8
	void ReinitInDemoReplay();// 0x244d500
	void RefreshWeatherPredictionUI();// 0x244d758
	void OnWeatherChangeStarted(out const WeatherChangeEvent Event);// 0x244d6cc
	void OnWeatherChangeSaturated(out const WeatherChangeEvent Event);// 0x244d640
	void OnWeatherChangeRestoreStarted(out const WeatherChangeEvent Event);// 0x244d5b4
	void OnWeatherChangeRestoreEnded(out const WeatherChangeEvent Event);// 0x244d528
	void OnRep_NextWeatherCountDownTime();// 0x244d4ec
	void OnRep_ControllerDataForReplay();// 0x244d514
	void OnRep_ControllerData();// 0x244d500
	void OnRep_bEnableWeatherPredictionUI();// 0x244d4ec
	void OnDynamicWeatherChangeDelegate__DelegateSignature(out const WeatherChangeEvent Event);// 0x46f6b154
	void HandleClientHasReactivated();// 0x244d4d8
	void GotoSpecificWeather(int WeatherIndex);// 0x244d460
	bool GetNextWeatherDataByWeatherType(out WeatherChangeSequenceItem OutData, enum WeatherStatusType);// 0x244d384
	bool GetNextWeatherData(out WeatherChangeSequenceItem OutData);// 0x244d2f0
	float GetNextWeatherCountDownTimeByType(enum Type);// 0x244d270
	float GetInProgressElapsedTimeSecWithWeather();// 0x244d248
	float GetGlobalWeatherSystemTimeOnServer();// 0x244d220
	WeatherDetailStatus GetCurrentWeatherDetailStatus();// 0x244d1d8
	void ForceStopDynamicWeatherChangeOnServer();// 0x244d1c4
	void ForceStartNextWeatherChangeOnServer();// 0x244d1b0
	void ClientInit(WeatherControllerRepData InitDataIn);// 0x244d0e0

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0, Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ElapsedTime;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float SaturateTime;//[Offset: 0x10, Size: 4]
	float TimeMultiplier;//[Offset: 0x14, Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0, Size: 4]
	float StartTimeMax;//[Offset: 0x4, Size: 4]
	float BlendInTime;//[Offset: 0x8, Size: 4]
	float BlendOutTime;//[Offset: 0xc, Size: 4]
	float DurationTimeMin;//[Offset: 0x10, Size: 4]
	float DurationTimeMax;//[Offset: 0x14, Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18, Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c, Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	WeatherChangeWeight[] WeatherChangeWeights;//[Offset: 0x24, Size: 12]
	WeatherChangeSequenceItem[] WeatherChangeSequence;//[Offset: 0x30, Size: 12]
	float TimeMultiplier;//[Offset: 0x3c, Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bUseRealDateTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]

--------------------------------
Class: WeatherChangeWeight
	enum NewWeatherStatus;//[Offset: 0x0, Size: 1]
	float weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeatherChangeSequenceItem
	enum WeatherStatus;//[Offset: 0x0, Size: 1]
	float StartTime;//[Offset: 0x4, Size: 4]
	float TotalDurationTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4, Size: 4]
	float ElapsedTime;//[Offset: 0x8, Size: 4]
	enum NextWeather;//[Offset: 0xc, Size: 1]
	float NextDuration;//[Offset: 0x10, Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14, Size: 4]
	float TimelineOffset;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BlendWeatherCfg
	enum WeatherType;//[Offset: 0x0, Size: 1]
	float Duration;//[Offset: 0x4, Size: 4]
	float BlendTime;//[Offset: 0x8, Size: 4]
	bool ModifySkySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool ModifySkySwitchColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	bool ModifyFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	bool ModifyMainLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 1]
	bool ModifySkyLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool UseChangeRenderSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: ScreenAppearanceCfg
	bool UseScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FString ScreenAppearanceName;//[Offset: 0x4, Size: 12]
	byte ParticleType;//[Offset: 0x10, Size: 1]
	float ScreenAppearanceConcentration;//[Offset: 0x14, Size: 4]
	FName ShaderName;//[Offset: 0x18, Size: 8]

--------------------------------
Class: DynamicWeatherController.ActorComponent.Object
	delegate DelegateOnWeatherChangeStarted;//[Offset: 0xd0, Size: 12]
	delegate DelegateOnWeatherChangeSaturated;//[Offset: 0xdc, Size: 12]
	delegate DelegateOnWeatherChangeRestoreStarted;//[Offset: 0xe8, Size: 12]
	delegate DelegateOnWeatherChangeRestoreEnded;//[Offset: 0xf4, Size: 12]
	delegate WeatherRecover;//[Offset: 0x100, Size: 12]
	enum DynamicWeatherType;//[Offset: 0x10c, Size: 1]
	MaterialParameterCollection* DyanmicWeatherCollection;//[Offset: 0x110, Size: 4]
	CurveFloat* LightCurve;//[Offset: 0x114, Size: 4]
	float TargetLightValue;//[Offset: 0x118, Size: 4]
	bool bNotUseCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c, Size: 1]
	LinearColor FinalAdditionalColor;//[Offset: 0x120, Size: 16]
	bool bUseFinalAdditionalColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	CurveFloat* FogBlendInCurve;//[Offset: 0x134, Size: 4]
	CurveFloat* FogBlendOutCurve;//[Offset: 0x138, Size: 4]
	bool ForbidTickLerpSkySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool ForbidTickLerpSkySwitchColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]
	bool ForbidLerpFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13f, Size: 1]
	bool ForbidLerpMainLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	bool ForbidLerpSkyLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	bool UseLerpSkySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x142, Size: 1]
	bool UseLerpSkySwitchColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143, Size: 1]
	bool UseLerpFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool UseMainLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	bool UseSkyLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 1]
	CurveFloat* DirectionLightRotYBlendInCurve;//[Offset: 0x148, Size: 4]
	CurveFloat* DirectionLightRotZBlendInCurve;//[Offset: 0x14c, Size: 4]
	CurveFloat* DirectionLightRotYBlendOutCurve;//[Offset: 0x150, Size: 4]
	CurveFloat* DirectionLightRotZBlendOutCurve;//[Offset: 0x154, Size: 4]
	float UINotifyTimeBeforeStart;//[Offset: 0x158, Size: 4]
	FString UINotifyModuleName;//[Offset: 0x15c, Size: 12]
	int UINotifyIDBeforeStart;//[Offset: 0x168, Size: 4]
	int ChangeStartUINotifyID;//[Offset: 0x16c, Size: 4]
	int ChangeQuitUINotifyID;//[Offset: 0x170, Size: 4]
	float ChangeStartUINotifyAnimPlayRate;//[Offset: 0x174, Size: 4]
	AkAudioEvent* UINotifyAKEventBeforeStart;//[Offset: 0x178, Size: 4]
	AkAudioEvent* ChangeStartUINotifyAKEvent;//[Offset: 0x17c, Size: 4]
	AkAudioEvent* ChangeQuitUINotifyAKEvent;//[Offset: 0x180, Size: 4]
	bool bUseLowEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 1]
	WeatherControllerRepData LocalControlData;//[Offset: 0x188, Size: 28]
	float RuningDirection;//[Offset: 0x1a4, Size: 4]
	float RuningTime;//[Offset: 0x1a8, Size: 4]
	float LerpTotalTime;//[Offset: 0x1ac, Size: 4]
	FString WeatherName;//[Offset: 0x1b0, Size: 12]
	DirectionalLight* MainLight;//[Offset: 0x1bc, Size: 4]
	SkyLight* SkyLight;//[Offset: 0x1c0, Size: 4]
	ExponentialHeightFog* Fog;//[Offset: 0x1c4, Size: 4]
	WeatherObject ObjectValues;//[Offset: 0x1c8, Size: 104]
	WeatherObject WeatherObjectSrc;//[Offset: 0x230, Size: 104]
	float SrcLightValue;//[Offset: 0x298, Size: 4]
	WeatherObject WeatherObjectLerp;//[Offset: 0x29c, Size: 104]
	LinearColor SrcFinalAdditionalColor;//[Offset: 0x304, Size: 16]
	float SrcDefaultLightValue;//[Offset: 0x314, Size: 4]
	LinearColor SrcDefaultFinalAdditionalColor;//[Offset: 0x318, Size: 16]
	float SrcCurrentLightValue;//[Offset: 0x328, Size: 4]
	LinearColor SrcCurrentFinalAdditionalColor;//[Offset: 0x32c, Size: 16]
	WeatherDetailStatus CurrentWeatherStatus;//[Offset: 0x33c, Size: 12]
	void UINotifyCallbackOnServer();// 0x244c070
	void SetCurrentBlendValue();// 0x244c05c
	void OnUserQualitySettingChanged(int renderlevel);// 0x236c05c

--------------------------------
Class: WeatherObject
	float MainLight_Density;//[Offset: 0x0, Size: 4]
	LinearColor MainLight_Color;//[Offset: 0x4, Size: 16]
	float MainLight_Temperature;//[Offset: 0x14, Size: 4]
	Rotator MainLight_Rotation;//[Offset: 0x18, Size: 12]
	float SkyLight_Density;//[Offset: 0x24, Size: 4]
	LinearColor SkyLight_Color;//[Offset: 0x28, Size: 16]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x38, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x3c, Size: 16]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x4c, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x50, Size: 16]
	float HeightFallOff;//[Offset: 0x60, Size: 4]
	float StartDistance;//[Offset: 0x64, Size: 4]

--------------------------------
Class: WeatherDetailStatus
	enum CurrentWeather;//[Offset: 0x0, Size: 1]
	float CurrentElapsedTime;//[Offset: 0x4, Size: 4]
	float TotalTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeatherFogCfg
	enum[] WeatherTypeList;//[Offset: 0x0, Size: 12]
	ExponentialHeightFog* Fog;//[Offset: 0xc, Size: 4]
	DynamicFogCustomParam DstWeatherFog;//[Offset: 0x10, Size: 88]
	DynamicFogCustomParam SrcWeatherFog;//[Offset: 0x68, Size: 88]
	float BlendTime;//[Offset: 0xc0, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0xc4, Size: 4]
	DynamicWeatherController*[] WeatherControllerList;//[Offset: 0xcc, Size: 12]

--------------------------------
Class: DynamicFogCustomParam
	float FogDensity;//[Offset: 0x0, Size: 4]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float CustomFogLow_Height;//[Offset: 0x8, Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0xc, Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x10, Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x20, Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x24, Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x28, Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x38, Size: 16]
	float FogHeightFalloff;//[Offset: 0x48, Size: 4]
	float FogMaxOpacity;//[Offset: 0x4c, Size: 4]
	float StartDistance;//[Offset: 0x50, Size: 4]
	float FogCutoffDistance;//[Offset: 0x54, Size: 4]

--------------------------------
Class: PlayerKeyDstWeather
	STExtraPlayerController* PC;//[Offset: 0x0, Size: 4]
	float CurWeatherDuration;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	Vector AirplaneStartLoc;//[Offset: 0x444, Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x450, Size: 12]
	AirDropPathData3D AirDropPathData;//[Offset: 0x45c, Size: 60]
	Vector AirplaneCanJumpLoc;//[Offset: 0x498, Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x4a4, Size: 12]
	Vector AirplaneCanJumpLocForCamp;//[Offset: 0x4b0, Size: 12]
	Vector AirplaneForceJumpLocForCamp;//[Offset: 0x4bc, Size: 12]
	delegate PlayerEnterPlane;//[Offset: 0x4c8, Size: 12]
	delegate PlayerLeavePlane;//[Offset: 0x4d4, Size: 12]
	int CurrentBuildCount;//[Offset: 0x4e0, Size: 4]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0x4e4, Size: 4]
	AssetPreLoadingComponent* AssetPreLoadingComponent;//[Offset: 0x4e8, Size: 4]
	float UniformResolutionSizeX;//[Offset: 0x4f8, Size: 4]
	bool TestSkipMaxKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 1]
	int BaseShowMaxKillerNum;//[Offset: 0x500, Size: 4]
	bool bPreloadBulletHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 1]
	CircleInfo CurCircleInfo;//[Offset: 0x508, Size: 52]
	int CircleInvertIndex;//[Offset: 0x548, Size: 4]
	delegate OnCircleInvertIndexChange;//[Offset: 0x54c, Size: 12]
	bool bUseOptimizedGISTicks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	TickControlComponent* GISTickManager;//[Offset: 0x55c, Size: 4]
	GISActorManager* pGISManager;//[Offset: 0x560, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x568, Size: 4]
	float ExtraRadius;//[Offset: 0x56c, Size: 4]
	uint32 MaxKillerPlayerKey;//[Offset: 0x570, Size: 4]
	AirAttackOrder AirAttackOrder;//[Offset: 0x578, Size: 48]
	Vector AirAttackArea;//[Offset: 0x5a8, Size: 12]
	<int,CallBlackAirAttackOrder> CallBlackAirAttackInfoMap;//[Offset: 0x5b4, Size: 60]
	delegate OnSafeZoneTips;//[Offset: 0x5f0, Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x5fc, Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x608, Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x614, Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x620, Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x62c, Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x638, Size: 12]
	delegate STExtraCharacterPostInitComponentDelegate;//[Offset: 0x644, Size: 12]
	delegate STExtraCharacterDestroyed;//[Offset: 0x650, Size: 12]
	delegate OnGameStateEndPlay;//[Offset: 0x65c, Size: 12]
	delegate OnRepGameClass;//[Offset: 0x668, Size: 12]
	delegate OnOverrideClickBackToLobby;//[Offset: 0x674, Size: 12]
	delegate OnGameStateBaseStateChange;//[Offset: 0x680, Size: 12]
	int PlayerNum;//[Offset: 0x698, Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x69c, Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x6a0, Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x6ac, Size: 12]
	delegate OnGameEnd;//[Offset: 0x6b8, Size: 12]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	bool bNeedInitKillInfoPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c5, Size: 1]
	int GameType;//[Offset: 0x6c8, Size: 4]
	int SubGameType;//[Offset: 0x6cc, Size: 4]
	bool bHasSignalBarReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d0, Size: 1]
	CakeInfo CakeInfo;//[Offset: 0x6d4, Size: 24]
	GameSwitchControll[] GameSwitchList;//[Offset: 0x6ec, Size: 12]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f9, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fa, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fb, Size: 1]
	bool bForbidAirAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fe, Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ff, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x700, Size: 1]
	bool bLimitedCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x701, Size: 1]
	bool BattleVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x702, Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x704, Size: 12]
	int[] limitedClothItemTypeList;//[Offset: 0x710, Size: 12]
	int appleGrenadeID;//[Offset: 0x71c, Size: 4]
	int appleGrenadeCount;//[Offset: 0x720, Size: 4]
	int TrainingCountdownTimer;//[Offset: 0x724, Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	bool bIsHasInfiniteBulletsMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72a, Size: 1]
	bool bWeaponIgnoreTeammatesCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72b, Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72c, Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72d, Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x730, Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x734, Size: 4]
	bool bDisableShowTombBoxPickData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738, Size: 1]
	bool bDisablePawnBulletImpactFxByNoDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x739, Size: 1]
	class WeaponSlotManager* WeaponSlotManagerTemplateHardRef;//[Offset: 0x73c, Size: 4]
	class WeaponSlotManager* WeaponSlotManagerTemplate;//[Offset: 0x740, Size: 40]
	WeaponSlotManager* WeaponSlotManagerInstance;//[Offset: 0x768, Size: 4]
	delegate OnAirAttack;//[Offset: 0x76c, Size: 12]
	delegate OnBlackAirAttack;//[Offset: 0x778, Size: 12]
	delegate OnBlackAirAttackUIMapScaleChanged;//[Offset: 0x784, Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	bool IsCanPlaceBuilding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x791, Size: 1]
	bool IsCanBecomeZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x792, Size: 1]
	<Vector,int> BossLocationToID;//[Offset: 0x798, Size: 60]
	<int,int> ZombieAirDropIconID;//[Offset: 0x7d4, Size: 60]
	bool bEnableMapTeammateMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 1]
	<int,Actor*> ZombieAirDropWarningActors;//[Offset: 0x814, Size: 60]
	bool bEnableSignalSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850, Size: 1]
	FString EnableSignalSystemConfigKey;//[Offset: 0x854, Size: 12]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	bool IsShowDeadBoxGreenLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	bool IsShowDeadBoxGreenSmoke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x862, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x863, Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x864, Size: 36]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x888, Size: 4]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c, Size: 1]
	int ReadyStateTime;//[Offset: 0x898, Size: 4]
	int LeftEscapeTime;//[Offset: 0x89c, Size: 4]
	int TotalEscapeTime;//[Offset: 0x8a0, Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x8a4, Size: 12]
	float ReplicatedWorldRealTimeSeconds;//[Offset: 0x8b0, Size: 4]
	float ServerWorldRealTimeSecondsDelta;//[Offset: 0x8b4, Size: 4]
	delegate OnRepServerTimeSeconds;//[Offset: 0x8b8, Size: 12]
	FString GameModeDisplayName;//[Offset: 0x8c8, Size: 12]
	GameModeNameDecorator[] GameModeNameDecorator;//[Offset: 0x8d4, Size: 12]
	float EnterReadyRealTime;//[Offset: 0x8e0, Size: 4]
	float EnterFightingRealTime;//[Offset: 0x8e4, Size: 4]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x8e8, Size: 4]
	FName GameModeState;//[Offset: 0x8f0, Size: 8]
	byte CurAirAttackType;//[Offset: 0x900, Size: 1]
	int CurAirAttackWave;//[Offset: 0x904, Size: 4]
	enum CurAirAttackMode;//[Offset: 0x908, Size: 1]
	int AlivePlayerNum;//[Offset: 0x90c, Size: 4]
	int AliveRealPlayerNum;//[Offset: 0x910, Size: 4]
	int AliveTeamNum;//[Offset: 0x914, Size: 4]
	int PlayerNumOnPlane;//[Offset: 0x918, Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x91c, Size: 12]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x928, Size: 12]
	enum GameModeType;//[Offset: 0x934, Size: 1]
	int SeasonIdx;//[Offset: 0x938, Size: 4]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x93c, Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x944, Size: 1]
	bool bIsAllowCloseShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x945, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x946, Size: 1]
	bool bShowVehicleSetting_Helicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x947, Size: 1]
	bool bShowVehicleSetting_UAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x948, Size: 1]
	int PlayerNumPerTeam;//[Offset: 0x94c, Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0x950, Size: 12]
	int[] ExcellentOperationClientModeIDArray;//[Offset: 0x95c, Size: 12]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	<FString,float> BeInvitedPlayers;//[Offset: 0x9a0, Size: 60]
	float InviteCountDownTime;//[Offset: 0x9dc, Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0x9e0, Size: 12]
	GameDataMining GameDataMining;//[Offset: 0x9ec, Size: 68]
	FString GameModeID;//[Offset: 0xa30, Size: 12]
	int MapId;//[Offset: 0xa3c, Size: 4]
	delegate OnGameModeIDReceive;//[Offset: 0xa40, Size: 12]
	int SubModeGroup;//[Offset: 0xa4c, Size: 4]
	FString EscapeHelicopterClassTag;//[Offset: 0xa58, Size: 12]
	int[] FinalWinTeams;//[Offset: 0xa64, Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0xa70, Size: 4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0xa74, Size: 4]
	ImmediateUIManager* ImmediateUIManager;//[Offset: 0xa78, Size: 4]
	UAEBlackboard* BlackBoard;//[Offset: 0xa7c, Size: 4]
	bool IsFireworksActOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa80, Size: 1]
	Actor* StartedPlane;//[Offset: 0xa84, Size: 4]
	delegate GameStateSetPlane;//[Offset: 0xa88, Size: 12]
	Character* CurCastActorMsgOwner;//[Offset: 0xaa0, Size: 8]
	float StartFlyTime;//[Offset: 0xaa8, Size: 4]
	int EnableNewStateMachine;//[Offset: 0xac0, Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0xac8, Size: 4]
	int EscapedPlayerNum;//[Offset: 0xacc, Size: 4]
	FString ModeRelatedBusinessProxyObjectPath;//[Offset: 0xae8, Size: 12]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf4, Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf5, Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0xaf8, Size: 12]
	int[] ImprisonmentTeammateGameType;//[Offset: 0xb04, Size: 12]
	int[] OpenUseNewDuplicateCompGameType;//[Offset: 0xb10, Size: 12]
	RTPCParamInfo[] CustomShootSoundRTPCParamList;//[Offset: 0xb1c, Size: 12]
	RTPCParamInfo[] CustomFootstepSoundRTPCParamList;//[Offset: 0xb28, Size: 12]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 1]
	int HitEffectValue;//[Offset: 0xb38, Size: 4]
	float HitEffectDelayTime;//[Offset: 0xb3c, Size: 4]
	Vector HitEffectColor;//[Offset: 0xb40, Size: 12]
	float HitEffectTransparency;//[Offset: 0xb4c, Size: 4]
	int HitFontValue;//[Offset: 0xb50, Size: 4]
	int HitFontSize_Head;//[Offset: 0xb54, Size: 4]
	int HitFontOutlineSize_Head;//[Offset: 0xb58, Size: 4]
	Vector HitFontColor_Head;//[Offset: 0xb5c, Size: 12]
	Vector HitFontOutlineColor_Head;//[Offset: 0xb68, Size: 12]
	int HitFontSize_Body;//[Offset: 0xb74, Size: 4]
	int HitFontOutlineSize_Body;//[Offset: 0xb78, Size: 4]
	Vector HitFontColor_Body;//[Offset: 0xb7c, Size: 12]
	Vector HitFontOutlineColor_Body;//[Offset: 0xb88, Size: 12]
	int HitFleshValue;//[Offset: 0xb94, Size: 4]
	bool bIsShowHitValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98, Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb99, Size: 1]
	STExtraPlayerController* LocalPC;//[Offset: 0xb9c, Size: 4]
	int WrapperLightBeamEnabled;//[Offset: 0xba0, Size: 4]
	FString LightBeamTableName;//[Offset: 0xba4, Size: 12]
	FString LightBeamCfgName;//[Offset: 0xbb0, Size: 12]
	FString ModeUICfgName;//[Offset: 0xbbc, Size: 12]
	int EnableDebugLightBeam;//[Offset: 0xbc8, Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xbcc, Size: 12]
	MarkSyncData[] PopKartMarkDispatchData;//[Offset: 0xbd8, Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xbe4, Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xbf0, Size: 12]
	MarkSyncData[] PrevLocalMarkDispatchData;//[Offset: 0xbfc, Size: 12]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0xc08, Size: 4]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0xc0c, Size: 4]
	SceneRenderActorManager* SceneRenderActorManager;//[Offset: 0xc10, Size: 4]
	int CountDownTimeThreshold;//[Offset: 0xc14, Size: 4]
	int RefreshCharmPlayerTimeThreshold;//[Offset: 0xc18, Size: 4]
	int StopRefreshCharmPlayerTimeThreshold;//[Offset: 0xc1c, Size: 4]
	int RefreshCharmPlayerTimeTolerance;//[Offset: 0xc20, Size: 4]
	int ShowCharmPlayerCount;//[Offset: 0xc24, Size: 4]
	int TopCharmPlayerNumber;//[Offset: 0xc28, Size: 4]
	int TotalCharmPlayerNumber;//[Offset: 0xc2c, Size: 4]
	bool bStartRefreshCharmPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc34, Size: 1]
	bool bEnableRefreshCharmPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc35, Size: 1]
	int LuckyCharmPlayerNumber;//[Offset: 0xc38, Size: 4]
	float LuckyCharmPlayerProbability;//[Offset: 0xc3c, Size: 4]
	bool bEnableHotStageShowWingMan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	int MaxWingManPlayerNumber;//[Offset: 0xc44, Size: 4]
	PlayerDetailInfo[] WingManPlayerDetailList;//[Offset: 0xc48, Size: 12]
	PlayerDetailInfo[] LuckyCharmPlayerDetailList;//[Offset: 0xc54, Size: 12]
	PlayerDetailInfo[] TopCharmPlayerDetailList;//[Offset: 0xc60, Size: 12]
	<uint32,bool> AllowViewCharmInfoMap;//[Offset: 0xc6c, Size: 60]
	<uint32,byte> AlreadyInRankPlayers;//[Offset: 0xca8, Size: 60]
	int LastReadyStateTime;//[Offset: 0xce4, Size: 4]
	GameModePlayerParams[] BornLandVehicleList;//[Offset: 0xcec, Size: 12]
	DynamicVibrateSystemManager* DynamicVibrateSystemManager;//[Offset: 0xcf8, Size: 4]
	int DamageMagnifierPlan;//[Offset: 0xcfc, Size: 4]
	bool UseTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd01, Size: 1]
	bool UseFireTssAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd02, Size: 1]
	bool UseHeartbeatOBTssAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd03, Size: 1]
	bool UseHeartbeatTssAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd04, Size: 1]
	TslSimpleCollisionManager* SimpleCollisionManager;//[Offset: 0xd08, Size: 4]
	DestructibleSurfaceManager* DestructibleSurfaceManager;//[Offset: 0xd0c, Size: 4]
	delegate OnGameModeStateTimeChanged;//[Offset: 0xd10, Size: 12]
	bool bUseNewGrenadeMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1c, Size: 1]
	bool bShowWingman;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1d, Size: 1]
	class FrameCaptureActor* FrameCaptureClass;//[Offset: 0xd20, Size: 4]
	bool bSecurityScreenShotEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd24, Size: 1]
	bool bImpoliteVoiceReportEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd25, Size: 1]
	FrameCaptureActor* FrameCapturePtr;//[Offset: 0xd28, Size: 4]
	ObjectPosReplayNetGUIDMap[] SyncObjectPosReplayNetGUIDList;//[Offset: 0xd38, Size: 12]
	ObjectPosUIData[] SyncObjectPosUIData;//[Offset: 0xd44, Size: 12]
	WeaponModuleManager* WeaponModuleSystemRef;//[Offset: 0xd5c, Size: 4]
	class WeaponSlotManager* WeaponModuleManagerTemplate;//[Offset: 0xd60, Size: 4]
	bool bFixLevelExtraTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd70, Size: 1]
	float ServerFixLevelCheckDiff;//[Offset: 0xd74, Size: 4]
	bool NeedCreatePlayerIconToMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 1]
	bool bPlayOnBoardSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd79, Size: 1]
	int YearBeastCount;//[Offset: 0xd7c, Size: 4]
	bool bEnableSpawnYearBeast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd80, Size: 1]
	Vector[] YearBeastCirclePoint;//[Offset: 0xd84, Size: 12]
	float YearBeastCircleRadius;//[Offset: 0xd90, Size: 4]
	int[] HasYearBeastTeamID;//[Offset: 0xd94, Size: 12]
	bool bNeedUpdateParachuteFollowUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda0, Size: 1]
	bool bNeedCheckDupKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda1, Size: 1]
	int TlogDupKillMax;//[Offset: 0xda4, Size: 4]
	float fDSFixedDateTime;//[Offset: 0xda8, Size: 4]
	bool bIgnoreCheckTeamPlayerStateReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdac, Size: 1]
	bool bUseSpecificAvatarHandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdad, Size: 1]
	<enum,int> GSAvatarDefineID;//[Offset: 0xdb0, Size: 60]
	class BattleItemHandleBase[] GSAvatarHandles;//[Offset: 0xdec, Size: 12]
	int UGCPlayerNum;//[Offset: 0xdf8, Size: 4]
	int UGCPlayerNumWithAI;//[Offset: 0xdfc, Size: 4]
	FString UGCProgramName;//[Offset: 0xe00, Size: 12]
	FString UGCUIModulePrefab;//[Offset: 0xe0c, Size: 12]
	void UpdateBornLandVehicles();// 0x267ec00
	void TriggerSpawnYearBeast(uint32 PlayerKey, bool bIsAI);// 0x267eb3c
	void SyncAirplaneRouteForCamp(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x267e9ac
	void SyncAirplaneRoute(Vector StartLoc, Vector StopLoc, Vector CanJumpLoc, Vector ForceJumpLoc);// 0x267e81c
	void SyncAirplaneAndAirDrops(out AirDropPathData3D InAirDropPathData);// 0x267e764
	int SwitchBossLocationToID(Vector loation);// 0x267e6dc
	void SimulateAirAttackOver();// 0x267e680
	void SetupOptimizedGISTick();// 0x267e664
	void SetTagCulling(bool IsUse);// 0x267e5e4
	void SetReConnectGameStateInfo(ReConnectGameStateInfo ReConnectInfo);// 0x267e514
	void SetPlayerNum(int InPlayerNum);// 0x267e4a0
	void SetIsFireworksActOpen(bool Val);// 0x267e420
	void SetHZB(int Enable);// 0x267e3a8
	void SetGameModeState(FName NewState);// 0x267e330
	void SetCurAirAttackWave(int AirAttackWave);// 0x267e2b8
	void SetCurAirAttackType(byte airattacktype);// 0x267e240
	void SetCurAirAttackMode(enum AirAttackMode);// 0x267e1c8
	void SetCircleInvertIndex(int Index);// 0x267e150
	void SetCharmSystemParameters(int CountDownTime, int RefreshCharmPlayerTime, int StopRefreshCharmPlayerTime);// 0x267e050
	void SetAllowViewCharmInfoByPlayerKey(uint32 PlayerKey, bool AllowView);// 0x267df8c
	void SetAliveRealPlayerNum(int InAliveRealPlayerNum);// 0x267df14
	void SetAlivePlayerNum(int InAlivePlayerNum);// 0x267de9c
	void SetAirplaneStopLoc(Vector StopLoc);// 0x267de1c
	void SetAirplaneStartLoc(Vector StarLoc);// 0x267dd98
	void SetAirplaneForceJumpLocForCamp(Vector ForceJumpLoc);// 0x267dd14
	void SetAirplaneForceJumpLoc(Vector ForceJumpLoc);// 0x267dc90
	void SetAirplaneCanJumpLocForCamp(Vector CanJumpLoc);// 0x267dc10
	void SetAirplaneCanJumpLoc(Vector CanJumpLoc);// 0x267db8c
	void RPC_ExcellentOPForReplay(FString ReceivedPlayerUID, byte inExOpResultType);// 0x267dab0
	void RemoveCharacterMoveInputStateEx();// 0x267da9c
	void PlayerPlaneDelegate__DelegateSignature(STExtraPlayerController* PlayerController);// 0x46f6b154
	void OnSceneRenderActorManagerChanged();// 0x267da88
	void OnRep_WingManCharmPlayerDetailList();// 0x267da74
	void OnRep_VisualFieldFeatureParam();// 0x267da60
	void OnRep_UseTssSdkAntiData();// 0x267da4c
	void OnRep_UseHeartbeatTssAntiData();// 0x267da4c
	void OnRep_UseHeartbeatOBTssAntiData();// 0x267da4c
	void OnRep_UseFireTssAntiData();// 0x267da4c
	void OnRep_UGCUIModulePrefab();// 0x267da38
	void OnRep_UGCProgramName();// 0x267da24
	void OnRep_UGCPlayerNumWithAI();// 0x267da10
	void OnRep_UGCPlayerNum();// 0x267d9fc
	void OnRep_TopCharmPlayerAvatarInfoList();// 0x267d9e8
	void OnRep_SyncObjectPosReplayNetGUIDList();// 0x267d9d4
	void OnRep_SubModeGroup();// 0x267d9c0
	void OnRep_StartedPlane();// 0x267d9ac
	void OnRep_ShowCharmPlayerCount();// 0x267d998
	void OnRep_SecurityScreenShotEnabled();// 0x267d984
	void OnRep_SeasonIdx();// 0x267d970
	void OnRep_ReplicatedWorldRealTimeSeconds();// 0x267d95c
	void OnRep_ReadyStateTime();// 0x267d948
	void OnRep_ReadyStateCountingDown();// 0x235d4b8
	void OnRep_PlayerNumOnPlane();// 0x267d934
	void OnRep_PlayerNumChange();// 0x235d4b8
	void OnRep_ObjectPosUIData();// 0x267d920
	void OnRep_MaxKillerChange();// 0x267d90c
	void OnRep_MarkSyncData();// 0x267d8f8
	void OnRep_LuckyCharmPlayerDetailList();// 0x267d8e4
	void OnRep_LobbyGameType();// 0x267d8d0
	void OnRep_IsWeaponFPPOffsetInTDMode();// 0x267d8bc
	void OnRep_IsTrainingMode();// 0x267d8a8
	void OnRep_IsShowDeadBoxGreenSmoke();// 0x267d894
	void OnRep_IsShowDeadBoxGreenLight();// 0x267d880
	void OnRep_IsShowDeadBox();// 0x267d86c
	void OnRep_IsFPPMode();// 0x267d858
	void OnRep_IsFireworksActOpen();// 0x267d844
	void OnRep_IsDark();// 0x267d830
	void OnRep_IsCanPlaceBuilding();// 0x267d81c
	void OnRep_IsCanBecomeZombie();// 0x267d808
	void OnRep_ImpoliteVoiceReportEnabled();// 0x267d7f4
	void OnRep_HasSignalBarReplay();// 0x267d7e0
	void OnRep_GameTerminatorPlayerKey();// 0x267d7cc
	void OnRep_GameModeType();// 0x267d7b8
	void OnRep_GameModeState();// 0x267d79c
	void OnRep_GameModeID();// 0x267d788
	void OnRep_GameModeFeatureSet();// 0x267d774
	void OnRep_FinalWinTeams();// 0x267d760
	void OnRep_EscapeHelicopterClassTag();// 0x267d74c
	void OnRep_EscapedPlayerNum();// 0x267d738
	void OnRep_EnableSignalSystem();// 0x267d724
	void OnRep_DSFixedDateTime();// 0x267d710
	void OnRep_DamageMagnifierPlan();// 0x267d6fc
	void OnRep_CircleInfo();// 0x267d6e8
	void OnRep_CircleIndexChange();// 0x267d6d4
	void OnRep_bShowWingman();// 0x267d6c0
	void OnRep_AliveTeamNum();// 0x267d6ac
	void OnRep_AliveRealPlayerNum();// 0x267d698
	void OnRep_AlivePlayerNum();// 0x267d684
	void OnRep_AirplaneStopLoc();// 0x235d4b8
	void OnRep_AirplaneStartLoc();// 0x235d4b8
	void OnRep_AirplaneForceJumpLocForCamp();// 0x267d65c
	void OnRep_AirplaneForceJumpLoc();// 0x267d670
	void OnRep_AirplaneCanJumpLocForCamp();// 0x267d65c
	void OnRep_AirplaneCanJumpLoc();// 0x267d648
	void OnRep_AirDropPathData();// 0x267d634
	void OnGISComponentCreated(GISActorComponentBase* InComponemt);// 0x267d5bc
	void OnGameModeDisplayNameChange();// 0x267d5a8
	void OnClearCharmSystemInfo();// 0x267d594
	void OnBeginReplayStream();// 0x267d580
	void NotifyDynamicWeatherChange(DynamicWeatherMgr* Mgr, WeatherChangeEvent Event);// 0x267d4c4
	void NotifyClientCharmPlayerChanged(bool IsTopCharmPlayer, bool IsLuckyPlayer, bool IsWingManPlayer);// 0x267d3a4
	void ModifyEnableSignalSystemOnServer(bool bEnable);// 0x267d324
	bool IsUnsafeExit();// 0x267d2fc
	bool IsPlayerInCharmRank(uint32 PlayerKey);// 0x267d27c
	bool IsPlaneValid();// 0x267d258
	bool IsInBlueCircle(out const Vector Pos);// 0x267d1c0
	bool IsGameModeSupportPlayerRevival();// 0x267d198
	bool IsFeatureSupported(enum SubSystemType);// 0x267d118
	bool IsCharmSystemEnabled();// 0x267d0f0
	Vector GetWhiteCircle();// 0x267d0a8
	TslSimpleCollisionManager* GetSimpleCollisionManager();// 0x267d080
	float GetServerReplicatedRealTime();// 0x267d058
	float GetReplicatedWorldTimeSeconds();// 0x267d03c
	bool GetRecordControllerReplay();// 0x267d014
	ReConnectGameStateInfo GetReConnectGameStateInfo();// 0x267cfb4
	Actor* GetPlane();// 0x267cf8c
	FString GetMaxKillerPlayerKey();// 0x267cef8
	bool GetIsFireworksActOpen();// 0x267ced0
	int GetHZB();// 0x267cea8
	FName GetGameModeState();// 0x267ce68
	FString GetGameModeDisplayName();// 0x267cdd4
	Vector GetForceJumpLocForCamp();// 0x267cda8
	Vector GetForceJumpLoc();// 0x267cd7c
	FieldOfViewNotificationComponentRegistry* GetFieldOfViewNotificationComponentRegistry();// 0x267cd54
	DestructibleSurfaceManager* GetDestructibleSurfaceManager();// 0x267cd2c
	enum GetCurCircleStatus();// 0x267cd04
	int GetCurCircleIndex();// 0x267ccdc
	enum GetCurAirAttackMode();// 0x267ccb4
	float GetCircleStatusTimespan();// 0x267cc8c
	float GetCircleStatusLeftTime();// 0x267cc64
	int GetCircleInvertIndex();// 0x267cc48
	Vector GetCanJumpLocForCamp();// 0x267cc20
	Vector GetCanJumpLoc();// 0x267cbf4
	Vector GetBlueCircle();// 0x267cbac
	UAEBlackboard* GetBlackBoard();// 0x267cb84
	MarkSyncData[] GetAllMarkSyncData(byte _TYPE);// 0x267ca14
	int GetAliveRealPlayerNum();// 0x267c9ec
	int GetAlivePlayerNum();// 0x267c9c4
	Vector GetAirplaneStopLoc();// 0x267c99c
	Vector GetAirplaneStartLoc();// 0x267c970
	AirDropPathData3D GetAirDropPathData();// 0x267c820
	void FindMaxVehiclePlayers(out GameModePlayerParams Player, out uint32[] VehiclePlayers);// 0x267c4e0
	void FindAllVisibleVehicleInsidePlayers(out uint32[] VisibleVehicles, out uint32[] VisibleInsider);// 0x267c3c4
	BattleItemData[] FilterEmoteItem(out const BattleItemData[] ItemList);// 0x267c264
	void DispatchToClientRemoveObjectPosUIData(int InInstanceID);// 0x267c1e4
	void DispatchToClientAddObjectPosUIData(const ObjectPosUIData InData);// 0x267c100
	void CreateLevelEventCenter_BP();// 0x267c0e4
	void CheckUpdateCharmOrLuckyPlayers();// 0x267c0d0
	void ChangeWeatherStatus(WeatherChangeEvent Event);// 0x267c058
	bool CalledOverrideClickBackToLobby();// 0x267c030
	void BroadcastSignalGunInfo(int LastTime);// 0x267bfb0
	void BroadcastRoute(Vector StartLoc, Vector StopLoc);// 0x267bec8
	void BroadcastGameEnterFinished();// 0x267beac
	void BroadcastGameEnterFighting();// 0x267be90
	void BroadcastFatalDamageInfoSimple(UAECharacter* causer, UAECharacter* Victim, ClientFatalDamageRecordDataSimple SimpleData);// 0x267bbc0
	void BroadcastFatalDamageInfo(UAECharacter* causer, UAECharacter* Victim, ClientFatalDamageRecordData Data);// 0x267b9d8
	void BroadcastCircleWaveOver(int Index, int WaveNum);// 0x267b8dc
	void BroadcastCircleWarning(float Time);// 0x267b85c
	void BroadcastCircleSizeAndPosition(Vector BlueCircleSync, Vector WhiteCircleSync, int Index);// 0x267b6d8
	void BroadcastCircleInfo(enum CircleInfo, float Time, int CircleInvertedIndex);// 0x267b594
	void BroadcastCampAirLineRoute(Vector StartLoc, Vector StopLoc);// 0x267b4ac
	void BroadcastCallBlackAirAttackWarning(const Vector airAttackAreaSrc, int waveindex, enum AirAttackMode);// 0x267b39c
	void BroadcastCallBlackAirAttackOver(int waveindex, enum AirAttackMode);// 0x267b2d8
	void BroadcastCallBlackAirAttackOrder(const CallBlackAirAttackOrder airAttackOrderSrc, int waveindex, enum AirAttackMode);// 0x267b17c
	void BroadcastAirAttackWarning(const Vector airAttackAreaSrc, int waveindex, enum AirAttackMode);// 0x267b06c
	void BroadcastAirAttackOrderCompact(const CompactAirAttackOrder airAttackOrderSrc, int waveindex);// 0x267af80
	void BroadcastAirAttackOrder(const AirAttackOrder airAttackOrderSrc, int waveindex, enum AirAttackMode);// 0x267ae2c
	void AddCharmPlayerInfoInternal(out PlayerDetailInfo[] DetailInfoList, out GameModePlayerParams PlayerParam, int ItemIndex, bool bVisible, bool bIsWingManPlayerSlot);// 0x267a9b0
	int AddBossLocationToID(Vector loation);// 0x267a928
	void AddAlreadyInRankPlayerInternal(uint32 PlayerKey, byte RankIndex);// 0x267a86c

--------------------------------
Class: AirDropPathData3D
	int AirDropIndex;//[Offset: 0x0, Size: 4]
	Vector StartLoc3D;//[Offset: 0x4, Size: 12]
	Vector TargetLoc3D;//[Offset: 0x10, Size: 12]
	Vector[] AirDropLocs3D;//[Offset: 0x1c, Size: 12]
	bool bIsDrawAirDropFlightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	Vector MapCenter;//[Offset: 0x2c, Size: 12]
	float Radius;//[Offset: 0x38, Size: 4]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0xd0, Size: 4]
	int CurrentLocalInstanceCount;//[Offset: 0xd4, Size: 4]
	MarkDispatchAction[] ActionQueue;//[Offset: 0xd8, Size: 12]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0xe4, Size: 12]
	int MarkCountProcessed;//[Offset: 0xf0, Size: 4]
	MarkSyncData[] StaticMarkList;//[Offset: 0xf4, Size: 12]
	static void UpdateMapMarkData(Object* WorldContextObject, int MarkInstanceID, Vector NewLocation, Rotator NewRotation);// 0x251bcb8
	static MarkDispatchManager* GetMarkDispatchManager(Object* WorldContextObject);// 0x251bc40
	int GenerateNewLocalInstanceID();// 0x251bc1c
	int GenerateNewInstanceID();// 0x251bbf8
	void DispatchMarkDataSimple(MarkSyncData Data);// 0x251b978
	void DispatchMarkDataOwnerOnly(MarkSyncData Data, STExtraPlayerState* PS);// 0x251b6b4
	void DispatchMarkDataArray(MarkDispatchAction[] DataArray);// 0x251b528
	void DispatchMarkData(MarkDispatchAction Data);// 0x251b154
	static int DispatchMapMarkData(Object* WorldContextObject, MarkSyncData MarkData, enum ActionType, enum ActionRange);// 0x251ae04

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0, Size: 1]
	enum RangeType;//[Offset: 0x1, Size: 1]
	MarkSyncData SyncData;//[Offset: 0x4, Size: 88]
	float DispatchDelayTime;//[Offset: 0x5c, Size: 4]
	float RangeRad;//[Offset: 0x60, Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x64, Size: 8]
	STExtraPlayerState* luaPlayerState;//[Offset: 0x6c, Size: 4]
	float DispatchTime;//[Offset: 0x70, Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x78, Size: 16]

--------------------------------
Class: AssetPreLoadingComponent.ActorComponent.Object
	PreLoadAssetConfigItem[] PreLoadAssetConfigList;//[Offset: 0xd0, Size: 12]
	void StartLoad(STExtraPlayerController* PC);// 0x236c05c
	void LoadAssetItemFinished(SoftObjectPath Path, STExtraPlayerController* PC);// 0x2371544
	void LoadAssetItem(out const PreLoadAssetConfigItem Item, STExtraPlayerController* PC);// 0x2371428

--------------------------------
Class: PreLoadAssetConfigItem
	Object* TargetAssetPtr;//[Offset: 0x0, Size: 40]
	bool bIsClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int MinDeviceMemoryLevel;//[Offset: 0x2c, Size: 4]
	bool bSupportClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bSupportDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]

--------------------------------
Class: CircleInfo
	int CurCircleIndex;//[Offset: 0x0, Size: 4]
	enum CircleStatus;//[Offset: 0x4, Size: 1]
	Vector OriginBlueCircle;//[Offset: 0x8, Size: 12]
	Vector BlueCircle;//[Offset: 0x14, Size: 12]
	Vector WhiteCircle;//[Offset: 0x20, Size: 12]
	float CircleStatusStartServerTime;//[Offset: 0x2c, Size: 4]
	float CircleStatusTimespan;//[Offset: 0x30, Size: 4]

--------------------------------
Class: GISActorManager.Object
	delegate OnComponentLoggedIn;//[Offset: 0x1c, Size: 12]
	static void SetGISFailLogEnabled(bool bEnableFailLog);// 0x57753fc
	static void LoginNewGISActorComponent(int InInstanceID, GISActorComponentBase* InComponent);// 0x5775348
	static GISActorManager* GetInstance(Object* WorldContextObject);// 0x57752d0
	static bool GetCanTriggerGISByClass(Object* WorldContextObject, class Object InClass, int ConfigIdx, PlayerController* pController);// 0x577518c
	static Actor* GetActorByTypeIDAndControllerChecked(Object* WorldContextObject, int InTypeID, PlayerController* InController);// 0x577508c
	static Actor* GetActorByTypeID(Object* WorldContextObject, int InTypeID);// 0x5774fd0
	static Actor* GetActorByInstanceAndWorld(Object* WorldContextObject, int InInstanceID);// 0x5774f14
	static Actor* GetActorByInstance(Object* WorldContextObject, int InInstanceID);// 0x5774e58
	static Actor*[] GetActorByClassAndWorld(Object* WorldContextObject, class Object InClass);// 0x5774d40
	static int GenerateInstanceID(Object* WorldContextObject);// 0x5774cc8

--------------------------------
Class: GISActorComponentBase.ActorComponent.Object
	GISObjectBaseAction*[] Actions;//[Offset: 0xd4, Size: 12]
	UAEBlackboardParameter[] SharedParams;//[Offset: 0xe0, Size: 12]
	Object*[] PinnedObjects;//[Offset: 0xec, Size: 12]
	FString OverlapComponentName;//[Offset: 0xf8, Size: 12]
	float OverlapDistanceSecurtyCheck;//[Offset: 0x104, Size: 4]
	bool bFastOverlapCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	DataTable* ConfigPath;//[Offset: 0x110, Size: 40]
	bool bGISDisableTickOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	GISActivitySelector[] TypeIDArray;//[Offset: 0x13c, Size: 12]
	bool bCantriggerSkipsBoundCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	PrimitiveComponent* OverlapComponentCache;//[Offset: 0x14c, Size: 4]
	<byte,GISComponentConfigGroupArratWrapper> RangeActionMap;//[Offset: 0x150, Size: 60]
	<int,GISActorConfigData> GISActorConfigData;//[Offset: 0x18c, Size: 60]
	<int,GISWeakPlayerControllerArrayWrapper> PlayerCDTable;//[Offset: 0x1c8, Size: 60]
	delegate OnGISServerTriggered;//[Offset: 0x204, Size: 12]
	delegate OnGISServeActorEntered;//[Offset: 0x210, Size: 12]
	delegate CustomTriggerEvent;//[Offset: 0x21c, Size: 12]
	delegate OnGISClientTriggered;//[Offset: 0x228, Size: 12]
	UAEBlackboardKeySelector InstanceIDParameterName;//[Offset: 0x238, Size: 8]
	UAEBlackboardKeySelector TypeIDParameterName;//[Offset: 0x240, Size: 8]
	int[] IsInMasterCD;//[Offset: 0x248, Size: 12]
	int InstanceID;//[Offset: 0x290, Size: 4]
	FinishedGISActions FinishedGISActions;//[Offset: 0x294, Size: 12]
	GISObjectBaseAction*[] TickQueue;//[Offset: 0x2a0, Size: 12]
	Actor*[] PreviousInBoundActors;//[Offset: 0x2e8, Size: 12]
	GISActorManager* InstanceManager;//[Offset: 0x2f4, Size: 4]
	UAEBlackboard* BlackBoard;//[Offset: 0x2f8, Size: 4]
	<Actor*,GISPlayerComponentBase*> GISPlayerComponentCache;//[Offset: 0x2fc, Size: 60]
	<Actor*,PlayerController*> ControllerCacheMap;//[Offset: 0x338, Size: 60]
	<PlayerController*,PlayerDoneData> PlayerDoneMap;//[Offset: 0x374, Size: 60]
	Actor*[] HasBroadcastedActors;//[Offset: 0x3ec, Size: 12]
	void Suspend(bool bIsResume);// 0x57742ac
	void SetCDFlagByPC(PlayerController* PlayerController, int InTypeID);// 0x57741f0
	void RPC_ClientRunTypeAction(byte ActType, int InTypeID, PlayerController* InstigatingPlayerController);// 0x57740e8
	void ResetPCByTime(PlayerController* PlayerController, int TypeID);// 0x577402c
	void RequestCustomTrigger(out const UAEBlackboardParameter[] Params);// 0x5773f40
	void OnRep_InstanceID();// 0x5773f2c
	void OnRep_FinishedGISActions();// 0x5773f18
	void OnPCCDCleared(PlayerController* PlayerController, int TypeID);// 0x46f6b154
	void OnClientTrigger(PlayerController* PlayerController);// 0x236bfdc
	void OnActorDestrtoyed(Actor* InActor);// 0x5773ea0
	bool IsValidForController(PlayerController* InController, int InTypeID);// 0x5773dd4
	bool GetIsPCInCD(PlayerController* PlayerController, int InTypeID);// 0x5773d10
	static Actor* GetGISActorByInstanceID(int InInstanceID, Object* WorldContextObject);// 0x5773c54
	UAEBlackboard* GetBlackBoard();// 0x5773c2c
	void FlushConditions();// 0x5773c18
	void DoTrigger(PlayerController* InController, int InTypeID);// 0x255e3f4
	static void ClearActorInstanceMap(Object* WorldContextObject);// 0x5773ba8
	bool CanTrigger(PlayerController* InController, int InTypeID, bool CheckForWaitingQueue);// 0x5773a90

--------------------------------
Class: GISObjectBaseAction.GISObjectBase.Object
	GISObjectBaseAction*[] ChildActions;//[Offset: 0x9c, Size: 12]
	float ActionDuration;//[Offset: 0xa8, Size: 4]
	void UnPinAction();// 0x5777b9c
	void TickAction(float dt);// 0x5777b1c
	void PinAction();// 0x5777b08
	void OnActionTick(float dt);// 0x46f6b154
	void OnActionStartedBP();// 0x46f6b154
	void OnActionStarted();// 0x2422910
	void OnActionResetsBP();// 0x46f6b154
	void OnActionResets();// 0x24492cc
	void OnActionFinishedBP(byte NewStatus);// 0x46f6b154
	void OnActionFinished();// 0x23ab320
	byte Execute(ActorComponent* InComponentBase, Actor* InInteractingActor, int InMasterIndex, UAEBlackboardParameter[] Params, bool bInSoloMode, bool bIsTest, bool bRebuildCache);// 0x57777c8

--------------------------------
Class: GISObjectBase.Object
	bool bReplicatesAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int ActionInstanceID;//[Offset: 0x20, Size: 4]
	GISObjectBase* FromTemplate;//[Offset: 0x24, Size: 4]
	bool bIsRootAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int MasterIndex;//[Offset: 0x2c, Size: 4]
	UAEBlackboardParameter[] ParamList;//[Offset: 0x30, Size: 12]
	UAEBlackboardParameter[] NodeParamList;//[Offset: 0x3c, Size: 12]
	UAEBlackboard* BlackBoard;//[Offset: 0x48, Size: 4]
	Actor* InteractingActor;//[Offset: 0x4c, Size: 8]
	ActorComponent* ComponentBase;//[Offset: 0x54, Size: 4]
	Object* pOwner;//[Offset: 0x58, Size: 4]
	GISObjectBase* RootAction;//[Offset: 0x5c, Size: 4]
	<int,GISObjectBase*> InstanceMap;//[Offset: 0x60, Size: 60]
	bool IsDedicatedServer();// 0x5777300
	Object* GetGISOwnerComponent();// 0x57772e4
	Actor* GetGISOwnerActor();// 0x57772bc
	Actor* GetGISInteractingActor();// 0x5777290
	ActorComponent* GetComponentBase();// 0x5777260
	UAEBlackboard* GetBlackBoard();// 0x5777238

--------------------------------
Class: GISActivitySelector
	GISConfigGroup* ConfigGroup;//[Offset: 0x0, Size: 4]
	FName ActivityName;//[Offset: 0x8, Size: 8]
	FName ActivityDesc;//[Offset: 0x10, Size: 8]
	FName TypeID;//[Offset: 0x18, Size: 8]

--------------------------------
Class: GISConfigGroup.DataAsset.Object
	GISActorConfigData ConfigData;//[Offset: 0x20, Size: 220]

--------------------------------
Class: GISActorConfigData
	GISActorActionData ActionData;//[Offset: 0x0, Size: 132]
	float CDResetTimePerType;//[Offset: 0x84, Size: 4]
	float MasterCDTime;//[Offset: 0x88, Size: 4]
	int MaxTotalTriggerTimes;//[Offset: 0x8c, Size: 4]
	int MaxTriggerTimesPerPlayer;//[Offset: 0x90, Size: 4]
	int ActivityCatagory;//[Offset: 0x94, Size: 4]
	bool bSkipInvalidAfterTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	<byte,byte> RunSide;//[Offset: 0x9c, Size: 60]
	int OriginalIndexInArray;//[Offset: 0xd8, Size: 4]

--------------------------------
Class: GISActorActionData
	<byte,GISActorActionArrayWrapper> GISActorActionMap;//[Offset: 0x0, Size: 60]
	<byte,GISActorActionParameterArrayWrapper> GISActorActionParams;//[Offset: 0x3c, Size: 60]
	GISObjectCondition*[] CanTriggerConditions;//[Offset: 0x78, Size: 12]

--------------------------------
Class: GISActorActionArrayWrapper
	GISObjectBaseAction*[] ActionFlowList;//[Offset: 0x0, Size: 12]
	GISObjectBaseAction*[] ActionNodeList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: GISActorActionParameterArrayWrapper
	UAEBlackboardParameter[] Params;//[Offset: 0x0, Size: 12]

--------------------------------
Class: GISObjectCondition.GISObjectBase.Object
	bool Pass(UAEBlackboardParameter[] Params, ActorComponent* InComponentBase, Actor* InInteractingActor);// 0x5778138
	bool CheckCondition(Actor* CurrentInteractingActor, Actor* OwnerActor);// 0x577806c

--------------------------------
Class: GISComponentConfigGroupArratWrapper
	GISComponentConfigGroupWrapper[] Array;//[Offset: 0x0, Size: 12]

--------------------------------
Class: GISComponentConfigGroupWrapper
	GISComponentConfigGroup* ComponentConfigGroup;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GISComponentConfigGroup.DataAsset.Object
	GISActorRangeData ActionData;//[Offset: 0x20, Size: 52]

--------------------------------
Class: GISActorRangeData
	GISObjectBaseAction*[] ActionFlowList;//[Offset: 0x0, Size: 12]
	GISObjectBaseAction*[] ActionNodeList;//[Offset: 0xc, Size: 12]
	UAEBlackboardParameter[] Params;//[Offset: 0x18, Size: 12]
	GISObjectCondition*[] CanTriggerConditions;//[Offset: 0x24, Size: 12]
	byte RunSide;//[Offset: 0x30, Size: 1]

--------------------------------
Class: GISWeakPlayerControllerArrayWrapper
	PlayerController*[] PCArray;//[Offset: 0x0, Size: 12]

--------------------------------
Class: FinishedGISActions
	CurrentRunningGISActionSyncData[] FinishedActions;//[Offset: 0x0, Size: 12]

--------------------------------
Class: CurrentRunningGISActionSyncData
	int8 EntryIndex;//[Offset: 0x0, Size: 1]
	int ActionInstanceID;//[Offset: 0x4, Size: 4]
	int TypeID;//[Offset: 0x8, Size: 4]
	byte ActorActionType;//[Offset: 0xc, Size: 1]
	bool bClientDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: GISPlayerComponentBase.ActorComponent.Object
	GISObjectBaseAction*[] TickQueue;//[Offset: 0xd4, Size: 12]
	GISPlayerSyncData[] PlayerSyncData;//[Offset: 0xe0, Size: 12]
	int[] PlayerRangeData;//[Offset: 0xec, Size: 12]
	bool bEnableOnrepFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	<int,GISClientActionMapWrapper> ClientActionMap;//[Offset: 0x15c, Size: 60]
	<int,GISClientActionMapWrapper> PrevClientActionMap;//[Offset: 0x198, Size: 60]
	UAEBlackboardKeySelector InstanceIDParameterName;//[Offset: 0x1d8, Size: 8]
	UAEBlackboardKeySelector TypeIDParameterName;//[Offset: 0x1e0, Size: 8]
	<int,GISPlayerSyncData> PreviousPlayerSyncData;//[Offset: 0x1e8, Size: 60]
	<int,GISPlayerSyncData> CurrentPlayerSyncData;//[Offset: 0x224, Size: 60]
	<int,SignalWaitingData> WaitingSignalQueue;//[Offset: 0x260, Size: 60]
	<int,GISChangedTypeID> ChangedTypeIDMap;//[Offset: 0x29c, Size: 60]
	UAEBlackboard* BlackBoard;//[Offset: 0x314, Size: 4]
	void TriggerServerLogicByTypeID_Multicast(int InTypeID);// 0x2507ca0
	void TriggerServerLogic_Multicast(const GISPlayerRequestData InSyncData);// 0x5779914
	void SendSignalToWaitingQueue(int InInstanceID, int InTypeID);// 0x5779858
	void ResuqetCustomTrigger(const UAEBlackboardParameter[] Params, int InInstanceID);// 0x57796fc
	void OnSyncdataChanged(out const GISPlayerSyncData[] InSyncData);// 0x46f6b154
	void OnRep_PlayerSyncData();// 0x57796e8
	void OnRep_PlayerRangeData();// 0x57796d4
	bool GetClientCanTrigger(int InInstanceID, int InTypeID);// 0x5779610
	UAEBlackboard* GetBlackBoard();// 0x57795e8
	void ExecuteMainAction();// 0x2417c0c
	bool CanTriggerAction(int InTypeID);// 0x5779568
	void C2S_CustomData(const UAEBlackboardParameter[] Param);// 0x5779454

--------------------------------
Class: GISPlayerSyncData
	PlayerDoneDataArrayWrapper[] TriggeredTime;//[Offset: 0x0, Size: 12]
	int GISActorInstanceID;//[Offset: 0xc, Size: 4]
	int[] TypeID;//[Offset: 0x10, Size: 12]

--------------------------------
Class: PlayerDoneDataArrayWrapper
	int DoneCount;//[Offset: 0x0, Size: 4]
	int TypeID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GISClientActionMapWrapper
	<int,GISActorConfigData> Map;//[Offset: 0x0, Size: 60]

--------------------------------
Class: SignalWaitingData
	PlayerController* Controller;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GISChangedTypeID

--------------------------------
Class: GISPlayerRequestData
	int GISActorInstanceID;//[Offset: 0x0, Size: 4]
	int TypeID;//[Offset: 0x4, Size: 4]
	bool ShouldWaitForSignal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: PlayerDoneData
	<int,int> DoneCount;//[Offset: 0x0, Size: 60]

--------------------------------
Class: AirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 4]
	Vector[] bombsPosition;//[Offset: 0x4, Size: 12]
	float[] bombsInterval;//[Offset: 0x10, Size: 12]
	float HeightOffset;//[Offset: 0x1c, Size: 4]
	float DelayTime;//[Offset: 0x20, Size: 4]
	Actor*[] TargetArr;//[Offset: 0x24, Size: 12]

--------------------------------
Class: CallBlackAirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 4]
	Vector[] bombsPosition;//[Offset: 0x4, Size: 12]
	float[] bombsInterval;//[Offset: 0x10, Size: 12]
	float HeightOffset;//[Offset: 0x1c, Size: 4]
	float DelayTime;//[Offset: 0x20, Size: 4]
	Actor*[] TargetArr;//[Offset: 0x24, Size: 12]
	int InstanceID;//[Offset: 0x30, Size: 4]
	int Count;//[Offset: 0x34, Size: 4]
	Vector AirAttackArea;//[Offset: 0x38, Size: 12]
	Actor* Caller;//[Offset: 0x44, Size: 4]

--------------------------------
Class: GameSwitchControll
	int ID;//[Offset: 0x0, Size: 4]
	int SwitchValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WeaponSlotManager.Object
	<byte,class WeaponSlotBase> WeaponSlotsClassConfig;//[Offset: 0x1c, Size: 60]
	<byte,WeaponSlotBase*> WeaponSlotsDataMap;//[Offset: 0x58, Size: 60]
	WeaponManagerComponent* OwnerMgr;//[Offset: 0x94, Size: 4]
	int GetWeaponSlotUIType(byte Slot, STExtraWeapon* Weapon);// 0x27d5e3c
	static WeaponSlotManager* GetWeaponSlotManager(Object* ContextObject);// 0x27d5dc4
	WeaponSlotBase* GetWeaponSlotBySlotTypeCommon(byte SlotType);// 0x27d5d44
	class Object GetDefaultWeaponSlotClass(byte SlotType);// 0x27d5cc4

--------------------------------
Class: WeaponSlotBase.Object
	int SlotUIType;//[Offset: 0x1c, Size: 4]
	bool bCanDisuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bUpdateLastUseDiffSlotWeaponSlotWhenSwitchToThisSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bUpdateLastUseNoneGrenadeWeaponSlotWhenSwitchToThisSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool bNeedCreateWhenCanNotEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool bNeedSwitchWhenCreateAndUseSameSlotWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bHideWeaponAfterDisuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bResetIsPressingFireBtnWhenSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool bForceSwitchWhenUseAfterSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	int SwitchAnimType;//[Offset: 0x28, Size: 4]
	byte GetWeaponAnimTypeBySlot(enum StateType, byte Slot);// 0x27d5974

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0, Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4, Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8, Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14, Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x18, Size: 12]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x40, Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x48, Size: 60]
	<int,float> VisualAngleLimitMap;//[Offset: 0x84, Size: 60]
	void UpdateVisualFieldMeta();// 0x24492b0

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0, Size: 60]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0, Size: 16]
	Actor* VisibleActor;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameModeNameDecorator
	FString DecorateCondition;//[Offset: 0x0, Size: 12]
	FText Prefix;//[Offset: 0xc, Size: 12]
	FText Suffix;//[Offset: 0x18, Size: 12]
	FText Separator;//[Offset: 0x24, Size: 12]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0, Size: 4]
	uint32 GameModeFeatureSet_B;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0, Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	int LeftPlayerNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0, Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc, Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18, Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24, Size: 12]
	int GamePlayingTime;//[Offset: 0x30, Size: 4]
	GameWatchReport[] WatchReport;//[Offset: 0x34, Size: 12]
	int TotalGeneratedPickup;//[Offset: 0x40, Size: 4]

--------------------------------
Class: GameWatchReport
	uint64 player_uid;//[Offset: 0x0, Size: 8]
	float total_time;//[Offset: 0x8, Size: 4]
	WatchFlow[] watch_flow;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WatchFlow
	uint64 UID;//[Offset: 0x0, Size: 8]
	uint32 sec;//[Offset: 0x8, Size: 4]

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent*> TriggerEvents;//[Offset: 0x1c, Size: 60]
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x58, Size: 60]

--------------------------------
Class: LevelEventListenerList
	<LevelEventListener*> Listeners;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelEventListener.Object
	FString EventName;//[Offset: 0x1c, Size: 12]
	Object* ListenerEntity;//[Offset: 0x64, Size: 4]
	Property*[] Params;//[Offset: 0x68, Size: 12]

--------------------------------
Class: ImmediateUIManager.Object
	ImmediateUI[] AllStyleInstance;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: ImmediateUI
	int UID;//[Offset: 0x0, Size: 4]
	Widget*[] UIWidget;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RTPCParamInfo
	FString RTPCKey;//[Offset: 0x0, Size: 12]
	float Value;//[Offset: 0xc, Size: 4]
	int InterpolationTimeMs;//[Offset: 0x10, Size: 4]

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c, Size: 12]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28, Size: 12]
	void Unregister(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x2374df4
	void Register(FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x2411008
	void GetRegisteredFieldOfViewNotificationComponents(out FieldOfViewNotificationComponent*[] OutRegisteredFieldOfViewNotificationComponents);// 0x248a2c4
	static FieldOfViewNotificationComponentRegistry* Get(Object* WorldContext);// 0x248a24c
	void FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x46f6b154
	void FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x46f6b154

--------------------------------
Class: FieldOfViewNotificationComponent.ActorComponent.Object
	delegate InFieldOfViewChangedDelegate;//[Offset: 0xfc, Size: 12]
	float CheckFrequencyLowerBoundInSeconds;//[Offset: 0x108, Size: 4]
	float CheckFrequencyUpperBoundInSeconds;//[Offset: 0x10c, Size: 4]
	bool bSelfDebugLineTraceDrawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	delegate IsCheckingFieldOfViewEnabledDelegate;//[Offset: 0x118, Size: 16]
	interface class * SelfActorLocationGetter;//[Offset: 0x128, Size: 8]
	enum FieldOfViewNotificationStatus;//[Offset: 0x130, Size: 1]
	bool IsNotificationWorking();// 0x2489e9c
	static int IsGlobalDebugLineTraceDrawn();// 0x2489e70
	bool IsCheckingFieldOfViewEnabledDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender);// 0x46f6b154
	void InFieldOfViewChangedDelegate__DelegateSignature(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x46f6b154
	enum GetFieldOfViewNotificationStatus();// 0x2489e48

--------------------------------
Class: SceneRenderActorManager.ActorComponent.Object
	<enum,RenderActorDetail> RenderActorMap;//[Offset: 0xd0, Size: 60]
	SceneDisplayDirectorBase*[] SceneDisplayDirectorList;//[Offset: 0x10c, Size: 12]
	void UnRegisterSceneDisplayDirector(SceneDisplayDirectorBase* SceneDisplayDirector);// 0x25ba758
	void RegisterSceneDisplayDirector(SceneDisplayDirectorBase* SceneDisplayDirector);// 0x25ba6e0
	void RegisterRenderActorInternal(out SceneRenderActorBase*[] RenderActorList, SceneRenderActorBase* RenderActor, int Order);// 0x25ba5b4
	void RegisterRenderActor(enum ActorType, SceneRenderActorBase* RenderActor, int Order);// 0x25ba4b4
	void OnResetDisplayAvatarByTag(FString Tag);// 0x25ba3d0
	void OnRefreshTeamAssembleDisplayInfoByTag(FString Tag, int ActorIndex, out const TeamAssembleAvatarDisplayInfo DetailInfo);// 0x25ba180
	void OnRefreshSceneDisplayCountDownValue(FString Tag, int CountDown, int TotalCountDown);// 0x25ba014
	void OnRefreshSceneDisplayAvatarByTag(FString Tag, int ActorIndex, out const PlayerDetailInfo DetailInfo);// 0x25b9e1c
	void OnRefreshDisplayActorNumberByTag(FString Tag, int ActorNumber);// 0x25b9cf4
	void OnRefreshCountDownValue(enum ActorType, int CountDown, int TotalCountDown);// 0x25b9bf4
	int GetTotalDisplayActorNumberByTag(FString Tag);// 0x25b9b08
	int GetRenderActorNumberByType(enum ActorType);// 0x25b9a88
	static SceneRenderActorManager* GetInstance(Object* InWorldContextObject);// 0x25b9a10
	SceneDisplayDirectorBase* GetDisplayActorByTag(FString Tag, int Index);// 0x25b98e0
	void DestroySceneDisplayActorByTag(FString Tag);// 0x25b97fc
	void DestroyRenderActorByType(enum ActorType);// 0x25b9784
	void DestroyRenderActorByTag(enum ActorType, FString ActorTag);// 0x25b9658

--------------------------------
Class: RenderActorDetail
	SceneRenderActorBase*[] RenderPawnList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SceneRenderActorBase.Actor.Object
	STExtraLobbyCharacter* CurrentRenderCharacter;//[Offset: 0x2e4, Size: 4]
	enum ActorType;//[Offset: 0x2e8, Size: 1]
	FString ActorTag;//[Offset: 0x2ec, Size: 12]
	int Order;//[Offset: 0x2f8, Size: 4]
	Object* RTMaterialInstance;//[Offset: 0x2fc, Size: 4]
	AvatarComponent* CurrentCharacterAvatarComponent;//[Offset: 0x300, Size: 4]
	SceneCaptureComponent2D* CurrentCharacterCaptureComponent;//[Offset: 0x304, Size: 4]
	WidgetComponent* CharacterInfoWidgetCompoent;//[Offset: 0x308, Size: 4]
	void OnRefreshCountDownValue(int CountDown, int TotalCountDown);// 0x25b90c8
	void OnRefreshAvatarInfoBlueprint(int Gender, out const int[] ItemList);// 0x46f6b154
	void OnDestroyRenderActor();// 0x25b90b4
	SceneCaptureComponent2D* GetCurrentCharacterCaptureComponent();// 0x25b908c
	AvatarComponent* GetCurrentCharacterAvatarComponent();// 0x25b9064
	WidgetComponent* GetCharacterInfoWidgetComponent();// 0x25b903c

--------------------------------
Class: STExtraLobbyCharacter.Character.Pawn.Actor.Object
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x5e4, Size: 12]
	bool bEnableAvatarStylePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	bool bCurAvatarHasPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 1]
	FName curAvatarStyle;//[Offset: 0x5f8, Size: 8]
	byte charSceneType;//[Offset: 0x600, Size: 1]
	byte lobbyPosIdx;//[Offset: 0x601, Size: 1]
	int localLobbyPos;//[Offset: 0x604, Size: 4]
	delegate lobbyCharGenderChangeDelegate;//[Offset: 0x608, Size: 12]
	UAEDataTable* SpecialAnimaionWeapons;//[Offset: 0x618, Size: 4]
	STExtraWeapon* curEquipWeapon;//[Offset: 0x61c, Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x620, Size: 4]
	LobbyAnimPoseTagSwitcher[] AnimPoseSwitchers;//[Offset: 0x624, Size: 12]
	LobbyGenderAnim[] LobbyAvatarStyleAnims;//[Offset: 0x630, Size: 12]
	FString[] ForceOpenAvatarExclusivePoseSystems;//[Offset: 0x63c, Size: 12]
	FString[] ForceOpenAvatarStylePoseSystems;//[Offset: 0x648, Size: 12]
	LobbyAnimConfigData[] LobbyPoseAnims;//[Offset: 0x654, Size: 12]
	LobbyAnimConfigData[] DefaultLobbyPoseAnims;//[Offset: 0x660, Size: 12]
	delegate lobbyAnimMontagePlayDelegate;//[Offset: 0x66c, Size: 12]
	delegate lobbyAnimWeaponChangeDelegate;//[Offset: 0x678, Size: 12]
	delegate lobbyCharPosChangeDelegate;//[Offset: 0x684, Size: 12]
	FString[] AvatarParticleIgnoreNotifies;//[Offset: 0x690, Size: 12]
	delegate EmoteMontageStartEvent;//[Offset: 0x69c, Size: 12]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x6a8, Size: 12]
	delegate LobbyResetEvent;//[Offset: 0x6b4, Size: 12]
	delegate RotateEndEvent;//[Offset: 0x6c0, Size: 12]
	delegate LobbyCharacterPlayEmoteEvent;//[Offset: 0x6cc, Size: 12]
	delegate LobbyCharacterStopEmoteEvent;//[Offset: 0x6d8, Size: 12]
	bool bIsMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e5, Size: 1]
	int ProfileRenderTargetSize;//[Offset: 0x6e8, Size: 4]
	SceneCaptureComponent2D* ProfileCaptureComponent;//[Offset: 0x6ec, Size: 4]
	bool bAutoSetupRenderTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	float ProfileCaptureDelayTime;//[Offset: 0x6f4, Size: 4]
	TextureRenderTarget2D* ProfileRenderTarget;//[Offset: 0x6f8, Size: 4]
	enum SkirtPoseType;//[Offset: 0x708, Size: 1]
	float CurMainSkelHairAlpha;//[Offset: 0x70c, Size: 4]
	void UnEquipWeaponComponent(int compId);// 0x26878ac
	void UnequipWeapon(STExtraWeapon* Weapon);// 0x2687834
	void StopPlayEmoteInterruptBlend();// 0x2687820
	void StopPlayEmote();// 0x268780c
	void ShutdownRenderTarget();// 0x26877f8
	bool SetupRenderTarget();// 0x26877d0
	void SetNeedSyncAnim(bool bIsNeed);// 0x2687754
	void SetLobbyPosIndexInAvatarScene(int Pos);// 0x26876dc
	void SetLobbyPosIndex(byte Pos);// 0x268765c
	void SetLobbyCharacterProperty(byte SceneType, byte Pos, byte Gender);// 0x2687544
	void SetLobbyAnimGender(byte Gender);// 0x26874bc
	void SetIsMainCharacter(bool bIsMain);// 0x2687440
	void SetEnableAvatarStylePose(bool bEnable);// 0x26873c0
	void SetCharSceneType(byte SceneType);// 0x2687340
	void SetCanTouchRollPawn(bool bIsCan);// 0x46f6b154
	void SetAnimPoseTagSwitcher(FName PoseTag, bool bIsOpen);// 0x2687274
	void ResetLobbyPoseAnimByPosTag(FName PoseTag, bool bIsPlay);// 0x26871a8
	void ResetCharacterPhysics();// 0x2687194
	void ResetAllAvatarPhysics();// 0x2687180
	void RefreshGripAnim();// 0x268716c
	void ProfileShot();// 0x256b214
	void PreProfileShot();// 0x46f6b154
	FString PostProfileShot(FString TargetFileName);// 0x46f6b154
	void OnRotateStoppedEventTrigger();// 0x2687158
	bool OnPlayEmote(int EmoteId, bool needIgnoreNotify, bool bNeedLoop);// 0x268703c
	void OnLobbyResetEventTrigger();// 0x2687028
	void OnAvatarEquiped(int SlotType, bool IsEquipped);// 0x2686f64
	void JumpToEmoteSection(FName SectionName);// 0x2686eec
	bool IsForceOpenAvatarStylePose(FString InSystemTag);// 0x2686e00
	bool IsForceOpenAvatarExclusivePose(FString InSystemTag);// 0x2686d14
	void HandleOnCharAnimLoadingFinished();// 0x2686d00
	AELobbyCharAnimListComp* GetWeaponAnimComponent();// 0x2686cd8
	AnimationAsset* GetWeaponAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x2686bd0
	byte GetLobbyPosIndex();// 0x2686ba8
	byte GetLobbyAnimGender();// 0x2686b80
	BackpackEmoteHandle* GetEmoteHandle(int ItemID);// 0x46f6b154
	STExtraWeapon* GetCurrentWeapon();// 0x2686b58
	int GetCurrentEmoteId();// 0x2686b30
	<int,AnimInstance*> GetClothAnimInstance();// 0x46f6b154
	byte GetCharSceneType();// 0x2686b08
	AnimationAsset* GetCharacterAnimByAnimTypeAndPosType(byte PosIdx, byte GenderType, int WeaponAnimType);// 0x2686a00
	AnimationAsset* GetAvatarStyleAnimAssetByGender(byte GenderType, FName StyleName);// 0x26868fc
	void ForceAnimationUpdateAtOnce();// 0x235d4b8
	void EquipWeaponComponent(int compId);// 0x2686884
	void EquipWeapon(STExtraWeapon* Weapon);// 0x268680c
	void CheckCurHoldSpecialWeapon();// 0x26867f8
	void CaptureProfile(bool bDeferred);// 0x2686778

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x28, Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x2c, Size: 4]
	Controller* OwnerController;//[Offset: 0x30, Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x34, Size: 4]
	void OnWeaponStopFireDelegate__DelegateSignature();// 0x46f6b154
	void HandlePlayerSwitchCameraMode(byte Mode);// 0x27d3948
	void HandlePlayerChangePose(byte LastPose, byte NewPose);// 0x27d388c
	STExtraPlayerController* GetOwnerSTExtraPlayerController();// 0x27d3864
	STExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();// 0x27d383c
	PlayerController* GetOwnerPlayerController();// 0x27d3814
	Pawn* GetOwnerPawn();// 0x27d37ec
	Controller* GetOwnerController();// 0x27d37c4
	Actor* GetOwnerActor();// 0x27d37a8

--------------------------------
Class: LobbyAnimPoseTagSwitcher
	FName TagName;//[Offset: 0x0, Size: 8]
	bool IsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: AELobbyCharAnimListComp.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	LobbyCharacterWeaponAnimData[] CharacterWeaponAnimEditList;//[Offset: 0x1d0, Size: 12]
	LobbyCharacterWeaponAnimData[] AvatarSceneCharacterWeaponAnimEditList;//[Offset: 0x1dc, Size: 12]
	LobbyCharacterWeaponAnimData[] LobbyWithCarCharacterWeaponAnimEditList;//[Offset: 0x1e8, Size: 12]
	LobbyCharacterWeaponAnimData[] LobbySystemCharacterWeaponAnimEditList;//[Offset: 0x1f4, Size: 12]
	void OnAsyncLoadingFinished(LobbyAsyncLoadCharAnimParams LoadingParam);// 0x2fceab0
	void InitPendingList(out LobbyCharacterWeaponAnimData[] animEditList, out SoftObjectPath[] PendingList);// 0x2fce97c
	AnimationAsset* GetCharacterAnim(byte PosIdx, byte GenderType, int WeaponAnimType, byte SceneType);// 0x2fce82c
	void BuildAnimMap(out LobbyCharacterWeaponAnimData[] animList, byte SceneType);// 0x2fce74c

--------------------------------
Class: LobbyCharacterWeaponAnimData
	byte PosIndex;//[Offset: 0x0, Size: 1]
	FString CharPosName;//[Offset: 0x4, Size: 12]
	LobbyCharacterGenderWeaponAnimData[] GenderWeaponAnimList;//[Offset: 0x10, Size: 12]

--------------------------------
Class: LobbyCharacterGenderWeaponAnimData
	byte GenderType;//[Offset: 0x0, Size: 1]
	FString GenderTypeName;//[Offset: 0x4, Size: 12]
	AnimationAsset* WeaponAnimSoftPtr;//[Offset: 0x10, Size: 40]
	AnimationAsset* WeaponAddAnimSoftPtr;//[Offset: 0x38, Size: 40]

--------------------------------
Class: LobbyAsyncLoadCharAnimParams

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xb0, Size: 40]
	AnimationAsset* AnimIgnoreEffectAsset;//[Offset: 0xd8, Size: 40]
	ParticleSystem* BubbleAsset;//[Offset: 0x100, Size: 40]
	Vector BubbleScale;//[Offset: 0x128, Size: 12]
	float BubbleShowTime;//[Offset: 0x134, Size: 4]
	bool Loop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	bool StopInLastFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 1]
	bool isHaveContinuousEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 1]
	bool bIsScaleActorAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b, Size: 1]
	float ScaleActorTimeAtStart;//[Offset: 0x13c, Size: 4]
	bool bSetSlotAnimInvisibleAtStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	float SlotAnimInvisibleTimeAtStart;//[Offset: 0x144, Size: 4]
	bool bNeedResolveDragArtifact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	float ResolveDragArtifactTime;//[Offset: 0x14c, Size: 4]
	bool bOpenLobbyReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool bAvoidParticleEffectRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool bIsResetTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	bool bOnLobbyRest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 1]
	EmoteAnimConfig[] AnimAssetByTags;//[Offset: 0x154, Size: 12]
	float BlendTime;//[Offset: 0x160, Size: 4]
	<enum,int> AvatarIDMap;//[Offset: 0x164, Size: 60]
	float DelayUpdateAvatarAlphaTime;//[Offset: 0x1a0, Size: 4]
	EmoteSeqConfig[] SeqConfig;//[Offset: 0x1a4, Size: 12]
	LobbyGenderAnimData[] LobbyEnterEmoteAnimAssetList;//[Offset: 0x1b0, Size: 12]
	LobbyGenderAnimData[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0x1bc, Size: 12]
	MultiAnimData[] MultiAnimDatas;//[Offset: 0x1c8, Size: 12]
	GenderMultiAnimData[] GenderMultiAnimDatas;//[Offset: 0x1d4, Size: 12]
	EmoteSlotAnimConfig[] SlotAnimDatas;//[Offset: 0x1e0, Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0x1ec, Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0x1f0, Size: 4]
	MVPAvatarDisplayParam MVPAvatarDisplayParam;//[Offset: 0x1f4, Size: 64]
	Vector EmoteColBox;//[Offset: 0x234, Size: 12]
	Vector EmoteColOffset;//[Offset: 0x240, Size: 12]
	bool PlayEmoteParticle();// 0x23957b0
	bool NotifyPlayEmoteCancel();// 0x46f6b154
	bool HandleUse(BattleItemUseTarget Target, enum Reason);// 0x239628c
	bool HandlePickup(out const interface class ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason);// 0x2395fc0
	bool HandleDrop(int InCount, enum Reason);// 0x2395e64
	bool HandleDisuse(enum Reason);// 0x2395ddc
	BackpackComponent* GetBackpackComponent();// 0x23985c4
	bool CheckCanPickUp(CharacterAvatarComponent* AvatarComp, int nowCapcity);// 0x2398500

--------------------------------
Class: EmoteAnimConfig
	FName NameTag;//[Offset: 0x0, Size: 8]
	AnimationAsset* AnimAsset;//[Offset: 0x8, Size: 40]
	CameraAnim* EmoteCameraAnimation;//[Offset: 0x30, Size: 40]
	CameraAnim* EmoteCameraAnimationLongScreen;//[Offset: 0x58, Size: 40]

--------------------------------
Class: EmoteSeqConfig
	FName NameTag;//[Offset: 0x0, Size: 8]
	LevelSequence* Seq;//[Offset: 0x8, Size: 40]
	LevelSequence* LowLevelSeq;//[Offset: 0x30, Size: 40]

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x220, Size: 4]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x224, Size: 60]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x260, Size: 60]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x29c, Size: 60]

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 60]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 12]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 12]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 24]
	FString ObjectPath;//[Offset: 0x28, Size: 12]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 28]
	FString ComponentName;//[Offset: 0x1c, Size: 12]
	Object* CachedComponent;//[Offset: 0x28, Size: 8]

--------------------------------
Class: LobbyGenderAnimData
	AnimationAsset* BoyAnim;//[Offset: 0x0, Size: 40]
	AnimationAsset* GirlAnim;//[Offset: 0x28, Size: 40]

--------------------------------
Class: MultiAnimData
	class Character* Character;//[Offset: 0x0, Size: 4]
	AnimationAsset* Anim;//[Offset: 0x8, Size: 40]
	bool bCanControlOnAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: GenderMultiAnimData
	FName TypeTag;//[Offset: 0x0, Size: 8]
	class Character* Character;//[Offset: 0x8, Size: 4]
	AnimationAsset* Anim;//[Offset: 0x10, Size: 40]
	bool bCanControlOnAnimEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: EmoteSlotAnimConfig
	enum targetSlot;//[Offset: 0x0, Size: 1]
	LobbyGenderAnimData AnimAsset;//[Offset: 0x8, Size: 80]
	int AvatarID;//[Offset: 0x58, Size: 4]

--------------------------------
Class: MVPAvatarDisplayParam
	FString AnimPlaySubLevel;//[Offset: 0x0, Size: 12]
	CameraAnimParam SpecifyCameraAnim;//[Offset: 0xc, Size: 52]

--------------------------------
Class: CameraAnimParam
	bool bStopOtherAnimWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bStopOtherAnimImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bKeepLocAndRotWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bIgnoreAnimTrackStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	float KeepLocAndRotReverseToFinishTime;//[Offset: 0x4, Size: 4]
	CameraAnim* Anim;//[Offset: 0x8, Size: 4]
	float Rate;//[Offset: 0xc, Size: 4]
	float Scale;//[Offset: 0x10, Size: 4]
	float BlendInTime;//[Offset: 0x14, Size: 4]
	float BlendOutTime;//[Offset: 0x18, Size: 4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	float Duration;//[Offset: 0x20, Size: 4]
	byte PlaySpace;//[Offset: 0x24, Size: 1]
	Rotator UserPlaySpaceRot;//[Offset: 0x28, Size: 12]

--------------------------------
Class: SceneDisplayDirectorBase.Actor.Object
	FString DirectorTag;//[Offset: 0x2e4, Size: 12]
	int TipMsgID;//[Offset: 0x2f0, Size: 4]
	bool IsUseLodControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	int CountDownTimeThreshold;//[Offset: 0x2f8, Size: 4]
	int RefreshCharmPlayerTimeThreshold;//[Offset: 0x2fc, Size: 4]
	int StopRefreshCharmPlayerTimeThreshold;//[Offset: 0x300, Size: 4]
	FString TemplateWidgetPath;//[Offset: 0x304, Size: 12]
	FString[] CountDownWidgetTemplates;//[Offset: 0x310, Size: 12]
	int[] FilterItemIdList;//[Offset: 0x31c, Size: 12]
	int[] FilterItemTypeIdList;//[Offset: 0x328, Size: 12]
	enum[] FilterSlotList;//[Offset: 0x334, Size: 12]
	CameraAnimParam CameraAnimParam;//[Offset: 0x340, Size: 52]
	AvatarDisplayPoseComponent*[] AvatarDisplayPoseList;//[Offset: 0x374, Size: 12]
	WidgetComponent*[] WidgetCompoentList;//[Offset: 0x380, Size: 12]
	CustomActorIndicatorWidget*[] ActorIndicatorWidgetList;//[Offset: 0x38c, Size: 12]
	VehicleAvatarDisplayPoseComponent*[] VehicleAvatarDisplayPostList;//[Offset: 0x398, Size: 12]
	RenderWidgetBase*[] CountDownWidgetList;//[Offset: 0x3a4, Size: 12]
	bool HasCameraAnimStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	<uint32,DisplayAvatarDetail> DisplayAvatarDetailCache;//[Offset: 0x3b4, Size: 60]
	int LastSeasonId;//[Offset: 0x3f0, Size: 4]
	TimerHandle KeepCameraLocAndRotByFrameTimer;//[Offset: 0x3f8, Size: 8]
	CameraAnim* InPlayingCameraAnim;//[Offset: 0x400, Size: 8]
	bool HasSwithToTeamAssembleView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	void SwitchToTeamAssembleViewBlueprint(bool bIsEnable);// 0x46f6b154
	void SwitchToTeamAssembleView(bool bIsEnable);// 0x25b4798
	void PlayCameraAnimation();// 0x25b4784
	void OnUpdateDisplayActorNumber(int TotolNumber);// 0x46f6b154
	void OnSwitchToTeamAssembleView();// 0x46f6b154
	void OnResetDisplayAvatarBlueprint();// 0x46f6b154
	void OnResetDisplayAvatar();// 0x25b4770
	void OnRefreshTeammateAssembleInfoBlueprint(int ActorIndex, out const TeamAssembleAvatarDisplayInfo DetailInfo, out const int[] OnlyWearList);// 0x46f6b154
	void OnRefreshTeammateAssembleDisplayInfo(int ActorIndex, out const TeamAssembleAvatarDisplayInfo AvatarDisplayInfo);// 0x25b45d0
	void OnRefreshCountDownValue(int CountDown, int TotalCountDown);// 0x25b4514
	void OnRefreshAvatarInfoBlueprint(AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, out const PlayerDetailInfo DetailInfo, out const int[] OnlyWearList);// 0x46f6b154
	void OnPreRefreshTeammateAssembleInfoBlueprint(int ActorIndex);// 0x46f6b154
	void OnPreRefreshAvatarInfoBlueprint(int ActorIndex, bool isSelf, bool IsTeammate, out const PlayerDetailInfo DetailInfo, AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, bool IsAlreadyDisplaying);// 0x46f6b154
	void OnPostRefreshAvatarInfoBlueprint(AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, out const PlayerDetailInfo DetailInfo);// 0x46f6b154
	void OnKeepCameraLocAndRot();// 0x25b4500
	void OnDestroyDisplayActorBlueprint();// 0x46f6b154
	void OnDestroyDisplayActor();// 0x25b44ec
	void OnCountDownChanged(int CountDown, int TotalCountDown);// 0x46f6b154
	void OnCameraAnimationFinished();// 0x46f6b154
	bool NeedEnableDisplayActor();// 0x46f6b154
	bool IsEnableCharmPlayerShowTest();// 0x25b44c4
	bool IsAvatarItemFiltered(int ItemID);// 0x25b443c
	bool HasPlayerWearChanged(uint32 PlayerKey, int ActorIndex, out const PlayerDetailInfo DetailInfo);// 0x25b42a8
	Vector GetPlayerInfoWidgetLocation(int ActorIndex);// 0x25b4210
	CustomActorIndicatorWidget* CreateIndicatorWidgetInstance(FString TemplatePath);// 0x25b4124

--------------------------------
Class: AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	AnimMontage* AnimMontage;//[Offset: 0x240, Size: 4]
	FString PlayerName;//[Offset: 0x244, Size: 12]
	int Gender;//[Offset: 0x250, Size: 4]
	int[] InitialAvatarItem;//[Offset: 0x254, Size: 12]
	int[] InitialWeaponItem;//[Offset: 0x260, Size: 12]
	int[] InitialWeaponAttachments;//[Offset: 0x26c, Size: 12]
	STExtraLobbyCharacter* LobbyPawn;//[Offset: 0x278, Size: 4]
	CharacterAvatarComponent* PlayerAvatar;//[Offset: 0x27c, Size: 4]
	int TeamID;//[Offset: 0x280, Size: 4]
	int PoseID;//[Offset: 0x284, Size: 4]
	int HeadID;//[Offset: 0x288, Size: 4]
	void SpawnAvatar(bool IsUseLod);// 0x2383b1c
	void SetLightChannel(int LightChannel);// 0x2383aa4
	void PlayAnimMontage();// 0x2383a90
	int GetUpgradeWeaponPendantID();// 0x2383a68
	void CreateWeaponAttachmentsSkin();// 0x2383a54
	void CreateUpgradeWeaponPendant();// 0x2383a40
	void CreateAvatarEquipment(int AvatarResID);// 0x23839c8

--------------------------------
Class: CustomActorIndicatorWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool IsFixLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	bool IsUseCameraLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	bool IsEnableDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x372, Size: 1]
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x374, Size: 4]
	CanvasPanel* MyCanvasPanel;//[Offset: 0x378, Size: 4]
	Vector4 Limit;//[Offset: 0x380, Size: 16]
	Vector2D UIOffset;//[Offset: 0x390, Size: 8]
	Vector LocOffset;//[Offset: 0x398, Size: 12]
	CanvasPanelSlot* MarkCanvasPanelSlot;//[Offset: 0x3a4, Size: 4]
	Vector2D MarkUIOffset;//[Offset: 0x3a8, Size: 8]
	Vector MarkLocOffset;//[Offset: 0x3b0, Size: 12]
	float ScaleBegin;//[Offset: 0x3bc, Size: 4]
	float ScaleEnd;//[Offset: 0x3c0, Size: 4]
	float ScaleStep;//[Offset: 0x3c4, Size: 4]
	float ScaleBeginDistance;//[Offset: 0x3c8, Size: 4]
	float ScaleEndDistance;//[Offset: 0x3cc, Size: 4]
	float MaxShowDistance;//[Offset: 0x3d0, Size: 4]
	float UpdateDistanceTolerance;//[Offset: 0x3d4, Size: 4]
	int TargetDistance;//[Offset: 0x3d8, Size: 4]
	Vector LastPlayerLocation;//[Offset: 0x3dc, Size: 12]
	Rotator LastPlayerRotation;//[Offset: 0x3e8, Size: 12]
	Vector LastActorLocation;//[Offset: 0x3f4, Size: 12]
	Vector2D LastWidgetPosition;//[Offset: 0x400, Size: 8]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x414, Size: 8]
	void UpdateTargetActorLocation(Vector Loc);// 0x242b688
	void UpdateAll();// 0x242b674
	void OnWidgetDestroyed();// 0x46f6b154
	void OnWidgetCreated();// 0x46f6b154
	void OnSwitchWidgetVisibility(bool IsVisible);// 0x46f6b154
	void OnRefreshTeamAssemblePlayerInfo(out const TeamAssembleAvatarDisplayInfo PlayerInfo, int ItemIndex);// 0x46f6b154
	void OnRefreshCharmPlayerInfo(out const PlayerDetailInfo PlayerInfo, int ItemIndex);// 0x46f6b154
	void EnableUpdateLocation(bool bEnable);// 0x242b5f4

--------------------------------
Class: PlayerDetailInfo
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	FString PlayerName;//[Offset: 0x4, Size: 12]
	int CharmLevel;//[Offset: 0x10, Size: 4]
	int CharmValue;//[Offset: 0x14, Size: 4]
	int Gender;//[Offset: 0x18, Size: 4]
	int Sex;//[Offset: 0x1c, Size: 4]
	int SeasonId;//[Offset: 0x20, Size: 4]
	bool AllowViewCharmValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	int[] AvatarItemList;//[Offset: 0x28, Size: 12]
	bool IsDataChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	int WingManID;//[Offset: 0x38, Size: 4]
	bool bIsWingManPlayerSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	FString WingManName;//[Offset: 0x40, Size: 12]

--------------------------------
Class: VehicleAvatarDisplayPoseComponent.AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	STExtraDisplayVehicle* VehicleActor;//[Offset: 0x28c, Size: 4]
	DisplayVehicleAvatarComponent* VehicleAvatar;//[Offset: 0x290, Size: 4]
	void SpawnVehicleAvatarByResId(int resID);// 0x25a9608

--------------------------------
Class: STExtraDisplayVehicle.Actor.Object
	DisplayVehicleAvatarComponent* VehicleAvatarComponent;//[Offset: 0x2e4, Size: 4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x2e8, Size: 4]
	void SwitchLightChannel(int Channel);// 0x2666b20
	DisplayVehicleAvatarComponent* GetVehicleAvatarComponent();// 0x2666af8

--------------------------------
Class: DisplayVehicleAvatarComponent.VehicleAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	void InitVehicleAvatarByResId(int resID);// 0x24411f8
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, MaterialInstance* Mat, BattleItemHandleBase* Handle);// 0x237c2a0
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* meshComp);// 0x237c08c

--------------------------------
Class: VehicleAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	<int,int> DefaultAttachmentMeshID;//[Offset: 0x65c, Size: 60]
	bool PutOffMeshIfLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 1]
	bool PutOffAttachIfLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 1]
	<enum,FName> VehicleSlotNameMap;//[Offset: 0x69c, Size: 60]
	enum VehicleMeshMode;//[Offset: 0x6d8, Size: 1]
	DefaultAvatarRes DefultAvatarRes;//[Offset: 0x6dc, Size: 16]
	ItemDefineID DefaultAvatarID;//[Offset: 0x6f0, Size: 24]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x708, Size: 4]
	Actor* VehicleSkinTrigger;//[Offset: 0x70c, Size: 8]
	MeshSynDataFlag[] SynData;//[Offset: 0x714, Size: 12]
	int[] SynDataID;//[Offset: 0x720, Size: 12]
	void ResetAttachmentParent();// 0x279c368
	BattleItemHandleBase* ReloadItemHandle(BattleItemHandleBase* BaseHandle);// 0x279c2e8
	bool PutOnMasterComponentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh);// 0x279c21c
	bool PutOnEquipmentByResID(int resID);// 0x237e504
	bool PutOnEquipmentByItemHandle(BattleItemHandleBase* ItemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x237e3f4
	bool PutOffEquimentByResID(int resID);// 0x237e36c
	void PushHandlesToPipeline(BattleItemHandleBase*[] handleList);// 0x279c138
	void PrepareRenderAssets(out VehicleMeshCfg meshPack, out SoftObjectPath[] MaterialAssets);// 0x279c008
	bool PreFiltHandles(BattleItemHandleBase* AvatarHandle, out MeshSynDataFlag SyncData);// 0x279beec
	void OnRep_AvatarMeshChanged();// 0x279bed8
	void OnItemHandleListLoaded(BattleItemHandleBase*[] ItemHandles, int AsyncLoadID);// 0x279bdb0
	void OnDetailMeshLoaded(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x279bbe0
	void OnAsyncLoadMeshList(SoftObjectPath[] AssetRef, int AsyncLoadID);// 0x237df74
	void NetSyncData(int Slot, enum Type, BattleItemHandleBase* Handle);// 0x237dd24
	bool LoadMeshListAsync(out BattleItemHandleBase*[] handleList, bool needDirectLoad);// 0x237db50
	bool IsUseDefaultAvatar();// 0x279bbb8
	bool IsTPPMode();// 0x279bb90
	SkeletalMesh* GetSkeletalMesh(out VehicleMeshCfg meshPack);// 0x279baf4
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath AssetRef);// 0x237d450
	MeshComponent* GetMeshComponentBySlotID(int SlotID);// 0x279ba74
	void GetMaterial(out VehicleMeshCfg meshPack, out MaterialInstanceSet[] matList);// 0x279b970
	AvatarEntityFactory* GetEntityFactory();// 0x237ceb8
	MaterialInstance* GetAdvancedMaterial(out VehicleMeshCfg meshPack);// 0x279b8d4
	SyncAdditionDataArray GetAdditionalDataBySlot(const int InSlotID);// 0x279b6d8
	void ExitFPPMode();// 0x279b6c4
	void EnterFPPMode();// 0x279b6b0
	void ClearMeshBySlot(int Slot, bool putDefault);// 0x237c6d0
	void ClearMeshByItemHandle(BattleItemHandleBase* ItemHandle);// 0x237c650
	bool CheckSlotIsEquipped(int SlotID);// 0x279b630
	bool CheckIsAlreadyEquipped(ItemDefineID DefineID);// 0x279b5a0
	bool ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, MaterialInstance* Mat, BattleItemHandleBase* Handle);// 0x237c2a0
	void ApplyMaterial(BattleItemHandleBase* ItemHandle, MeshComponent* meshComp);// 0x237c08c
	void ApplyBrokenEffect();// 0x279b58c

--------------------------------
Class: DefaultAvatarRes
	SkeletalMesh* FPPMesh;//[Offset: 0x0, Size: 4]
	SkeletalMesh* TPPMesh;//[Offset: 0x4, Size: 4]
	MaterialInstance* FPPMat;//[Offset: 0x8, Size: 4]
	MaterialInstance* TPPMat;//[Offset: 0xc, Size: 4]

--------------------------------
Class: MeshSynDataFlag
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum OperationType;//[Offset: 0x18, Size: 1]
	int SyncID;//[Offset: 0x1c, Size: 4]
	SyncAdditionDataArray SynAdditionalData;//[Offset: 0x20, Size: 12]

--------------------------------
Class: VehicleMeshCfg
	SkeletalMesh* FPPMesh;//[Offset: 0x0, Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0x28, Size: 40]
	SkeletalMesh* LobbyMesh;//[Offset: 0x50, Size: 40]
	MaterialAssetSet[] LobbyMeshMat;//[Offset: 0x78, Size: 12]
	MaterialAssetSet[] MaterialList;//[Offset: 0x84, Size: 12]
	class AnimInstance* animBPClass;//[Offset: 0x90, Size: 40]
	StaticMesh* BrokenStaticMesh;//[Offset: 0xb8, Size: 40]
	SkeletalMesh* BrokenSkeletalMesh;//[Offset: 0xe0, Size: 40]
	MaterialAssetSet[] BrokenMeshMaterialList;//[Offset: 0x108, Size: 12]
	MaterialInstanceSet[] BrokenMatList;//[Offset: 0x114, Size: 12]
	VehilePawnAnimList[] VehicleSeatsAnimOverride;//[Offset: 0x120, Size: 12]
	WheelSetup[] WheelSetups;//[Offset: 0x12c, Size: 12]
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x138, Size: 12]
	VehicleTransmissionData GearSetup;//[Offset: 0x144, Size: 40]
	Vector CenterOfMassOffset;//[Offset: 0x16c, Size: 12]
	enum AdvancedConditionType;//[Offset: 0x178, Size: 1]
	FName AdvancedSlotName;//[Offset: 0x180, Size: 8]
	MaterialInterface* AdvancedMaterial;//[Offset: 0x188, Size: 40]

--------------------------------
Class: MaterialAssetSet
	MaterialInterface* Material;//[Offset: 0x0, Size: 40]
	FName MatSlot;//[Offset: 0x28, Size: 8]

--------------------------------
Class: MaterialInstanceSet
	MaterialInstance* MaterialInstance;//[Offset: 0x0, Size: 4]
	FName MatSlot;//[Offset: 0x8, Size: 8]

--------------------------------
Class: VehilePawnAnimList
	FString VehicleSeat;//[Offset: 0x0, Size: 12]
	VehilePawnAnimData[] AnimDataList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: VehilePawnAnimData
	byte VehAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8, Size: 40]

--------------------------------
Class: RenderWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	void OnWidgetDestroyed();// 0x46f6b154
	void OnWidgetCreated();// 0x46f6b154
	void OnSwitchWidgetVisibility(bool IsVisible);// 0x46f6b154
	void OnRefreshSeasonId(int SeasonId);// 0x46f6b154
	void OnRefreshRtImageResource(Object* NewResource);// 0x46f6b154
	void OnRefreshCountDownValue(int CountDownValue, int TotalCountDownValue);// 0x46f6b154
	void OnRefreshCharmPlayerInfo(out const PlayerDetailInfo PlayerInfo);// 0x46f6b154

--------------------------------
Class: DisplayAvatarDetail
	int ActorIndex;//[Offset: 0x0, Size: 4]
	int[] WearList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DynamicVibrateSystemManager.Object
	FString ClassPath;//[Offset: 0x1c, Size: 12]
	FString VibrateAssetTablePath;//[Offset: 0x28, Size: 12]
	int MaxAmplitude;//[Offset: 0x34, Size: 4]
	int GroundSpesificMatVibrationMinGrear;//[Offset: 0x38, Size: 4]
	float VehicleBreakingMinSpeedThreshold;//[Offset: 0x3c, Size: 4]
	float VehicleGearMinSpeedThreshold;//[Offset: 0x40, Size: 4]
	int[] TriggerVehicleVibrateGroundPhysicMatList;//[Offset: 0x44, Size: 12]
	float TriggerVehicleVibrateMinSlip;//[Offset: 0x50, Size: 4]
	float TriggerVehicleVibrateMinSuspensionRaisePercent;//[Offset: 0x54, Size: 4]
	float VehicleRaiseSuspensionVibrateInerval;//[Offset: 0x58, Size: 4]
	int InitAssetProccessNumFrames;//[Offset: 0x5c, Size: 4]
	<int,enum> LoadedVibrateAssetIDAndEventTypeMap;//[Offset: 0x9c, Size: 60]
	<enum,float> VibrateStrengthLevelModifireMap;//[Offset: 0xd8, Size: 60]
	<enum,float> VibrateEventMinIntervalMap;//[Offset: 0x114, Size: 60]
	enum[] CharacterVibrateEventList;//[Offset: 0x150, Size: 12]
	enum[] WeaponVibrateEventList;//[Offset: 0x15c, Size: 12]
	enum[] VehicleVibrateEventList;//[Offset: 0x168, Size: 12]
	enum[] SoundUIVibrateEventList;//[Offset: 0x174, Size: 12]
	enum[] CharacterBeHitVibrateEventList;//[Offset: 0x180, Size: 12]
	enum[] VehicleEngineVibrateEventList;//[Offset: 0x18c, Size: 12]
	enum[] VehicleBeHitVibrateEventList;//[Offset: 0x198, Size: 12]
	int CharacterVibrationLevel;//[Offset: 0x1a4, Size: 4]
	int WeaponVibrationLevel;//[Offset: 0x1a8, Size: 4]
	int VehicleVibrationLevel;//[Offset: 0x1ac, Size: 4]
	int SoundUIVibrationLevel;//[Offset: 0x1b0, Size: 4]
	int EntireVibrationLevel;//[Offset: 0x1b4, Size: 4]
	bool bCharacterVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool bWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	bool bVehicleVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba, Size: 1]
	bool bSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb, Size: 1]
	bool bCharacterBeHitVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	bool bCharacterClimbVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd, Size: 1]
	bool bCharacterFallVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1be, Size: 1]
	bool bCharacterSwimVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bf, Size: 1]
	bool bAutoWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	bool bSemiAutoWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	bool bBoltWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2, Size: 1]
	bool bOtherWeaponVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c3, Size: 1]
	bool bVehicleEngineVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	bool bVehicleBeHitVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c5, Size: 1]
	bool bVehicleCrashVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c6, Size: 1]
	bool bFootstepSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c7, Size: 1]
	bool bFireShotSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	bool bGlassBrokenSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9, Size: 1]
	bool bVehicleSoundUIVibrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca, Size: 1]
	TimerHandle StopVibrateHandle;//[Offset: 0x1d0, Size: 8]
	int CurPlayingVibrateAssetIndex;//[Offset: 0x1d8, Size: 4]
	int CurLoopPlayingVibrateAssetIndex;//[Offset: 0x1dc, Size: 4]
	int DeviceSupportVibrateType;//[Offset: 0x1e0, Size: 4]
	bool bHasEndplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	bool bIsHandBreaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 1]
	bool bHasLastVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	int LastVehicleGear;//[Offset: 0x228, Size: 4]
	bool bIsLastVehicleBreaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	bool bIsLastVehicleSlipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	int LastVehicleGroundContactMaterialSurfaceType;//[Offset: 0x230, Size: 4]
	<int,bool> LastVehicleGearVibrateCache;//[Offset: 0x234, Size: 60]
	<enum,float> LastVibrateEventTimeMap;//[Offset: 0x270, Size: 60]
	float CurVehicleRaiseSuspensionVibrateCD;//[Offset: 0x2ac, Size: 4]
	VibrateEntity[] CacheVibrateEntityList;//[Offset: 0x314, Size: 12]
	void StopVibrate();// 0x2449f08
	void PostVibrateTriggerActionDirectly(int SpesifyID, int Amplitude);// 0x2449e44
	void PostVibrateTriggerAction(out const VibrateTriggerAction Action, bool bCheckGate, bool bCheckInterval, int SpesifyID);// 0x2449c5c
	void PlayVibrateEntity(out const VibrateEntity entity);// 0x2449b88
	void ModifyVehicleVibrationLevel(int Val);// 0x2449b08
	void ModifyVehicleEngineVibrationSetting(bool Val);// 0x2449a80
	void ModifyEntireVibrationLevel(int Val);// 0x2449a08
	void LoadUserSettingData(int inCharacterVibrationLevel, int inWeaponVibrationLevel, int inVehicleVibrationLevel, int inSoundUIVibrationLevel, bool binCharacterBeHitVibrate, bool binCharacterClimbVibrate, bool binCharacterFallVibrate, bool binCharacterSwimVibrate, bool binVehicleEngineVibrate, bool binVehicleBeHitVibrate, bool binVehicleCrashVibrate, bool binFootstepSoundUIVibrate, bool binFireShotSoundUIVibrate, bool binGlassBrokenSoundUIVibrate, bool binVehicleSoundUIVibrate, int inEntireVibrationLevel, bool binAutoWeaponVibrate, bool binSemiAutoWeaponVibrate, bool binBoltWeaponVibrate, bool binOtherWeaponVibrate);// 0x2449360
	void InvalidateVibrateEntityByEventType(enum EventType);// 0x24492e8
	void InitUserSetting();// 0x2422910
	void InitSystem();// 0x23ab320
	void HandleApplicationWillTerminate();// 0x2374dd8
	void HandleApplicationWillEnterBackground();// 0x2374c8c
	void HandleApplicationWillDeactivate();// 0x24492cc
	void HandleApplicationHasReactivated();// 0x2374dbc
	void HandleApplicationHasEnteredForeground();// 0x24492b0
	static DynamicVibrateSystemManager* GetInstance(const Object* WorldContext, bool bAutoCreate);// 0x24491ec
	int GetAmplitudeByAlpha(float Alpha);// 0x2449164
	void ClearAllVibration();// 0x2374d20
	static void CheckAndCopyFilesToSavedDir(DynamicVibrateSystemManager* Mgr);// 0x24490f4

--------------------------------
Class: VibrateEntity
	int AssetID;//[Offset: 0x0, Size: 4]
	FString AssetAbsPath;//[Offset: 0x4, Size: 12]
	int PlayAmplitude;//[Offset: 0x10, Size: 4]
	FString PlayKeyParam;//[Offset: 0x14, Size: 12]
	int PlayPriority;//[Offset: 0x20, Size: 4]
	float PlayDuration;//[Offset: 0x24, Size: 4]
	bool bIsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	float PushTime;//[Offset: 0x2c, Size: 4]
	enum EventType;//[Offset: 0x30, Size: 1]

--------------------------------
Class: VibrateTriggerAction
	int VibrateAmplitude;//[Offset: 0x0, Size: 4]
	VibrateTriggerMainItem TriggerMainItem;//[Offset: 0x4, Size: 16]
	VibrateTriggerSubItem[] TriggerSubItemList;//[Offset: 0x14, Size: 12]
	enum TriggerEventType;//[Offset: 0x20, Size: 1]
	enum TriggerActionType;//[Offset: 0x21, Size: 1]

--------------------------------
Class: VibrateTriggerMainItem
	enum MainItemType;//[Offset: 0x0, Size: 1]
	FString Data;//[Offset: 0x4, Size: 12]

--------------------------------
Class: VibrateTriggerSubItem
	enum SubItemTyp;//[Offset: 0x0, Size: 1]
	FString Data;//[Offset: 0x4, Size: 12]

--------------------------------
Class: TslSimpleCollisionManager.Actor.Object
	SimpleSpherePersistentChecker[] PersistentExplosiveItemFields;//[Offset: 0x2fc, Size: 12]
	float DamageFieldUpdatePeriod;//[Offset: 0x360, Size: 4]
	float DamageFieldPassedTime;//[Offset: 0x364, Size: 4]
	void RegisterPersistentReceiver(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, int ID);// 0x27537bc
	void RegisterBoundingSphere(out const Vector Origin, float Radius, TslSimpleCollisionReceiver* OwnerTracer);// 0x27536a0
	void AddRandomPersistentCapsules(int Num, float RngRadius);// 0x238dad8
	int AddCheckerToBoundingSphere(out const SimpleCollisionCapsule Collision, TslSimpleCollisionReceiver* OwnerTracer, TslSimpleCollisionReceiver* receiver, bool RebuildSphere);// 0x2753508

--------------------------------
Class: SimpleSpherePersistentChecker
	PrimitiveComponent* TargetComponent;//[Offset: 0x0, Size: 4]
	SimpleCollisionSphere Sphere;//[Offset: 0x4, Size: 16]
	float PassedTime;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SimpleCollisionSphere
	Vector Origin;//[Offset: 0x0, Size: 12]
	float Radius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SimpleCollisionCapsule
	Vector Start;//[Offset: 0x0, Size: 12]
	Vector End;//[Offset: 0xc, Size: 12]
	float Radius;//[Offset: 0x18, Size: 4]

--------------------------------
Class: TslSimpleCollisionReceiver.SceneComponent.ActorComponent.Object

--------------------------------
Class: DestructibleSurfaceManager.Info.Actor.Object

--------------------------------
Class: ObjectPosReplayNetGUIDMap
	uint32 InstanceID;//[Offset: 0x0, Size: 4]
	uint32 ActorNetGUID;//[Offset: 0x4, Size: 4]
	uint32 ActorDemoNetGUID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ObjectPosUIData
	bool IsClientUseActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsVisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	uint32 ActorNetGUID;//[Offset: 0x4, Size: 4]
	uint32 ActorDemoNetGUID;//[Offset: 0x8, Size: 4]
	int InstanceID;//[Offset: 0xc, Size: 4]
	int TeamID;//[Offset: 0x10, Size: 4]
	int TemplateID;//[Offset: 0x14, Size: 4]
	int ExParam;//[Offset: 0x18, Size: 4]
	Vector TargetPos;//[Offset: 0x1c, Size: 12]
	Actor* TargetActor;//[Offset: 0x28, Size: 8]

--------------------------------
Class: WeaponModuleManager.Object
	FString MgrClassPath;//[Offset: 0x1c, Size: 12]
	FString WeaponMuduleConfigTablePath;//[Offset: 0x28, Size: 12]
	FString WeaponAttrConfigTablePath;//[Offset: 0x34, Size: 12]
	GameModeWeaponModuleSchemeConfig[] GameModeWeaponModuleSchemeConfigList;//[Offset: 0x40, Size: 12]
	UAEDataTable* WeaponMuduleConfigTable;//[Offset: 0x4c, Size: 4]
	UAEDataTable* WeaponAttrConfigTable;//[Offset: 0x50, Size: 4]
	<int,ShootWeaponModifierConfig> ShootWeaponADSTimeConfig;//[Offset: 0x90, Size: 60]
	<int,ShootWeaponModifierConfig> ShootWeaponADSFireAnimAlphaRateConfig;//[Offset: 0xcc, Size: 60]
	int ShootWeaponNOTADSFireAnimAlphaRateID;//[Offset: 0x108, Size: 4]
	void SwitchModificationScheme(STExtraBaseCharacter* Player, enum Type);// 0x27cd634
	void RemoveWeaponAllModifies(STExtraWeapon* Weapon, bool OnDestroy);// 0x27cd570
	void InitWeaponModuleSystemOnServer(STExtraWeapon* Weapon);// 0x27cd4f8
	static WeaponModuleManager* Get(Object* Context);// 0x27cd480
	int GenerateAttrModifyItemIDByWeaponModuleAttrItemID(STExtraWeapon* Weapon, int ModuleAttrItemID, int MulVal);// 0x27cd378
	void EnableWeaponModuleModificationSystemOnServerAsWeaponExist(STExtraWeapon* Weapon, bool bEnable);// 0x27cd2b4
	void EnableWeaponModuleModificationSystemOnServer(STExtraWeapon* Weapon, bool bEnable);// 0x27cd1f0
	void DynamicEnablePlayerWeaponModuleSystemOnServer(STExtraBaseCharacter* Player, bool bEnable);// 0x27cd12c
	void CalcShootWeaponFireAnimAlphaRate(STExtraWeapon* ShootWeapon, int ScopeID);// 0x27cd070
	void CalcShootWeaponADSTime(STExtraWeapon* ShootWeapon, int ScopeID);// 0x27ccfb4

--------------------------------
Class: GameModeWeaponModuleSchemeConfig
	FString[] GameModeNameList;//[Offset: 0x0, Size: 12]
	<enum,FString> SchemeTypeAndNameMap;//[Offset: 0xc, Size: 60]
	enum DefaultSchemeType;//[Offset: 0x48, Size: 1]

--------------------------------
Class: ShootWeaponModifierConfig
	int[] Ids;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ReConnectGameStateInfo
	byte AirAttackStatus;//[Offset: 0x0, Size: 1]
	Vector AirAttackArea;//[Offset: 0x4, Size: 12]
	int AirAttackWave;//[Offset: 0x10, Size: 4]
	int PlayerNumOnPlane;//[Offset: 0x14, Size: 4]
	enum AirAttackMode;//[Offset: 0x18, Size: 1]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0, Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1, Size: 1]

--------------------------------
Class: ClientFatalDamageRecordDataSimple
	byte ClientFatalItemType;//[Offset: 0x0, Size: 1]
	uint32 CauserKey;//[Offset: 0x4, Size: 4]
	uint32 VictimKey;//[Offset: 0x8, Size: 4]
	uint32 RealKillerKey;//[Offset: 0xc, Size: 4]
	int DamageType;//[Offset: 0x10, Size: 4]
	int AdditionalParam;//[Offset: 0x14, Size: 4]
	int[] KillFXItemID;//[Offset: 0x18, Size: 12]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bIsVictimMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	int ResultHealthStatus;//[Offset: 0x28, Size: 4]
	byte RecordRelationShip;//[Offset: 0x2c, Size: 1]
	int PreviousHealthStatus;//[Offset: 0x30, Size: 4]
	bool IsKilledByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	int RealKillNum;//[Offset: 0x38, Size: 4]
	int AliveTeamNum;//[Offset: 0x3c, Size: 4]
	int LocalPlayerAssistNum;//[Offset: 0x40, Size: 4]
	byte MaxKillerStatus;//[Offset: 0x44, Size: 1]
	ExcellentOperationRecordData[] ExcellentOperationInfos;//[Offset: 0x48, Size: 12]
	bool AllTeammateDied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool AllTeammateKillBySameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	class DamageType* DamageTypeClass;//[Offset: 0x58, Size: 4]

--------------------------------
Class: CompactAirAttackOrder
	int waveindex;//[Offset: 0x0, Size: 4]
	int bombsCount;//[Offset: 0x4, Size: 4]
	Vector attackCenter;//[Offset: 0x8, Size: 12]
	float attackRadius;//[Offset: 0x14, Size: 4]
	float bombsRadius;//[Offset: 0x18, Size: 4]
	float attackAngleBase;//[Offset: 0x1c, Size: 4]
	float attackAngleRandInterval;//[Offset: 0x20, Size: 4]
	float attackRadiusBase;//[Offset: 0x24, Size: 4]
	float attackRadiusRandInterval;//[Offset: 0x28, Size: 4]
	float[] attackPosZ;//[Offset: 0x2c, Size: 12]
	float attackDuringTime;//[Offset: 0x38, Size: 4]
	float bombsIntervalRand;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: ObserverHostComponent.TimerRegistComponent.GameModeBaseComponent.ActorComponent.Object
	delegate EventCDChangeDelegate;//[Offset: 0x12c, Size: 12]
	delegate OnRepAdditionalDataDelegate;//[Offset: 0x138, Size: 12]
	delegate OnUpdateDynamicEventCDDelegate;//[Offset: 0x144, Size: 12]
	ObserverHostDynamicEventCfg[] DynamicEventCfg;//[Offset: 0x150, Size: 12]
	int[] MultipleTriggerEventIDList;//[Offset: 0x15c, Size: 12]
	ObserverHostDynamicEventCDInfo[] CurDynamicEvents;//[Offset: 0x168, Size: 12]
	ObserverHostEventCDInfo[] EventCDInfo;//[Offset: 0x174, Size: 12]
	ObserverHostAdditionalData[] AdditionalData;//[Offset: 0x180, Size: 12]
	ObserverHostEventCDInfo[] EventCDServerInfo;//[Offset: 0x18c, Size: 12]
	void SetAdditionalData(ObserverHostAdditionalData Data);// 0x254f8a4
	void ServerTriggerEventWithPlayerKey(FName EventName, FString PlayerKey);// 0x254f788
	void ServerTriggerEvent(FName EventName);// 0x254f6d4
	void ServerSetNextCircle(Vector CirclePos);// 0x254f618
	void ServerSelectDynamicEvent(int waveindex, FName EventName);// 0x254f51c
	void OnRepAdditionalDataDelegate__DelegateSignature();// 0x46f6b154
	void OnRep_EventCDInfo();// 0x254f508
	void OnRep_DynamicEventCDInfo();// 0x254f4f4
	void OnRep_AdditionalData();// 0x254f4e0
	void OnMakeCircle(int Index);// 0x254f468
	void OnEventCDChangeDelegate__DelegateSignature();// 0x46f6b154
	ObserverHostEventCDInfo GetEventCDInfo(FString EventName);// 0x254f2e4
	ObserverHostAdditionalData GetAdditionalData(FString Name);// 0x254f16c

--------------------------------
Class: TimerRegistComponent.GameModeBaseComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0xec, Size: 12]
	FString TimerName;//[Offset: 0xf8, Size: 12]
	void StartTimer();// 0x2417c0c
	void OnGameEnterFinish();// 0x2451c0c
	void OnGameEnterFight();// 0x23d0bcc
	void EndTimer();// 0x23d0bb0

--------------------------------
Class: GameModeBaseComponent.ActorComponent.Object
	UAEGameMode* OwnerGameMode;//[Offset: 0xd0, Size: 4]
	World* OwnerWorld;//[Offset: 0xd4, Size: 4]
	bool bHasInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	enum[] AssociatedDatas;//[Offset: 0xdc, Size: 12]
	void Update(float DeltaTime);// 0x2730c60
	void UnInit();// 0x234fef0
	bool IsAssociatedDatasValid();// 0x249eeb4
	void Init();// 0x234fed4
	void FinishCreateAssociatedDatas(enum InSubSystemType);// 0x25c65c4

--------------------------------
Class: RegisterTimer
	int waveindex;//[Offset: 0x0, Size: 4]
	float[] times;//[Offset: 0x4, Size: 12]

--------------------------------
Class: ObserverHostDynamicEventCfg
	int EventType;//[Offset: 0x0, Size: 4]
	float StartTime;//[Offset: 0x4, Size: 4]
	float LastTime;//[Offset: 0x8, Size: 4]
	bool BExcuteImmediately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool BIgnorSelectedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: ObserverHostDynamicEventCDInfo
	int waveindex;//[Offset: 0x0, Size: 4]
	int EventType;//[Offset: 0x4, Size: 4]
	int CD;//[Offset: 0x8, Size: 4]
	FName CurSelect;//[Offset: 0x10, Size: 8]

--------------------------------
Class: ObserverHostEventCDInfo
	FString EventName;//[Offset: 0x0, Size: 12]
	float CD;//[Offset: 0xc, Size: 4]
	float CurCD;//[Offset: 0x10, Size: 4]
	float EndTime;//[Offset: 0x14, Size: 4]
	float CurTime;//[Offset: 0x18, Size: 4]
	int TriggerTimes;//[Offset: 0x1c, Size: 4]
	int MaxTriggerTimes;//[Offset: 0x20, Size: 4]
	int TriggerTimesGroup;//[Offset: 0x24, Size: 4]
	bool IsMultiple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: ObserverHostAdditionalData
	FString Name;//[Offset: 0x0, Size: 12]
	float FloatData;//[Offset: 0xc, Size: 4]
	FString StringData;//[Offset: 0x10, Size: 12]
	int IntData;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: OBTypeUISource.Object
	STExtraGameStateBase* CurGameState;//[Offset: 0x1c, Size: 4]
	int CurrentMaxTeamID;//[Offset: 0x2c, Size: 4]
	<int,TeamLogoInfoInOB> TeamLogoInfoMap;//[Offset: 0x30, Size: 60]
	bool bBuildForWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	int ShootLineFilterRadius;//[Offset: 0x74, Size: 4]
	float ShootLineUpdateTimeRate;//[Offset: 0x78, Size: 4]
	MapShootLineInfo[] MapShootLines;//[Offset: 0x7c, Size: 12]
	FString[] MapBeHitPlayerNames;//[Offset: 0x88, Size: 12]
	<int,AreaParam> AreaParamCache;//[Offset: 0x98, Size: 60]
	int LastAreaID;//[Offset: 0xd4, Size: 4]
	delegate RefreshMCPlayerListDelegate;//[Offset: 0xd8, Size: 12]
	delegate RefreshTeamDistanceWarningDelegate;//[Offset: 0xe4, Size: 12]
	int[] TeamOrder;//[Offset: 0xf0, Size: 12]
	TeamDistanceWarningInOB[] MapDistanceWarningTeams;//[Offset: 0xfc, Size: 12]
	void UpdateMapShootLine(float InDeltaTime);// 0x2552038
	void UpdateEntireMapTeamLogos();// 0x2552024
	void SetFreeViewUpRate(float Rate);// 0x2551fac
	void SetCurAirDropID(int inDropID);// 0x2551f34
	void SetAvatarCaptureInfo(AvatarCapture* Info);// 0x2551ebc
	void OnSyncOBDataActorReady();// 0x2551ea8
	bool IsInSpecifiedArea(Vector PlayerLocation, FString outAreaAnchorsStr, FString InMapName, FString InTargetName, int BattleTextID, int AreaID);// 0x2551b64
	bool IsEnableSignalBar();// 0x2551b3c
	bool IsCurrentSpectatorFreeView();// 0x255137c
	int GetWhiteCircleDistance();// 0x2551b14
	Pawn* GetViewerPawn();// 0x2551aec
	STExtraPlayerController* GetViewerController();// 0x2551ac4
	PlayerInfoInOB[] GetTotalPlayerList_SortedByTeamID();// 0x2551a74
	PlayerInfoInOB[] GetTotalPlayerList();// 0x2551a24
	<int,TeamInfoInOB> GetTeamInfoInOBMap();// 0x2551950
	PlayerInfoInOB[] GetSameTeamPlayerList();// 0x2551900
	<int,RouteSegment> GetRouteSegmentList();// 0x255182c
	PlayerInfoInOB GetPlayerInfoInOBByName(FString InPlayerName);// 0x25516d0
	PlayerInfoInOB[] GetNearPlayerList();// 0x2551680
	BattleItemData[] GetMultiItemFromItemList(int[] ItemSpecifiedID);// 0x2551500
	PlayerInfoInOB GetKillerPlayerInfoInOBByName(FString InPlayerName);// 0x25513a4
	bool GetIsFreeViewCamera();// 0x255137c
	float GetFreeViewUpRate();// 0x2551354
	ObservedData GetCurViewerOBData();// 0x25511a0
	AvatarCapture* GetAvatarCaptureInfo();// 0x2551178
	int GetAliveTeamNum();// 0x2551150
	AirDropBoxInOb[] GetAirDropBoxList();// 0x25510bc
	int FetchSpecifiedAreaIDByCache(Vector PlayerLocation, out int BattleTextID);// 0x2550fd8
	void ChangeViewerTeam(int TeamID);// 0x2550f60
	void ChangeViewerCharacter(FString InPlayerName);// 0x2550e7c
	void ChangeFreeViewCamera();// 0x2550e68

--------------------------------
Class: TeamLogoInfoInOB
	int AlivePlayerCount;//[Offset: 0x0, Size: 4]
	FString LastPlayerUID;//[Offset: 0x4, Size: 12]
	FString LogoPicUrl;//[Offset: 0x10, Size: 12]
	Vector LogoPosWorld3D;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: MapShootLineInfo
	float LineDistance3D;//[Offset: 0x0, Size: 4]
	float LineAngle;//[Offset: 0x4, Size: 4]
	Vector BeginLocation;//[Offset: 0x8, Size: 12]
	Vector EndLocation;//[Offset: 0x14, Size: 12]

--------------------------------
Class: TeamDistanceWarningInOB
	int Distance;//[Offset: 0x0, Size: 4]
	int[] Teams;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RCRBodyBoundingSize
	Vector StandLocatingExtent;//[Offset: 0x0, Size: 12]
	Vector CrouchLocatingExtent;//[Offset: 0xc, Size: 12]
	Vector ProneLocatingExtent;//[Offset: 0x18, Size: 12]
	Vector ProneLocatingMove;//[Offset: 0x24, Size: 12]
	Vector DyingLocatingExtent;//[Offset: 0x30, Size: 12]
	Vector StandExtent;//[Offset: 0x3c, Size: 12]
	float PitchCoefficient;//[Offset: 0x48, Size: 4]
	float CrouchPitchCoefficient;//[Offset: 0x4c, Size: 4]
	Vector CrouchExtentAddition;//[Offset: 0x50, Size: 12]
	Vector ProneExtentAddition;//[Offset: 0x5c, Size: 12]
	Vector DyingExtentAddition;//[Offset: 0x68, Size: 12]
	Vector MeleeWeaponExtentAddition;//[Offset: 0x74, Size: 12]
	float MeleeWeaponAttackingExtentWidth;//[Offset: 0x80, Size: 4]
	float MeleeWeaponAttackingExtentUp;//[Offset: 0x84, Size: 4]
	float GunFrontLengthThreshold;//[Offset: 0x88, Size: 4]
	float GunPlusCoefficient;//[Offset: 0x8c, Size: 4]
	float GunMultipliedCoefficient;//[Offset: 0x90, Size: 4]
	float ProneGunPlusCoefficient;//[Offset: 0x94, Size: 4]
	float PitchGunLengthThreshold;//[Offset: 0x98, Size: 4]
	float BackRightWeaponLengthThreshold;//[Offset: 0x9c, Size: 4]
	float BackLeftWeaponLengthThreshold;//[Offset: 0xa0, Size: 4]
	float BackWeaponLeftLengthAddition;//[Offset: 0xa4, Size: 4]
	float BackWeaponLeftLengthAdditionNoWeapon;//[Offset: 0xa8, Size: 4]
	float BackWeaponRightLengthMultipliedCoefficient;//[Offset: 0xac, Size: 4]
	float BackWeaponRightLengthPlusCoefficient;//[Offset: 0xb0, Size: 4]
	float StandMoveX;//[Offset: 0xb4, Size: 4]
	float CrouchMoveZ;//[Offset: 0xb8, Size: 4]
	float ProneMoveX;//[Offset: 0xbc, Size: 4]
	float ProneMoveZ;//[Offset: 0xc0, Size: 4]
	float DyingMoveX;//[Offset: 0xc4, Size: 4]
	float DyingMoveZ;//[Offset: 0xc8, Size: 4]
	float DyingGunLeftLengthThreshold;//[Offset: 0xcc, Size: 4]
	float DyingGunLeftLengthMultipliedCoefficient;//[Offset: 0xd0, Size: 4]

--------------------------------
Class: UserWidgetStyle.DataAsset.Object
	UserWidgetStyleInfo[] StylesInfo;//[Offset: 0x20, Size: 12]
	bool bShouldHidenJoystick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bShouldHidenCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bUseBLEBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	BLEEnumInfo[] BLEBlackList;//[Offset: 0x30, Size: 12]
	float UnloadDurationTime;//[Offset: 0x3c, Size: 4]
	TimerHandle UnloadTimerHandle;//[Offset: 0x40, Size: 8]

--------------------------------
Class: UserWidgetStyleInfo
	FName ClassName;//[Offset: 0x0, Size: 8]
	class UserWidget* ClassSoftClass;//[Offset: 0x8, Size: 40]
	UserWidgetRefInfo[] RefWidget;//[Offset: 0x30, Size: 12]
	Object*[] RefObject;//[Offset: 0x3c, Size: 12]
	int BuffSize;//[Offset: 0x48, Size: 4]
	WidgetTree* WidgetTree;//[Offset: 0x4c, Size: 4]
	bool bHaveInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool bHaveSaveedOld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	UserWidgetRefInfo[] TrainsRecoverInfo;//[Offset: 0x54, Size: 12]

--------------------------------
Class: UserWidgetRefInfo
	Widget* RefWidget;//[Offset: 0x0, Size: 4]
	FName SimpleName;//[Offset: 0x8, Size: 8]
	bool bAdvanceHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: BLEEnumInfo
	int BLEValue;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PlayerCameraPossessManager.CameraPossessManager.ActorComponent.Object
	CurveVector* LandingHeavyCameraCurve;//[Offset: 0x2cc, Size: 4]
	STExtraPlayerCharacter* PossessedPlayerCache;//[Offset: 0x2d0, Size: 4]
	void HandlePlayerStateLeave(enum LeavedState);// 0x256f2d0
	void HandlePlayerStateInterrupted(int stateID, int InterruptedBy);// 0x256f20c
	void HandlePlayerStateEnter(enum EnteredState);// 0x256f18c
	void HandlePlayerPoseStateChanged(bool IsEnable);// 0x256f10c
	void HandlePlayerPoseChanged(byte LastPose, byte NewPose);// 0x256f050
	void HandlePlayerPeek(bool IsPeeking, bool IsPeekingLeft);// 0x256ef80
	void HandlePlayerNearDeath(bool IsNearDeath);// 0x256ef00
	void HandlePlayerIndoorStateChanged(bool IsIndoor);// 0x256ee80
	void HandlePlayerIndoorLowerStateChanged(bool IsIndoor);// 0x256ee00
	void HandleCharacterDetachedFromVehicle(STExtraVehicleBase* InTargetVehicle);// 0x256ed88
	void HandleCharacterAttachedToVehcicle(STExtraVehicleBase* InTargetVehicle);// 0x256ed10
	void EnterLandingHeavy();// 0x256ecfc

--------------------------------
Class: CameraPossessManager.ActorComponent.Object
	CameraPossessData[] StaticCameraPossessList;//[Offset: 0xd0, Size: 12]
	float RelativeLocationOffsetInterpSpeed;//[Offset: 0xdc, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0xe0, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0xe4, Size: 4]
	float SocketOffsetInterpSpeed;//[Offset: 0xe8, Size: 4]
	float DesiredRotationOffsetInterpSpeed;//[Offset: 0xec, Size: 4]
	float CameraRotOffsetInterpSpeed;//[Offset: 0xf0, Size: 4]
	float FieldOfViewInterpSpeed;//[Offset: 0xf4, Size: 4]
	CameraPossessData[] DynamicCameraPossessList;//[Offset: 0xf8, Size: 12]
	CameraPossessData[] CurrentActiveCameraPossessList;//[Offset: 0x104, Size: 12]
	FName[] CurrentActiveModifyNameList;//[Offset: 0x110, Size: 12]
	CameraModifyData[] CurrentActiveCameraModifyList;//[Offset: 0x11c, Size: 12]
	CameraModifyData CurrentCameraModifyResult;//[Offset: 0x130, Size: 336]
	class PossessedSpringArmComponent* SpringArmClass;//[Offset: 0x280, Size: 4]
	class PossessedCameraComponent* CameraClass;//[Offset: 0x284, Size: 4]
	PossessedSpringArmComponent* ManagedSpringArm;//[Offset: 0x288, Size: 4]
	PossessedCameraComponent* ManagedCamera;//[Offset: 0x28c, Size: 4]
	CameraAnimData[] CameraAnimDataList;//[Offset: 0x290, Size: 12]
	void SetCurrentSpringArmLength(float newSpringLength);// 0x287562c
	bool SetCameraPossessActive(FName InPossessName, bool InIsActive, SceneComponent* InAttachParentComp, bool Force);// 0x28754b8
	void SetCameraModifyEnable(FName InCameraPossessName, FName InCameraModifyName, bool InEnable, bool AutoRecalculateCameraModify);// 0x2875344
	void RemoveDynamicCameraPossess(FName InPossessName);// 0x28752cc
	void RemoveDynamicCameraModify(FName InCameraPossessName, FName InCameraModifyName, bool ApplyImmediately);// 0x28751b0
	void RefreshCameraModify(bool ApplyImmediately);// 0x2875130
	bool PossessCamera_Internal(out CameraPossessData InCameraPossessData, SceneComponent* InAttachParentComp);// 0x2874e88
	void PlayCameraCurveAnim(byte CameraAnimType, CurveVector* CurveVec);// 0x2874dcc
	float GetCurrentSpringArmLength();// 0x2874da4
	SpringArmComponent* GetCurrentSpring();// 0x2874d88
	CameraComponent* GetCurrentCamera();// 0x2874d6c
	FName[] GetCurrentActiveModifyNameList();// 0x2874ca0
	FName GetCurrentActiveCameraPossessName();// 0x2874c4c
	CameraPossessData[] GetCurrentActiveCameraPossessList();// 0x2874b38
	CameraPossessData GetCurrentActiveCameraPossessData();// 0x2874af0
	CameraPossessData GetCameraPossessDataByName(out const FName InPossessName);// 0x28749c8
	bool FindCameraPossess(FName InCameraPossessName, out CameraPossessData OutCameraPossessData);// 0x28746f8
	bool FindCameraModify(out const CameraPossessData InPossessData, FName InCameraModifyName, out CameraModifyData OutCameraModifyData);// 0x2874230
	bool AddDynamicCameraPossess(out CameraPossessData InCameraPossessData, bool IsAutoPossess);// 0x2873f78
	void AddDynamicCameraModify(FName InCameraPossessName, out const CameraModifyData InModifyData, bool IsAutoActive, bool ApplyImmediately);// 0x2873c1c

--------------------------------
Class: CameraPossessData
	FName PossessName;//[Offset: 0x0, Size: 8]
	FName[] OverridePossessNameList;//[Offset: 0x8, Size: 12]
	CameraModifyData DefaultCameraData;//[Offset: 0x20, Size: 336]
	CameraModifyData[] StaticCameraModifyDataList;//[Offset: 0x170, Size: 12]
	CameraModifyData[] DynamicCameraModifyDataList;//[Offset: 0x17c, Size: 12]
	bool bDestroyStaticCameraComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	SceneComponent*[] StaticCameraAndSpringArm;//[Offset: 0x18c, Size: 12]

--------------------------------
Class: PossessedSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool bShouldTraceArmOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8, Size: 1]
	float SpringArmRestoreInterpSpeed;//[Offset: 0x2fc, Size: 4]
	CameraPossessManager* OwnerManager;//[Offset: 0x300, Size: 4]

--------------------------------
Class: PossessedCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraPossessManager* OwnerManager;//[Offset: 0x7e0, Size: 4]

--------------------------------
Class: CameraAnimData
	CurveVector* AnimCurve;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ScreenAppearanceActor.Actor.Object
	bool EnableScreenAppearance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	ScreenAppearanceProvider*[] DefaultScreenAppearanceProviders;//[Offset: 0x2e8, Size: 12]
	<Actor*,ScreenAppearanceProviders> SavedPlayerScreenAppearances;//[Offset: 0x2f4, Size: 60]
	ScreenAppearanceProviders PersistentScreenAppearances;//[Offset: 0x330, Size: 12]
	Transform RelativeTransform;//[Offset: 0x340, Size: 48]
	float FOV;//[Offset: 0x370, Size: 4]
	ScreenAppearanceVolume*[] ScreenAppearanceVolumesInThisWorld;//[Offset: 0x38c, Size: 12]
	void StopScreenAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x25bbd00
	void StopScreenAppearance(ScreenAppearanceProvider* Provider);// 0x25bbc88
	void StopAllScreenAppearances(const Actor* AppearanceOwner);// 0x25bbc10
	void SetScalarParameter(out const FName ParameterName, float ParameterValue);// 0x25bbb3c
	void SetFloatParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, float NewValue);// 0x25bba0c
	void SetColorParameterOnScreenAppearance(out const FName AppearanceName, out const FName ParamName, out const LinearColor NewValue);// 0x25bb8d0
	void SetColorParameter(out const FName ParameterName, out const LinearColor ParameterValue);// 0x25bb7f0
	ScreenAppearanceProvider* PlayDefaultScreenAppearance(const Actor* AppearanceOwner, FName AppearanceName, const Actor* causer);// 0x25bb6e8
	bool IsScreenAppearancePlaying(const Actor* AppearanceOwner, FName AppearanceName);// 0x25bb624
	bool HasActiveAppearance();// 0x25bb5fc
	ScreenAppearanceProvider* FindDefaultScreenAppearanceProvider(out const FName Name);// 0x25bb568
	ScreenAppearanceProvider* FindAppearanceByName(const Actor* AppearanceOwner, FName AppearanceName);// 0x25bb4a4

--------------------------------
Class: ScreenAppearanceProvider.Object
	FName AppearanceName;//[Offset: 0x20, Size: 8]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bTickEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	float TickInterval;//[Offset: 0x2c, Size: 4]
	AppearanceParameter[] MaterialParameterCurve;//[Offset: 0x30, Size: 12]
	float LifeSpan;//[Offset: 0x3c, Size: 4]
	Transform RelativeTransform;//[Offset: 0x40, Size: 48]
	ScreenAppearanceScalarParameter[] AppearanceScalarParamters;//[Offset: 0x70, Size: 12]
	ScreenAppearanceColorParameter[] AppearanceColorParameters;//[Offset: 0x7c, Size: 12]
	ScreenAppearanceActor* OwnerAppearance;//[Offset: 0xa0, Size: 4]
	Actor* OwnerActor;//[Offset: 0xa4, Size: 4]
	FName[] HighPriorityProviderNames;//[Offset: 0xa8, Size: 12]
	void SetVectorParameter(out const FName ParameterName, out const Vector Param);// 0x25bcc00
	void SetLifeSpan(float NewLifeSpan);// 0x25bcb8c
	void SetFloatParameter(out const FName ParameterName, float Param);// 0x25bcab8
	void SetColorParameter(out const FName ParameterName, out const LinearColor Param);// 0x25bc9d8
	void SetAsset(Object* Asset);// 0x25bc958
	void ReceiveTick(float DeltaTime);// 0x46f6b154
	void ReceiveEndPlay();// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	MaterialInterface* GetMaterial();// 0x25bc928

--------------------------------
Class: AppearanceParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	CurveBase* ControlCurve;//[Offset: 0x8, Size: 40]

--------------------------------
Class: ScreenAppearanceScalarParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	float ParameterValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ScreenAppearanceColorParameter
	FName ParameterName;//[Offset: 0x0, Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8, Size: 16]

--------------------------------
Class: ScreenAppearanceProviders
	ScreenAppearanceProvider*[] ScreenAppearances;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ScreenAppearanceVolume.Volume.Brush.Actor.Object
	ScreenAppearanceProvider*[] EnabledScreenAppearances;//[Offset: 0x30c, Size: 12]
	FName[] EnabledScreenAppearanceNames;//[Offset: 0x318, Size: 12]
	FName[] DisabledScreenAppearanceNames;//[Offset: 0x324, Size: 12]

--------------------------------
Class: BountyBuyingInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int BuyingCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BountyBuyingResultInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int FinalBuyingCount;//[Offset: 0x4, Size: 4]
	enum BuyingResult;//[Offset: 0x8, Size: 1]
	int BountyBeforeBuying;//[Offset: 0xc, Size: 4]
	int BountyAfterBuying;//[Offset: 0x10, Size: 4]

--------------------------------
Class: PlayerDecalData
	int DecalId;//[Offset: 0x0, Size: 4]
	Transform DecalTransform;//[Offset: 0x10, Size: 48]
	int DecalInstanceId;//[Offset: 0x40, Size: 4]
	IdeaDecalInfo[] DecalInfos;//[Offset: 0x44, Size: 12]

--------------------------------
Class: StopFireInfo
	uint32 CurClipID;//[Offset: 0x0, Size: 4]
	int CurrentBullet;//[Offset: 0x4, Size: 4]

--------------------------------
Class: StartFireInfo
	uint32 CurShootID;//[Offset: 0x0, Size: 4]
	uint32 CurClipID;//[Offset: 0x4, Size: 4]
	int CurBulletNumInClip;//[Offset: 0x8, Size: 4]
	byte ShootMode;//[Offset: 0xc, Size: 1]
	float StartFireTime;//[Offset: 0x10, Size: 4]
	double StartFireSysTime;//[Offset: 0x18, Size: 8]
	byte shootType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: WatchGamePlayerInfoButtonClick
	uint64 WatchPlayer_UID;//[Offset: 0x0, Size: 8]
	uint64 WatchedPlayer_UID;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x2e4, Size: 4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x2e8, Size: 4]
	ParticleSystem* EffectOverride;//[Offset: 0x2ec, Size: 4]
	float NearToFarDistance;//[Offset: 0x2f0, Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x2f4, Size: 4]
	AkAudioEvent* ExplosionSoundOverride;//[Offset: 0x2f8, Size: 4]
	float PlayEffectDelayTime;//[Offset: 0x2fc, Size: 4]
	HitResult SurfaceHit;//[Offset: 0x300, Size: 136]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	float VoiceCheckDistance;//[Offset: 0x38c, Size: 4]
	float VoiceCheckLifeTime;//[Offset: 0x390, Size: 4]
	void SetExplosionSoundOverride(AkAudioEvent* InAudioEvent);// 0x258b56c
	void SetExplosionFXOverride(ParticleSystem* InTemplate);// 0x2667864

--------------------------------
Class: SacStructSplit

--------------------------------
Class: SacStructNew

--------------------------------
Class: SACData
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x0, Size: 12]
	LocalShootHitData[] ShootHitDataArray;//[Offset: 0xc, Size: 12]
	ShootTimeData[] ShootTimeDatas;//[Offset: 0x18, Size: 12]
	int ShootTimes;//[Offset: 0x24, Size: 4]
	byte[] TssSdkAntiData;//[Offset: 0x28, Size: 12]
	int TssSdkAntiDataLen;//[Offset: 0x34, Size: 4]
	byte RetCode;//[Offset: 0x38, Size: 1]
	int NetworkStatus;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: LocalShootHitData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	Vector_NetQuantize ShootingDeviation;//[Offset: 0x4, Size: 12]
	Vector_NetQuantize BulletsBornPosition;//[Offset: 0x10, Size: 12]
	int BulletFlyDistance;//[Offset: 0x1c, Size: 4]
	int BulletDown;//[Offset: 0x20, Size: 4]
	int8 CurBullet;//[Offset: 0x24, Size: 1]
	int ShootInterval;//[Offset: 0x28, Size: 4]
	int BulletFlyTime;//[Offset: 0x2c, Size: 4]
	int BulletShootTime;//[Offset: 0x30, Size: 4]
	int BulletHitTime;//[Offset: 0x34, Size: 4]
	int AimFov;//[Offset: 0x38, Size: 4]
	byte bulletDamageReduceRatio;//[Offset: 0x3c, Size: 1]
	Vector_NetQuantize ShootingRecoil;//[Offset: 0x40, Size: 12]
	BulletID BulletID;//[Offset: 0x4c, Size: 2]
	int64 ClientStartTime;//[Offset: 0x50, Size: 8]
	int[] MrpcsFlow;//[Offset: 0x58, Size: 12]
	int AutoAimSpeed;//[Offset: 0x64, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x68, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x6c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x70, Size: 4]

--------------------------------
Class: ShootTimeData
	Vector ShootPos;//[Offset: 0x0, Size: 12]
	Vector GunPos;//[Offset: 0xc, Size: 12]
	Vector_NetQuantizeNormalSv MuzzleDir;//[Offset: 0x18, Size: 12]
	uint32 ShootID;//[Offset: 0x24, Size: 4]
	uint64 CurrentStates;//[Offset: 0x28, Size: 8]
	byte CapsuleHalfHeight;//[Offset: 0x30, Size: 1]
	byte SkeletonLength;//[Offset: 0x31, Size: 1]
	BInfo FBInfos;//[Offset: 0x34, Size: 16]
	ShootTimeInfo_NetQuantize ShootInfo;//[Offset: 0x50, Size: 112]
	double ShootSystemTime;//[Offset: 0xc0, Size: 8]
	float ShootLevelTime;//[Offset: 0xc8, Size: 4]
	bool bFakeTraceBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	Vector GunTailPos;//[Offset: 0xd0, Size: 12]

--------------------------------
Class: Vector_NetQuantizeNormalSv.Vector

--------------------------------
Class: BInfo

--------------------------------
Class: ShootTimeInfo_NetQuantize

--------------------------------
Class: STExtraFireBalloon.Actor.Object
	BoxComponent* RootCollision;//[Offset: 0x2e8, Size: 4]
	BoxComponent* AreaBox;//[Offset: 0x2ec, Size: 4]
	StaticMeshComponent* BalloonMesh;//[Offset: 0x2f0, Size: 4]
	FireBalloonMovementComponent* Movement;//[Offset: 0x2f4, Size: 4]
	int MapMarkTypeID;//[Offset: 0x2f8, Size: 4]
	enum MapMarkFlag;//[Offset: 0x2fc, Size: 1]
	bool bIsMapMarkRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fd, Size: 1]
	Pawn* Driver;//[Offset: 0x304, Size: 4]
	float MoveUpValue;//[Offset: 0x308, Size: 4]
	byte MovementSmoothMode;//[Offset: 0x340, Size: 1]
	float MovementSmoothAlpha;//[Offset: 0x344, Size: 4]
	float MoveUpScale;//[Offset: 0x348, Size: 4]
	bool bAutoFallOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 1]
	float AutoFallOffSpeed;//[Offset: 0x350, Size: 4]
	enum MoveState;//[Offset: 0x358, Size: 1]
	Vector ControlInputVector;//[Offset: 0x35c, Size: 12]
	Vector LastControlInputVector;//[Offset: 0x368, Size: 12]
	float TickInterval;//[Offset: 0x374, Size: 4]
	Vector InitialLocation;//[Offset: 0x378, Size: 12]
	float CheckOverlapInterval;//[Offset: 0x388, Size: 4]
	void SetParachuteServerAuthorized(Pawn* InPawn);// 0x2668c00
	void SetMoveUpValue(float InMoveUpValue);// 0x2668b88
	void SetDriver(Pawn* InPawn);// 0x24192d0
	void OnTriggerLeave(Actor* OverlapActor);// 0x241d0b0
	void OnTriggerEnter(Actor* OverlapActor);// 0x2368f74
	void OnRep_MoveUpValue();// 0x23c70dc
	void OnRep_Driver(Pawn* PrevDriver);// 0x2368ff4
	Pawn* GetDriver();// 0x2668b6c
	bool CanBeDriver(Pawn* InPawn);// 0x24f9fa4
	bool BlueprintIsNetRelevantFor(const Actor* RealViewer, const Actor* ViewTarget, out const Vector SrcLocation);// 0x46f6b154

--------------------------------
Class: FireBalloonMovementComponent.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	enum MaxFlyHeightType;//[Offset: 0x14d, Size: 1]
	float MaxFlyHeight;//[Offset: 0x150, Size: 4]
	float InitialMaxTarceDist;//[Offset: 0x154, Size: 4]
	Vector InitialLocation;//[Offset: 0x158, Size: 12]
	delegate OnFireBalloonImpactDelegate;//[Offset: 0x164, Size: 12]
	Actor* ActorOwner;//[Offset: 0x170, Size: 4]
	void SetSkipUpdate(bool bNewValue);// 0x26686dc
	void ReceiveOnImpact(out const HitResult Hit, float TimeSlice, out const Vector MoveDelta);// 0x46f6b154
	void OnFireBalloonImpactDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x46f6b154
	float GetMaxFlyHeight();// 0x26686b4

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x138, Size: 4]
	float Acceleration;//[Offset: 0x13c, Size: 4]
	float Deceleration;//[Offset: 0x140, Size: 4]
	float TurningBoost;//[Offset: 0x144, Size: 4]
	float FloatingMoveSpeedScale;//[Offset: 0x148, Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]

--------------------------------
Class: ConcertPlayerActor.Actor.Object
	ConcertPlayerComponent* ConcertPlayerComponent;//[Offset: 0x2e4, Size: 4]
	bool bSetupObStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	TimerHandle timehandle;//[Offset: 0x2f0, Size: 8]
	void StopSequence(bool NetPlayAgain);// 0x242636c
	void SequenceEventName(FName InEventType, int InParamValue, FString InParamStr);// 0x24261ec
	void SequenceEvent(enum InActivity, enum InEventType, int InParamValue, FString InParamStr);// 0x242602c
	void SendSync(STExtraPlayerController* InRequestPlayer);// 0x2425fb4
	void RequestSync();// 0x2425fa0
	void ReceiveSequenceEventType(int InEventType, int InParamValue, FString InParamStr, float InEventTime);// 0x2425de4
	void ReceiveSequenceEventName(FName InEventType, int InParamValue, FString InParamStr);// 0x2425c64
	void ReceiveSequenceEvent(enum InActivity, enum InEventType, int InParamValue, FString InParamStr);// 0x2425aa4
	void PlaySequence(int InIndex);// 0x2425a2c
	void OnReconnected();// 0x2425a18
	void OnDelayRequest();// 0x2425a04
	void OnApplicationactivated(bool IsActive);// 0x2425984
	void JumpToPos(float InPos);// 0x242590c
	void ClientRequestSync(ConcertSendSyncData InSyncData);// 0x24255f0
	void BindApplicationactivated();// 0x24255dc

--------------------------------
Class: ConcertPlayerComponent.ActorComponent.Object
	bool SequenceIsClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool SequenceLoadedNeedSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	bool PlayNextIfFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2, Size: 1]
	ConcertLevelSoftConfig[] LevelConfigList;//[Offset: 0xd4, Size: 12]
	ConcertLevelHardConfig CurrentLevelConfig;//[Offset: 0xe0, Size: 36]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x104, Size: 4]
	delegate OnReceiveConcertEventBegin;//[Offset: 0x108, Size: 12]
	delegate OnReceiveConcertEventEnd;//[Offset: 0x114, Size: 12]
	delegate OnSequencePlayOrStopEvent;//[Offset: 0x120, Size: 12]
	delegate OnSequencePlayEnd;//[Offset: 0x12c, Size: 12]
	delegate OnSequenceRequestSync;//[Offset: 0x138, Size: 12]
	delegate OnSequenceSyncEnd;//[Offset: 0x144, Size: 12]
	Actor*[] ActivityList;//[Offset: 0x150, Size: 12]
	LevelSequenceActor* SequenceActor;//[Offset: 0x15c, Size: 4]
	TimerHandle DelayStartHandle;//[Offset: 0x160, Size: 8]
	STExtraGameStateBase* GameState;//[Offset: 0x170, Size: 4]
	enum[] NeedMemoryEventList;//[Offset: 0x174, Size: 12]
	ConcertSequenceEventData[] TriggerEventList;//[Offset: 0x180, Size: 12]
	ConcertSyncData LastConcertSyncData;//[Offset: 0x18c, Size: 36]
	FName[] NeedMemoryEventNameList;//[Offset: 0x1b0, Size: 12]
	int[] NeedMemoryEventTypeList;//[Offset: 0x1bc, Size: 12]
	void UnRegisterActivity(Actor* InActivity);// 0x24278c8
	void StopConcert(bool NetPlayAgain);// 0x2427848
	void StartConcert();// 0x2427834
	void SetupConcert(int Index);// 0x24277bc
	void SetActivityEnable(bool InEnable);// 0x242773c
	void RegisterActivity(Actor* InActivity);// 0x24276c4
	void ReceiveConcertEvent(bool IsSyncData, out const ConcertSequenceEventData InParamData);// 0x242759c
	void OnSequenceStop();// 0x2427588
	void OnSequenceObjectSpawned(Object* InObject, out const Guid InBindingID, MovieSceneSequenceID InSequenceID);// 0x2427470
	void OnSequenceFinish();// 0x242745c
	void OnLoadSequenceDone(int Index, SoftObjectPath AssetRef);// 0x242731c
	void OnDelayStart();// 0x2427308
	void OnDelayLoopSetup();// 0x24272f4
	void JumpToPos(float InPos);// 0x242727c
	bool InitConcertConfig(int Index);// 0x24271fc
	float GetTriggerIntEventDuraction(int EventType, FString InParam, bool UseEventTime);// 0x2427078
	float GetTriggerEventNameDuraction(FName EventTypeName, FString InParam);// 0x2426f38
	float GetTriggerEventDuraction(enum EventType);// 0x2426eb8
	Timespan GetTimeSpanFromSecond(float InSecond);// 0x2426e30
	float GetTime(bool isServerTime);// 0x2426da8
	float GetSequenceCurrentTime();// 0x2426d80
	float GetLastTriggerEventTime(enum EventType);// 0x2426d00
	float GetLastTriggerEventNameTime(FName EventTypeName, FString InParam);// 0x2426bc0
	bool GetIsPlaying();// 0x2426b98
	bool GetIsNeedJumpEvent();// 0x2426b7c
	STExtraGameStateBase* GetGameState();// 0x2426b54
	enum GetConcertPlayerState();// 0x2426b38

--------------------------------
Class: ConcertLevelSoftConfig
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int LoopCount;//[Offset: 0x4, Size: 4]
	float DelayStart;//[Offset: 0x8, Size: 4]
	LevelSequence* LevelSequence;//[Offset: 0x10, Size: 40]
	LevelSequence* LevelSequenceDS;//[Offset: 0x38, Size: 40]
	bool bEnableActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bSpawnActorAttachToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool bDestroySpawnActorOnFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	float PlayRate;//[Offset: 0x64, Size: 4]

--------------------------------
Class: ConcertLevelHardConfig
	bool IsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int LoopCount;//[Offset: 0x4, Size: 4]
	float DelayStart;//[Offset: 0x8, Size: 4]
	LevelSequence* LevelSequence;//[Offset: 0xc, Size: 4]
	int CurrentSoftIndex;//[Offset: 0x10, Size: 4]
	int PlayCount;//[Offset: 0x14, Size: 4]
	float StartTime;//[Offset: 0x18, Size: 4]
	bool bEnableActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bSpawnActorAttachToPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bDestroySpawnActorOnFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	float PlayRate;//[Offset: 0x20, Size: 4]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	delegate OnCameraCut;//[Offset: 0x5f4, Size: 12]
	Object*[] AdditionalEventReceivers;//[Offset: 0x62c, Size: 12]
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x404ac48

--------------------------------
Class: MovieSceneSequencePlayer.Object
	delegate OnPlay;//[Offset: 0x2e0, Size: 12]
	delegate OnPlayReverse;//[Offset: 0x2ec, Size: 12]
	delegate OnStop;//[Offset: 0x2f8, Size: 12]
	delegate OnPause;//[Offset: 0x304, Size: 12]
	delegate OnFinished;//[Offset: 0x310, Size: 12]
	delegate OnObjectSpawnedEvent;//[Offset: 0x31c, Size: 12]
	byte Status;//[Offset: 0x328, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x329, Size: 1]
	bool bPendingFirstUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x329, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x32c, Size: 4]
	float TimeCursorPosition;//[Offset: 0x330, Size: 4]
	float StartTime;//[Offset: 0x334, Size: 4]
	float EndTime;//[Offset: 0x338, Size: 4]
	int CurrentNumLoops;//[Offset: 0x33c, Size: 4]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x34c, Size: 32]
	void Stop();// 0x3c6bf50
	void StartPlayingNextTick();// 0x3c6bf3c
	void SetPlayRate(float PlayRate);// 0x3c6bec4
	void SetPlayLoopCount(int NumLoops);// 0x3c6be4c
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x3c6bd90
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x3c6bc50
	void Scrub();// 0x3c6bd7c
	void PlayReverse();// 0x3c6bd68
	void PlayLooping(int NumLoops);// 0x3c6bcf0
	void Play();// 0x3c6bcdc
	void Pause();// 0x3c6bcc8
	void JumpToPositionEx(float NewPlaybackPosition);// 0x3c6bc50
	void JumpToPosition(float NewPlaybackPosition);// 0x3c6bbd8
	bool IsPlaying();// 0x3c6bbb0
	bool IsPaused();// 0x3c6bb88
	void GoToEndAndStop();// 0x3c6bb74
	float GetPlayRate();// 0x3c6bb4c
	float GetPlaybackStart();// 0x3c6bb30
	float GetPlaybackPosition();// 0x3c6bb08
	float GetPlaybackEnd();// 0x3c6baec
	float GetLength();// 0x3c6bac4
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x3c6b9ac
	void ChangePlaybackDirection();// 0x3c6b998

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	int LoopCount;//[Offset: 0x0, Size: 4]
	float PlayRate;//[Offset: 0x4, Size: 4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 4]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	interface class * BindingOverrides;//[Offset: 0x18, Size: 8]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 4]
	enum Space;//[Offset: 0x4, Size: 1]
	Guid Guid;//[Offset: 0x8, Size: 16]

--------------------------------
Class: LevelSequenceActor.Actor.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2ec, Size: 32]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x30c, Size: 4]
	SoftObjectPath LevelSequence;//[Offset: 0x310, Size: 24]
	LevelSequence* TempLevelSequence;//[Offset: 0x328, Size: 4]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x32c, Size: 12]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x338, Size: 4]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x33c, Size: 4]
	bool bReduceFrequency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	int ReduceFrameCount;//[Offset: 0x344, Size: 4]
	float IgnoreFrameTolerance;//[Offset: 0x348, Size: 4]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x350, Size: 4]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x354, Size: 4]
	void SetSequence(LevelSequence* InSequence);// 0x4049b74
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x4049a90
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x4049924
	void ResetBindings();// 0x40498e4
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x40497ec
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x40496ac
	void ReceiveInitailizePlayer();// 0x46f6b154
	LevelSequence* GetSequence(bool bLoad, bool bInitializePlayer);// 0x40495d4
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x404944c

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x20, Size: 24]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x38, Size: 4]

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x20, Size: 12]
	MovieSceneObjectBindingID MakeBindingID(out const Guid InBindingID, MovieSceneSequenceID InSequenceID, enum InSpace);// 0x3c67854
	FString GetGuidStr(out const MovieSceneObjectBindingID BindingID);// 0x3c67740

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingId;//[Offset: 0x0, Size: 24]
	Object* Object;//[Offset: 0x18, Size: 8]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x1dc, Size: 48]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x20c, Size: 4]
	void SetSettings(Object* InSettings);// 0x46f6b154
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x2e6d120

--------------------------------
Class: LevelSequencePlayerSnapshot
	FText MasterName;//[Offset: 0x0, Size: 12]
	float MasterTime;//[Offset: 0xc, Size: 4]
	FText CurrentShotName;//[Offset: 0x10, Size: 12]
	float CurrentShotLocalTime;//[Offset: 0x1c, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0x20, Size: 4]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x24, Size: 8]
	MovieSceneSequenceID ShotID;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	float FrameRate;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ConcertSequenceEventData
	enum ActivityType;//[Offset: 0x0, Size: 1]
	enum EventType;//[Offset: 0x1, Size: 1]
	FName EventTypeName;//[Offset: 0x8, Size: 8]
	int EventIntType;//[Offset: 0x10, Size: 4]
	int DataIndex;//[Offset: 0x14, Size: 4]
	float TriggerTime;//[Offset: 0x18, Size: 4]
	float EventTime;//[Offset: 0x1c, Size: 4]
	FString DataStr;//[Offset: 0x20, Size: 12]

--------------------------------
Class: ConcertSyncData
	ConcertSendSyncData SyncData;//[Offset: 0x8, Size: 28]

--------------------------------
Class: ConcertSendSyncData
	int SyncIndex;//[Offset: 0x0, Size: 4]
	int SequenceIndex;//[Offset: 0x4, Size: 4]
	int PlayCount;//[Offset: 0x8, Size: 4]
	float SequenceTime;//[Offset: 0xc, Size: 4]
	ConcertSequenceEventData[] SequenceData;//[Offset: 0x10, Size: 12]

--------------------------------
Class: Timespan

--------------------------------
Class: CheatCommandInfo
	enum CommandType;//[Offset: 0x0, Size: 1]
	int[] CommandContent_int32Type;//[Offset: 0x4, Size: 12]
	float[] CommandContent_floatType;//[Offset: 0x10, Size: 12]
	FString CommandContent_ExtraType;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: RemoteControlComponent.ActorComponent.Object
	bool bSpawnedFromBackPack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	delegate OnSpawnedFromBackPack;//[Offset: 0xd4, Size: 12]
	STExtraBaseCharacter* Character;//[Offset: 0xe0, Size: 4]
	delegate OnRepCharacterEvent;//[Offset: 0xe4, Size: 12]
	delegate OnRefreshCharacterAnimEvent;//[Offset: 0xf0, Size: 12]
	bool BindRefreshCharacterAnimEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	BattleItemHandleBase* BindingHandle;//[Offset: 0x100, Size: 4]
	delegate HPFuelChangedDelegate;//[Offset: 0x108, Size: 12]
	float DistanceToPlayer;//[Offset: 0x114, Size: 4]
	bool ShutdownNeedDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool CanControlInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	bool bSendClientOkMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a, Size: 1]
	enum RemoteControlState;//[Offset: 0x11b, Size: 1]
	enum LastRemoteControlState;//[Offset: 0x11c, Size: 1]
	enum CharacterAnimState;//[Offset: 0x11d, Size: 1]
	delegate RemoteControlStateChanged;//[Offset: 0x120, Size: 12]
	delegate RemoteControlReconnect;//[Offset: 0x12c, Size: 12]
	delegate OnEnterRemoteControlClient;//[Offset: 0x138, Size: 12]
	delegate OnRemoteControlPause;//[Offset: 0x144, Size: 12]
	delegate OnRemoteControlRecall;//[Offset: 0x150, Size: 12]
	delegate OnRemoteControlReconnect;//[Offset: 0x15c, Size: 12]
	enum CurRemoteControlType;//[Offset: 0x170, Size: 1]
	float CoolDownTimeSpeed;//[Offset: 0x174, Size: 4]
	float CoolDownTimeMin;//[Offset: 0x178, Size: 4]
	float MaxOperateDistanceToPlayer;//[Offset: 0x17c, Size: 4]
	float MaxOperateFalloffDistance;//[Offset: 0x180, Size: 4]
	float LowFuelWarning;//[Offset: 0x184, Size: 4]
	float SkillRecallingTime;//[Offset: 0x188, Size: 4]
	float SkillDisappearingTime;//[Offset: 0x18c, Size: 4]
	float SkillDestoryTime;//[Offset: 0x190, Size: 4]
	float RemoteControlDyingTime;//[Offset: 0x194, Size: 4]
	int DestoryPawnTipID;//[Offset: 0x198, Size: 4]
	float MaxRecallTime;//[Offset: 0x19c, Size: 4]
	float SkillRecallingTimerRemain;//[Offset: 0x1a0, Size: 4]
	float MaxCameraFOV;//[Offset: 0x1b0, Size: 4]
	float MinCameraFOV;//[Offset: 0x1b4, Size: 4]
	float UAVFPPCameraFovPercent;//[Offset: 0x1b8, Size: 4]
	delegate OnEnterRemoteControl;//[Offset: 0x1bc, Size: 12]
	delegate OnOverMaxOperateDistance;//[Offset: 0x1c8, Size: 12]
	DriverAttachmentData[] DriverAttachmentDataList;//[Offset: 0x1d4, Size: 12]
	delegate OnCharAnimStateDiff;//[Offset: 0x1e4, Size: 12]
	int CantUseRemoteControlTips;//[Offset: 0x1f0, Size: 4]
	bool NeedForceSetViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	byte[] CantIgnoreDamageTypeArr;//[Offset: 0x1f8, Size: 12]
	void TickCharacterAnimState();// 0x25a31d8
	void SetMaxHP(float HP);// 0x24f2fb4
	void SetMaxFuel(float Fuel);// 0x2546a58
	void SetFPPCameraFovEvent(float Factor);// 0x46f6b154
	void SetFPPCameraFov(float Factor);// 0x25a3160
	void SetDriverAttachement(Character* InDriver, bool EnableAttach, out const FName InAttachmentDataName, bool IngoreDelay);// 0x25a2fec
	void SetCurHP(float HP);// 0x25a2f6c
	void SetCurFuel(float Fuel);// 0x25a2eec
	void ServerShutDown();// 0x257e478
	bool ServerRecall(STExtraPlayerController* PC);// 0x25a2e64
	bool ServerPause(STExtraPlayerController* PC);// 0x24a9128
	bool ServerControl(STExtraPlayerController* PC);// 0x24a90a0
	void SendToServerUAVFPPCameraFovPercent(float percent);// 0x25a2db0
	void SendClientOkToServer();// 0x25a2d9c
	void RegisterItemHandle(BattleItemHandleBase* BindingHandle);// 0x25a2d24
	void RefreshCharacterAnim(STExtraBaseCharacter* PlayerCharacter);// 0x257e3dc
	void OnStateChangeEvent();// 0x236beb4
	void OnRep_SpawnedFromBackPack();// 0x25a2d10
	void OnRep_RemoteControlState();// 0x240b7ec
	void OnRep_FPPCameraFovChanged();// 0x25a2cfc
	void OnRep_Character();// 0x25a2ce8
	void OnRecycled();// 0x2557498
	void HandleRemoteControlReconnect(STExtraPlayerController* PC);// 0x24fbdb0
	float GetMaxHP();// 0x25a2cb8
	float GetMaxFuel();// 0x25a2c88
	BattleItemHandleBase* GetItemHandle();// 0x25a2c6c
	float GetDisToPlayer();// 0x25a2c44
	float GetCurHP();// 0x25a2c14
	float GetCurFuel();// 0x24594e0
	void ForceExit(FString Reason);// 0x25a2b84
	void DriverAttachementLoadFinish();// 0x25a16d8
	bool CanUseRemmoteControl();// 0x25a16a8

--------------------------------
Class: DriverAttachmentData
	FName AttachmentDataName;//[Offset: 0x0, Size: 8]
	StaticMesh* AttachmentMesh;//[Offset: 0x8, Size: 40]
	StaticMesh* AttachmentMeshPtr;//[Offset: 0x30, Size: 4]
	StaticMesh* AttachmentMeshLod;//[Offset: 0x38, Size: 40]
	StaticMesh* AttachmentMeshLodPtr;//[Offset: 0x60, Size: 4]
	FName AttachSocket;//[Offset: 0x68, Size: 8]
	float AttachDelayTime;//[Offset: 0x70, Size: 4]
	float DettachDelayTime;//[Offset: 0x74, Size: 4]
	StaticMeshComponent* AttachmentComponentInstance;//[Offset: 0x80, Size: 4]
	STExtraPlayerCharacter* AttachDriverCache;//[Offset: 0x84, Size: 4]

--------------------------------
Class: DeviceInfo
	FString GPUFamily;//[Offset: 0x0, Size: 12]
	FString GLVersion;//[Offset: 0xc, Size: 12]
	FString OSVersion;//[Offset: 0x18, Size: 12]
	FString DeviceMake;//[Offset: 0x24, Size: 12]
	FString DeviceModel;//[Offset: 0x30, Size: 12]
	FString VulkanVersion;//[Offset: 0x3c, Size: 12]
	FString MemorySizeInGB;//[Offset: 0x48, Size: 12]
	FString OpenID;//[Offset: 0x54, Size: 12]
	int HardWareLevel;//[Offset: 0x60, Size: 4]
	bool bMemoryLowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool bDeviceLowLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]

--------------------------------
Class: SeekAndLockRPGBulletUploadData
	byte SeekAndLockStageType;//[Offset: 0x0, Size: 1]
	Actor* SeekAndLockTarget;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ShootMultiBulletsParam
	Vector LaunchBulletPos;//[Offset: 0x0, Size: 12]
	Rotator LaunchBulletRot;//[Offset: 0xc, Size: 12]
	uint32 ShootID;//[Offset: 0x18, Size: 4]

--------------------------------
Class: ExplosionProjectileHitInfo
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector ImpactNormal;//[Offset: 0xc, Size: 12]
	float BulletHitTime;//[Offset: 0x18, Size: 4]
	float BulletLaunchTime;//[Offset: 0x1c, Size: 4]
	float BulletMovedDistance;//[Offset: 0x20, Size: 4]

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	bool EnableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x541, Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x542, Size: 1]
	bool bEnableSimulateBulletResponseToPawnChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x543, Size: 1]
	float MaxActiveTime;//[Offset: 0x544, Size: 4]
	float AutoDestroyTime;//[Offset: 0x548, Size: 4]
	Vector ServerShootPos;//[Offset: 0x54c, Size: 12]
	float ServerShootTime;//[Offset: 0x558, Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x560, Size: 96]
	int LocalShootId;//[Offset: 0x5ec, Size: 4]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f4, Size: 1]
	Controller* CachedInstigator;//[Offset: 0x5fc, Size: 4]
	bool bNeedResumeMoveInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	class Actor[] IgnoreActorClasses;//[Offset: 0x604, Size: 12]
	void RPC_Multicast_StartLaunchNew(const ProjectileBulletLaunchParams LaunchParams);// 0x2591f80
	void RPC_Multicast_StartLaunch(float Speed, out const Transform Trans, Actor* InOwningWeapon, Actor* InInstigator, uint32 _ShootID);// 0x23cec30
	void ProjectileComponentHandleShootDamageCallback(NormalProjectileComponent* Comp);// 0x2591f08
	void OnRep_ServerLaunchParams(out const ProjectileBulletLaunchParams OldParam);// 0x2591dd0
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x23ceb84
	void OnImpact(out const HitResult _ImpactResult);// 0x23ceae0
	void HandleOnImpactOnServer(out const HitResult _ImpactResult, bool bVerifyRet);// 0x2591cd4
	void HandleBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2591ad8
	void ForceInvalidate();// 0x2591ac4
	void DelayDestroyOnServerFinish();// 0x2591ab0
	void DelayDestroyOnServer(float DelayTime);// 0x2591a38
	void CustomCheckResumeMove(out const HitResult _ImpactResult, out bool OutRst);// 0x2591940

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x2e4, Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	int MaxNoGravityRange;//[Offset: 0x2ec, Size: 4]
	float LaunchGravityScale;//[Offset: 0x2f0, Size: 4]
	int PunctureTimes;//[Offset: 0x2f4, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x2f8, Size: 4]
	class DamageType* DamageType;//[Offset: 0x2fc, Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x300, Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305, Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x308, Size: 4]
	Vector RootScale;//[Offset: 0x30c, Size: 12]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	Vector ShootDir;//[Offset: 0x31c, Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	float ShowBulletEffectMinDistance;//[Offset: 0x32c, Size: 4]
	float OutRangeDefaultImpactLength;//[Offset: 0x330, Size: 4]
	bool bApplyCurVehicleSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x334, Size: 1]
	delegate OnRecycleBullet;//[Offset: 0x338, Size: 12]
	delegate OnResetBullet;//[Offset: 0x45c, Size: 12]
	delegate OnBulletImpact;//[Offset: 0x468, Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x474, Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x480, Size: 4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x484, Size: 4]
	STExtraCharacter* InstigatorCharacter;//[Offset: 0x488, Size: 4]
	PlayerController* ShootPlayerController;//[Offset: 0x4ec, Size: 4]
	Controller* ShooterController;//[Offset: 0x4f0, Size: 4]
	bool bShootPlayerIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 1]
	bool IngoreSameGroupBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 1]
	void ResetBulletDelegate__DelegateSignature();// 0x46f6b154
	void ReceiveLaunchBullet();// 0x46f6b154
	void OnShowBulletEffect();// 0x46f6b154
	void OnRecycleBulletDelegate__DelegateSignature(STExtraShootWeaponBulletBase* Bullet);// 0x46f6b154
	void OnImpactEnd(out const HitResult _ImpactResult);// 0x23ceb84
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x46f6b154
	void OnImpact(out const HitResult _ImpactResult);// 0x23ceae0
	bool NeedCheckBulletFlySound();// 0x26e5d94
	void LaunchBulletDelegate__DelegateSignature();// 0x46f6b154
	byte GetOwnerRole();// 0x26e5d6c
	float GetMaxBulletFlySpeed();// 0x25ca4f4
	Controller* GetInstigatorControllerSafe();// 0x26e5d44
	float GetCurBulletFlySpeed();// 0x26e5d1c

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0, Size: 4]
	Transform Trans;//[Offset: 0x10, Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40, Size: 4]
	Actor* Instigator;//[Offset: 0x44, Size: 4]
	uint32 ShootID;//[Offset: 0x48, Size: 4]
	FString ExtraData;//[Offset: 0x4c, Size: 12]

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bResumeMoveAfterImpactWithNoLostFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	bool bHasTickDelayedOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd, Size: 1]
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1de, Size: 1]
	float ExtraGravityZOffset;//[Offset: 0x1e0, Size: 4]
	bool bCheckBodyInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5, Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6, Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x1e8, Size: 4]
	void ResumeMoveAfterImpactWithNoLost();// 0x23f4ee0
	void ResetTickDelay();// 0x23f4ec4
	void IgnoreBounceReflectOnce();// 0x23f4ea8
	void ForceStop();// 0x23f4e94

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x104, Size: 4]
	float MaxSpeed;//[Offset: 0x108, Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10c, Size: 1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10c, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10c, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10c, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10c, Size: 1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10c, Size: 1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10c, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10c, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10d, Size: 1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10d, Size: 1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10d, Size: 1]
	float PreviousHitTime;//[Offset: 0x110, Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x114, Size: 12]
	float ProjectileGravityScale;//[Offset: 0x120, Size: 4]
	float Buoyancy;//[Offset: 0x124, Size: 4]
	float Bounciness;//[Offset: 0x128, Size: 4]
	float Friction;//[Offset: 0x12c, Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x130, Size: 4]
	float MinFrictionFraction;//[Offset: 0x134, Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x138, Size: 12]
	delegate OnProjectileStop;//[Offset: 0x144, Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x150, Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x154, Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x15c, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x160, Size: 4]
	int BounceAdditionalIterations;//[Offset: 0x164, Size: 4]
	float InterpLocationTime;//[Offset: 0x168, Size: 4]
	float InterpRotationTime;//[Offset: 0x16c, Size: 4]
	float InterpLocationMaxLagDistance;//[Offset: 0x170, Size: 4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x174, Size: 4]
	void StopSimulating(out const HitResult HitResult);// 0x25e52d4
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x4a46ab8
	void SetInterpolatedComponent(SceneComponent* Component);// 0x237d7b4
	void ResetInterpolation();// 0x254e2e8
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x46f6b154
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x46f6b154
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x4a469cc
	Vector LimitVelocity(Vector NewVelocity);// 0x4a46928
	bool IsVelocityUnderSimulationThreshold();// 0x4a468d8
	bool IsInterpolationComplete();// 0x4a468a8

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x464, Size: 4]
	float DestroyBulletDelayAfterDestroyWeapon;//[Offset: 0x468, Size: 4]
	bool bOwnerClientReCalcShootTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 1]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x470, Size: 44]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x49c, Size: 12]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	float CurShootLockInterval;//[Offset: 0x4ac, Size: 4]
	void UpdateShootLockCD(float DeltaTime);// 0x254525c
	void OnHandleShootDamageDelegate__DelegateSignature(NormalProjectileComponent* NormalProjectileComponent);// 0x46f6b154
	bool CheckShootState();// 0x254522c

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	bool bUseBulletCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	float BulletLifeTimeAfterImpact;//[Offset: 0x454, Size: 4]
	Actor*[] BulletCacheList;//[Offset: 0x458, Size: 12]
	void RecycleBullet(STExtraShootWeaponBulletBase* Bullet);// 0x25cd644

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0xe0, Size: 8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0xe8, Size: 8]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool bDebugGunBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	float DrawShootLineTime;//[Offset: 0xf4, Size: 4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float DrawShootPointOnScreenTime;//[Offset: 0xfc, Size: 4]
	float DrawShootPointOnScreenSize;//[Offset: 0x100, Size: 4]
	float DrawShootPoint3DSize;//[Offset: 0x104, Size: 4]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0x108, Size: 4]
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0x10c, Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0x110, Size: 4]
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	int ContinuousShootingBulletsNum;//[Offset: 0x118, Size: 4]
	delegate OnShoot;//[Offset: 0x11c, Size: 12]
	delegate OnBulletHitDelegate;//[Offset: 0x128, Size: 12]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x134, Size: 4]
	bool bNeedPullBackMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	VolleyShootInfoCache[] VolleyShootLocCache;//[Offset: 0x438, Size: 12]
	delegate AutoTestShootDelegate;//[Offset: 0x444, Size: 12]
	void UpdateVolleyShootParameters(Vector TargetLoc, out Vector StartLoc, out Rotator BulletRot, out Vector BulletDir);// 0x26e67fc
	void ShootDelegate__DelegateSignature();// 0x46f6b154
	void OnWeaponClipMaxBulletChanged();// 0x26e67e8
	void OnWeaponBulletChanged();// 0x26e67d4
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x46f6b154
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x46f6b154
	void OnBulletHitDelegate__DelegateSignature(BulletHitInfoUploadData Data, STExtraShootWeapon* Weapon);// 0x46f6b154
	void OnAutoTestShootDelegate__DelegateSignature(Vector ShootStartPos, Rotator ShootRotation);// 0x46f6b154
	int MaxBulletPerShot();// 0x26e67a4
	bool LocalSimulateOBBulletTrack_ModifyHitRet(out HitResult HitRet);// 0x26e66f8
	void LocalSimulateOBBulletTrack();// 0x23d0bcc
	Vector GetFinalBulletLaunchPos(out const Vector InitMuzle, out const Vector InitMuzleDir);// 0x26e65e8
	bool CheckShootState();// 0x254522c

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	bool bApplyOwnerNetRelavance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bOverrideOwnerNetRelavance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	STExtraWeapon* OwnerWeapon;//[Offset: 0xd4, Size: 4]
	STExtraPlayerController* GlobalController;//[Offset: 0xdc, Size: 4]
	void UpdateComponentTick();// 0x23b7dfc
	STExtraWeapon* TryGetOwnerWeapon();// 0x27c93dc
	STExtraShootWeapon* TryGetOwnerShootWeapon();// 0x27c93b4
	void MarkWeaponLogicComponentTickRoleEnable(byte Role, bool bTickEnable);// 0x27c92f0
	bool IsWeaponOwnerOBTarget();// 0x27c92c8
	bool IsWeaponLogicComponentTickRoleEnabled(byte Role);// 0x27c9248
	bool IsWeaponLogicComponentTickEnabled();// 0x27c9220
	bool IsLocalOrSpectorPlayer();// 0x27c91f8
	FString GetWeaponDetailInfo();// 0x27c9138
	byte GetOwnerPawnRole();// 0x27c9110

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0, Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4, Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8, Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc, Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14, Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20, Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x28, Size: 4]

--------------------------------
Class: BulletTrackComponent.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnEquipDelegate;//[Offset: 0xe0, Size: 12]
	delegate HandleGetOwnerActorDelegate;//[Offset: 0xec, Size: 12]
	delegate OnBulletTrackShootDelegate;//[Offset: 0xf8, Size: 12]
	delegate OnPostGetDataFromWeaponEntity;//[Offset: 0x104, Size: 12]
	delegate OnPostGetAccessoriesFactorsFromWeaponEntity;//[Offset: 0x110, Size: 12]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x11c, Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x120, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x124, Size: 4]
	float CurRecoilValue;//[Offset: 0x128, Size: 4]
	float VerticalRecoilTarget;//[Offset: 0x12c, Size: 4]
	float HorizontalRecoilTarget;//[Offset: 0x130, Size: 4]
	float VerticalRecoveryTarget;//[Offset: 0x134, Size: 4]
	float CurVerticalRecovery;//[Offset: 0x138, Size: 4]
	float PoseRecoilFactor;//[Offset: 0x13c, Size: 4]
	float AccessoriesVRecoilFactor;//[Offset: 0x140, Size: 4]
	float AccessoriesVRecoilFactorModifier;//[Offset: 0x144, Size: 4]
	float VerticalRecoilFactorModifier;//[Offset: 0x148, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x14c, Size: 4]
	float AccessoriesHRecoilFactorModifier;//[Offset: 0x150, Size: 4]
	float AccessoriesAllRecoilFactorModifier;//[Offset: 0x154, Size: 4]
	float HorizontalRecoilFactorModifier;//[Offset: 0x158, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x15c, Size: 4]
	bool BlockRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	float LastCalcHRecoilTargetTime;//[Offset: 0x164, Size: 4]
	float LastHorizontalRecoilTarget;//[Offset: 0x168, Size: 4]
	float LastVerticalRecoilTarget;//[Offset: 0x16c, Size: 4]
	float LastVerticalRecoveryTarget;//[Offset: 0x170, Size: 4]
	float CurDeviationValue;//[Offset: 0x174, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x178, Size: 4]
	float AccessoriesFinalDeviationFactor;//[Offset: 0x17c, Size: 4]
	float DeviationFactorModifier;//[Offset: 0x180, Size: 4]
	int ShootBursts;//[Offset: 0x184, Size: 4]
	TimerHandle BurstEmptyHandler;//[Offset: 0x188, Size: 8]
	bool BlockPostFireRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool PostFirePitchCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	float PostFireStartPitch;//[Offset: 0x194, Size: 4]
	float PostFireRecoveryPitch;//[Offset: 0x198, Size: 4]
	float LastPostFireRecoveryPitch;//[Offset: 0x19c, Size: 4]
	int UseTss;//[Offset: 0x1a0, Size: 4]
	float LogIntervalTmp;//[Offset: 0x1a4, Size: 4]
	bool bHasGetWeaponEntityData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	SDeviation DeviationInfo_NoTss;//[Offset: 0x1ac, Size: 64]
	bool bNeedGetDataFromWeaponEntity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 1]
	float CurAccVerticalRecoilTarget;//[Offset: 0x500, Size: 4]
	float CurAccHorizontalRecoilTarget;//[Offset: 0x504, Size: 4]
	float MaxAbsCurAccHorizontalRecoilTarget;//[Offset: 0x508, Size: 4]
	float MaxAbsCurHorizontalRecoilTarget;//[Offset: 0x50c, Size: 4]
	float AccRecoilTargetClearInterval;//[Offset: 0x510, Size: 4]
	SRecoilInfo RecoilInfo_NoTss;//[Offset: 0x524, Size: 124]
	void UpdateRecoveryTarget(out const SRecoilInfo RecoilInfo, float DelataTime);// 0x23f6810
	void UpdateRecoilValue(out const SRecoilInfo RecoilInfo, float DeltaTime);// 0x23f6650
	void UpdateRecoilTarget(out const SRecoilInfo RecoilInfo, float DelataTime);// 0x23f6490
	void UpdateRecoilFactor(out const SRecoilInfo RecoilInfo);// 0x23f6320
	void UpdatePostFireRecovery(out const SRecoilInfo RecoilInfo, float DeltaTime);// 0x23f6160
	void UpdateKickBack(float DeltaTime);// 0x23f60e4
	void OnWeaponStopFire();// 0x23f60d0
	void OnWeaponStartFire();// 0x23f60bc
	void OnWeaponShoot();// 0x23f60a8
	void OnUpdate(float DeltaTime);// 0x23f6030
	void OnPostFire();// 0x23f601c
	void HandleGetOwnerActor(Actor* OwnerActor);// 0x23f5f9c
	FString GetWeaponInfo();// 0x23f5f08
	void GetDataFromWeaponEntityNew();// 0x23f5ef4
	void GetDataFromWeaponEntity();// 0x23f5ee0
	Vector GetCurRecoilInfo();// 0x23f5e98
	float GetCurDeviation();// 0x23f5e70
	void GetAccessoriesFactorsFromWeaponEntity();// 0x23f5e5c
	void CheckComponentTick();// 0x23f5e48
	void CaptureShootPitch();// 0x23f5e34
	void CapturePostFirePitch();// 0x23f5e20
	void CalculateRecoveryTarget(out const SRecoilInfo RecoilInfo, out const Vector Curve);// 0x23f5c50
	void CalculateRecoilTarget(out const SRecoilInfo RecoilInfo, out const Vector Curve);// 0x23f5a80
	void CalcDeviationTarget(out const SDeviation DeviationInfo);// 0x23f5970
	void BlockedRecovery(bool State);// 0x23f58ec
	void BlockedPostFireRecovery(bool State);// 0x23f5870

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 4]
	float DeviationMax;//[Offset: 0x18, Size: 4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 4]
	float LeftMax;//[Offset: 0x18, Size: 4]
	float RightMax;//[Offset: 0x1c, Size: 4]
	float HorizontalTendency;//[Offset: 0x20, Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24, Size: 4]
	int BulletPerSwitch;//[Offset: 0x28, Size: 4]
	float TimePerSwitch;//[Offset: 0x2c, Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34, Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38, Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c, Size: 4]
	float RecoilValueClimb;//[Offset: 0x40, Size: 4]
	float RecoilValueFail;//[Offset: 0x44, Size: 4]
	float RecoilModifierStand;//[Offset: 0x48, Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c, Size: 4]
	float RecoilModifierProne;//[Offset: 0x50, Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54, Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60, Size: 4]
	float RecoilCurveStart;//[Offset: 0x64, Size: 4]
	float RecoilCurveEnd;//[Offset: 0x68, Size: 4]
	float RecoilCurveSamplingInterval;//[Offset: 0x6c, Size: 4]
	Vector[] RecoilCurveArray;//[Offset: 0x70, Size: 12]

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	Rotator[] RearSightRotConfig;//[Offset: 0xb54, Size: 12]
	FName[] RearSightSocketConfig;//[Offset: 0xb60, Size: 12]
	Rotator[] RearSightHandRotOffsetConfig;//[Offset: 0xb6c, Size: 12]
	int RearSightRotIndex;//[Offset: 0xb78, Size: 4]
	byte EditorArchiveDataType;//[Offset: 0xb7c, Size: 1]
	byte RuntimeArchiveDataType;//[Offset: 0xb7d, Size: 1]
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0xb80, Size: 4]
	enum ShootWeaponType;//[Offset: 0xb84, Size: 1]
	float BulletFireSpeed;//[Offset: 0xb88, Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0xb8c, Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0xb90, Size: 4]
	int[] ExtendMaxBulletNumInOneClipList;//[Offset: 0xb94, Size: 12]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba1, Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba2, Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba3, Size: 1]
	int BurstShootBulletsNum;//[Offset: 0xba4, Size: 4]
	float BulletGravityModifier;//[Offset: 0xba8, Size: 4]
	float BulletGravityExtraOffset;//[Offset: 0xbac, Size: 4]
	FName[] ExtraAvailableMuzzleSocketNameList;//[Offset: 0xbb0, Size: 12]
	bool bHasVolleyFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbbc, Size: 1]
	int VolleyShootBulletsNum;//[Offset: 0xbc0, Size: 4]
	float VolleyBulletSpreadFactor;//[Offset: 0xbc4, Size: 4]
	FName[] VolleyMuzzleSocketNameList;//[Offset: 0xbc8, Size: 12]
	float BurstShootCD;//[Offset: 0xbd4, Size: 4]
	int BulletNumSingleShot;//[Offset: 0xbd8, Size: 4]
	int MaxProjectileBulletsNumSingleShot;//[Offset: 0xbdc, Size: 4]
	bool bLoadSensitive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 1]
	FName MuzzleSocketName;//[Offset: 0xbe8, Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0xbf0, Size: 8]
	FName SilencerSocketName;//[Offset: 0xbf8, Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0xc00, Size: 8]
	FName ShellDropSocketName;//[Offset: 0xc08, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0xc10, Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0xc18, Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0xc1c, Size: 4]
	byte shootType;//[Offset: 0xc20, Size: 1]
	int ShootTotalType;//[Offset: 0xc24, Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28, Size: 1]
	float WeaponWarnUpTime;//[Offset: 0xc2c, Size: 4]
	float BulletMuzzleBackwardDis;//[Offset: 0xc30, Size: 4]
	float BulletMuzzleBackwardDisWhenHandInFold;//[Offset: 0xc34, Size: 4]
	float CalcShootDirMaxDegreeOffset;//[Offset: 0xc38, Size: 4]
	bool bForcePlayMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3c, Size: 1]
	bool bCanJumpWhenShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3d, Size: 1]
	bool bForceUseShootIntervalConsistent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3e, Size: 1]
	bool bSkipDSShootDamageVerifyA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc3f, Size: 1]
	bool bSkipDSShootDamageVerifyB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	bool bSkipDSShootDamageVerifyC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc41, Size: 1]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0xc44, Size: 20]
	WeaponHitPartCoff MonsterWeaponHitPartCoff;//[Offset: 0xc58, Size: 20]
	float BaseImpactDamage;//[Offset: 0xc6c, Size: 4]
	float MinimumImpactDamage;//[Offset: 0xc70, Size: 4]
	float BulletRange;//[Offset: 0xc74, Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0xc78, Size: 4]
	FName HitEffectTag;//[Offset: 0xc80, Size: 8]
	byte ImpactDirType;//[Offset: 0xc88, Size: 1]
	bool bShootIgnoreCurVehicleAllPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc89, Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0xc8c, Size: 12]
	float RangeModifier;//[Offset: 0xc98, Size: 4]
	float ReferenceDistance;//[Offset: 0xc9c, Size: 4]
	float ExtraRangeModifier;//[Offset: 0xca0, Size: 4]
	class DamageType* DamageType;//[Offset: 0xca4, Size: 4]
	ItemDefineID BulletType;//[Offset: 0xca8, Size: 24]
	bool bHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc0, Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc1, Size: 1]
	int InitBulletInClip;//[Offset: 0xcc4, Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc8, Size: 1]
	float TraceDistance;//[Offset: 0xccc, Size: 4]
	float MaxValidHitTime;//[Offset: 0xcd0, Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0xcd4, Size: 60]
	float MaxDamageRate;//[Offset: 0xd10, Size: 4]
	bool bIgnoreTeammatesCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd14, Size: 1]
	bool bIgnoreAttachedOwnerCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd15, Size: 1]
	bool bReturnBulletsWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd16, Size: 1]
	bool bStoreBulletsToWrapperWhenDisUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd17, Size: 1]
	bool bStoreBulletsToTombBoxWrapperWhenDropToBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 1]
	bool bForbidSpawnWrapperWhenNoBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd19, Size: 1]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1a, Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0xd1c, Size: 4]
	CurveFloat* OBBulletSizeScaleCurve;//[Offset: 0xd20, Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0xd24, Size: 56]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0xd5c, Size: 8]
	float SimulateOBBulletMinDistance;//[Offset: 0xd64, Size: 4]
	float DamageImpulse;//[Offset: 0xd68, Size: 4]
	byte ReloadType;//[Offset: 0xd6c, Size: 1]
	float PreFireTime;//[Offset: 0xd70, Size: 4]
	float PostFireTime;//[Offset: 0xd74, Size: 4]
	float PostReloadTime;//[Offset: 0xd78, Size: 4]
	float ReloadDurationStart;//[Offset: 0xd7c, Size: 4]
	float ReloadDurationLoop;//[Offset: 0xd80, Size: 4]
	float ReloadTime;//[Offset: 0xd84, Size: 4]
	float ReloadTimeModifier;//[Offset: 0xd88, Size: 4]
	float ReloadTimeTactical;//[Offset: 0xd8c, Size: 4]
	float ReloadTimeTacticalModifier;//[Offset: 0xd90, Size: 4]
	float ReloadTimeTacticalOneByOneModifier;//[Offset: 0xd94, Size: 4]
	float AllReloadTimeModifier;//[Offset: 0xd98, Size: 4]
	float ReloadTimeMagOut;//[Offset: 0xd9c, Size: 4]
	float ReloadTimeMagOutTactical;//[Offset: 0xda0, Size: 4]
	float ReloadTimeMagIn;//[Offset: 0xda4, Size: 4]
	float ReloadTimeMagInTactical;//[Offset: 0xda8, Size: 4]
	FName ReloadAllTIDName;//[Offset: 0xdb0, Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0xdb8, Size: 8]
	float AutoReloadCD;//[Offset: 0xdc0, Size: 4]
	bool InitAutoReloadLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc4, Size: 1]
	bool bAutoDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc5, Size: 1]
	float DropDuration;//[Offset: 0xdc8, Size: 4]
	int InterruptReloadByFireMinBulletThreshold;//[Offset: 0xdcc, Size: 4]
	SRecoilInfo RecoilInfo;//[Offset: 0xdd0, Size: 124]
	float AccessoriesVRecoilFactor;//[Offset: 0xe4c, Size: 4]
	float AccessoriesVRecoilFactorModifier;//[Offset: 0xe50, Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0xe54, Size: 4]
	float AccessoriesHRecoilFactorModifier;//[Offset: 0xe58, Size: 4]
	float AccessoriesAllRecoilFactorModifier;//[Offset: 0xe5c, Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0xe60, Size: 4]
	SDeviation DeviationInfo;//[Offset: 0xe64, Size: 64]
	float ShotGunVerticalSpread;//[Offset: 0xea4, Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0xea8, Size: 4]
	float GameDeviationFactor;//[Offset: 0xeac, Size: 4]
	float GameDeviationAccuracy;//[Offset: 0xeb0, Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0xeb4, Size: 4]
	float AccessoriesFinalDeviationFactor;//[Offset: 0xeb8, Size: 4]
	float DeviationFactorModifier;//[Offset: 0xebc, Size: 4]
	byte CrossHairType;//[Offset: 0xec0, Size: 1]
	float CrossHairInitialSize;//[Offset: 0xec4, Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0xec8, Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0xecc, Size: 4]
	bool bDrawCrosshairWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	FName DefaultScopeSocket;//[Offset: 0xed8, Size: 8]
	FName DefaultGripSocket;//[Offset: 0xee0, Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0xee8, Size: 8]
	FName DefaultMagSocket;//[Offset: 0xef0, Size: 8]
	float WeaponBodyLength;//[Offset: 0xef8, Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0xefc, Size: 12]
	float WeaponAimFOV;//[Offset: 0xf0c, Size: 4]
	float WeaponAimInTime;//[Offset: 0xf10, Size: 4]
	float WeaponAimPitchRate;//[Offset: 0xf14, Size: 4]
	float WeaponAimYawRate;//[Offset: 0xf18, Size: 4]
	float GameMotionYawRate;//[Offset: 0xf1c, Size: 4]
	float GameMotionPitchRate;//[Offset: 0xf20, Size: 4]
	float ForegripParam;//[Offset: 0xf24, Size: 4]
	float MagParam;//[Offset: 0xf28, Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2c, Size: 1]
	float SensitiveFireYawRate;//[Offset: 0xf30, Size: 4]
	float SensitiveFirePitchRate;//[Offset: 0xf34, Size: 4]
	byte SightType;//[Offset: 0xf38, Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0xf40, Size: 24]
	FName ScopeAimCameraSocketNameOverride;//[Offset: 0xf58, Size: 8]
	float MaxBulletImpactFXClampDistance;//[Offset: 0xf60, Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0xf64, Size: 4]
	float RecoilKickADS;//[Offset: 0xf68, Size: 4]
	float ExtraHitPerformScale;//[Offset: 0xf6c, Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0xf70, Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf74, Size: 1]
	enum ReleaseFireType;//[Offset: 0xf75, Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf76, Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf77, Size: 1]
	float LockAnimPitchDegree;//[Offset: 0xf78, Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0xf7c, Size: 4]
	float AnimationKick;//[Offset: 0xf80, Size: 4]
	int ReloadAnimSlot;//[Offset: 0xf84, Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf88, Size: 1]
	bool bEnableNightVersionWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf89, Size: 1]
	bool bUseScopeOutLerpFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8a, Size: 1]
	bool bDisableFolderInReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8b, Size: 1]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8c, Size: 1]
	float HandleFolderFactorScale;//[Offset: 0xf90, Size: 4]
	int[] DefaultWeaponIDList;//[Offset: 0xf94, Size: 12]
	float ShootInterval;//[Offset: 0xfa0, Size: 4]
	int ShootIntervalShowNumber;//[Offset: 0xfa4, Size: 4]
	float ExtraShootInterval;//[Offset: 0xfa8, Size: 4]
	int ExtraShootIntervalShowNumber;//[Offset: 0xfac, Size: 4]
	float BurstShootInterval;//[Offset: 0xfb0, Size: 4]
	void CheckAndFillEncryptConfigMap();// 0x25d812c

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponID;//[Offset: 0xe0, Size: 4]
	byte WeaponType;//[Offset: 0xe4, Size: 1]
	enum weaponTypeNew;//[Offset: 0xe5, Size: 1]
	byte WeaponHoldType;//[Offset: 0xe6, Size: 1]
	FName WeaponAttachSocket;//[Offset: 0xe8, Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0xf8, Size: 8]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0x104, Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool bEnableVaultHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	bool bDoNotSwitchWeaponWhenVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a, Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b, Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0x110, Size: 4]
	bool bCanBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool bLockCameraPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	bool bLockCameraYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 1]
	bool bNeedCheckGunCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117, Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	FName CustomAttachTargetComponentTag;//[Offset: 0x120, Size: 8]
	bool bNeedDestroyAfterDisuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bEnableSpecWeaponCreateOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	enum[] DisableWeaponPlayerStateList;//[Offset: 0x12c, Size: 12]
	enum[] BackpackWeaponPlayerStateList;//[Offset: 0x138, Size: 12]
	int DisableUseWeaponPlayerStateMsgIDDefault;//[Offset: 0x144, Size: 4]
	int DisableUseWeaponPlayerStateMsgIDSpecific;//[Offset: 0x148, Size: 4]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x14c, Size: 60]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x188, Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x1c4, Size: 4]
	float SwitchFromIdleToBackpackTimeModifier;//[Offset: 0x1c8, Size: 4]
	float SwitchAnimFromIdleToBackpackTimeAdjust;//[Offset: 0x1cc, Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x1d0, Size: 4]
	float SwitchFromBackpackToIdleTimeModifier;//[Offset: 0x1d4, Size: 4]
	float SwitchAnimFromBackpackToIdleTimeAdjust;//[Offset: 0x1d8, Size: 4]
	float PreSwitchFromBackpackToIdleTime;//[Offset: 0x1dc, Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x1e0, Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x210, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x240, Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x270, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x2a0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x2d0, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x300, Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x330, Size: 48]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x360, Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x365, Size: 1]
	float DelayTimeWhenDisableWeaponAnim;//[Offset: 0x368, Size: 4]
	bool bResetPosWhenDisableWeaponAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	Vector SightSlowBlendAlpha;//[Offset: 0x370, Size: 12]
	int CustomWeaponSlotUIType;//[Offset: 0x37c, Size: 4]
	enum[] SyncState_CurWeaponStateGateList;//[Offset: 0x380, Size: 12]
	enum[] SyncState_TargetRepWeaponStateGateList;//[Offset: 0x38c, Size: 12]
	enum[] AutoCheckCreateSkillCompWeaponTypeList;//[Offset: 0x398, Size: 12]
	bool bAutoCheckCreateSkillComp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x3a8, Size: 148]

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0, Size: 256]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x100, Size: 24]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0xc, Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x10, Size: 104]
	SlateBrush LargerProfileImage;//[Offset: 0x78, Size: 104]
	FString Name;//[Offset: 0xe0, Size: 12]
	FString Description;//[Offset: 0xec, Size: 12]
	int DisplayPriority;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x4, Size: 4]
	int PickUpSoundID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0xc, Size: 4]
	byte Type;//[Offset: 0x10, Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0, Size: 72]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x48, Size: 72]
	float followTimeMax;//[Offset: 0x90, Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0, Size: 4]
	float RangeRate;//[Offset: 0x4, Size: 4]
	float SpeedRate;//[Offset: 0x8, Size: 4]
	float RangeRateSight;//[Offset: 0xc, Size: 4]
	float SpeedRateSight;//[Offset: 0x10, Size: 4]
	float CrouchRate;//[Offset: 0x14, Size: 4]
	float ProneRate;//[Offset: 0x18, Size: 4]
	float DyingRate;//[Offset: 0x1c, Size: 4]
	float DriveVehicleRate;//[Offset: 0x20, Size: 4]
	float InVehicleRate;//[Offset: 0x24, Size: 4]
	float FreeFallRate;//[Offset: 0x28, Size: 4]
	float OpeningRate;//[Offset: 0x2c, Size: 4]
	float LandingRate;//[Offset: 0x30, Size: 4]
	float adsorbMaxRange;//[Offset: 0x34, Size: 4]
	float adsorbMinRange;//[Offset: 0x38, Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x3c, Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x40, Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x44, Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float head;//[Offset: 0x0, Size: 4]
	float Body;//[Offset: 0x4, Size: 4]
	float Limbs;//[Offset: 0x8, Size: 4]
	float Hand;//[Offset: 0xc, Size: 4]
	float Foot;//[Offset: 0x10, Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 4]
	int rangeEnd;//[Offset: 0x4, Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0, Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18, Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x30, Size: 8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0, Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8, Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10, Size: 8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VolleyShootInfoCache
	Vector StartLoc;//[Offset: 0x0, Size: 12]
	Vector ShootDir;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponReconnectReplicateData
	FString OwnerPlayerName;//[Offset: 0x0, Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x10, Size: 8]
	int WeaponBulletNumInClip;//[Offset: 0x18, Size: 4]
	uint32 WeaponShootID;//[Offset: 0x1c, Size: 4]
	uint32 WeaponClipID;//[Offset: 0x20, Size: 4]
	uint32 OwnerNetGUID;//[Offset: 0x24, Size: 4]
	enum CurWeaponState;//[Offset: 0x28, Size: 1]
	byte CurShootType;//[Offset: 0x29, Size: 1]
	int CurShootTotalType;//[Offset: 0x2c, Size: 4]
	ItemDefineID DefineID;//[Offset: 0x30, Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x48, Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	int OperationIndex;//[Offset: 0x50, Size: 4]

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0, Size: 12]
	int AttrModifyUniqueID;//[Offset: 0xc, Size: 4]
	FString AttrModifyItemName;//[Offset: 0x10, Size: 12]
	FString AttrName;//[Offset: 0x1c, Size: 12]
	enum ModifierOp;//[Offset: 0x28, Size: 1]
	bool bIsResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	float ModifierValue;//[Offset: 0x2c, Size: 4]
	SoftObjectPath ModifierResValue;//[Offset: 0x30, Size: 24]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 8]
	bool bIsResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float FinalAddValue;//[Offset: 0xc, Size: 4]
	SoftObjectPath ResValue;//[Offset: 0x10, Size: 24]

--------------------------------
Class: WeaponAttachmentEquipNotifyData
	byte WeaponSlot;//[Offset: 0x0, Size: 1]
	ItemDefineID ItemID;//[Offset: 0x8, Size: 24]
	bool bIsEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: PlayerID
	FName PlayerType;//[Offset: 0x0, Size: 8]
	uint32 PlayerKey;//[Offset: 0x8, Size: 4]

--------------------------------
Class: StoreProductInfo
	int ProductID;//[Offset: 0x0, Size: 4]
	int ItemID;//[Offset: 0x4, Size: 4]
	int weight;//[Offset: 0x8, Size: 4]
	FString ProductName;//[Offset: 0xc, Size: 12]
	FString LargeIcon;//[Offset: 0x18, Size: 12]
	FString SmallIcon;//[Offset: 0x24, Size: 12]
	FString Desc;//[Offset: 0x30, Size: 12]
	int Count;//[Offset: 0x3c, Size: 4]
	int Price;//[Offset: 0x40, Size: 4]
	bool bLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	int LimitCount;//[Offset: 0x48, Size: 4]
	int MaxCount;//[Offset: 0x4c, Size: 4]
	int TabType;//[Offset: 0x50, Size: 4]
	int InnerType;//[Offset: 0x54, Size: 4]
	int bSlideBar;//[Offset: 0x58, Size: 4]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0, Size: 4]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0, Size: 4]
	PickUpItemData MainItemData;//[Offset: 0x8, Size: 48]

--------------------------------
Class: RCRVisualizationInfo
	Transform ViewerCameraTransform;//[Offset: 0x0, Size: 48]
	Actor* TargetActor;//[Offset: 0x30, Size: 4]
	Transform TargetTransform;//[Offset: 0x40, Size: 48]
	Vector TargetBoundingExtent;//[Offset: 0x70, Size: 12]
	bool bIsRCRRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	RCRBox[] VisibilityPathBoxes;//[Offset: 0x80, Size: 12]
	RCRBox[] NonVisibilityPathBoxes;//[Offset: 0x8c, Size: 12]
	Vector[] VisibilityPathSweepPoint;//[Offset: 0x98, Size: 12]
	Vector VisibilityPathSweepVector;//[Offset: 0xa4, Size: 12]
	RCRBox[] FullOcclusionBoxes;//[Offset: 0xb0, Size: 12]
	Vector FailedRaycastStart;//[Offset: 0xbc, Size: 12]
	Vector FailedRaycastEnd;//[Offset: 0xc8, Size: 12]
	FString CurrentBuildingDebugName;//[Offset: 0xd4, Size: 12]

--------------------------------
Class: RCRBox
	enum Type;//[Offset: 0x0, Size: 1]
	byte Group;//[Offset: 0x1, Size: 1]
	Transform Transform;//[Offset: 0x10, Size: 48]
	Vector Extent;//[Offset: 0x40, Size: 12]
	Vector OutDirection;//[Offset: 0x4c, Size: 12]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	FString DebugName;//[Offset: 0x5c, Size: 12]

--------------------------------
Class: NavLinkInfo
	Transform ActorTransform;//[Offset: 0x0, Size: 48]
	Vector Left;//[Offset: 0x30, Size: 12]
	Vector Right;//[Offset: 0x3c, Size: 12]
	Vector LeftHighPoint;//[Offset: 0x48, Size: 12]
	Vector RightHighPoint;//[Offset: 0x54, Size: 12]
	float LinkDis;//[Offset: 0x60, Size: 4]

--------------------------------
Class: CheatCommandResultInfo
	enum CommandType;//[Offset: 0x0, Size: 1]
	enum ResultType;//[Offset: 0x1, Size: 1]
	float Remain_CoolingDownTime;//[Offset: 0x4, Size: 4]
	float Remain_GlobalCoolingDownTime;//[Offset: 0x8, Size: 4]
	int Remain_ExecuteCountThreshold;//[Offset: 0xc, Size: 4]
	int Remain_GlobalExecuteCountThreshold;//[Offset: 0x10, Size: 4]

--------------------------------
Class: GrenadePredictLine.Actor.Object
	Vector HighThrowOffset;//[Offset: 0x2e4, Size: 12]
	Vector LowThrowOffset;//[Offset: 0x2f0, Size: 12]
	enum ThrowMode;//[Offset: 0x2fc, Size: 1]
	float PredictLineVelocityScale;//[Offset: 0x300, Size: 4]
	float MaxSimTime;//[Offset: 0x304, Size: 4]
	GrenadePredictResult GrenadePredictResult;//[Offset: 0x308, Size: 40]
	float GrenadeRadius;//[Offset: 0x330, Size: 4]
	Vector PredictLineStartLocation;//[Offset: 0x334, Size: 12]
	Vector PredictLineStartVelocity;//[Offset: 0x340, Size: 12]
	Vector LauncheVelocity;//[Offset: 0x34c, Size: 12]
	void SetGrenadePredictLineVisible(bool bNewVisible);// 0x46f6b154

--------------------------------
Class: GrenadePredictResult
	Vector[] SplinePoints;//[Offset: 0x0, Size: 12]
	bool IsHitActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	Vector HitActorLocation;//[Offset: 0x10, Size: 12]
	Rotator HitActorRotation;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponCrossHairPerformData[] CrossHairData;//[Offset: 0xe0, Size: 12]
	float PistolCenterDownDis;//[Offset: 0xec, Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0xf4, Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0xfc, Size: 4]
	float RotateAngle;//[Offset: 0x100, Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x104, Size: 4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x108, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x10c, Size: 4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x110, Size: 4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x114, Size: 4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x118, Size: 4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x11c, Size: 4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x120, Size: 4]
	Texture2D* CrossHairShotGun;//[Offset: 0x124, Size: 4]
	void UpdateComponentTick();// 0x23b7dfc
	void DrawWeaponCrosshairInner(HUDWidgetBase* WeaponHudWidget, float DeltaTime);// 0x24292bc
	void DrawSpreadEnd();// 0x24292a8
	void DrawDebugPointEnd();// 0x2429294

--------------------------------
Class: WeaponCrossHairPerformData
	WeaponCrossHairIconData[] Crosshair;//[Offset: 0x0, Size: 12]
	enum SpreadType;//[Offset: 0xc, Size: 1]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0, Size: 20]
	float Offset;//[Offset: 0x14, Size: 4]
	Vector2D IconOffset;//[Offset: 0x18, Size: 8]
	float Alpha;//[Offset: 0x20, Size: 4]
	float Scale;//[Offset: 0x24, Size: 4]
	float IconRotate;//[Offset: 0x28, Size: 4]
	float LogicRotate;//[Offset: 0x2c, Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float BlendInOutRatePerSec;//[Offset: 0x34, Size: 4]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x1c, Size: 4]
	Vector2D Position;//[Offset: 0x20, Size: 8]
	Vector2D Size;//[Offset: 0x28, Size: 8]
	Vector2D Origin;//[Offset: 0x30, Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x38, Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	float Opacity;//[Offset: 0x44, Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x4c, Size: 4]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x50, Size: 4]
	Pawn* CharacterOwner;//[Offset: 0x54, Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	float LastRenderTime;//[Offset: 0x5c, Size: 4]
	Vector2D RenderPosition;//[Offset: 0x60, Size: 8]
	Vector2D RenderSize;//[Offset: 0x68, Size: 8]
	float RenderScale;//[Offset: 0x70, Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x74, Size: 8]
	Canvas* Canvas;//[Offset: 0x7c, Size: 4]
	float AspectScale;//[Offset: 0x80, Size: 4]
	Vector2D CanvasClip;//[Offset: 0x84, Size: 8]
	StructProperty*[] RenderObjectList;//[Offset: 0x8c, Size: 12]
	bool ShouldDraw(bool bShowScores);// 0x24ea064
	void SetHidden(bool bIsHidden);// 0x24e9fdc
	void RenderObj_TextureAt(out HUDRenderObject_Texture TextureObject, float X, float Y, float Width, float Height);// 0x24e9dac
	void RenderObj_Texture(out HUDRenderObject_Texture TextureObject, Vector2D DrawOffset);// 0x24e9c58
	Vector2D RenderObj_TextAt(out HUDRenderObject_Text TextObject, float X, float Y);// 0x24e99a8
	Vector2D RenderObj_Text(out HUDRenderObject_Text TextObject, Vector2D DrawOffset);// 0x24e9740
	void DrawTexture(Texture* Texture, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUL, float MaterialVL, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot, bool bApplyHUDRenderPos);// 0x24e92b4
	Vector2D DrawText(FText Text, float X, float Y, Font* Font, bool bDrawShadow, Vector2D ShadowDirection, LinearColor ShadowColor, bool bDrawOutline, LinearColor OutlineColor, float TextScale, float DrawOpacity, LinearColor DrawColor, byte TextHorzAlignment, byte TextVertAlignment, out const FontRenderInfo RenderInfo);// 0x24e8c74
	void DrawMaterial(MaterialInterface* Material, float X, float Y, float Width, float Height, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float DrawOpacity, LinearColor DrawColor, Vector2D RenderOffset, float Rotation, Vector2D RotPivot);// 0x24e8848
	void DrawAllRenderObjects(float DeltaTime, Vector2D DrawOffset);// 0x24e878c
	void Draw(float DeltaTime);// 0x2411008
	LinearColor ApplyHUDColor(LinearColor DrawColor);// 0x24e86f0

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 1]
	Vector MarkerPosition;//[Offset: 0x38c, Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	int HideCrosshairByStyleNum;//[Offset: 0x39c, Size: 4]
	bool bDrawCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	HitPerformData HitPerform;//[Offset: 0x3a4, Size: 116]
	Texture2D* HUDMainTexture;//[Offset: 0x418, Size: 4]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x41c, Size: 4]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x420, Size: 4]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x424, Size: 12]
	HUDWidgetBase*[] HudWidgets;//[Offset: 0x430, Size: 12]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x43c, Size: 4]
	CanvasIcon WORLDMAP;//[Offset: 0x440, Size: 20]
	bool IsDrawSpread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	float DateDrawOffsetX;//[Offset: 0x474, Size: 4]
	void UpdateDamageNumberPar();// 0x271e150
	void SubStyleCrosshairHide();// 0x271e130
	void SetDrawCrosshair(bool InDrawCrossHair);// 0x271e0b4
	void OnAsyncLoadingFinished();// 0x271e0a0
	LinearColor GetPlayerNameColorByTeamID(int TeamID);// 0x271e00c
	LinearColor GetColorByTeamID(int TeamID);// 0x271df78
	void EnableCrosshair(bool bEnable);// 0x271defc
	void AddStyleCrosshairHide();// 0x271dedc
	void AddHitDamageNumber(float Damage, const Actor* HitTarget, bool IsHeadShot, bool bIsDeadlyShot, int MyTeamID, int EnemyTeamID, int PlayerNumPerTeam);// 0x271dcb0

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0, Size: 12]
	float DefaultSpread;//[Offset: 0xc, Size: 4]
	float SpreadMax;//[Offset: 0x10, Size: 4]
	float AddSpreadScale;//[Offset: 0x14, Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x18, Size: 4]
	float DefaultOffset;//[Offset: 0x1c, Size: 4]
	float DefaultAlpha;//[Offset: 0x20, Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x24, Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x2c, Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x3c, Size: 16]
	LinearColor HitToDeathDrawColor;//[Offset: 0x4c, Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x5c, Size: 4]
	AkAudioEvent* BodyShotSound;//[Offset: 0x60, Size: 4]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x64, Size: 4]
	float CurCrosshairSpread;//[Offset: 0x68, Size: 4]

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0, Size: 4]
	float U;//[Offset: 0x4, Size: 4]
	float V;//[Offset: 0x8, Size: 4]
	float UL;//[Offset: 0xc, Size: 4]
	float VL;//[Offset: 0x10, Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: HUDRenderObject_Texture.HUDRenderObject
	Texture* Atlas;//[Offset: 0x30, Size: 4]
	TextureUVs UVs;//[Offset: 0x34, Size: 16]
	bool bUseTeamColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	LinearColor[] TeamColorOverrides;//[Offset: 0x48, Size: 12]
	bool bIsBorderElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bIsSlateElement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	Vector2D RenderOffset;//[Offset: 0x58, Size: 8]
	float Rotation;//[Offset: 0x60, Size: 4]
	Vector2D RotPivot;//[Offset: 0x64, Size: 8]

--------------------------------
Class: HUDRenderObject
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	float RenderPriority;//[Offset: 0x8, Size: 4]
	Vector2D Position;//[Offset: 0xc, Size: 8]
	Vector2D Size;//[Offset: 0x14, Size: 8]
	LinearColor RenderColor;//[Offset: 0x1c, Size: 16]
	float RenderOpacity;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: TextureUVs
	float U;//[Offset: 0x0, Size: 4]
	float V;//[Offset: 0x4, Size: 4]
	float UL;//[Offset: 0x8, Size: 4]
	float VL;//[Offset: 0xc, Size: 4]

--------------------------------
Class: HUDRenderObject_Text.HUDRenderObject
	FText Text;//[Offset: 0x38, Size: 12]
	Font* Font;//[Offset: 0x44, Size: 4]
	float TextScale;//[Offset: 0x48, Size: 4]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	Vector2D ShadowDirection;//[Offset: 0x50, Size: 8]
	LinearColor ShadowColor;//[Offset: 0x58, Size: 16]
	bool bDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x6c, Size: 16]
	byte HorzPosition;//[Offset: 0x7c, Size: 1]
	byte VertPosition;//[Offset: 0x7d, Size: 1]

--------------------------------
Class: FontRenderInfo
	bool bClipText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEnableShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	DepthFieldGlowInfo GlowInfo;//[Offset: 0x4, Size: 36]

--------------------------------
Class: DepthFieldGlowInfo
	bool bEnableGlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	LinearColor GlowColor;//[Offset: 0x4, Size: 16]
	Vector2D GlowOuterRadius;//[Offset: 0x14, Size: 8]
	Vector2D GlowInnerRadius;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0xe0, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xe4, Size: 4]
	static void ToggleBulletUploadSplit(const bool InUseSplit);// 0x23f4ac0
	void HandleOnWeaponStopFire();// 0x23f4aac
	void HandleOnWeaponStartFire();// 0x23f4a98
	void AddHitData(out const BulletHitInfoUploadData Data, out const LocalShootHitData ShootData);// 0x23f4890

--------------------------------
Class: WeaponVisualBulletClientModeConfigNew
	WeaponVisualBulletCameraModeConfigNew AutonomousClientSetting;//[Offset: 0x0, Size: 72]
	WeaponVisualBulletCameraModeConfigNew OBPawnPerspectiveClientSetting;//[Offset: 0x48, Size: 72]
	WeaponVisualBulletItemConfigNew DefaultSetting;//[Offset: 0x90, Size: 24]

--------------------------------
Class: WeaponVisualBulletCameraModeConfigNew
	WeaponVisualBulletItemConfigNew FPPSetting;//[Offset: 0x0, Size: 24]
	WeaponVisualBulletItemConfigNew TPPSetting;//[Offset: 0x18, Size: 24]
	WeaponVisualBulletItemConfigNew GunADSSetting;//[Offset: 0x30, Size: 24]

--------------------------------
Class: WeaponVisualBulletItemConfigNew
	SoftObjectPath BulletTrackEffectPath;//[Offset: 0x0, Size: 24]

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<enum,AkAudioEvent*> ShootModeFireShotSoundDataMap;//[Offset: 0x124, Size: 60]
	bool EnableShakeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x164, Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x168, Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x16c, Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x170, Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x174, Size: 4]
	float CameraShakFalloff;//[Offset: 0x178, Size: 4]
	ParticleSystem* MuzzleFX;//[Offset: 0x17c, Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x180, Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x18c, Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x190, Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x19c, Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x1a0, Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x1ac, Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x1bc, Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x1c0, Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x1cc, Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x1d0, Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x1dc, Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x1e0, Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x1ec, Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x1fc, Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x200, Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x20c, Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x210, Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x21c, Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x220, Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x22c, Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x23c, Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x240, Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x24c, Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x250, Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x25c, Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x260, Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x270, Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x274, Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x280, Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x284, Size: 12]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x290, Size: 4]
	Vector MaxMuzzleFxScaleThreshold;//[Offset: 0x294, Size: 12]
	Vector MaxMuzzleFxScaleCorrection;//[Offset: 0x2a0, Size: 12]
	float MaxMuzzleFxDistanceScaleCorrection;//[Offset: 0x2ac, Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x2b0, Size: 4]
	AkAudioEvent* FiringPinSound;//[Offset: 0x2b4, Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x2b8, Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x2bc, Size: 4]
	Vector MuzzleFXOriginalScale;//[Offset: 0x2c0, Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x2cc, Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x2d0, Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x2d4, Size: 4]
	OBEffectBullet*[] OBEffectBulletsCachePool;//[Offset: 0x2e8, Size: 12]
	void RecycleOBEffectBullet(OBEffectBullet* Bullet);// 0x236ffe8
	void OnWeaponUnEquiped();// 0x25d7bb0
	void OnWeaponEuiped();// 0x25d7b9c
	void MarkAKBankLoadAsync(out Package*[] OutPackageList);// 0x25d7afc
	void HandleWeaponAction(byte Action);// 0x256f2d0
	OBEffectBullet* GetOBEffectBullet();// 0x25d7ad4
	int GetAvailableOBEffectBulletNum();// 0x25d7aac
	void ActiveLocalShellDropFX();// 0x25d7a98

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent*> SoundDataMap;//[Offset: 0xe0, Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0x11c, Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x120, Size: 4]
	void HandleWeaponAction(byte Action);// 0x256f2d0

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x2e4, Size: 4]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x2e8, Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x2f8, Size: 4]
	float CurMovingTime;//[Offset: 0x324, Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x328, Size: 4]
	CurveFloat* SizeScaleCurve;//[Offset: 0x32c, Size: 4]

--------------------------------
Class: Package.Object

--------------------------------
Class: ShootWeaponAutoTestHandle.Object
	FString GenerateBulletsImpactJsonStringAndClearData();// 0x25d778c

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	float ShootRateCheckInterval;//[Offset: 0x104, Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0x10c, Size: 4]
	bool ShootHitTargetIntervalCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0x114, Size: 4]
	bool bCheckParachuteHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	float MaxParachuteHeightDist;//[Offset: 0x11c, Size: 4]
	float MaxParachutePlaneDist;//[Offset: 0x120, Size: 4]
	float DeCon6SpanTime;//[Offset: 0x160, Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x168, Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x16c, Size: 4]
	float ShootTimeGunPosBigCircle;//[Offset: 0x170, Size: 4]
	float ShootTimeGunPosZThres;//[Offset: 0x174, Size: 4]
	float ShootTimeGunPosMaxForwadDifNew;//[Offset: 0x178, Size: 4]
	float ShootTimeGunPosForwardAdditionalVehicle;//[Offset: 0x17c, Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x180, Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x184, Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x188, Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c, Size: 1]
	float TimeLineCheckDnBorders;//[Offset: 0x190, Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x194, Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x198, Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x1a0, Size: 4]
	float MuzzleDiffTorelate;//[Offset: 0x1a4, Size: 4]
	float ShortDirReverseDistance;//[Offset: 0x1a8, Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x1ac, Size: 4]
	float MaxFootRoot;//[Offset: 0x1b0, Size: 4]

--------------------------------
Class: BulletHitInfoRepData
	Vector ImpactPoint;//[Offset: 0x0, Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc, Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x18, Size: 12]
	int8 SurfaceType;//[Offset: 0x24, Size: 1]
	Actor* Actor;//[Offset: 0x28, Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x30, Size: 8]
	int ClientTimeStamp;//[Offset: 0x38, Size: 4]
	byte HitBodyType;//[Offset: 0x3c, Size: 1]
	byte bIsUnderWater;//[Offset: 0x3d, Size: 1]

--------------------------------
Class: ShootWeaponDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	byte AvatarDamagePosition;//[Offset: 0xa4, Size: 1]
	uint32 ShootID;//[Offset: 0xa8, Size: 4]
	float DamageImpulse;//[Offset: 0xc0, Size: 4]

--------------------------------
Class: VehicleWeaponReconnectData
	uint32 RecconectIndex;//[Offset: 0x0, Size: 4]
	WeaponSyncData SyncData;//[Offset: 0x4, Size: 8]

--------------------------------
Class: WeaponSyncData
	uint32 ShootID;//[Offset: 0x0, Size: 4]
	uint32 ClipID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SecurityLogHitTargetInfo

--------------------------------
Class: WeaponTriggerEventHandleSkill.WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x27308e0
	static int[] GetWeaponSkillIDList(STExtraWeapon* Weapon);// 0x27d7988

--------------------------------
Class: WeaponTriggerEventHandleBase.WeaponLogicBaseComponent.ActorComponent.Object
	void ProcessTriggerEventInternal(enum Event);// 0x27308e0
	void ProcessTriggerEvent(enum Event);// 0x256f2d0

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0xe0, Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0xe4, Size: 4]
	<enum,WeaponStateBase*> StateMap;//[Offset: 0xe8, Size: 60]
	WeaponStateBase* GetCurrentState();// 0x242981c
	enum GetCurrentFreshWeaponStateType();// 0x27d6c94

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	bool bCanEnterAnyState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	delegate OnBeginState;//[Offset: 0xe4, Size: 12]
	delegate OnEndState;//[Offset: 0xf0, Size: 12]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	enum FreshWeaponStateType;//[Offset: 0xfd, Size: 1]
	enum[] ConditionGateMap;//[Offset: 0x100, Size: 12]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	delegate OnAttrModified;//[Offset: 0xfc, Size: 12]
	bool bIsResBunchModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	DataTable* AttrDataTable;//[Offset: 0x10c, Size: 4]
	int AttrGroup;//[Offset: 0x110, Size: 4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x114, Size: 12]
	AttrModifyGroupItem[] ConfigAttrModifyGroupList;//[Offset: 0x120, Size: 12]
	byte[] AttrModifyStateList;//[Offset: 0x12c, Size: 12]
	byte[] AttrModifyGroupStateList;//[Offset: 0x138, Size: 12]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0x144, Size: 12]
	AttrModifyItem[] DynamicModifierList;//[Offset: 0x150, Size: 12]
	AttrModifyItem[] DynamicModifierClientList;//[Offset: 0x15c, Size: 12]
	AttrModifyItem_ID[] DynamicModifierRepList_WithID;//[Offset: 0x168, Size: 12]
	<FName,AttrRegisterItem> AttrRegisterItemMap;//[Offset: 0x18c, Size: 60]
	bool UpdateRegisteredModifyAbleAttr(out const AttrRegisterItem AttrRegistItem);// 0x2869ad0
	bool UnregisterModifyAbleAttr(out const FString[] AttrRegists);// 0x28699fc
	void UnRegisterAllModifyAbleAttr();// 0x28699e8
	void SetValueToAttributeSafety(FString AttrName, float Value);// 0x2869914
	void SetAttributeGroup(int InGroup, bool InRegister);// 0x2869850
	bool ReplaceModifyAbleAttr(AttrRegisterItem AttrRegist);// 0x2869674
	void RemoveDynamicModifier(FString AttrModifyId, int IntAttrModifyID);// 0x28695a0
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x2869410
	bool RegisterAttributesFromTable(int InGroup);// 0x2869390
	void OnRep_DynamicModifierList_IDs();// 0x286937c
	void OnRep_DynamicModifierList();// 0x234fed4
	void OnRep_AttrModifyStateList();// 0x236bc90
	void OnRep_AttrModifyGroupStateList();// 0x234fef0
	void OnBatchResLoaded__DelegateSignature(int ReqID, FString AttrName);// 0x46f6b154
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x46f6b154
	bool HasDynamicModifier(FString AttrModifyId);// 0x28692e4
	AttrModifyItem[] GetDynamicModifierRepList();// 0x28692c8
	bool GetAttrModifyItemByItemName(FString AttrModifyItemName, out AttrModifyItem OutItem);// 0x2869124
	float GetAttributeValueMax(FString AttrName);// 0x286908c
	float GetAttributeValue(FString AttrName);// 0x2868ff4
	void EnableAttrModifiers(out const FString[] AttrModifyItemNames, bool bForceNetUpdate, FString ModifierSuffix);// 0x2868e74
	bool EnableAttrModifier(FString AttrModifyItemName, bool bForceNetUpdate);// 0x2868d90
	bool EnableAllAttrModifier();// 0x2868d68
	bool DisableModifierToActor(Actor* TargetActor);// 0x2868ce8
	void DisableAttrModifiers(out const FString[] AttrModifyItemNames, bool bForceNetUpdate, FString ModifierSuffix);// 0x2868b68
	bool DisableAttrModifier(FString AttrModifyItemName, bool bForceNetUpdate);// 0x2868a84
	bool DisableAllAttrModifier(bool bRecycled);// 0x28689fc
	void AddValueToAttribute(FString AttrName, float Value);// 0x2868928
	void AddDynamicModifier(AttrModifyItem AttrModifyItem);// 0x2868778
	void AddConfigAttrModifyItem(out const AttrModifyItem NewItem);// 0x2868638

--------------------------------
Class: AttrModifyGroupItem
	AttrModifyItem[] AttrModifyItem;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AttrModifyItem_ID
	int ModifyItemID;//[Offset: 0x0, Size: 4]
	AttrModifyItem_ID_CacheAffactTargetInfo[] AttrModifyItem_ID_CacheAffactTargetInfo;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AttrModifyItem_ID_CacheAffactTargetInfo
	CacheAffactTargetInfo[] AffactTargetInfo;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AttrRegisterItem
	FName AttrName;//[Offset: 0x0, Size: 8]
	enum AttrVariableType;//[Offset: 0x8, Size: 1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	Object* OriginalRes;//[Offset: 0xc, Size: 4]
	Object* Owner;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 12]
	Actor* AffectedActor;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WeaponAttrModifyConfig
	FString ModifyConfigID;//[Offset: 0x0, Size: 12]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xb8, Size: 520]
	class AnimInstance* AnimBP;//[Offset: 0x2c0, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x2c8, Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x2f0, Size: 12]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x2fc, Size: 12]
	BackpackComponent* BackpackComp;//[Offset: 0x308, Size: 4]
	bool bCacheNotifyRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	void ReturnWeaponAdditionalBulletsToBackpack(STExtraShootWeapon* Weapon, int BulletNum);// 0x23aff68
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x23aff4c
	bool IsVirtualAvatarHandle();// 0x23aff1c
	bool IsAvatarOf(int resID);// 0x23afe94
	void HandleDisuseReplaceByNew(BackpackWeaponAttachHandle* NewHandle);// 0x23afe1c
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x23afd74
	int GetSubSlotID();// 0x23ad448
	FString GetSTMeshPath();// 0x23afce4
	int GetSlotID();// 0x2395dac
	FString GetSKMeshPath();// 0x23afc54
	ItemDefineID GetReadyPakItemDefineID();// 0x23afc00
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x23afba8
	void GetMeshPackCfg(out WeaponMeshCfg meshCfg);// 0x23af9f0
	WeaponAttachmentConfig GetAttachmentConfig();// 0x23af998
	SoftObjectPath GetAnimationBPAsset();// 0x23af938
	class Object GetAnimationBP();// 0x23af908
	bool EquipOrUnEuipAttachment(STExtraShootWeapon* InWeapon, bool IsEquip, enum Reason);// 0x23af7f4

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 12]
	enum AttachmentSocketType;//[Offset: 0xc, Size: 1]
	enum subSlot;//[Offset: 0xd, Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	int ExtendMaxBulletNumInOneClipID;//[Offset: 0x10, Size: 4]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x18, Size: 12]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x24, Size: 12]
	<int,FName> socketTypeToName;//[Offset: 0x30, Size: 60]
	WeaponMeshCfg MeshPackage;//[Offset: 0x70, Size: 344]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1c8, Size: 12]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x1d4, Size: 12]
	AnimationAsset*[] AttachmentAnimListClass;//[Offset: 0x1e0, Size: 12]
	ItemDefineID ParentID;//[Offset: 0x1f0, Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 12]
	enum Op;//[Offset: 0xc, Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float ModifyValue;//[Offset: 0x10, Size: 4]
	Object* ModifyResValue;//[Offset: 0x18, Size: 40]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0, Size: 12]
	FText DescValue;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 12]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 344]
	int replacedAttachmentMatIndex;//[Offset: 0x168, Size: 4]

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0, Size: 1]
	int PendantIndex;//[Offset: 0x4, Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10, Size: 96]
	bool OverrideLocalJoinOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	Vector LocalJoinOffset;//[Offset: 0x74, Size: 12]
	Vector LocalOffset;//[Offset: 0x80, Size: 12]

--------------------------------
Class: WeaponPendantMap
	int WeaponID;//[Offset: 0x0, Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WeaponAttachmentSlot
	int TypeSpecificID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: STExtraVehicleWeaponsOnSeat
	VehicleShootWeapon*[] WeaponsOnSeat;//[Offset: 0x0, Size: 12]

--------------------------------
Class: STExtraVehicleAttachment
	FName AttachSocket;//[Offset: 0x0, Size: 8]
	class VehicleAttachmentBase* VehicleAttachementClass;//[Offset: 0x8, Size: 4]

--------------------------------
Class: VehicleAttachmentBase.Actor.Object
	bool bEnableModifyHitDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	float HitSelfModifier;//[Offset: 0x2f0, Size: 4]
	float HitSelfImpactReduce;//[Offset: 0x2f4, Size: 4]
	float HitOthersModifier;//[Offset: 0x2f8, Size: 4]
	float HitOthersImpactRaise;//[Offset: 0x2fc, Size: 4]
	float HitCharacterModifier;//[Offset: 0x300, Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0xd0, Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0xd4, Size: 4]
	float MaxLaunchVelocityFactorOnHitCharacter;//[Offset: 0xd8, Size: 4]
	float ImpactModifier;//[Offset: 0xdc, Size: 4]
	float ImpactAbsorption;//[Offset: 0xe0, Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0xe4, Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0xe8, Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0xec, Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0xf0, Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0xf4, Size: 4]
	class Actor[] HitIgnoreClasses;//[Offset: 0xf8, Size: 12]
	bool PushCharacterSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	float PushCharacterForwardVectorStrength;//[Offset: 0x108, Size: 4]
	float PushCharacterRightVectorStrength;//[Offset: 0x10c, Size: 4]
	float PushCharacterTopVectorStrength;//[Offset: 0x110, Size: 4]
	float ApplyImpluseSpeed;//[Offset: 0x114, Size: 4]
	<Actor*,float> VehicleImpluseCharacterTimes;//[Offset: 0x118, Size: 60]
	float VehicleImpluseCharacterCooldownTime;//[Offset: 0x154, Size: 4]
	TimeCoolDown HitCharacterDamageCD;//[Offset: 0x158, Size: 8]
	TimeCoolDown HitDamageSelfCD;//[Offset: 0x160, Size: 8]
	float HitDamageSelfMaxFactor;//[Offset: 0x168, Size: 4]
	float HitDamagePassengerMaxHP;//[Offset: 0x16c, Size: 4]
	bool bApplyDamageToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0x174, Size: 4]
	class DamageType* VehicleDamageTypeClass;//[Offset: 0x178, Size: 4]
	float ExplosionBaseDamage;//[Offset: 0x17c, Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0x180, Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x184, Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x188, Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x18c, Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x190, Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x194, Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	<Actor*,float> VehicleDamageCharacterTimes;//[Offset: 0x19c, Size: 60]
	bool bProcessVehicleDamageCharacterOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 1]
	float VehicleDamageCharacterCooldownTime;//[Offset: 0x1dc, Size: 4]
	float HitStoneVelocityDamp;//[Offset: 0x1e0, Size: 4]
	bool bEnabledMobHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	CurveFloat* HitMobDamageCurve;//[Offset: 0x1e8, Size: 4]
	CurveFloat* HitMobVelocityCurve;//[Offset: 0x1ec, Size: 4]
	byte[] MobObjectTypes;//[Offset: 0x1f0, Size: 12]
	float MaxAllowedMobHitDistanceSq;//[Offset: 0x1fc, Size: 4]
	bool bUseProciseHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	float TestHitMobInterval;//[Offset: 0x204, Size: 4]
	float HitMobFeedBackBase;//[Offset: 0x208, Size: 4]
	float HitMobOwnFeedBack;//[Offset: 0x20c, Size: 4]
	float PlayHitMobFXInternal;//[Offset: 0x210, Size: 4]
	float PlayHitMobSpeedThreshold;//[Offset: 0x214, Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x220, Size: 64]
	Actor*[] LastOverlapTickKey;//[Offset: 0x360, Size: 12]
	<Actor*,float> CustomImpulseHitTimes;//[Offset: 0x3bc, Size: 60]
	bool bProcessCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool bOnlyPlayerCustomImpulseHitsOnCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	float CustomImpulseCooldownTime;//[Offset: 0x3fc, Size: 4]
	<FString,VehicleCustomImpulse> CustomImpulseComponentMap;//[Offset: 0x400, Size: 60]
	VehicleCustomImpulseFilter mFilter;//[Offset: 0x43c, Size: 32]
	void SendMobHitToServer(const STExtraSimpleCharacter*[] InMobArr);// 0x27a14a4
	void SendHitDamagedActorToServer(DamageableActor* DamageableActor, const RigidBodyState InHitBodyState);// 0x27a1360
	void SendHitDamagedActorInterfaceToServer(Actor* InActor, const RigidBodyState InHitBodyState);// 0x27a1210
	void SendHitCaveStoneToServer(Actor* OtherActor, const RigidBodyState InHitBodyState);// 0x27a10c0
	void OnCustomImpulseComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x27a0ee8
	void HandleOnVehicleHit(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x27a0d70
	void ClientMobFeedback(float InVal);// 0x27a0cbc

--------------------------------
Class: TimeCoolDown
	float IntervalTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0, Size: 12]
	Quat Quaternion;//[Offset: 0x10, Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20, Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c, Size: 12]
	byte Flags;//[Offset: 0x38, Size: 1]

--------------------------------
Class: VehicleCustomImpulse
	class Actor[] IgnoreClasses;//[Offset: 0x0, Size: 12]
	VehicleCustomImpulseFilter[] ImpulseFilters;//[Offset: 0xc, Size: 12]
	class DamageType* DamageType;//[Offset: 0x18, Size: 4]
	bool bApplyImpulseWhileDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bApplyImpulseWhileStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bUseHitActorAsDamageInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]

--------------------------------
Class: VehicleCustomImpulseFilter
	class Actor* ImpulseAbsorberType;//[Offset: 0x0, Size: 4]
	bool bApplyRadialImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyImpulseAsVelocityChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	float MaxDamagingImpulseMagnituge;//[Offset: 0x8, Size: 4]
	float MaxImpulseDamage;//[Offset: 0xc, Size: 4]
	float ImpulseStrength;//[Offset: 0x10, Size: 4]
	float RadialImpulseStrength;//[Offset: 0x14, Size: 4]
	float ImpulseRadius;//[Offset: 0x18, Size: 4]
	byte ImpulseFalloffType;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: DamageableActor.UAERegionActor.Actor.Object
	void SetTargetDamageRateMap(<enum,float> InTargetDamageRateMap);// 0x2434c30
	int GetVehicleDamagedSpeed();// 0x46f6b154
	int GetVehicleDamagedCoefficient();// 0x46f6b154
	<enum,float> GetTargetDamageRateMap();// 0x2434a80
	float CPP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x24348fc
	bool CPP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x2434874
	bool CPP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x24346c4
	float CPP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x2434618
	float CPP_GetDamageRateByTarget(Actor* Target);// 0x2434590
	enum[] CPP_GetDamageableGameObjectType();// 0x24344f4
	bool CPP_GetCanBePicked();// 0x24344c4
	FName CPP_GetBulletBlockComponentTag();// 0x243447c
	float CPP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x24343d0
	float CPP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x2434304
	float CPP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x2434210
	float BP_PreTakeDamage(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x46f6b154
	bool BP_JudgeComponentBlockBullet(PrimitiveComponent* Comp);// 0x46f6b154
	bool BP_GetPickingBoundingBox(out Vector Center, out Vector Extent, out Rotator Rotation, out float Distance);// 0x46f6b154
	float BP_GetMaxHP();// 0x46f6b154
	float BP_GetDamageRateFromDamageEvent(out const DamageEvent DamageEvent);// 0x46f6b154
	float BP_GetDamageRateByTarget(Actor* Target);// 0x46f6b154
	enum[] BP_GetDamageableGameObjectType();// 0x46f6b154
	float BP_GetCurrentHP();// 0x46f6b154
	bool BP_GetCanBePicked();// 0x46f6b154
	FName BP_GetBulletBlockComponentTag();// 0x46f6b154
	float BP_GetAdditionaAbsoluteDamageFromDamageEvent(out const DamageEvent DamageEvent);// 0x46f6b154
	float BP_CalcFinalMomentum(class DamageType DamageTypeClass, float BaseMomentun);// 0x46f6b154
	float BP_CalcFinalDamageRate(out const DamageEvent DamageEvent, Actor* Attacker);// 0x46f6b154

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0xd0, Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0xdc, Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0xe8, Size: 12]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0xf4, Size: 12]
	delegate VehicleChargingStateChangedDelegate;//[Offset: 0x100, Size: 12]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0x10c, Size: 12]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0x118, Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool ShouldShowVehicleHp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	float HPMax;//[Offset: 0x128, Size: 4]
	float HP;//[Offset: 0x12c, Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0x130, Size: 12]
	bool bInCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d, Size: 1]
	bool ShouldShowVehicleFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e, Size: 1]
	float FuelMax;//[Offset: 0x140, Size: 4]
	float Fuel;//[Offset: 0x144, Size: 4]
	float FuelConsumeFactor;//[Offset: 0x148, Size: 4]
	MaterialDamage[] MaterialDamageConfig;//[Offset: 0x14c, Size: 12]
	Actor* LastHitCauser;//[Offset: 0x158, Size: 4]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x15c, Size: 12]
	void VehicleTakeDamage(float Damage, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x279eb78
	void TakeDamageByHitPart(float Damage, byte HitPart, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x279e974
	void TakeDamageByBoneName(float Damage, out const FName BoneName, bool IgnoreWheels, Controller* Instigator, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x279e758
	void RPC_Multicast_VehicleWheelTakeDamage(float Damage, int LeftHP, int LeftWheelHP, int DamageType, Actor* DamageCauser);// 0x279e5c0
	void RPC_Multicast_VehicleTakeDamage(float Damage, int LeftHP, int DamageType, Actor* DamageCauser);// 0x279e470
	void RefreshWheelState();// 0x279e45c
	void OnRep_WheelsCurrentHP();// 0x279e448
	void OnRep_InCharging();// 0x279e434
	void OnRep_HP();// 0x279e420
	void OnRep_Fuel();// 0x279e40c
	bool NoFuel();// 0x279e3e4
	void Maintenance(float addpercenthp, bool FixTire);// 0x279e320
	bool IsDontDamage();// 0x24dbc14
	bool IsDontConsumeFuel();// 0x279e304
	bool IsDestroyed();// 0x279e2dc
	int GetWheelsHPNum();// 0x279e2b4
	float GetWheelHPMax(int WheelIdx);// 0x279e234
	float GetWheelHP(int WheelIdx);// 0x279e1b4
	float GetVehicleHPMax();// 0x279e18c
	float GetVehicleHP();// 0x279e164
	float GetFuelMax();// 0x279e13c
	float GetFuelConsumeFactor();// 0x279e114
	float GetFuel();// 0x279e0ec

--------------------------------
Class: MaterialDamage
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 4]
	float DamageScale;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0, Size: 4]
	bool DontDamageWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	OceanManager* OceanManager;//[Offset: 0x240, Size: 4]
	float MeshDensity;//[Offset: 0x244, Size: 4]
	float FluidDensity;//[Offset: 0x248, Size: 4]
	float FluidLinearDamping;//[Offset: 0x24c, Size: 4]
	float FluidAngularDamping;//[Offset: 0x250, Size: 4]
	Vector VelocityDamper;//[Offset: 0x254, Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x264, Size: 4]
	float TestPointRadius;//[Offset: 0x268, Size: 4]
	Vector[] TestPoints;//[Offset: 0x26c, Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27a, Size: 1]
	float[] PointDensityOverride;//[Offset: 0x27c, Size: 12]
	StructBoneOverride[] BoneOverride;//[Offset: 0x288, Size: 12]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	bool DrawDebugSeaLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296, Size: 1]
	float StayUprightStiffness;//[Offset: 0x298, Size: 4]
	float StayUprightDamping;//[Offset: 0x29c, Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x2a0, Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x2b0, Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x2b4, Size: 4]
	byte TickGroup;//[Offset: 0x2b8, Size: 1]
	bool EnableCustomWaveForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	Vector CustomWaveForceTestPointOffset;//[Offset: 0x2bc, Size: 12]
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x2c8, Size: 12]
	PhysicsConstraintComponent* UprightConstraintComp;//[Offset: 0x478, Size: 4]
	void TickBuoyancyForce(float DeltaTime);// 0x254e304
	void NativeSetEnableCustomWaveForce(bool bEnable);// 0x54d3fec
	bool IsEntirelyUnderWater();// 0x54d3fb4
	bool IsContactedWater();// 0x54d3f8c
	void EndableUprightConstraint(bool bEnable);// 0x54d3f0c
	bool CheckPointInWater(Vector Point, bool isWorldPosition);// 0x54d3e30

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	Vector GlobalWaveDirection;//[Offset: 0x2e8, Size: 12]
	float GlobalWaveSpeed;//[Offset: 0x2f4, Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x2f8, Size: 4]
	float DistanceCheckAbove;//[Offset: 0x2fc, Size: 4]
	float DistanceCheckBelow;//[Offset: 0x300, Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x304, Size: 12]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x310, Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x31c, Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	float ModulationStartHeight;//[Offset: 0x324, Size: 4]
	float ModulationMaxHeight;//[Offset: 0x328, Size: 4]
	float ModulationPower;//[Offset: 0x32c, Size: 4]
	Landscape* Landscape;//[Offset: 0x330, Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x334, Size: 4]
	bool bShouldCorrectTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	float CorrectTimeInterval;//[Offset: 0x35c, Size: 4]
	float ReplicatedWorldRealTimeSeconds;//[Offset: 0x364, Size: 4]
	float ServerWorldRealTimeSecondsDelta;//[Offset: 0x368, Size: 4]
	delegate OnReplicatedWorldRealTimeSeconds;//[Offset: 0x36c, Size: 12]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	Box[] WaterBoxes;//[Offset: 0x37c, Size: 12]
	bool bEnableWaterTransformModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	Transform[] WaterTransforms;//[Offset: 0x390, Size: 12]
	Vector[] WaterBoxExtends;//[Offset: 0x39c, Size: 12]
	void OnRep_ReplicatedWorldRealTimeSeconds();// 0x54d5430
	void LoadLandscapeHeightmap(Texture2D* Tex2D);// 0x54d53b8
	LinearColor GetHeightmapPixel(float U, float V);// 0x54d52e8

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0, Size: 4]
	float Length;//[Offset: 0x4, Size: 4]
	float Amplitude;//[Offset: 0x8, Size: 4]
	float Steepness;//[Offset: 0xc, Size: 4]
	float TimeScale;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0, Size: 20]
	WaveParameter Wave02;//[Offset: 0x14, Size: 20]
	WaveParameter Wave03;//[Offset: 0x28, Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c, Size: 20]
	WaveParameter Wave05;//[Offset: 0x50, Size: 20]
	WaveParameter Wave06;//[Offset: 0x64, Size: 20]
	WaveParameter Wave07;//[Offset: 0x78, Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c, Size: 20]

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0, Size: 8]
	float Density;//[Offset: 0x8, Size: 4]
	float TestRadius;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WaterBoxComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AcceptHigherZ;//[Offset: 0x570, Size: 4]
	Vector Direction;//[Offset: 0x574, Size: 12]
	float SpeedValue;//[Offset: 0x580, Size: 4]
	float WaveForceMultiplier;//[Offset: 0x584, Size: 4]
	TrippleWaveParameter[] TrippleWaveClusters;//[Offset: 0x588, Size: 12]
	float TimeScaleOffset;//[Offset: 0x594, Size: 4]
	float Offset;//[Offset: 0x598, Size: 4]
	bool UseSplineDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c, Size: 1]
	float SpeedAttenuationFromSpline;//[Offset: 0x5a0, Size: 4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4, Size: 1]
	float ZOffset;//[Offset: 0x5a8, Size: 4]
	float CellSizeX;//[Offset: 0x5ac, Size: 4]
	float CellSizeY;//[Offset: 0x5b0, Size: 4]
	<float,WaterBoxCell> Cells;//[Offset: 0x5b4, Size: 60]
	int KeyFactor;//[Offset: 0x5f0, Size: 4]

--------------------------------
Class: TrippleWaveParameter
	WaveParameter WaveCluster0;//[Offset: 0x0, Size: 20]
	WaveAdjust WaveAdjust0;//[Offset: 0x14, Size: 8]
	WaveParameter WaveCluster1;//[Offset: 0x1c, Size: 20]
	WaveAdjust WaveAdjust1;//[Offset: 0x30, Size: 8]
	WaveParameter WaveCluster2;//[Offset: 0x38, Size: 20]
	WaveAdjust WaveAdjust2;//[Offset: 0x4c, Size: 8]

--------------------------------
Class: WaveAdjust
	float TimeScaleOffset;//[Offset: 0x0, Size: 4]
	float Offset;//[Offset: 0x4, Size: 4]

--------------------------------
Class: WaterBoxCell
	Vector WaveDirection;//[Offset: 0x0, Size: 12]
	float WaveZ;//[Offset: 0xc, Size: 4]
	Vector PushForceDirection;//[Offset: 0x10, Size: 12]
	float Speed;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x240, Size: 4]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x248, Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x250, Size: 4]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x258, Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x270, Size: 4]
	delegate OnConstraintBroken;//[Offset: 0x274, Size: 12]
	ConstraintInstance ConstraintInstance;//[Offset: 0x280, Size: 416]
	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x4a27754
	void SetOrientationDriveSLERP(bool bEnableSLERP);// 0x4a276d4
	void SetLinearZLimit(byte ConstraintType, float LimitSize);// 0x4a27618
	void SetLinearYLimit(byte ConstraintType, float LimitSize);// 0x4a2755c
	void SetLinearXLimit(byte ConstraintType, float LimitSize);// 0x4a274a0
	void SetLinearVelocityTarget(out const Vector InVelTarget);// 0x4a27410
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x4a272f0
	void SetLinearPositionTarget(out const Vector InPosTarget);// 0x4a27260
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);// 0x4a27140
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x4a27040
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);// 0x4a26f78
	void SetDisableCollision(bool bDisableCollision);// 0x4a26ef8
	void SetConstraintReferencePosition(byte Frame, out const Vector RefPosition);// 0x4a26e24
	void SetConstraintReferenceOrientation(byte Frame, out const Vector PriAxis, out const Vector SecAxis);// 0x4a26cf0
	void SetConstraintReferenceFrame(byte Frame, out const Transform RefFrame);// 0x4a26bd0
	void SetConstrainedComponents(PrimitiveComponent* Component1, FName BoneName1, PrimitiveComponent* Component2, FName BoneName2);// 0x4a26a70
	void SetAngularVelocityTarget(out const Vector InVelTarget);// 0x4a269e0
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);// 0x4a26910
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);// 0x4a26890
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x4a267c0
	void SetAngularTwistLimit(byte ConstraintType, float TwistLimitAngle);// 0x4a26704
	void SetAngularSwing2Limit(byte MotionType, float Swing2LimitAngle);// 0x4a26648
	void SetAngularSwing1Limit(byte MotionType, float Swing1LimitAngle);// 0x4a2658c
	void SetAngularOrientationTarget(out const Rotator InPosTarget);// 0x4a26508
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);// 0x4a26438
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);// 0x4a26338
	void SetAngularDriveMode(byte DriveMode);// 0x4a262c0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);// 0x4a261f8
	bool IsBroken();// 0x4a261d0
	float GetCurrentTwist();// 0x4a261a8
	float GetCurrentSwing2();// 0x4a26180
	float GetCurrentSwing1();// 0x4a26158
	void GetConstraintForce(out Vector OutLinearForce, out Vector OutAngularForce);// 0x4a26068
	void BreakConstraint();// 0x4a26054

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0xd0, Size: 12]
	float MinCorrectionInterval;//[Offset: 0xdc, Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0xe0, Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xe4, Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xe8, Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0xec, Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0xf0, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0xf4, Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0xf8, Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0xfc, Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0x100, Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0x104, Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0x108, Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0x10c, Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0x110, Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x114, Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	float StaticFixLocation;//[Offset: 0x11c, Size: 4]
	float StaticFixAngel;//[Offset: 0x120, Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x124, Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x128, Size: 4]
	bool UseLegacySimulatedCorrectStrategy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	float MaxSimulatedCorrectTimer;//[Offset: 0x130, Size: 4]
	int MaxSimulatedCorrectFailCount;//[Offset: 0x134, Size: 4]
	float SimulatedCorrectZ;//[Offset: 0x138, Size: 4]
	bool SimulatedCorrectConsiderVehicleAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x143, Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool SendServerMoveToClientUseAllServerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	bool SendServerMoveToClientWithLinkMeshUseAllServerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146, Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x148, Size: 4]
	bool NeedSendGravityZAndDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	bool CheckGravityAndDeltaValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	float DefaultGravityZ;//[Offset: 0x150, Size: 4]
	float DefaultGravityDelta;//[Offset: 0x154, Size: 4]
	float ClientMinDeltaTime;//[Offset: 0x158, Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x280, Size: 60]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x27ab574
	void SendServerMoveToClientWithLinkMesh(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, const Vector_NetQuantize100 LinkMeshServerLocation, const Vector_NetQuantize100 LinkMeshServerLinearVelocity, const Vector_NetQuantizeNormal LinkMeshServerRotator, const Vector_NetQuantize100 LinkMeshServerAngularVelocity, bool bIsSnap);// 0x27ab234
	void SendServerMoveToClient(int InCorrectionId, const Vector_NetQuantize100 ServerLocation, const Vector_NetQuantize100 ServerLinearVelocity, const Vector_NetQuantizeNormal ServerRotator, const Vector_NetQuantize100 ServerAngularVelocity, bool bIsSnap);// 0x27ab038
	void SendClientMoveToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x27aae00
	void SendClientMoveToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity);// 0x27aabc8
	int SendClientMoveToServerInternal(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity, const bool InShouldDelay);// 0x27aa93c
	void SendClientMoveToServer_WithDelay(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x27aa700
	int SendClientMoveToServer_DoWork(int InCorrectionId, float TimeStamp, out const Vector_NetQuantize100 ClientLocation, out const Vector_NetQuantize100 ClientLinearVelocity, out const Vector_NetQuantizeNormal ClientRotator, out const Vector_NetQuantize100 ClientAngularVelocity);// 0x27aa4c0
	void SendClientHitToServerUnreliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x27aa19c
	void SendClientHitToServerReliably(int InCorrectionId, float TimeStamp, const Vector_NetQuantize100 ClientLocation, const Vector_NetQuantize100 ClientLinearVelocity, const Vector_NetQuantizeNormal ClientRotator, const Vector_NetQuantize100 ClientAngularVelocity, Actor* OtherActor, const Vector_NetQuantize100 NormalImpulse, const HitResult Hit);// 0x27a9e78
	void SendClientGravityZAndDeltaTime(float GravityZ, float DeltaTime);// 0x27a9d7c
	void OnHitAtServer(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x27a9c04
	void OnHitAtClient(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x27a9a8c
	void OnDriverRide();// 0x27a9a78
	void HandleOnSeatDetached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x27a9970
	void HandleOnSeatChanged(STExtraPlayerCharacter* Character, enum LastSeatType, int LastSeatIdx, enum NewSeatType, int NewSeatIdx);// 0x27a97d8
	void HandleOnSeatAttached(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x27a96d0
	STExtraBaseCharacter*[] GetRiders();// 0x27a963c
	float GetLanscapeHeight(out const Vector ClientLocation);// 0x27a95a4
	bool GetFloorPosition(out const Vector Location, out Vector OutFloorLocation);// 0x27a94ac
	void DragUnderGround();// 0x27a9498
	void Correct(bool bIsSnap, bool bPlayerChannel, float ZAdjustValue);// 0x27a9380
	void ClientHitActor(Actor* OtherActor, out const Vector_NetQuantize100 NormalImpulse, out const HitResult Hit);// 0x27a9240
	bool CheckAndLoadLandscape(float DeltaTime);// 0x25b057c
	void ApplyRigidBodyState(out RigidBodyState NewState);// 0x27a9170
	bool AdjustFloorPosition(out const Vector ClientLocation, out const STExtraBaseCharacter*[] Riders, out Vector OutLocation);// 0x27a9004

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: VehicleStatComponent.VehicleComponent.ActorComponent.Object
	int RollCount;//[Offset: 0xe8, Size: 4]
	float RollDegrees;//[Offset: 0xec, Size: 4]
	float InAirTime;//[Offset: 0xf0, Size: 4]
	float AirControlFTime;//[Offset: 0xf4, Size: 4]
	float AirControlBTime;//[Offset: 0xf8, Size: 4]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	float ReachGroundTime;//[Offset: 0x100, Size: 4]
	void StopRecord();// 0x27a8310
	void ClearStats();// 0x27a82fc
	void BeginRecord();// 0x27a82e8

--------------------------------
Class: VehBackpackItem
	int ItemID;//[Offset: 0x0, Size: 4]
	int ItemCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CarMusicConfigBlueprint
	SoftObjectPath MusicAsset;//[Offset: 0x0, Size: 24]
	int MusicProbability;//[Offset: 0x18, Size: 4]
	FString MusicActivatedTime;//[Offset: 0x1c, Size: 12]
	FString MusicDeactivatedTime;//[Offset: 0x28, Size: 12]

--------------------------------
Class: CarMusicConfig
	FString MusicAssetPath;//[Offset: 0x0, Size: 12]
	int MusicProbability;//[Offset: 0xc, Size: 4]
	DateTime MusicActivatedTime;//[Offset: 0x10, Size: 8]
	DateTime MusicDeactivatedTime;//[Offset: 0x18, Size: 8]

--------------------------------
Class: CarMusicWrapper
	SoftObjectPath AssetPath;//[Offset: 0x0, Size: 24]
	AkAudioEvent* Music;//[Offset: 0x18, Size: 4]

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0, Size: 1]
	byte ViewYaw;//[Offset: 0x1, Size: 1]
	byte ViewRoll;//[Offset: 0x2, Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.STExtraVehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x3d0, Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x3d4, Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x3d8, Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	float ArmOriginProbeSize;//[Offset: 0x3e0, Size: 4]
	SpringArmModifier* Modifier;//[Offset: 0x3e4, Size: 4]
	class SpringArmModifier* ModifierTemplate;//[Offset: 0x3e8, Size: 4]
	Rotator RelativeToOwnerRotator;//[Offset: 0x3ec, Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 1]
	float MinPitch;//[Offset: 0x410, Size: 4]
	float MaxPitch;//[Offset: 0x414, Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x418, Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x41c, Size: 4]
	float ResultMinPitch;//[Offset: 0x45c, Size: 4]
	float ResultMaxPitch;//[Offset: 0x460, Size: 4]
	Vector ArmOriginOffset;//[Offset: 0x464, Size: 12]
	float FreeCamRotationReturnRate;//[Offset: 0x470, Size: 4]
	bool bIgnoreInheritPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x27a7e3c
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x24985a4
	void DelayRotationLagEnabledEnd();// 0x235d4b8
	void DelayRotationLagEnabled(bool bEnabled, float Time, Rotator _RelativeRotator);// 0x27a7d30

--------------------------------
Class: STExtraVehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x2f8, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x2fc, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x300, Size: 4]
	bool UseRotationLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304, Size: 1]
	float YawMin;//[Offset: 0x308, Size: 4]
	float YawMax;//[Offset: 0x30c, Size: 4]
	float PitchMin;//[Offset: 0x310, Size: 4]
	float PitchMax;//[Offset: 0x314, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x360, Size: 104]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x3cc, Size: 4]
	Rotator GetTargetRotation();// 0x2498710
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x24985a4
	void ClearCameraData();// 0x2701220

--------------------------------
Class: SpringArmModifier.Object
	SpringArmComponent* SpringArmComp;//[Offset: 0x1c, Size: 4]
	CameraComponent* CameraComp;//[Offset: 0x20, Size: 4]
	CameraOffsetData[] CurActiveDataList;//[Offset: 0x24, Size: 12]
	CameraOffsetData CurCameraData;//[Offset: 0x30, Size: 104]
	CameraOffsetData[] CameraOffsetDatas;//[Offset: 0x98, Size: 12]
	float FieldOfViewInterpSpeed;//[Offset: 0xa4, Size: 4]
	float SocketOffsetInterpSpeed;//[Offset: 0xa8, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0xac, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0xb0, Size: 4]
	float RelativeLocationOffsetInterpSpeed;//[Offset: 0xb4, Size: 4]
	bool bDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9, Size: 1]
	CameraOffsetData ResultCameraData;//[Offset: 0xc0, Size: 104]
	float CurAdditiveOffsetFov;//[Offset: 0x128, Size: 4]
	void UpdateCustomCameraData(out const CameraOffsetData CustomCameraData);// 0x25ea310
	bool UpdateCurCameraDataBlueprint(float DeltaTime);// 0x46f6b154
	void UpdateCurCameraData(float DeltaTime);// 0x2411008
	void SetTargetArmLengthByName(FName DataName, float TargetArmLength);// 0x25ea24c
	void SetCustomCameraDataEnable(out const CameraOffsetData CustomCameraData, bool IsEnable);// 0x25ea0d0
	void SetCameraDataEnableByName(FName DataName, bool IsEnable);// 0x25ea004
	CameraOffsetData OverrideParam(out const CameraOffsetData From, out CameraOffsetData Target);// 0x25e9d34
	bool IsDoLocationLag(bool bDoLocationLag);// 0x25e9ca4
	bool IsCameraDataEnableByName(FName DataName);// 0x25e9c24
	Vector GetCameraTargetOffset();// 0x25e9bd4
	float GetCameraTargetArmLength();// 0x24b44d4
	Vector GetCameraSocketOffset();// 0x25e9b84
	Vector GetCameraRelativeLocationOffset();// 0x25e9b34
	float GetCameraAdditiveOffsetFov();// 0x25e9b04
	bool GetbDoCollisionTest();// 0x25e9adc
	float GetArmLengthInterpSpeed();// 0x25e9ab4
	HitResult DoSpringArmSweepSingleByChannel(out Vector ArmOrigin, out Vector DesiredLoc);// 0x25e9970
	void ClearCameraData();// 0x24492b0
	bool CalculateBlueprint();// 0x46f6b154
	void Calculate();// 0x23ab320
	void AddAdditiveOffsetBP(CameraComponent* Camera, out const Transform Transform, float FOV);// 0x25e9810

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: VehicleLagVerifyConfig
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x0, Size: 4]

--------------------------------
Class: VehicleAIComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleAINavStateChangedDelegate;//[Offset: 0xd0, Size: 12]
	delegate VehicleAINavStateAllowableDistanceChangedDelegate;//[Offset: 0xdc, Size: 12]
	STExtraVehicleAIController* VehicleAIController;//[Offset: 0x10c, Size: 4]
	AINavStateData AutoDriver_AINavStateData;//[Offset: 0x110, Size: 28]
	bool AutoDriver_EnableNoDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	float AutoDriver_MaxAllowableDistanceSquared;//[Offset: 0x130, Size: 4]
	float CheckAllowableDistanceInter;//[Offset: 0x134, Size: 4]
	Vector[] AutoDrive_RouteList;//[Offset: 0x138, Size: 12]
	int[] AutoDrive_BestWaypoint;//[Offset: 0x144, Size: 12]
	void StopAutoDriving();// 0x2799f04
	bool StartAutoDriving();// 0x2799edc
	void ServerSetAutoDriverTarget(Vector TargetPosition);// 0x2799e20
	void OnRep_AutoDriver_AINavStateData();// 0x2799e0c
	bool IsAutoDriving();// 0x2799de4
	bool HasAutoDriveTarget();// 0x2799dbc
	STExtraVehicleAIController* GetVehicleAIController();// 0x2799d94
	int GetCurrentTargetWaypointIdx();// 0x2799d6c
	Vector GetAutoDriveTarget();// 0x2799d24
	void EndAutoDriving();// 0x2799d10
	bool CanAutoDrivingNoDriver();// 0x2799ce8
	bool CanAutoDriving();// 0x2799cc0
	bool AllowableDistanceAutoDriving();// 0x2799c98

--------------------------------
Class: STExtraVehicleAIController.AIController.Controller.Actor.Object
	FName IsDestroyedBlackboardKeyName;//[Offset: 0x380, Size: 8]
	FName AIPawnTag;//[Offset: 0x388, Size: 8]
	void HandleOnVehicleHealthStateChanged(enum InVehicleHealthState);// 0x26f6ae4

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34c, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34c, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34c, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34c, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34c, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x350, Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x354, Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x358, Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x35c, Size: 4]
	BlackboardComponent* BlackBoard;//[Offset: 0x360, Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x364, Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x368, Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x36c, Size: 12]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x4001af8
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4001a80
	void SetMoveBlockDetection(bool bEnable);// 0x4001a00
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x4001978
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x46f6b154
	void OnUnpossess(Pawn* UnpossessedPawn);// 0x46f6b154
	void OnPossess(Pawn* PossessedPawn);// 0x46f6b154
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x40018b4
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath, bool bUseNavLink);// 0x40015b0
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4001368
	void K2_SetFocus(Actor* NewFocus);// 0x40012f0
	void K2_SetFocalPoint(Vector FP);// 0x4001270
	void K2_ClearFocus();// 0x400125c
	bool HasPartialPath();// 0x4001234
	PathFollowingComponent* GetPathFollowingComponent();// 0x4001218
	byte GetMoveStatus();// 0x40011f0
	Vector GetImmediateMoveDestination();// 0x40011a8
	Actor* GetFocusActor();// 0x4001180
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x40010e8
	Vector GetFocalPoint();// 0x40010a0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x4001084
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x400100c

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xd4, Size: 4]
	AIController* AIOwner;//[Offset: 0xd8, Size: 4]
	void StopLogic(FString Reason);// 0x244b52c
	void RestartLogic();// 0x234fef0
	bool IsRunning();// 0x400dab4
	bool IsPaused();// 0x400da84

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xd0, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xd4, Size: 4]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xf0, Size: 12]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x400c070
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x400bf30
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x400be5c
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x400bd88
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x400bcb4
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x400bbe0
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x400bb0c
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x400ba38
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x400b964
	void SetValueAsBool(out const FName KeyName, bool BoolValue);// 0x400b888
	bool IsVectorValueSet(out const FName KeyName);// 0x400b7f4
	Vector GetValueAsVector(out const FName KeyName);// 0x400b750
	FString GetValueAsString(out const FName KeyName);// 0x400b660
	Rotator GetValueAsRotator(out const FName KeyName);// 0x400b5bc
	Object* GetValueAsObject(out const FName KeyName);// 0x400b528
	FName GetValueAsName(out const FName KeyName);// 0x400b48c
	int GetValueAsInt(out const FName KeyName);// 0x400b3f8
	float GetValueAsFloat(out const FName KeyName);// 0x400b364
	byte GetValueAsEnum(out const FName KeyName);// 0x400b2d0
	class Object GetValueAsClass(out const FName KeyName);// 0x400b23c
	bool GetValueAsBool(out const FName KeyName);// 0x400b1a8
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x400b0c0
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x400afcc
	void ClearValue(out const FName KeyName);// 0x400af40

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20, Size: 4]
	BlackboardEntry[] Keys;//[Offset: 0x24, Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xd0, Size: 12]
	class AISense* DominantSense;//[Offset: 0xdc, Size: 4]
	AIController* AIOwner;//[Offset: 0xf0, Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x150, Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x15c, Size: 12]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x4003868
	void RequestStimuliListenerUpdate();// 0x4003854
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x4003798
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x40036f8
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4003614
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4003530
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x400344c
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x4003350

--------------------------------
Class: AISenseConfig.Object
	Color debugColor;//[Offset: 0x1c, Size: 4]
	float MaxAge;//[Offset: 0x20, Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c, Size: 4]
	enum NotifyType;//[Offset: 0x20, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24, Size: 4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense*[] Senses;//[Offset: 0x5c, Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68, Size: 4]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x4004804
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x400478c
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x400468c
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x40045d0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x4004418

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 4]
	float ExpirationAge;//[Offset: 0x4, Size: 4]
	float Strength;//[Offset: 0x8, Size: 4]
	Vector StimulusLocation;//[Offset: 0xc, Size: 12]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 12]
	FName Tag;//[Offset: 0x28, Size: 8]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 4]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x4, Size: 12]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xd0, Size: 4]
	PawnActionStack[] ActionStacks;//[Offset: 0xd4, Size: 12]
	PawnActionEvent[] ActionEvents;//[Offset: 0xe0, Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xec, Size: 4]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x4020cf4
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x4020bec
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x4020b6c
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x4020aec

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c, Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20, Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24, Size: 4]
	Object* Instigator;//[Offset: 0x28, Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c, Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50, Size: 1]
	byte GetActionPriority();// 0x401fbd0
	void Finish(byte WithResult);// 0x401fb48
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x401fa8c

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask*[] SimulatedTasks;//[Offset: 0xd4, Size: 12]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xe0, Size: 12]
	GameplayTask*[] TickingTasks;//[Offset: 0xf8, Size: 12]
	GameplayTask*[] KnownTasks;//[Offset: 0x104, Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x114, Size: 12]
	void OnRep_SimulatedTasks();// 0x3f6e234
	static enum K2_RunGameplayTask(interface class TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x3f6df9c

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20, Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x44, Size: 4]
	void ReadyForActivation();// 0x3f6c67c
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x46f6b154
	void EndTask();// 0x3f6c668

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x1c, Size: 4]
	int8 AutoResourceID;//[Offset: 0x20, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21, Size: 1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c, Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20, Size: 4]
	BTDecorator*[] RootDecorators;//[Offset: 0x24, Size: 12]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30, Size: 12]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c, Size: 12]
	BTService*[] Services;//[Offset: 0x48, Size: 12]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20, Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c, Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30, Size: 4]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 4]
	BTTaskNode* ChildTask;//[Offset: 0x4, Size: 4]
	BTDecorator*[] Decorators;//[Offset: 0x8, Size: 12]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14, Size: 12]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x3c, Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x3c, Size: 4]
	float RandomDeviation;//[Offset: 0x40, Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 1]
	byte FlowAbortMode;//[Offset: 0x3d, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 2]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: AINavStateData
	int CurrentTargetWaypointIdx;//[Offset: 0x0, Size: 4]
	Vector TargetPosition;//[Offset: 0x4, Size: 12]
	Vector StartPosition;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent

--------------------------------
Class: STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	int ItemID;//[Offset: 0x34, Size: 4]
	uint32 CauseUniqueID;//[Offset: 0x3c, Size: 4]

--------------------------------
Class: VehicleTriggerComponent.SceneComponent.ActorComponent.Object
	float TriggerRadius;//[Offset: 0x240, Size: 4]
	float TriggerInterval;//[Offset: 0x244, Size: 4]
	float MaxAllowedValidationDiff;//[Offset: 0x248, Size: 4]
	void OnTriggered();// 0x46f6b154

--------------------------------
Class: SeekAndLockWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class Actor[] SeekAndLockTargetClassConfigList;//[Offset: 0xe0, Size: 12]
	float SeekAreaPixelSize;//[Offset: 0xec, Size: 4]
	SeekAndLockStageConfig Stage1Confog;//[Offset: 0xf0, Size: 8]
	SeekAndLockStageConfig Stage2Confog;//[Offset: 0xf8, Size: 8]
	float ScopeInDelayTime;//[Offset: 0x100, Size: 4]
	float InitialLockFrameLength;//[Offset: 0x104, Size: 4]
	float FinalLockFrameLength;//[Offset: 0x108, Size: 4]
	float MaxSeekDeistance;//[Offset: 0x10c, Size: 4]
	float LineTraceTargetMaxDistance;//[Offset: 0x110, Size: 4]
	float HistoryLockDataMaxCacheTime;//[Offset: 0x114, Size: 4]
	float TrySeekAndGetLockTargetInterval;//[Offset: 0x118, Size: 4]
	float CheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x11c, Size: 4]
	float TraceTargetInterval;//[Offset: 0x120, Size: 4]
	float TraceTargetIntervalNoLaserTrace;//[Offset: 0x124, Size: 4]
	<enum,FString> SeekAndLockStageTipsMap;//[Offset: 0x128, Size: 60]
	<enum,AkAudioEvent*> LockStageBeginSoundConfig;//[Offset: 0x164, Size: 60]
	<enum,AkAudioEvent*> EnemyLockStageBeginSoundConfig;//[Offset: 0x1a0, Size: 60]
	AkAudioEvent* LockStopSoundConfig;//[Offset: 0x1dc, Size: 4]
	AkAudioEvent* EnemyLockStopSoundConfig;//[Offset: 0x1e0, Size: 4]
	AkAudioEvent* EnemyLaunchRocketSound;//[Offset: 0x1e4, Size: 4]
	AkAudioEvent* EnemyLaunchRocketStopSound;//[Offset: 0x1e8, Size: 4]
	FString HideVehicleUIMsg;//[Offset: 0x1ec, Size: 12]
	FString ShowVehicleUIMsg;//[Offset: 0x1f8, Size: 12]
	bool bNeedDrawUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204, Size: 1]
	delegate OnSeekAndLockStageEnterDelegate;//[Offset: 0x208, Size: 12]
	delegate OnChangeTraceTargetLocDelegate;//[Offset: 0x214, Size: 12]
	delegate OnChangeSeekAndLockStageTipDelegate;//[Offset: 0x220, Size: 12]
	float CurTrySeekAndGetLockTargetInterval;//[Offset: 0x23c, Size: 4]
	float CurCheckSeekAndGetLockTargetVisibilityInterval;//[Offset: 0x240, Size: 4]
	float CurTraceTargetCountTime;//[Offset: 0x244, Size: 4]
	bool bHasShowSeekAndLock3DUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	void RPC_Server_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x25cdb54
	void RPC_Server_NotifyServerCancelLock(Actor* LockTarget);// 0x25cdaa0
	void RPC_Client_NotifyServerEnterNewStage(Actor* LockTarget, enum Stage);// 0x25cd9a4
	void RPC_Client_NotifyServerCancelLock(Actor* LockTarget);// 0x25cd8f0
	void RemoveTargetList(Actor*[] TargetList);// 0x25cd80c
	void RemoveTarget(Actor* Target);// 0x25cd794
	void PlaySound(Actor* Target, AkAudioEvent* Sound);// 0x25cd6d8
	void OnSeekAndLockStageEnterDelegate__DelegateSignature(enum Stage);// 0x46f6b154
	void OnChangeTraceTargetLocDelegate__DelegateSignature(out const HitResult HitInfo);// 0x46f6b154
	void OnChangeSeekAndLockStageTipDelegate__DelegateSignature(FString Tip);// 0x46f6b154
	void InitComplete();// 0x235d4b8
	void HandleTargetOutOfSeekArea();// 0x25cd6c4
	void HandleReconnectOnServer(STExtraWeapon* Weapon);// 0x25018f8
	void HandleDisconnectOnServer(STExtraWeapon* Weapon);// 0x25cd644
	enum GetCurrentSeekAndLockStage();// 0x25cd614
	Actor* GetCurrentLockTarget();// 0x25cd5ec
	bool CheckTargetIsVisible(Actor* Target);// 0x2501748
	bool CheckTargetClassIsIncluedByClassMap(Actor* Target);// 0x25cd56c
	void AddTarget(Actor* Target);// 0x25cd4f4

--------------------------------
Class: SeekAndLockStageConfig
	float LockTotalTime;//[Offset: 0x0, Size: 4]
	float ShrinkSpeed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleMotorbikeComponent.VehicleComponent.ActorComponent.Object
	delegate OnContactChanged;//[Offset: 0xd0, Size: 12]
	CurveFloat* Curve_Roll;//[Offset: 0xdc, Size: 4]
	CurveFloat* Curve_ReturnClamp;//[Offset: 0xe0, Size: 4]
	CurveFloat* Curve_Steer;//[Offset: 0xe4, Size: 4]
	CurveFloat* Curve_Yaw;//[Offset: 0xe8, Size: 4]
	CurveFloat* Curve_TorqueStab;//[Offset: 0xec, Size: 4]
	CurveFloat* Curve_Roll_Cart;//[Offset: 0xf0, Size: 4]
	CurveFloat* Curve_ReturnClamp_Cart;//[Offset: 0xf4, Size: 4]
	CurveFloat* Curve_Steer_Cart;//[Offset: 0xf8, Size: 4]
	CurveFloat* Curve_Yaw_Cart;//[Offset: 0xfc, Size: 4]
	CurveFloat* Curve_TorqueStab_Cart;//[Offset: 0x100, Size: 4]
	bool bHasSidecart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	FName LowStabBoneName;//[Offset: 0x108, Size: 8]
	FName HighStabBoneName;//[Offset: 0x110, Size: 8]
	Vector SideCartHighStabCOM;//[Offset: 0x118, Size: 12]
	float MinSuspensionOffsetForContact;//[Offset: 0x124, Size: 4]
	Vector StabStaticVector;//[Offset: 0x128, Size: 12]
	Vector2D StabXVelocityIn;//[Offset: 0x134, Size: 8]
	Vector2D StabXVelocityOut;//[Offset: 0x13c, Size: 8]
	Vector2D StabXPitchIn;//[Offset: 0x144, Size: 8]
	Vector2D StabXPitchOut;//[Offset: 0x14c, Size: 8]
	Vector2D StabZVelocityIn;//[Offset: 0x154, Size: 8]
	Vector2D StabZVelocityOut;//[Offset: 0x15c, Size: 8]
	Vector2D StabZRollIn;//[Offset: 0x164, Size: 8]
	Vector2D StabZRollOut;//[Offset: 0x16c, Size: 8]
	Vector2D StabZPitchIn;//[Offset: 0x174, Size: 8]
	Vector2D StabZPitchOut;//[Offset: 0x17c, Size: 8]
	Vector2D StabTorqueIn;//[Offset: 0x184, Size: 8]
	Vector2D StabTorqueOut;//[Offset: 0x18c, Size: 8]
	float StabTorqueForceScalar;//[Offset: 0x194, Size: 4]
	Vector2D StabTorquePitchIn;//[Offset: 0x198, Size: 8]
	Vector2D StabTorquePitchOut;//[Offset: 0x1a0, Size: 8]
	bool bUseNewCOMCal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	float ScaleTorque;//[Offset: 0x1ac, Size: 4]
	float ScaleCenterOfMass;//[Offset: 0x1b0, Size: 4]
	Vector CurrentTorque;//[Offset: 0x1b4, Size: 12]
	Vector CurrentCenterOfMass;//[Offset: 0x1c0, Size: 12]
	bool bKickstandStabilizeEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	float KickstandAngularDamping;//[Offset: 0x1d0, Size: 4]
	float KickstandMaxAngVelocity;//[Offset: 0x1d4, Size: 4]
	float KickstandEnableMaxSpeed;//[Offset: 0x1d8, Size: 4]
	Vector2D AirControlFVelMap;//[Offset: 0x1dc, Size: 8]
	Vector2D AirControlBVelMap;//[Offset: 0x1e4, Size: 8]
	float AirControlFBTorque;//[Offset: 0x1ec, Size: 4]
	bool EnableAirPitchAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	bool EnablePitchNearLandAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1, Size: 1]
	float NearLandAdjustMaxPitch;//[Offset: 0x1f4, Size: 4]
	float AdjustMaxPitchNeraLand;//[Offset: 0x1f8, Size: 4]
	float AdjustMaxPitch;//[Offset: 0x1fc, Size: 4]
	float AdjustRateF;//[Offset: 0x200, Size: 4]
	float AdjustRateB;//[Offset: 0x204, Size: 4]
	float AdjustPitchRateScale;//[Offset: 0x208, Size: 4]
	bool EnableAirRollAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20c, Size: 1]
	bool EnableRollNearLandAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20d, Size: 1]
	float NearLandAdjustMaxRoll;//[Offset: 0x210, Size: 4]
	float AdjustMaxRollNeraLand;//[Offset: 0x214, Size: 4]
	float AdjustMaxRoll;//[Offset: 0x218, Size: 4]
	float AdjustRateR;//[Offset: 0x21c, Size: 4]
	float AdjustRateL;//[Offset: 0x220, Size: 4]
	float AdjustRollRateScale;//[Offset: 0x224, Size: 4]
	bool bResetRotationSafeCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	bool bContact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]
	float COMOffsetSteer;//[Offset: 0x234, Size: 4]
	float RotSteeringFinal;//[Offset: 0x238, Size: 4]
	void HandleOnVehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x27a2d38
	void ForceSyncVelocity(Vector ServerLinearVelocity, Vector ServerAngularVelocity);// 0x27a2c50

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0, Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PawnStateRepSyncData
	uint64 CurrentStates;//[Offset: 0x0, Size: 8]
	uint64 DisabledStates;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0, Size: 1]
	int8 Disabled;//[Offset: 0x1, Size: 1]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0x100, Size: 12]
	delegate OnBuffDetached;//[Offset: 0x10c, Size: 12]
	UTBuffSyncData[] BuffSyncList;//[Offset: 0x158, Size: 12]
	FString ServerBuffString;//[Offset: 0x164, Size: 12]
	float BuffSyncRemainingPeriod;//[Offset: 0x170, Size: 4]
	float SimulateTickInterval;//[Offset: 0x174, Size: 4]
	void ResetForDeath(bool bImmediately, bool bDetached);// 0x28834cc
	void RepBuffSyncList();// 0x28834b8
	bool RemoveBuffByInstanceID(int BuffInstanceID, bool bRemoveLayerOnly);// 0x28833ec
	bool RemoveBuff(FName BuffName, bool bRemoveLayerOnly, Actor* BuffApplierActor, Controller* pCauser);// 0x288328c
	bool IsBufferMutexed(FName NewBuffName);// 0x288320c
	bool HasBuff(FName BuffName);// 0x288318c
	UAEBlackboard* GetUAEBlackboard(int BuffInstanceID);// 0x288310c
	Pawn* GetPawnOwner();// 0x28830e4
	FName GetBuffName(int BuffID);// 0x288305c
	int GetBuffIDByName(FName BuffName);// 0x2882fdc
	STBaseBuff* GetBuffByName(FName BuffName);// 0x2882f5c
	Actor* GetActorOwner();// 0x2882f34
	void BuffDetached__DelegateSignature(out const FName BuffName);// 0x46f6b154
	void BuffAttached__DelegateSignature(out const FName BuffName);// 0x46f6b154
	int AddBuff(FName BuffName, Controller* BuffCauser, int LayerCount, Actor* BuffApplierActor, Actor* CauserActor);// 0x2882d98

--------------------------------
Class: UTBuffSyncData
	FName BuffName;//[Offset: 0x0, Size: 8]
	int BuffID;//[Offset: 0x8, Size: 4]
	int BuffInstanceID;//[Offset: 0xc, Size: 4]
	Controller* BuffCauser;//[Offset: 0x10, Size: 4]
	int LayerCount;//[Offset: 0x14, Size: 4]
	Actor* BuffApplierActor;//[Offset: 0x18, Size: 4]
	float RemainingTime;//[Offset: 0x1c, Size: 4]
	float ExpireTime;//[Offset: 0x20, Size: 4]

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x24, Size: 12]
	FString DisplayName;//[Offset: 0x30, Size: 12]
	FString Message;//[Offset: 0x3c, Size: 12]
	Texture2D* Icon;//[Offset: 0x48, Size: 4]
	SoundBase* SoundData;//[Offset: 0x4c, Size: 4]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	bool bAllowOtherPawnRefreshBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53, Size: 1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool NeedDetachAndAttachForAddLayerWhenReachMaxLayerCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57, Size: 1]
	int LayerMax;//[Offset: 0x58, Size: 4]
	int InitialLayerCount;//[Offset: 0x5c, Size: 4]
	float ValidityTime;//[Offset: 0x60, Size: 4]
	float MaxValidityTime;//[Offset: 0x64, Size: 4]
	float Internal;//[Offset: 0x68, Size: 4]
	UTSkillCondition*[] BuffConditions;//[Offset: 0x6c, Size: 12]
	StatusChange[] StatusChanges;//[Offset: 0x78, Size: 12]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 1]
	byte SimulateAddBuffRole;//[Offset: 0x86, Size: 1]
	FName[] MutexBuffers;//[Offset: 0x88, Size: 12]
	FName[] ExcludedBuffs;//[Offset: 0x94, Size: 12]
	BuffActionItem[] BuffActions;//[Offset: 0xa0, Size: 12]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0xac, Size: 12]
	float fADScale;//[Offset: 0xb8, Size: 4]
	float fAPScale;//[Offset: 0xbc, Size: 4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	BuffUIConfig UIConfig;//[Offset: 0xc8, Size: 88]
	UAEBlackboardParameter[] UAEBlackboardParamList;//[Offset: 0x124, Size: 12]
	<Object*,int> InstancedNodeNameToMemoryMap;//[Offset: 0x130, Size: 60]
	int InstancedNodesTotalSize;//[Offset: 0x16c, Size: 4]

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0, Size: 4]
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0, Size: 4]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillActionCreateData BaseData;//[Offset: 0x110, Size: 4]
	bool bFinalizeBeforeDestructToggle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool bClearTimerAfterReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	void UpdateAction_Internal(float DeltaSeconds);// 0x2774430
	void UpdateAction(Object* InstanceNodeContainer, float DeltaSeconds);// 0x5499cc8
	void UndoAction_Internal();// 0x27634bc
	void UndoAction(Object* InstanceNodeContainer);// 0x5499c50
	void TimerRealDoAction(Object* InstanceNodeContainer);// 0x5499bd8
	void Reset_Internal();// 0x2774414
	void Reset(Object* InstanceNodeContainer);// 0x5499b60
	bool RealDoAction_Internal();// 0x276348c
	bool RealDoAction(Object* InstanceNodeContainer);// 0x5499ad8
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x2500abc
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x276a9f0
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x257df5c
	void OnUpdateAction(float DeltaSeconds);// 0x25018f8
	void OnUndoAction();// 0x240b87c
	void OnReset();// 0x2557498
	bool OnRealDoAction();// 0x5499aa8
	void OnPreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x54999e4
	void OnPostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x5499920
	void OnPostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x549985c
	void OnFinalizeBeforeDestruct();// 0x2459524
	bool JudgeNeedPhaseWait();// 0x549982c
	bool DoAction(Object* InstanceNodeContainer);// 0x54997a4

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0, Size: 4]
	UTSkillAction* BuffEventAction;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STBaseBuffEventType.Object
	STBaseBuffSystemComponent* STBuffSystemComponent;//[Offset: 0x1c, Size: 8]
	bool GetBuffInstance(out BuffInstancedItem OutOwnerBuffInstance);// 0x28813e0
	bool Equals(out STBaseBuffEventContext Context);// 0x28811c0
	bool DoAction(out STBaseBuffEventContext Context, UTSkillAction* SkillAction);// 0x2880f58

--------------------------------
Class: BuffInstancedItem
	FName BuffName;//[Offset: 0x0, Size: 8]
	int BuffID;//[Offset: 0x8, Size: 4]
	STBaseBuff* Buff;//[Offset: 0xc, Size: 4]
	int LayerCount;//[Offset: 0x10, Size: 4]
	Controller* CauserPawnController;//[Offset: 0x14, Size: 8]
	Actor* CauserActor;//[Offset: 0x1c, Size: 8]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float Expiry;//[Offset: 0x28, Size: 4]
	Actor* Target;//[Offset: 0x2c, Size: 8]
	Actor* BuffApplier;//[Offset: 0x34, Size: 8]
	int BuffInstanceID;//[Offset: 0x3c, Size: 4]
	UAEBlackboard* UAEBlackboard;//[Offset: 0x88, Size: 4]

--------------------------------
Class: STBaseBuffEventContext
	class STBaseBuffEventType* BuffEventClass;//[Offset: 0x0, Size: 4]
	UAEBlackboardContainer UAEBlackboardContainer;//[Offset: 0x4, Size: 720]

--------------------------------
Class: BuffUIConfig
	class UAEUserWidget* WidgetClassPath;//[Offset: 0x0, Size: 40]
	int ZOrder;//[Offset: 0x28, Size: 4]
	Margin MarginData;//[Offset: 0x2c, Size: 16]
	Anchors AnchorsData;//[Offset: 0x3c, Size: 16]
	Vector2D Position;//[Offset: 0x4c, Size: 8]

--------------------------------
Class: EffectComponent.ActorComponent.Object
	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x245022c
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x2450034
	void S2A_EndEffectGraph(int UID);// 0x236c05c
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, Actor* Source, Actor* Target, const byte[] Data);// 0x244fdf4

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xd0, Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xd4, Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bOptimizeBulletCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	bool bOptimizeBulletCache_Server;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda, Size: 1]
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0xdc, Size: 12]
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0xe8, Size: 12]
	PrimitiveComponent*[] HitBoxs_Stand;//[Offset: 0xf4, Size: 12]
	PrimitiveComponent*[] HitBoxs_Prone;//[Offset: 0x100, Size: 12]
	BoxComponent* BoxEar;//[Offset: 0x10c, Size: 4]
	bool bEnableBoxEar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	byte ClientHitPartJudgment;//[Offset: 0x111, Size: 1]
	byte DSHitPartJudgment;//[Offset: 0x112, Size: 1]
	FString HitBox_Stand_Tag;//[Offset: 0x114, Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x120, Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x12c, Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x130, Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x134, Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x138, Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x13c, Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x144, Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x14c, Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x154, Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x15c, Size: 8]
	Vector NewStandHitBodyBoxScale;//[Offset: 0x164, Size: 12]
	Vector NewProneHitBodyBoxScale;//[Offset: 0x170, Size: 12]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x17c, Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x1b8, Size: 4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc, Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x1c0, Size: 4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4, Size: 1]
	void UpdatePoseCollisionShapes(byte PoseState);// 0x255a240
	void UpdateAllInstanceBodyTransform(int Type);// 0x24f2fb4
	void InitBodyHitBox(byte PoseState);// 0x242dd48
	PrimitiveComponent* GetHitBoxByState(enum InPoseState);// 0x255a1c0
	enum GetHitBodyTypeByHitPos(out const Vector InHitPos);// 0x255a120
	enum GetHitBodyTypeByBoneName(FString InBoneName);// 0x255a080
	enum GetHitBodyType(out const Vector InHitPos, out const Vector InImpactVec, FString InBoneName);// 0x2559f20
	byte GetCurHitPartJugementType();// 0x2559ef8
	void CloseBodyBulletCollision();// 0x234fef0
	enum CalcHitBodyType(out const Vector HitPos, out const Vector Projvec, out const Vector CenterPos, out const BodyTypeDef bodyDef);// 0x2559d38

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0, Size: 4]
	int DownThreshold;//[Offset: 0x4, Size: 4]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0xd4, Size: 4]
	int MaxCheatTimes;//[Offset: 0xd8, Size: 4]
	float TolerateDistanceFractor;//[Offset: 0xdc, Size: 4]
	float MaxPacketLossRate;//[Offset: 0xe0, Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xe4, Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xe8, Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xec, Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xf0, Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	int MaxMoveAntiCheatCheatSpeedTimes;//[Offset: 0xf8, Size: 4]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x164, Size: 452]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x328, Size: 80]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x378, Size: 1392]
	MoveCheatAntiStrategy7 MoveCheatAntiStrategy7;//[Offset: 0x8e8, Size: 116]
	ClientTimeAccChecker ClientTimeAccChecker;//[Offset: 0x960, Size: 40]
	MoveCheatCheckPlayerStuck MoveCheatAntiPlayerStuck;//[Offset: 0x988, Size: 16]
	MoveCheatCheckPlayerStuck2 MoveCheatAntiPlayerStuck2;//[Offset: 0x998, Size: 28]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x9b4, Size: 88]
	CheckMoveInputStateUseSixteenDir CheckMoveInputState;//[Offset: 0xa0c, Size: 28]
	CheckMoveSpeedUpFromMovementComp CheckSpeedUpFromMoveComp;//[Offset: 0xa28, Size: 13640]
	RelSpeedInspector RelSpeedInspector;//[Offset: 0x3fc0, Size: 88]
	ServerMoveLimitor SrvMoveLimitor;//[Offset: 0x4018, Size: 60]
	MoveSpeedInspector MoveSpeedInspector;//[Offset: 0x4058, Size: 80]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x40a8, Size: 108]
	Character* CharacterOwner;//[Offset: 0x4114, Size: 4]
	float TimeResetThreshold;//[Offset: 0x415c, Size: 4]
	float ColdMovePunishMaxTime;//[Offset: 0x4160, Size: 4]
	float MaxJumpHeight;//[Offset: 0x41f0, Size: 4]
	void SendShovelDataToServer(const ShovelInfo InShovelData);// 0x252e2d0
	void RefreshRealMaxJumpHeight();// 0x252e2bc
	void Ping2Server(const Mc3ClientInfo ClientInfo);// 0x252e1d8
	void Ping2Client(Mc3IndexInfo ServerTime);// 0x252e15c
	void OnTimeInspectorColdMove();// 0x252e148
	void OnPreReconnectOnServer();// 0x252e134
	void OnMovementModeChange(Character* Character, byte PrevMovementMode, byte PreviousCustomMode);// 0x252e034
	bool K2_MoveSweepTest(out const Vector Start, out const Vector End, byte TraceChannel, out HitResult OutHit, bool bSweep, float SphereRadius, float PadLength);// 0x252ddb0
	void DebugDrawLine(const Vector Start, const Vector End);// 0x252dce4

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	uint32 bIsOpenDeltailLog;//[Offset: 0x4, Size: 4]
	uint32 bIsForbidServerCallPing2Client;//[Offset: 0x8, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0xc, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x10, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x14, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x18, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x1c, Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x20, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x24, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x28, Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x2c, Size: 4]
	float MaxAllowDelaySecondsRecvPingFromClient;//[Offset: 0x30, Size: 4]
	float MaxAllowDelaySecondsRecvMovePacketFromClient;//[Offset: 0x34, Size: 4]
	uint32 bIsOpenNoPingPublish;//[Offset: 0x38, Size: 4]
	int MaxAllowNoPingTimes;//[Offset: 0x3c, Size: 4]
	float NoPingPulishForbidMoveTime;//[Offset: 0x40, Size: 4]
	bool bPunishVeirfyLost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float VerifyLostPunishTime;//[Offset: 0x48, Size: 4]
	float AllowNoVerifyTime;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x14, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x8, Size: 4]
	float MaxVectorAccAngel;//[Offset: 0xc, Size: 4]
	float MaxSumVectorLength;//[Offset: 0x10, Size: 4]
	float MaxVectorAccTime;//[Offset: 0x14, Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x18, Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy7
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x4, Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x8, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0xc, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10, Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x14, Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x18, Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: ClientTimeAccChecker

--------------------------------
Class: MoveCheatCheckPlayerStuck
	float StuckTime;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MoveCheatCheckPlayerStuck2
	int MaxServerMoveCount;//[Offset: 0x0, Size: 4]
	float MaxStuckDistance;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0, Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4, Size: 4]
	float MaxAllowMoveZHeight;//[Offset: 0x8, Size: 4]

--------------------------------
Class: CheckMoveInputStateUseSixteenDir
	int MaxAllowCheatMoveTimes;//[Offset: 0x0, Size: 4]
	int CheckCountInterval;//[Offset: 0x4, Size: 4]

--------------------------------
Class: CheckMoveSpeedUpFromMovementComp
	int MaxAllowCheatMoveTimes;//[Offset: 0x0, Size: 4]
	int MaxLogTimes;//[Offset: 0x4, Size: 4]
	float MaxVerificationTimeInSeconds;//[Offset: 0x8, Size: 4]
	float MaxClientSideTimeLagInSeconds;//[Offset: 0xc, Size: 4]
	float MaxClientAndServerVelocityDiff;//[Offset: 0x10, Size: 4]
	float MaxClientAndServerLocationDiff;//[Offset: 0x14, Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x18, Size: 4]
	float MinCheckTimeIntervalWhenExceedMaxTimes;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: RelSpeedInspector.McCheckerBase
	float CheckInterval;//[Offset: 0x18, Size: 4]
	float MaxSpeed;//[Offset: 0x1c, Size: 4]
	int PunishTimeSeconds;//[Offset: 0x20, Size: 4]

--------------------------------
Class: McCheckerBase

--------------------------------
Class: ServerMoveLimitor
	float InspectSpan;//[Offset: 0x0, Size: 4]

--------------------------------
Class: MoveSpeedInspector

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0, Size: 4]
	float DataSampleInterval;//[Offset: 0x4, Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8, Size: 4]
	float CheatLockTime;//[Offset: 0xc, Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10, Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x68, Size: 4]

--------------------------------
Class: ShovelInfo

--------------------------------
Class: Mc3ClientInfo
	Mc3IndexInfo BackSrvInfo;//[Offset: 0x0, Size: 4]
	float NowTime;//[Offset: 0x4, Size: 4]
	Vector_NetQuantize100 NowLocation;//[Offset: 0x8, Size: 12]
	float MaxSpeed;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Mc3IndexInfo
	byte SrvIndex;//[Offset: 0x0, Size: 1]
	uint16 SrvInf;//[Offset: 0x2, Size: 2]

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0x104, Size: 4]
	float HorizontalSpeedModifier;//[Offset: 0x118, Size: 4]
	float VerticalSpeedModifier;//[Offset: 0x11c, Size: 4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0x120, Size: 4]
	float FreeFall_AcceFall;//[Offset: 0x124, Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0x128, Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0x12c, Size: 4]
	float FreeFall_AcceForward;//[Offset: 0x130, Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0x134, Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0x138, Size: 4]
	float FreeFall_AcceRight;//[Offset: 0x13c, Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0x140, Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0x144, Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x148, Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x14c, Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x150, Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x154, Size: 4]
	float DifferencePitchBetweenCharcterAndCamera;//[Offset: 0x158, Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x15c, Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x160, Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x164, Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	float Opened_AcceFall;//[Offset: 0x16c, Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x170, Size: 4]
	float Opened_AcceForward;//[Offset: 0x174, Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x178, Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x17c, Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x180, Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x184, Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x188, Size: 4]
	float Opened_AcceRight;//[Offset: 0x18c, Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x190, Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x194, Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x198, Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x19c, Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x1a0, Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x1a4, Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x1a8, Size: 4]
	float CurrentFallSpeed;//[Offset: 0x1ac, Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x1b0, Size: 4]
	float AllowVelocityZErrorTolerance;//[Offset: 0x1b4, Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	bool bUseCompressedInputRpc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9, Size: 1]
	float FollowerDist;//[Offset: 0x1e4, Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x1e8, Size: 4]
	bool VerifyClientTimeStamp(float TimeStamp);// 0x2409f18
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, byte State, out const Rotator ControlRotation);// 0x2409d7c
	void UpdateParachuteState(float DeltaTime, float ThrottleInput, float SteerInput, byte State, out const Rotator ControlRotation);// 0x2409be0
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);// 0x2409ae0
	void UpdateFreeFallRotation(Rotator CameraWorldRotation, float InputForward, float InputRight, float DeltaTime);// 0x2409994
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput, out const Rotator ControlRotation);// 0x2409840
	void StopParachute();// 0x240982c
	void StartParachute();// 0x2409818
	void Set_UseServerAuthorize(const bool InUseServerAuthor);// 0x2409798
	void ResetVelocity();// 0x2409784
	void PostNetReceiveNewState();// 0x2409770
	void OnPreReconnectOnServer();// 0x240975c
	void InvalidateAdjustFollowerLocation();// 0x2409748
	float GetReplicatedRightInput();// 0x2409720
	float GetReplicatedForwardInput();// 0x24096f8
	Vector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);// 0x24095dc
	Vector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);// 0x24094c0
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);// 0x2409370
	void AdjustFollowerLocation();// 0x240935c

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xd0, Size: 4]
	float TileRemovalRadius;//[Offset: 0xd4, Size: 4]

--------------------------------
Class: AIShootingOffsetComponent.ActorComponent.Object
	Vector AIShootingCenterOffset;//[Offset: 0xd0, Size: 12]

--------------------------------
Class: ActivitySyncData
	bool bIsDuringActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsAttachedToActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bIsMovementDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Vector AttachedOffsetLocation;//[Offset: 0x4, Size: 12]
	Rotator AttachedOffsetRotation;//[Offset: 0x10, Size: 12]
	bool bUseSkinWeightProfile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: TurnAroundViewComponent.OnlyActorComponent.ActorComponent.Object
	FocusTargetItem FocusTurnData;//[Offset: 0xd4, Size: 52]
	bool bTurnOnlyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	Character* MyChar;//[Offset: 0x140, Size: 4]
	void OnRep_FocusTurnTargetChange();// 0x275462c
	FString GetToString();// 0x2754590

--------------------------------
Class: FocusTargetItem
	Actor* Actor;//[Offset: 0x0, Size: 8]
	Vector Position;//[Offset: 0x8, Size: 12]
	bool IsStartTurnTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float TurnTargetVelocity;//[Offset: 0x18, Size: 4]
	Rotator LastActorRotation;//[Offset: 0x1c, Size: 12]
	FString CurveName;//[Offset: 0x28, Size: 12]

--------------------------------
Class: AimOffsetViewComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: PlayerVaultComponent.ActorComponent.Object
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd, Size: 1]
	VaultAnimDataAsset* VaultAnimDataAssetPtr;//[Offset: 0x100, Size: 4]
	PlayerAIVaultCheckData[] AICheckDataList;//[Offset: 0x104, Size: 12]
	bool isloadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	int VaultEndZDeviation;//[Offset: 0x114, Size: 4]
	AnimMontage*[] VaultMontageCacheList;//[Offset: 0x11c, Size: 12]
	bool VaultFromCPP();// 0x2532248
	void Vault();// 0x46f6b154
	void UpdateVault_BluePrint();// 0x2451c0c
	void SetZombieVaultAnim(FString AnimKey, float PlayRate);// 0x24ba8bc
	void SetPlayerVaultAnim(FString AnimKey, float PlayRate);// 0x24ba8bc
	void PreSaveCacheData();// 0x46f6b154
	void PawnStartVault(float dis, float Height, float Length, const FString VaultKey, Vector StartPos, Vector EndPos, Rotator vaultRot, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir, bool bCheckDynamicBlock);// 0x2589858
	void OnRespawned_BlueprintImpl();// 0x46f6b154
	bool IsUnAttachToWorld();// 0x2589830
	FString GetVaultKeyForAutoTest();// 0x46f6b154
	FString GetVaultKeyByBlockHeightAndBlockLengthWithJump(float Height, float BlockLength, bool bIsJump);// 0x25896b8
	FString GetVaultKeyByBlockHeightAndBlockLength(float Height, float BlockLength);// 0x2589590
	FString GetVaultKeyByBlockHeight(float Height);// 0x25894ac
	AnimMontage* GetVaultFPPAnimByName(FString AnimKey);// 0x25893c0
	AnimMontage* GetVaultAnimByName(FString AnimKey);// 0x25892d4
	Rotator GetRelicateRotator();// 0x258928c
	bool GetIsJumpByBlockHeightAndBlockLength(float Height, float BlockLength);// 0x25891c0
	FString GetAIVaultLengthKey(float blockHeightTemp, float TestHeight);// 0x25890a0
	FString GetAIVaultKeyWithJump(float blockHeightTemp, float BlockLengthTemp, float TestHeight, float TestBlocklength, bool bIsJump);// 0x2588ea0
	FString GetAIVaultKey(float blockHeightTemp, float BlockLengthTemp, float TestHeight, float TestBlocklength);// 0x2588cf0
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x2588a8c
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x2588828
	bool CheckCanVaultWithPosition(bool bUsePawnPosition, bool bCheckState, Vector WorldLocation, Rotator WorldRotation);// 0x46f6b154
	void CharacterStartVault(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir, AnimMontage* AnimMontage, bool bCheckDynamicBlock);// 0x25883f8

--------------------------------
Class: VaultAnimDataAsset.DataAsset.Object
	<FString,VaultAnimInfo> VaultAnimMap;//[Offset: 0x20, Size: 60]
	<FString,VaultAnimInfo> FPPVaultAnimMap;//[Offset: 0x5c, Size: 60]
	void OnPostLoadMapWithWorld(World* World);// 0x2799280
	void OnAsyncLoadingFinished();// 0x235d4b8

--------------------------------
Class: VaultAnimInfo
	AnimMontage* AnimSoftPtr;//[Offset: 0x0, Size: 40]

--------------------------------
Class: PlayerAIVaultCheckData
	FString VaultKey;//[Offset: 0x0, Size: 12]
	float blockthickLength;//[Offset: 0xc, Size: 4]
	float BlockHeight;//[Offset: 0x10, Size: 4]
	bool isFallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0, Size: 1]
	float TotalTime;//[Offset: 0x4, Size: 4]
	float AttachWeaponTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: MoveableBaseSmoothComp.ActorComponent.Object
	float SmoothNetUpdateTime;//[Offset: 0xfc, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x100, Size: 4]
	bool bFindFloorWhenSmoothInterpolate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	void OnRespawned();// 0x234fed4
	void OnRecycled();// 0x234fef0

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0, Size: 4]
	FString SwitchGroupName;//[Offset: 0x4, Size: 12]
	FString SwitchValue;//[Offset: 0x10, Size: 12]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	delegate OnRescueSucceedWithRef;//[Offset: 0xfc, Size: 12]
	FName DeadBuffName;//[Offset: 0x108, Size: 8]
	float BreathMax;//[Offset: 0x118, Size: 4]
	float AssistAccountableDuration;//[Offset: 0x11c, Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0x120, Size: 4]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0x128, Size: 4]
	int MaxDeathTimes;//[Offset: 0x12c, Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	float ZombieInitHealth;//[Offset: 0x134, Size: 4]
	byte HealthStatusOnServer;//[Offset: 0x139, Size: 1]
	byte LastHealthStatusOnServer;//[Offset: 0x13a, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x140, Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0x144, Size: 4]
	float Breath;//[Offset: 0x148, Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0x150, Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0x154, Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x15c, Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x160, Size: 4]
	DamageEvent DamageEventRecorded;//[Offset: 0x164, Size: 8]
	bool TryGotoLastBreathOrZombie(Controller* EventInstigator, Actor* DamageCauser, DamageEvent DamageEvent, float _finalDamage, bool IsDamageFromVehicleExplode);// 0x25fd168
	void SetIsDirectlyDie(bool bIsDirectlyDie);// 0x25fd0e8
	float SetHealthSafety(float AddVal);// 0x25fd068
	void S2C_HelpOther(Character* HelpWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x25fcf0c
	void S2C_BeHelpedByOther(Character* ByWho, bool IsTurnInfo, float RemainingRescueTime, float InReduceTime);// 0x25fcdb0
	void RescueFinishSuccessfully(int HealthAddtive);// 0x25fcd38
	void OnRep_BreathChanged();// 0x237e7b8
	void MakeSureOwnerEnterDeadState();// 0x25fcd24
	bool IsNearDeathInvincible();// 0x25fccfc
	bool IsHealthAlive();// 0x25fccd4
	bool IsHaveLastBreathStatus();// 0x25fccac
	bool IsFinishedLastBreathStatus();// 0x25fcc84
	void InitializeOwner(Pawn* TempPawn);// 0x25fcc0c
	float GetBreathMax();// 0x25fcbf0
	float GetBreath();// 0x25fcbd4
	void EnterSwimWhileDying();// 0x25fcbc0
	void DoFinishLastBreath();// 0x237e7b8
	void ClearNearDeathTeammateIfNeeded();// 0x25fcbac
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);// 0x25fcae0
	void AddDeadBuff();// 0x25fcacc

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xfc, Size: 4]
	float RescueingElapsedThrehold;//[Offset: 0x100, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0x104, Size: 4]
	anPickerData FanData;//[Offset: 0x108, Size: 20]
	delegate OnRescueSucceed;//[Offset: 0x11c, Size: 12]
	delegate OnRescueOtherEndWithRef;//[Offset: 0x128, Size: 12]
	STExtraBaseCharacter* RescueWho;//[Offset: 0x150, Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x154, Size: 4]
	float RestoringDuration;//[Offset: 0x170, Size: 4]
	float ReduceTime;//[Offset: 0x174, Size: 4]
	bool IgnoreReduceTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	STExtraBaseCharacter* PawnOwner_Private;//[Offset: 0x17c, Size: 8]
	bool IgnoreSelfDistanceAndState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	int ToTargetHealthAddtive;//[Offset: 0x19c, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x25fe568
	void WaitingConfirmState_ActOnUnsatisfied();// 0x25fe554
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x236ffe8
	void TickAsHelper(float DeltaTime);// 0x25fe4dc
	void SetIsDisableRescue(bool bIsDisableRefuse);// 0x25fe45c
	void ServerPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x25fe3a8
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x25fe330
	bool RescueSucImmediately(STExtraBaseCharacter* Target);// 0x25fe2b0
	bool RescueingState_IsConditionSatisfied();// 0x25fe288
	void RescueingState_ActOnUnsatisfied();// 0x25fe274
	void RescueingState_ActOnSatisfied(float DeltaTime);// 0x236ffe8
	void RescueingProcessFinished();// 0x25fe260
	void PlayerConfirmToRescueServerSide(STExtraBaseCharacter* _RescueWho);// 0x25fe1e8
	bool PlayerConfirmToRescueClientSide();// 0x25fe1c0
	bool PickTargetsAsHelper(out STExtraBaseCharacter*[] pickedTargets);// 0x25fe118
	void OnRep_IsRescueingOtherStatusChange();// 0x25fe104
	bool IsInRescueingStatus();// 0x25fe0dc
	void InitializeOwner(Pawn* _TempPawn, STCharacterNearDeathComp* _Outer, bool IgnoreSelf, bool IgnoreReduce);// 0x25fdf80
	float GetRestoringDuration();// 0x25fdf58
	void DrawDebugFan();// 0x235d4b8
	void ClientPlayerRefuse();// 0x25fdefc
	void ClientPlayerConfirm(STExtraBaseCharacter* _RescueWho);// 0x25fde48

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float angle;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	Vector2D screenCenter;//[Offset: 0xd0, Size: 8]
	CDInfo CDInfo;//[Offset: 0xd8, Size: 12]
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xe4, Size: 20]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xf8, Size: 20]
	PlayerController* PlayerController;//[Offset: 0x10c, Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x110, Size: 4]
	Actor*[] AllCharacters;//[Offset: 0x114, Size: 12]
	byte EnemyRaycastReachChannel;//[Offset: 0x12c, Size: 1]
	byte SmokeChannel;//[Offset: 0x12d, Size: 1]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x130, Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x134, Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x138, Size: 4]
	FName[] Bones;//[Offset: 0x1d0, Size: 12]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	bool ReadAutoAimingConfigSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd, Size: 1]
	STExtraPlayerController* extraPlayerController;//[Offset: 0x1e0, Size: 4]
	void TryDoAiming(float DeltaTime);// 0x27c2d28
	void SetCD(float CDTime);// 0x27c2cb0
	void SelectAimTarget(float DeltaTime);// 0x27c2c38
	void OnUnEquipWeapon();// 0x27c2c24
	void OnShoot(STExtraWeapon* Weapon);// 0x27c2bac
	void OnEquipWeapon();// 0x27c2b98
	bool IsTeammate(STExtraPlayerState* PlayerState, STExtraPlayerCharacter* Character);// 0x27c2ad4
	bool isOpenFire();// 0x27c2aac
	bool IsCool();// 0x27c2a84
	void Init(Controller* Controller);// 0x27c2a0c
	bool HoldFire();// 0x27c29e4
	void FindInRangeEnemies(out AutoAimEnemyInfo[] InRangeEnemyList);// 0x27c2944
	void FindBarrierFreeEnemy(out AutoAimEnemyInfo[] InRangeEnemyList);// 0x27c28a4
	void ClearCD();// 0x27c2890
	bool CheckSmoke(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x27c27b4
	bool CheckBuffStun();// 0x27c278c
	bool CanEnemeyRaycastReach(Vector StartPoint, STExtraPlayerCharacter* Pawn);// 0x27c26b0

--------------------------------
Class: CDInfo
	float CDTime;//[Offset: 0x0, Size: 4]
	float FireTime;//[Offset: 0x4, Size: 4]
	float followTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0, Size: 4]
	float DisToScreenCenter;//[Offset: 0x4, Size: 4]
	Vector WorldLocation;//[Offset: 0x8, Size: 12]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xd0, Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xd4, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xdc, Size: 4]
	float CanFollowDist;//[Offset: 0xe0, Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xe4, Size: 4]
	float QuitFollowDist;//[Offset: 0xe8, Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xec, Size: 4]
	float DistThrehold;//[Offset: 0xf0, Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xf8, Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x100, Size: 4]
	TargetKeyOperation*[] TargetOps;//[Offset: 0x138, Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x144, Size: 4]
	bool WaitingConfirmState_IsConditionSatisfied();// 0x25f74b8
	void WaitingConfirmState_ActOnUnsatisfied();// 0x25f74a4
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);// 0x236ffe8
	TargetJumpOperation* TargetStartVault(Vector vaultStartPos);// 0x25f741c
	void SetInterruptAutoFollowByInput(int InterrupteReason);// 0x25f73a4
	void SelectedPickedTargetChangeNotifyHUD(Pawn* previousTarget);// 0x25f732c
	bool PlayerStopFollow();// 0x25f7304
	bool PlayerConfirmToFollow();// 0x25f72dc
	void InitializeOwner(Pawn* _TempPawn);// 0x25f7264
	void FollowingTargetChangeNotifyHUD(Pawn* previousTarget);// 0x25f71ec
	bool FollowingState_IsConditionSatisfied();// 0x25f71c4
	void FollowingState_ActOnUnsatisfied();// 0x25f71b0
	void FollowingState_ActOnSatisfied(float DeltaTime);// 0x25f7138

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	void TaskRemoved();// 0x24492cc
	byte Start();// 0x242e898
	bool IsValidate();// 0x253b688
	void DebugDraw(Color debugColor, bool isPersist);// 0x271fe98
	void Awake();// 0x2374c8c

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x74, Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x78, Size: 4]
	byte Update(float DeltaTime);// 0x271bd00
	FString ToString();// 0x271ff5c
	void TaskRemoved();// 0x24492cc
	byte Start();// 0x242e898
	bool IsValidate();// 0x253b688
	bool IsReachable();// 0x248bfc8
	byte Finish();// 0x24da380
	void DebugDraw(Color debugColor, bool isPersist);// 0x271fe98
	void Awake();// 0x2374c8c

--------------------------------
Class: STNewCharacterFollowComp.ActorComponent.Object
	int FollowStopDist;//[Offset: 0xfc, Size: 4]
	int TurnaroundSpeedScale;//[Offset: 0x100, Size: 4]
	int TurnaroundAngleThreshold;//[Offset: 0x104, Size: 4]
	bool bStartTurnInstantly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	bool bNeedCorrectDirWhenFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 1]
	FollowTargetTransferAreaItem[] FollowTargetTransferAreaList;//[Offset: 0x10c, Size: 12]
	SelfFollowLimitAreaItem[] SelfFollowLimitAreaList;//[Offset: 0x118, Size: 12]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0x124, Size: 8]
	STExtraPlayerController* OwnerController;//[Offset: 0x12c, Size: 8]
	void RPC_Server_StartFollowWithPlayerKey(uint32 PlayerKey);// 0x2710d30
	void RPC_Client_PreFollow(Vector followPos);// 0x2710c74
	void OnCharacterMoveBlock(STExtraCharacter* BlockedCharacter, out const HitResult HitResult);// 0x2710b94

--------------------------------
Class: FollowTargetTransferAreaItem
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]
	Vector TransferVec;//[Offset: 0x18, Size: 12]

--------------------------------
Class: SelfFollowLimitAreaItem
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]

--------------------------------
Class: GiftTypeData
	byte GiftType;//[Offset: 0x0, Size: 1]
	int GiftSubType;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BonfireActor.UAEBuffApplierActor.Actor.Object
	float RemainingLifeTime;//[Offset: 0x2ec, Size: 4]
	bool bHasBeenLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	bool bHasBurnOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	RoastMeatActor* curRoastMeat;//[Offset: 0x2f4, Size: 4]
	void RemingLifeTimeChanged(float previousRemaining);// 0x23cdd04
	void RecordBonFireSuccess();// 0x23cdcf0
	void OnRep_RemainingLifeTime(float previousRemaining);// 0x23cdc78
	void OnRep_HasBurnOut();// 0x23cdc64
	void OnRep_HasBeenLit();// 0x23cdc50
	void OnRep_CurRoastMeat();// 0x23cdc3c
	void IsBurnOutChanged();// 0x23444d8
	FString CastMsg_Implementation(FString Msg);// 0x23cdb44

--------------------------------
Class: UAEBuffApplierActor.Actor.Object
	Controller* InstigatorController;//[Offset: 0x2e4, Size: 4]
	Controller* GetTheInstigatorController();// 0x23670b0

--------------------------------
Class: RoastMeatActor.Actor.Object
	BonfireActor* parentBonfire;//[Offset: 0x2e4, Size: 8]
	enum AnimalType;//[Offset: 0x2ec, Size: 1]
	bool IsDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 1]
	void RecordRoastMeatSuccess();// 0x25b19dc
	void OnRep_IsDone();// 0x25b19c8
	void CastActorMsg(FString Msg);// 0x25b1930

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x43c, Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	enum PerspectiveMode;//[Offset: 0x451, Size: 1]
	<enum,SpringArmParams> PerspectiveModeSpringArmParamMaps;//[Offset: 0x454, Size: 60]
	SpringArmModifierTPP* ModifierTPP;//[Offset: 0x490, Size: 4]
	class SpringArmModifier* ModifierTPPTemplate;//[Offset: 0x494, Size: 4]
	SpringArmModifierFPP* ModifierFPP;//[Offset: 0x498, Size: 4]
	class SpringArmModifier* ModifierFPPTemplate;//[Offset: 0x49c, Size: 4]
	SpringArmFreeCamera* FreeCamera;//[Offset: 0x4a0, Size: 4]
	class SpringArmFreeCamera* FreeCameraTemplate;//[Offset: 0x4a4, Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x4a8, Size: 4]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ac, Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x4b0, Size: 104]
	bool bViewAtActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	Rotator CameraRelativeActorRot;//[Offset: 0x51c, Size: 12]
	Vector CameraRelativeActorLoc;//[Offset: 0x528, Size: 12]
	Vector2D SocketOffsetPitchHipMapIn;//[Offset: 0x53c, Size: 8]
	Vector2D SocketOffsetPitchHipMapOut;//[Offset: 0x544, Size: 8]
	Vector2D SocketOffsetZRatioLengthMapIn;//[Offset: 0x54c, Size: 8]
	Vector2D SocketOffsetZRatioLengthMapOut;//[Offset: 0x554, Size: 8]
	Vector DefaultSocketOffset;//[Offset: 0x55c, Size: 12]
	float SpringArmRestoreInterpSpeed;//[Offset: 0x568, Size: 4]
	bool NeedTraceHeadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x574, Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x578, Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x57c, Size: 4]
	bool bNeedAddTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x582, Size: 1]
	float OffsetCountTime;//[Offset: 0x584, Size: 4]
	float OffSetDurTime;//[Offset: 0x588, Size: 4]
	float RevertMoveSpeed;//[Offset: 0x58c, Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x590, Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0x5a0, Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x5d0, Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x5e0, Size: 16]
	bool PrevCameraUseControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	bool bBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f1, Size: 1]
	void SetShoulderCameraMode(bool bShoulder);// 0x2432810
	void SetFPPCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x243274c
	void SetCustomCameraDataValueEnable(CameraOffsetData CustomCameraData, bool IsEnable);// 0x2432564
	void SetCustomCameraDataEnable(out const CameraOffsetData CustomCameraData, bool IsEnable);// 0x24323e8
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x2432324
	void OnRespawned();// 0x2432308
	void OnRecycled();// 0x24322ec
	SpringArmModifier* GetModifierByPerspectiveMode(enum Mode);// 0x243226c
	void EnterLandingHeavy();// 0x2432258
	void DelayRotationLagEnabledEnd();// 0x2432244
	void DelayRotationLagEnabled(bool bEnabled, float Time);// 0x243217c

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x324, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x328, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x32c, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x360, Size: 104]
	CameraOffsetData DefaultCameraData;//[Offset: 0x3c8, Size: 104]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x434, Size: 4]
	SpringArmModifier* CurModifier;//[Offset: 0x438, Size: 4]
	void OnRespawned();// 0x2432308
	void OnRecycled();// 0x24322ec
	Rotator GetTargetRotation();// 0x2498710
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x24985a4
	void ClearCameraData();// 0x254e2e8

--------------------------------
Class: SpringArmModifierTPP.SpringArmModifier.Object
	float AdditionalSocketOffetZMax;//[Offset: 0x12c, Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x130, Size: 8]
	float CurrentAdditionalSocketOffetZ;//[Offset: 0x138, Size: 4]
	bool UpdateCurCameraDataTPPBlueprint(float DeltaTime);// 0x46f6b154
	void UpdateCurCameraData(float DeltaTime);// 0x2411008
	bool SetCameraDataEnableBlueprint(enum CameraDataType, bool IsEnable);// 0x46f6b154
	void SetCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x25eb194

--------------------------------
Class: SpringArmModifierFPP.SpringArmModifier.Object
	bool SetFPPCameraDataEnableBlueprint(enum CameraDataType, bool IsEnable);// 0x46f6b154
	void SetFPPCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x25ead08

--------------------------------
Class: SpringArmFreeCamera.Object
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	float ResultMinPitch;//[Offset: 0x2c, Size: 4]
	float ResultMaxPitch;//[Offset: 0x30, Size: 4]
	SpringArmComponent* SpringArmComp;//[Offset: 0x34, Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x38, Size: 4]

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0, Size: 4]
	Vector AkLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* causer;//[Offset: 0x0, Size: 4]
	float Time;//[Offset: 0x4, Size: 4]
	float Damage;//[Offset: 0x8, Size: 4]
	int StatusChangeMargin;//[Offset: 0xc, Size: 4]
	int DamageType;//[Offset: 0x10, Size: 4]
	int AdditionalParam;//[Offset: 0x14, Size: 4]

--------------------------------
Class: ObserverSmoothComponent.ActorComponent.Object
	float SmoothNetUpdateLocationTime;//[Offset: 0xfc, Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0x100, Size: 4]
	float SmoothNetLocationTolerate;//[Offset: 0x104, Size: 4]
	float SmoothNetRotationTolerate;//[Offset: 0x108, Size: 4]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x10c, Size: 360]
	bool bIsOpenExceededDSMaxDisLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	float ExceededDSMaxDisLimit;//[Offset: 0x278, Size: 4]
	float ZToFloorInterpSpeed;//[Offset: 0x27c, Size: 4]
	bool bIsOpenInterpToFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bIsOpenZToFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	float MoveAlongFloorCheckMaxZDis;//[Offset: 0x284, Size: 4]
	float CanMoveAlongFloorOffsetZ;//[Offset: 0x288, Size: 4]
	bool bIsOpenNotFloorZToServerZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	void OnRespawned();// 0x234fed4
	void OnRecycled();// 0x234fef0

--------------------------------
Class: SimViewData
	uint16 ViewPitch;//[Offset: 0x0, Size: 2]
	uint16 ViewYaw;//[Offset: 0x2, Size: 2]
	uint16 ActorPitch;//[Offset: 0x4, Size: 2]
	uint16 ActorYaw;//[Offset: 0x6, Size: 2]
	byte ViewRoll;//[Offset: 0x8, Size: 1]
	byte DataExternded;//[Offset: 0x9, Size: 1]
	uint16 RelativeYawToPlayer;//[Offset: 0xa, Size: 2]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0, Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DamageReductionComponent.ActorComponent.Object
	<int,DamageReductionRule> DamageReductionMap;//[Offset: 0xd0, Size: 60]
	int DamageReductionKey;//[Offset: 0x10c, Size: 4]
	void RemoveDamageReductionData(int Key);// 0x243ae84
	float DamageReductionByAction(float UntreatedDamage, out const DamageEvent DamageEvent, Actor* DamageCauser);// 0x243ad54
	int AddDamageReductionData(out DamageReductionRule Rule, int Key);// 0x243ac2c

--------------------------------
Class: DamageReductionRule
	byte[] DamageTypeEnums;//[Offset: 0x0, Size: 12]
	class DamageType[] DamageTypeClasses;//[Offset: 0xc, Size: 12]
	class Object[] DamageCauserClasses;//[Offset: 0x18, Size: 12]
	float DamageReductionValue;//[Offset: 0x24, Size: 4]
	bool bIsMultiplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bBasedOnBasicValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: FootprintActorArrayInfo
	Transform[] CachedTransform;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xfc, Size: 4]
	int DetectThreshold;//[Offset: 0x100, Size: 4]
	float FoldFactor;//[Offset: 0x104, Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0x108, Size: 4]
	byte BlockChannel;//[Offset: 0x111, Size: 1]
	Vector BoxHalfSize;//[Offset: 0x114, Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0x120, Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0x12c, Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0x138, Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x144, Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x150, Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x154, Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x160, Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x16c, Size: 12]
	int FoldFactorDelt;//[Offset: 0x178, Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x17c, Size: 4]
	float TraceDisOffset;//[Offset: 0x180, Size: 4]
	float TraceDisForSfate;//[Offset: 0x184, Size: 4]
	float TickDeltTime;//[Offset: 0x188, Size: 4]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x2573aec
	void OnReconnectOnClient();// 0x2573ad8
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x2573988

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0xd0, Size: 12]
	float SwimWaterSufaceOffset;//[Offset: 0xdc, Size: 4]
	float DistoVolume;//[Offset: 0xe0, Size: 4]
	float UpdateMeshZOffsetWithTheWaves;//[Offset: 0xe4, Size: 4]
	float MaxBreathAmount;//[Offset: 0xe8, Size: 4]
	float DrowningHurtHight;//[Offset: 0xec, Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0xf0, Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0xf4, Size: 4]
	float BreathDeltaTime;//[Offset: 0xf8, Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0xfc, Size: 4]
	float MinSpeedScale;//[Offset: 0x100, Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0x104, Size: 4]
	float MaxProneWaterHeight;//[Offset: 0x108, Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0x10c, Size: 4]
	float RollMaxAngle;//[Offset: 0x110, Size: 4]
	float UpdateMeshZWithTheWavesInterpolationSpeed;//[Offset: 0x114, Size: 4]
	float UpdateMeshZWithTheWavesRatio;//[Offset: 0x118, Size: 4]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x138, Size: 4]
	void UpdateSwimCollisionHeightCpp();// 0x257af18
	void LeaveWater();// 0x257af04
	Actor* GetWaterObject();// 0x257aedc
	void EnterWater_BluePrint();// 0x46f6b154
	void EnterWater(Actor* WaterObject);// 0x257ae64

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0, Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4, Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8, Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20, Size: 4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x610, Size: 4]
	float AttachCheckDistance;//[Offset: 0x614, Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x618, Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x61c, Size: 4]
	float WeaponReconnectStuckAutoRecoverInterval;//[Offset: 0x620, Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x624, Size: 4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x63c, Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x648, Size: 12]
	void UpdateDataWhenFinishPickInitialItemOnServer();// 0x240b9a8
	void UpdateDataWhenBagChangedOnServer(ItemDefineID DefineID, enum OperationType, byte Reason);// 0x240b898
	void OnRecoverOnServer();// 0x23c8760
	void OnReconnectOnServer();// 0x240b87c
	void OnReconnectOnClient();// 0x240b860
	void OnDisconnectToClientOnServer();// 0x240b84c
	void LocalUpdateDataWhenBagChanged();// 0x240b838
	int GetBagLevel();// 0x240b808
	void ForceUpdateWeaponPoseByBagLevelOnServer();// 0x240b7ec
	void ForceClearClientCreateWeaponCache();// 0x240b790
	void ClearAllInventoryData();// 0x23b7e18
	void BuildWeaponReconnectData(byte Slot, int OpIndex);// 0x240b6d4

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0, Size: 88]
	STExtraWeapon* Weapon;//[Offset: 0x58, Size: 4]

--------------------------------
Class: PlayerVehAnimList
	AnimationAsset* IdleAnim;//[Offset: 0x4, Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0x8, Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0xc, Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x10, Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x14, Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x18, Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x1c, Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x20, Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x24, Size: 4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x28, Size: 4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x2c, Size: 4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x30, Size: 4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x34, Size: 4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x38, Size: 4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x3c, Size: 4]
	AnimationAsset* SurfBoard_ProneAnim;//[Offset: 0x40, Size: 4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x44, Size: 4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x48, Size: 4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x4c, Size: 4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x50, Size: 4]
	AnimationAsset* Ski_Falling;//[Offset: 0x54, Size: 4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x58, Size: 4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x5c, Size: 4]
	AnimationAsset* VehicleWeaponIdleAnim;//[Offset: 0x60, Size: 4]
	AnimationAsset* VehicleWeaponReloadAnim;//[Offset: 0x64, Size: 4]
	AnimationAsset* VehicleWeaponAimOffsetAnim;//[Offset: 0x68, Size: 4]
	AnimationAsset* MotorgliderSteerAnim;//[Offset: 0x6c, Size: 4]
	AnimationAsset* MotorgliderIdleAnim;//[Offset: 0x70, Size: 4]
	AnimationAsset* BalloonManAnim;//[Offset: 0x74, Size: 4]
	AnimationAsset* BalloonCPManAnim;//[Offset: 0x78, Size: 4]
	AnimationAsset* BalloonWomanAnim;//[Offset: 0x7c, Size: 4]
	AnimationAsset* BalloonCPWomanAnim;//[Offset: 0x80, Size: 4]

--------------------------------
Class: AnimVehParamList
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	float VacateHight;//[Offset: 0x4, Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	Rotator VehViewRotation;//[Offset: 0xc, Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x18, Size: 12]
	byte SeatWeaponHoldType;//[Offset: 0x24, Size: 1]
	byte SeatSpecialType;//[Offset: 0x25, Size: 1]
	enum VehicleType;//[Offset: 0x26, Size: 1]
	float LeanOutPercentage;//[Offset: 0x28, Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: DamageScale
	int[] TypeIDs;//[Offset: 0x0, Size: 12]
	float DamageScale;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0, Size: 4]
	float Durability;//[Offset: 0x4, Size: 4]
	float DamageReduceScale;//[Offset: 0x8, Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0xc, Size: 12]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x18, Size: 4]
	FName HitEffectTagOverride;//[Offset: 0x20, Size: 8]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0, Size: 12]
	float EnergyMax;//[Offset: 0xc, Size: 4]
	float EnergyCurrent;//[Offset: 0x10, Size: 4]
	float AttenuationPeriod;//[Offset: 0x14, Size: 4]
	float AttenuationAmount;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0, Size: 4]
	FName BuffName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x144, Size: 4]

--------------------------------
Class: STCharacterBonfireLinkComp.ActorComponent.Object
	BonfireFanPickerData FanData;//[Offset: 0xd0, Size: 20]
	float ReturnToFindNewTimer;//[Offset: 0xe4, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xec, Size: 8]
	BonfireActor*[] bonFireCandidates;//[Offset: 0xf4, Size: 12]
	void RemoveBonfireCandidate(BonfireActor* newBonfire);// 0x25f6cc8
	void InitializeOwner(Pawn* _TempPawn);// 0x25f6c50
	void AddBonfireCandidate(BonfireActor* newBonfire);// 0x25f6bd8

--------------------------------
Class: BonfireFanPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float HightDiff;//[Offset: 0x4, Size: 4]
	float angle;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0, Size: 12]
	byte ShowType;//[Offset: 0xc, Size: 1]
	float Value;//[Offset: 0x10, Size: 4]
	float LimitValue;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	void ReportVerifyInfoFlow();// 0x25c959c
	void ReportPlayerKillFlow(const ClientSecPlayerKillFlow PlayerKillFlow);// 0x25c94c8
	void ReportMrpcsFlow(const ClientSecMrpcsFlow MrpcsFlow);// 0x25c9404
	void ReportJumpFlow(const ClientJumpFlow JumpFlow);// 0x25c9310
	void ReportJoyStickFlow(const JoyStickFlow JoyStickFlow);// 0x25c922c
	void ReportHurtFlow(const HurtFlow HurtFlow);// 0x25c9170
	void ReportGvoiceTeamQuit(const GvoiceTeamQuit teamQuit);// 0x25c908c
	void ReportGvoiceTeamCreate(const GvoiceTeamCreate teamCreate);// 0x25c8fa8
	void ReportGameStartFlow(const ClientGameStartFlow GameStartFlow);// 0x25c8eec
	void ReportGameSetting(const GameSetting GameSetting);// 0x25c8e28
	void ReportGameEndFlow(const ClientGameEndFlow GameEndFlow);// 0x25c8ce0
	void ReportGameBaseInfo(const GameBaseInfo BaseInfo);// 0x25c8b9c
	void ReportCircleFlow(const ClientCircleFlow CircleFlow);// 0x25c8a88
	void ReportAttackFlow(const AttackFlow AttackFlow);// 0x25c89cc
	void ReportAimFlow(const AimFlow AimFlow);// 0x25c8910

--------------------------------
Class: ClientSecMrpcsFlow
	byte SecMrpcsFlowID;//[Offset: 0x0, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x4, Size: 12]

--------------------------------
Class: JoyStickFlow
	FString UID;//[Offset: 0x0, Size: 12]
	int StickAngle;//[Offset: 0xc, Size: 4]
	FString RoleCoordinate;//[Offset: 0x10, Size: 12]
	int RoleMovingState;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GvoiceTeamQuit
	FString GVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UID;//[Offset: 0x20, Size: 8]

--------------------------------
Class: GvoiceTeamCreate
	FString GVoiceTeamID;//[Offset: 0x0, Size: 12]
	FString GVoiceRoomID;//[Offset: 0xc, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x18, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x1c, Size: 4]
	uint64 UID;//[Offset: 0x20, Size: 8]

--------------------------------
Class: ClientGameStartFlow
	uint32 ClientStartTime;//[Offset: 0x0, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x4, Size: 12]
	FString MapName;//[Offset: 0x10, Size: 12]
	int8 WeatherID;//[Offset: 0x1c, Size: 1]
	FString ItemList;//[Offset: 0x20, Size: 12]
	int8 TeamType;//[Offset: 0x2c, Size: 1]
	int8 TeamID;//[Offset: 0x2d, Size: 1]
	FString TeamPlayer1;//[Offset: 0x30, Size: 12]
	FString TeamPlayer2;//[Offset: 0x3c, Size: 12]
	FString TeamPlayer3;//[Offset: 0x48, Size: 12]
	byte SecGameStartFlowFlowID;//[Offset: 0x54, Size: 1]
	FString GVoiceTeamID;//[Offset: 0x58, Size: 12]
	FString GVoiceRoomID;//[Offset: 0x64, Size: 12]
	int GVoiceTeamMemberID;//[Offset: 0x70, Size: 4]
	int GVoiceRoomMemberID;//[Offset: 0x74, Size: 4]
	byte[] MrpcsFlowData;//[Offset: 0x78, Size: 12]

--------------------------------
Class: GameSetting
	uint64 RoleID;//[Offset: 0x0, Size: 8]
	GameSetting_BasicSetting BasicSetting;//[Offset: 0x8, Size: 76]
	GameSetting_ArtQuality ArtQuality;//[Offset: 0x54, Size: 8]
	GameSetting_Operate Operate;//[Offset: 0x5c, Size: 8]
	GameSetting_Vehicle Vehicle;//[Offset: 0x64, Size: 8]
	GameSetting_Sensibility Sensibility;//[Offset: 0x6c, Size: 112]
	GameSetting_PickUp Pickup;//[Offset: 0xdc, Size: 84]
	GameSetting_Effect Effect;//[Offset: 0x130, Size: 8]

--------------------------------
Class: GameSetting_BasicSetting
	int CrossHairColor;//[Offset: 0x0, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	int SingleShotWeaponShootMode;//[Offset: 0x8, Size: 4]
	int ShotGunShootMode;//[Offset: 0xc, Size: 4]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int LRShootMode;//[Offset: 0x14, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int LeftHandFire;//[Offset: 0x1c, Size: 4]
	int Gyroscope;//[Offset: 0x20, Size: 4]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	bool OneKeyScopeFire_OtherMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	int InterruptReloadType;//[Offset: 0x2c, Size: 4]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int OpenMirrorMode;//[Offset: 0x34, Size: 4]
	int SideMirrorMode;//[Offset: 0x38, Size: 4]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	int FpViewValue;//[Offset: 0x40, Size: 4]
	int TpViewValue;//[Offset: 0x44, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool QuickThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]

--------------------------------
Class: GameSetting_ArtQuality
	int ArtStyle;//[Offset: 0x0, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Operate
	int fireMode;//[Offset: 0x0, Size: 4]
	bool Touch_3D_Switcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: GameSetting_Vehicle
	int VehicleControlMode;//[Offset: 0x0, Size: 4]
	int DrivingViewMode;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_Sensibility
	int CameraLensSensibility;//[Offset: 0x0, Size: 4]
	GameSetting_Sensibility_FreeCam Sens_FreeCamera;//[Offset: 0x4, Size: 12]
	GameSetting_Sensibility_Cam Sens_Camera;//[Offset: 0x10, Size: 32]
	GameSetting_Sensibility_Fire Sens_Fire;//[Offset: 0x30, Size: 32]
	GameSetting_Sensibility_Gyroscope Sens_Gyroscope;//[Offset: 0x50, Size: 32]

--------------------------------
Class: GameSetting_Sensibility_FreeCam
	float VehicleEye;//[Offset: 0x0, Size: 4]
	float ParachuteEye;//[Offset: 0x4, Size: 4]
	float CamFpFreeEye;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Cam
	float CamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float CamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Fire
	float FireCamLensSenNoneSniper;//[Offset: 0x0, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0xc, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x10, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x14, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x18, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GameSetting_Sensibility_Gyroscope
	float GyroscopeSenNoneSniper;//[Offset: 0x0, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x4, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x8, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0xc, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x10, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x14, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x18, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: GameSetting_PickUp
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool AKMAutoMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	GameSetting_PickUp_Drug Drug;//[Offset: 0x8, Size: 24]
	Gamesetting_PickUp_Grenade Grenade;//[Offset: 0x20, Size: 16]
	GameSetting_PickUp_WeaponBullet[] WeaponBulletList;//[Offset: 0x30, Size: 12]
	GameSetting_PickUp_SightingTelescope SightingTelescope;//[Offset: 0x3c, Size: 24]

--------------------------------
Class: GameSetting_PickUp_Drug
	int MedicalTreatment;//[Offset: 0x0, Size: 4]
	int Bandage;//[Offset: 0x4, Size: 4]
	int PainKiller;//[Offset: 0x8, Size: 4]
	int Adrenaline;//[Offset: 0xc, Size: 4]
	int EnergyDrink;//[Offset: 0x10, Size: 4]
	int FirstAidKit;//[Offset: 0x14, Size: 4]

--------------------------------
Class: Gamesetting_PickUp_Grenade
	int IncendiaryBomb;//[Offset: 0x0, Size: 4]
	int ShockBomb;//[Offset: 0x4, Size: 4]
	int SmokeBomb;//[Offset: 0x8, Size: 4]
	int GrenadeFragmented;//[Offset: 0xc, Size: 4]

--------------------------------
Class: GameSetting_PickUp_WeaponBullet
	int WeaponID;//[Offset: 0x0, Size: 4]
	int BulletCount;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameSetting_PickUp_SightingTelescope
	int LimitSniper2X;//[Offset: 0x0, Size: 4]
	int LimitSniper3X;//[Offset: 0x4, Size: 4]
	int LimitSniper4X;//[Offset: 0x8, Size: 4]
	int LimitSniper6X;//[Offset: 0xc, Size: 4]
	int LimitSniper8X;//[Offset: 0x10, Size: 4]
	int NewLimitRedDotHolographic;//[Offset: 0x14, Size: 4]

--------------------------------
Class: GameSetting_Effect
	int HitEffect_Type;//[Offset: 0x0, Size: 4]
	int HitEffect_Color;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ClientGameEndFlow
	uint32 ClientStartTime;//[Offset: 0x0, Size: 4]
	int[] MrpcsFlow;//[Offset: 0x4, Size: 12]
	FString ClientVersion;//[Offset: 0x10, Size: 12]
	uint16 OverTime;//[Offset: 0x1c, Size: 2]
	int8 EndType;//[Offset: 0x1e, Size: 1]
	byte KillCount;//[Offset: 0x1f, Size: 1]
	byte AssistsCount;//[Offset: 0x20, Size: 1]
	byte DropCount;//[Offset: 0x21, Size: 1]
	byte SaveCount;//[Offset: 0x22, Size: 1]
	byte RebornCount;//[Offset: 0x23, Size: 1]
	bool AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	int GoldGet;//[Offset: 0x28, Size: 4]
	int DiamondGet;//[Offset: 0x2c, Size: 4]
	int ExpGet;//[Offset: 0x30, Size: 4]
	byte WinRank;//[Offset: 0x34, Size: 1]
	byte TotalPlayers;//[Offset: 0x35, Size: 1]
	int PlayerRank;//[Offset: 0x38, Size: 4]
	int RankEnd;//[Offset: 0x3c, Size: 4]
	int8 TeamID;//[Offset: 0x40, Size: 1]
	FString TeamPlayer1;//[Offset: 0x44, Size: 12]
	FString TeamPlayer2;//[Offset: 0x50, Size: 12]
	FString TeamPlayer3;//[Offset: 0x5c, Size: 12]
	bool TeamPlayer1AliveType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool TeamPlayer2AliveType;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool TeamPlayer3AliveType;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	byte TeamPlayer1Kill;//[Offset: 0x69, Size: 1]
	byte TeamPlayer2Kill;//[Offset: 0x6a, Size: 1]
	byte TeamPlayer3Kill;//[Offset: 0x6b, Size: 1]
	byte GameEndFlowID;//[Offset: 0x6c, Size: 1]
	byte RoundCircleCount;//[Offset: 0x6d, Size: 1]
	byte[] MrpcsFlowData;//[Offset: 0x70, Size: 12]

--------------------------------
Class: AttackFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 AreaID;//[Offset: 0x30, Size: 1]
	int8 PlatID;//[Offset: 0x31, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int8 MrpcsFlowcount_;//[Offset: 0x50, Size: 1]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	FString TargetOpenID;//[Offset: 0x7c, Size: 12]
	FString TargetUserName;//[Offset: 0x88, Size: 12]
	uint64 TargetRoleID;//[Offset: 0x98, Size: 8]
	int8 TargetRoleType;//[Offset: 0xa0, Size: 1]
	FString GunName;//[Offset: 0xa4, Size: 12]
	FString GunPartsType;//[Offset: 0xb0, Size: 12]
	int8 SightType;//[Offset: 0xbc, Size: 1]
	int BulletSpeed;//[Offset: 0xc0, Size: 4]
	int8 MagazineMax;//[Offset: 0xc4, Size: 1]
	int8 MagazineLeft;//[Offset: 0xc5, Size: 1]
	int ShotFrequency;//[Offset: 0xc8, Size: 4]
	int BulletDamage;//[Offset: 0xcc, Size: 4]
	int16 BulletDown;//[Offset: 0xd0, Size: 2]
	byte BulletDamageReduce;//[Offset: 0xd2, Size: 1]
	int Recoil;//[Offset: 0xd4, Size: 4]
	int ReloadTime;//[Offset: 0xd8, Size: 4]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	byte ShotPose;//[Offset: 0xe8, Size: 1]
	byte FireType;//[Offset: 0xe9, Size: 1]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea, Size: 1]
	byte Sideways;//[Offset: 0xeb, Size: 1]
	int ShootingDeviationX;//[Offset: 0xec, Size: 4]
	int ShootingDeviationY;//[Offset: 0xf0, Size: 4]
	uint32 ZeroDistance;//[Offset: 0xf4, Size: 4]
	uint32 ShotTime;//[Offset: 0xf8, Size: 4]
	int HitTime;//[Offset: 0xfc, Size: 4]
	int PlayerPositionX;//[Offset: 0x100, Size: 4]
	int PlayerPositionY;//[Offset: 0x104, Size: 4]
	int PlayerPositionZ;//[Offset: 0x108, Size: 4]
	int GunPositionX;//[Offset: 0x10c, Size: 4]
	int GunPositionY;//[Offset: 0x110, Size: 4]
	int GunPositionZ;//[Offset: 0x114, Size: 4]
	int BulletsBornPositionX;//[Offset: 0x118, Size: 4]
	int BulletsBornPositionY;//[Offset: 0x11c, Size: 4]
	int BulletsBornPositionZ;//[Offset: 0x120, Size: 4]
	uint32 LastHitTime;//[Offset: 0x124, Size: 4]
	uint32 BulletFlyDistance;//[Offset: 0x128, Size: 4]
	uint32 BulletFlyTime;//[Offset: 0x12c, Size: 4]
	int HitPositionX;//[Offset: 0x130, Size: 4]
	int HitPositionY;//[Offset: 0x134, Size: 4]
	int HitPositionZ;//[Offset: 0x138, Size: 4]
	byte HitPart;//[Offset: 0x13c, Size: 1]
	bool bHitCar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13d, Size: 1]
	bool bTireOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13d, Size: 1]
	byte BulletCost;//[Offset: 0x13e, Size: 1]
	int HPstart;//[Offset: 0x140, Size: 4]
	int HPEnd;//[Offset: 0x144, Size: 4]
	int ArmorHPStart;//[Offset: 0x148, Size: 4]
	int ArmorHPEnd;//[Offset: 0x14c, Size: 4]
	int CarHPStart;//[Offset: 0x150, Size: 4]
	int CarHPEnd;//[Offset: 0x154, Size: 4]
	byte PlayerKill;//[Offset: 0x158, Size: 1]
	bool bArmorKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x159, Size: 1]
	bool bCarKill;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x159, Size: 1]
	int RecoilMoveX;//[Offset: 0x15c, Size: 4]
	int RecoilMoveY;//[Offset: 0x160, Size: 4]
	int WeaponAimFOV;//[Offset: 0x164, Size: 4]
	int BulletDamageDebuff;//[Offset: 0x168, Size: 4]
	int BulletDamageBuff;//[Offset: 0x16c, Size: 4]
	uint32 AtackFlowID;//[Offset: 0x170, Size: 4]
	int AutoAimSpeed;//[Offset: 0x174, Size: 4]
	int AutoAimSpeedRateMax;//[Offset: 0x178, Size: 4]
	int AutoAimRangeMax;//[Offset: 0x17c, Size: 4]
	int AutoAimRangeRateMax;//[Offset: 0x180, Size: 4]
	int GunID;//[Offset: 0x184, Size: 4]

--------------------------------
Class: AimFlow
	FString GameSvrId;//[Offset: 0x0, Size: 12]
	int64 dtEventTime;//[Offset: 0x10, Size: 8]
	FString GameAppID;//[Offset: 0x18, Size: 12]
	FString OpenID;//[Offset: 0x24, Size: 12]
	int8 AreaID;//[Offset: 0x30, Size: 1]
	int8 PlatID;//[Offset: 0x31, Size: 1]
	FString ZoneID;//[Offset: 0x34, Size: 12]
	uint64 BattleID;//[Offset: 0x40, Size: 8]
	int64 ClientStartTime;//[Offset: 0x48, Size: 8]
	int8 MrpcsFlowcount_;//[Offset: 0x50, Size: 1]
	int[] MrpcsFlow;//[Offset: 0x54, Size: 12]
	FString UserName;//[Offset: 0x60, Size: 12]
	uint64 RoleID;//[Offset: 0x70, Size: 8]
	int8 RoleType;//[Offset: 0x78, Size: 1]
	int AimTime;//[Offset: 0x7c, Size: 4]
	FString ShotCDTime;//[Offset: 0x80, Size: 12]
	int ShotCount;//[Offset: 0x8c, Size: 4]
	int ShotHitCount;//[Offset: 0x90, Size: 4]
	int ShotHeadHitCount;//[Offset: 0x94, Size: 4]
	int ShotPersonHitCount;//[Offset: 0x98, Size: 4]
	int ShotPersonKillCount;//[Offset: 0x9c, Size: 4]
	FString HitDistance;//[Offset: 0xa0, Size: 12]
	FString HitEachDistance;//[Offset: 0xac, Size: 12]
	FString HitAngle;//[Offset: 0xb8, Size: 12]
	FString HitEachCdTime;//[Offset: 0xc4, Size: 12]
	FString HitPartInfo;//[Offset: 0xd0, Size: 12]
	FString PlayerState;//[Offset: 0xdc, Size: 12]
	bool bHoldBreath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	int8 SightType;//[Offset: 0xe9, Size: 1]
	uint32 AimFlowID;//[Offset: 0xec, Size: 4]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0, Size: 4]
	float SteerInput;//[Offset: 0x4, Size: 4]
	int8 State;//[Offset: 0x8, Size: 1]
	Rotator ControlRotation;//[Offset: 0xc, Size: 12]

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimData[] CharParachuteAnimDataList;//[Offset: 0x1d0, Size: 12]
	void ReleaseParachuteAnimAssets();// 0x2fbfedc
	void OnParachuteAnimAsyncLoadingFinished(FString AnimLoaded);// 0x2fbfdf8
	void OnAnimListAsyncLoadingFinished();// 0x2fbfde4
	bool IsAnimAsyncLoading();// 0x2fbfdbc
	bool HasAnimAsyncLoadingFinished();// 0x2fbfd94
	void HandleAsyncLoadingFinishedEvent();// 0x2fbfd80
	FString GetOwnerName();// 0x2fbfcec
	AnimationAsset* GetCharacterParachuteAnim(byte AnimType);// 0x2fbfc6c

--------------------------------
Class: CharParachuteAnimData
	byte ParachuteAnimType;//[Offset: 0x0, Size: 1]
	AnimationAsset* ParachuteAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* ParachuteAnim;//[Offset: 0x30, Size: 4]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize100 Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	Vector_NetQuantize100 Velocity;//[Offset: 0x18, Size: 12]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object
	void SetIsDisableParachuteFollow(bool bIsDisableParachuteFollow);// 0x25570c0

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0, Size: 1]
	int LeaderIdx;//[Offset: 0x4, Size: 4]

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0x10c, Size: 4]
	FName FirstPersonCameraSocketName;//[Offset: 0x110, Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x118, Size: 8]
	FName FPPSocketName;//[Offset: 0x120, Size: 8]
	FName BoltActionCurveName;//[Offset: 0x128, Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0x130, Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0x138, Size: 4]
	float BoltActionFov;//[Offset: 0x13c, Size: 4]
	float ScopeZoomAlpha;//[Offset: 0x140, Size: 4]
	float ScopeZoomSpeed;//[Offset: 0x148, Size: 4]
	<FName,MaterialInterface*> ScopeMaterials;//[Offset: 0x14c, Size: 60]
	int CurrentPlayAnimIndex;//[Offset: 0x188, Size: 4]
	DollyZoomParam ZoomScopeParam;//[Offset: 0x190, Size: 12]
	<int,CurveFloat*> ScopeZoomFovCurveMap;//[Offset: 0x19c, Size: 60]
	<uint64,int> WeaponAngledSightState;//[Offset: 0x1d8, Size: 60]
	int NearClipCameraAimMode;//[Offset: 0x214, Size: 4]
	CharacterAvatarComponent* _AvatarComp;//[Offset: 0x234, Size: 4]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x240, Size: 192]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x300, Size: 192]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x3c0, Size: 192]
	SpringArmParams FPPSpringArmParam;//[Offset: 0x480, Size: 192]
	SpringArmParams ShoulderSpringArmParam;//[Offset: 0x540, Size: 192]
	SpringArmParams AIMSpringArmParam;//[Offset: 0x600, Size: 192]
	CurveFloat* ADSCurve;//[Offset: 0x6c0, Size: 4]
	CurveFloat* SightAngledCurve;//[Offset: 0x6c4, Size: 4]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x6c8, Size: 8]
	FName TargetScopeAimCameraSocketName;//[Offset: 0x6d0, Size: 8]
	CameraModifyData ADSModify;//[Offset: 0x6e0, Size: 336]
	CameraModifyData VehWeaponADSModify;//[Offset: 0x830, Size: 336]
	void UpdateScopeCameraOffsets(out DollyZoomParam Param, bool IsAngledSight, float Alpha);// 0x23b87cc
	float SwitchSightConfigMaterial();// 0x46f6b154
	void SwitchScopeMeshAnim(byte Type);// 0x23b8754
	void SwitchRearSightTimelineUpdate(float Alpha);// 0x23b86dc
	void SwitchRearSightTimelineFinish(int TargetRearSightSocketIndex);// 0x23b8664
	void SwitchCameraMode(byte Mode, bool IsUseLerpFPP);// 0x23b85a0
	float SwitchAngledSightConfigMaterial(bool forceSwitch);// 0x46f6b154
	void StopScopeIn();// 0x46f6b154
	float ShowReflectorSightTPPMaterial(bool forceADSState);// 0x46f6b154
	float ShowAngledSightTPPMaterial(bool forceADSState);// 0x46f6b154
	void SetWeaponAngledSightState(STExtraShootWeapon* Weapon, bool State);// 0x23b84d4
	void SetTagCulling(bool IsUse);// 0x46f6b154
	void SetNearClipPlane(bool EnableNearClip);// 0x23b8454
	void ScopingChange(bool InValue);// 0x23b83d4
	void Scoping(byte NewType);// 0x23b835c
	void ScopeZoomUpdate(float Alpha);// 0x23b82e4
	void ScopeZoomTick(float DeltaTime);// 0x23b826c
	void ScopeTimelineUpdate(float Alpha);// 0x23b81f4
	void ScopeOutSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x23b8138
	void ScopeOutLogic();// 0x23b8124
	void ScopeOutEnd();// 0x46f6b154
	void ScopeOut(byte NewType);// 0x23b80ac
	void ScopeNotHandFold();// 0x23b8098
	void ScopeInterrupt(byte NewType, bool ForceInterrupt);// 0x23b7fd4
	void ScopeInSpeedChange(STExtraPlayerController* Controller, ShootWeaponEntity* entity);// 0x23b7f18
	bool ScopeInLogic();// 0x23b7ef0
	void ScopeInEnd();// 0x46f6b154
	void ScopeInContinue();// 0x23b7edc
	void ScopeInAfterTimeline();// 0x23b7ec8
	bool ScopeIn(byte NewType);// 0x23b7e48
	void ScopeHandFold();// 0x23b7e34
	void PlayScopeInTimeline();// 0x46f6b154
	void OnRespawned();// 0x23b7e18
	void OnRecycled();// 0x23b7dfc
	bool IsUseZoomScope();// 0x23b7dd4
	int IsUseCameraProcess();// 0x23b7dac
	bool IsScopeInTimelinePlaying();// 0x46f6b154
	bool IsRPGScopeIn();// 0x23b7d84
	bool IsCurWeaponAttachedAngledSight();// 0x23b7b68
	bool IsAngledSightBySlot(byte Slot);// 0x23b7cfc
	bool IsAngledSight();// 0x23b7ccc
	void InitScopeZoom(int WeaponID, int ScopeID);// 0x23b7c10
	bool HaveAngledSightBySlot(byte Slot);// 0x23b7b90
	bool HaveAngledSight();// 0x23b7b68
	void HandleScopeMeshLoaded(enum Type);// 0x23b7af0
	byte GetSightType();// 0x23b7ac8
	float GetScopeZoomValue(int WeaponID, int ScopeID);// 0x23b7a04
	FName GetScopeZoomKey(int WeaponID, int ScopeID);// 0x23b7938
	float GetScopeFov(STExtraShootWeapon* ShootWeapon, bool bIsAngled);// 0x46f6b154
	MeshComponent* GetScopeCameraAttachTarget(bool IsAngled);// 0x23b78a8
	FName GetScopeAimCameraSocketName();// 0x23b7868
	void GetCurrentScopeZoomFov(out float MinFov, out float CurFov, float InScopeZoomAlpha);// 0x23b7740
	void CalculateDollyZoomParam(float SpringOffset, float MinFov, float CurFov, out DollyZoomParam Param);// 0x23b75dc
	void BoltAction(float DeltaSeconds);// 0x23b7564
	void AttachToSightKeepTransform();// 0x46f6b154
	void AttachToSight();// 0x46f6b154
	void ApplyDollyZoomParam(out const DollyZoomParam Param, bool bSyncToPawn);// 0x23b7480
	void AngledSightMove(out const DollyZoomParam Param, Vector SourceLoc, Vector TargetLoc, float Alpha, MeshComponent* WeaponMesh, bool bSyncToPawn);// 0x23b7254
	void ActiveComponentTickable();// 0x23b7240

--------------------------------
Class: DollyZoomParam
	float FOV;//[Offset: 0x0, Size: 4]
	float Scale;//[Offset: 0x4, Size: 4]
	float Offset;//[Offset: 0x8, Size: 4]

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x1d0, Size: 12]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x1dc, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x1e8, Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x1f4, Size: 12]
	CurveFloat* FallingIKCurve;//[Offset: 0x200, Size: 4]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x204, Size: 12]
	CharacterVehAnimModifyData[] CharVehAnimModifyList;//[Offset: 0x210, Size: 12]
	DynamicLoadinigAnimData[] DynamicLoadinigAnimEditList;//[Offset: 0x21c, Size: 12]
	float StandbyTimeOver;//[Offset: 0x228, Size: 4]
	bool EnableStandbyAnimOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c, Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e, Size: 1]
	void OnDynamicAnimAsyncLoadingFinished(DynamicLoadinigAnimAsynLoadParam LoadPrarm, SoftObjectPath TempPath);// 0x2fc1f50
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x2fc1d90
	float GetStandbyTimeOver();// 0x2fc1d68
	bool GetEnableStandbyAnimOverride();// 0x2fc1d4c
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType);// 0x2fc1c70
	void AnimModifyByMask(int MaskValue);// 0x2499198

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	FName AnimTypeName;//[Offset: 0x8, Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10, Size: 56]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x48, Size: 56]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x80, Size: 56]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* PoseAnim;//[Offset: 0x30, Size: 4]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 1]
	FName JumpTypeName;//[Offset: 0x8, Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10, Size: 56]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x48, Size: 56]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x80, Size: 56]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xb8, Size: 56]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xf0, Size: 56]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* PhaseAnim;//[Offset: 0x30, Size: 4]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0, Size: 4]
	byte ModifyAnimListType;//[Offset: 0x4, Size: 1]
	byte AnimType;//[Offset: 0x5, Size: 1]
	byte PoseType;//[Offset: 0x6, Size: 1]
	byte JumpType;//[Offset: 0x7, Size: 1]
	byte JumpPhase;//[Offset: 0x8, Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: CharacterVehAnimModifyData
	enum VehicleType;//[Offset: 0x0, Size: 1]
	int SeatIdx;//[Offset: 0x4, Size: 4]
	byte VehicleAnimType;//[Offset: 0x8, Size: 1]
	AnimationAsset* VehicleAnimSoftPtr;//[Offset: 0x10, Size: 40]

--------------------------------
Class: DynamicLoadinigAnimData
	byte AnimType;//[Offset: 0x0, Size: 1]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x8, Size: 56]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x40, Size: 56]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x78, Size: 56]

--------------------------------
Class: DynamicLoadinigAnimAsynLoadParam

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc, Size: 4]
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10, Size: 4]
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14, Size: 4]
	float GameModeOverride_WeaponAimInTimeModifier;//[Offset: 0x18, Size: 4]

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0, Size: 4]
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4, Size: 4]
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8, Size: 4]
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc, Size: 4]

--------------------------------
Class: WeaponOwnerComponent.ActorComponent.Object
	FString WeaponMuduleConfigTablePath;//[Offset: 0xfc, Size: 12]
	FString WeaponAttrConfigTablePath;//[Offset: 0x108, Size: 12]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x124, Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0x128, Size: 12]
	void ServerSetReloadMethod(byte reloadMethod);// 0x27cf2ac
	void ServerDropWeapon(STExtraShootWeapon* CurrentWeapon);// 0x27cf1f8
	byte SequenceSearchUseableWeaponSlot(STExtraShootWeapon* ShootWeapon);// 0x27cf170
	void RPC_Server_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState, bool bAllowSwitch);// 0x27cef48
	void RPC_Server_SwapMainWeapon();// 0x27ceeec
	void RPC_OwnerClient_SetCurrentWeaponVisible(bool bVisible);// 0x27cee24
	void RPC_Client_SwitchWeapon(byte Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch, bool ignoreState);// 0x27cec58
	void RPC_Client_SwapMainWeapon();// 0x27cebfc
	void RPC_Client_SetReloadCurWeapon(STExtraWeapon* Weapon);// 0x27ceb48
	void OnWeaponDropStart();// 0x27ceb34
	void OnWeaponDropFinished();// 0x27ceb20
	void OnOwnerPlayerChangeState(enum State);// 0x27ceaa8
	void OnCurEquipedShootWeaponReloadLastBullet(int RemainBulletNumToReload);// 0x27cea30
	void OnCurEquipedShootWeaponChangeState(enum LastState, enum State);// 0x27ce974
	void LocalUnEquipWeapon(STExtraWeapon* Weapon, bool bIsAI, bool bSimulatedProxy);// 0x27ce860
	void LocalEquipWeapon(STExtraWeapon* Weapon, bool bIsAI, bool bLocalFPP, bool bSimulatedProxy, byte Slot);// 0x27ce6b0
	void HandleWeaponStartFire();// 0x27ce69c
	void HandleWeaponOnShoot();// 0x27ce688
	void HandleOnCharAnimLoadingFinished();// 0x27ce674
	void DoAutoReloadVehicleWeapon();// 0x27ce660
	void DoAutoReloadCurrentWeapon();// 0x27ce660
	void DoAutoDropWeapon();// 0x27ce64c

--------------------------------
Class: LastEmoteInfo
	int EmoteId;//[Offset: 0x0, Size: 4]
	int AreaID;//[Offset: 0x4, Size: 4]
	float EmoteTime;//[Offset: 0x8, Size: 4]

--------------------------------
Class: InjuryParticleAttachOffset
	byte MovementMode;//[Offset: 0x0, Size: 1]
	Transform AttachTransform;//[Offset: 0x10, Size: 48]
	byte AttachLocationType;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KOFActivityData
	float ActivityHealth;//[Offset: 0x0, Size: 4]
	float ReActivityHealthTime;//[Offset: 0x4, Size: 4]
	float HitInterval;//[Offset: 0x8, Size: 4]
	float SwimParticleOffset;//[Offset: 0x10, Size: 4]
	AkAudioEvent* ActivityHealthOverAudio;//[Offset: 0x18, Size: 40]
	ParticleSystem* ActivityHealthOverParticle;//[Offset: 0x40, Size: 40]
	ParticleSystem* ActivityHealthHitParticle;//[Offset: 0x68, Size: 40]
	AnimationAsset* ActivityHealthOverAnim;//[Offset: 0x90, Size: 40]
	AnimationAsset* ActivityHealthHitAnim;//[Offset: 0xb8, Size: 40]
	bool NeedHitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]

--------------------------------
Class: CharacterBodyOffset
	Vector HeadOffset;//[Offset: 0x0, Size: 12]
	Vector PitchOffset;//[Offset: 0xc, Size: 12]
	Vector FootOffset;//[Offset: 0x18, Size: 12]
	Vector TPPSpringArmOffset;//[Offset: 0x24, Size: 12]

--------------------------------
Class: PersistClientStateComponent.ActorComponent.Object
	PersistUIMaskInfo UIMaskInfo;//[Offset: 0xdc, Size: 20]
	PersistViewTargetInfo ViewTargetInfo;//[Offset: 0xf0, Size: 16]
	PersistSubAnimInfo SubAnimInfo;//[Offset: 0x100, Size: 40]
	PersistDoActionsInfo DoActionsInfo;//[Offset: 0x128, Size: 36]
	PersistPlaySequenceInfo PlaySequenceInfo;//[Offset: 0x14c, Size: 16]
	PersistVisPosUIInfo VisPosUIInfo;//[Offset: 0x15c, Size: 8]
	PersistAvatarHideInfo AvatarHideInfo;//[Offset: 0x164, Size: 28]
	PersistUIStyleInfo UIStyleInfo;//[Offset: 0x180, Size: 28]
	PersistActivityUIInfo ActivityUIInfo;//[Offset: 0x1a0, Size: 24]
	PersistRTPCValueInfo RTPCValueInfo;//[Offset: 0x1b8, Size: 28]
	PersistLevelSequenceInfo LevelSequenceInfo;//[Offset: 0x1e0, Size: 96]
	LevelSequenceActor* SequencePlayerActor;//[Offset: 0x240, Size: 4]
	delegate OnLevelSequencePlayDelegate;//[Offset: 0x244, Size: 12]
	delegate OnLevelSequenceStopDelegate;//[Offset: 0x250, Size: 12]
	delegate OnServerPlayerSequenceTimer;//[Offset: 0x25c, Size: 12]
	delegate OnLevelSequencePrePlayDelegate;//[Offset: 0x268, Size: 12]
	bool bSetMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	FName[] IgnoreSequenceBlackList;//[Offset: 0x280, Size: 12]
	STExtraBaseCharacter* Owner;//[Offset: 0x28c, Size: 4]
	void StopCurSeuqence();// 0x2560718
	void SetUpVisPosUIInfo(bool bSetUp);// 0x2560698
	void SetUpUIStyleInfo(bool bSetUp, UserWidgetStyle* UserWidgetStyle);// 0x25605d0
	void SetUpUIMaskServer(bool bSetUp, FString Param);// 0x256049c
	void SetUpSubViewTargetServer(bool bSetUp, Actor* TargetActor, float BlendTime);// 0x2560390
	void SetUpSubAnimInstanceServer(bool bSetUp, class AnimInstance SubInstanceClass, FName SlotName, Actor* OwningActor);// 0x256023c
	void SetUpRTPCValue(bool bSetUp, PersistRTPCKeyValue[] RTPCValues);// 0x2560108
	void SetUpLevelSequenceServer(bool bSetUp, Actor* OwningActor);// 0x2560040
	void SetUpLevelSequenceInfo(bool bSetUp, class LevelSequenceActor SequenceActorClass, LevelSequenceBindingInfo[] LevelSequenceBindings, Transform TransfromOrigin, Actor* TransfromOriginActor, bool bRunServer, bool bAutoStop, float ServerFixTime);// 0x255fce0
	void SetUpAvatarHideServer(bool bSetUp, enum[] SlotArray);// 0x255fbac
	void SetUpActivityUIInfo(bool bSetUp, FName ShowUIName, Actor* OwningActor);// 0x255faa0
	void SetUpActivityActionServer(bool bDo, out FName[] ActionName, Actor* OwningActor);// 0x255f968
	void ServerSetSequenceTimer(float ServerFixTime);// 0x255f8f0
	void RefreshCurSeuqencePos();// 0x255f8dc
	void RecoverClientStateNetLoss(UAEPlayerController* PC);// 0x255f864
	void RecoverClientStateApplicationReactivated();// 0x255f850
	void OnServerPlayerSequenceTD();// 0x255f83c
	void OnRepGameStateServerTime(float NewServerTimeSeconds);// 0x255f7c4
	void OnRep_VisPosUIInfo();// 0x255f788
	void OnRep_ViewTargetInfo();// 0x255f74c
	void OnRep_UIStyleInfo();// 0x255f710
	void OnRep_UIMaskInfo();// 0x255f6d4
	void OnRep_SubAnimInfo();// 0x255f6c0
	void OnRep_RTPCValueInfo();// 0x255f684
	void OnRep_PlaySequenceInfo();// 0x255f648
	void OnRep_LevelSequenceInfo();// 0x255f60c
	void OnRep_DoActionsInfo();// 0x255f5d0
	void OnRep_AvatarHideInfo();// 0x255f594
	void OnRep_ActivityUIInfo();// 0x255f558
	void OnMainCharAnimInstanceInit();// 0x255f544
	void HandlePlayerSeuqence();// 0x255f530
	void ClearSequenceRepInfo();// 0x255f51c
	void ClearActivityActionServer();// 0x255f508

--------------------------------
Class: PersistUIMaskInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FString Param;//[Offset: 0x8, Size: 12]

--------------------------------
Class: PersistBase

--------------------------------
Class: PersistViewTargetInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Actor* OwningActor;//[Offset: 0x8, Size: 4]
	float BlendTime;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PersistSubAnimInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	class AnimInstance* SubInstanceClass;//[Offset: 0x8, Size: 4]
	FName SlotName;//[Offset: 0x10, Size: 8]
	Actor* OwningActor;//[Offset: 0x18, Size: 4]

--------------------------------
Class: PersistDoActionsInfo.PersistBase
	FName[] Actions;//[Offset: 0x4, Size: 12]
	Actor* OwningActor;//[Offset: 0x1c, Size: 8]

--------------------------------
Class: PersistPlaySequenceInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	Actor* OwningActor;//[Offset: 0x8, Size: 8]

--------------------------------
Class: PersistVisPosUIInfo.PersistBase
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: PersistAvatarHideInfo.PersistBase
	enum[] AvatarID;//[Offset: 0x4, Size: 12]

--------------------------------
Class: PersistUIStyleInfo.PersistBase
	UserWidgetStyle*[] UserWidgetStyle;//[Offset: 0x4, Size: 12]

--------------------------------
Class: PersistActivityUIInfo.PersistBase
	FName ActivityUIName;//[Offset: 0x8, Size: 8]
	Actor* OwningActor;//[Offset: 0x10, Size: 4]
	bool bSetUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: PersistRTPCValueInfo.PersistBase
	PersistRTPCKeyValue[] RTPCKeyValue;//[Offset: 0x4, Size: 12]

--------------------------------
Class: PersistRTPCKeyValue
	FName RTPCKey;//[Offset: 0x0, Size: 8]
	float RTPCValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: PersistLevelSequenceInfo.PersistBase
	LevelSequenceBindingInfo[] LevelSequenceBindings;//[Offset: 0x4, Size: 12]
	class LevelSequenceActor* SequenceActorClass;//[Offset: 0x10, Size: 4]
	Transform TransfromOrigin;//[Offset: 0x20, Size: 48]
	Actor* TransfromOriginActor;//[Offset: 0x50, Size: 4]
	float StartPlayTimeSeconds;//[Offset: 0x54, Size: 4]

--------------------------------
Class: LevelSequenceBindingInfo
	MovieSceneObjectBindingID Binding;//[Offset: 0x0, Size: 24]
	Actor* Actor;//[Offset: 0x18, Size: 4]
	bool bBindingCharacterDisableMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: PlayMontageData
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 4]
	float InPlayRate;//[Offset: 0x4, Size: 4]
	float InStartPosition;//[Offset: 0x8, Size: 4]
	FName StartSectionName;//[Offset: 0x10, Size: 8]
	byte PlayType;//[Offset: 0x18, Size: 1]
	bool IsPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool PlayDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]

--------------------------------
Class: Float_NetQuantize8.FloatNet

--------------------------------
Class: FloatNet

--------------------------------
Class: SubAnimInstanceMap.DataAsset.Object
	<enum,AnimMapData> AnimMap;//[Offset: 0x20, Size: 60]
	LoadAnimData[] AnimLoadList;//[Offset: 0x5c, Size: 12]
	int SyncLoadIndex;//[Offset: 0x80, Size: 4]
	void UpdateFinishPending_GameThread();// 0x271b634
	void ResetSubAnimNodeBySubAnimType(enum SubAnimTypeName, AnimInstance* TargetAnim);// 0x271b578
	void ResetSubAnimNodeBySlot(FName SubAnimSlotName, AnimInstance* TargetAnim);// 0x271b4bc
	void ReplaceSubAnimNodeBySubAnimType(enum SubAnimTypeName, AnimInstance* TagetAnim);// 0x271b400
	void ReplaceSubAnimNodeByAnimData(out const AnimMapData AnimData, AnimInstance* TagetAnim);// 0x271b2f0
	void RemoveLoadIndexLoadAnimData(out const LoadAnimData LoadAnimData);// 0x271b200
	void ProcessLoadAnimData(out const LoadAnimData LoadAnimData);// 0x271b110
	void ProcessAsyncLoadFinishIndex(int SyncIndex);// 0x271b090
	void OnLoadAnimComponent(int SyncIndex);// 0x271b018
	LoadAnimData GetLoadIndexLoadAnimData(int SyncIndex, out bool bFound);// 0x271aef0
	void EnqueueLoadIndexLoadAnimData(out const LoadAnimData LoadAnimData);// 0x271ae00
	bool DequeueLoadIndexLoadAnimData(int SyncIndex, out LoadAnimData LoadAnimData);// 0x271acc0

--------------------------------
Class: LoadAnimData
	int LoadIndex;//[Offset: 0x0, Size: 4]
	AnimMapData AnimMapData;//[Offset: 0x8, Size: 48]
	AnimInstance* TargetAnim;//[Offset: 0x38, Size: 8]
	class Object* LoadedAnimInstanceClass;//[Offset: 0x40, Size: 4]

--------------------------------
Class: STExtraPlayerVaultComponent.ActorComponent.Object
	byte DrawDebugType;//[Offset: 0xfc, Size: 1]
	float DrawTime;//[Offset: 0x100, Size: 4]
	bool bPreLoadAllAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	VaultAnimDataAsset* VaultAnimDataAssetPtr;//[Offset: 0x108, Size: 4]
	float SweepCapsuleRadius;//[Offset: 0x10c, Size: 4]
	byte[] SweepObjectTypes;//[Offset: 0x110, Size: 12]
	VaultCheckRule[] CheckRuleList;//[Offset: 0x11c, Size: 12]
	float CheckDeviation;//[Offset: 0x128, Size: 4]
	float TPPCheckDist;//[Offset: 0x12c, Size: 4]
	float FPPCheckDist;//[Offset: 0x130, Size: 4]
	float InValidAngle;//[Offset: 0x134, Size: 4]
	float CheckHeightHalfDist;//[Offset: 0x138, Size: 4]
	float MinCheckHeight;//[Offset: 0x13c, Size: 4]
	float FPPMinCheckHeight;//[Offset: 0x140, Size: 4]
	float MaxCheckHeight;//[Offset: 0x144, Size: 4]
	float FPPMaxCheckHeight;//[Offset: 0x148, Size: 4]
	float LowWindowMinCheckHeight;//[Offset: 0x14c, Size: 4]
	float MinVaultHeightDiff;//[Offset: 0x150, Size: 4]
	float VaultCheckDist;//[Offset: 0x154, Size: 4]
	float FPPVaultThickThreshold;//[Offset: 0x158, Size: 4]
	<FString,CommonVaultData> VaultDataMap;//[Offset: 0x15c, Size: 60]
	FPPVaultData[] FPPVaultDataArray;//[Offset: 0x198, Size: 12]
	float VaultAnimPlayRatio;//[Offset: 0x1a4, Size: 4]
	float StopVaultRelativeWallDist;//[Offset: 0x1a8, Size: 4]
	float FPPVaultShakeOffDeltaHeight;//[Offset: 0x1ac, Size: 4]
	float FallingVaultMinHeightToFloor;//[Offset: 0x1b0, Size: 4]
	Vector ClimbDistance;//[Offset: 0x1b4, Size: 12]
	float InclinationCheckHeight;//[Offset: 0x1c0, Size: 4]
	float MaxLandingAreaTiltAngle;//[Offset: 0x1c4, Size: 4]
	Vector CheckThePathIsPurePlaneBoxHalfExtent;//[Offset: 0x1c8, Size: 12]
	float MinJumpLandingHeightDiff;//[Offset: 0x1d4, Size: 4]
	float CheatingDist;//[Offset: 0x1d8, Size: 4]
	bool bEnableLeaveStuckState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc, Size: 1]
	float LeaveStuckAllowedPercentage;//[Offset: 0x1e0, Size: 4]
	<FString,AIVaultData> AIVaultDataMap;//[Offset: 0x1e8, Size: 60]
	byte ExtraSweepObjectType;//[Offset: 0x224, Size: 1]
	CommonVaultData CurVaultData;//[Offset: 0x2c8, Size: 84]
	FPPVaultData CurFPPVaultData;//[Offset: 0x374, Size: 32]
	Actor* CheckActor;//[Offset: 0x398, Size: 4]
	PrimitiveComponent* CheckComponent;//[Offset: 0x39c, Size: 4]
	AnimMontage* CurVaultMontage;//[Offset: 0x3a0, Size: 4]
	UAEWindowComponent*[] VaultWindows;//[Offset: 0x3a4, Size: 12]
	bool Vault(bool bNeedCheck);// 0x26de558
	void PawnVaultNetMulticast(float _ForwardBlockDist, float _BlockHeight, float _VaultDist, byte VaultDataMapKeyIndex, Vector _PawnVaultStartLoc, Vector _PawnVaultEndLoc, Rotator _PawnVaultRot, Actor* _CheckActor, float _CurJumpLandingHeight, float _CurJumpLandingDist, Vector _ForwardHitPoint, Vector _ForwardBlockDir, bool bCheckDynamicBlock);// 0x26de0d0
	void OnStateLeave(enum State);// 0x26de058
	void OnStateInterrupted(int State, int InterruptedBy);// 0x26ddf9c
	byte GetVaultKeyIndexForAI(float _BlockHeight, float _VaultThick, bool _bIsJumping);// 0x26dde8c
	void ForceCancelVaultOnServer();// 0x26dde78
	bool CheckCanVault(bool bCheckPlayerState, bool bUseCustomLocAndRot, Vector CustomLoc, Rotator CustomRot);// 0x26ddcfc
	void CancelVaultOnServer(bool bForce);// 0x26ddc7c
	void BP_OnRecycled();// 0x46f6b154

--------------------------------
Class: VaultCheckRule
	float CheckHeight;//[Offset: 0x0, Size: 4]
	float StandCheckDist;//[Offset: 0x4, Size: 4]
	float MoveCheckDist;//[Offset: 0x8, Size: 4]
	float SprintCheckDist;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CommonVaultData
	FString MontageName;//[Offset: 0x0, Size: 12]
	CurveFloat* UpwardCurve;//[Offset: 0xc, Size: 4]
	CurveFloat* FowardCurve;//[Offset: 0x10, Size: 4]
	float ForwardBlockDist;//[Offset: 0x14, Size: 4]
	float BlockHeight;//[Offset: 0x18, Size: 4]
	float VaultThickThreshold;//[Offset: 0x1c, Size: 4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bForceStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bForceZPostionStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	float VaultTime;//[Offset: 0x24, Size: 4]
	float PlaySpeedRatio;//[Offset: 0x28, Size: 4]
	float SpeedChangeTime;//[Offset: 0x2c, Size: 4]
	float ChangeSpeedRatio;//[Offset: 0x30, Size: 4]
	bool bAllowStandState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bAllowMoveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool bAllowSprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool bPutUpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	float BreakWindowDelayTime;//[Offset: 0x38, Size: 4]
	bool bIsCancelable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float MinCancelTime;//[Offset: 0x40, Size: 4]
	float MaxCancelTime;//[Offset: 0x44, Size: 4]
	bool bIsFallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	float FallingVaultMinHeight;//[Offset: 0x4c, Size: 4]
	float FallCrossMinHeight;//[Offset: 0x50, Size: 4]

--------------------------------
Class: FPPVaultData
	float VaultHeight;//[Offset: 0x0, Size: 4]
	FString MontageName;//[Offset: 0x4, Size: 12]
	float VaultTime;//[Offset: 0x10, Size: 4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float VaultSpeed;//[Offset: 0x18, Size: 4]
	float VaultSpeedRate;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: AIVaultData
	float BlockHeight;//[Offset: 0x0, Size: 4]
	float VaultThickThreshold;//[Offset: 0x4, Size: 4]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIsFallingVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: CustomFeatureComponent.Object
	Actor* OwnerActor;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: STPoisonWaterDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: UGCRadialDamageEvent.STRadialDamageEvent.STCustomRadialDamageEvent.RadialDamageEvent.DamageEvent
	int damageTypeID;//[Offset: 0x44, Size: 4]

--------------------------------
Class: UGCPointDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent
	int damageTypeID;//[Offset: 0xa4, Size: 4]

--------------------------------
Class: LowTemperatureDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: LastBreathWithoutRescueDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ElectricDamageEvent.STPointDamageEvent.PointDamageEvent.DamageEvent

--------------------------------
Class: ReplayWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	int LoadingCountLimit;//[Offset: 0x37c, Size: 4]
	STExtraPlayerController* pReplayExtraPC;//[Offset: 0x380, Size: 4]
	FString ReplayTargetPlayerName;//[Offset: 0x3b4, Size: 12]
	FString ReplayTargetUIDStr;//[Offset: 0x3c0, Size: 12]
	int ReplayTargetTeamID;//[Offset: 0x3cc, Size: 4]
	LiveUIRecordSetting[] UIRecordSetting;//[Offset: 0x3d0, Size: 12]
	int[] GameModeIDIgnoreCheckPlayerList;//[Offset: 0x3dc, Size: 12]
	void UpdateWeaponUI();// 0x24b11f0
	void UpdateBulletUI();// 0x24b11ac
	void SetupUIRoot_BP();// 0x240b87c
	void SetIsResettingViewTarget(bool isResetting);// 0x25a9688
	void RefreshUIInfoOnAttachCameraViewFinished();// 0x46f6b154
	void OnWidgetRelease();// 0x240b860
	void OnWidgetReInit();// 0x2546ad8
	void OnWidgetInitialize();// 0x2546a3c
	void OnViewCharacterDetachedFromVehicle(STExtraVehicleBase* Vehicle);// 0x237d834
	void OnViewCharacterAttachedToVehicle(STExtraVehicleBase* Vehicle);// 0x25a9608
	void OnSimulatedWeaponChanged();// 0x25a95ec
	void OnResetViewTarget_BP(OnReplaySetViewTarget inSettingInfo);// 0x25a955c
	void OnReplayFinishPlay();// 0x2451bc0
	void OnInitChildWidget();// 0x46f6b154
	void OnBulletNumChanged();// 0x25a9540
	bool GetIsResettingViewTarget();// 0x25a9518
	void ForceRefreshUI();// 0x2459524
	void ClearUIOnGotoTime();// 0x25329ec

--------------------------------
Class: LiveUIRecordSetting
	int UniqueUIIndex;//[Offset: 0x0, Size: 4]
	FString WidgetName;//[Offset: 0x4, Size: 12]
	FString OuterName;//[Offset: 0x10, Size: 12]

--------------------------------
Class: OnReplaySetViewTarget
	int LastTeamID;//[Offset: 0x0, Size: 4]
	bool IsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	STExtraPlayerState* NewPlayerState;//[Offset: 0x8, Size: 4]

--------------------------------
Class: ReplayProgressbarWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bPressedReplayFastForwardButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	bool bPressedReplayRewindButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	bool MouseIsHoveredOnProgressEventItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x372, Size: 1]
	ReplayKillOrHitdownInfoUIModel[] KillOrHitdownInfoUIModels;//[Offset: 0x374, Size: 12]
	ReplayKillOrHitdownInfoUIModel[] NextChunkKillOrHitdownInfoUIModels;//[Offset: 0x380, Size: 12]
	void UpdateKillorHitDownUIData();// 0x46f6b154
	void ShowReplayProgressUI();// 0x46f6b154
	void ShowReplayEventListUI();// 0x46f6b154
	void ShowReConnetionLoadingUI();// 0x46f6b154
	void RefreshUIInfoOnAttachCameraViewFinished();// 0x46f6b154
	void RefreshKillorHitDownUIData(bool hasData, bool IsHadData);// 0x46f6b154
	void OnWidgetInitialize();// 0x46f6b154
	void OnResetViewTarget_BP();// 0x46f6b154
	void OnReplayFinishPlay();// 0x46f6b154
	void OnReleasedReplayRewindButton();// 0x46f6b154
	void OnReleasedReplayPauseButton();// 0x46f6b154
	void OnReleasedReplayFastForwardButton();// 0x46f6b154
	void OnPressedReplayRewindButton();// 0x46f6b154
	void OnPressedReplayFastForwardButton();// 0x46f6b154
	void OnPressedEnterButtonEvent();// 0x46f6b154
	void OnLeaveFreeView();// 0x46f6b154
	void OnEnterFreeView();// 0x46f6b154
	void OnChangeInDilation(float InDilation);// 0x46f6b154
	void HideReConnetionLoadingUI();// 0x46f6b154

--------------------------------
Class: ReplayKillOrHitdownInfoUIModel
	FString Attacker;//[Offset: 0x0, Size: 12]
	FString Victim;//[Offset: 0xc, Size: 12]
	FString AttackerUID;//[Offset: 0x18, Size: 12]
	FString VictimUID;//[Offset: 0x24, Size: 12]
	bool IsKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int KillTime;//[Offset: 0x34, Size: 4]
	bool KilledByPoison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: Replay_SkeletalData_Manager.Object
	DemoNetDriver* ReplyDemoNd;//[Offset: 0x20, Size: 4]
	Transform[] EveryTicksBonesTransform;//[Offset: 0x24, Size: 12]
	FName[] BonesName;//[Offset: 0x30, Size: 12]
	float[] EveryTicktime;//[Offset: 0x3c, Size: 12]
	Character* CurCharacter;//[Offset: 0x48, Size: 4]
	bool[] EveryTicksErrorBonesIndex;//[Offset: 0x4c, Size: 12]
	FString[] ErrorLog;//[Offset: 0x58, Size: 12]
	FString[] FPSLog;//[Offset: 0x64, Size: 12]
	FString[] OthersLog;//[Offset: 0x70, Size: 12]
	FString[] OutFileNames;//[Offset: 0x7c, Size: 12]
	Transform[] ReadInBonesTransform;//[Offset: 0x88, Size: 12]
	ActorComponent*[] Meshes;//[Offset: 0x94, Size: 12]
	MaterialInterface*[] PreMaterials;//[Offset: 0xa0, Size: 12]
	STExtraGameInstance* CurGameInstance;//[Offset: 0xe4, Size: 4]
	UserWidget* ReplaySkeletonGMUI;//[Offset: 0xe8, Size: 4]
	class UserWidget* ReplaySkeletonGMUIClass;//[Offset: 0xf0, Size: 40]
	FString AddtionalName;//[Offset: 0x118, Size: 12]
	bool bPauseWhenCompareError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool bUseErrorMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	float Threshold;//[Offset: 0x128, Size: 4]
	Material* ErrorMaterial;//[Offset: 0x12c, Size: 4]
	float FixedFPS;//[Offset: 0x130, Size: 4]
	bool bIsDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	void ShowGMUI(bool isShow);// 0x25a5bb0
	void PauseOrPlay();// 0x25a5b9c
	void DoBatchTexture(Texture* tex);// 0x46f6b154
	void BP_StartWriteOrCompareData(bool compare);// 0x25a5b1c
	void BP_ShowCompare();// 0x25a5b08
	void BP_SetReplayFile(FString FullPath);// 0x25a5a24
	void BP_SetDataFile(FString FullPath);// 0x25a5940
	FString BP_OpenReplayFile();// 0x25a58ac
	bool BP_GetIsWrite();// 0x25a5884
	bool BP_GetCanShowCompare();// 0x25a585c
	bool AutoTestWriteStart(FString replay_fullpath);// 0x25a5770
	bool AutoTestCompareStart(FString replay_fullpath, FString data_fullpath);// 0x25a55d4

--------------------------------
Class: ReplayCameraDataManager.Object

--------------------------------
Class: AssetRefStrategicManager.Object
	delegate OnPreloadContentForURLDelegate;//[Offset: 0x20, Size: 12]
	delegate OnCheckCacheObjectDelegate;//[Offset: 0x2c, Size: 12]
	delegate OnAvatarAsyncLoadFinishedDelegate;//[Offset: 0x38, Size: 12]
	class AssetRefStrategicBase[] InitStrategicClass;//[Offset: 0x44, Size: 12]
	FString LobbyMapName;//[Offset: 0x50, Size: 12]
	AssetRefStrategicBase*[] Strategics;//[Offset: 0x5c, Size: 12]
	AssetRefStrategicBase*[] TickableStrategics;//[Offset: 0x68, Size: 12]

--------------------------------
Class: AssetRefStrategicBase.Object
	AssetRefStrategicManager* OwnerManager;//[Offset: 0x1c, Size: 4]
	<Object*> RefSet;//[Offset: 0x20, Size: 60]
	<Object*> NoGCRefSet;//[Offset: 0x5c, Size: 60]

--------------------------------
Class: CompletePlayback.FilebasedPlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0x3b0, Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0x3d8, Size: 4]
	bool IsUsingMapPlayerItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	FString[] ExcludedGameModes;//[Offset: 0x3e0, Size: 12]
	bool bEnableUIDisplaySystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	ReplayUIDisplayManager* pUIDisplayManager;//[Offset: 0x414, Size: 4]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	uint32[] TeammateKeyArray;//[Offset: 0x438, Size: 12]
	UAEDataTable* ConfigTable;//[Offset: 0x48c, Size: 4]
	void NotifyCharacterShoot(STExtraWeapon* Weapon);// 0x242368c
	void GetReplayPathFromBrowser(out FString OutReplayFullName);// 0x24235ec
	static CompletePlayback* GetInstance(Object* WorldContextObj);// 0x2423574

--------------------------------
Class: FilebasedPlayback.GameReplay.Object
	int MaxHoursForKeepingFiles;//[Offset: 0x274, Size: 4]
	void UploadReplayFile(FString FileFullPath, int Sponsor, FString BattleID);// 0x248bff8
	bool StopRecordingReplay();// 0x248bfc8
	bool StopPlay();// 0x248bf98
	bool StartRecordingReplay(bool bSkipConditionCheck, enum RecordCondition);// 0x248bec0
	FString ReplayNameToFullPath(FString InReplayName);// 0x248bdd0
	bool PreloadReplayMap(FString MapId, int DelayFrame);// 0x248bcec
	bool PlayReplayWithPreloadedMap(FString MapId, FString DemoName, int DelayFrame);// 0x248bbac
	bool PlayReplay();// 0x248bb7c
	bool PlayLiveDemoWithGameId(FString DemoName);// 0x248badc
	bool PlayDemoWithFilename(FString DemoName);// 0x248ba3c
	ReplayFileHeader GetReplayFileHeaderInfoByReplayName(FString InReplayName);// 0x248b868
	ReplayFileHeader GetReplayFileHeaderInfo(FString InSourceFile);// 0x248b694
	FString GetRemoteStorageDir();// 0x248b600
	FString GetFileCacheDir();// 0x248b564
	bool EnumerateReplayFiles(out ReplayFileItem[] OutFileInfos);// 0x248b460
	void DownloadReplayFile(FString InUrl, out const delegate Delegate);// 0x248b348
	bool DeleteReplayFile(FString FileFullPath);// 0x248b2b0

--------------------------------
Class: ReplayFileHeader
	int ReplayFileFormatRevision;//[Offset: 0x0, Size: 4]
	FString ReplayName;//[Offset: 0x4, Size: 12]
	FString ReplayVersion;//[Offset: 0x10, Size: 12]
	int64 DateTime;//[Offset: 0x20, Size: 8]
	float TotalTime;//[Offset: 0x28, Size: 4]
	FString RoomName;//[Offset: 0x2c, Size: 12]
	int GameModeID;//[Offset: 0x38, Size: 4]
	int SubModeId;//[Offset: 0x3c, Size: 4]
	int MapId;//[Offset: 0x40, Size: 4]
	int PlayerNum;//[Offset: 0x44, Size: 4]
	int CustomGameModeId;//[Offset: 0x48, Size: 4]
	float FullDataStartTime;//[Offset: 0x4c, Size: 4]

--------------------------------
Class: ReplayFileItem
	ReplayFileHeader HeaderInfo;//[Offset: 0x0, Size: 80]
	FString FullPath;//[Offset: 0x50, Size: 12]
	int64 FileSize;//[Offset: 0x60, Size: 8]

--------------------------------
Class: ReplayUIDisplayManager.Object
	<int,Button*> CachedButtonMap;//[Offset: 0x2c, Size: 60]

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0xfc, Size: 4]
	ButtonStyle WidgetStyle;//[Offset: 0x100, Size: 504]
	LinearColor ColorAndOpacity;//[Offset: 0x2f8, Size: 16]
	LinearColor BackgroundColor;//[Offset: 0x308, Size: 16]
	byte ClickMethod;//[Offset: 0x318, Size: 1]
	byte TouchMethod;//[Offset: 0x319, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31a, Size: 1]
	bool IsPassMouseEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31b, Size: 1]
	delegate OnClicked;//[Offset: 0x31c, Size: 12]
	delegate OnPressed;//[Offset: 0x328, Size: 12]
	delegate OnReleased;//[Offset: 0x334, Size: 12]
	delegate OnHovered;//[Offset: 0x340, Size: 12]
	delegate OnUnhovered;//[Offset: 0x34c, Size: 12]
	delegate OnPressedParam;//[Offset: 0x358, Size: 12]
	delegate OnReplayRecordNotify;//[Offset: 0x364, Size: 12]
	delegate OnMouseButtonDownEvent;//[Offset: 0x370, Size: 16]
	delegate OnMouseButtonUpEvent;//[Offset: 0x380, Size: 16]
	delegate OnMouseMoveEvent;//[Offset: 0x390, Size: 16]
	bool IsThisFrameClicked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x3e1d830
	void SetStyle(out const ButtonStyle InStyle);// 0x3e1d79c
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3e1d720
	void SetClickMethod(byte InClickMethod);// 0x3e1d6a8
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x3e1d62c
	void Release();// 0x3e1d618
	bool IsPressed();// 0x3e1d5f0
	byte GetReleasedReason();// 0x3e1d5d4

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x3e2102c
	PanelSlot* GetContentSlot();// 0x3e21004
	Widget* GetContent();// 0x3e20fdc

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 104]
	SlateBrush Hovered;//[Offset: 0x70, Size: 104]
	SlateBrush Pressed;//[Offset: 0xd8, Size: 104]
	SlateBrush Disabled;//[Offset: 0x140, Size: 104]
	Margin NormalPadding;//[Offset: 0x1a8, Size: 16]
	Margin PressedPadding;//[Offset: 0x1b8, Size: 16]
	SlateSound PressedSlateSound;//[Offset: 0x1c8, Size: 24]
	SlateSound HoveredSlateSound;//[Offset: 0x1e0, Size: 24]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WonderfulPlayback.GameReplay.Object
	bool bWonderfulPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	int curPlayerTemaID;//[Offset: 0x238, Size: 4]
	bool IsOpenWonderfulReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c, Size: 1]
	<FString,WonderfulReplayHeadInfo> headinfolist;//[Offset: 0x240, Size: 60]
	delegate OnWonderfulReplayUIRelease;//[Offset: 0x27c, Size: 12]
	delegate OnWonderfulReplayFastforwardFinished;//[Offset: 0x288, Size: 12]
	delegate WonderfulReplayGameStateReadyHandler;//[Offset: 0x294, Size: 12]
	void SetPlayListPerReplay(FString MVPPlayerUID);// 0x27dacbc

--------------------------------
Class: WonderfulReplayHeadInfo
	FString PicUrl;//[Offset: 0x0, Size: 12]
	FString UID;//[Offset: 0xc, Size: 12]
	int curAvatarBoxid;//[Offset: 0x18, Size: 4]
	int VsTeamLevel;//[Offset: 0x1c, Size: 4]
	int[] BadgeID;//[Offset: 0x20, Size: 12]
	int Sex;//[Offset: 0x2c, Size: 4]
	int PlayerLevel;//[Offset: 0x30, Size: 4]
	FString Name;//[Offset: 0x34, Size: 12]

--------------------------------
Class: ObPlayback.FilebasedPlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0x320, Size: 40]
	FString TmpViewTargetName;//[Offset: 0x348, Size: 12]
	SyncOBDataActor* SyncOBDataActor;//[Offset: 0x384, Size: 4]
	FString ReplayFileServerUrl;//[Offset: 0x388, Size: 12]
	float ChunkUploadDelayInSeconds;//[Offset: 0x394, Size: 4]
	float ChunkDownloadDelayInSeconds;//[Offset: 0x398, Size: 4]
	float ChunkAdvancePlayInSeconds;//[Offset: 0x39c, Size: 4]
	int StartNotifyStartLiveChunkNum;//[Offset: 0x3a0, Size: 4]
	float ChunkUploadRetryDelayInSeconds;//[Offset: 0x3a4, Size: 4]
	int ChunkUploadRetryTimes;//[Offset: 0x3a8, Size: 4]
	float ChunkDownloadRetryDelayInSeconds;//[Offset: 0x3ac, Size: 4]
	int ChunkDownloadRetryTimes;//[Offset: 0x3b0, Size: 4]
	int MaxLiveUploadSpeed;//[Offset: 0x3b4, Size: 4]

--------------------------------
Class: LivePlayback.CompletePlayback.FilebasedPlayback.GameReplay.Object
	void SetSpectatorName(FString SpectatorName, bool bgm, bool isChangeViewTarget, bool isAutoSetName);// 0x24ae984
	bool PlayReplay();// 0x248bb7c
	void OnLiveNumChanged();// 0x2506038
	void OnKillNumChanged(out const byte KillNum);// 0x2505fb0
	void OnGameOver(FName GameStatus);// 0x2505f38
	void OnFinishOptimizeGotoTime();// 0x2505f24
	void OnEnterFinalState(const int CircleReverseIndex);// 0x236ffe8
	static LivePlayback* GetInstance(Object* WorldContextObj);// 0x2505eac
	bool CheckHasRealPlayerExits();// 0x2505e84

--------------------------------
Class: AntiCheatConfig.Object

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItem[] FeatureConfigItemList;//[Offset: 0x1c, Size: 12]
	FeatureSetItem[] FeatureSetItemList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: FeatureConfigItem
	FString TargetClassName;//[Offset: 0x0, Size: 12]
	int bUseFeatureSet;//[Offset: 0xc, Size: 4]
	FString[] ExcludeComponentsList_DS;//[Offset: 0x10, Size: 12]
	FString[] ExcludeComponentsList_Autonomous;//[Offset: 0x1c, Size: 12]
	FString[] ExcludeComponentsList_Team;//[Offset: 0x28, Size: 12]
	FString[] ExcludeComponentsList_NonTeam;//[Offset: 0x34, Size: 12]

--------------------------------
Class: FeatureSetItem

--------------------------------
Class: AvatarVisibilityCollection.BlueprintFunctionLibrary.Object
	bool bUseAvatarVisibilityFeature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bSelfAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bOBAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bGMAlwaysVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	SlotVisiblityConfigItem[] NormalBattleSlotVisibilityConfigItemList;//[Offset: 0x20, Size: 12]
	SlotVisiblityConfigItem[] RoomModeSlotVisibilityConfigItemList;//[Offset: 0x2c, Size: 12]
	SlotVisiblityConfigItem CurGameModeSlotVisibilityConfig;//[Offset: 0x38, Size: 40]
	STExtraBaseCharacter*[] DelayedRefreshCharList;//[Offset: 0x6c, Size: 12]
	static void ResetCurBattleConfig(const Object* WorldContextObj);// 0x238fc70
	static bool MarkDelayedRefreshForChar(const STExtraBaseCharacter* InCheckChar);// 0x238fbf8
	static bool IsWeaponSlotVisibleForChar(const STExtraBaseCharacter* InCheckChar, const int InSlotType, const bool InIsSkin);// 0x238faf0
	static bool IsWeaponSlotVisible(const Object* WorldContextObj, const int InSlotType, const bool InIsSelf, const bool InIsTeammate, const bool InIsInVehicle, const bool InIsSkin);// 0x238f8f4
	static bool IsWeaponAttachmentSlotVisibleForChar(const STExtraBaseCharacter* InCheckChar, const int InSlotType, const bool InIsSkin);// 0x238f7ec
	static bool IsWeaponAttachmentSlotVisible(const Object* WorldContextObj, const int InSlotType, const bool InIsSelf, const bool InIsTeammate, const bool InIsInVehicle, const bool InIsSkin);// 0x238f5f0
	static bool IsSelfViewForChar(const STExtraBaseCharacter* InCheckChar);// 0x238f578
	static bool IsOBViewAlwaysVisibile(const Object* WorldContextObj);// 0x238f500
	static bool IsGMViewAlwaysVisibile(const Object* WorldContextObj);// 0x238f488
	static bool IsFeatureEnable(const Object* WorldContextObj);// 0x238f410
	static bool IsAvatarSlotVisibleForChar(const STExtraBaseCharacter* InCheckChar, const int InSlotType, const bool InIsSkin);// 0x238f308
	static bool IsAvatarSlotVisible(const Object* WorldContextObj, const int InSlotType, const bool InIsSelf, const bool InIsTeammate, const bool InIsInVehicle, const bool InIsSkin);// 0x238f10c

--------------------------------
Class: SlotVisiblityConfigItem
	int GameModeID;//[Offset: 0x0, Size: 4]
	AvatarVisibilityConfig AvatarVisibilityConfig;//[Offset: 0x4, Size: 12]
	WeaponVisibilityConfig WeaponVisibilityConfig;//[Offset: 0x10, Size: 24]

--------------------------------
Class: AvatarVisibilityConfig
	AvatarSlotVisibilityConfigItem[] AvatarSlotVisibilityConfigList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AvatarSlotVisibilityConfigItem.SlotVisiblityItem
	enum ConfigSlot;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SlotVisiblityItem
	SlotItemVisibilityCondition NormalVisibilityConfig;//[Offset: 0x4, Size: 4]
	SlotItemVisibilityCondition SkinVisibilityConfig;//[Offset: 0x8, Size: 4]
	SlotItemVisibilityCondition VehicleVisibilityConfig;//[Offset: 0xc, Size: 4]

--------------------------------
Class: SlotItemVisibilityCondition
	int VisibilityConfig;//[Offset: 0x0, Size: 4]

--------------------------------
Class: WeaponVisibilityConfig
	WeaponSlotVisiblityConfigItem[] WeaponSlotVisibilityConfigList;//[Offset: 0x0, Size: 12]
	WeaponAttachmentSlotVisibilityConfigItem[] WeaponAttachmentSlotVisibilityConfigList;//[Offset: 0xc, Size: 12]

--------------------------------
Class: WeaponSlotVisiblityConfigItem.SlotVisiblityItem
	byte ConfigSlot;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WeaponAttachmentSlotVisibilityConfigItem.SlotVisiblityItem
	enum ConfigSlot;//[Offset: 0x10, Size: 1]

--------------------------------
Class: FrequncyAccessActorList
	Actor*[] ActorList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ObjectPoolConfig
	FName ObjectClassName;//[Offset: 0x0, Size: 8]
	FString ObjectClassFullPath;//[Offset: 0x8, Size: 12]
	int MaxObjectNum;//[Offset: 0x14, Size: 4]
	int MinObjectNum;//[Offset: 0x18, Size: 4]
	int CleanupTimeout;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: FadeDynamicStyleInfo

--------------------------------
Class: CirleAreaVolume.Actor.Object
	FName[] AvoidAreaTag;//[Offset: 0x2e4, Size: 12]
	int TryCount;//[Offset: 0x2f0, Size: 4]
	BoxComponent* CircleBoxArea;//[Offset: 0x2f4, Size: 4]

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x318, Size: 12]
	FString HousePathFilePath;//[Offset: 0x324, Size: 12]
	FString AIGunLocsFilePath;//[Offset: 0x330, Size: 12]
	FString LogicAreaFilePath;//[Offset: 0x33c, Size: 12]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	bool bDebugLogAIOcclusionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349, Size: 1]
	bool bDebugLoadAIOcclusionFileNoSM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a, Size: 1]
	enum AIWayPointShowTeam;//[Offset: 0x34b, Size: 1]
	enum AIWayPointShowType;//[Offset: 0x34c, Size: 1]
	bool bDrawNavModifierProxy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 1]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34e, Size: 1]
	void RemoveYearBeastMagicCircle(Actor* MagicCircleActor);// 0x23682a0
	void RemoveDamageableActor(DamageableActor* DamageableActor);// 0x2368228
	void RemoveAITeleportForbiddenArea(out const BoxSphereBounds Area);// 0x236818c
	bool IsInAITeleportForbiddenAreaXY(out const Vector TestLoc);// 0x23680f4
	void BreakWall(Vector LogicAreaLoc, bool bDefaultWalkable);// 0x2368020
	void BreakHouse(Vector LogicAreaLoc);// 0x2367fa0
	void AddYearBeastMagicCircle(Actor* MagicCircleActor);// 0x2367f28
	void AddDamageableActor(DamageableActor* DamageableActor);// 0x2367eb0
	void AddAITeleportForbiddenArea(out const BoxSphereBounds Area);// 0x2367e14

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x30c, Size: 4]
	bool bWorldSizeRountToInt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]

--------------------------------
Class: UAENavLinkDataManager.Actor.Object
	FString NavLinkDataPath;//[Offset: 0x2e4, Size: 12]

--------------------------------
Class: AvatarCapture_BP_C.AvatarCapture.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4f8, Size: 4]
	void UserConstructionScript();// 0x46f6b154
	void ReceiveTick(float DeltaSeconds);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void InitBGMat();// 0x46f6b154
	void ExecuteUbergraph_AvatarCapture_BP(int EntryPoint, float K2Node_Event_DeltaSeconds, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue, Material* K2Node_DynamicCast_AsMaterial, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	BP_DisplayPawnProxyComp_C* BP_DisplayPawnProxyComp;//[Offset: 0x4fc, Size: 4]
	CharacterAvatarComp_BP_C* CharacterAvatarComp_BP;//[Offset: 0x500, Size: 4]
	StaticMeshComponent* BackGround;//[Offset: 0x504, Size: 4]
	SkeletalMeshComponent* EditorMesh;//[Offset: 0x508, Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x50c, Size: 4]
	CameraComponent* Camera;//[Offset: 0x510, Size: 4]
	PointLightComponent* PointLight;//[Offset: 0x514, Size: 4]
	SceneCaptureComponent2D* SceneCaptureComponent2D;//[Offset: 0x518, Size: 4]
	Material* BGMatRef;//[Offset: 0x520, Size: 40]
	bool IsInitMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]

--------------------------------
Class: BP_DisplayPawnProxyComp_C.BattleDisplayPawnProxyComponent.ActorComponent.Object

--------------------------------
Class: BattleDisplayPawnProxyComponent.ActorComponent.Object
	enum[] ExcludeAvatarSlotList;//[Offset: 0xd0, Size: 12]
	CharacterAvatarComponent* CachedDisplayAvatarComponent;//[Offset: 0xdc, Size: 8]
	CharacterAvatarComponent* CachedSampleAvatarComponent;//[Offset: 0xe4, Size: 8]
	SceneComponent* MeshContainer;//[Offset: 0xec, Size: 4]
	MeshSynData[] CurDisplayData;//[Offset: 0xf0, Size: 12]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xfc, Size: 8]
	SkeletalMeshComponent* CachedMasterPoseComponent;//[Offset: 0x104, Size: 8]
	PlayerOBInfo TrainingRangePlayerOBInfo;//[Offset: 0x110, Size: 288]
	void SetAnimInstance(class Object InAnimInst);// 0x23bd080
	void RefreshDisplayBySampleComp(CharacterAvatarComponent* InDisplaySampleAvatarComp);// 0x23bd008
	void RefreshDisplayBySampleCharLobbyWear(STExtraBaseCharacter* InDisplaySampleChar);// 0x23bcf90
	void RefreshDisplayBySampleChar(STExtraBaseCharacter* InDisplaySampleChar);// 0x23bcf18
	bool PutOnEquipByID(const int InItemID);// 0x23bce98
	bool PutOnEquipByHandle(BattleItemHandleBase* InAvatarHandle);// 0x23bce18
	void PutOffEquipBySlot(const int InSlotID);// 0x23bcda0
	void PutOffEquipByID(const int InItemID);// 0x23bcd28
	STExtraPlayerController* GetLocalController();// 0x23bcd00
	CharacterAvatarComponent* getAvatarComponent();// 0x23bccd8
	void ClearDisplay();// 0x23bccc4

--------------------------------
Class: CharacterAvatarComp_BP_C.CharacterAvatarComponent.AvatarComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x890, Size: 4]
	void FindAndDeleteGlideParticles(SceneComponent*[] tmpChildren, int Temp_int_Array_Index_Variable, SceneComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ParticleSystemComponent* K2Node_DynamicCast_AsParticle_System_Component, bool K2Node_DynamicCast_bSuccess, MeshComponent* CallFunc_GetMeshCompBySlotID_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Contains_ReturnValue, SceneComponent*[] CallFunc_GetSceneComponentAttachedChildren_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x46f6b154
	BackpackAvatarHandle* GetBattleItemFromResID(int resID, int ReloadedResID, UAELoadedClassManager* CallFunc_Get_ReturnValue, bool CallFunc_SupportItemTypeID2BPPathMapCollection_ReturnValue, BackpackBlueprintUtils* CallFunc_GetBPUtils_ReturnValue, int CallFunc_ReloadPakResID_ReturnValue, UAELoadedClassManager* CallFunc_Get_ReturnValue2, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue2, class Object CallFunc_GetBPClassByItemTypeID_ReturnValue, int CallFunc_GetBPID_BPID, class BackpackAvatarHandle K2Node_ClassDynamicCast_AsBackpack_Avatar_Handle, bool K2Node_ClassDynamicCast_bSuccess, class Object CallFunc_GetClass_ReturnValue, BackpackAvatarHandle* CallFunc_SpawnObject_ReturnValue, class BackpackAvatarHandle K2Node_ClassDynamicCast_AsBackpack_Avatar_Handle2, bool K2Node_ClassDynamicCast_bSuccess2, BackpackAvatarHandle* CallFunc_SpawnObject_ReturnValue2);// 0x46f6b154
	void CreateMeshData(MeshPackage MeshPackage, ItemDefineID DefineID, int SlotID, out MeshData Output, MeshData MeshData, int[] K2Node_MakeArray_Array, AvatarEntity* CallFunc_GetAvatarEntity_ReturnValue, MaterialInstance* CallFunc_GetMaterial_BP_ReturnValue, CharacterAvatarEntity* K2Node_DynamicCast_AsCharacter_Avatar_Entity, bool K2Node_DynamicCast_bSuccess, StaticMesh* CallFunc_GetStaticMesh_BP_ReturnValue, enum CallFunc_GetMeshType_ReturnValue, SkeletalMesh* CallFunc_GetSkeletalMesh_BP_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, ReplacedSlotInfo[] K2Node_MakeArray_Array2, int[] K2Node_MakeArray_Array3, MaterialInstance*[] K2Node_MakeArray_Array4, HideBoneData[] K2Node_MakeArray_Array5, MeshData K2Node_MakeStruct_MeshData);// 0x46f6b154
	bool PutOnDefaultEquipment(BackpackAvatarHandle* ItemHandle, bool CallFunc_PutOnEquipmentByItemHandle_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, MeshData CallFunc_CreateMeshData_outPut, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_CheckShouldEquipDefaultItem_ReturnValue);// 0x46f6b154
	void GetBPID(int RowName, out int BPID, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetTableData_Int_ReturnValue);// 0x46f6b154
	bool PutOffEquimentByResID(int resID, BackpackAvatarHandle* CallFunc_GetBattleItemFromResID_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_PutOffEquiment_ReturnValue);// 0x46f6b154
	bool PutOnEquipmentByResID(int resID, BackpackAvatarHandle* CallFunc_GetBattleItemFromResID_ReturnValue, bool CallFunc_PutOnEquipmentByItemHandle_ReturnValue);// 0x46f6b154
	void ReceiveTick(float DeltaSeconds);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void ExecuteUbergraph_CharacterAvatarComp_BP(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, MeshComponent* CallFunc_GetMeshCompBySlotID_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, float K2Node_Event_DeltaSeconds, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess2, FName CallFunc_GetGameModeState_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character2, bool K2Node_DynamicCast_bSuccess3, byte CallFunc_GetRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2);// 0x46f6b154
	float Elapsed;//[Offset: 0x894, Size: 4]
	float Gap;//[Offset: 0x898, Size: 4]

--------------------------------
Class: UAELoadedClassManager.Object
	class Object[] m_CachClass;//[Offset: 0x1c, Size: 12]
	<uint32,class Object> m_CookClass;//[Offset: 0x28, Size: 60]
	<int,UAEResList> m_ResTableData;//[Offset: 0x6c, Size: 60]
	<int,int> ItemTypeID2BPIDMap;//[Offset: 0xa8, Size: 60]
	<int,FString> BPID2BPPathMap;//[Offset: 0xe4, Size: 60]
	<FString,BPTable*> BPTableMap;//[Offset: 0x120, Size: 60]
	FString LoadedClassManagerClassName;//[Offset: 0x15c, Size: 12]
	<Object*,SoftObjectPath> AsyncLoadDict;//[Offset: 0x168, Size: 60]
	<Object*,SoftClassPath> AsyncLoadClassDict;//[Offset: 0x1a4, Size: 60]
	bool SupportItemTypeID2BPPathMapCollection();// 0x2888d88
	void InitTableData();// 0x2374dd8
	void InitBPTableMap();// 0x46f6b154
	void Init();// 0x2888d74
	FString GetPath(FString BPTableName, int ID);// 0x2888bec
	FString[] GetEditorNotLoadLevels();// 0x46f6b154
	FString[] GetEditorBlackLevels();// 0x46f6b154
	class Object GetClass(FString BPTableName, int ID);// 0x2888abc
	FString GetBPPathByItemTypeID(int InItemTypeID);// 0x28889e0
	class Object GetBPClassByItemTypeID(int InItemTypeID);// 0x2888960
	class Object GetBPClass(FString InPathStr);// 0x28888c8
	static UAELoadedClassManager* Get();// 0x28888a0
	BPTable* CreateAndAddBPTable(FString BPTableName);// 0x28887b4
	void CollectItemTypeID2BPPathMap(out const <int,int> InItemTypeID2BPIDMap, out const <int,FString> InBPID2AssetPathMap);// 0x28885bc
	void ClearAllData();// 0x28885a8
	void ClearAllAsyncLoadRef();// 0x2888594

--------------------------------
Class: UAEResList
	int ResIndex;//[Offset: 0x0, Size: 4]
	FString ResPathName;//[Offset: 0x4, Size: 12]
	bool ServerNeedLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool ClientNeedLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool iEditorLoadType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool BuildClientNeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]
	bool BuildServerNeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool IsResident;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]

--------------------------------
Class: BPTable.Object
	FString BPTableName;//[Offset: 0x1c, Size: 12]
	<int,BPTableItem> BPTableItemMap;//[Offset: 0x28, Size: 60]
	FString GetPath(int ID);// 0x2888124
	class Object GetClass(int ID);// 0x28880a4

--------------------------------
Class: BPTableItem
	int ID;//[Offset: 0x0, Size: 4]
	FString Name;//[Offset: 0x4, Size: 12]
	FString Path;//[Offset: 0x10, Size: 12]

--------------------------------
Class: BackpackBlueprintUtils.Object
	SimpleCreateBattleItemHandleAsyncRequest[] PendingSimpleAsyncRequests;//[Offset: 0x1c, Size: 12]
	CreateBattleItemHandleAsyncRequest[] PendingAsyncRequests;//[Offset: 0x28, Size: 12]
	<int,CreateBattleItemHandleListAsyncRequest> PendingAsyncRequestList;//[Offset: 0x34, Size: 60]
	<int,int> mapPickupBullet;//[Offset: 0xac, Size: 60]
	<int,enum> mapAttachPos;//[Offset: 0xe8, Size: 60]
	<int,enum> mapOccupationChipPos;//[Offset: 0x124, Size: 60]
	<int,OccupationChipList> mapOccupationMode;//[Offset: 0x160, Size: 60]
	PickupSetting PickupSetting;//[Offset: 0x19c, Size: 6]
	int[] CanPickUpMedicineAndGrenadeIDList;//[Offset: 0x1a4, Size: 12]
	<FName,TagItemList> ItemTag;//[Offset: 0x1b0, Size: 60]
	<int,OneItemType> ItemTypeMap;//[Offset: 0x228, Size: 60]
	enum CurrentGameModeType;//[Offset: 0x264, Size: 1]
	FString AttachTableName;//[Offset: 0x268, Size: 12]
	FString SuitEmoteTableName;//[Offset: 0x274, Size: 12]
	FString OccupationTableName;//[Offset: 0x280, Size: 12]
	<int,int> itemGuid2Useful;//[Offset: 0x28c, Size: 60]
	<int,int> gunMainTypeUseful;//[Offset: 0x2c8, Size: 60]
	<int,int> attachMainTypeUseful;//[Offset: 0x304, Size: 60]
	<int,int> bulletMainTypeUseful;//[Offset: 0x340, Size: 60]
	<int,int> medicineAndGrenadeMainTypeUseful;//[Offset: 0x37c, Size: 60]
	<int,int> constructTypeUseful;//[Offset: 0x3b8, Size: 60]
	bool EnableStreamingChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4, Size: 1]
	int ReloadPakResID(int resID);// 0x23ab4e8
	BattleItemHandleBase* ReloadHandleIfPakNotDownload(BattleItemHandleBase* ItemHandle, int TypeSpecificID, Object* Outer);// 0x23ab3e0
	ItemDefineID ReloadDefineIDIfPakNotDownload(ItemDefineID InDefineID);// 0x23ab33c
	void OnGameModeTypeChanged();// 0x2374dbc
	void InitialPickupSetting();// 0x23ab320
	CharacterAvatar_WearItemMetaInfo GetWearItemMetaInfo(const int ItemID);// 0x23ab284
	FString GetWeaponHandlePath_Lobby(int resID);// 0x23ab1a0
	int GetWeaponBaseSkinByRealSkinID(int resID);// 0x23ab118
	FString GetRawBattleTextByType(enum Type);// 0x23ab034
	FString GetRawBattleTextByRawTextID(int ID);// 0x23aaf50
	int GetLimitPickCountById(int ItemID);// 0x23aaec8
	BattleItemData GetCharacterVirtualItemInBackpack(BackpackComponent* BackpackComp);// 0x23aadb0
	BattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(BackpackComponent* BackpackComp);// 0x23aad28
	FString GetBPTableNameByItemID(ItemDefineID DefineID);// 0x23aac34
	int GetBPIDByResID(int resID);// 0x23aabac
	BattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(ItemDefineID DefineID);// 0x23aaa78
	FString GetBattleItemHandlePath(ItemDefineID DefineID);// 0x23aa984
	BattleItemFeatureData GetBattleItemFeatureDataByDefineID(ItemDefineID DefineID);// 0x23aa8d8
	void GenerateItemDefineIDByItemTableID(int ItemTableID, out int Type, out int TypeSpecificID);// 0x23aa7ac
	BattleItemHandleBase* CreateWeaponHandleByResID_Lobby(int resID);// 0x23aa724
	BattleItemHandleBase* CreateBattleItemHandleByPath(FString Path);// 0x23aa684
	BattleItemHandleBase* CreateBattleItemHandle(ItemDefineID DefineID, Object* Outer);// 0x23aa5a8
	BattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);// 0x23aa490
	BattleItemData ConstructBattleItemDataByDefineID(ItemDefineID DefineID);// 0x23aa368
	BattleItemHandleBase* ClientCreateBattleItemHandleCDO(ItemDefineID DefineID, Object* Outer);// 0x23aa28c
	bool CheckItem(int ItemTableID);// 0x23aa204
	void AddCharacterVirtualItemToBackpack(BackpackComponent* BackpackComp, STExtraBaseCharacter* Character);// 0x23aa140

--------------------------------
Class: SimpleCreateBattleItemHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	Object* Outer;//[Offset: 0x18, Size: 4]
	FString Path;//[Offset: 0x1c, Size: 12]
	bool bHandleCDO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: CreateBattleItemHandleAsyncRequest
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	Object* Outer;//[Offset: 0x18, Size: 4]
	FString Path;//[Offset: 0x1c, Size: 12]
	delegate Callback;//[Offset: 0x28, Size: 16]
	bool bHandleCDO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: CreateBattleItemHandleListAsyncRequest
	ItemDefineID[] DefineIDList;//[Offset: 0x0, Size: 12]
	FString[] PathList;//[Offset: 0xc, Size: 12]
	Object* Outer;//[Offset: 0x18, Size: 4]
	bool[] bHandleCDOList;//[Offset: 0x1c, Size: 12]
	int AsyncLoadReqID;//[Offset: 0x28, Size: 4]
	delegate Callback;//[Offset: 0x30, Size: 16]

--------------------------------
Class: OccupationChipList
	int[] ChipIDList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: PickupSetting
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool AutoEquipAimForAKM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]

--------------------------------
Class: TagItemList
	<int,TagOneItem> tagList;//[Offset: 0x0, Size: 60]

--------------------------------
Class: TagOneItem
	int TagItemID;//[Offset: 0x0, Size: 4]
	int TagValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: OneItemType

--------------------------------
Class: BattleWeaponItemDisplayData
	FString ItemName;//[Offset: 0x0, Size: 12]
	FString WhiteIconPath;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x339, Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x33c, Size: 4]
	float OcclusionDepthRange;//[Offset: 0x340, Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x344, Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x350, Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x354, Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x358, Size: 4]
	int DynamicShadowCascades;//[Offset: 0x35c, Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x360, Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x364, Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x368, Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36c, Size: 1]
	float ShadowCenterOffset;//[Offset: 0x370, Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x374, Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x37c, Size: 4]
	float FarShadowDistance;//[Offset: 0x380, Size: 4]
	float DistanceFieldShadowDistance;//[Offset: 0x384, Size: 4]
	float LightSourceAngle;//[Offset: 0x388, Size: 4]
	float TraceDistance;//[Offset: 0x38c, Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x390, Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 1]
	bool bCastPhotonShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a0, Size: 1]
	float SoftShadowSoftness;//[Offset: 0x3a4, Size: 4]
	float ShadowBlendFactor;//[Offset: 0x3a8, Size: 4]
	float BoundsScale;//[Offset: 0x3ac, Size: 4]
	float NearPlaneOffset;//[Offset: 0x3b0, Size: 4]
	float FarPlaneOffset;//[Offset: 0x3b4, Size: 4]
	float SplitNearOffset;//[Offset: 0x3b8, Size: 4]
	float SplitFarOffset;//[Offset: 0x3bc, Size: 4]
	float ShadowMapResolution;//[Offset: 0x3c0, Size: 4]
	Color ModulatedShadowColor;//[Offset: 0x3c4, Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x3c8, Size: 12]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d4, Size: 1]
	bool bCastsCloudShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d4, Size: 1]
	Texture* CloudShadowTexture;//[Offset: 0x3d8, Size: 4]
	float CloudShadowTileSize;//[Offset: 0x3dc, Size: 4]
	float CloudShadowDensity;//[Offset: 0x3e0, Size: 4]
	Vector2D CloudShadowWinSpeed;//[Offset: 0x3e4, Size: 8]
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x495fbc0
	void SetOcclusionMaskDarkness(float NewValue);// 0x495fb48
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x495fac8
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x495fa48
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x495f9d0
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x495f958
	void SetDynamicShadowCascades(int NewValue);// 0x495f8e0
	void SetCloudShadowWinSpeed(out const Vector2D InWinSpeed);// 0x495f85c
	void SetCloudShadowTileSize(float InValue);// 0x495f7e4
	void SetCloudShadowTexture(Texture* InTexture);// 0x495f76c
	void SetCloudShadowDensity(float InDensity);// 0x495f6f4
	void SetCastsCloudShadow(bool InValue);// 0x495f674
	void SetCascadeTransitionFraction(float NewValue);// 0x495f5fc
	void SetCascadeDistributionExponent(float NewValue);// 0x495f584

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PixelProjectedReflection.SceneCapture.Actor.Object
	PixelProjectedReflectionComponent* PixelProjectedReflectionComponent;//[Offset: 0x2e8, Size: 4]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	void OnInterpToggle(bool bEnable);// 0x4a2a7b4

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* meshComp;//[Offset: 0x2e4, Size: 4]

--------------------------------
Class: PixelProjectedReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2a4, Size: 4]
	float NormalDistortionStrength;//[Offset: 0x2a8, Size: 4]
	float SkyDistanceFadeoutStart;//[Offset: 0x2ac, Size: 4]
	float SkyDistanceFadeoutEnd;//[Offset: 0x2b0, Size: 4]
	float DistanceFromPlaneFadeStart;//[Offset: 0x2b4, Size: 4]
	float DistanceFromPlaneFadeEnd;//[Offset: 0x2b8, Size: 4]
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x2bc, Size: 4]
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x2c0, Size: 4]
	float AngleFromPlaneFadeStart;//[Offset: 0x2c4, Size: 4]
	float AngleFromPlaneFadeEnd;//[Offset: 0x2c8, Size: 4]
	PixelProjectedReflectionHeightAdjustmentVolume*[] HeightAdjustmentVolumes;//[Offset: 0x2d0, Size: 12]
	PixelProjectedReflectionVisibilityVolume*[] VisibilityVolumes;//[Offset: 0x2dc, Size: 12]

--------------------------------
Class: PixelProjectedReflectionHeightAdjustmentVolume.Volume.Brush.Actor.Object
	float DestinationHeight;//[Offset: 0x30c, Size: 4]
	float FadeTime;//[Offset: 0x310, Size: 4]

--------------------------------
Class: PixelProjectedReflectionVisibilityVolume.Volume.Brush.Actor.Object
	float MaxDrawDistance;//[Offset: 0x30c, Size: 4]

--------------------------------
Class: WaterSwimObject_C.WaterSwimActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x318, Size: 4]
	void RefreshWaterMaterial(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInFight_ReturnValue);// 0x46f6b154
	void DoTrySetWaterMaterial(int NewParam, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void TrySetWaterMaterial(int NewParam);// 0x46f6b154
	void IsSupportIndex(int NewParam, out bool NewParam1, FString CallFunc_Conv_IntToString_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsSupportIndex_NewParam1, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetWaterReflectionSetting_ReturnValue, RenderQualitySettings CallFunc_GetRenderQualityApplying_ReturnValue, bool CallFunc_IsOpenMSAA_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_GreaterEqual_ByteByte_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsSupportLDR_ReturnValue, bool CallFunc_IsOpenHDR_ReturnValue);// 0x46f6b154
	void SetWaterMaterial(int NewParam, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInterface* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetObjectName_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetObjectName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_NotEqual_IntInt_ReturnValue);// 0x46f6b154
	void IsNewiOSDevice(out bool bNewiOSDevice, FString CallFunc_GetDeviceName_ReturnValue, bool CallFunc_Contains_ReturnValue, bool CallFunc_Contains_ReturnValue2, bool CallFunc_Contains_ReturnValue3, bool CallFunc_Contains_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue3);// 0x46f6b154
	void ShowEnterWaterPartical(Vector Location, Rotator Rotation, int CallFunc_PostEventAtLocation_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x46f6b154
	void SetWateMaterial(bool bHDR, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsNewiOSDevice_bNewiOSDevice, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsOpenMSAA_ReturnValue, bool CallFunc_IsOpenHDR_ReturnValue, bool CallFunc_IsSupportLDR_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue3);// 0x46f6b154
	void HideUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog);// 0x46f6b154
	void ShowUnderWaterEffect(StaticMeshComponent* WaterPlane, ExponentialHeightFogComponent* CamFog, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors, ExponentialHeightFog* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_PostAkEvent_ReturnValue);// 0x46f6b154
	bool IsCapsult(Object* PlayerPawn, ActorComponent* Comp, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x46f6b154
	void BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x46f6b154
	void CustomEvent(byte gamePawnEvent);// 0x46f6b154
	void CustomEvent(int UserQualitySettingLevel);// 0x46f6b154
	void ReceiveEndPlay(byte EndPlayReason);// 0x46f6b154
	void CustomEvent(bool UserMsaaSetting);// 0x46f6b154
	void CustomEvent(bool bOpenWaterReflection);// 0x46f6b154
	void ExecuteUbergraph_WaterSwimObject(int EntryPoint, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsCapsult_returnvalue, bool CallFunc_IsCapsult_returnvalue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue, byte K2Node_CustomEvent_gamePawnEvent, GameInstance* CallFunc_GetGameInstance_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess3, int K2Node_CustomEvent_UserQualitySettingLevel, byte K2Node_Event_EndPlayReason, bool CallFunc_IsDedicatedServer_ReturnValue2, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess4, bool K2Node_CustomEvent_UserMsaaSetting, bool K2Node_CustomEvent_bOpenWaterReflection, MaterialInterface*[] K2Node_MakeArray_Array, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate4, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_IsValid_ReturnValue5);// 0x46f6b154
	GameEventListener* GameEventListener;//[Offset: 0x31c, Size: 4]
	ParticleSystemComponent* P_Water_down_01;//[Offset: 0x320, Size: 4]
	AkComponent* Ak;//[Offset: 0x324, Size: 4]
	PostProcessComponent* PostProcess;//[Offset: 0x328, Size: 4]
	BoxComponent* PostSceneBox;//[Offset: 0x32c, Size: 4]
	StaticMeshComponent* watermesh;//[Offset: 0x330, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x334, Size: 4]
	float Gamma;//[Offset: 0x338, Size: 4]
	PostProcessSettings NewVar;//[Offset: 0x340, Size: 1328]
	STExtraBaseCharacter*[] PlayerList;//[Offset: 0x870, Size: 12]
	byte NewVar;//[Offset: 0x87c, Size: 1]
	float FogDensity;//[Offset: 0x880, Size: 4]
	ExponentialHeightFog* heightFog;//[Offset: 0x884, Size: 4]
	MaterialInstanceDynamic* NoHDRWater;//[Offset: 0x888, Size: 4]
	MaterialInstanceDynamic* HDROcean;//[Offset: 0x88c, Size: 4]
	MaterialInstanceDynamic* HDRSwamp;//[Offset: 0x890, Size: 4]
	MaterialInterface* HDROceanMaterial;//[Offset: 0x894, Size: 4]
	MaterialInterface* SUPHDROceanMaterial;//[Offset: 0x898, Size: 4]
	MaterialInterface* HDRSwampMaterial;//[Offset: 0x89c, Size: 4]
	MaterialInterface* SUPHDRSwampMaterial;//[Offset: 0x8a0, Size: 4]
	MaterialInterface* NoHDRWaterMaterial;//[Offset: 0x8a4, Size: 4]
	int CurrentMaterialIndex;//[Offset: 0x8a8, Size: 4]
	MaterialInterface*[] MaterialList;//[Offset: 0x8ac, Size: 12]
	bool IsSetSwamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 1]
	MaterialInterface* WaterMaterial_Normal;//[Offset: 0x8bc, Size: 4]
	MaterialInterface* WaterMaterial_HDR;//[Offset: 0x8c0, Size: 4]
	MaterialInterface* WaterMaterial_SUP_HDR;//[Offset: 0x8c4, Size: 4]

--------------------------------
Class: BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2ce0, Size: 4]
	bool IsAngleSightRotateNotZero(STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_NotEqual_FloatFloat_ReturnValue);// 0x46f6b154
	void DoControllerArrived(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void CustomEventChangeFPPFOV(int NewParam, CameraComponent* CallFunc_GetFirstPersonCamera_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x46f6b154
	void CustomEventChangeTPPFOV(int NewParam, float CallFunc_Conv_IntToFloat_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, float CallFunc_NormalizeAxis_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_ClampAngle_ReturnValue, CameraComponent* CallFunc_GetThirdPersonCamera_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	bool IsHoldAimButton(bool K2Node_SwitchEnum_CmpSuccess);// 0x46f6b154
	void GetEmoteHandlePath(int ItemID, out FString HandlePath, out bool Find, FString CallFunc_Conv_IntToString_ReturnValue, int CallFunc_GetTableData_Int_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_EmoteBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x46f6b154
	Rotator GetAngledSightRotator(STExtraShootWeapon* NewParam, int CallFunc_GetWeaponID_ReturnValue, int CallFunc_GetScopeID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue);// 0x46f6b154
	bool GetIsEffectMotionEmote(int EmoteIndex, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_EmoteBPTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x46f6b154
	bool ReplayCreateEnemyFrameUI(Transform CallFunc_MakeTransform_ReturnValue, MaterialBillboardComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue);// 0x46f6b154
	enum[] GetDisallowedStates(int ActivityID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BattleInteractiveDataStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x46f6b154
	void RegisterModifiedAttributesInternal(AttrRegisterItem[] AttrRegisterItems, FString Temp_string_Variable, FString Temp_string_Variable2, FString Temp_string_Variable3, FString Temp_string_Variable4, AttrRegisterItem CallFunc_MakeAttrRegisterItemFromPropertyPath_OutAttrRegisterItem, bool CallFunc_MakeAttrRegisterItemFromPropertyPath_ReturnValue, AttrRegisterItem CallFunc_MakeAttrRegisterItemFromPropertyPath_OutAttrRegisterItem2, bool CallFunc_MakeAttrRegisterItemFromPropertyPath_ReturnValue2, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue2, bool CallFunc_RegisterModifyAbleAttr_ReturnValue);// 0x46f6b154
	void TriggerActivityByID(bool GetNameOnly, out FString UIName, out int ActivityID, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BattleInteractiveDataStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_TriggerEvent_ReturnValue);// 0x46f6b154
	FrontendHUD* GetAHUD(out bool Success, bool CallFunc_HasAuthority_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x46f6b154
	bool IsAngledSightAvailable(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Vector CallFunc_GetSocketLocation_ReturnValue, Vector CallFunc_GetSocketLocation_ReturnValue2, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x46f6b154
	void RefreshAngledSightUI(bool HaveAngledSight, bool IsAngledSight, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void ShowAngledSightState(bool IsAngledSight, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchInteger_CmpSuccess);// 0x46f6b154
	void AngledSightAnimLogic(byte Selection, out bool NewParam, STExtraShootWeapon* ShootWeapon, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsAngleSightRotateNotZero_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, Rotator CallFunc_GetAngledSightRotator_ReturnValue, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_HaveAngledSight_ReturnValue, DollyZoomParam CallFunc_UpdateScopeCameraOffsets_Param, float CallFunc_GetScopeFov_ReturnValue, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2);// 0x46f6b154
	void AngledSightAnimUpdate(float InputPin, bool bIsOnlyTurn, bool IsAngledSight, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetCurSightType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, CharacterAvatarComponent* CallFunc_getAvatarComponent_ReturnValue, bool CallFunc_IsAngledSightAvailable_ReturnValue, CharacterAvatarComponent* CallFunc_getAvatarComponent_ReturnValue2, Vector CallFunc_GetSocketLocation_ReturnValue, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, Vector CallFunc_GetSocketLocation_ReturnValue2, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, DollyZoomParam K2Node_MakeStruct_DollyZoomParam, bool CallFunc_IsAngledSight_ReturnValue, Rotator CallFunc_RLerp_ReturnValue);// 0x46f6b154
	FString BlueprintGetMovementAttrModifier_Internal(float Value, int Direction, byte PoseType, out bool bIsValid, FString[] Directions, FString[] PoseTexts, byte Temp_byte_Variable, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int Temp_int_Variable, int Temp_int_Variable2, int Temp_int_Variable3, int Temp_int_Variable4, FString[] K2Node_MakeArray_Array, int K2Node_Select_Default, FString[] K2Node_MakeArray_Array2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3);// 0x46f6b154
	void BlueprintDisableAllMoveAttrModifier_Internal(byte PoseType, int Temp_int_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable2, int CallFunc_MakeLiteralInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_GetMovementAttrModifier_OutValue, bool CallFunc_GetMovementAttrModifier_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2);// 0x46f6b154
	void BlueprintRefreshMoveAttrModifier_Internal(byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue);// 0x46f6b154
	void BlueprintSetPoseStateAttrModifierEnable_Internal(byte InPoseState, bool bNewEnable, FString NewAttrModifyName, AttrModifyComponent* AttrModifier, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue, AttrModifyComponent* CallFunc_GetAttrModifyComponent_ReturnValue);// 0x46f6b154
	void BlueprintEnableAllMoveAttrModifier_Internal(byte PoseType, Vector MoveInput, AttrModifyComponent* AttrModifier, bool CallFunc_IsValid_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, FString CallFunc_GetMovementAttrModifier_OutValue, bool CallFunc_GetMovementAttrModifier_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, FString CallFunc_GetMovementAttrModifier_OutValue2, bool CallFunc_GetMovementAttrModifier_ReturnValue2, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, FString CallFunc_GetMovementAttrModifier_OutValue3, bool CallFunc_GetMovementAttrModifier_ReturnValue3, Vector CallFunc_GetMoveInputState_OutMoveInputState, AttrModifyComponent* CallFunc_GetAttrModifyComponent_ReturnValue);// 0x46f6b154
	void BlueprintSetCharacterAttrModifierEnable_Internal(FString ModifierName, bool bNewEnable, STExtraShootWeapon* CurrentShootWeapon, AttrModifyComponent* AttrModify, bool CallFunc_HasState_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_DisableAttrModifier_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_DisableAttrModifier_ReturnValue2, bool CallFunc_EnableAttrModifier_ReturnValue, bool CallFunc_EnableAttrModifier_ReturnValue2, bool CallFunc_HasState_ReturnValue2, bool CallFunc_HasState_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, STExtraShootWeapon* K2Node_DynamicCast_AsSTExtra_Shoot_Weapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2, AttrModifyComponent* CallFunc_GetAttrModifyComponent_ReturnValue);// 0x46f6b154
	void GetGrenadeCameraShakeByDir(Vector ImpulseDir, out class CameraShake RetVar, class CameraShake RetVar, Vector CallFunc_Multiply_VectorVector_ReturnValue, Vector CallFunc_Normal_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue, Vector CallFunc_GetActorRightVector_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorVector_ReturnValue3, Vector CallFunc_Normal_ReturnValue3, FString CallFunc_Conv_VectorToString_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x46f6b154
	BackpackEmoteHandle* GetEmoteHandle(int ItemID, BP_STExtraPlayerController_C* PC, int ID, ItemDefineID K2Node_MakeStruct_ItemDefineID, BackpackEmoteHandle* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_GetEmoteHandlePath_HandlePath, bool CallFunc_GetEmoteHandlePath_find, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, BackpackEmoteHandle* K2Node_DynamicCast_AsBackpack_Emote_Handle, bool K2Node_DynamicCast_bSuccess2);// 0x46f6b154
	FString GetShootWeaponNameByWeapon(int ItemDefineID, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FString CallFunc_GetTableData_String_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x46f6b154
	CameraComponent* GetThirdPersonCamera();// 0x46f6b154
	SpringArmComponent* GetThirdPersonSpringArm();// 0x46f6b154
	CameraComponent* GetFirstPersonCamera();// 0x46f6b154
	SpringArmComponent* GetFirstPersonSpringArm();// 0x46f6b154
	CameraComponent* GetScopeCamera(CameraComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	ActorComponent*[] GetNonSimulatedComponents_OnFighting(ActorComponent*[] K2Node_MakeArray_Array);// 0x46f6b154
	bool ShouldAutoScopeWhenPeek(PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetShouldAutoScopeWhenPeek_ReturnValue);// 0x46f6b154
	ActorComponent*[] GetNonSimulatedComponents_NonTeammates(ActorComponent*[] K2Node_MakeArray_Array);// 0x46f6b154
	void GetControllerViewCamera(out CameraComponent* Camera, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, CameraComponent*[] CallFunc_GetComponentsByClass_ReturnValue, int CallFunc_Array_Length_ReturnValue, CameraComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsActive_ReturnValue);// 0x46f6b154
	void CheckAutoMove(bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsLocalControlOrView_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x46f6b154
	ActorComponent*[] GetNonSimulatedComponents(ActorComponent* Components, ActorComponent*[] K2Node_MakeArray_Array);// 0x46f6b154
	ActorComponent*[] GetNonDedicatedComponents(ActorComponent*[] Components, ActorComponent*[] K2Node_MakeArray_Array, ActorComponent*[] K2Node_MakeArray_Array2);// 0x46f6b154
	void HandleOnDetachedVehicle(STExtraVehicleBase* NewParam, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult);// 0x46f6b154
	void HandleOnAttachedVehicle(STExtraVehicleBase* InVehicle, bool CallFunc_HasAuthority_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue);// 0x46f6b154
	void AimInterupted(Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess);// 0x46f6b154
	void TestShowMesh(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, MeshComponent*[] CallFunc_Map_Values_Values, FString CallFunc_Conv_VectorToString_ReturnValue, MeshComponent* CallFunc_Array_Get_Item, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Conv_VectorToString_ReturnValue2);// 0x46f6b154
	void GetWeapon(out Vector NewParam, out Rotator NewParam1, out bool bHaveWeapon, Transform CallFunc_GetSocketTransform_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale);// 0x46f6b154
	void ClientHandlePreOnPlane(bool CallFunc_SwitchPoseState_ReturnValue);// 0x46f6b154
	void ResetBPCameraSetting();// 0x46f6b154
	void ShowDebugArrow(SceneComponent* self2, Rotator InRot, LinearColor Color, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x46f6b154
	void IsAutonomous(out bool NewParam, bool CallFunc_HasAuthority_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Controller* CallFunc_GetController_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x46f6b154
	void Pickup(PickUpWrapperActor* NewParam);// 0x46f6b154
	void DoPickUpTarget();// 0x46f6b154
	void RotateMesh(Rotator NewParam, Rotator NewLocalVar, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Rotator CallFunc_FindLookAtRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_K2_SetActorRotation_ReturnValue);// 0x46f6b154
	void SetAllCollisionEnabled(bool bEnable);// 0x46f6b154
	void MoveOutScope();// 0x46f6b154
	void Reload(bool CallFunc_ReloadCurrentWeapon_ReturnValue);// 0x46f6b154
	void SwitchCrouch(byte NewParam, byte preState, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	void ParachuteCamBlend__FinishedFunc();// 0x46f6b154
	void ParachuteCamBlend__UpdateFunc();// 0x46f6b154
	void LerpAlpha__FinishedFunc();// 0x46f6b154
	void LerpAlpha__UpdateFunc();// 0x46f6b154
	void ScopeTimeline__FinishedFunc();// 0x46f6b154
	void ScopeTimeline__UpdateFunc();// 0x46f6b154
	void AngledSigntTimeline__FinishedFunc();// 0x46f6b154
	void AngledSigntTimeline__UpdateFunc();// 0x46f6b154
	void Timeline_0__FinishedFunc();// 0x46f6b154
	void Timeline_0__UpdateFunc();// 0x46f6b154
	void TurnLerpAlpha__FinishedFunc();// 0x46f6b154
	void TurnLerpAlpha__UpdateFunc();// 0x46f6b154
	void InpActEvt_Vault_K2Node_InputActionEvent(Key Key);// 0x46f6b154
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_Q_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_E_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_B_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_T_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_C_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_R_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_Z_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_LeftShift_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_F10_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_P_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_N_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_Ctrl_P_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_Alt_P_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_Ctrl_N_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x46f6b154
	void InpActEvt_Fire_K2Node_InputActionEvent(Key Key);// 0x46f6b154
	void InpActEvt_NumPadFive_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void InpActEvt_NumPadFive_K2Node_InputKeyEvent(Key Key);// 0x46f6b154
	void ReceiveEndPlay(byte EndPlayReason);// 0x46f6b154
	void ReceiveOnRecycled();// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x46f6b154
	void ReloadEvent();// 0x46f6b154
	void OnEquipWeapon(byte Slot);// 0x46f6b154
	void SwitchCamera(STR_CameraSetting CameraSetting);// 0x46f6b154
	void OnNotifyHurt();// 0x46f6b154
	void OnLanded(out const HitResult Hit);// 0x46f6b154
	void OnPoseStateChange(byte LastState, byte CurState);// 0x46f6b154
	void K2_UpdateCustomMovement(float DeltaTime);// 0x46f6b154
	void BPReceiveDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x46f6b154
	void ParachuteOnWater();// 0x46f6b154
	void DoAutoReloadCurrentWeapon();// 0x46f6b154
	void SwitchCameraFromParachuteOpeningToTPPStop();// 0x46f6b154
	void OnUnEquipWeapon();// 0x46f6b154
	void BPResetCharacter();// 0x46f6b154
	void VaultFailPawnBluePrint(out const FString Content);// 0x46f6b154
	void PawnVaultServerBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Actor* WindowActor, Rotator movedir);// 0x46f6b154
	void PawnVaultAllBluePrint(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir);// 0x46f6b154
	void ScopeInStop();// 0x46f6b154
	void PlayScopeInTimeline(float Rate);// 0x46f6b154
	void BPReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, float Radius, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser, out const Vector ImpulseDir);// 0x46f6b154
	void ReceivePossessed(Controller* NewController);// 0x46f6b154
	void ParachutePlaySound(AkAudioEvent* LocalAkEvent, AkAudioEvent* RemoteAkEvent);// 0x46f6b154
	void OnDetectPaintDecalTarget(bool bStart);// 0x46f6b154
	void PawnVaultServerStopCheckBluePrint();// 0x46f6b154
	void PawnVaultStopBluePrint();// 0x46f6b154
	void OnBPIsInvincibleChange();// 0x46f6b154
	void CustomEvent(STExtraShootWeapon* Weapon, enum Type, bool bEquip);// 0x46f6b154
	void OnWeaponEquipmentUpdate();// 0x46f6b154
	void CustomEvent(bool bIsBegin);// 0x46f6b154
	void SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x46f6b154
	void DoAngledSight(bool IsPush);// 0x46f6b154
	void DoNormalSight(bool IsPush);// 0x46f6b154
	void StopSwitchAngledSight();// 0x46f6b154
	void BindAndExecStateChanged();// 0x46f6b154
	void StateEnterHandler_Event(enum State);// 0x46f6b154
	void OnBPStateCheckIn();// 0x46f6b154
	void OnMiniTreeTriggerServerLogicCPP(FString ExMsg);// 0x46f6b154
	void CustomEvent();// 0x46f6b154
	void BP_RegisterModifiedAttributes();// 0x46f6b154
	void DynamicHoldGun(bool BoolValue);// 0x46f6b154
	void OnBuffAttached_Event(out const FName BuffName);// 0x46f6b154
	void EventOnAvatarAsyncLoadingFinished(int AsyncLoadID, AvatarComponent* LoadEventFrom);// 0x46f6b154
	void SwitchSightAngledLocal(byte Type, bool IsOnlyTurn);// 0x46f6b154
	void DoFootEffectTarget(bool bStart);// 0x46f6b154
	void BndEvt__STCharacterMovement_K2Node_ComponentBoundEvent_0_ActorComponentActivatedSignature__DelegateS(ActorComponent* Component, bool bReset);// 0x46f6b154
	void BindInitDelegate();// 0x46f6b154
	void CustomEvent_OnHasPickupPropsAvailableChanged(bool bIsAvailable);// 0x46f6b154
	void CustomEvent_OnHasTombBoxesAvailableChanged(bool bIsAvailable);// 0x46f6b154
	void BPOnRespawned();// 0x46f6b154
	void HandleAttachToVehicleEvent();// 0x46f6b154
	void CustomEvent(Object* LoadObject);// 0x46f6b154
	void CustomEvent(Object* LoadObject);// 0x46f6b154
	void CustomEvent(Object* LoadObject);// 0x46f6b154
	void SwitchRearSight(int Index, int OldIndex);// 0x46f6b154
	void ServerForceStopVaultBluePrint();// 0x46f6b154
	void ControllerArrived();// 0x46f6b154
	void OnParachuteStateChangedDelegateEvent(byte OldState, byte NewState);// 0x46f6b154
	void ReceiveTick(float DeltaSeconds);// 0x46f6b154
	void StopTurningInPlace();// 0x46f6b154
	void TurnInPlace(Rotator TurnInPlaceStart, Rotator TurnInPlaceTarget, CurveFloat* Curve, AnimMontage* TurnAnimation);// 0x46f6b154
	void ExecuteUbergraph_BP_PlayerPawn(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, byte K2Node_Event_EndPlayReason, GameStateBase* CallFunc_GetGameState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum2_CmpSuccess, byte CallFunc_GetPersistentRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate3, Controller* K2Node_Event_Killer, Actor* K2Node_Event_DamageCauser3, HitResult K2Node_Event_KillingHitInfo, Vector K2Node_Event_KillingHitImpulseDir, class DamageType K2Node_Event_KillingHitDamageType, class BP_GiveupDamageType_C K2Node_ClassDynamicCast_AsBP_Giveup_Damage_Type, bool K2Node_ClassDynamicCast_bSuccess, BP_PaintDecalDetectLine_C* K2Node_DynamicCast_AsBP_Paint_Decal_Detect_Line, bool K2Node_DynamicCast_bSuccess2, byte K2Node_Event_slot, STExtraShootWeapon* CallFunc_GetShootWeaponBySlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, STR_CameraSetting K2Node_CustomEvent_CameraSetting, bool CallFunc_isAutonomous_NewParam, bool CallFunc_IsLocallyControlled_ReturnValue, HitResult K2Node_Event_Hit, Controller* CallFunc_GetController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_FloatFloat_ReturnValue, byte K2Node_Event_LastState, byte K2Node_Event_CurState, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue3, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue4, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float K2Node_Event_DeltaTime, AkComponent* CallFunc_GetAkComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue2, float K2Node_Event_Damage, const DamageType* K2Node_Event_DamageType2, Controller* K2Node_Event_InstigatedBy2, Actor* K2Node_Event_DamageCauser2, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, Controller* CallFunc_GetController_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess4, Controller* CallFunc_GetController_ReturnValue3, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess5, bool K2Node_SwitchEnum3_CmpSuccess, bool CallFunc_ShouldUpdateHPOnUI_ReturnValue, bool K2Node_SwitchEnum4_CmpSuccess, Controller* CallFunc_GetController_ReturnValue4, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess6, bool K2Node_SwitchInteger_CmpSuccess, Key K2Node_InputKeyEvent_Key8, Key Temp_struct_Variable, FString K2Node_Event_content, float K2Node_Event_dis2, float K2Node_Event_height2, float K2Node_Event_length2, FString K2Node_Event_VaultKey2, Vector K2Node_Event_startPos2, Actor* K2Node_Event_checkActor2, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, Vector K2Node_Event_hitpoint2, Actor* K2Node_Event_WindowActor, Rotator K2Node_Event_movedir2, float K2Node_Event_dis, float K2Node_Event_height, float K2Node_Event_length, FString K2Node_Event_VaultKey, Vector K2Node_Event_startPos, Actor* K2Node_Event_checkActor, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, Vector K2Node_Event_hitpoint, Rotator K2Node_Event_movedir, Controller* CallFunc_GetController_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate6, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess7, FString CallFunc_GetPlayerKey_ReturnValue, Key K2Node_InputKeyEvent_Key9, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_SetCurrentPersonPerspective_ReturnValue, bool CallFunc_SetCurrentPersonPerspective_ReturnValue2, float K2Node_CustomEvent_Rate, bool CallFunc_IsCharacterSprinting_ReturnValue, byte CallFunc_ConvertCharacterPoseStateToPoseType_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_SwitchEnum5_CmpSuccess, bool CallFunc_SwitchPoseState_ReturnValue, bool CallFunc_SwitchPoseState_ReturnValue2, bool CallFunc_SwitchPoseState_ReturnValue3, bool CallFunc_SwitchPoseState_ReturnValue4, bool CallFunc_SwitchPoseState_ReturnValue5, bool CallFunc_SwitchPoseState_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate7, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue3, Key K2Node_InputKeyEvent_Key10, bool CallFunc_IsValid_ReturnValue5, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue4, Key K2Node_InputKeyEvent_Key11, Key K2Node_InputKeyEvent_Key12, Key K2Node_InputKeyEvent_Key13, Key Temp_struct_Variable2, Actor* CallFunc_GetOwner_ReturnValue, float K2Node_Event_DamageReceived, const DamageType* K2Node_Event_DamageType, Vector K2Node_Event_Origin, float K2Node_Event_Radius, HitResult K2Node_Event_HitInfo, Controller* K2Node_Event_InstigatedBy, Actor* K2Node_Event_DamageCauser, Vector K2Node_Event_ImpulseDir, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess8, class CameraShake CallFunc_GetGrenadeCameraShakeByDir_RetVar, const STExtraDamageType* K2Node_DynamicCast_AsSTExtra_Damage_Type, bool K2Node_DynamicCast_bSuccess9, PlayerCameraManager* CallFunc_GetPlayerCameraManager_ReturnValue, bool CallFunc_IsValid_ReturnValue6, bool CallFunc_IsAutoRunTestGame_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, Key K2Node_InputKeyEvent_Key14, Controller* K2Node_Event_NewController, bool CallFunc_IsValid_ReturnValue7, AkAudioEvent* K2Node_Event_LocalAkEvent, AkAudioEvent* K2Node_Event_RemoteAkEvent, bool CallFunc_IsValid_ReturnValue8, bool CallFunc_IsValid_ReturnValue9, int CallFunc_PostAkEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue10, int CallFunc_PostAkEvent_ReturnValue2, Key Temp_struct_Variable3, bool CallFunc_IsLocalControlOrView_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue2, bool Temp_bool_Has_Been_Initd_Variable, SceneComponent* CallFunc_GetAttachParent_ReturnValue, bool CallFunc_IsValid_ReturnValue11, Actor* CallFunc_GetOwner_ReturnValue2, STExtraVehicleBase* K2Node_DynamicCast_AsSTExtra_Vehicle_Base, bool K2Node_DynamicCast_bSuccess10, bool Temp_bool_IsClosed_Variable, Key K2Node_InputKeyEvent_Key15, float CallFunc_Multiply_FloatFloat_ReturnValue, bool K2Node_Event_bStart2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, ChildActorComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue12, bool CallFunc_IsValid_ReturnValue13, Key K2Node_InputKeyEvent_Key16, Key K2Node_InputKeyEvent_Key17, Key K2Node_InputKeyEvent_Key18, bool CallFunc_IsInEditor_ReturnValue, bool CallFunc_IsInEditor_ReturnValue2, bool CallFunc_IsInEditor_ReturnValue3, bool CallFunc_IsInEditor_ReturnValue4, bool CallFunc_IsInEditor_ReturnValue5, GameStateBase* CallFunc_GetGameState_ReturnValue2, SurviveGameState_C* K2Node_DynamicCast_AsSurvive_Game_State, bool K2Node_DynamicCast_bSuccess11, bool CallFunc_IsValid_ReturnValue14, MeshComponent*[] CallFunc_Map_Values_Values, int CallFunc_Array_Length_ReturnValue, BRGameStateTeam_DeathMatch* K2Node_DynamicCast_AsBRGame_State_Team_Death_Match, bool K2Node_DynamicCast_bSuccess12, bool CallFunc_IsValid_ReturnValue15, bool Temp_bool_Has_Been_Initd_Variable2, Controller* CallFunc_GetController_ReturnValue6, bool CallFunc_IsAngledSight_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess13, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_IsAngledSight_ReturnValue2, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue16, bool CallFunc_HaveAngledSightBySlot_ReturnValue, STExtraShootWeapon* K2Node_CustomEvent_weapon, enum K2Node_CustomEvent_type, bool K2Node_CustomEvent_bEquip, Controller* CallFunc_GetController_ReturnValue7, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess14, bool CallFunc_EqualEqual_ByteByte_ReturnValue5, bool CallFunc_GetClientHasFinishedReloadWeapon_ReturnValue, Key K2Node_InputKeyEvent_Key, bool Temp_bool_IsClosed_Variable2, Key Temp_struct_Variable4, int Temp_int_Array_Index_Variable, Key K2Node_InputKeyEvent_Key19, MeshComponent* CallFunc_Array_Get_Item, Key K2Node_InputKeyEvent_Key20, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Key Temp_struct_Variable5, Key K2Node_InputKeyEvent_Key21, Key K2Node_InputKeyEvent_Key22, Key K2Node_InputActionEvent_Key3, bool K2Node_CustomEvent_bIsBegin, Controller* CallFunc_GetController_ReturnValue8, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess15, bool CallFunc_Not_PreBool_ReturnValue3, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_IsAngledSight_ReturnValue3, bool CallFunc_IsAngledSightBySlot_ReturnValue, Key K2Node_InputKeyEvent_Key2, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_HaveAngledSight_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue4, bool K2Node_CustomEvent_IsPush2, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_ScopeIn_ReturnValue, Controller* CallFunc_GetController_ReturnValue9, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller7, bool K2Node_DynamicCast_bSuccess16, bool K2Node_SwitchInteger2_CmpSuccess, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_GetClientHasFinishedReloadWeapon_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue7, delegate K2Node_CreateDelegate_OutputDelegate8, bool CallFunc_IsAngledSight_ReturnValue6, bool K2Node_CustomEvent_IsPush, bool CallFunc_GetClientHasFinishedReloadWeapon_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue6, Controller* CallFunc_GetController_ReturnValue10, bool CallFunc_BooleanAND_ReturnValue8, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller8, bool K2Node_DynamicCast_bSuccess17, bool K2Node_SwitchInteger3_CmpSuccess, bool CallFunc_IsAngledSight_ReturnValue7, bool CallFunc_IsAngledSight_ReturnValue8, bool CallFunc_IsAngledSight_ReturnValue9, bool CallFunc_Not_PreBool_ReturnValue7, bool CallFunc_ScopeIn_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue9, bool CallFunc_IsAngledSight_ReturnValue10, bool CallFunc_Not_PreBool_ReturnValue8, bool CallFunc_BooleanAND_ReturnValue10, int CallFunc_PostEvent_ReturnValue2, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue2, bool CallFunc_IsAngledSight_ReturnValue11, bool CallFunc_BooleanAND_ReturnValue11, bool CallFunc_HaveAngledSight_ReturnValue2, bool CallFunc_IsAngledSightAvailable_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue12, bool CallFunc_IsAngledSightAvailable_ReturnValue2, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, bool CallFunc_IsAngledSight_ReturnValue13, bool CallFunc_BooleanOR_ReturnValue2, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue5, bool CallFunc_IsValid_ReturnValue17, enum K2Node_CustomEvent_State, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue6, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller9, bool K2Node_DynamicCast_bSuccess18, delegate K2Node_CreateDelegate_OutputDelegate9, bool CallFunc_GetAHUD_Success, FrontendHUD* CallFunc_GetAHUD_ReturnValue, FString K2Node_Event_ExMsg, bool CallFunc_AllowTriggerActivities_ReturnValue, bool CallFunc_BooleanAND_ReturnValue12, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_GetAutoRunLuaTest_ReturnValue, bool CallFunc_HasState_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess19, bool CallFunc_IsValid_ReturnValue18, bool CallFunc_IsFastForwardingReplay_ReturnValue, bool CallFunc_IsValid_ReturnValue19, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, bool K2Node_CustomEvent_BoolValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, const FName K2Node_CustomEvent_BuffName, bool CallFunc_IsValid_ReturnValue20, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue7, bool CallFunc_IsValid_ReturnValue21, int K2Node_CustomEvent_AsyncLoadID, AvatarComponent* K2Node_CustomEvent_LoadEventFrom, byte K2Node_Event_type, bool K2Node_Event_IsOnlyTurn, bool K2Node_Event_bStart, bool CallFunc_AngledSightAnimLogic_NewParam, ActorComponent* K2Node_ComponentBoundEvent_Component, bool K2Node_ComponentBoundEvent_bReset, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult, bool K2Node_CustomEvent_bIsAvailable2, bool K2Node_CustomEvent_bIsAvailable, FString CallFunc_Conv_BoolToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate10, FString CallFunc_Concat_StrStr_ReturnValue6, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue8, delegate K2Node_CreateDelegate_OutputDelegate11, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller10, bool K2Node_DynamicCast_bSuccess20, FString CallFunc_GetDisplayName_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue7, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller11, bool K2Node_DynamicCast_bSuccess21, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate12, delegate K2Node_CreateDelegate_OutputDelegate13, float Temp_float_Variable, Controller* CallFunc_GetController_ReturnValue11, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess22, bool CallFunc_IsLocallyControlled_ReturnValue3, bool CallFunc_HasAuthority_ReturnValue2, bool CallFunc_IsOnVehicle_ReturnValue, bool CallFunc_BooleanOR_ReturnValue3, STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue, Vector CallFunc_GetActorScale3D_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue4, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_HasAuthority_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue4, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult, bool CallFunc_IsOnVehicle_ReturnValue2, STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue2, Vector CallFunc_GetActorScale3D_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Divide_FloatFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_K2_SetActorRelativeLocation_SweepHitResult2, bool CallFunc_GetClientHasFinishedReloadWeapon_ReturnValue4, bool CallFunc_IsValid_ReturnValue22, FString CallFunc_Conv_BoolToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Conv_BoolToString_ReturnValue4, bool CallFunc_IsValid_ReturnValue23, FString CallFunc_Concat_StrStr_ReturnValue10, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Object* K2Node_CustomEvent_LoadObject3, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess23, Object* K2Node_CustomEvent_LoadObject2, int CallFunc_PostEvent_ReturnValue3, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event2, bool K2Node_DynamicCast_bSuccess24, Object* K2Node_CustomEvent_LoadObject, int CallFunc_PostEvent_ReturnValue4, AkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event3, bool K2Node_DynamicCast_bSuccess25, int CallFunc_PostEvent_ReturnValue5, float Temp_float_Variable2, int CallFunc_PostEvent_ReturnValue6, int CallFunc_PostEvent_ReturnValue7, bool Temp_bool_Variable, float K2Node_Select_Default, int K2Node_CustomEvent_Index, int K2Node_CustomEvent_OldIndex, CameraShake* CallFunc_PlayCameraShake_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate14, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue24, ShootWeaponEntity* CallFunc_GetShootWeaponEntityComponent_ReturnValue, FName CallFunc_Array_Get_Item2, FName CallFunc_Array_Get_Item3, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue3, SpringArmComponent* CallFunc_GetScopeSpringArm_ReturnValue, SpringArmComponent* CallFunc_GetScopeSpringArm_ReturnValue2, bool CallFunc_K2_AttachToComponent_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue2, CameraComponent* CallFunc_GetScopeCamera_ReturnValue, bool CallFunc_HasAuthority_ReturnValue4, bool CallFunc_HasAuthority_ReturnValue5, FString CallFunc_GetDisplayName_ReturnValue2, FString CallFunc_GetDisplayName_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12, byte CallFunc_GetRole_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate15, bool CallFunc_IsPlaying_ReturnValue, Key Temp_struct_Variable6, bool CallFunc_Not_PreBool_ReturnValue9, bool CallFunc_Not_PreBool_ReturnValue10, Key K2Node_InputActionEvent_Key, Key K2Node_InputActionEvent_Key2, bool CallFunc_CheckCanVault_isActive, byte K2Node_CustomEvent_OldState, byte K2Node_CustomEvent_NewState, bool CallFunc_EqualEqual_ByteByte_ReturnValue7, bool CallFunc_NotEqual_ByteByte_ReturnValue2, STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue13, bool CallFunc_IsValid_ReturnValue25, Actor* CallFunc_GetAttachParentActor_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, bool CallFunc_IsValid_ReturnValue26, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, float K2Node_Event_DeltaSeconds, bool CallFunc_K2_SetActorRotation_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue5, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue5, bool CallFunc_IsComponentTickEnabled_ReturnValue, byte Temp_byte_Variable, byte Temp_byte_Variable2, bool Temp_bool_Variable2, delegate K2Node_CreateDelegate_OutputDelegate16, byte K2Node_Select2_Default, Rotator K2Node_CustomEvent_TurnInPlaceStart, Rotator K2Node_CustomEvent_TurnInPlaceTarget, CurveFloat* K2Node_CustomEvent_Curve, AnimMontage* K2Node_CustomEvent_TurnAnimation, float CallFunc_PlayAnimMontage_ReturnValue, float CallFunc_GetTimeRange_MinTime, float CallFunc_GetTimeRange_MaxTime, Rotator CallFunc_RLerp_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate17, bool CallFunc_BooleanOR_ReturnValue6, Key K2Node_InputKeyEvent_Key3, bool CallFunc_BooleanAND_ReturnValue14, Key K2Node_InputKeyEvent_Key4, Key K2Node_InputKeyEvent_Key5, Key K2Node_InputKeyEvent_Key6, Key K2Node_InputKeyEvent_Key7);// 0x46f6b154
	void OnRearSightChange__DelegateSignature(int RearIndex);// 0x46f6b154
	void OnWeaponAttachmentChange__DelegateSignature();// 0x46f6b154
	void ScopeInComplete__DelegateSignature();// 0x46f6b154
	void UnequipWeaponComplete__DelegateSignature();// 0x46f6b154
	void EquipWeaponComplete__DelegateSignature();// 0x46f6b154
	Vault_Controller_C* Vault_Controller;//[Offset: 0x2ce4, Size: 4]
	CustomCameraComponent* Camera;//[Offset: 0x2ce8, Size: 4]
	SimpleOBCameraComponent* ScopingCamera;//[Offset: 0x2cec, Size: 4]
	BP_SearchVehicleRadarComp_C* BP_SearchVehicleRadarComp;//[Offset: 0x2cf0, Size: 4]
	BP_PlayerGunCollision_C* PlayerGunCollision;//[Offset: 0x2cf4, Size: 4]
	SpringArmComponent* ShoulderCameraSpringArm;//[Offset: 0x2cf8, Size: 4]
	SceneComponent* ShoulderCameraOffset;//[Offset: 0x2cfc, Size: 4]
	BP_CharacterFieldOfViewNotificationComponent_C* BP_CharacterFieldOfViewNotificationComponent;//[Offset: 0x2d00, Size: 4]
	GiftGiverComp_BP_C* GiftGiverComp_BP;//[Offset: 0x2d04, Size: 4]
	HoldComponent_C* AngledSightHoldComp;//[Offset: 0x2d08, Size: 4]
	CharacterAnimList_Skill_C* CharacterAnimList_Skill;//[Offset: 0x2d0c, Size: 4]
	PlayerSkillComp_BP_C* UAESkillManager;//[Offset: 0x2d10, Size: 4]
	LevelActiveComponent* LevelActive;//[Offset: 0x2d14, Size: 4]
	AimAndFireComponent_C* AimAndFireComponent;//[Offset: 0x2d18, Size: 4]
	CrowdAgentComponent* CrowdAgent;//[Offset: 0x2d1c, Size: 4]
	CharacterAnimList_Parachute_C* CharacterAnimList_Parachute;//[Offset: 0x2d20, Size: 4]
	BuildSystemComp_BP_C* BuildSystemComp_BP;//[Offset: 0x2d24, Size: 4]
	HoldComponent_C* PeekHoldComp;//[Offset: 0x2d28, Size: 4]
	HoldComponent_C* AimHoldComp;//[Offset: 0x2d2c, Size: 4]
	ObserverCameraComponent* ObserverCameraFPPMode;//[Offset: 0x2d30, Size: 4]
	FPPSpringArmComponent* FPPSpringArm;//[Offset: 0x2d34, Size: 4]
	FPPComponent_C* FPPComponent;//[Offset: 0x2d38, Size: 4]
	SpringArmComponent* ScopingSpringArm;//[Offset: 0x2d3c, Size: 4]
	CapsuleComponent* HitBox_Prone;//[Offset: 0x2d40, Size: 4]
	CapsuleComponent* HitBox_Stand;//[Offset: 0x2d44, Size: 4]
	CharacterAvatarComp_BP_C* CharacterAvatarComp_BP;//[Offset: 0x2d48, Size: 4]
	BP_SwimController_C* BP_SwimController;//[Offset: 0x2d4c, Size: 4]
	CharacterWeaponManagerComponent* CharacterWeaponManager;//[Offset: 0x2d50, Size: 4]
	CharacterAnimList_Base_C* CharacterAnimList_Base;//[Offset: 0x2d54, Size: 4]
	PickupManagerComponent* PickupManager;//[Offset: 0x2d58, Size: 4]
	CustomSpringArmComponent* CustomSpringArm;//[Offset: 0x2d5c, Size: 4]
	CameraSettingComponent_C* CameraSettingComponent;//[Offset: 0x2d60, Size: 4]
	float Timeline_0_NewTrack_2_D7E7E764446C96148EBDAF9A9218BB6D;//[Offset: 0x2d64, Size: 4]
	byte Timeline_0__Direction_D7E7E764446C96148EBDAF9A9218BB6D;//[Offset: 0x2d68, Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x2d6c, Size: 4]
	float AngledSigntTimeline_NewTrack_0_D1F413C24CFDF93616007F867C45A1E0;//[Offset: 0x2d70, Size: 4]
	byte AngledSigntTimeline__Direction_D1F413C24CFDF93616007F867C45A1E0;//[Offset: 0x2d74, Size: 1]
	TimelineComponent* AngledSigntTimeline;//[Offset: 0x2d78, Size: 4]
	float ScopeTimeline_NewTrack_1_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x2d7c, Size: 4]
	byte ScopeTimeline__Direction_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x2d80, Size: 1]
	TimelineComponent* ScopeTimeline;//[Offset: 0x2d84, Size: 4]
	float ParachuteCamBlend_Alpha_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x2d88, Size: 4]
	byte ParachuteCamBlend__Direction_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x2d8c, Size: 1]
	TimelineComponent* ParachuteCamBlend;//[Offset: 0x2d90, Size: 4]
	float LerpAlpha_LerpAlpha_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x2d94, Size: 4]
	byte LerpAlpha__Direction_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x2d98, Size: 1]
	TimelineComponent* LerpAlpha;//[Offset: 0x2d9c, Size: 4]
	float TurnLerpAlpha_Alpha_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x2da0, Size: 4]
	byte TurnLerpAlpha__Direction_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x2da4, Size: 1]
	TimelineComponent* TurnLerpAlpha;//[Offset: 0x2da8, Size: 4]
	MaterialInstanceDynamic* DamageSphereDMI;//[Offset: 0x2dac, Size: 4]
	bool bCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db0, Size: 1]
	float ReloadingCDMax;//[Offset: 0x2db4, Size: 4]
	Vector LastInAirVelocityVector;//[Offset: 0x2db8, Size: 12]
	Vector VelocityVector;//[Offset: 0x2dc4, Size: 12]
	float Speed;//[Offset: 0x2dd0, Size: 4]
	bool Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd4, Size: 1]
	Rotator LastVelocityRotation;//[Offset: 0x2dd8, Size: 12]
	Rotator TurnInPlaceRotation;//[Offset: 0x2de4, Size: 12]
	Rotator TurnInPlaceStart;//[Offset: 0x2df0, Size: 12]
	Rotator TurnInPlaceTarget;//[Offset: 0x2dfc, Size: 12]
	bool TurningInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e08, Size: 1]
	byte LocomotionState;//[Offset: 0x2e09, Size: 1]
	bool Jumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0a, Size: 1]
	float ProneCameraHeight;//[Offset: 0x2e0c, Size: 4]
	float CameraMoveSpeed;//[Offset: 0x2e10, Size: 4]
	bool UseFirstPersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e14, Size: 1]
	float MeleeAttackRange;//[Offset: 0x2e18, Size: 4]
	Vector Melee Attack Location;//[Offset: 0x2e1c, Size: 12]
	float MeleeAttackDamage;//[Offset: 0x2e28, Size: 4]
	byte CurCameraMode;//[Offset: 0x2e2c, Size: 1]
	STR_CameraSetting StandCameraSetting;//[Offset: 0x2e30, Size: 20]
	Rotator TerreneNormal;//[Offset: 0x2e44, Size: 12]
	Vector Normal;//[Offset: 0x2e50, Size: 12]
	PickUpWrapperActor* PickUpTarget;//[Offset: 0x2e5c, Size: 4]
	bool bIsPicking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e60, Size: 1]
	delegate EquipWeaponComplete;//[Offset: 0x2e64, Size: 12]
	delegate UnequipWeaponComplete;//[Offset: 0x2e70, Size: 12]
	float CrouchCameraHeight;//[Offset: 0x2e7c, Size: 4]
	float PickupDelayTime;//[Offset: 0x2e80, Size: 4]
	SkeletalMeshComponent* ParachuteComponent;//[Offset: 0x2e84, Size: 4]
	float SwimCameraHeight;//[Offset: 0x2e88, Size: 4]
	float SwimTargetRoll;//[Offset: 0x2e8c, Size: 4]
	float SwimUpRateFix;//[Offset: 0x2e90, Size: 4]
	float SwimRotateSpeed;//[Offset: 0x2e94, Size: 4]
	bool VaultEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e98, Size: 1]
	ItemDefineID putoffItem;//[Offset: 0x2ea0, Size: 24]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x2eb8, Size: 12]
	bool autoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec4, Size: 1]
	SpringArmComponent*[] SpringArms;//[Offset: 0x2ec8, Size: 12]
	CameraComponent*[] Cameras;//[Offset: 0x2ed4, Size: 12]
	SpringArmComponent* CurActiveSpringArm;//[Offset: 0x2ee0, Size: 4]
	bool UseTurniinPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee4, Size: 1]
	float ElapseTime;//[Offset: 0x2ee8, Size: 4]
	float SwimRotateX;//[Offset: 0x2eec, Size: 4]
	byte CurPoseState;//[Offset: 0x2ef0, Size: 1]
	ChildActorComponent* PaintDecalDetectComp;//[Offset: 0x2ef4, Size: 4]
	BP_PaintDecalDetectLine_C* PaintDecalDetector;//[Offset: 0x2ef8, Size: 4]
	delegate ScopeInComplete;//[Offset: 0x2efc, Size: 12]
	MaterialBillboardComponent* MaterialBoard;//[Offset: 0x2f08, Size: 4]
	MaterialInstanceDynamic* HPMaterial;//[Offset: 0x2f0c, Size: 4]
	BillboardComponent* DieoutFlag;//[Offset: 0x2f10, Size: 4]
	bool bIsAngledSightOnlyTurn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f14, Size: 1]
	MeshComponent* TargetAttachComponent;//[Offset: 0x2f18, Size: 4]
	MeshComponent* OriginAttachComponent;//[Offset: 0x2f1c, Size: 4]
	Rotator OriginRotOffset;//[Offset: 0x2f20, Size: 12]
	DollyZoomParam TargetDollyZoomParam;//[Offset: 0x2f2c, Size: 12]
	DollyZoomParam OriginDollyZoomParam;//[Offset: 0x2f38, Size: 12]
	MaterialBillboardComponent* FrameUIBillboard;//[Offset: 0x2f44, Size: 4]
	delegate OnWeaponAttachmentChange;//[Offset: 0x2f48, Size: 12]
	Vector LocalPlayerPos;//[Offset: 0x2f54, Size: 12]
	Vector FinalPaticalScale;//[Offset: 0x2f60, Size: 12]
	enum[] DisallowStateCache;//[Offset: 0x2f6c, Size: 12]
	Object* FootEffectDetector;//[Offset: 0x2f78, Size: 4]
	ChildActorComponent* FootEffectDetectComp;//[Offset: 0x2f7c, Size: 4]
	bool AngledSIghtSetMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f80, Size: 1]
	AkAudioEvent* HurtSound_Male;//[Offset: 0x2f84, Size: 4]
	AkAudioEvent* HurtSound_Female;//[Offset: 0x2f88, Size: 4]
	delegate OnRearSightChange;//[Offset: 0x2f8c, Size: 12]
	Rotator[] RearSightRotationOffset;//[Offset: 0x2f98, Size: 12]
	Vector[] NewVar;//[Offset: 0x2fa4, Size: 12]
	Vector NewVar;//[Offset: 0x2fb0, Size: 12]
	FString RealDeathSound_Male;//[Offset: 0x2fbc, Size: 12]
	FString RealDeathSound_Female;//[Offset: 0x2fc8, Size: 12]
	float TPPFOV;//[Offset: 0x2fd4, Size: 4]

--------------------------------
Class: GameBackendHUD.BackendHUD.Object
	GameBackendUtils* GetUtils();// 0x236691c
	static GameBackendHUD* GetInstance();// 0x2e5fed0
	GameFrontendHUD* GetFirstGameFrontendHUD(const Object* WorldContextObject);// 0x2e5fe50

--------------------------------
Class: BackendHUD.Object
	Engine* Engine;//[Offset: 0x1c, Size: 4]
	FString BackendUtilsClassName;//[Offset: 0x20, Size: 12]
	BackendUtils* Utils;//[Offset: 0x2c, Size: 4]
	FrontendHUD*[] FrontendHUDList;//[Offset: 0x30, Size: 12]
	FrontendHUD* GetFrontendHUD(int FrontendHUDIndex);// 0x4b9c890

--------------------------------
Class: GameBackendUtils.BackendUtils.Object
	UAETableManager* TableManager;//[Offset: 0x20, Size: 4]
	UAETableManager* GetTableManager();// 0x2e5fb5c
	UAELoadedClassManager* GetLoadedClassManager();// 0x2e5fb34

--------------------------------
Class: BackendUtils.Object
	BackendHUD* OwningBackendHUD;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x1c, Size: 12]
	FString[] InitalizedTables;//[Offset: 0x28, Size: 12]
	UAEDataTable*[] TableObjList;//[Offset: 0x34, Size: 12]
	<FName,UAEDataTable*> TableObjMap;//[Offset: 0x40, Size: 60]
	FName[] TablesNeedReleasedInBattle;//[Offset: 0x7c, Size: 12]
	void ReleaseTable(FName TableName);// 0x288a1c8
	void LoadTranslateTables();// 0x288a1b4
	UAEDataTable* GetTablePtr(FName TableName);// 0x288a134
	static UAEDataTable* GetDataTableStatic(FString TableName);// 0x288a0a4

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x20, Size: 4]
	SoftObjectPath TinyFontName;//[Offset: 0x28, Size: 24]
	Font* SmallFont;//[Offset: 0x5c, Size: 4]
	SoftObjectPath SmallFontName;//[Offset: 0x60, Size: 24]
	Font* MediumFont;//[Offset: 0x78, Size: 4]
	SoftObjectPath MediumFontName;//[Offset: 0x80, Size: 24]
	Font* LargeFont;//[Offset: 0x98, Size: 4]
	SoftObjectPath LargeFontName;//[Offset: 0xa0, Size: 24]
	Font* SubtitleFont;//[Offset: 0xb8, Size: 4]
	SoftObjectPath SubtitleFontName;//[Offset: 0xc0, Size: 24]
	Font*[] AdditionalFonts;//[Offset: 0xd8, Size: 12]
	FString[] AdditionalFontNames;//[Offset: 0xec, Size: 12]
	class Console* ConsoleClass;//[Offset: 0xf8, Size: 4]
	SoftClassPath ConsoleClassName;//[Offset: 0x100, Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118, Size: 4]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120, Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138, Size: 4]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140, Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158, Size: 4]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160, Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178, Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x190, Size: 4]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x198, Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1b0, Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1b4, Size: 4]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1b8, Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1d0, Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x1e8, Size: 4]
	SoftClassPath AIControllerClassName;//[Offset: 0x1f0, Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x208, Size: 4]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x20c, Size: 4]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x210, Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x228, Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x240, Size: 24]
	Object* GameSingleton;//[Offset: 0x258, Size: 4]
	SoftClassPath AssetManagerClassName;//[Offset: 0x260, Size: 24]
	AssetManager* AssetManager;//[Offset: 0x278, Size: 4]
	Texture2D* DefaultTexture;//[Offset: 0x27c, Size: 4]
	SoftObjectPath DefaultTextureName;//[Offset: 0x280, Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x298, Size: 4]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2a0, Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2b8, Size: 4]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2c0, Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x2d8, Size: 4]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x2e0, Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x2f8, Size: 4]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x300, Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x318, Size: 4]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x320, Size: 24]
	Material* WireframeMaterial;//[Offset: 0x338, Size: 4]
	FString WireframeMaterialName;//[Offset: 0x33c, Size: 12]
	Material* DebugMeshMaterial;//[Offset: 0x348, Size: 4]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x350, Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x368, Size: 4]
	FString LevelColorationLitMaterialName;//[Offset: 0x36c, Size: 12]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x378, Size: 4]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x37c, Size: 12]
	Material* LightingTexelDensityMaterial;//[Offset: 0x388, Size: 4]
	FString LightingTexelDensityName;//[Offset: 0x38c, Size: 12]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x398, Size: 4]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x39c, Size: 12]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x3a8, Size: 4]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x3ac, Size: 12]
	Material* RemoveSurfaceMaterial;//[Offset: 0x3b8, Size: 4]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x3c0, Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x3d8, Size: 4]
	FString VertexColorMaterialName;//[Offset: 0x3dc, Size: 12]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x3e8, Size: 4]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x3ec, Size: 12]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x3f8, Size: 4]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x3fc, Size: 12]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x408, Size: 4]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x40c, Size: 12]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x418, Size: 4]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x41c, Size: 12]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x428, Size: 4]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x42c, Size: 12]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x438, Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x450, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x454, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x458, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x45c, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x460, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x464, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x468, Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x46c, Size: 4]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x470, Size: 4]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x478, Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x490, Size: 4]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x498, Size: 24]
	Material* ArrowMaterial;//[Offset: 0x4b0, Size: 4]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x4b8, Size: 24]
	Material* OutlineMaterial;//[Offset: 0x4d0, Size: 4]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x4d8, Size: 24]
	SoftObjectPath SmaaAreaTexName;//[Offset: 0x4f0, Size: 24]
	SoftObjectPath SmaaSearchTexName;//[Offset: 0x508, Size: 24]
	Texture2D* SmaaAreaTex;//[Offset: 0x520, Size: 4]
	Texture2D* SmaaSearchTex;//[Offset: 0x524, Size: 4]
	Material* DyeingColorMaterial;//[Offset: 0x528, Size: 4]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x530, Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x548, Size: 16]
	LinearColor[] ShaderComplexityColors;//[Offset: 0x558, Size: 12]
	LinearColor[] QuadComplexityColors;//[Offset: 0x564, Size: 12]
	LinearColor[] LightComplexityColors;//[Offset: 0x570, Size: 12]
	LinearColor[] StationaryLightOverlapColors;//[Offset: 0x57c, Size: 12]
	LinearColor[] LODColorationColors;//[Offset: 0x588, Size: 12]
	LinearColor[] HLODColorationColors;//[Offset: 0x594, Size: 12]
	LinearColor[] StreamingAccuracyColors;//[Offset: 0x5a0, Size: 12]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x5ac, Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x5b0, Size: 4]
	float MinLightMapDensity;//[Offset: 0x5b4, Size: 4]
	float IdealLightMapDensity;//[Offset: 0x5b8, Size: 4]
	float MaxLightMapDensity;//[Offset: 0x5bc, Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c0, Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x5c4, Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x5c8, Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x5cc, Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x5dc, Size: 16]
	StatColorMapping[] StatColorMappings;//[Offset: 0x5ec, Size: 12]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x5f8, Size: 4]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x600, Size: 24]
	GameNameRedirect[] ActiveGameNameRedirects;//[Offset: 0x618, Size: 12]
	ClassRedirect[] ActiveClassRedirects;//[Offset: 0x624, Size: 12]
	PluginRedirect[] ActivePluginRedirects;//[Offset: 0x630, Size: 12]
	StructRedirect[] ActiveStructRedirects;//[Offset: 0x63c, Size: 12]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x648, Size: 4]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x650, Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x668, Size: 4]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x670, Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x688, Size: 4]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x690, Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x6a8, Size: 4]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x6b0, Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x6cc, Size: 4]
	FString[] DeferredCommands;//[Offset: 0x6d0, Size: 12]
	int TickCycles;//[Offset: 0x6dc, Size: 4]
	int GameCycles;//[Offset: 0x6e0, Size: 4]
	int ClientCycles;//[Offset: 0x6e4, Size: 4]
	float NearClipPlane;//[Offset: 0x6e8, Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ec, Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ec, Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ec, Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x6f0, Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f4, Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f4, Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f4, Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f4, Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6f4, Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6f4, Size: 1]
	float FixedFrameRate;//[Offset: 0x6f8, Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x6fc, Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70c, Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x710, Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x714, Size: 1]
	Color C_WorldBox;//[Offset: 0x718, Size: 4]
	Color C_BrushWire;//[Offset: 0x71c, Size: 4]
	Color C_AddWire;//[Offset: 0x720, Size: 4]
	Color C_SubtractWire;//[Offset: 0x724, Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x728, Size: 4]
	Color C_NonSolidWire;//[Offset: 0x72c, Size: 4]
	Color C_WireBackground;//[Offset: 0x730, Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x734, Size: 4]
	Color C_VolumeCollision;//[Offset: 0x738, Size: 4]
	Color C_BSPCollision;//[Offset: 0x73c, Size: 4]
	Color C_OrthoBackground;//[Offset: 0x740, Size: 4]
	Color C_Volume;//[Offset: 0x744, Size: 4]
	Color C_BrushShape;//[Offset: 0x748, Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x74c, Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x750, Size: 12]
	byte TransitionType;//[Offset: 0x75c, Size: 1]
	FString TransitionDescription;//[Offset: 0x760, Size: 12]
	FString TransitionGameMode;//[Offset: 0x76c, Size: 12]
	float MeshLODRange;//[Offset: 0x778, Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77c, Size: 1]
	float CameraRotationThreshold;//[Offset: 0x780, Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x784, Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x788, Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x78c, Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 1]
	int MaxParticleResize;//[Offset: 0x794, Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x798, Size: 4]
	DropNoteInfo[] PendingDroppedNotes;//[Offset: 0x79c, Size: 12]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x7a8, Size: 28]
	float NetClientTicksPerSecond;//[Offset: 0x7c4, Size: 4]
	float DisplayGamma;//[Offset: 0x7c8, Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x7cc, Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x7d0, Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x7d4, Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x7e4, Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x7f4, Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x804, Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x814, Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x824, Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x825, Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x825, Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x825, Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x825, Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x828, Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x830, Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x834, Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x838, Size: 12]
	float SelectionHighlightIntensity;//[Offset: 0x850, Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x854, Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x858, Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x85c, Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x860, Size: 4]
	NetDriverDefinition[] NetDriverDefinitions;//[Offset: 0x99c, Size: 12]
	FString[] ServerActors;//[Offset: 0x9a8, Size: 12]
	FString[] RuntimeServerActors;//[Offset: 0x9b4, Size: 12]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9e4, Size: 1]
	int NextWorldContextHandle;//[Offset: 0x9f4, Size: 4]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x60, Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x64, Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x68, Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x6c, Size: 4]
	int WindowPosX;//[Offset: 0x70, Size: 4]
	int WindowPosY;//[Offset: 0x74, Size: 4]
	int FullscreenMode;//[Offset: 0x78, Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x7c, Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x80, Size: 4]
	uint32 version;//[Offset: 0x84, Size: 4]
	int AudioQualityLevel;//[Offset: 0x88, Size: 4]
	float FrameRateLimit;//[Offset: 0x8c, Size: 4]
	int DesiredScreenWidth;//[Offset: 0x94, Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	int DesiredScreenHeight;//[Offset: 0x9c, Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xa0, Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xa4, Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xa8, Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xac, Size: 4]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xb0, Size: 12]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xbc, Size: 12]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xc8, Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xd0, Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xd4, Size: 12]
	void ValidateSettings();// 0x24492cc
	bool SupportsHDRDisplayOutput();// 0x239d610
	void SetVSyncEnabled(bool bEnable);// 0x4985d20
	void SetVisualEffectQuality(int Value);// 0x4985ca8
	void SetViewDistanceQuality(int Value);// 0x4985c30
	void SetToDefaults();// 0x4985c14
	void SetTextureQuality(int Value);// 0x2e53b8c
	void SetShadowQuality(int Value);// 0x4985b9c
	void SetScreenResolution(IntPoint Resolution);// 0x4985b2c
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x4985ab4
	void SetResolutionScaleValue(int NewScaleValue);// 0x4985a3c
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x49859c4
	void SetPostProcessingQuality(int Value);// 0x24ab3b4
	void SetOverallScalabilityLevel(int Value);// 0x23f3188
	void SetFullscreenMode(byte InFullscreenMode);// 0x498594c
	void SetFrameRateLimit(float NewLimit);// 0x49858d4
	void SetFoliageQuality(int Value);// 0x498585c
	void SetBenchmarkFallbackValues();// 0x4985848
	void SetAudioQualityLevel(int QualityLevel);// 0x49857d0
	void SetAntiAliasingQuality(int Value);// 0x4985758
	void SaveSettings();// 0x2422910
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x4985650
	void RevertVideoMode();// 0x498563c
	void ResetToCurrentSettings();// 0x23ab320
	void LoadSettings(bool bForceReload);// 0x49855b4
	bool IsVSyncEnabled();// 0x498558c
	bool IsVSyncDirty();// 0x4985564
	bool IsScreenResolutionDirty();// 0x498553c
	bool IsHDREnabled();// 0x4985514
	bool IsFullscreenModeDirty();// 0x49854ec
	bool IsDirty();// 0x4062a08
	int GetVisualEffectQuality();// 0x49854c4
	int GetViewDistanceQuality();// 0x23845d4
	int GetTextureQuality();// 0x498549c
	int GetShadowQuality();// 0x4985474
	IntPoint GetScreenResolution();// 0x498542c
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x4985298
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x4985104
	float GetRecommendedResolutionScale();// 0x49850d4
	byte GetPreferredFullscreenMode();// 0x49850ac
	int GetPostProcessingQuality();// 0x24ab364
	int GetOverallScalabilityLevel();// 0x4985084
	IntPoint GetLastConfirmedScreenResolution();// 0x498503c
	byte GetLastConfirmedFullscreenMode();// 0x4985014
	static GameUserSettings* GetGameUserSettings();// 0x4984fec
	byte GetFullscreenMode();// 0x4984fc4
	float GetFrameRateLimit();// 0x4984f9c
	int GetFoliageQuality();// 0x4984f74
	IntPoint GetDesktopResolution();// 0x4984f2c
	static IntPoint GetDefaultWindowPosition();// 0x4984eec
	static byte GetDefaultWindowMode();// 0x23c7134
	float GetDefaultResolutionScale();// 0x4984ebc
	static IntPoint GetDefaultResolution();// 0x4984e7c
	int GetCurrentHDRDisplayNits();// 0x4984e54
	int GetAudioQualityLevel();// 0x4984e38
	int GetAntiAliasingQuality();// 0x24a9aa0
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x4984d70
	void ConfirmVideoMode();// 0x4984d5c
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x4984cd4
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x4984c54
	void ApplyNonResolutionSettings();// 0x24492b0
	void ApplyHardwareBenchmarkResults();// 0x2384e20

--------------------------------
Class: AssetManager.Object
	Object*[] ObjectReferenceList;//[Offset: 0x24c, Size: 12]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d, Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	bool bIsPrimaryAssetDirectoryCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f, Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x262, Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x264, Size: 4]

--------------------------------
Class: StatColorMapping
	FString StatName;//[Offset: 0x0, Size: 12]
	StatColorMapEntry[] ColorMap;//[Offset: 0xc, Size: 12]
	bool DisableBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: StatColorMapEntry
	float In;//[Offset: 0x0, Size: 4]
	Color Out;//[Offset: 0x4, Size: 4]

--------------------------------
Class: GameNameRedirect
	FName OldGameName;//[Offset: 0x0, Size: 8]
	FName NewGameName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: ClassRedirect
	FName ObjectName;//[Offset: 0x0, Size: 8]
	FName OldClassName;//[Offset: 0x8, Size: 8]
	FName NewClassName;//[Offset: 0x10, Size: 8]
	FName OldSubobjName;//[Offset: 0x18, Size: 8]
	FName NewSubobjName;//[Offset: 0x20, Size: 8]
	FName NewClassClass;//[Offset: 0x28, Size: 8]
	FName NewClassPackage;//[Offset: 0x30, Size: 8]
	bool InstanceOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: PluginRedirect
	FString OldPluginName;//[Offset: 0x0, Size: 12]
	FString NewPluginName;//[Offset: 0xc, Size: 12]

--------------------------------
Class: StructRedirect
	FName OldStructName;//[Offset: 0x0, Size: 8]
	FName NewStructName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0, Size: 12]

--------------------------------
Class: DropNoteInfo
	Vector Location;//[Offset: 0x0, Size: 12]
	Rotator Rotation;//[Offset: 0xc, Size: 12]
	FString Comment;//[Offset: 0x18, Size: 12]

--------------------------------
Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0, Size: 4]
	float LinearInterpAlpha;//[Offset: 0x4, Size: 4]
	float LinearRecipFixTime;//[Offset: 0x8, Size: 4]
	float AngularDeltaThreshold;//[Offset: 0xc, Size: 4]
	float AngularInterpAlpha;//[Offset: 0x10, Size: 4]
	float AngularRecipFixTime;//[Offset: 0x14, Size: 4]
	float BodySpeedThresholdSq;//[Offset: 0x18, Size: 4]

--------------------------------
Class: NetDriverDefinition
	FName DefName;//[Offset: 0x0, Size: 8]
	FName DriverClassName;//[Offset: 0x8, Size: 8]
	FName DriverClassNameFallback;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GameFrontendHUD.FrontendHUD.Object
	delegate OnFinishModifyUserSettings;//[Offset: 0xd8, Size: 12]
	<FName,FString> GameStatusMap;//[Offset: 0xf0, Size: 60]
	<FString> TestMarkNameSet;//[Offset: 0x130, Size: 60]
	GVoiceInterface* GVoice;//[Offset: 0x16c, Size: 4]
	bool DisableGVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	LocalSettingManager* SettingManager;//[Offset: 0x174, Size: 4]
	<FName,Property*> SaveGamePropertyMap;//[Offset: 0x178, Size: 60]
	HttpHelper* HttpHelper;//[Offset: 0x1b4, Size: 4]
	bool isInFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	BugReporter* BugReporter;//[Offset: 0x1bc, Size: 4]
	GDolphinUpdater* GDolphin;//[Offset: 0x1c0, Size: 4]
	FString[] pufferPakFileList;//[Offset: 0x1c8, Size: 12]
	GPufferUpdater* GPuffer;//[Offset: 0x1d4, Size: 4]
	CustomMapManager* CustomMapManager;//[Offset: 0x1d8, Size: 4]
	UGCActorLuaManager* UGCActorLuaManager;//[Offset: 0x1dc, Size: 4]
	ReplayManager* ReplayManager;//[Offset: 0x1e0, Size: 4]
	FName UnrealNetworkStatus;//[Offset: 0x1f0, Size: 8]
	float UnrealNetworkConnectingTimer;//[Offset: 0x208, Size: 4]
	float UnrealNetworkConnectingDetectInterval;//[Offset: 0x210, Size: 4]
	float UnrealNetworkRecoverableLostDetectInterval;//[Offset: 0x214, Size: 4]
	float UnrealNetworkConnectingTime;//[Offset: 0x228, Size: 4]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x244, Size: 4]
	FString ScriptBPRelativeDir;//[Offset: 0x248, Size: 12]
	bool bLuaUseLobbyEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254, Size: 1]
	bool bReleaseGameSettingAfterUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x255, Size: 1]
	bool bPrintObjListAfterShutdownLua;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x256, Size: 1]
	FString ScriptRelativeDir;//[Offset: 0x258, Size: 12]
	FString InGameLuaDir;//[Offset: 0x264, Size: 12]
	FString LuaEntryPath;//[Offset: 0x270, Size: 12]
	FString[] PreloadLuaDirList;//[Offset: 0x27c, Size: 12]
	FString LuaCSVDir;//[Offset: 0x288, Size: 12]
	FString LuaUMGDir;//[Offset: 0x294, Size: 12]
	float LuaTickTime;//[Offset: 0x2a0, Size: 4]
	bool bCallLuaTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool bDisableMNAOnGameAccelerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	FString ZoneID;//[Offset: 0x2a8, Size: 12]
	GCloudLoginAccountInfo loginAccountInfo;//[Offset: 0x2b4, Size: 64]
	float TApmTickReportTime;//[Offset: 0x2f8, Size: 4]
	float TGPATickReportTime;//[Offset: 0x2fc, Size: 4]
	TssManager* TssMgr;//[Offset: 0x300, Size: 4]
	GCloudMidasManager* midasManager;//[Offset: 0x304, Size: 4]
	bool bIsCutdownSettingQuality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308, Size: 1]
	uint64 GameID;//[Offset: 0x368, Size: 8]
	FString GameKey;//[Offset: 0x370, Size: 12]
	FString QQAppid;//[Offset: 0x37c, Size: 12]
	FString WXAppid;//[Offset: 0x388, Size: 12]
	uint64 GameId_CE;//[Offset: 0x398, Size: 8]
	FString GameKey_CE;//[Offset: 0x3a0, Size: 12]
	FString QQAppid_CE;//[Offset: 0x3ac, Size: 12]
	FString WXAppid_CE;//[Offset: 0x3b8, Size: 12]
	FString payEnvironment;//[Offset: 0x3c4, Size: 12]
	FString OfferID_IOS;//[Offset: 0x3d0, Size: 12]
	FString OfferID_Anroid;//[Offset: 0x3dc, Size: 12]
	bool bWatchingDetailBtnOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	delegate UIStackChangeDelegate;//[Offset: 0x3ec, Size: 12]
	delegate UIStackPopBottomDelegate;//[Offset: 0x3f8, Size: 12]
	delegate LoadingScreenVisibilityChanged;//[Offset: 0x404, Size: 12]
	delegate UIStackRecoverDelegate;//[Offset: 0x410, Size: 12]
	delegate MidasPayDelegate;//[Offset: 0x41c, Size: 12]
	FString[] ListToPrintRefs;//[Offset: 0x428, Size: 12]
	bool PrintObjCompareList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	bool bSurportReupdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x435, Size: 1]
	bool bShowReleaseNoGCErrorMsgBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x436, Size: 1]
	bool bPrintObjListBeforeReinit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x437, Size: 1]
	FString SurportReupdateMapURL;//[Offset: 0x438, Size: 12]
	Object*[] PersistentAssetRefs;//[Offset: 0x444, Size: 12]
	FString[] NoGCPackage;//[Offset: 0x450, Size: 12]
	SoftObjectPath[] PersistentAssetList;//[Offset: 0x45c, Size: 12]
	bool bUseOldSendTssOpenID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469, Size: 1]
	FString UserSettingsClassName;//[Offset: 0x46c, Size: 12]
	FString ReplayUserSettingsClassName;//[Offset: 0x478, Size: 12]
	class Object* UserSettingsClass;//[Offset: 0x484, Size: 4]
	SaveGame* UserSettings;//[Offset: 0x488, Size: 4]
	FString UIElemSettingClassName;//[Offset: 0x48c, Size: 12]
	CustomSettingSaveGame[] CustomSettingSaveGames;//[Offset: 0x498, Size: 12]
	ImageDownloader* ImageDownloaderInGame;//[Offset: 0x4ec, Size: 4]
	int FpsForWindowClient;//[Offset: 0x4f0, Size: 4]
	int FpsForWindowClientReplay;//[Offset: 0x4f4, Size: 4]
	NativeHUDTickContainer[] NativeHUDTickList;//[Offset: 0x4f8, Size: 12]
	bool IsNativeHUDTickLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool IsShutDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 1]
	int NativeHUDTickIndex;//[Offset: 0x508, Size: 4]
	SoftObjectPath[] LobbyPreloadAssets;//[Offset: 0x514, Size: 12]
	bool bEnableLobbyPreloadAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	bool bEnablePreloadAssetFromFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 1]
	FString[] AllowFlushPaths;//[Offset: 0x524, Size: 12]
	FString[] AllowMissings;//[Offset: 0x530, Size: 12]
	bool ReportFlushLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	bool ReportMissingFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53d, Size: 1]
	bool ReporObjectArrayGrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53e, Size: 1]
	delegate OnGameLanguageChanged;//[Offset: 0x540, Size: 12]
	bool UseStartupLevel();// 0x249eeb4
	void UploadTLOG_KafkaError(int inErrorCode);// 0x2e65b58
	void TryPreLoadLobbyAsset(const SoftObjectPath[] InAssetPathList, int AndroidMemoryLimit, int IOSMemoryLimit);// 0x2e65944
	void ToggleTGPAPingCheck(bool bIsOpen);// 0x2e658c4
	void TestSRP(FString resPath);// 0x2e657e0
	void TestPrintGUObjectArray(FString Filename, FString RefName, int PrintLevel, bool bOnlyGCedObjects);// 0x2e655b0
	void TestPrintCustomNoGC();// 0x235d4b8
	void TestMountPak(FString PakName, bool bMount);// 0x24bca48
	void TestLoadNoGCPackages();// 0x235d4b8
	FString TestExecFunc(FString CmdStr, FString ExtralStr1, FString ExtralStr2);// 0x2e65308
	void TestBoundFunction();// 0x2e652f4
	bool SurportReupdate();// 0x2e652c4
	bool StartGrayUpdate();// 0x2e6529c
	void ShutdownUnrealNetwork();// 0x2374c8c
	bool ShouldWatchingDetailBtnOpen();// 0x2e65274
	void SetZoneID(FString midasZoneID);// 0x2e65190
	void SetPufferPakFileList(FString[] pakFileList);// 0x2e6500c
	void SetPayEnvironment(FString payEnvironment);// 0x2e64f28
	void SetLanguage(FString lang);// 0x2e64e98
	void SetGameStatusMap(<FName,FString> InGameStatusMap);// 0x2e64d34
	void SetCharmViewParam(bool AllowViewCharmInfoInRank);// 0x2e64cb4
	void SetBLEDisableInfo(bool bDisable, int[] Blacklist);// 0x2e64b80
	void RetryDownload();// 0x2e64b6c
	void ResetUserSettings();// 0x2e64b58
	void ResetIslandShowNicknameValue(bool flag);// 0x2e64ad8
	void ReportGameInfoToBugly(FString InfoType, FString InMsg, FString CallStack);// 0x2e64894
	void ReloadSettingPropertyMap();// 0x2e64880
	void ReleaseLobbyPreloadAsset();// 0x2e6486c
	void ReInitLuaStateWrapper();// 0x234fef0
	void ReInitialize();// 0x2e64858
	void RegisterUserSettingsDelegate_Int(FString PropertyName, delegate Delegate);// 0x2e64704
	void RegisterUserSettingsDelegate_Float(FString PropertyName, delegate Delegate);// 0x2e64704
	void RegisterUserSettingsDelegate_Enum(FString PropertyName, delegate Delegate);// 0x2e64704
	void RegisterUserSettingsDelegate_Bool(FString PropertyName, delegate Delegate);// 0x2e64704
	void RegisterUserSettingsDelegate(delegate Delegate);// 0x2e64660
	void RegisterPay();// 0x2e6464c
	void PrintFName();// 0x2e64638
	static void PostUdpToTGPA(FString Host, int Port, int Count, int Interval, int Timeout, FString Content);// 0x2e64388
	void PostSavedFileToTGPA(FString DirPath, FString FilePath);// 0x2e641f4
	static void PostPingToTGPA(FString Host, int Count, int Interval, int Timeout, FString Content);// 0x2e63f8c
	static void PostGameStatusToTGPASMap(FString OpenID, FString RoleID, FString appid, FString PlatID);// 0x2e63ca0
	void PostFileToTGPA(FString ExtraStr, FString FilePath);// 0x2e63b0c
	void OnWebviewNotify(out const WebviewInfoWrapper webviewinfo);// 0x2e63a50
	void OnRefreshAccountInfo(bool Result, int InChannel, FString InOpenId);// 0x2e638d4
	void OnQuickLoginNotify(out const WakeupInfoWrapper wakeupinfo);// 0x2e637e0
	void OnQueryMyInfoNotify();// 0x2e637cc
	void OnNearByPersonInfoNotify();// 0x2e637b8
	void OnMidasPayNeedLogin();// 0x2e637a4
	void OnMidasPayDelegate(int payItem, FString ProductID);// 0x2e63678
	void OnMidasPayCallBack(out const APPayResponseInfo Info);// 0x2e6358c
	void OnMidasLauchMpInfoCallBack(int resultCode, FString resultString);// 0x2e63460
	void OnMidasInitCallBack(FString Result);// 0x2e6337c
	void OnLocationInfoNotify(out const LocationInfoWrapper locationInfo);// 0x2e632f8
	void OnInGameEventNotified(byte gEvent);// 0x2e63280
	void OnHttpImgResponse(Texture2D* Texture, ImageDownloader* Downloader);// 0x2e631c4
	void OnHandleClassFieldAccessDenied(const FName InClassName, const FName InFieldName);// 0x2e63100
	void OnGroupNotify(out const GroupInfoWrapper groupInfo);// 0x2e6301c
	void OnGenQRImgNotify(int Ret, int Size, FString ImgPath);// 0x2e62f04
	FString OnCrashMessageNotify();// 0x2e62e74
	void OnAccountLoginInfoNotify(int Result, out const GCloudLoginAccountInfo Info);// 0x2e62d34
	void OnAccessTokenRefreshNotify(int Result, FString OpenID, FString OpenKey);// 0x2e62b58
	void NotifyUpdateFinalFinished(int ErrorCode);// 0x23f5f9c
	void MidasPay(int payItem, FString ProductID);// 0x2e62a2c
	void MidasMonthPay(out const APMonthPayInfo Info);// 0x2e62950
	void MidasGoodsPay(out const APGoodsPayInfo Info);// 0x2e6283c
	void MatchVersion();// 0x2e62828
	void MarkFName();// 0x2e62814
	void LauchMpInfo();// 0x2e62800
	bool IsUseAllNewIngameUI();// 0x23c140c
	bool IsPayEnable();// 0x2e627d8
	void InitMidasManager();// 0x2e627c4
	void InitLuaStateWrapper();// 0x234fed4
	SaveGame* GetUserSettings();// 0x2510be8
	GDolphinUpdater* GetUpdater();// 0x2e627a8
	LocalSettingManager* GetSettingManager();// 0x2372fcc
	ReplayManager* GetReplayManager();// 0x2e62780
	GPufferUpdater* GetPufferUpdater();// 0x2e62764
	FString[] GetPufferPakFileList();// 0x2e62678
	FString GetPlayerKeyStr();// 0x2e625e4
	GCloudMidasManager* GetMidasManager();// 0x2e625bc
	LuaStateWrapper* GetLuaStateWrapper();// 0x2e62594
	HttpHelper* GetHttpHelper();// 0x23591e8
	GVoiceInterface* GetGVoiceInterface();// 0x266e3d0
	int GetDetailNetInfoFromGCloud();// 0x23985c4
	SaveGame* GetCustomSetting(FString InSlotName);// 0x2e624fc
	CustomMapManager* GetCustomMapManager();// 0x2e624d4
	BugReporter* GetBugReporter();// 0x2e624ac
	FString GetBattleIDHexStr();// 0x2e62418
	void FinishModifyUserSettings();// 0x25f56b8
	void DoClientLuaUrl(FString UrlStr);// 0x2e62388
	void DoClientLuaString(FString LuaString);// 0x2e622f8
	void CreateLogicManager(FString Filename);// 0x2e62214
	void CreateLobbyEnv();// 0x2e62200
	int CountFNameMemory();// 0x2e621d8
	static FString ConvertTMap2JsonStr(out const <FString,FString> mapData);// 0x2e6208c
	void CompareFName();// 0x2e62078
	static FString ClipboardPaste();// 0x2e61fec
	static void ClipBoardCopy(FString Text);// 0x2e61f10
	void ClearUIElemSettings();// 0x2e61efc
	void ClearLobbyEnv();// 0x2e61ee8
	void CheckLocalizationLanguage();// 0x2e61ed4
	bool CheckIfNeedRegisterPay(int loginChannel, FString OpenID, FString PayToken, FString Pf, FString PfKey, int replaceValue);// 0x2e61b40
	FString CallLuaTableFunctionRetString(FString TableName, FString FunctionName);// 0x2e619ec
	bool CallLuaTableFunctionRetBool(FString TableName, FString FunctionName);// 0x2e618f0
	void CallLuaTableFunction(FString TableName, FString FunctionName);// 0x2e617fc
	void CallGlobalScriptFunction(FString InFunctionName);// 0x2e61764
	void BeginModifyUserSettings();// 0x2e61748
	void AddCustomSetting(FString InSlotName, SaveGame* InSaveGame);// 0x2e61674

--------------------------------
Class: GVoiceInterface.Object
	delegate JoinRoomDelegate;//[Offset: 0x20, Size: 12]
	float lbsRadiusWerewolf;//[Offset: 0x2c, Size: 4]
	float lbsRadiusNormal;//[Offset: 0x30, Size: 4]
	GameFrontendHUD* GameFrontendHUD;//[Offset: 0xd0, Size: 4]
	bool isNormalInterphoneEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 1]
	bool LobbyTeamMicOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166, Size: 1]
	bool IngameTeamMicOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167, Size: 1]
	bool IngameLbsMicOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	void UploadRecordFile();// 0x2e720c0
	bool TeamSpeakerEnable();// 0x2e720a4
	bool TeamMicphoneEnable();// 0x2e72088
	void SwitchMicphoneWhenCorpsMode();// 0x2e72074
	void StopRecord();// 0x2e72060
	void StopPlayRecordFile();// 0x2e7204c
	void StopInterphone();// 0x2e72038
	void StartRecord();// 0x2e72024
	void StartInterphone();// 0x2e72010
	void SpeechToText();// 0x2e71ffc
	void ShowOpenSpeakerAtFirstMsg();// 0x2e71fe8
	void ShowLbsNotSupportInRoomMode();// 0x2e71fd4
	void ShowCorpsModeCannotUseLBSVoice();// 0x2e71fc0
	void SetWerewolfModeAudience(int[] Members);// 0x2e71edc
	void SetVoiceMode(int Type);// 0x2e71e64
	void SetTeammateAudienceList(int[] Members);// 0x2e71d80
	void SetSpeakerVolum(float Value);// 0x2e71d08
	void SetSpeakerStatus(bool flag);// 0x23910d8
	void SetShowReportVoiceSwitch(bool flag);// 0x2e71c88
	int SetServerInfo(FString URL);// 0x2e71b9c
	void SetPlayerVolume(FString OpenID, int Volume);// 0x2e71a74
	void SetMicphoneVolum(float Value);// 0x2e719fc
	void SetMicphoneStatus(bool flag);// 0x23910d8
	void SetMainVolume(float Value);// 0x2e71988
	void SetMainSoundSwitch(bool flag);// 0x2e7190c
	void SetLobbyAndInGameMicState(bool lobbyTeamMic, bool ingameTeamMic, bool ingameLbsMic);// 0x2e717ec
	void SetLbsVoiceRadius(float Radius);// 0x2e71778
	void SetLbsRoomEnableStatus(bool flag);// 0x23910d8
	void SetGvoiceLogState();// 0x2e71764
	void SetGameFrontendHUD(GameFrontendHUD* InHUD);// 0x2e716ec
	void SetCurrentDownloadFieldID(FString filedId);// 0x2e715f4
	void SetCivilVoiceStatusForRstt(bool flag);// 0x2e71574
	void SetBGMVolume(float Value);// 0x2e71500
	void SetBGMSwitch(bool flag);// 0x2e71484
	int SetAudienceList(FString RoomName, int[] Members);// 0x2e712e8
	void ResetWhenLogOut();// 0x2e712d4
	void ResetBeforeInit();// 0x2e712c0
	int ReportUncivilVoice();// 0x2e71298
	void ReactiveLbsStatus();// 0x2e71284
	int QuitViceRoom(FString room);// 0x2e71198
	void QuitRoomAbs(FString RoomName, FString pendingName);// 0x2e71004
	void QuitRoom_Replay(FString room);// 0x2e70f20
	void QuitRoom();// 0x2e70f0c
	void QuitLbsRoom(bool needReenterLbs);// 0x2e70e8c
	void PlayRecordFile();// 0x2e70e78
	void OpenTeamSpeakerOnly(bool ShowTips);// 0x2e70df8
	int OpenTeamMicphoneOnly(bool ShowTips);// 0x2e70d70
	int OpenTeamInterphone(bool ShowTips);// 0x2e70ce8
	int OpenSpeaker_Replay(bool Force);// 0x2e70c60
	int OpenSpeaker(bool Force);// 0x2e70bd8
	void OpenMicAndSpeakerAfterJoinRoom();// 0x2e70bc4
	int OpenMic_Replay(bool Force);// 0x2e70b3c
	int OpenMic(bool Force);// 0x2e70ab4
	bool OpenLocalFile(FString Filename);// 0x2e709c8
	void OpenGroupSpeakerOnly(bool ShowTips);// 0x2e70948
	int OpenGroupMicphoneOnly(bool ShowTips);// 0x2e708c0
	int OpenGroupInterphone();// 0x2e70898
	void OpenAllSpeaker(bool ShowTips);// 0x2e70818
	int OpenAllMicphone(bool ShowTips);// 0x2e70790
	int OpenAllInterphone(bool ShowTips);// 0x2e70708
	void OnRoomTypeChanged(FString itemtext);// 0x2371e00
	void OnPlayerStateChanged();// 0x2e706f4
	void OnPlayerEnterJumping();// 0x2e706e0
	void ManualPool();// 0x2e706cc
	void ManualPoll_Replay();// 0x2e706b8
	void LeaveSilenceMode();// 0x2e706a4
	void LeaveGhostState();// 0x2e70690
	bool LbsSpeakerEnable();// 0x2e70674
	bool LbsMicphoneEnable();// 0x2e70658
	int JoinViceRoom(FString room);// 0x2e7056c
	void JoinUgcRoom(FString roomId, FString OpenID);// 0x2e703d8
	void JoinRoom_Replay(FString room);// 0x2e702f4
	void JoinRoom(FString room, FString userId);// 0x2e70160
	void JoinLbsRoom(FString lbsRoom, FString userId);// 0x2e6ffcc
	void JoinGroupRoom(FString groupRoom, FString userId);// 0x2e6fe38
	bool IsTeamInterphoneOpenned();// 0x27324fc
	bool IsSupportLbsVoiceInRoomMode();// 0x2e6fe10
	bool IsSpeaking();// 0x2e6fde8
	bool IsSpeakerOpened_Replay();// 0x2e6fdc0
	bool IsSpeakerEnabled();// 0x2e6fd98
	bool IsRobotEnable();// 0x2e6fd70
	bool IsMicOpened_Replay();// 0x2e6fd48
	bool IsMicEnabled();// 0x2e6fd20
	bool IsMemberBeForbidVoice(FString RoomName, int memberID);// 0x2e6fbf0
	bool IsLbsInterphoneOpenned();// 0x2e6fbd4
	bool IsInterphoneMode();// 0x2e6fbac
	bool IsInRobotWhiteList();// 0x2e6fb84
	bool IsInReportCoolDown();// 0x2e6fb68
	bool IsIngameNow();// 0x2e6fb40
	bool IsGVoiceInited_Replay();// 0x2e6fb18
	bool IsGroupInterphoneOpenned();// 0x2e6fafc
	void InitGVoiceComponent_Replay(FString userId);// 0x2e6fa18
	void InitGVoiceComponent(FString userId);// 0x2e6f934
	bool HaveTeamRoom();// 0x2e6f90c
	bool HaveLbsRoom();// 0x2e6f8e4
	bool HaveGroupRoom();// 0x2e6f8bc
	bool GroupSpeakerEnable();// 0x2e6f8a0
	bool GroupMicphoneEnable();// 0x2e6f884
	bool GetVoteSilenceStatus();// 0x2e6f868
	VoiceRoomMemberInfo[] GetVoiceRoomMemberInfo_Replay(FString room);// 0x2e6f6c8
	VoiceRoomMemberInfo[] GetVoiceRoomMemberInfo(FString room, int Limit);// 0x2e6f4e4
	float GetVoiceLength();// 0x2e6f4bc
	FString GetTeamRoomName();// 0x2e6f428
	int GetSpeakerState();// 0x2e6f400
	bool GetShowReportVoiceSwitch();// 0x2e6f3d8
	int GetPlayerVolume(FString OpenID);// 0x2e6f2ec
	FString GetPlayerVoiceRoom();// 0x2e6f220
	int GetMicState();// 0x2e6f1f8
	int GetMemberVoiceID();// 0x2e6f1dc
	FString GetLbsRoomName();// 0x2e6f148
	int GetLBSRoomMemberID();// 0x2e6f12c
	int GetGvoiceLogState();// 0x2404e48
	void GetAuthKey();// 0x2e6f118
	VoiceRoomMemberInfo[] GetAllTeammateMicState();// 0x2e6f02c
	void ForbidVoiceById_Replay(FString room, int memberID, bool Enable);// 0x2e6eeb4
	void ForbidTeammateVoiceByIdLBS(int memberID, bool IsEnable);// 0x2e6edf0
	void ForbidTeammateVoiceById(int memberID, bool IsEnable);// 0x2e6ed2c
	void ForbidMemberVoiceById(FString RoomName, int memberID, bool Enable);// 0x2e6ebb4
	void EnterWerewolfKilling();// 0x2e6eba0
	void EnterSilenceMode();// 0x2e6eb8c
	void EnterGhostState();// 0x2e6eb78
	int EnableTranslate(FString RoomName, bool Enable, int Type);// 0x2e6e9f8
	void EnableRoomVoice(int member, int roomType);// 0x2e6e93c
	void EnableRoomSpeaker_Replay(FString room, bool Enable);// 0x2e6e808
	void EnableRoomMicphone_Replay(FString room, bool Enable);// 0x2e6e6d4
	void EnableCivilVoice(bool flag);// 0x2e6e654
	void EnableBluetoothSCO(bool flag);// 0x2e6e5d4
	void DownloadRecordFile();// 0x2e6e5c0
	void DisableRoomVoice(int member, int roomType);// 0x2e6e504
	void CloseSpeakerCheck(bool Force);// 0x2e6e484
	int CloseSpeaker_Replay(bool Force);// 0x2e6e3fc
	void CloseSpeaker();// 0x2e6e3e8
	int CloseMic_Replay(bool Force);// 0x2e6e360
	void CloseMic();// 0x2e6e34c
	void CloseAllSpeaker(bool ShowTips);// 0x2e6e2cc
	void CloseAllMicphone(bool ShowTips);// 0x2e6e24c
	void ChangeSpeakerStateWithRoomName(FString RoomName, bool Status);// 0x2e6e118
	void ChangeMicphoneStateWithRoomName(FString RoomName, bool Status);// 0x2e6dfe4

--------------------------------
Class: VoiceRoomMemberInfo
	FString OpenID;//[Offset: 0x0, Size: 12]
	int memberID;//[Offset: 0xc, Size: 4]
	int micstatus;//[Offset: 0x10, Size: 4]

--------------------------------
Class: LocalSettingManager.Object
	void ReloadAllSetting(UAEGameInstance* GameInstance);// 0x2e7c9d4

--------------------------------
Class: HttpHelper.Object
	void HttpGet(FString URL);// 0x2e75ce0

--------------------------------
Class: BugReporter.Object
	void SendScreenShot(FString errorReason, FString errorDescription, FString ImagePath, float X, float Y, float Z);// 0x2e576dc
	void SendLog(FString errorReason, FString errorDescription, float X, float Y, float Z, bool pullAll);// 0x2e57424
	void ReadZipLog(FString Filename);// 0x2e57340
	byte[] CompressLog(bool pullAllLog);// 0x2e5725c

--------------------------------
Class: GDolphinUpdater.Object
	bool bForceReInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	FString AppStoreUrl;//[Offset: 0x5c, Size: 12]
	bool Disable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	FString UpdateUrl;//[Offset: 0x6c, Size: 12]
	FString UpdateUrl_CE;//[Offset: 0x78, Size: 12]
	FString PreUpdateUrl;//[Offset: 0x84, Size: 12]
	FString PreUpdateUrl_CE;//[Offset: 0x90, Size: 12]
	uint32 UpdateChannel;//[Offset: 0x9c, Size: 4]
	uint32 UpdateChannelIOS;//[Offset: 0xa0, Size: 4]
	uint32 UpdateChannelIOS_CE;//[Offset: 0xa4, Size: 4]
	uint32 UpdateChannelAndroid;//[Offset: 0xa8, Size: 4]
	uint32 UpdateChannelAndroid_CE;//[Offset: 0xac, Size: 4]
	uint32 UpdateChannelIOS_PVRTC;//[Offset: 0xb0, Size: 4]
	uint32 UpdateChannelIOS_PVRTC_CE;//[Offset: 0xb4, Size: 4]
	uint32 UpdateChannelIOS_PVRTC_Shipping;//[Offset: 0xb8, Size: 4]
	bool PreUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	FString UpdateInfoPath;//[Offset: 0xc0, Size: 12]
	bool OpenDebugLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool CheckMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool bNeedFirstExtract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	FString[] FirstExtractFileList;//[Offset: 0xd0, Size: 12]
	bool EnableCDNGetVersion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc, Size: 1]
	uint32 VersionGetMode;//[Offset: 0xe0, Size: 4]
	FString Pre_CDNVersionUrl;//[Offset: 0xe4, Size: 12]
	FString CDNVersionUrl;//[Offset: 0xf0, Size: 12]
	FString[] pakFilesNeedCheckedByDolphin;//[Offset: 0xfc, Size: 12]
	void StartAppUpdate();// 0x2e6a484
	void SetCurlBufferSize(int msize);// 0x2e6a40c
	void SetCheckMap(bool CheckMap);// 0x2e6a38c
	int MountExtraPak(FString[] InToMountPakFileFullNameList);// 0x2e6a200
	void KillPakMountThread();// 0x2e6a1ec
	bool IsUpdating();// 0x2e6a1c4
	bool IsGrayUpdate();// 0x2e6a19c
	bool IsExamine();// 0x23c140c
	void Install();// 0x2e6a188
	FString GetPufferPredownloadJsonConfig();// 0x2e6a0f4
	int GetCurStage(out float percent, out int GetCurVal, out int GetMaxVal);// 0x2e69fb4
	void FinishUpdate();// 0x2e69fa0
	void ContinueUpdate();// 0x2e69f8c
	void CancelUpdate();// 0x2e69f78
	void CancelResUpdate();// 0x2e69f64
	void CancelAppUpdate();// 0x2e69f50

--------------------------------
Class: GPufferUpdater.Object
	bool DisablePuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool PufferPreUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	FString PrePufferServerUrl;//[Offset: 0x38, Size: 12]
	FString PufferServerUrl;//[Offset: 0x44, Size: 12]
	uint32 PufferProductId;//[Offset: 0x50, Size: 4]
	uint32 PufferProductIdAndroid;//[Offset: 0x54, Size: 4]
	uint32 PufferProductIdIOS;//[Offset: 0x58, Size: 4]
	uint32 PufferProductIdIOSDev;//[Offset: 0x5c, Size: 4]
	uint32 PufferProductId5S;//[Offset: 0x60, Size: 4]
	FString PufferDownloadDir;//[Offset: 0x64, Size: 12]
	bool UnmountPak(FString pakFileFullPath);// 0x2e6d2c0
	bool StopTask(uint64 TaskID);// 0x2e6d23c
	int StopMergeBinDiff(int resID);// 0x2e6d1bc
	int StopCheckPakFileMD5(int resID);// 0x2e6d13c
	int ReturnPufferTempCacheFiles_LuaState();// 0x2e6d120
	int ReturnLocalFiles_LuaState();// 0x2e6d120
	void ResumePufferUpdater();// 0x2e6d10c
	uint64 RequestFile(FString FilePath, bool ForceUpdate);// 0x2e6cfd0
	bool RemountPakFiles(FString downloadDir, FString PakPrefix);// 0x2e6ce34
	FString ReadFile(FString Filename);// 0x2e6ccf0
	void PausePufferUpdater();// 0x2e6ccdc
	int PatchPakFileFromBinDiff(const FString InPakFilenameOld, const FString InPakFilenameDiff, const FString InPakFileNew, bool bGenerateRecoredFile, bool bFast);// 0x2e6c9f4
	int MoveFile(FString fromPath, FString toPath);// 0x2e6c858
	bool MountPak(FString pakFileFullPath, uint32 pakOrder);// 0x2e6c728
	int MergeBinDiffStart(int resID, const FString InPakFilenameOld, const FString InPakFilenameDiff, const FString InPakFileNew, bool bGenerateRecoredFile, bool bFast);// 0x2e6c3f4
	void MergeBinDiffReturn(int resID, int ErrorCode);// 0x2e6c338
	bool IsInitSuccess();// 0x2e6c310
	bool IsFileReady(FString FilePath);// 0x2e6c224
	bool IsFileIdValid(FString FilePath);// 0x2e6c138
	bool IsFileExist(FString Filename, FString Extension);// 0x2e6bf9c
	FString GetPufferDownloadPath();// 0x2e6bf08
	uint32 GetInitErrorCode();// 0x2e6bee0
	uint32 GetFileSizeCompressed(FString FilePath);// 0x2e6bdf4
	float GetFileSize(FString Filename);// 0x2e6bd08
	bool DeleteFile(FString FileFullPath);// 0x2e6bc1c
	int CheckPakFileStart(int resID, const FString ToCheckPakFileName);// 0x2e6bae8
	void CheckPakFileReturn(int resID, FString retMD5);// 0x2e6b9bc
	bool CheckBinDiffPakFileMD5(const FString InPakFilenameNew, FString Extension, const FString InPakFilenameNewMD5);// 0x2e6b770

--------------------------------
Class: CustomMapManager.Object
	delegate OnMapStatusUpdated;//[Offset: 0x1c, Size: 12]
	void UpdateMap(FString InUrl, FString InMapId, FString InSaveFileName, int InTargetSize, FString InMapServerHash, FString InMapServerVer);// 0x2e5d4dc
	int UnmountMaps();// 0x2e5d4b4
	bool UnmountMap(FString InMapId);// 0x2e5d41c
	bool UninstallMap(FString InMapId);// 0x2e5d384
	void StopUpdate(FString InMapId);// 0x2e5d2f4
	void StopAllUpdate();// 0x2e5d2e0
	void OnUnzipFinished(FString InMapId, bool bSuccess);// 0x2e5d204
	void OnCheckHashFinished(FString InMapId, FString InHash, bool bNotifyError);// 0x2e5d0cc
	int MountMaps();// 0x2e5d0a4
	bool MountMap(FString InMapId);// 0x2e5d00c
	void MarkPendingMount(FString InMapId);// 0x2e5cf7c
	bool IsUpdating(FString InMapId);// 0x2e5cee4
	<FString,FString> GetLocalMapVersions();// 0x2e5ce10
	FString GetLastMountMapId();// 0x2e5cd7c
	FString GetLastMountId();// 0x2e5cce8
	bool DeleteMap(FString InMapId);// 0x2e5cc50
	void ClearPendingMount();// 0x2e5cc3c
	bool CheckMap(FString InMapId, FString InMapPakName, FString InMapServerHash, FString InMountId, FString InMapServerVer);// 0x2e5ca2c

--------------------------------
Class: UGCActorLuaManager.Object

--------------------------------
Class: ReplayManager.Object
	delegate OnReplayStatusUpdated;//[Offset: 0x1c, Size: 12]
	delegate OnPlayReplayEvent;//[Offset: 0x28, Size: 12]
	void StopDownload(FString InReplayId);// 0x2e86048
	void StopAllDownload();// 0x2e86034
	bool PlayReplay(FString InReplayFilename);// 0x2e85f9c
	bool IsDownloading(FString InReplayId);// 0x2e85f04
	void DownloadReplay(FString InUrl, FString InReplayId, int InIndex, FString InSaveFileName, int InTargetSize);// 0x2e85d2c
	bool DeleteReplay(FString InReplayFilename);// 0x2e85c94
	enum CheckReplayStatus(FString InReplayId, int InIndex, FString InFileName);// 0x2e85b5c
	void CancelDownload(FString InReplayId);// 0x2e85acc

--------------------------------
Class: LuaStateWrapper.Object
	void StatEnd(FString TagName);// 0x24b72e0
	void StatBegin(FString TagName);// 0x24b72e0
	static int[] GetTestingValue(FString InTableName, int InKey);// 0x542a4bc
	static FString[] GetTableStrKeys(FString InTableName);// 0x542a378
	static int[] GetTableKeys(FString InTableName);// 0x542a290
	static bool GetLuaTableValueWithStrKey(FString InTableName, FString InKey, ScriptStruct* InStruct, out TableRowBase OutRow);// 0x5429c18
	static bool GetLuaTableValueWithIntKey(FString InTableName, int InKey, ScriptStruct* InStruct, out TableRowBase OutRow);// 0x54295cc
	static int[] GetAvatarTestingValue(int InKey);// 0x54294f8
	static int[] GetAvatarTestingKeys();// 0x542946c

--------------------------------
Class: GCloudLoginAccountInfo
	int loginChannel;//[Offset: 0x0, Size: 4]
	FString OpenID;//[Offset: 0x4, Size: 12]
	FString OpenKey;//[Offset: 0x10, Size: 12]
	FString PayToken;//[Offset: 0x1c, Size: 12]
	FString Pf;//[Offset: 0x28, Size: 12]
	FString PfKey;//[Offset: 0x34, Size: 12]

--------------------------------
Class: TssManager.Object
	int SendSkdData_LuaState();// 0x2e6d120
	int SendEigeninfoData_LuaState();// 0x2e6d120
	int OnRecvData_LuaState();// 0x2e6d120

--------------------------------
Class: GCloudMidasManager.Object
	delegate MidasInitCallbackDelegate;//[Offset: 0x20, Size: 12]
	delegate PayNeedLoginDelegate;//[Offset: 0x2c, Size: 12]
	delegate PayCallBackDelegate;//[Offset: 0x38, Size: 12]
	delegate LauchMpInfoCallbackDelegate;//[Offset: 0x44, Size: 12]
	interface class * midasInterface;//[Offset: 0x50, Size: 8]
	FString payEnvironment;//[Offset: 0x58, Size: 12]
	int CurrentPayItem;//[Offset: 0x64, Size: 4]
	bool bIsFirstPresent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	<int,int> PresentLevel;//[Offset: 0x6c, Size: 60]
	bool bLauchedMpInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	void UnRegisterPay();// 0x2374dbc
	void SetPayEnvironment(FString Environment);// 0x5557df4
	void RegisterPay(int Platform, FString offerID, FString OpenID, FString OpenKey, FString Pf, FString PfKey, FString ZoneID);// 0x5557940
	void RefreshPay(FString OpenID, FString OpenKey);// 0x5554294
	void Pay(FString ZoneID, int payItem, FString ProductID);// 0x55540b0
	void OnMidasPayNeedLogin();// 0x2384e20
	void OnMidasPayCallBack(out const APPayResponseInfo Info);// 0x555784c
	void OnMidasLauchMpInfoCallBack(int resultCode, FString resultString);// 0x5557718
	void OnMidasInitCallBack(FString resultString);// 0x555762c
	void MonthPay(out const APMonthPayInfo Info);// 0x5553fcc
	void LauchMpInfo(FString ZoneID);// 0x5553ee0
	bool IsPayEnable();// 0x23849a0
	bool IsFirstPresent();// 0x248bf98
	void Initialize();// 0x5557618
	void GoodsPay(out const APGoodsPayInfo Info);// 0x5553dc4
	<int,int> GetPresentInfo();// 0x55575e0
	int GetPresentCount(int payItem);// 0x5557558
	FString GetPayEnvironment();// 0x555748c
	bool CheckIfNeedRegisterPay(FString offerID, FString OpenID, FString OpenKey);// 0x5557238

--------------------------------
Class: APPayResponseInfo
	int resultCode;//[Offset: 0x0, Size: 4]
	int payState;//[Offset: 0x4, Size: 4]
	int provideState;//[Offset: 0x8, Size: 4]
	int netState;//[Offset: 0xc, Size: 4]
	int realSaveNum;//[Offset: 0x10, Size: 4]
	int payItem;//[Offset: 0x14, Size: 4]
	FString payChannel;//[Offset: 0x18, Size: 12]
	FString ResultMsg;//[Offset: 0x24, Size: 12]
	FString resultInerCode;//[Offset: 0x30, Size: 12]
	bool isReprovide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	FString billno;//[Offset: 0x40, Size: 12]

--------------------------------
Class: APMonthPayInfo
	FString offerID;//[Offset: 0x0, Size: 12]
	FString Pf;//[Offset: 0xc, Size: 12]
	bool bSubscribe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool autoPay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	FString ZoneID;//[Offset: 0x1c, Size: 12]
	int saveValue;//[Offset: 0x28, Size: 4]
	FString ProductID;//[Offset: 0x2c, Size: 12]
	FString serviceCode;//[Offset: 0x38, Size: 12]
	FString serviceName;//[Offset: 0x44, Size: 12]
	FString remark;//[Offset: 0x50, Size: 12]
	FString extras;//[Offset: 0x5c, Size: 12]
	FString reserv;//[Offset: 0x68, Size: 12]
	FString drmInfo;//[Offset: 0x74, Size: 12]
	FString payChannel;//[Offset: 0x80, Size: 12]
	int serviceType;//[Offset: 0x8c, Size: 4]

--------------------------------
Class: APGoodsPayInfo
	FString offerID;//[Offset: 0x0, Size: 12]
	FString Pf;//[Offset: 0xc, Size: 12]
	FString PfKey;//[Offset: 0x18, Size: 12]
	FString ZoneID;//[Offset: 0x24, Size: 12]
	FString goodsZoneID;//[Offset: 0x30, Size: 12]
	int payItem;//[Offset: 0x3c, Size: 4]
	int saveValue;//[Offset: 0x40, Size: 4]
	FString ProductID;//[Offset: 0x44, Size: 12]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: CustomSettingSaveGame
	FString LayoutSlotName;//[Offset: 0x0, Size: 12]
	SaveGame* SaveGame;//[Offset: 0xc, Size: 4]

--------------------------------
Class: ImageDownloader.Object
	delegate OnSuccess;//[Offset: 0x1c, Size: 12]
	delegate OnFail;//[Offset: 0x28, Size: 12]
	FString FileURL;//[Offset: 0x34, Size: 12]
	FString FileSavePath;//[Offset: 0x40, Size: 12]
	FString UrlHash;//[Offset: 0x4c, Size: 12]
	bool InvalidImageFormat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool SaveDiskFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	bool LoadDiskImageAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a, Size: 1]
	void Start(FString URL);// 0x2e765c0
	static void SetSubDirTime(int sec);// 0x2e76550
	static void SetRootDir(FString rootDir);// 0x2e76474
	static void ResetSubDirTime();// 0x2e76460
	static void ResetRootDir();// 0x2e7644c
	void OnLoadImageCompleted(const ASyncLoadFileLoader* Loader, int InParam);// 0x2e76390
	static ImageDownloader* MakeDownloaderInGame();// 0x2e76368
	static ImageDownloader* MakeDownloader();// 0x2e76340
	void ImageDownloaderDelegate__DelegateSignature(Texture2D* Texture, ImageDownloader* ImageDownloader);// 0x46f6b154
	FString GetImageSavePath(FString URL);// 0x2e761fc
	static bool CopyCacheFileFromUrl(FString UrlTo, FString UrlFrom);// 0x2e76068

--------------------------------
Class: ASyncLoadFileLoader.Object
	byte[] ReadBufferData;//[Offset: 0x1c, Size: 12]
	FString CacheFilePath;//[Offset: 0x28, Size: 12]
	FString ReadBufferString;//[Offset: 0x34, Size: 12]
	void OnLoadCompleted(bool InResult);// 0x2384eec
	bool LoadFileToByteFromDisk(FString FilePath);// 0x2867cb0
	void LoadFileAsync(FString FilePath);// 0x2867c18

--------------------------------
Class: NativeHUDTickContainer
	int WidgetIndex;//[Offset: 0x0, Size: 4]
	UAEUserWidget* pWidget;//[Offset: 0x4, Size: 8]

--------------------------------
Class: WebviewInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	FString Reason;//[Offset: 0x4, Size: 12]
	int Extend;//[Offset: 0x10, Size: 4]
	int Extend2;//[Offset: 0x14, Size: 4]
	FString MsgData;//[Offset: 0x18, Size: 12]

--------------------------------
Class: WakeupInfoWrapper

--------------------------------
Class: LocationInfoWrapper
	int ErrorCode;//[Offset: 0x0, Size: 4]
	double Longitude;//[Offset: 0x8, Size: 8]
	double Latitude;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GroupInfoWrapper
	int SnsAction;//[Offset: 0x0, Size: 4]
	int flag;//[Offset: 0x4, Size: 4]
	int ErrorCode;//[Offset: 0x8, Size: 4]
	int Platform;//[Offset: 0xc, Size: 4]
	FString Desc;//[Offset: 0x10, Size: 12]
	WechatGroupInfomation wechatGroupInfo;//[Offset: 0x1c, Size: 36]

--------------------------------
Class: WechatGroupInfomation
	FString OpenIdList;//[Offset: 0x0, Size: 12]
	FString MemberNum;//[Offset: 0xc, Size: 12]
	FString ChatRoomURL;//[Offset: 0x18, Size: 12]

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	void GetLimitPickCountWithId(GameFrontendHUD* GameFrontendHUD, int ID, out int Count, int SearchID, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3, int CallFunc_GetIntSettingConfig_ReturnValue);// 0x46f6b154
	int CrossHairColor;//[Offset: 0x20, Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]
	int LeftHandFire;//[Offset: 0x28, Size: 4]
	int Gyroscope;//[Offset: 0x2c, Size: 4]
	int ArtQuality;//[Offset: 0x30, Size: 4]
	float ViewPercentage;//[Offset: 0x34, Size: 4]
	int fireMode;//[Offset: 0x38, Size: 4]
	int VehicleControlMode;//[Offset: 0x3c, Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	int CameraLensSensibility;//[Offset: 0x44, Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x48, Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c, Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x50, Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x54, Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x58, Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x5c, Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60, Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64, Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x68, Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c, Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x70, Size: 4]
	int GyroscopeSensibility;//[Offset: 0x74, Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78, Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c, Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x80, Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x84, Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x88, Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	float MainVolumValue;//[Offset: 0x90, Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	float EffectVolumValue;//[Offset: 0x98, Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	float UIVolumValue;//[Offset: 0xa0, Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 1]
	float BGMVolumValue;//[Offset: 0xa8, Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac, Size: 1]
	int VoiceChannel;//[Offset: 0xb0, Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	float MicphoneVolumValue;//[Offset: 0xb8, Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	float SpeakerVolumValue;//[Offset: 0xc0, Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 1]
	int LimitBandage;//[Offset: 0xc8, Size: 4]
	int LimitMedical;//[Offset: 0xcc, Size: 4]
	int LimitAnodyne;//[Offset: 0xd0, Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xd4, Size: 4]
	int LimitAdrenaline;//[Offset: 0xd8, Size: 4]
	int LimitFirstAidKit;//[Offset: 0xdc, Size: 4]
	int LimitShouliudan;//[Offset: 0xe0, Size: 4]
	int LimitYanwudan;//[Offset: 0xe4, Size: 4]
	int LimitZhenbaodan;//[Offset: 0xe8, Size: 4]
	int LimitRanshaodan;//[Offset: 0xec, Size: 4]
	int LimitBullet9mm;//[Offset: 0xf0, Size: 4]
	int LimitBullet7_62mm;//[Offset: 0xf4, Size: 4]
	int Limit12koujing;//[Offset: 0xf8, Size: 4]
	int Limit45koujing;//[Offset: 0xfc, Size: 4]
	int Limit300magenandanyao;//[Offset: 0x100, Size: 4]
	int Limitbolt;//[Offset: 0x104, Size: 4]
	int LimitBullet5;//[Offset: 0x108, Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	int FPSLevel;//[Offset: 0x110, Size: 4]
	int ArtStyle;//[Offset: 0x114, Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x118, Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x11c, Size: 60]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x158, Size: 60]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194, Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195, Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x196, Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x198, Size: 60]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4, Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0x1d8, Size: 12]
	int[] ChatOptiongList1;//[Offset: 0x1e4, Size: 12]
	int LRShootMode;//[Offset: 0x1f0, Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5, Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f6, Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x1f8, Size: 12]
	int[] ChatOptiongList3;//[Offset: 0x204, Size: 12]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 1]
	float 3DTouchValue;//[Offset: 0x214, Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	int ShotGunShootMode;//[Offset: 0x21c, Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x220, Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x224, Size: 4]
	float VehicleEye;//[Offset: 0x228, Size: 4]
	float ParachuteEye;//[Offset: 0x22c, Size: 4]
	int RepeatingWeaponShootMode;//[Offset: 0x230, Size: 4]
	int DrivingViewMode;//[Offset: 0x234, Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	int FpViewValue;//[Offset: 0x23c, Size: 4]
	float CamFpFreeEye;//[Offset: 0x240, Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x244, Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x248, Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x24c, Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x254, Size: 4]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 1]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25a, Size: 1]
	bool HasReportMomentFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25b, Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x25c, Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x260, Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x264, Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x268, Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x26c, Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x270, Size: 4]
	bool BackgroundMusicModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274, Size: 1]
	bool VoiceModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275, Size: 1]
	int RedDotCHColor;//[Offset: 0x278, Size: 4]
	int RedDotCHType;//[Offset: 0x27c, Size: 4]
	int HolographicCHColor;//[Offset: 0x280, Size: 4]
	int HolographicCHType;//[Offset: 0x284, Size: 4]
	int Sinper2xCHColor;//[Offset: 0x288, Size: 4]
	int Sinper2xCHType;//[Offset: 0x28c, Size: 4]
	<int,int> PickUpCountSetting;//[Offset: 0x290, Size: 60]
	int SelectUIElemIndex1;//[Offset: 0x2cc, Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x2d0, Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x2d4, Size: 4]
	int Sniper3xCHColor;//[Offset: 0x2d8, Size: 4]
	int Sniper3xCHType;//[Offset: 0x2dc, Size: 4]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2, Size: 1]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e3, Size: 1]
	int SidewaysMode;//[Offset: 0x2e4, Size: 4]
	int OpenMirrorMode;//[Offset: 0x2e8, Size: 4]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed, Size: 1]
	bool ProfiledScreenSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee, Size: 1]
	float ScreenLightness;//[Offset: 0x2f0, Size: 4]
	int SoundQualityType;//[Offset: 0x2f4, Size: 4]
	int LimitSniper2X;//[Offset: 0x2f8, Size: 4]
	int LimitSniper3X;//[Offset: 0x2fc, Size: 4]
	int LimitSniper4X;//[Offset: 0x300, Size: 4]
	int LimitSniper6X;//[Offset: 0x304, Size: 4]
	int LimitSniper8X;//[Offset: 0x308, Size: 4]
	bool IsProfiledScreenModified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	int BuildDoubleClick;//[Offset: 0x310, Size: 4]
	float DoubleClickSpeed;//[Offset: 0x314, Size: 4]
	int DoubleClickDistance;//[Offset: 0x318, Size: 4]
	int FirstTime_BuildModeMax;//[Offset: 0x31c, Size: 4]
	int FirstTime_BuildModeCnt;//[Offset: 0x320, Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	float CamSenBuildFp;//[Offset: 0x328, Size: 4]
	float CamSenBuildTp;//[Offset: 0x32c, Size: 4]
	bool ShowGameRemarkName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	bool OneKeyScopeFire_TeamAthleticsMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331, Size: 1]
	bool OneKeyScopeFire_OtherMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332, Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x334, Size: 4]
	int ProfiledScreenValue;//[Offset: 0x338, Size: 4]
	int ScoreTips_TModeCnt;//[Offset: 0x33c, Size: 4]
	bool EnableBluetoothSCO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	bool EmulatorLocalInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	int SurviveModeTips_Count;//[Offset: 0x344, Size: 4]
	bool FirstTime_EnterLiveMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	int FirstTime_LiveModeCount;//[Offset: 0x34c, Size: 4]
	float BuildDoubleClickDuration;//[Offset: 0x350, Size: 4]
	int SideMirrorMode;//[Offset: 0x354, Size: 4]
	bool isFirstShowOnceMoreGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool OneKeyScoreFire_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	int Gyroscope_TA;//[Offset: 0x35c, Size: 4]
	int OpenMirrorMode_TA;//[Offset: 0x360, Size: 4]
	bool LeftRightShoot_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	int SidewaysMode_TA;//[Offset: 0x368, Size: 4]
	bool AimAssist_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	bool LRShootSniperSwitch_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d, Size: 1]
	int FireMode_TA;//[Offset: 0x370, Size: 4]
	bool 3DTouchSwitcher_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	float 3DTouchValue_TA;//[Offset: 0x378, Size: 4]
	int SelectUIElemIndex1_TA;//[Offset: 0x37c, Size: 4]
	int SelectUIElemIndex2_TA;//[Offset: 0x380, Size: 4]
	int SelectUIElemIndex3_TA;//[Offset: 0x384, Size: 4]
	bool EmulatorLocalInit_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	bool FirstTime_ColdMode_HasEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool FirstTime_ColdMode_UseLighter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	int HitEffect_Type;//[Offset: 0x38c, Size: 4]
	int HitEffect_Color;//[Offset: 0x390, Size: 4]
	int SignalPushCount;//[Offset: 0x394, Size: 4]
	int LimitLargeSignalBattery;//[Offset: 0x398, Size: 4]
	int LimitSmallSignalBattery;//[Offset: 0x39c, Size: 4]
	bool IsProfiledScreenModified_cg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool AutoPickupSideMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool isShowHitEffectRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool UniversalSignSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	int SignalPushCount2;//[Offset: 0x3a4, Size: 4]
	bool isCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool isCloudPickupUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	bool RotateViewWithPeekSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 1]
	bool RotateViewWithSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 1]
	bool AutoPickMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	bool AllowAddFriendInTraining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 1]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ae, Size: 1]
	FString CloudSensitivityPlayerId;//[Offset: 0x3b0, Size: 12]
	FString CloudPickupPlayerId;//[Offset: 0x3bc, Size: 12]
	int Training_FTTCount;//[Offset: 0x3c8, Size: 4]
	int ShovelSwitchType_TA;//[Offset: 0x3cc, Size: 4]
	bool OBS_HitText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	bool UseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 1]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2, Size: 1]
	float UAVSpeedPercent;//[Offset: 0x3d4, Size: 4]
	float UAVScopePercent;//[Offset: 0x3d8, Size: 4]
	bool DeathPlaybackSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	bool OpenUAVHelicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dd, Size: 1]
	bool AutoEquipAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3de, Size: 1]
	bool UAVSingleOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3df, Size: 1]
	int SideMirrorType;//[Offset: 0x3e0, Size: 4]
	int SideMirrorColor;//[Offset: 0x3e4, Size: 4]
	bool DynamicHoldGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool HelicopterSingOperate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	bool OBS_SmokeGrenadeAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 1]
	bool OBS_SmokeGrenadeCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb, Size: 1]
	bool PCGVoiceRobotSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool canShowVulkanRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	<int,FString> IDToSettingKeyMap;//[Offset: 0x3f0, Size: 60]
	bool ChangeSeatAccurately;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	bool bIsSprHghQltyFirstShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42d, Size: 1]
	int LimitRedDotHolographic;//[Offset: 0x430, Size: 4]
	bool bOpenSprHghQltyComparison;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 1]
	int SprHghQltyMountStatusInBattle;//[Offset: 0x438, Size: 4]
	bool bIsOpenTaskUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	bool TeamReplaySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d, Size: 1]
	FString CurrentUsingSensitivityName;//[Offset: 0x440, Size: 12]
	bool isOtherCloudSensitivityUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	int RecordWXGameTipsShowTimes;//[Offset: 0x450, Size: 4]
	bool bOpenCostSpecMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454, Size: 1]
	bool isCloudAndLocalSame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455, Size: 1]
	bool bIsOpenCampUIInComfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x456, Size: 1]
	int NewLimitRedDotHolographic;//[Offset: 0x458, Size: 4]
	bool OBS_TeamLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	bool OBS_ShootingLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d, Size: 1]
	int LastOpenedMapExUI;//[Offset: 0x460, Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	bool QuickThrowPressSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x465, Size: 1]
	bool EliteReportSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x466, Size: 1]
	int FpsLevel_TA;//[Offset: 0x468, Size: 4]
	bool OBS_IngameLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c, Size: 1]
	bool OBS_MiniMapLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46d, Size: 1]
	bool OBS_IsInitMiniMapLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46e, Size: 1]
	bool CanshowVerySmoothRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46f, Size: 1]
	bool OBS_ShowOwnWeaponKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	bool CrouchShovel_TA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471, Size: 1]
	bool AKMAutoMirror;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472, Size: 1]
	bool ReportUncivilVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x473, Size: 1]
	bool RobotNotifyMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	bool RobotVoiceAssit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x475, Size: 1]
	<int,int> PickUpCountIDMap;//[Offset: 0x478, Size: 60]
	byte RenderQualityTA;//[Offset: 0x4b4, Size: 1]
	bool InterruptReloadSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b5, Size: 1]
	bool IsTASettingModifiled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b6, Size: 1]
	int GunMasterMediaPlayCounter;//[Offset: 0x4b8, Size: 4]
	int TpViewValue;//[Offset: 0x4bc, Size: 4]
	int PickUpListPanel_GirdSwitch;//[Offset: 0x4c0, Size: 4]
	int FireGyroscopeSensibility;//[Offset: 0x4c4, Size: 4]
	float FireGyroscopeSenNoneSniper;//[Offset: 0x4c8, Size: 4]
	float FireGyroscopeSenRedDotSniper;//[Offset: 0x4cc, Size: 4]
	float FireGyroscopeSen2XSniper;//[Offset: 0x4d0, Size: 4]
	float FireGyroscopeSen4XSniper;//[Offset: 0x4d4, Size: 4]
	float FireGyroscopeSen8XSniper;//[Offset: 0x4d8, Size: 4]
	float FireGyroscopeSen3XSniper;//[Offset: 0x4dc, Size: 4]
	float FireGyroscopeSen6XSniper;//[Offset: 0x4e0, Size: 4]
	int XaxisInversionSwitch;//[Offset: 0x4e4, Size: 4]
	int InterruptReloadType;//[Offset: 0x4e8, Size: 4]
	float FireGyroscopeSenNoneSniperFp;//[Offset: 0x4ec, Size: 4]
	bool ReflectionSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	int CharactorVibrationLevel;//[Offset: 0x4f4, Size: 4]
	int WeaponVibrationLevel;//[Offset: 0x4f8, Size: 4]
	int VehicleVibrationLevel;//[Offset: 0x4fc, Size: 4]
	int SoundVibrationLevel;//[Offset: 0x500, Size: 4]
	bool VibraCharaBeHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool VibraCharaClimb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 1]
	bool VibraCharaFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x506, Size: 1]
	bool VibraCharaSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x507, Size: 1]
	bool VibraWeaponFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool VibraWeaponReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 1]
	bool VibraVehicleEngine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a, Size: 1]
	bool VibraVehicleBeHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50b, Size: 1]
	bool VibraVehicleCrash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool VibraSoundFootstep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	bool VibraSoundGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50e, Size: 1]
	bool VibraSoundGlassBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50f, Size: 1]
	bool VibraSoundVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	bool FocalLengthModifySwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 1]
	int EntireVibrationLevel;//[Offset: 0x514, Size: 4]
	bool VibraWeaponAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	bool VibraWeaponBolt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519, Size: 1]
	bool VibraWeaponSemiAuto;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51a, Size: 1]
	bool VibraWeaponOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51b, Size: 1]
	bool OBS_NationalFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c, Size: 1]
	<FString,int> UGCFireMode;//[Offset: 0x520, Size: 60]

--------------------------------
Class: BP_STRUCT_EmoteBPTable_type
	int ID_0_6D1FE5C03D4B9B6365DA363A01FBC3D4;//[Offset: 0x0, Size: 4]
	FString CName_2_20BFF38058E1993E3181765E0C385985;//[Offset: 0x4, Size: 12]
	FString Path_1_247605C000C1809320361CC70BC26958;//[Offset: 0x10, Size: 12]
	FString BubblePath_4_7AC698C02A95DB9F0A5BB30F04E9F2D8;//[Offset: 0x1c, Size: 12]
	int IsEffectMotion_5_561B224075CE1BF31C11FB680F81A1FE;//[Offset: 0x28, Size: 4]
	FString EffectPath_6_7ADB99001CA8080E5410E41B006AD598;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponScopeFOV_type
	FString ScopeGroupID_18_68B80FCB4411AF255D0165A5B6DA0F37;//[Offset: 0x0, Size: 12]
	float ScopeFov_f_22_6553D3C0033D7BFF701FD78D06949766;//[Offset: 0xc, Size: 4]
	int AimedAngle_23_3E02AB0072EDDA440E9C5E950B8A5745;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BattleInteractiveDataStruct
	int SkillIndex_2_1D6468514D718E7627333080FB209A4A;//[Offset: 0x0, Size: 4]
	FText IconName_6_22CFFB1A44CD620353D81E87883E0DA7;//[Offset: 0x4, Size: 12]
	SlateBrush Image_9_01E299E646738D7FC060038B27EF9890;//[Offset: 0x10, Size: 104]
	float CDTime_12_BC8E32844653869F92AF27AFA2C8A0B2;//[Offset: 0x78, Size: 4]
	enum[] DisallowedPawnState_16_ACA978204905C4EF34088B9F68648767;//[Offset: 0x7c, Size: 12]
	bool TriggerActivityFromSkillAction_18_BFD8BC9C41BC0FA191B542862807C9F0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]

--------------------------------
Class: BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x33d0, Size: 4]
	void StopReadyAkEvent();// 0x46f6b154
	void CampSetPlaneData(Vector StartPos, Vector TargetPos);// 0x46f6b154
	void ShowTouchInterface_bp(bool bShow, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, Actor* CallFunc_GetViewTarget_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_ActorHasTag_ReturnValue, bool CallFunc_NotEqual_BoolBool_ReturnValue);// 0x46f6b154
	void GetGlobalConfig(out BP_GlobalConfig_C* Config, BP_GlobalConfig_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Array_IsValidIndex_ReturnValue, BP_GlobalConfig_C* CallFunc_Array_Get_Item);// 0x46f6b154
	bool IsTeamAssembleDisplayLevelLoaded(bool CallFunc_IsValid_ReturnValue, LevelStreaming* CallFunc_GetStreamingLevel_ReturnValue, bool CallFunc_IsLevelLoaded_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x46f6b154
	void AddIgnoreCameraMoveIndex(byte Index, int CallFunc_Array_AddUnique_ReturnValue);// 0x46f6b154
	void InitJoystickBindSetting(bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x46f6b154
	void GetFireModeByGameMode(out int fireMode, FString CallFunc_GetUGCMountId_ReturnValue, bool CallFunc_IsUGCGame_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x46f6b154
	FString GetRemarkNameByGID(FString actorName, FString actorUID, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FString CallFunc_GetRemarkNameByGID_ReturnValue);// 0x46f6b154
	void ReadEmoteDataRowPC(UAEDataTable* NewLocalVar);// 0x46f6b154
	void AddTestCompont(Transform Temp_struct_Variable, Transform Temp_struct_Variable2, AutoTestInterface* CallFunc_AddComponent_ReturnValue, AutoRunTest* CallFunc_AddComponent_ReturnValue2, Transform Temp_struct_Variable3, bool CallFunc_IsAutoRunTestGameBindCompoment_ReturnValue, AutoTestInterface* CallFunc_AddComponent_ReturnValue3, FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x46f6b154
	void IsAtaptation(out bool adaptation);// 0x46f6b154
	void ReadAdaptationTable(bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, UIAdaptationStructure CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x46f6b154
	void InitWeather(GlobalConfigActor*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_Array_IsValidIndex_ReturnValue, GlobalConfigActor* CallFunc_Array_Get_Item);// 0x46f6b154
	void GetStickLeftSize(out Vector2D Size, Vector2D CallFunc_GetJoyStickCenter_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x46f6b154
	void ShowFightingUI();// 0x46f6b154
	void ShowAutoSprintBtn(bool Visible, Vector2D showPos_, bool inside, Vector iPhoneXWidgetOffset, Vector2D TouchPos);// 0x46f6b154
	void ReadConfigCrossHairColor(int NewParam, int Temp_int_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable2, LinearColor Temp_struct_Variable3, LinearColor Temp_struct_Variable4, LinearColor Temp_struct_Variable5, LinearColor Temp_struct_Variable6, LinearColor Temp_struct_Variable7, LinearColor Temp_struct_Variable8, LinearColor Temp_struct_Variable9, LinearColor Temp_struct_Variable10, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_Select_Default);// 0x46f6b154
	void ReadConfigMotionControl(int NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void ReadConfigAutoAim(bool NewParam, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void ReadConfigFromHUD(GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool CallFunc_IsValid_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, bool CallFunc_Conv_IntToBool_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue2);// 0x46f6b154
	void MakeFireModeEffect(BP_SAVEGAME_UIElemLayout_C* CallFunc_LoadUIElemLayoutSG_UIElemSaveGame, bool K2Node_SwitchInteger_CmpSuccess);// 0x46f6b154
	void DebugNotDrawGuideLine();// 0x46f6b154
	void ShowBackpackTombBox(bool Show);// 0x46f6b154
	void BindOrUnBindJoyStickSprint(bool IsBind);// 0x46f6b154
	void CreateRank(int Kills, int Rank);// 0x46f6b154
	void DisableAimIfUnEquipWeapon(byte WeaponType);// 0x46f6b154
	void SwitchAimMode();// 0x46f6b154
	void DoInitUI(bool CallFunc_IsInFight_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, HUD* CallFunc_GetHUD_ReturnValue, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalPlayerController_ReturnValue);// 0x46f6b154
	void HandleJumpBtnPressEvent();// 0x46f6b154
	void OnRep_bInCar();// 0x46f6b154
	void UpdateInputPanel(FName Target);// 0x46f6b154
	void ShowBackpackIconSplash(bool bShow);// 0x46f6b154
	void RefreshWeaponPanel();// 0x46f6b154
	void SetTouchInputEnabled(bool bEnabled);// 0x46f6b154
	void ShowMainInputControl(bool bShow);// 0x46f6b154
	void EnableDeathGray(float BlendWeight, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x46f6b154
	void SetDeathGrayLerpValue(float Lerp);// 0x46f6b154
	void SetPostProcessVolume(Actor*[] CallFunc_GetActorsByTag_Targets, int CallFunc_Array_Length_ReturnValue, Actor* CallFunc_Array_Get_Item, bool CallFunc_Greater_IntInt_ReturnValue, PostProcessVolume* K2Node_DynamicCast_AsPost_Process_Volume, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	void GrayToOne__FinishedFunc();// 0x46f6b154
	void GrayToOne__UpdateFunc();// 0x46f6b154
	void GrayToZero__FinishedFunc();// 0x46f6b154
	void GrayToZero__UpdateFunc();// 0x46f6b154
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x46f6b154
	void InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent(Key Key);// 0x46f6b154
	void OnShowAnimationButton(bool isShow, int NewUIType);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void OnSpectatorCameraChange(bool bDie);// 0x46f6b154
	void OnStopFireEventHandle();// 0x46f6b154
	void OnSwitchCameraSatrtHandle(byte CameraMode);// 0x46f6b154
	void OnPlayerPutDownActorHandle(STExtraBaseCharacter* TargetPlayer, Actor* TargetActor);// 0x46f6b154
	void OnSwitchWeaponHandle();// 0x46f6b154
	void OnUseInventoryitemHandle();// 0x46f6b154
	void ServerAfterLand();// 0x46f6b154
	void ClientAfterLand();// 0x46f6b154
	void GameStart();// 0x46f6b154
	void RemoveWeaponAim(byte Slot);// 0x46f6b154
	void SetMoveableAirborne(bool NewParam);// 0x46f6b154
	void OnLandOnGroundAfterJumpPlaneEnd();// 0x46f6b154
	void JoystickTriggerSprint(bool bIsSprint);// 0x46f6b154
	void OnPlane();// 0x46f6b154
	void SetPanels(out const UAEUserWidget*[] panels);// 0x46f6b154
	void InitOprate();// 0x46f6b154
	void OnFiremodeChange(int IntValue);// 0x46f6b154
	void PressFire(int FingerIndex);// 0x46f6b154
	void ShowFireBtn(bool bShow);// 0x46f6b154
	void PressGrenade(bool isThrow);// 0x46f6b154
	void InitJoyStickAfterActivation();// 0x46f6b154
	void MemberVoice(int member, int Status, bool isRobot);// 0x46f6b154
	void ReceiveClientRestart();// 0x46f6b154
	void OnWeaponEquipAttachment(byte WeaponPropSlot, out const ItemDefineID DefineID, bool bEquip);// 0x46f6b154
	void ResetMissingUIUpdate();// 0x46f6b154
	void MotionControliOS(Vector AxisValue);// 0x46f6b154
	void InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent(Vector AxisValue);// 0x46f6b154
	void MotionControlAndroidTick();// 0x46f6b154
	void MotionControlAndroid(Vector AxisValue);// 0x46f6b154
	void ReceiveBackpackComponent();// 0x46f6b154
	void InitWallFeedBack();// 0x46f6b154
	void InitNewbieComponent(out const int[] FinishedGuide, out const int[] FinishedCounts, int PlayerLevel, int PlayerExperienceType);// 0x46f6b154
	void DebugOpenGuide();// 0x46f6b154
	void BP_OceanSideDetected(out const Vector OceansideLocation, bool bDetectedRiver);// 0x46f6b154
	void CallShowTouchInterface(bool InShow);// 0x46f6b154
	void OnGameModeStateChanged();// 0x46f6b154
	void OnRespawnController(UAEPlayerController* PlayerController);// 0x46f6b154
	void OnLocalSettingChanged();// 0x46f6b154
	void DebugSetUIVisibility(bool bUIVisibility);// 0x46f6b154
	void OnRep_InWateringRangeBP();// 0x46f6b154
	void OnEnableTeamAssembleDisplayView(bool IsEnable);// 0x46f6b154
	void OnTeamAssembleViewChanged(bool IsEnable);// 0x46f6b154
	void ChangedTeamAssembleLightState(bool IsVisible);// 0x46f6b154
	void TeamViewEvent(bool bIsEnable);// 0x46f6b154
	void ChangeLightVisibility(SceneComponent* LightComp, bool IsVisible);// 0x46f6b154
	void OnViewPlane();// 0x46f6b154
	void ShowTouchInterface(bool bShow);// 0x46f6b154
	void MemberVoiceLBS(int member, int Status, bool isRobot);// 0x46f6b154
	void SendServerSpawnEmoteActor(STExtraPlayerCharacter* InPlayerCharacter, class Object InClass);// 0x46f6b154
	void OnPlayerEnterJumpingEvent();// 0x46f6b154
	void ExecuteUbergraph_BP_STExtraPlayerController(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, int Temp_int_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable2, byte Temp_byte_Variable3, byte Temp_byte_Variable4, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5, int Temp_int_Variable2, delegate K2Node_CreateDelegate_OutputDelegate6, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate7, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, Key Temp_struct_Variable, Key K2Node_InputActionEvent_Key, bool K2Node_Event_IsShow, int K2Node_Event_NewUIType, FString CallFunc_Conv_IntToString_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate8, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_BoolToString_ReturnValue, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool K2Node_Event_bDie, bool CallFunc_IsValid_ReturnValue, byte K2Node_CustomEvent_CameraMode, STExtraBaseCharacter* K2Node_CustomEvent_TargetPlayer, Actor* K2Node_CustomEvent_TargetActor, BP_PlayerPawn_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess2, SurviveHUD* K2Node_DynamicCast_AsSurvive_HUD, bool K2Node_DynamicCast_bSuccess3, Key K2Node_InputActionEvent_Key2, byte K2Node_CustomEvent_Slot, int Temp_int_Array_Index_Variable, Pawn* CallFunc_K2_GetPawn_ReturnValue2, bool K2Node_CustomEvent_NewParam, bool CallFunc_IsValid_ReturnValue2, bool K2Node_Event_bIsSprint, UAEUserWidget*[] K2Node_Event_panels, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, int K2Node_CustomEvent_IntValue, int K2Node_Event_fingerIndex, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate9, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate10, delegate K2Node_CreateDelegate_OutputDelegate11, delegate K2Node_CreateDelegate_OutputDelegate12, bool CallFunc_GetUseMotionControlEnable_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate13, bool K2Node_Event_bShow2, bool K2Node_Event_isThrow, int K2Node_Event_member2, int K2Node_Event_status2, bool K2Node_Event_isRobot2, bool CallFunc_IsOnVehicle_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate14, byte K2Node_Event_WeaponPropSlot, ItemDefineID K2Node_Event_DefineID, bool K2Node_Event_bEquip, int Temp_int_Array_Index_Variable2, Vector K2Node_CustomEvent_AxisValue2, FString CallFunc_GetPlatformName_ReturnValue, Vector K2Node_InputVectorAxisEvent_AxisValue, int Temp_int_Loop_Counter_Variable2, delegate K2Node_CreateDelegate_OutputDelegate15, int CallFunc_Add_IntInt_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue3, Vector K2Node_CustomEvent_AxisValue, bool CallFunc_NotEqual_VectorVector_ReturnValue, FString CallFunc_GetActiveDeviceProfileName_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, SaveGame* CallFunc_GetUserSettings_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate16, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess4, delegate K2Node_CreateDelegate_OutputDelegate17, int[] K2Node_Event_FinishedGuide, int[] K2Node_Event_FinishedCounts, int K2Node_Event_PlayerLevel, int K2Node_Event_PlayerExperienceType, bool CallFunc_Array_Contains_ReturnValue, byte K2Node_Select_Default, int CallFunc_MakeLiteralInt_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue2, int[] K2Node_MakeArray_Array, int[] K2Node_MakeArray_Array2, int Temp_int_Array_Index_Variable3, BP_PlayerPawn_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue3, CameraComponent* CallFunc_GetThirdPersonCamera_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue4, Vector K2Node_Event_OceansideLocation, bool K2Node_Event_bDetectedRiver, int CallFunc_PostEventAtLocation_ReturnValue, bool K2Node_Event_InShow, GameStateBase* CallFunc_GetGameState_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue2, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess5, FName CallFunc_GetGameModeState_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue2, UAEPlayerController* K2Node_CustomEvent_PlayerController, int CallFunc_PostEventAtLocation_ReturnValue3, float CallFunc_CalInputFromRotaionRate_OutPitch, float CallFunc_CalInputFromRotaionRate_OutYaw, bool CallFunc_CalInputFromRotaionRate_bIsAddPitch, bool CallFunc_CalInputFromRotaionRate_bIsAddYaw, bool CallFunc_IsInPlane_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsAutoRunTestGame_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue4, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue4, int CallFunc_GetFireModeByGameMode_FireMode, int CallFunc_GetFireModeByGameMode_FireMode2, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool K2Node_SwitchString_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate18, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue3, int Temp_int_Array_Index_Variable4, bool CallFunc_GreaterEqual_IntInt_ReturnValue, GameStateBase* CallFunc_GetGameState_ReturnValue2, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess6, bool K2Node_Event_bUIVisibility, bool CallFunc_Array_Contains_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate19, GameInstance* CallFunc_GetGameInstance_ReturnValue, UAEGameInstance* K2Node_DynamicCast_AsUAEGame_Instance, bool K2Node_DynamicCast_bSuccess7, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, FString CallFunc_GetAutoRunLuaTest_ReturnValue, bool CallFunc_IsValid_ReturnValue5, bool K2Node_Event_IsEnable, DirectionalLight*[] CallFunc_GetAllActorsOfClass_OutActors2, DirectionalLight* CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_ActorHasTag_ReturnValue, HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult, PointLight*[] CallFunc_GetAllActorsOfClass_OutActors3, SkyLight*[] CallFunc_GetAllActorsOfClass_OutActors4, PointLight* CallFunc_Array_Get_Item3, SkyLight* CallFunc_Array_Get_Item4, bool CallFunc_ActorHasTag_ReturnValue2, bool CallFunc_ActorHasTag_ReturnValue3, int CallFunc_Array_Length_ReturnValue3, int CallFunc_Array_Length_ReturnValue4, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, bool K2Node_CustomEvent_IsEnable, bool K2Node_CustomEvent_IsVisible2, int Temp_int_Loop_Counter_Variable3, bool K2Node_CustomEvent_bIsEnable, bool CallFunc_Less_IntInt_ReturnValue3, int CallFunc_Add_IntInt_ReturnValue4, bool CallFunc_IsTeamAssembleDisplayEnabled_ReturnValue, bool CallFunc_IsTeamAssembleDisplayLevelLoaded_ReturnValue, bool CallFunc_IsTeamAssembleDisplayLevelLoaded_ReturnValue2, SceneComponent* K2Node_CustomEvent_LightComp, bool K2Node_CustomEvent_IsVisible, bool CallFunc_IsVisible_ReturnValue, FString Temp_string_Variable, bool CallFunc_NotEqual_BoolBool_ReturnValue, BP_GlobalConfig_C* CallFunc_GetGlobalConfig_Config, bool CallFunc_IsTeamAssembleDisplayLevelLoaded_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess8, int CallFunc_GetDeviceLevel_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable4, bool CallFunc_Less_IntInt_ReturnValue4, int CallFunc_Add_IntInt_ReturnValue5, FString Temp_string_Variable2, BackpackComponent* CallFunc_GetBackpackComponentFromController_ReturnValue, bool CallFunc_HasItemBySubType_ReturnValue, FString K2Node_Select2_Default, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, bool K2Node_Event_bShow, bool CallFunc_HasState_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_HasState_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue5, bool CallFunc_Not_PreBool_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_CheckIfMenuOpen_ReturnValue, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_IsSpectator_ReturnValue, int K2Node_Event_member, int K2Node_Event_status, bool K2Node_Event_isRobot, STExtraPlayerCharacter* K2Node_CustomEvent_InPlayerCharacter, class Object K2Node_CustomEvent_InClass, Vector CallFunc_K2_GetActorLocation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_SpawnActorEx_ReturnValue, BP_TrajectoryMove_C* K2Node_DynamicCast_AsBP_Trajectory_Move, bool K2Node_DynamicCast_bSuccess9);// 0x46f6b154
	void BindEventToBackpackComponent__DelegateSignature();// 0x46f6b154
	void PlayerLeaveWater__DelegateSignature(bool HideLung);// 0x46f6b154
	void PlayerEnterWater__DelegateSignature();// 0x46f6b154
	void AirborneLanded__DelegateSignature();// 0x46f6b154
	void ReloadingCDEnd__DelegateSignature();// 0x46f6b154
	void ReloadingCDStart__DelegateSignature(float CD);// 0x46f6b154
	PlanGReportEventComp* PlanGReportEventComp;//[Offset: 0x33d4, Size: 4]
	PlayerCameraPossessManager_BP_C* PlayerCameraPossessManager_BP;//[Offset: 0x33d8, Size: 4]
	BP_GISPlayerComponent_C* BP_GISPlayerComponent;//[Offset: 0x33dc, Size: 4]
	BP_TipsManager_C* BP_TipsManager;//[Offset: 0x33e0, Size: 4]
	BP_ReportClientFieldOfViewDataComponent_C* BP_ReportClientFieldOfViewDataComponent1;//[Offset: 0x33e4, Size: 4]
	BP_MapUIMarkManager_C* BP_MapUIMarkManager;//[Offset: 0x33e8, Size: 4]
	QuickSignComponent_BP_C* QuickSignComponent_BP;//[Offset: 0x33ec, Size: 4]
	BP_GameEventListener_C* BP_GameEventListener;//[Offset: 0x33f0, Size: 4]
	BP_ServerSwitcher_C* BP_ServerSwitcher;//[Offset: 0x33f4, Size: 4]
	STExtraUnderWaterEffectComp* STExtraUnderWaterEffectComp;//[Offset: 0x33f8, Size: 4]
	ChatComponent_BP_C* ChatComponent_BP;//[Offset: 0x33fc, Size: 4]
	BP_CommonBtn_C* BP_CommonBtn;//[Offset: 0x3400, Size: 4]
	BP_VehicleUser_C* BP_VehicleUser;//[Offset: 0x3404, Size: 4]
	float GrayToOne_Alpha_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x3408, Size: 4]
	byte GrayToOne__Direction_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x340c, Size: 1]
	TimelineComponent* GrayToOne;//[Offset: 0x3410, Size: 4]
	float GrayToZero_Alpha_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x3414, Size: 4]
	byte GrayToZero__Direction_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x3418, Size: 1]
	TimelineComponent* GrayToZero;//[Offset: 0x341c, Size: 4]
	PostProcessVolume* MainPostProcessVolume;//[Offset: 0x3420, Size: 4]
	byte LastCameraMode;//[Offset: 0x3424, Size: 1]
	Pawn* PrePlayerPawn;//[Offset: 0x3428, Size: 4]
	Object* WaitingUI;//[Offset: 0x342c, Size: 4]
	Object* SimulatePlane;//[Offset: 0x3430, Size: 4]
	delegate ReloadingCDStart;//[Offset: 0x3434, Size: 12]
	delegate ReloadingCDEnd;//[Offset: 0x3440, Size: 12]
	bool AlreadyAimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344c, Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x3450, Size: 4]
	STExtraBaseCharacter*[] CurAimTargets;//[Offset: 0x3454, Size: 12]
	float CloseDistance;//[Offset: 0x3460, Size: 4]
	byte AutoAimDrawType;//[Offset: 0x3464, Size: 1]
	delegate AirborneLanded;//[Offset: 0x3468, Size: 12]
	bool bDefaultIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3474, Size: 1]
	bool DriveWithForwardAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3475, Size: 1]
	bool DriveWithRightAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3476, Size: 1]
	delegate PlayerEnterWater;//[Offset: 0x3478, Size: 12]
	delegate PlayerLeaveWater;//[Offset: 0x3484, Size: 12]
	bool bindWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3490, Size: 1]
	float LastTime;//[Offset: 0x3494, Size: 4]
	Vector[] MotionDataStack;//[Offset: 0x3498, Size: 12]
	Vector CurMotionData;//[Offset: 0x34a4, Size: 12]
	delegate BindEventToBackpackComponent;//[Offset: 0x34b0, Size: 12]
	<FString,UIAdaptationStructure> AdaptationDict;//[Offset: 0x34bc, Size: 60]
	UIAdaptationStructure CurDeviceAdaptationOffset;//[Offset: 0x34f8, Size: 28]
	UIAdaptationStructure CurDeviceAdaptationData;//[Offset: 0x3514, Size: 28]
	bool bIsJoyStickShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3530, Size: 1]
	bool bIsInitSensibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3531, Size: 1]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3532, Size: 1]
	FString ActiveDevicProfileName;//[Offset: 0x3534, Size: 12]
	bool adaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3540, Size: 1]
	bool initAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3541, Size: 1]
	bool IsJoystickTriggerSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3542, Size: 1]
	float UITouchMoveX;//[Offset: 0x3544, Size: 4]
	float UITouchMoveY;//[Offset: 0x3548, Size: 4]
	int PressFireFingerIndex;//[Offset: 0x354c, Size: 4]
	bool IsShowFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3550, Size: 1]
	bool IsThrowGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3551, Size: 1]
	int VoiceMemberID;//[Offset: 0x3554, Size: 4]
	int VoiceMemberStatus;//[Offset: 0x3558, Size: 4]
	byte AttachmentAttachSlot;//[Offset: 0x355c, Size: 1]
	ItemDefineID AttachmentDefineID;//[Offset: 0x3560, Size: 24]
	Vector2D AutoSprintBtnTouchPos;//[Offset: 0x3578, Size: 8]
	bool IsAutoSprintBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3580, Size: 1]
	bool IsFingerInsideAutoSprintBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3581, Size: 1]
	bool IsBindJoystickSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3582, Size: 1]
	byte UnequipWeaponType;//[Offset: 0x3583, Size: 1]
	bool IsShowInputControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3584, Size: 1]
	Vector2D AutoNavigateTranslation;//[Offset: 0x3588, Size: 8]
	bool bLongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3590, Size: 1]
	bool bLongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3591, Size: 1]
	Vector2D AimBtnPos;//[Offset: 0x3594, Size: 8]
	Vector2D AimBtnSize;//[Offset: 0x359c, Size: 8]
	bool HasWatered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35a4, Size: 1]
	FString CurrentPlatformName;//[Offset: 0x35a8, Size: 12]
	int MotionDataSameCount;//[Offset: 0x35b4, Size: 4]
	int MotionDataSameCountMax;//[Offset: 0x35b8, Size: 4]
	FString[] ModeList_ForbidGuide;//[Offset: 0x35bc, Size: 12]
	bool isDrugRecoverSignal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c8, Size: 1]
	int MinLevel;//[Offset: 0x35cc, Size: 4]
	int MaxLevel;//[Offset: 0x35d0, Size: 4]
	int NextMinLevel;//[Offset: 0x35d4, Size: 4]
	int NextMaxLevel;//[Offset: 0x35d8, Size: 4]
	FName TeamDisplayLevelName;//[Offset: 0x35e0, Size: 8]
	bool HasUnLoadDiplayLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e8, Size: 1]
	bool IsRobotVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e9, Size: 1]
	Vector CampPlaneCanJumpPos;//[Offset: 0x35ec, Size: 12]
	Vector CampPlaneForceJumpPos;//[Offset: 0x35f8, Size: 12]
	bool bHasFinishedTaskGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3604, Size: 1]
	int ReadyAkEvent;//[Offset: 0x3608, Size: 4]

--------------------------------
Class: BP_GlobalConfig_C.GlobalConfigActor.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	BP_WeatherConfig_C* BP_WeatherConfig;//[Offset: 0x2f0, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2f4, Size: 4]
	FName FlyTree;//[Offset: 0x2f8, Size: 8]
	FName TeamDisplayLevelName;//[Offset: 0x300, Size: 8]

--------------------------------
Class: GlobalConfigActor.Actor.Object
	bool bInitComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	void Init();// 0x234daf8

--------------------------------
Class: BP_WeatherConfig_C.WeatherConfigComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x108, Size: 4]
	void ReceiveBeginPlay();// 0x46f6b154
	void DelaySyncWeatherLevelInfo();// 0x46f6b154
	void ExecuteUbergraph_BP_WeatherConfig(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, STExtraDelegateMgr* CallFunc_STExtraDelegateMgrInstance_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetOwner_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate2, GameModeBase* CallFunc_GetGameMode_ReturnValue, BattleRoyaleGameMode* K2Node_DynamicCast_AsBattle_Royale_Game_Mode, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154

--------------------------------
Class: STExtraDelegateMgr.BlueprintFunctionLibrary.Object
	delegate OnPlayerStateNameChange;//[Offset: 0x1c, Size: 12]
	delegate OnHPChange;//[Offset: 0x28, Size: 12]
	delegate OnCanRescueOtherChange;//[Offset: 0x34, Size: 12]
	delegate OnRescueingStatusChangeChange;//[Offset: 0x40, Size: 12]
	delegate OnBreathChange;//[Offset: 0x4c, Size: 12]
	delegate OnKilledTips;//[Offset: 0x58, Size: 12]
	delegate OnVehicleHPChange;//[Offset: 0x64, Size: 12]
	delegate OnCharacterStateChangeDelegate;//[Offset: 0x70, Size: 12]
	delegate OnPlayerStateChangeDelegate;//[Offset: 0x7c, Size: 12]
	delegate OnCharacterStateChangeByIndexDelegate;//[Offset: 0x88, Size: 12]
	delegate OnEnterBornIsland;//[Offset: 0x94, Size: 12]
	delegate OnCorpsOutGame;//[Offset: 0xa0, Size: 12]
	delegate OnCorpsJoinGame;//[Offset: 0xac, Size: 12]
	delegate ReportHeroSkillRecordDelegate;//[Offset: 0xb8, Size: 12]
	delegate SendHeroEquipFlowDelegate;//[Offset: 0xc4, Size: 12]
	delegate OnUpdateUIPrefab;//[Offset: 0xd0, Size: 12]
	static STExtraDelegateMgr* STExtraDelegateMgrInstance();// 0x2665dd4
	static void RemoveSTExtraDelegateMgrInstance_ForReupdate();// 0x2665dc0

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.STExtraGameMode.STExtraGameFramework.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x1864, Size: 12]
	delegate OnGameModeExitFlying;//[Offset: 0x1870, Size: 12]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1884, Size: 1]
	bool bIsAllowCloseShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1885, Size: 1]
	bool bIsOpenNavlinkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1886, Size: 1]
	bool bDoOpenRadarAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1887, Size: 1]
	bool bShowVehicleSetting_Helicopter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1888, Size: 1]
	bool bShowVehicleSetting_UAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1889, Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x188c, Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1890, Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x1894, Size: 4]
	float CharacterParachuteNetCullDistanceSquared;//[Offset: 0x1898, Size: 4]
	float WeaponNetCullDistanceSquared;//[Offset: 0x189c, Size: 4]
	float VehicleNetCullDistanceSquared;//[Offset: 0x18a0, Size: 4]
	FString NavDataPath;//[Offset: 0x18a4, Size: 12]
	FString NavLinkDataPath;//[Offset: 0x18b0, Size: 12]
	FString LogicAreaDataPath;//[Offset: 0x18bc, Size: 12]
	int HurtGoblinScore;//[Offset: 0x18c8, Size: 4]
	int KillGoblinScore;//[Offset: 0x18cc, Size: 4]
	int DeleverTargetScore;//[Offset: 0x18d0, Size: 4]
	int NotMeetGoblinScore;//[Offset: 0x18d4, Size: 4]
	float DragOnGroundDownTraceDistance;//[Offset: 0x18d8, Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x18dc, Size: 4]
	bool bServerOpenCrowdManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18e0, Size: 1]
	TaskConfigComponent* TaskConfigComponent;//[Offset: 0x18f8, Size: 4]
	PxgCrowdManagerComponent* PxgCrowdManager;//[Offset: 0x18fc, Size: 4]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1900, Size: 1]
	bool bTeamRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1909, Size: 1]
	void UnInitCrowdManager();// 0x23bfd04
	void OnIDIPTriggerEnableEvent(out const FString[] EnableTriggersName);// 0x23bfc38
	void NotifyGameModeInit();// 0x23bfc1c
	void InitCrowdManager();// 0x23bfc08

--------------------------------
Class: BattleRoyaleGameModeBase.STExtraGameMode.STExtraGameFramework.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	TimerEvents[] GameTimerEvents;//[Offset: 0x1220, Size: 12]
	enum GameModeType;//[Offset: 0x122c, Size: 1]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0x1230, Size: 4]
	class AIController* AIControllerClass;//[Offset: 0x1234, Size: 4]
	class AIController* NewAIControllerClass;//[Offset: 0x1238, Size: 4]
	class AIController* SuperTeamAIControllerClass;//[Offset: 0x123c, Size: 4]
	class UAELevelDirector* LevelDirectorClass;//[Offset: 0x1240, Size: 4]
	UAELevelDirector* LevelDirector;//[Offset: 0x1244, Size: 4]
	int MaxNoConsiderActorNum;//[Offset: 0x1248, Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0x124c, Size: 4]
	int PlayerNumPerTeam;//[Offset: 0x1250, Size: 4]
	FString EscapeHelicopterClassTag;//[Offset: 0x1254, Size: 12]
	FString GameModeDisplayName;//[Offset: 0x1260, Size: 12]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126c, Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126d, Size: 1]
	float CircleSpeedMultiplicator;//[Offset: 0x1270, Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1274, Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1275, Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1276, Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1277, Size: 1]
	bool bForbidAirAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1278, Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1279, Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127a, Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127b, Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127c, Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127d, Size: 1]
	bool bForbitCharacterAttrModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127e, Size: 1]
	bool bLimitedCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127f, Size: 1]
	bool BattleVoice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1280, Size: 1]
	bool bRemoveVehicleBecauseDestory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1281, Size: 1]
	bool bEnableFatalDamageRPCOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1282, Size: 1]
	FString GameModeConfigPath;//[Offset: 0x1284, Size: 12]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1290, Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1291, Size: 1]
	int iCheatIndexBeforeInit;//[Offset: 0x1294, Size: 4]
	bool bCanEditPlaneRouteData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1298, Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0x129c, Size: 92]
	Vector BornLocation;//[Offset: 0x12f8, Size: 12]
	float BornRadius;//[Offset: 0x1304, Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0x1308, Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0x1309, Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0x130c, Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0x1310, Size: 4]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1314, Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0x1318, Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0x131c, Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1320, Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0x1324, Size: 4]
	bool bHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1328, Size: 1]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1329, Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x132a, Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x132c, Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x1330, Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x1334, Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x1338, Size: 4]
	GamemodeAIDataAsset* GameModeAIDataAssetSoftPtr;//[Offset: 0x1340, Size: 40]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x1368, Size: 4]
	float SignalHPRecoverCDMax;//[Offset: 0x136c, Size: 4]
	float SignalHPRecoverSpeed;//[Offset: 0x1370, Size: 4]
	float ResetSignalHP_FatalDamage;//[Offset: 0x1374, Size: 4]
	float ResetSignalHP_Rescued;//[Offset: 0x1378, Size: 4]
	<float,float> SignalHPApplyExtraDamageConfigMap;//[Offset: 0x137c, Size: 60]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b8, Size: 1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b9, Size: 1]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ba, Size: 1]
	int[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0x13bc, Size: 12]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0x13c8, Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13cc, Size: 1]
	bool bForceAutoUseWeaponAttachmentIgnoreGenericGameSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13cd, Size: 1]
	DeadDropItemLimitInfoCollection DeadDropItemLimitInfoCollection;//[Offset: 0x13d0, Size: 12]
	PickupItemLimitInfoCollection PickupItemLimitInfoCollection;//[Offset: 0x13dc, Size: 16]
	GameModeState* CurrentState;//[Offset: 0x13ec, Size: 4]
	GameModeState*[] AllGameModeStates;//[Offset: 0x13f0, Size: 12]
	GameModeState* GameModeStateActive;//[Offset: 0x13fc, Size: 4]
	GameModeState* GameModeStateReady;//[Offset: 0x1400, Size: 4]
	GameModeState* GameModeStateFighting;//[Offset: 0x1404, Size: 4]
	GameModeState* GameModeStateFinished;//[Offset: 0x1408, Size: 4]
	FString MyMapName;//[Offset: 0x140c, Size: 12]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1418, Size: 1]
	float OutBoundDamage;//[Offset: 0x141c, Size: 4]
	bool IsCanBuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1420, Size: 1]
	bool IsCanBecomeZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1421, Size: 1]
	bool IsShowDeadBoxGreenLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1422, Size: 1]
	bool IsShowDeadBoxGreenSmoke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1423, Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1424, Size: 1]
	int MatchGoal;//[Offset: 0x1428, Size: 4]
	int ChickenDinnerNum;//[Offset: 0x142c, Size: 4]
	float CurPolicyDecisionRelevantUpdateInterval;//[Offset: 0x1434, Size: 4]
	AIGroupManagerComponent* AIGroupManagerComp;//[Offset: 0x1438, Size: 4]
	AnimalTeleportComponent* AnimalTeleportComp;//[Offset: 0x143c, Size: 4]
	FortressComponent* FortressComp;//[Offset: 0x1440, Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x1444, Size: 4]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1448, Size: 1]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0x144c, Size: 4]
	AIActingComponent* AIActingComp;//[Offset: 0x1450, Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x1454, Size: 4]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0x1458, Size: 4]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0x145c, Size: 4]
	AIGridLocationManagerComponent* AIGridLocMgrComp;//[Offset: 0x1460, Size: 4]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0x1464, Size: 4]
	RespawnItemConfig* DefaultGeneratePlayerItemConfig;//[Offset: 0x1468, Size: 4]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x146c, Size: 1]
	RespawnItemConfigInst[] RespawnItemConfigList;//[Offset: 0x1470, Size: 12]
	bool bSetAllWeaponBulletToMaxOnBorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147c, Size: 1]
	GameModeParms GameModeParms;//[Offset: 0x1480, Size: 732]
	GMGeneralConfigData GMGeneralConfigData;//[Offset: 0x175c, Size: 60]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x1798, Size: 68]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x17e4, Size: 12]
	bool bTakeDamageWhenOutBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17f0, Size: 1]
	FString GameModeProfileName;//[Offset: 0x17f4, Size: 12]
	uint32 KillerPlayerKey;//[Offset: 0x1800, Size: 4]
	uint32 VictimPlayerKey;//[Offset: 0x1804, Size: 4]
	uint32 LastBattleResultPlayer;//[Offset: 0x1808, Size: 4]
	int LastPlayerGamePlayingTime;//[Offset: 0x180c, Size: 4]
	bool bIsGameEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1810, Size: 1]
	bool ActivateCharmSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1818, Size: 1]
	class GameModeWeaponConfigBase* WeaponSystemConfigData;//[Offset: 0x1820, Size: 40]
	GameModeWeaponConfigBase* WeaponSystemConfigDataIns;//[Offset: 0x1848, Size: 4]
	delegate GoToFightingStateDelegate;//[Offset: 0x184c, Size: 12]
	delegate OnGameEventChangeDelegate;//[Offset: 0x1858, Size: 12]
	void ToggleInfiniteBullets(bool Value);// 0x23c1b88
	void TickGameModeState(float DeltaTime);// 0x23c1b08
	void SetStateLeftTime(int LeftTime);// 0x23c1a90
	void SetPlayerNumPerTeam(int NewValue);// 0x23c1a18
	void SetOneFlight(out const PlayerController*[] InTotalPlayers, out const AIController*[] InTotalAIs);// 0x23c1900
	void SetFightingStateTime(float StateTime);// 0x23c1880
	void RespawnPlayer(uint32 PlayerKey, bool bAI);// 0x23c17b4
	void OnStartCurFlight();// 0x23c1798
	void OnGameEnterFinish();// 0x237e7b8
	void OnGameEnterFight();// 0x23c177c
	void OnAirDropBoxLanded(int BoxId, out const Vector Pos);// 0x23c16a0
	void OnAirDropBoxEmpty(int BoxId);// 0x23c1620
	float ModifyDamage_BP(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Controller* VictimController, Actor* DamageCauser);// 0x23c1464
	bool IsSingleMode();// 0x23c1434
	bool IsGuidNewMode();// 0x23c140c
	bool IsFeatureSupportedCDO(enum SubSystemType);// 0x23c138c
	bool IsEnableTeamAssembleDisplay();// 0x23c135c
	void InitlializeDefaultGeneratePlayerItemConfig();// 0x23c1340
	void InitialGameModeState();// 0x23c132c
	void InitGlobalConfig();// 0x23c1318
	void HandlePlayerKilled(Controller* Killer, Controller* VictimPlayer, Pawn* VictimPawn, const DamageType* DamageType);// 0x23c11d0
	void HandleGameEnd();// 0x23c11b4
	void GotoReadyState();// 0x23c11a0
	void GotoFinishedState();// 0x23c118c
	void GotoFightingState();// 0x23c1178
	void GotoActiveState();// 0x23c1164
	bool GetShouldSendTeamBattleResultBatch();// 0x23c1144
	FString GetSeasonPlane();// 0x23c10b0
	int GetReadyStateTime();// 0x23c1088
	FString GetPlayerBattleResultReason(uint32 PlayerKey);// 0x23c0fa4
	class Object GetGlobalOverrideClass(class Object InComponentClass);// 0x23c0f24
	GameModeState* GetCurrentState();// 0x23c0efc
	GameModeParam GetCurPlaneRouteData();// 0x23c0dd0
	FName GetCurGameModeState();// 0x23c0da4
	CircleMgrComponent* GetCircleMgrComponent();// 0x23c0d7c
	AIWorldVolume* GetAIWorldVolume();// 0x23c0d54
	AIWorldSoundManagerComponent* GetAIWorldSoundManagerComponent();// 0x23c0d2c
	AIGridLocationManagerComponent* GetAIGridLocationManagerComponent();// 0x23c0d04
	class AIController GetAIControllerClass(bool bSuperTeamAI, int AIType);// 0x23c0c2c
	void GeneratePlayerItems(STExtraPlayerController* PlayerController, RespawnItemConfig* GenerateItemConfig);// 0x23c0b70
	void GenerateItemsForAllPlayers();// 0x23c0b5c
	void GenerateItems_Implementation(BackpackComponent* BackpackComponent, RespawnItemConfig* GenerateItemConfig);// 0x23c0aa0
	void GenerateAIItems(FakePlayerAIController* AIController, RespawnItemConfig* GenerateItemConfig);// 0x23c09e4
	RespawnItemConfig* FilterGeneratePlayerItems(STExtraPlayerController* PlayerController, RespawnItemConfig* GenerateItemConfig);// 0x23c0918
	RespawnItemConfig* FilterGenerateAIItems(FakePlayerAIController* AIController, RespawnItemConfig* GenerateItemConfig);// 0x23c084c
	void ConfigOverWriteValue();// 0x23c0830
	bool CheckPickupItemLimitedCount(out const ItemDefineID InTargetItem, const BackpackComponent* InTargetBackpack, const int InTargetPickupCount, out int OutLimitedItemCount);// 0x23c06b0
	void CheckOutBound(float DeltaTime);// 0x23c0638
	bool CheckNoHumanExist();// 0x23c0608
	bool CheckGameEnd();// 0x23c05d8
	void CheckDropItemLimit(out PickUpItemData[] OutItemDataList);// 0x23c04dc
	void CheckAnyBodyOutBound();// 0x23c04c8
	void CheckAliveCharacters(float DeltaTime);// 0x23c0448
	void ChangeStateGM(FName TargetGameModeState);// 0x23c03c8
	void CalculateGameTerminatorInfo();// 0x23c03ac

--------------------------------
Class: STExtraGameMode.STExtraGameFramework.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: STExtraGameFramework.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f0, Size: 1]
	FString DebugGameModeID;//[Offset: 0x11f4, Size: 12]
	bool bIsMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1200, Size: 1]
	bool bQuitGameIsNotEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1201, Size: 1]
	bool bCanEnterAgain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1202, Size: 1]
	GameAntiCheatConfig GameModeAcConfig;//[Offset: 0x1203, Size: 1]
	FName CurGameModeState;//[Offset: 0x1208, Size: 8]
	byte WorldLoadedType;//[Offset: 0x1210, Size: 1]
	bool bSupportLuaExtension;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1211, Size: 1]
	float LuaTickFreq;//[Offset: 0x1214, Size: 4]
	void ReleaseGameModeComponents();// 0x266c980
	void RegisterComponentInternal(enum InSubSystemId, ActorComponent* NewComp, bool bAddToRoot);// 0x266c870
	bool QuitGameIsNotEscape();// 0x266c840
	void OnKillHappened(Controller* Killer, Controller* VictimPlayer, out const DamageEvent DamageEvent);// 0x46f6b154
	void OnGameModeStateChange();// 0x266c82c
	void LuaTick();// 0x46f6b154
	void LuaPostLogin(PlayerController* NewPlayer);// 0x46f6b154
	void LuaPostAILogin(FakePlayerAIController* NewPlayer);// 0x46f6b154
	void LuaOnPlayerRealExit(PlayerController* Exiting);// 0x46f6b154
	float LuaModifyDamage(float Damage, int DamageType, STExtraPlayerState* InstigatorPlayerState, STExtraPlayerState* VictimPlayerState);// 0x266c6d4
	FString LuaLogin(Player* NewPlayer, byte InRemoteRole, FString Portal, FString Options, out const UniqueNetIdRepl UniqueId, out FString ErrorMessage);// 0x46f6b154
	void LuaKilled(Controller* Killer, Controller* Victimer, Pawn* VictimPawn, int DamageType, out const DamageEvent DamageEvent);// 0x46f6b154
	bool IsUGCGameMode();// 0x266c6b8
	bool HasMatchGoalAchieved();// 0x266c688
	FakePlayerAIController* FindAIControllerWithPlayerKey(uint32 PlayerKey);// 0x266c608
	void CreateGameModeComponents();// 0x266c5ec
	void CreateDynamicComponentForPlayerController_Internal(class Object DynamicCompClass, UAEPlayerController* AEPlayerController, bool bIsServerOnly);// 0x266c4e4
	void CreateDynamicComponentForCharacter_Internal(class Object DynamicCompClass, UAECharacter* AECharacter, bool bIsServerOnly);// 0x266c3dc
	void ChangeStateGM(FName TargetGameModeState);// 0x23c03c8
	bool CanEnterAgain();// 0x266c3ac

--------------------------------
Class: GameAntiCheatConfig
	bool bOpenExLaunchDirectHeightControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: TimerEvents
	FString EventName;//[Offset: 0x0, Size: 12]
	FString EventTimestamp;//[Offset: 0xc, Size: 12]

--------------------------------
Class: TaskConfigComponent.ActorComponent.Object
	class UniversalTaskMgr[] TaskMgrClassList;//[Offset: 0xd0, Size: 12]
	FString DefaultTaskMgrPath;//[Offset: 0xdc, Size: 12]
	UniversalTaskMgr*[] TaskMgrList;//[Offset: 0xe8, Size: 12]
	bool HasTypeofTaskMgr(class Object TaskMgrTypeClass);// 0x2725958
	UniversalTaskMgr* GetTaskMgrByClass(class Object TaskMgrTypeClass);// 0x27258d8
	void CreateAllTaskManager();// 0x27258c4

--------------------------------
Class: PxgCrowdManagerComponent.ActorComponent.Object
	int TickFps;//[Offset: 0xd0, Size: 4]
	float TimeHorizon;//[Offset: 0xd4, Size: 4]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	float AvoidanceLocalPlanDestMinTime;//[Offset: 0xdc, Size: 4]
	float ArriveWeight;//[Offset: 0xe0, Size: 4]
	float PushedWeight;//[Offset: 0xe4, Size: 4]
	float SeparationWeightFactor;//[Offset: 0xe8, Size: 4]
	SteerWeightBySpeed[] SeparationWeights;//[Offset: 0xec, Size: 12]
	SteerWeightBySpeed[] AlignmentWeights;//[Offset: 0xf8, Size: 12]
	int QueryNeighborIncludeFlags;//[Offset: 0x104, Size: 4]
	float InfMapCellSize;//[Offset: 0x108, Size: 4]
	Vector2D InfMapExtent;//[Offset: 0x10c, Size: 8]
	float SegmentHPadLength;//[Offset: 0x114, Size: 4]
	float SegmentVPadLength;//[Offset: 0x118, Size: 4]
	float SegmentVRadius;//[Offset: 0x11c, Size: 4]
	bool bToggleCheckReachable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bIsPause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	bool bCanRunSingleFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x122, Size: 1]
	bool bPlayPrevBoundaryHitHistoryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x123, Size: 1]
	bool bPlayNextBoundaryHitHistoryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	bool bDrawNextHitBoundaryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x125, Size: 1]
	bool bFindStraightPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126, Size: 1]
	float DistanceLimitForFindStraightPath;//[Offset: 0x128, Size: 4]
	void TestAgentLocationZOffset(float ZOffset);// 0x2599910
	void SwitchIsDebugAgent();// 0x235d4b8
	bool OrderAllAgentMoveTo(out const Vector Loc, float stopRadius);// 0x2599830

--------------------------------
Class: SteerWeightBySpeed
	float Speed;//[Offset: 0x0, Size: 4]
	float weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x20, Size: 4]
	FString TablePath;//[Offset: 0x24, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] AirDropBoxGroupConfigs;//[Offset: 0x30, Size: 12]
	<int,int> AirDropBoxIndexToGroupIndexMap;//[Offset: 0x3c, Size: 60]
	ItemsBoxConfigDataAssetConfigGroup[] SuperAirDropBoxGroupConfigs;//[Offset: 0x78, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] XmasAirDropBoxGroupConfigs;//[Offset: 0x84, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] TreasureBoxGroupConfigs;//[Offset: 0x90, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] ChannelBuoyBoxGroupConfigs;//[Offset: 0x9c, Size: 12]
	ItemsBoxConfigDataAssetConfigGroup[] StarGameDropBoxGroupConfigs;//[Offset: 0xa8, Size: 12]
	AirDropBoxGenerateWrapperItemData[] GetXmasAirDropBoxGenerateDataList(FString GroupName);// 0x24f7da4
	AirDropBoxGenerateWrapperItemData[] GetTreasureBoxGenerateDataList(FString GroupName);// 0x24f7c60
	AirDropBoxGenerateWrapperItemData[] GetTargetItemsDataFromTableByCategoryFilter(FString CategoryFilter);// 0x24f7b1c
	AirDropBoxGenerateWrapperItemData[] GetSuperAirDropBoxGenerateDataList(int GroupIdx);// 0x24f7a40
	AirDropBoxGenerateWrapperItemData[] GetStarGameDropBoxGenerateDataList(out const FString GroupName);// 0x24f7940
	AirDropBoxGenerateWrapperItemData[] GetChannelBuoyBoxGenerateDataList(out const FString GroupName);// 0x24f7840
	AirDropBoxGenerateWrapperItemData[] GetAirDropBoxGenerateDataList(int AirDropIndex);// 0x24f7764

--------------------------------
Class: ItemsBoxConfigDataAssetConfigGroup
	FString GroupName;//[Offset: 0x0, Size: 12]
	ItemsBoxConfigDataAssetConfigItem[] ConfigItems;//[Offset: 0xc, Size: 12]

--------------------------------
Class: ItemsBoxConfigDataAssetConfigItem
	float ProbabilityPercent;//[Offset: 0x0, Size: 4]
	FString CategoryFilter;//[Offset: 0x4, Size: 12]

--------------------------------
Class: GameModeParam
	float Radius0;//[Offset: 0x0, Size: 4]
	float Radius1;//[Offset: 0x4, Size: 4]
	float Radius3;//[Offset: 0x8, Size: 4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float Radius2;//[Offset: 0x10, Size: 4]
	Vector2D[] PolygonPoints;//[Offset: 0x14, Size: 12]
	float BlueCircleRadius;//[Offset: 0x20, Size: 4]
	Vector MapCenter;//[Offset: 0x24, Size: 12]
	float PlaneSpeed;//[Offset: 0x30, Size: 4]
	float PlaneHeight;//[Offset: 0x34, Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x38, Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x3c, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x40, Size: 4]
	bool bUseSpecialPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	Vector2D SpecialPointStart;//[Offset: 0x48, Size: 8]
	Vector2D SpecialPointEnd;//[Offset: 0x50, Size: 8]
	bool AlwaysOnPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	float[] Probabilities;//[Offset: 0x20, Size: 12]
	GameModeParam[] GameModeParams;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	AIEquipSpawnGroupDataBase[] SpawnEquipDataBase;//[Offset: 0x20, Size: 12]
	float RandomStartJumpTime;//[Offset: 0x2c, Size: 4]
	float RandomEndJumpTime;//[Offset: 0x30, Size: 4]
	float JumpRadius;//[Offset: 0x34, Size: 4]
	float JumpHeight;//[Offset: 0x38, Size: 4]
	float RandomAccelerateStart;//[Offset: 0x3c, Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x40, Size: 4]
	float OpenParachuteHeight;//[Offset: 0x44, Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x48, Size: 4]
	float CloseParachuteHeight;//[Offset: 0x4c, Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x50, Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x54, Size: 4]
	float TimeCanProne;//[Offset: 0x58, Size: 4]
	float TimeCanMedicine;//[Offset: 0x5c, Size: 4]
	float StopdeliverTime;//[Offset: 0x60, Size: 4]
	float NoCirlceRadius;//[Offset: 0x64, Size: 4]
	float TraceHeight;//[Offset: 0x68, Size: 4]
	float RangeMin;//[Offset: 0x6c, Size: 4]
	float RangeMax;//[Offset: 0x70, Size: 4]
	float OriginCheckSquare;//[Offset: 0x74, Size: 4]
	float DestCheckSquare;//[Offset: 0x78, Size: 4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0x7c, Size: 8]
	float FlyToCircleRadius;//[Offset: 0x84, Size: 4]
	TargetPointConfig[] AITeamTargetPointConfigs;//[Offset: 0x88, Size: 12]

--------------------------------
Class: AIEquipSpawnGroupDataBase
	float RightTime;//[Offset: 0x0, Size: 4]
	AIEquipSpawnGroup[] AIEquipSpawnGroupList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: AIEquipSpawnGroup
	AIEquipSpawnItem[] Item;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AIEquipSpawnItem
	enum ItemType;//[Offset: 0x0, Size: 1]
	int ItemSpecificID;//[Offset: 0x4, Size: 4]
	int Count;//[Offset: 0x8, Size: 4]
	Vector2D ExtraConfigValue;//[Offset: 0xc, Size: 8]

--------------------------------
Class: TargetPointConfig
	Vector Point;//[Offset: 0x0, Size: 12]
	int weight;//[Offset: 0xc, Size: 4]

--------------------------------
Class: FakePlayerAIController.BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	class STExtraBaseCharacter* CharacterClass;//[Offset: 0x9bc, Size: 4]
	delegate OnEnterJumping;//[Offset: 0x9c0, Size: 12]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0x9d8, Size: 4]
	TickControlComponent* TickControlComp;//[Offset: 0x9dc, Size: 4]
	int PlayerTeamId;//[Offset: 0x9e0, Size: 4]
	uint32 PlayerKey;//[Offset: 0x9e4, Size: 4]
	FString PlayerName;//[Offset: 0x9e8, Size: 12]
	byte AIType;//[Offset: 0x9f4, Size: 1]
	bool bSuperTeamAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f5, Size: 1]
	TaskControllerComponent* TaskControllerComponent;//[Offset: 0x9f8, Size: 4]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fc, Size: 1]
	FName TeamLeaderBlackboardKey;//[Offset: 0xa00, Size: 8]
	STExtraBaseCharacter* ControlledCharacter;//[Offset: 0xa0c, Size: 4]
	void UseItem(int ID);// 0x2486ff0
	void TryExitVehicle();// 0x2486fdc
	void TryEnterVehicle(STExtraVehicleBase* Vehicle, enum SeatType);// 0x2486f20
	void ReceiveAIPhaseChange(byte Phase);// 0x46f6b154
	void OpenParachute();// 0x2486f0c
	STExtraBaseCharacter* GetTeamLeader();// 0x2486ee4
	void DisuseItem(int ID);// 0x2486e6c
	void AddItem(int ID, int Count);// 0x2486db0

--------------------------------
Class: BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	float CheckPeriod;//[Offset: 0x3e8, Size: 4]
	float RandomDeviation;//[Offset: 0x3ec, Size: 4]
	float ProtectCountdownTime;//[Offset: 0x3f0, Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x3f4, Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x3f8, Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x3fc, Size: 8]
	bool bUseDifficultyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404, Size: 1]
	<int,float> DifficultyTurnVelocityCfg;//[Offset: 0x408, Size: 60]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x444, Size: 8]
	<enum,enum> WeatherToAttackDist;//[Offset: 0x44c, Size: 60]
	BackpackComponent* BackpackComponent;//[Offset: 0x958, Size: 4]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0x95c, Size: 88]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0x9b4, Size: 4]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0x9b8, Size: 4]
	void Respawn();// 0x23b6820
	void ReceiveAttacked(Controller* InstigatorController, Pawn* InstigatorPawn);// 0x46f6b154
	void OnBulletHit(Actor* InHitActor, float ImpactPosDistanceToWeapon, Pawn* Player);// 0x23b6720
	float ModifyDamage(float Damage, Actor* VictimActor, Actor* DamageCauser);// 0x23b6610
	BackpackComponent* GetBackPackComp();// 0x23b65f4

--------------------------------
Class: BasicAIController.AIController.Controller.Actor.Object
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x380, Size: 4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x384, Size: 4]
	BehaviorTree*[] BehaviorTreePath;//[Offset: 0x388, Size: 12]
	float BehaviorTreeTickInterval;//[Offset: 0x394, Size: 4]
	float ActorLocationTetherDistance;//[Offset: 0x398, Size: 4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x39c, Size: 4]
	void StopBehavior();// 0x23bc304
	BlackboardComponent* GetBlackboardComponent();// 0x23bc2e8

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x124, Size: 12]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x400a4b8
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x400a438
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x400a324

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AIHoleUpComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	float OccludeBuildingActorByRemoveTime;//[Offset: 0x110, Size: 4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0x114, Size: 4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x118, Size: 4]
	float OccludePosInvalidDis;//[Offset: 0x11c, Size: 4]

--------------------------------
Class: AIAbilityComponent.OnlyActorComponent.ActorComponent.Object

--------------------------------
Class: AIBuildingComponent.AIAbilityComponent.OnlyActorComponent.ActorComponent.Object
	<int,int> CanBuildActorNums;//[Offset: 0xf8, Size: 60]
	float TotalCD;//[Offset: 0x134, Size: 4]
	float SoloCD;//[Offset: 0x138, Size: 4]

--------------------------------
Class: DeadDropItemLimitInfoCollection
	DeadDropItemLimitInfo[] DeadDropItemLimitList;//[Offset: 0x0, Size: 12]

--------------------------------
Class: DeadDropItemLimitInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int MinDropLimit;//[Offset: 0x4, Size: 4]
	float DropRatio_Min;//[Offset: 0x8, Size: 4]
	float DropRatio_Max;//[Offset: 0xc, Size: 4]

--------------------------------
Class: PickupItemLimitInfoCollection
	bool bIsShowExceedLimitTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	PickupItemLimitInfo[] PickupItemLimitList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: PickupItemLimitInfo
	int ItemID;//[Offset: 0x0, Size: 4]
	int MaxPickupLimit;//[Offset: 0x4, Size: 4]
	int ExceedLimitTipID;//[Offset: 0x8, Size: 4]

--------------------------------
Class: GameModeState.Object
	int64 EnterStateTime;//[Offset: 0x28, Size: 8]
	float StateTime;//[Offset: 0x30, Size: 4]
	STExtraGameFramework* OwningGameMode;//[Offset: 0x38, Size: 4]
	bool bSupportLuaExtension;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float LuaTickFreq;//[Offset: 0x40, Size: 4]
	void SetStateTime(float NewStateTime);// 0x24ab3b4
	void LuaExit();// 0x46f6b154
	void LuaExecute();// 0x46f6b154
	void LuaEnter();// 0x46f6b154
	bool IsTimeout();// 0x24ab38c
	void GotoNextState();// 0x2384458
	float GetStateTime();// 0x24ab364
	STExtraGameFramework* GetOwnerGameMode();// 0x24ab33c
	int64 GetLeftTime();// 0x24ab314

--------------------------------
Class: AIGroupManagerComponent.ActorComponent.Object
	AnimalGroupRespawnConfig[] AnimalGroupRespawnConfig;//[Offset: 0xd0, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0x154, Size: 8]

--------------------------------
Class: AnimalGroupRespawnConfig
	enum AnimalType;//[Offset: 0x0, Size: 1]
	AnimalGroupRespawnNumProbability[] AnimalGroupRespawnNumProbability;//[Offset: 0x4, Size: 12]
	float NoBlueCircleRadius;//[Offset: 0x10, Size: 4]
	float CheckPlayerRadius;//[Offset: 0x14, Size: 4]
	float EndRespawnTime;//[Offset: 0x18, Size: 4]
	int TryFindSpawnLocNum;//[Offset: 0x1c, Size: 4]
	FString[] ValidTraceActorIncludeName;//[Offset: 0x20, Size: 12]
	Vector AnimalGenerateOffset;//[Offset: 0x2c, Size: 12]
	class STAnimalCharacter* AnimalCharacterClass;//[Offset: 0x38, Size: 40]

--------------------------------
Class: AnimalGroupRespawnNumProbability
	uint32 AnimalNum;//[Offset: 0x0, Size: 4]
	int weight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalCharacter.STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	AnimalStateMutual[] AnimalStateMutuals;//[Offset: 0xc74, Size: 12]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0xc84, Size: 4]
	InterpMovementComponent* InterpMovement;//[Offset: 0xc88, Size: 4]
	WidgetComponent* AnimalInfoWidget;//[Offset: 0xc8c, Size: 4]
	Vector RelativeLocation;//[Offset: 0xc90, Size: 12]
	class UserWidget* WidgetClass;//[Offset: 0xc9c, Size: 4]
	bool bUseMediumRegionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca0, Size: 1]
	AnimalAnimListComponent* _AnimListComponent;//[Offset: 0xca4, Size: 4]
	STAnimalAnimInstance* _AnimInstance;//[Offset: 0xca8, Size: 4]
	ProduceDropItemComponent* ProduceDropItemComponent;//[Offset: 0xcac, Size: 4]
	int AnimalGroupID;//[Offset: 0xcb0, Size: 4]
	int VehicleDamageSpeed;//[Offset: 0xcbc, Size: 4]
	int VehicleDamageValue;//[Offset: 0xcc0, Size: 4]
	enum AnimalType;//[Offset: 0xcc4, Size: 1]
	<enum,float> AnimalStateSpeeds;//[Offset: 0xcc8, Size: 60]
	float HearRadius;//[Offset: 0xd04, Size: 4]
	SkeletalMesh*[] RandomMeshs;//[Offset: 0xd08, Size: 12]
	MaterialInterface*[] RandomMaterials;//[Offset: 0xd14, Size: 12]
	delegate CustomObjectEvent;//[Offset: 0xd20, Size: 12]
	ParticleSystem* FootPrintRes;//[Offset: 0xd2c, Size: 4]
	ParticleSystemComponent* FootPrintParticleSys;//[Offset: 0xd30, Size: 4]
	FName AttachedSocket;//[Offset: 0xd38, Size: 8]
	void ShowFootPrintEffect(bool IsEnabled);// 0x25ed5c8
	void SetExtendData(FString Key, int Value);// 0x25ed498
	bool HasAnimalState(enum State);// 0x25ed418
	void HandleDynamicWeatherChanged(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x25ed348
	WeatherDetailStatus GetCurrentWeatherStatus();// 0x25ed300
	void DisappearOnDeath();// 0x25ed2e4
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x25ed220
	void BeforeDestroyed();// 0x25ed204

--------------------------------
Class: STExtraSimpleCharacterBase.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0xbcc, Size: 4]
	float MinTimeLockTarget;//[Offset: 0xbd0, Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xbd4, Size: 4]
	float SensedRadius;//[Offset: 0xbd8, Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0xbdc, Size: 4]
	float HeardRadius;//[Offset: 0xbe0, Size: 4]
	float DelayHideDuration;//[Offset: 0xbe4, Size: 4]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe8, Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe9, Size: 1]
	Vector HurtDir;//[Offset: 0xbec, Size: 12]
	float HurtDistance;//[Offset: 0xbf8, Size: 4]
	float HurtResetDefaultTime;//[Offset: 0xbfc, Size: 4]
	StateMutual[] StateMutuals;//[Offset: 0xc08, Size: 12]
	delegate StateEnterEvent;//[Offset: 0xc14, Size: 12]
	delegate StateLeaveEvent;//[Offset: 0xc20, Size: 12]
	SimpleDamageRepData SimpleDamageRepData;//[Offset: 0xc40, Size: 24]
	int[] randomIndexes;//[Offset: 0xc58, Size: 12]
	SimpleAnimListBaseComponent* AnimListComponent;//[Offset: 0xc64, Size: 4]
	STExtraSimpleAnimInstanceBase* AnimInstance;//[Offset: 0xc68, Size: 4]
	byte NetRelevantType;//[Offset: 0xc6c, Size: 1]
	void SetNetRelevantType(byte inType);// 0x26edea0
	void OnRep_SimpleDamageData();// 0x26ede8c
	void DisappearOnDeath();// 0x25ed2e4
	void CurrentStatesRemove(int State);// 0x26ede0c
	void CurrentStatesAdd(int State);// 0x26edd8c
	void ClearOnDeath(Controller* EventInstigater, int DamageType);// 0x25ed220
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const VehicleDamageEvent VehicleDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26edb08
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const RadialDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26ed85c
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const PoisonDamageEvent PoisonDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26ed5dc
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const STPointDamageEvent PointDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26ed35c
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const MeleeDamageEvent MeleeDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26ed0d0
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const FallingDamageEvent FallingDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26ece34
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const DrowningDamageEvent DrowningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26ecbb4
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const STBurningDamageEvent BurningDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26ec934
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const STAirAttackRadialDamageEvent AirAttackDamageEvent, Pawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);// 0x26ec688
	void BPNotifyStartDying(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x46f6b154
	void BPNotifyDeathEnd(Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, class DamageType KillingHitDamageType);// 0x46f6b154
	void BPDie(float KillingDamage, const Controller* EventInstigator, Actor* DamageCauser, out const DamageEvent DamageEvent);// 0x26ec514

--------------------------------
Class: AnimalStateMutual
	enum state1;//[Offset: 0x0, Size: 1]
	enum state2;//[Offset: 0x1, Size: 1]

--------------------------------
Class: StateMutual
	int state1;//[Offset: 0x0, Size: 4]
	int state2;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SimpleDamageRepData
	float Damage;//[Offset: 0x0, Size: 4]
	float CurrentHeath;//[Offset: 0x4, Size: 4]
	bool IsFatalHealthCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool IsHeadShotDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	Pawn* DamageInstigatorPawn;//[Offset: 0xc, Size: 4]
	Pawn* DamageReceiver;//[Offset: 0x10, Size: 4]
	int NetCounter;//[Offset: 0x14, Size: 4]

--------------------------------
Class: STExtraSimpleAnimInstanceBase.AnimInstance.Object
	STExtraSimpleCharacterBase* OwnerCharacter;//[Offset: 0x31c, Size: 4]
	FString OwnerClassPath;//[Offset: 0x32c, Size: 12]
	bool EnableAdjustFloorNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344, Size: 1]
	Rotator AdjustFloorRot;//[Offset: 0x348, Size: 12]
	float AdjustFloorDelta;//[Offset: 0x354, Size: 4]
	void ResetAnimState();// 0x25ecac0
	void OnPawnDeadEvent(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x25ec814
	void OnLeaveState(int State);// 0x25ec794
	void OnEnterState(int State);// 0x236c0dc
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x25ec5e8
	void CacheAnimState(float DeltaSeconds);// 0x25ec568
	void CacheAnimDataList(bool ForceRefreshVar);// 0x25ec4e0

--------------------------------
Class: AnimalAnimListComponent.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimalAnimData[] AnimalAnimDatas;//[Offset: 0x210, Size: 12]
	AnimalMoveAnimSpeed[] AnimalMoveAnimSpeeds;//[Offset: 0x21c, Size: 12]

--------------------------------
Class: AnimalAnimData
	enum PoseType;//[Offset: 0x0, Size: 4]
	AnimationAsset* AnimSoftPtr;//[Offset: 0x8, Size: 40]
	AnimationAsset* AnimHardPtr;//[Offset: 0x30, Size: 4]

--------------------------------
Class: AnimalMoveAnimSpeed
	enum PoseType;//[Offset: 0x0, Size: 4]
	float Speed;//[Offset: 0x4, Size: 4]

--------------------------------
Class: STAnimalAnimInstance.STExtraSimpleAnimInstanceBase.AnimInstance.Object
	bool b_Hit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35c, Size: 1]
	bool b_Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35d, Size: 1]
	bool b_Trot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35e, Size: 1]
	bool b_Running;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35f, Size: 1]
	float f_MoveRate;//[Offset: 0x360, Size: 4]
	Vector v_HitVector;//[Offset: 0x364, Size: 12]
	bool b_IsFighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	AnimSequence* A_Idle;//[Offset: 0x374, Size: 4]
	AnimMontage* A_Idle_Arder;//[Offset: 0x378, Size: 4]
	AnimSequence* A_MoveAnim_Walk;//[Offset: 0x37c, Size: 4]
	AnimSequence* A_MoveAnim_Trot;//[Offset: 0x380, Size: 4]
	AnimSequence* A_MoveAnim_Run;//[Offset: 0x384, Size: 4]
	BlendSpace* A_HitAnim;//[Offset: 0x388, Size: 4]
	AnimMontage* A_DeadAnim;//[Offset: 0x38c, Size: 4]
	AnimMontage* A_FearAnim;//[Offset: 0x390, Size: 4]
	AnimMontage* A_CuteAnim;//[Offset: 0x394, Size: 4]
	void ResetAnimState();// 0x25ecac0
	void OnPawnDeadEvent(STExtraCharacter* DeadCharacter, Controller* Killer, Actor* DamageCauser, out const HitResult KillingHitInfo, Vector KillingHitImpulseDir, int DamageType, const STExtraDamageType* DamageTypeClass, bool IsHeadShotDamage);// 0x25ec814
	void OnLeaveState(int State);// 0x25ec794
	void OnEnterState(int State);// 0x236c0dc
	void OnAnimListLoadedFinished(AsyncLoadAnimParams loadAnimParams);// 0x25ec5e8
	void CacheAnimState(float DeltaSeconds);// 0x25ec568
	void CacheAnimDataList(bool ForceRefreshVar);// 0x25ec4e0

--------------------------------
Class: AIActingComponent.ActorComponent.Object
	int PlayersOnSquare;//[Offset: 0xd0, Size: 4]
	int OriginalTotalAINum;//[Offset: 0xd4, Size: 4]
	int OriginalTotalCandidateAINum;//[Offset: 0xd8, Size: 4]
	int RecordSecSincePlane;//[Offset: 0xdc, Size: 4]
	STExtraGameFramework* SavedGamemode;//[Offset: 0xe0, Size: 4]
	AIActingCandidateData[] CandidateAIList;//[Offset: 0xe4, Size: 12]
	int MaxActiveAI;//[Offset: 0x190, Size: 4]
	int ActiveAI_n;//[Offset: 0x194, Size: 4]
	int ActiveAI_m;//[Offset: 0x198, Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x19c, Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x1a0, Size: 4]
	Box2D SpawnMapBounds;//[Offset: 0x1a4, Size: 20]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x1b8, Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x1bc, Size: 4]
	float SelectActionPeriod;//[Offset: 0x1c0, Size: 4]
	int FakeAISpawnFailedPeriodTime;//[Offset: 0x1c4, Size: 4]
	AIActingItem[] AIActingItemList;//[Offset: 0x1c8, Size: 12]
	AIBeginAttackEachOther[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x1d4, Size: 12]
	int FullFeedLimit;//[Offset: 0x1e0, Size: 4]
	DeliveryRatingConfig[] DeliveryWaveInterval;//[Offset: 0x1e4, Size: 12]
	float DeliveryBeginTime;//[Offset: 0x1f0, Size: 4]
	float DeliveryFreq;//[Offset: 0x1f4, Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x1f8, Size: 4]
	float MinimumWarmScore;//[Offset: 0x1fc, Size: 4]
	AIDeliveryAreaLimit[] AIDeliveryAreaLimit;//[Offset: 0x200, Size: 12]
	Box[] AIDeliveryForbiddenAreas;//[Offset: 0x20c, Size: 12]
	bool bUseDeliveryPosCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	int DeliveryPosCheckRange;//[Offset: 0x21c, Size: 4]
	int DeliveryPosCheckMaxPlayerNum;//[Offset: 0x220, Size: 4]
	int DeliveryPosCheckMaxTeamNum;//[Offset: 0x224, Size: 4]
	DeliveryPolygonPoints[] DeliveryPolygonPointsList;//[Offset: 0x228, Size: 12]
	AIRatingDamage[] AIRatingDamageConfig;//[Offset: 0x234, Size: 12]
	AIAttackAIRatingDamage[] AIAttackAIRatingDamage;//[Offset: 0x240, Size: 12]
	AIAttackMORatingDamage[] AIAttackMORatingDamage;//[Offset: 0x24c, Size: 12]
	AIAttackBuildingRatingDamage[] AIAttackBuildingRatingDamage;//[Offset: 0x258, Size: 12]
	DeliveryPlayerConfig[] AIDeliveryPlayerConfig;//[Offset: 0x264, Size: 12]
	AIAttackAnimalRatingDamage[] AIAttackAnimalRatingDamage;//[Offset: 0x270, Size: 12]
	bool bUseFireHitRateForAIShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	float AIAttackNotHitOffsetWidth;//[Offset: 0x280, Size: 4]
	float AIAttackNotHitOffsetHeight;//[Offset: 0x284, Size: 4]
	AIRatingFireHitRate[] AIRatingFireHitRateConfig;//[Offset: 0x288, Size: 12]
	AIAttackAIRatingFireHitRate[] AIAttackAIRatingFireHitRateConfig;//[Offset: 0x294, Size: 12]
	bool bUseAIDynamicDamageBasedHP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	AIDynamicDamageBasedHP[] AIAttackPlayerDynamicDamageHPConfig;//[Offset: 0x2a4, Size: 12]
	AIDynamicDamageBasedHP[] AIAttackAIDynamicDamageHPConfig;//[Offset: 0x2b0, Size: 12]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x2bc, Size: 4]
	int MaxQueuingMoveRequests;//[Offset: 0x2c0, Size: 4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x2c4, Size: 4]
	float PathRecordTimeInterval;//[Offset: 0x2c8, Size: 4]
	float PathRecordDiffPointDistSq;//[Offset: 0x2cc, Size: 4]
	float PathRecordSpanTime;//[Offset: 0x2d0, Size: 4]
	uint32 PathRecordQueueSize;//[Offset: 0x2d4, Size: 4]
	int MaxPathRecordExecutePerFrame;//[Offset: 0x2d8, Size: 4]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x2dc, Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x2e0, Size: 4]
	STExtraPlayerCharacter*[] CachedCandidatePlayers;//[Offset: 0x2e4, Size: 12]
	FakePlayerAIController*[] CachedCandidateAICs;//[Offset: 0x32c, Size: 12]
	bool HaveTurnedOnAIAttackEachOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	int CurrentActing;//[Offset: 0x354, Size: 4]
	float JumpingTimeElapse;//[Offset: 0x358, Size: 4]
	float Ratio;//[Offset: 0x35c, Size: 4]
	float JumpCount;//[Offset: 0x360, Size: 4]
	float AverageRating;//[Offset: 0x364, Size: 4]
	float AIAttackEachOtherBeginTime;//[Offset: 0x368, Size: 4]
	float AIDeliveryWaveInterval;//[Offset: 0x36c, Size: 4]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x370, Size: 4]
	int AIAttackMORatingDamageIndex;//[Offset: 0x374, Size: 4]
	int AIAttackBuildingRatingDamageIndex;//[Offset: 0x378, Size: 4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x37c, Size: 4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool IsUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	int bEnableAIStrategy;//[Offset: 0x3f4, Size: 4]
	uint16[] AIStrategyRatingConfig;//[Offset: 0x424, Size: 12]
	GMDataSource_AirRoute* AirRouteData;//[Offset: 0x430, Size: 4]
	void TurnOnAIAttackEachOther();// 0x2350954
	void StopAllFakePlayerAIBehaviorTree();// 0x2350940
	void SimulateKilledFakeAI(out const AIActingCandidateData Killer, out const AIActingCandidateData Killed, int WeapID, out int InWillKilled, bool bLastOneAndPoison);// 0x2350720
	void SimulateJumping(float DeltaTime);// 0x23506a8
	void SetActive(bool bNewActive, bool bReset);// 0x23505d0
	void SelectAct(float DeltaTime);// 0x2350558
	int RetrieveCandidateAINum();// 0x2350530
	void ReceivedPlayerRespawn(uint32 PlayerKey, bool bIsAI);// 0x235046c
	void ReceivedPlayerKilled(uint32 PlayerKey, uint32 KillerKey, bool bIsAI);// 0x2350364
	void ReceivedPlayerDead(uint32 InPlayerKey, uint32 KillerKey);// 0x23502a8
	void ReceivedPlayerAdd(uint32 InPlayerKey, STExtraPlayerCharacter* InCharacter);// 0x23501ec
	void ReceivedAIPlayerDead(uint32 PlayerKey, uint32 KillerKey);// 0x2350130
	void ReceivedAICAdd(uint32 InPlayerKey, FakePlayerAIController* InAIC);// 0x2350074
	void PlayAct(float DeltaTime);// 0x234fffc
	void OnNotifyAIDropInfo(int bUseNewAI, out const DSAIDropInfo Info);// 0x234ff0c
	void OnGameEnterFinish();// 0x234fef0
	void OnGameEnterFight();// 0x234fed4
	void IncreasePlayersOnSquare(int InNum);// 0x234fe5c
	void IncreaseOriginalTotalAINum(int InNum);// 0x234fde4
	Vector GetSpawnRandomLocationCheck(Vector circle, out bool OutSuccess);// 0x234fcec
	Vector GetSpawnRandomLocation(out bool OutSuccess);// 0x234fc4c
	int GetRatingFireHitRateConfig(float RatingScore);// 0x234fbcc
	int GetRatingDeliverConfig(float RatingScore);// 0x234fb4c
	int GetRatingDamageConfig(float RatingScore);// 0x234facc
	STExtraPlayerCharacter* GetOneDeliveryTarget();// 0x234faa4
	float GetNoWhiteCirclesRadius();// 0x234fa88
	int GetMaxActiveAI();// 0x234fa60
	uint32[] GetExistingCharacters();// 0x234f9cc
	void GetAllAIC(out FakePlayerAIController*[] OutAICs);// 0x234f92c
	int GetAIAttackMODamageConfig(float AverageRatingScore);// 0x234f8ac
	int GetAIAttackBuildingDamageConfig(float AverageRatingScore);// 0x234f82c
	int GetAIAttackAnimalDamageConfig(float AverageRatingScore);// 0x234f7ac
	int GetAIAtkAIFireHitRateConfig(float AverageRatingScore);// 0x234f72c
	int GetAIAtkAIDamageConfig(float AverageRatingScore);// 0x234f6ac
	void DeliveryAct(float DeltaTime);// 0x234f634
	void DecreaseAlivePlayerNum(uint32 KilledPlayerKey, bool bAddDynamicRank);// 0x234f570
	void CollectAndReportAIStrategyInfo();// 0x234f55c
	void CalcDeliverTargetData();// 0x234f548
	void BroadFinishLastBreathFunction(uint32 PlayerKey, FString Killer, FString Killed, int WeaponID);// 0x234f324
	bool AdjustAIAttackMORatingDamage(MobAIController* MAIC);// 0x234f2a4
	bool AdjustAIAttackBuildingRatingDamage(STBuildingActorBase* BuildingActor);// 0x234f224
	bool AdjustAIAttackAnimalRatingDamage(AnimalAIController* AIC);// 0x234f1a4
	void AddRecordSecSincePlane();// 0x234f178
	void AddCandidateAI(FakePlayerAIController* AIC, uint32 InPlayerKey, int InTeamID, FString InPlayerName);// 0x234efb8

--------------------------------
Class: AIActingCandidateData
	int TeamID;//[Offset: 0x0, Size: 4]
	uint32 AIPlayerKey;//[Offset: 0x4, Size: 4]
	FString AIPlayerName;//[Offset: 0x8, Size: 12]
	FakePlayerAIController* FakePlayerAIController;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AIActingItem
	float StartSeconds;//[Offset: 0x0, Size: 4]
	float EndSeconds;//[Offset: 0x4, Size: 4]
	float DeadPercent;//[Offset: 0x8, Size: 4]
	int PlayerNumScale;//[Offset: 0xc, Size: 4]
	bool IsFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int[] WeaponIDList;//[Offset: 0x14, Size: 12]

--------------------------------
Class: AIBeginAttackEachOther
	float BeginAttackEachOtherTime;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeliveryRatingConfig
	float DeliveryInterval;//[Offset: 0x0, Size: 4]
	float RightRatingSection;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIDeliveryAreaLimit
	Vector TopLeftVec;//[Offset: 0x0, Size: 12]
	Vector BottomRightVec;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DeliveryPolygonPoints
	Vector[] DeliveryPolygonPoint;//[Offset: 0x0, Size: 12]

--------------------------------
Class: AIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	int AIFeedLimit;//[Offset: 0x8, Size: 4]
	float SectionRightValue;//[Offset: 0xc, Size: 4]

--------------------------------
Class: AIAttackAIRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIAttackMORatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIAttackBuildingRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: DeliveryPlayerConfig
	DeliveryItem[] DeliveryItem;//[Offset: 0x0, Size: 12]
	float RightRatingSection;//[Offset: 0xc, Size: 4]

--------------------------------
Class: DeliveryItem
	int percent;//[Offset: 0x0, Size: 4]
	int DeliveryNum;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIAttackAnimalRatingDamage
	float RatingDamageScale;//[Offset: 0x0, Size: 4]
	float FiringAccuracyRadius;//[Offset: 0x4, Size: 4]
	float SectionRightValue;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AIRatingFireHitRate
	float FireHitRate;//[Offset: 0x0, Size: 4]
	float SectionRightValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIAttackAIRatingFireHitRate
	float FireHitRate;//[Offset: 0x0, Size: 4]
	float SectionRightValue;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AIDynamicDamageBasedHP
	float HealthPercentLeft;//[Offset: 0x0, Size: 4]
	float HealthPercentRight;//[Offset: 0x4, Size: 4]
	float FireHitRate;//[Offset: 0x8, Size: 4]
	float DamageScale;//[Offset: 0xc, Size: 4]

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.GameModeBaseComponent.ActorComponent.Object
	bool bStartOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x12c, Size: 12]
	float DestinyThreshold;//[Offset: 0x138, Size: 4]
	bool bEnableInnerCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c, Size: 1]
	class RadiationCircleBase* InnerCircleClass;//[Offset: 0x140, Size: 4]
	bool bRandomSpecialInnerCircleType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144, Size: 1]
	bool bDeduplicationRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145, Size: 1]
	enum[] RandomSpecialInnerCircleTypeList;//[Offset: 0x148, Size: 12]
	float TimeForForbidMakePain;//[Offset: 0x154, Size: 4]
	bool bCircleCenterInExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bMakePainToHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	RadiationCircleBase* InnerCircle;//[Offset: 0x15c, Size: 4]
	Actor* ContainActor;//[Offset: 0x1ac, Size: 4]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x288, Size: 4]
	delegate NotifyInnerCircleAppearance;//[Offset: 0x28c, Size: 12]
	GMDataSource_PoisonCircle* DataSource;//[Offset: 0x298, Size: 4]
	float UGCGetCurIndexTime(int Index);// 0x241b278
	void SetGMCicleTime(float CDTime, float LastTime);// 0x241b17c
	void SetFixedCircleCenter(bool Fixed, float X, float Y);// 0x241b070
	void SetEnabled(bool Enable);// 0x241afe8
	void SetCircleMultiplicator(float Multiplicator);// 0x241af70
	void ResetCircles();// 0x241af5c
	void MakePain(Actor* _actor);// 0x241aee4
	bool IsNowInLastCountCircle(int LastCount);// 0x241ae64
	bool IsInnerCircleExsit();// 0x241ae40
	bool IsInBlueCircle(Actor* _actor);// 0x241adc0
	bool IsDoubleCircleEnabled();// 0x241ada4
	void GMMakeDesiredCircle(Vector CircleInfo, int CircleType, int InnerCircleType);// 0x241ac98
	Vector GetWhiteCircleCenter();// 0x241ac74
	float GetResetTimestamp();// 0x241ac4c
	Vector GetInnerCircleInfo();// 0x241ac28
	int GetCurrentCircleIndex();// 0x241ac00
	<float,float> GetCirleTimeToPain();// 0x241aa50
	bool GetCanMakePainWhenInPlaneOrParachute();// 0x241aa28
	Vector GetBlueCircleCenter();// 0x241aa04
	void CircleStartTimer();// 0x241a9f0
	void CalDamagePlan();// 0x241a9dc
	Vector CalculateWarGameWhiteCircle();// 0x241a994

--------------------------------
Class: CirCleCfg
	float DelayTime;//[Offset: 0x0, Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x4, Size: 4]
	float SafeZoneAppeartime;//[Offset: 0x8, Size: 4]
	float[] BlueCirclePreWarning;//[Offset: 0xc, Size: 12]
	float LastTime;//[Offset: 0x18, Size: 4]
	float pain;//[Offset: 0x1c, Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	Vector2D bluepoint;//[Offset: 0x24, Size: 8]
	float blueradius;//[Offset: 0x2c, Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Vector2D whitepoint;//[Offset: 0x34, Size: 8]
	float whiteradius;//[Offset: 0x3c, Size: 4]
	float Alpha;//[Offset: 0x40, Size: 4]
	bool bEnableInnerCircleInCurWhiteCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float InnerCircleRadius;//[Offset: 0x48, Size: 4]
	enum InnerCircleType;//[Offset: 0x4c, Size: 1]
	bool bUseContainActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	float DestinyChance;//[Offset: 0x50, Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	float ScreenSizeFactor;//[Offset: 0x58, Size: 4]
	float ExtraRadius;//[Offset: 0x5c, Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	float DamageMagnifierRange;//[Offset: 0x64, Size: 4]
	float DamageMagnifier;//[Offset: 0x68, Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x6c, Size: 4]
	bool bEnableDamageMagnifier2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	float DamageMagnifierRange2;//[Offset: 0x74, Size: 4]
	float DamageMagnifier2;//[Offset: 0x78, Size: 4]
	CurveFloat* DamageMagnifierCurve2;//[Offset: 0x7c, Size: 4]
	bool bTranslatedOnlyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	float CircleTranslatedRadiusMax;//[Offset: 0x84, Size: 4]
	float CircleTranslatedRadiusMin;//[Offset: 0x88, Size: 4]

--------------------------------
Class: GMDataSource_PoisonCircle.GMDataSource.Object
	CirCleCfg[] CircleConfigs;//[Offset: 0x20, Size: 12]
	float DestinyThreshold;//[Offset: 0x2c, Size: 4]

--------------------------------
Class: GMDataSource_AirRoute.GMDataSource.Object
	GameModeParam CurPlaneRouteData;//[Offset: 0x20, Size: 92]
	class PlaneCharacter* PlaneClass;//[Offset: 0x7c, Size: 4]
	BehaviorTree* PlaneBT;//[Offset: 0x80, Size: 4]
	float MaxAIAllowJumpRadius;//[Offset: 0x84, Size: 4]
	PlaneTypes[] SeasonPlanes;//[Offset: 0x88, Size: 12]
	float GetMaxAIAllowJumpRadius();// 0x24cfa5c
	GameModeParam GetCurPlaneRouteData();// 0x24cf998

--------------------------------
Class: PlaneCharacter.Character.Pawn.Actor.Object
	float DistanceToStartPoint;//[Offset: 0x5e0, Size: 4]
	float SimulatedDurationSinceAirLineStart;//[Offset: 0x5e4, Size: 4]
	float TimeLineRate;//[Offset: 0x5e8, Size: 4]
	Vector2D CameraSlowlyMoving;//[Offset: 0x5ec, Size: 8]
	Vector2D CameraSlowlyPutDown;//[Offset: 0x5f4, Size: 8]
	SoftObjectPath SpringMoveSpeedScalePath;//[Offset: 0x600, Size: 24]
	CurveFloat* SpringMoveSpeedScale;//[Offset: 0x618, Size: 4]
	int FixedRandomSeed;//[Offset: 0x61c, Size: 4]
	float SpringArmLength_Escort;//[Offset: 0x620, Size: 4]
	float SpringArmLength_NoEscort;//[Offset: 0x624, Size: 4]
	Vector SpringArmLocationOffset;//[Offset: 0x628, Size: 12]
	Rotator SpringArmRotation_Escort;//[Offset: 0x634, Size: 12]
	Rotator SpringArmRotation_NoEscort;//[Offset: 0x640, Size: 12]
	Rotator CameraRotation_Escort;//[Offset: 0x64c, Size: 12]
	Rotator CameraRotation_NoEscort;//[Offset: 0x658, Size: 12]
	bool bHasEscortPlanes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x664, Size: 1]
	bool bFlyToJumpPoint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x664, Size: 1]
	FrontendHUD* FrontendHUD;//[Offset: 0x668, Size: 4]
	SkeletalMesh* BannerMesh;//[Offset: 0x688, Size: 4]
	AnimationAsset* BannerAnim;//[Offset: 0x68c, Size: 4]
	FName BannerAttachSocket;//[Offset: 0x690, Size: 8]
	SkeletalMeshComponent* BannerComp;//[Offset: 0x698, Size: 4]
	MaterialInstanceDynamic* DynamicMaterial;//[Offset: 0x69c, Size: 4]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a0, Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0x6a4, Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0x6b0, Size: 12]
	bool bIsInVolcanoZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	bool bHitted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bd, Size: 1]
	CameraAnim* CameraAnim_Bouncing;//[Offset: 0x6c0, Size: 40]
	CameraAnim* CameraAnim_Hitted;//[Offset: 0x6e8, Size: 40]
	ParticleSystem* PS_Hitted;//[Offset: 0x710, Size: 4]
	class AirForceEscort* AirForceEscortClass;//[Offset: 0x720, Size: 4]
	SoftClassPath AirForceEscortClassPath;//[Offset: 0x728, Size: 24]
	Transform AirForceEscortRelativeTransform;//[Offset: 0x740, Size: 48]
	class CameraModifier* ShakeModifierClass;//[Offset: 0x770, Size: 4]
	SoftClassPath ShakeModifierClassPath;//[Offset: 0x778, Size: 24]
	class EscortSpawner* EscortSpawnerClass;//[Offset: 0x790, Size: 4]
	SoftClassPath EscortSpawnerClassPath;//[Offset: 0x798, Size: 24]
	EscortSpawner* EscortSpawner;//[Offset: 0x7b0, Size: 4]
	void ResetPlaneHitted();// 0x256b230
	void ReceiveUpdateCameraTransform(float DeltaTime);// 0x46f6b154
	void ReceiveFlyToJumpPoint();// 0x46f6b154
	void PlayPlaneSound();// 0x256b214
	void PlayCameraShake();// 0x256b200
	void OnRequestImgSuccess(Texture2D* Texture, FString RequestedURL);// 0x256b12c
	void OnRep_IsInVolcanoZone();// 0x256b118
	void OnRep_Hitted();// 0x256b104
	void OnRep_GetHttpPlaneBannerRightImg();// 0x235d4b8
	void OnRep_GetHttpPlaneBannerLeftImg();// 0x256b0f0
	void OnRep_FixedRandomSeed();// 0x256b0dc
	void OnRep_EnableBanner();// 0x256b0c8
	void OnRep_bHasEscortPlanes();// 0x256b0b4
	void OnRep_bFlyToJumpPoint();// 0x256b0a0
	void OnPlaneLeaveVolcanoZone();// 0x256b08c
	void OnPlaneHitted();// 0x256b078
	void OnPlaneEnterVolcanoZone();// 0x256b064
	void OnLocalPlayerParachute(enum LiveState, PlayerState* SelfPlayerState);// 0x256afa8
	void OnEscortEnabledChanged();// 0x256af94
	void OnAllPlayerLeavePlane();// 0x256af80
	void InitTeammatePassagersInfo();// 0x256af6c
	bool HasValidEscortConfig();// 0x256af44
	SpringArmComponent* GetSpringArm();// 0x256af14
	CameraComponent* GetPlaneCamera();// 0x256aee4
	AirForceEscort* GetAirForceEscort();// 0x256aeb4
	void FlyToJumpPoint();// 0x256aea0
	void AirForceFlyAway();// 0x256ae8c
	void AirForceEscort();// 0x256ae78

--------------------------------
Class: AirForceEscort.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x2e4, Size: 4]
	AnimMontage* MontageToPlay;//[Offset: 0x2e8, Size: 4]
	void HandleFlyAwayMontageFinished(AnimMontage* FinishedMontage, bool bInterrupted);// 0x2361770
	void FlyAway();// 0x236175c
	void Escort();// 0x2361748

--------------------------------
Class: EscortSpawner.Object
	float SpawnDelay;//[Offset: 0x1c, Size: 4]
	int EscortPlaneNum;//[Offset: 0x20, Size: 4]
	float InnerRadius;//[Offset: 0x24, Size: 4]
	float OuterRadius;//[Offset: 0x28, Size: 4]
	int RandomSeed;//[Offset: 0x2c, Size: 4]
	class EscortPlane* EscortPlaneClass;//[Offset: 0x30, Size: 4]
	float SpawnInterval;//[Offset: 0x34, Size: 4]
	float SpawnInterval_RandomAdditive;//[Offset: 0x38, Size: 4]
	Vector SpawnCenter;//[Offset: 0x3c, Size: 12]
	Rotator SpawnDirection;//[Offset: 0x48, Size: 12]
	RandomStream RandomStream;//[Offset: 0x54, Size: 8]
	void SpawnEscortPlane(out const Vector Center, out const Rotator Direction);// 0x24627c4
	void SetRandomSeed(int InSeed);// 0x246274c
	int GetRandomSeed();// 0x2462724
	void GetRandomLocation(out Vector OutLocation);// 0x246268c
	void GetPlanes(out EscortPlane*[] Planes);// 0x24625ec

--------------------------------
Class: EscortPlane.Actor.Object
	Transform ActorSpawnedTransform;//[Offset: 0x2f0, Size: 48]
	void ReceivePostTickPosition(float DeltaTime);// 0x46f6b154
	void PlayCameraShake();// 0x2462270
	PlaneCharacter* GetPlaneCharacter();// 0x2462248

--------------------------------
Class: PlaneTypes
	int SeasonIdx;//[Offset: 0x0, Size: 4]
	enum[] ModeTypes;//[Offset: 0x4, Size: 12]
	FString PlaneClassFullPath;//[Offset: 0x10, Size: 12]

--------------------------------
Class: DSAIDropInfo
	uint64 BattleID;//[Offset: 0x0, Size: 8]
	int nts;//[Offset: 0x8, Size: 4]
	DSAIDropItem[] ais;//[Offset: 0xc, Size: 12]

--------------------------------
Class: DSAIDropItem
	uint64 UID;//[Offset: 0x0, Size: 8]
	int Time;//[Offset: 0x8, Size: 4]
	int8 hlv;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MobAIController.BasicAIController.AIController.Controller.Actor.Object
	STExtraSimpleCharacter* ControlledMobPawn;//[Offset: 0x430, Size: 4]
	Vector AIAttackCenterOffset;//[Offset: 0x434, Size: 12]
	FString PlayerDisplayName;//[Offset: 0x440, Size: 12]
	bool bUseDynamicNAV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c, Size: 1]
	bool bUseInterpMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44d, Size: 1]
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0x450, Size: 4]
	Vector ShootTargetLocation;//[Offset: 0x460, Size: 12]
	Actor* OuterActor;//[Offset: 0x46c, Size: 8]
	bool bUseOutActorForAIPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	Actor* CurAIPathActor;//[Offset: 0x478, Size: 8]
	TickControlComponent* TickControlComp;//[Offset: 0x480, Size: 4]
	float NotHurtTargetTimeOfAccelerate;//[Offset: 0x484, Size: 4]
	Fortress* CurFortress;//[Offset: 0x490, Size: 4]
	void SetMoveTargetLoc(out const Vector TargetLoc);// 0x2369f70

--------------------------------
Class: Fortress.Actor.Object
	delegate DoorBeginCloseOrOpen;//[Offset: 0x2ec, Size: 12]
	delegate GarageDoorBeginCloseOrOpen;//[Offset: 0x2f8, Size: 12]
	delegate DoorEndCloseOrOpen;//[Offset: 0x304, Size: 12]
	delegate GarageDoorEndCloseOrOpen;//[Offset: 0x310, Size: 12]
	enum FortressDoorState;//[Offset: 0x31c, Size: 1]
	enum FortressGarageDoorState;//[Offset: 0x31d, Size: 1]
	SceneComponent* FortressRootComponent;//[Offset: 0x320, Size: 4]
	bool bRegisterGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	float OpenLevelCheckDelay;//[Offset: 0x328, Size: 4]
	float CircleContainMaxFloatLength;//[Offset: 0x32c, Size: 4]
	CircleMgrComponent* CacheCircleMgrComponent;//[Offset: 0x330, Size: 4]
	MiniMapData MiniMapData;//[Offset: 0x334, Size: 96]
	STExtraPlayerController*[] PlayerControllerList;//[Offset: 0x394, Size: 12]
	STExtraPlayerController*[] PlayerControllerListAddingOnly;//[Offset: 0x3a0, Size: 12]
	float TickCD;//[Offset: 0x3ac, Size: 4]
	NightBeginEndTime[] NightBeginEndTimeList;//[Offset: 0x3b0, Size: 12]
	Vector2D[] FourCornnerLoc;//[Offset: 0x3bc, Size: 12]
	float FortressRoofZ;//[Offset: 0x3c8, Size: 4]
	float FortressFloorZ;//[Offset: 0x3cc, Size: 4]
	float LuaTickFreq;//[Offset: 0x3d0, Size: 4]
	bool UseBiochemicalTheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d4, Size: 1]
	class Actor* BossTreasure;//[Offset: 0x3d8, Size: 40]
	<int,int> CheatBoxTreasure;//[Offset: 0x400, Size: 60]
	bool UseBiochemicalThemeReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	bool BiochemicalThemeReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43d, Size: 1]
	bool UseSpawnDefaultZombie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43e, Size: 1]
	FString SpawnDefaultZombieTag;//[Offset: 0x440, Size: 12]
	float DelaySpawnDefaultZombie;//[Offset: 0x44c, Size: 4]
	bool UseZombieCountControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	int ZombieCountControlTotal;//[Offset: 0x454, Size: 4]
	int ZombieRoaringSpawnZombieCount;//[Offset: 0x458, Size: 4]
	FString BoxPath;//[Offset: 0x45c, Size: 12]
	FString GunPath;//[Offset: 0x468, Size: 12]
	FString CarPath;//[Offset: 0x474, Size: 12]
	float FuelPercent;//[Offset: 0x480, Size: 4]
	bool bActiveByStartVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	int BossID;//[Offset: 0x488, Size: 4]
	FString BossPath;//[Offset: 0x48c, Size: 12]
	bool UseSpawnBossDelayTimeUITips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	float SpawnBossDelayTime;//[Offset: 0x49c, Size: 4]
	AkAudioEvent* ZombieAlarmBGMAudio;//[Offset: 0x4a0, Size: 4]
	AkAudioEvent* SpawnZombieBGMAudio;//[Offset: 0x4a4, Size: 4]
	AkAudioEvent* SpawnBossBGMAudio;//[Offset: 0x4a8, Size: 4]
	AkAudioEvent* BossDeadBGMAudio;//[Offset: 0x4ac, Size: 4]
	enum BGMStatus;//[Offset: 0x4b0, Size: 1]
	enum FortressContainerState;//[Offset: 0x4b1, Size: 1]
	bool UseModifyFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b2, Size: 1]
	float DelayActiveFortressCD;//[Offset: 0x4b4, Size: 4]
	int TipsID_BossDeath;//[Offset: 0x4b8, Size: 4]
	bool UseMaskFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc, Size: 1]
	byte MaskFilter;//[Offset: 0x4bd, Size: 1]
	int ForbidHideContainer;//[Offset: 0x520, Size: 4]
	int TipsUICountDown;//[Offset: 0x524, Size: 4]
	bool bActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool bSpawnBoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]
	int SpawnBossDelayTimeCur;//[Offset: 0x52c, Size: 4]
	Object*[] HostActionList;//[Offset: 0x530, Size: 12]
	Actor*[] ZombieList;//[Offset: 0x53c, Size: 12]
	SimpleTreasureChest* SimpleTreasureChest;//[Offset: 0x548, Size: 4]
	STExtraZombieCharacter* BossZombie;//[Offset: 0x54c, Size: 4]
	void ShowFortressMiniMapMark(int IconID);// 0x2495150
	void SetToStatic();// 0x249513c
	void SetDoorOpen(int Index, bool bOpen);// 0x46f6b154
	void SetCollisionBoxMaskFilter();// 0x2495128
	void PlayContainerIdleAnimation();// 0x46f6b154
	void PlayContainerDropAnimation();// 0x46f6b154
	void OpenGarageDoor();// 0x23444d8
	void OnRep_FortressGarageDoorState();// 0x46f6b154
	void OnRep_FortressDoorState();// 0x46f6b154
	void OnRep_FortressContainerState();// 0x2495114
	void OnRep_BGMStatus();// 0x2495100
	void OnModifyFortressContainerState(out const enum State);// 0x46f6b154
	void OnFortressGarageDoorEndCloseOrOpen(Fortress* Sender);// 0x2495088
	void OnFortressGarageDoorBeginCloseOrOpen(Fortress* Sender);// 0x2495010
	void OnFortressDoorEndCloseOrOpen(Fortress* Sender);// 0x2494f98
	void OnFortressDoorBeginCloseOrOpen(Fortress* Sender);// 0x2494f20
	void ModifyFortressContainerState(out const enum State);// 0x2494e98
	void LuaTick();// 0x46f6b154
	bool IsPlayerInFortress(STExtraBaseCharacter* STExtraBaseCharacter);// 0x2494e18
	bool IsLocalPlayerInFortress();// 0x2494df0
	bool IsGarageDoorOpenCompleted();// 0x46f6b154
	bool IsGarageDoorCloseCompleted();// 0x46f6b154
	bool IsDoorOpen(int Index);// 0x46f6b154
	bool IsDoorMoving(int Index);// 0x46f6b154
	void InvalidateGameModeDoorState();// 0x2494ddc
	void HideFortressMiniMapMark();// 0x2494dc8
	FortressDoorInfo[] GetFortressDoorInfos();// 0x46f6b154
	int GetDoorCount();// 0x46f6b154
	void FindPlayerInFortress();// 0x2494db4
	void DoorEndCloseOrOpen__DelegateSignature(Fortress* Sender);// 0x46f6b154
	void DoorBeginCloseOrOpen__DelegateSignature(Fortress* Sender);// 0x46f6b154
	void CloseGarageDoor();// 0x234daf8
	void BPStopAkAudioEvent();// 0x46f6b154
	void BPPlayAkAudioEvent(AkAudioEvent* bgm);// 0x46f6b154

--------------------------------
Class: MiniMapData
	int NormalIconID;//[Offset: 0x58, Size: 4]
	int GrayIconID;//[Offset: 0x5c, Size: 4]

--------------------------------
Class: NightBeginEndTime
	float ElapsedSeconds;//[Offset: 0x0, Size: 4]
	bool bDoorClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	UITipsConfig[] FUITipsConfigList;//[Offset: 0x8, Size: 12]

--------------------------------
Class: UITipsConfig
	float UITipsTime;//[Offset: 0x0, Size: 4]
	int TipsID;//[Offset: 0x4, Size: 4]
	bool bNeedNewbieGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bUITipsNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: SimpleTreasureChest.Actor.Object
	enum Status;//[Offset: 0x2e4, Size: 1]
	float BoxCoverRollMax;//[Offset: 0x2e8, Size: 4]
	float TimerOpenBoxCoverTick;//[Offset: 0x2f0, Size: 4]
	float TickCoverRelativeLocRotRatio;//[Offset: 0x2f4, Size: 4]
	ParticleSystem* OpenEffect;//[Offset: 0x2fc, Size: 4]
	BoxComponent* BoxCoverCollision;//[Offset: 0x300, Size: 4]
	void ServerOpenSimpleTreasureChest();// 0x25dcb5c
	void OnRep_Status();// 0x25dcb48
	void BPOpenSimpleTreasureChest(bool IsIdle);// 0x46f6b154

--------------------------------
Class: STExtraZombieCharacter.STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	enum ZombieKD;//[Offset: 0xf30, Size: 1]
	FString MonsterName;//[Offset: 0xf34, Size: 12]
	float MoveSpeedScaleInNight;//[Offset: 0xf40, Size: 4]
	bool bDropDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf44, Size: 1]
	float HeadDamageScale;//[Offset: 0xf48, Size: 4]
	bool bInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4c, Size: 1]
	ProduceDropItemComponent* dropItemCom;//[Offset: 0xf50, Size: 4]
	Actor* HostActor;//[Offset: 0xf54, Size: 4]
	Object* HostAction;//[Offset: 0xf60, Size: 4]
	FString DefaultTag;//[Offset: 0xf64, Size: 12]
	FString ItemValueCategory;//[Offset: 0xf70, Size: 12]
	FString DropBulletCfgTableName;//[Offset: 0xf8c, Size: 12]
	float InvincibleTime;//[Offset: 0xf98, Size: 4]
	byte CurrentHealthState;//[Offset: 0xf9c, Size: 1]
	byte MaskFilter;//[Offset: 0xf9d, Size: 1]
	bool ForbidRoaring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfac, Size: 1]
	int MiniMapIconID;//[Offset: 0xfb0, Size: 4]
	float MiniMapTickInterval;//[Offset: 0xfb4, Size: 4]
	bool bUpdateMiniMapIconOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfb8, Size: 1]
	bool bUpdateMiniMapIconOnServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfb8, Size: 1]
	float MiniMapIconUpdateDistanceThresold;//[Offset: 0xfbc, Size: 4]
	bool EndViewTargetUseCharacterRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd8, Size: 1]
	void UpdateMiniMap();// 0x270a36c
	void ShowMiniMap();// 0x270a358
	void RefreshPlayerName();// 0x270a344
	void PossessedBy(Controller* NewController);// 0x26256d4
	void OnWeatherChangeEvent(DynamicWeatherMgr* WeatherMgr, out const WeatherChangeEvent Event);// 0x270a274
	void OnRespawned_BP();// 0x46f6b154
	void OnRepOwnerEvent();// 0x46f6b154
	void OnRepInWater();// 0x270a260
	void OnRep_ZombieHealthState();// 0x270a24c
	void OnRep_SetMaskFilter();// 0x270a238
	void OnRep_Owner();// 0x270a21c
	void OnRecycled_BP();// 0x46f6b154
	void OnInWaterStateChange(bool InWater);// 0x46f6b154
	void HideMiniMap();// 0x270a208
	Rotator GetViewRotation();// 0x2620434
	float GetMoveForwardRate();// 0x270a1d8
	void GetMiniMapLocationAndRotation(out Vector OutLocation, out Rotator OutRotation);// 0x270a0ec
	float GetForwardVel();// 0x270a0c4
	void DoZombieCharacterCallBackDelegate(FString Tag);// 0x2709fe0
	void BroadcastZombieHealthStateChange(byte CurrentState);// 0x2709f60
	void BP_OnHealthStateChange(byte CurrentState, bool bPlayAnimation);// 0x46f6b154

--------------------------------
Class: FortressDoorInfo
	enum FortressDoorCategory;//[Offset: 0x0, Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	Vector WorldLocation;//[Offset: 0x4, Size: 12]

--------------------------------
Class: STBuildingActorBase.BuildingActorBase.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x454, Size: 12]
	BoxComponent* DoorDetectBox;//[Offset: 0x460, Size: 4]
	float ReturnRate;//[Offset: 0x464, Size: 4]
	bool bCheckMeshOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468, Size: 1]
	float PickupRangeSquared;//[Offset: 0x46c, Size: 4]
	bool bImmuneToTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470, Size: 1]
	float VehicleHitDamageFactor;//[Offset: 0x474, Size: 4]
	float MinVehicleHitVelSize;//[Offset: 0x478, Size: 4]
	float MaxVehicleHitVelSize;//[Offset: 0x47c, Size: 4]
	FString BuildingQuickSignTypeID;//[Offset: 0x480, Size: 12]
	class Actor* DoorBaseClass;//[Offset: 0x48c, Size: 4]
	FString OwnerPlayerUID;//[Offset: 0x490, Size: 12]
	STCustomMeshComponent* StaticMesh;//[Offset: 0x49c, Size: 4]
	AnimSequence* BornAnimation;//[Offset: 0x4a0, Size: 4]
	AnimSequence* LoopAnimation;//[Offset: 0x4a4, Size: 4]
	bool bCheckDoorCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 1]
	bool UseLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 1]
	AkAudioEvent* DestroyAkEvent;//[Offset: 0x4ac, Size: 4]
	AkAudioEvent* RecycleAkEvent;//[Offset: 0x4b0, Size: 4]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x4b4, Size: 4]
	float LifeSpanBeforeFighting;//[Offset: 0x4b8, Size: 4]
	float VehicleDamageCD;//[Offset: 0x4bc, Size: 4]
	bool bRefreshSKillCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	class UTSkill* AssociatedSkill;//[Offset: 0x4c8, Size: 40]
	float CDScaleFactor;//[Offset: 0x4f0, Size: 4]
	bool bIsBeginAnimationPlayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 1]
	bool bDestroyAnimationPlayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 1]
	AIShootingOffsetComponent* AIShootingOffsetComp;//[Offset: 0x504, Size: 4]
	TimerHandle DestroyAnimationTimeHandle;//[Offset: 0x510, Size: 8]
	TimerHandle BornAnimaionTimeHandle;//[Offset: 0x518, Size: 8]
	uint16 TickFrequencyPerCollisionCheck;//[Offset: 0x532, Size: 2]
	FString OverlapCheckComponnentName;//[Offset: 0x534, Size: 12]
	ShapeComponent* OverlapCheckComp;//[Offset: 0x544, Size: 4]
	void OnRespawned();// 0x245bdf0
	void OnRep_IsBeginAnimationPlayed();// 0x25f4330
	void OnRecycled();// 0x25f4314
	void OnPlayerLeave(STExtraBaseCharacter* Character);// 0x46f6b154
	void OnPlayerEnter(STExtraBaseCharacter* Character);// 0x46f6b154
	void OnLeaveRegion();// 0x46f6b154
	void OnEnterRegion();// 0x46f6b154
	void Multicast_PlayDestroyAnimation(bool bUseParticle);// 0x25f424c
	void HandleBuildingTakeAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x25f40b4
	float HandleBuildingModifyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x25f3f5c
	int GetTeamId();// 0x25f3f40
	Actor* GetOwnerByUID();// 0x25f3f18
	enum[] GetDamageableGameObjectType();// 0x25f3e7c
	void DrawVehicleDebugString(float Vel, float FinalDamageTaken, bool bTookDamage);// 0x25f3d6c
	void BP_OnRespawned();// 0x46f6b154
	void BP_OnRecycled();// 0x46f6b154

--------------------------------
Class: BuildingActorBase.Actor.Object
	class Object[] VisibilitySkipTypes;//[Offset: 0x2f8, Size: 12]
	BuildingActorWorldSnapSetup WorldSnapSetup;//[Offset: 0x304, Size: 36]
	float DebugHealthDistance;//[Offset: 0x328, Size: 4]
	Vector DebugHealthOffset;//[Offset: 0x32c, Size: 12]
	class Object[] ProhibitedActorTemplateList;//[Offset: 0x338, Size: 12]
	SoftObjectPath PreBuildingEffectPath;//[Offset: 0x348, Size: 24]
	bool CanBuildUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	bool bShouldSnapToWorldGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	float UnderWaterMaxBuildDepth;//[Offset: 0x364, Size: 4]
	Transform DestroyedParticleTransformOffset;//[Offset: 0x370, Size: 48]
	SoftObjectPath DestroyBuildingEffectPath;//[Offset: 0x3a0, Size: 24]
	Vector ActorCollisionBoxExtern;//[Offset: 0x3b8, Size: 12]
	Vector ActorCollisionBoxCenter;//[Offset: 0x3c4, Size: 12]
	float Health;//[Offset: 0x3d0, Size: 4]
	float MaxDeviation;//[Offset: 0x3d4, Size: 4]
	float MaxTraceDepth;//[Offset: 0x3d8, Size: 4]
	bool bDoQuadTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc, Size: 1]
	byte ConstructingMode;//[Offset: 0x3dd, Size: 1]
	static void SpawnDestroyParticle(bool bSpawnParticle, out const Transform Loc, out const SoftObjectPath DestroyBuildingEffectPath, World* World);// 0x57534d0
	void PlayDestroyAnimation(bool bUseParticle);// 0x5753440
	void OnPlayDestroyAnimation(bool bUseParticle);// 0x46f6b154
	void OnBuildingActorDamaged(float Health);// 0x241d0b0
	void HandleBuildingTakeAnyDamage(Actor* DamagedActor, float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x25f40b4
	int GetBuildID();// 0x5753424

--------------------------------
Class: STCustomMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object[] ObjectsForChecking;//[Offset: 0x648, Size: 12]
	FName[] ObjectsNamesForIgnore;//[Offset: 0x654, Size: 12]
	byte InitCollisionType;//[Offset: 0x660, Size: 1]
	void SetCollisionTraceFlag(byte flag);// 0x25ff398
	void RebuildBodyWithCollisionTraceFlag(byte flag);// 0x25ff320
	bool CheckAnyOverlappingActor(World* World, Transform tranx);// 0x25ff1f0

--------------------------------
Class: BuildingActorWorldSnapSetup
	Vector GridSizeScale;//[Offset: 0x0, Size: 12]
	Vector Pivot;//[Offset: 0xc, Size: 12]
	Rotator SnapRotation;//[Offset: 0x18, Size: 12]

--------------------------------
Class: AnimalAIController.BasicAIController.AIController.Controller.Actor.Object
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0x3e8, Size: 4]
	float TurnVelocity;//[Offset: 0x3ec, Size: 4]
	float SetAirDropTargetInterval;//[Offset: 0x3f0, Size: 4]
	float IgnoreMoveCollisionTimeWhenBlocked;//[Offset: 0x3f4, Size: 4]
	float IgnoreMoveCollisionSetInterval;//[Offset: 0x3f8, Size: 4]
	Box[] FindMovePointLimitArea;//[Offset: 0x438, Size: 12]
	TickControlComponent* TickControlComp;//[Offset: 0x444, Size: 4]
	void SetMoveTargetLoc(out const Vector TargetLoc);// 0x2369f70
	void SetHasBorn(bool bHasBorn);// 0x2369ee8
	void SetCaughtOwner(Actor* CaughtOwner);// 0x2369e68
	void RunBehaviorTreeWithIndex(int TreeIndex);// 0x2369de8
	void OnAirDropLandGroup(Actor* AirDropBoxActor, bool bIsInWater);// 0x2369d24

--------------------------------
Class: AnimalTeleportComponent.ActorComponent.Object
	AnimalDeliverRatingConfig[] ChickDeliverConfig;//[Offset: 0xd0, Size: 12]
	AnimalDeliverRatingConfig[] DeerDeliverConfig;//[Offset: 0xdc, Size: 12]
	AnimalDeliverRatingConfig[] GoblinDeliverConfig;//[Offset: 0xe8, Size: 12]
	AnimalDeliverRatingConfig[] IceDeliverConfig;//[Offset: 0xf4, Size: 12]
	AnimalDeliverAreaLimit[] DeliveryAreaLimit;//[Offset: 0x100, Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0x10c, Size: 8]
	AIGroupManagerComponent* AIGroupMgrComp;//[Offset: 0x114, Size: 8]
	AnimalDeliverConfiguration* GoblinDeliverConfiguration;//[Offset: 0x11c, Size: 4]
	AnimalDeliverConfiguration* IceDeliverConfiguration;//[Offset: 0x120, Size: 4]
	<STExtraPlayerCharacter*> DeliveredGoblinPlayers;//[Offset: 0x124, Size: 60]
	<STExtraPlayerCharacter*> DeliveredIcePlayers;//[Offset: 0x160, Size: 60]
	<enum,int> DeleverCountPerWave;//[Offset: 0x2a4, Size: 60]

--------------------------------
Class: AnimalDeliverRatingConfig
	float RightRatingSection;//[Offset: 0x0, Size: 4]
	uint32 DeliverGroupNumPerWave;//[Offset: 0x4, Size: 4]
	float DeliverBeginTime;//[Offset: 0x8, Size: 4]
	float DeliveryWaveInterval;//[Offset: 0xc, Size: 4]
	float DeliverEndTime;//[Offset: 0x10, Size: 4]
	uint32 FullFeedLimit;//[Offset: 0x14, Size: 4]
	float DeliverFreqInterval;//[Offset: 0x18, Size: 4]
	int DeliverNumEachFreq;//[Offset: 0x1c, Size: 4]
	<int,int> DeliverCountByPlayerNum;//[Offset: 0x20, Size: 60]

--------------------------------
Class: AnimalDeliverAreaLimit
	Vector TopLeft;//[Offset: 0x0, Size: 12]
	Vector BottomRight;//[Offset: 0xc, Size: 12]

--------------------------------
Class: AnimalDeliverConfiguration.Object
	AnimalDeliverStrategy*[] TeamDeliverStrategies;//[Offset: 0x1c, Size: 12]
	AnimalDeliverStrategy*[] IndividualDeliverStrategies;//[Offset: 0x28, Size: 12]

--------------------------------
Class: AnimalDeliverStrategy.Object
	byte Priority;//[Offset: 0x1c, Size: 1]
	enum SortStrategy;//[Offset: 0x5c, Size: 1]
	enum SelectStrategy;//[Offset: 0x5d, Size: 1]

--------------------------------
Class: FortressComponent.ActorComponent.Object
	bool bEnableNavigationConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	float DistanceLimitForRestartBehaviorTree;//[Offset: 0xd4, Size: 4]
	FString[] FortressNavMeshPathes;//[Offset: 0xd8, Size: 12]
	FString[] FortressNavLinkPathes;//[Offset: 0xe4, Size: 12]
	class NavigationQueryFilter[] FortressFilters;//[Offset: 0xf0, Size: 12]
	bool ToggleFortressDoor(int Type, bool bOpen, Vector[] DoorLocations);// 0x249603c
	bool IsOuterDoorOpen();// 0x2496014
	bool IsInnerDoorOpen();// 0x2495fec
	bool IsFortressMode();// 0x2495fc4
	class NavigationQueryFilter GetNavigationQueryFilterClass(bool bEnableGotoWater, AIController* AIC);// 0x2495ef4
	int GetActiveAreaID();// 0x2359210
	bool EnableArea(int AreaID);// 0x2495e74

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	class Actor[] IgnoreClassesNeverRemove;//[Offset: 0x244, Size: 12]
	float CurDestroyActorTime;//[Offset: 0x260, Size: 4]
	bool CanUnLoadLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool CanUnLoadCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	float CurLandUpdateTime;//[Offset: 0x268, Size: 4]
	float UpdateLandState;//[Offset: 0x26c, Size: 4]
	int[] SafeArearList;//[Offset: 0x270, Size: 12]
	int[] SafeArearCollisionList;//[Offset: 0x27c, Size: 12]
	float DistanceToUnloadcollision;//[Offset: 0x288, Size: 4]
	void TickSafeTileList();// 0x235d4b8
	void TickLandState(float DeltaTime);// 0x236ffe8
	void TickDestoryNoAcitveWorldActor();// 0x27dcf30
	void RefreshWorldActiveRange();// 0x27dcf1c
	bool NeedRefreshWorldRange();// 0x259b02c
	void InitWorldActiveRange();// 0x27dcf08
	bool GetAcitveCircleRange(out Vector VisibleLocation, out float Radius);// 0x27dce18
	void DestroyNoActiveWorldActor(out Vector Location, out float Radius);// 0x27dcd30

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0x244, Size: 4]
	SpawnGroupItemInfo[] SpawnGroupInfoList;//[Offset: 0x248, Size: 12]
	<int,SpawnTableData> PawnTableData;//[Offset: 0x254, Size: 60]
	SpawnByCharacterLocData SpawnByCharacterData;//[Offset: 0x294, Size: 20]
	int GroupID;//[Offset: 0x2a8, Size: 4]
	int SpawnDisRang;//[Offset: 0x2ac, Size: 4]
	int RefreshMonsterParm_NoMeetEnemiesTime;//[Offset: 0x2b0, Size: 4]
	float RefreshMonsterParm_DistanceFromPlayers;//[Offset: 0x2b4, Size: 4]
	float RefreshMonsterParm_RemainHealthRatio;//[Offset: 0x2b8, Size: 4]
	void InitialItemTable();// 0x24e5e68

--------------------------------
Class: SpawnGroupItemInfo
	int PawnGroupID;//[Offset: 0x0, Size: 4]
	int PawnPercent;//[Offset: 0x4, Size: 4]
	MonsterGropDataDetail[] MonsterGroupDetailInfos;//[Offset: 0x8, Size: 12]

--------------------------------
Class: MonsterGropDataDetail
	int PawnID;//[Offset: 0x0, Size: 4]
	int MonsterNumber;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SpawnTableData
	int PawnID;//[Offset: 0x0, Size: 4]
	FString PathName;//[Offset: 0x4, Size: 12]
	FString MetaData;//[Offset: 0x10, Size: 12]

--------------------------------
Class: SpawnByCharacterLocData
	int SpawnRandomDistance;//[Offset: 0x0, Size: 4]
	int NoAIAttackTimeDelt;//[Offset: 0x4, Size: 4]
	int DistanceNoEnemy;//[Offset: 0x8, Size: 4]
	int HpPercentage;//[Offset: 0xc, Size: 4]
	int MaxSpawnNum;//[Offset: 0x10, Size: 4]

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<enum,SoundConfig> SoundConfig;//[Offset: 0xd0, Size: 60]
	enum[] HearSoundCharacterTypes;//[Offset: 0x10c, Size: 12]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x118, Size: 8]
	void OnProjectileExplode(Actor* Projectile);// 0x2367b18

--------------------------------
Class: SoundConfig
	float TransDist;//[Offset: 0x0, Size: 4]
	bool bSetBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FName[] BlackboardNameList;//[Offset: 0x8, Size: 12]
	class SoundHearFilter* FilterClass;//[Offset: 0x14, Size: 4]

--------------------------------
Class: SoundHearFilter.Object

--------------------------------
Class: AIGridLocationManagerComponent.ActorComponent.Object
	bool bOpenAIAvoidPlayerGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	AIGridLocationDataAvoidPlayer AIAvoidPlayerGridData;//[Offset: 0xd4, Size: 108]
	bool bGetCharacterFromWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	bool bDrawAIAvoidPlayerGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x141, Size: 1]
	float DrawAIAvoidPlayerGridInterval;//[Offset: 0x144, Size: 4]
	float DrawAIAvoidPlayerGridZOffset;//[Offset: 0x148, Size: 4]

--------------------------------
Class: AIGridLocationDataAvoidPlayer.AIGridLocationDataBase
	int PlayerCoverGridRadius;//[Offset: 0x1c, Size: 4]
	enum PathDirN;//[Offset: 0x20, Size: 1]
	float PlayerCoverAddCost;//[Offset: 0x24, Size: 4]
	float PlayerCoverCostNearbyDesc;//[Offset: 0x28, Size: 4]
	float NoPlayerCoverCost;//[Offset: 0x2c, Size: 4]
	float AvoidPlayerConsiderRange;//[Offset: 0x30, Size: 4]
	int TryFindGridLocTimes;//[Offset: 0x34, Size: 4]
	float FindGridLocSizeScale;//[Offset: 0x38, Size: 4]

--------------------------------
Class: AIGridLocationDataBase
	float GridSize;//[Offset: 0x4, Size: 4]

--------------------------------
Class: PlayerRespawnComponent.GameModeBaseComponent.ActorComponent.Object
	bool bIsEnableRespawnKeepItemsConfig_Record;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bIsRespawnGenerateInitialItems_Record;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	float DefaultPlayerRespawnTime;//[Offset: 0xec, Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0xf0, Size: 4]
	enum RespawnPointType;//[Offset: 0xf4, Size: 1]
	bool bIsRespawnGenerateInitialItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5, Size: 1]
	bool bIsRespawnKeepSuitSkinConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6, Size: 1]
	bool bIsEnableRespawnKeepItemsConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7, Size: 1]
	RespawnKeepItemsConfig RespawnKeepItemsConfig;//[Offset: 0xf8, Size: 52]
	GMDataSource_PlayerRespawn* DataSource;//[Offset: 0x1a4, Size: 4]
	void RespawnTimerCallBack(uint32 PlayerKey);// 0x2576654
	void RespawnPlayer_Internal(uint32 PlayerKey);// 0x25765dc
	void RespawnAllPlayer();// 0x25765c8
	void ResetRespawnKeepItemsConfig();// 0x25765b4
	void RemoveRespawnPlayer(uint32 PlayerKey);// 0x257653c
	void RecordPlayerRespawnKeepItems(uint32 PlayerKey);// 0x25764c4
	void OnPlayerLogout(PlayerController* PlayerController);// 0x257644c
	void OnPlayerKilled(uint32 PlayerKey, uint32 KillerKey, bool bIsAI);// 0x2576344
	bool IsKeepItem(ItemDefineID ItemDefineID);// 0x25762b4
	void InitPlayerRespawnItem(uint32 PlayerKey);// 0x257623c
	float GetRespawnInvincibleTime();// 0x2576220
	void GenerateRespawnKeepItems(uint32 PlayerKey, out const RespawnKeepAllItemData RespawnKeepAllItemData);// 0x25760a4
	void EnableRespawnKeepItemsConfig();// 0x2576090
	void ClearAllPlayerRespawnTimer();// 0x257607c
	void AddRespawnTimer(uint32 PlayerKey, int RespawnTime);// 0x2575fc0
	void AddRespawnPlayerWithTime(uint32 PlayerKey, float ResapwnTime);// 0x2575f04
	void AddRespawnPlayer(int64 PlayerKey);// 0x2575e88
	void AddInvincibleBuff(STExtraBaseCharacter* BaseCharacter);// 0x2575e10

--------------------------------
Class: RespawnKeepItemsConfig
	bool bEffectiveForAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bDeathAutoRecord;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bUseKeepItemTypeWhiteList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	int[] KeepItemTypeWhiteList;//[Offset: 0x4, Size: 12]
	int[] KeepItemTypeBlackList;//[Offset: 0x10, Size: 12]
	int[] KeepItemIDWhiteList;//[Offset: 0x1c, Size: 12]
	int[] KeepItemIDBlackList;//[Offset: 0x28, Size: 12]

--------------------------------
Class: GMDataSource_PlayerRespawn.GMDataSource.Object
	float DefaultPlayerRespawnTime;//[Offset: 0x20, Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0x24, Size: 4]
	enum RespawnPointType;//[Offset: 0x28, Size: 1]
	bool bIsRespawnGenerateInitialItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bIsRespawnKeepSuitSkinConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool bIsEnableRespawnKeepItemsConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	RespawnKeepItemsConfig RespawnKeepItemsConfig;//[Offset: 0x2c, Size: 52]

--------------------------------
Class: RespawnKeepAllItemData
	RespawnKeepItemData[] ItemDatas;//[Offset: 0x0, Size: 12]
	RespawnKeepWeaponData[] WeaponDatas;//[Offset: 0xc, Size: 12]

--------------------------------
Class: RespawnKeepItemData
	int ItemTypeID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: RespawnKeepWeaponData.RespawnKeepItemData
	byte WeaponSlot;//[Offset: 0x14, Size: 1]
	RespawnKeepItemData[] AttachmentDatas;//[Offset: 0x18, Size: 12]

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	RespawnItemMajorGroup[] MajorGroupList;//[Offset: 0x20, Size: 12]

--------------------------------
Class: RespawnItemMajorGroup
	int RandomTimes;//[Offset: 0x0, Size: 4]
	RespawnItemMinorGroup[] MinorGroupList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItemMinorGroup
	int RandomWeight;//[Offset: 0x0, Size: 4]
	RespawnItem[] ItemList;//[Offset: 0x4, Size: 12]

--------------------------------
Class: RespawnItem
	int ItemTableID;//[Offset: 0x0, Size: 4]
	int Count;//[Offset: 0x4, Size: 4]

--------------------------------
Class: RespawnItemConfigInst
	int RandomWeight;//[Offset: 0x0, Size: 4]
	class RespawnItemConfig* RespawnItemConfigClass;//[Offset: 0x4, Size: 4]
	bool bSpecialUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: GameModeParms
	SubSystemConfig SSC_DeferredExitGame;//[Offset: 0x0, Size: 24]
	SubSystemConfig SSC_RecallTeammate;//[Offset: 0x18, Size: 24]
	SubSystemConfig SSC_RescueHelicopter;//[Offset: 0x30, Size: 24]
	SubSystemConfig SSC_HeavyWeapon;//[Offset: 0x48, Size: 24]
	SubSystemConfig SSC_Hero;//[Offset: 0x60, Size: 24]
	SubSystemConfig SSC_TeamSystem;//[Offset: 0x78, Size: 24]
	SubSystemConfig SSC_ClassicPlane;//[Offset: 0x90, Size: 24]
	SubSystemConfig SSC_AIProbe;//[Offset: 0xa8, Size: 24]
	SubSystemConfig SSC_AIActing;//[Offset: 0xc0, Size: 24]
	SubSystemConfig SSC_Circle;//[Offset: 0xd8, Size: 24]
	SubSystemConfig SSC_AttrModify;//[Offset: 0xf0, Size: 24]
	SubSystemConfig SSC_AirDrop;//[Offset: 0x108, Size: 24]
	SubSystemConfig SSC_AirAttack;//[Offset: 0x120, Size: 24]
	SubSystemConfig SSC_PlayerRespawn;//[Offset: 0x138, Size: 24]
	SubSystemConfig SSC_DynamicSpawn;//[Offset: 0x150, Size: 24]
	SubSystemConfig SSC_Observer;//[Offset: 0x168, Size: 24]
	SubSystemConfig SSC_WorldActorFlag;//[Offset: 0x180, Size: 24]
	SubSystemConfig SSC_ShrinkManager;//[Offset: 0x198, Size: 24]
	SubSystemConfig SSC_SuperCold;//[Offset: 0x1b0, Size: 24]
	SubSystemConfig SSC_TDMHardPoint;//[Offset: 0x1c8, Size: 24]
	SubSystemConfig SSC_AITeamManager;//[Offset: 0x1e0, Size: 24]
	SubSystemConfig SSC_VisualField;//[Offset: 0x1f8, Size: 24]
	SubSystemConfig SSC_NewYearActivity;//[Offset: 0x210, Size: 24]
	SubSystemConfig SSC_YearBeast;//[Offset: 0x228, Size: 24]
	SubSystemConfig SSC_Fortress;//[Offset: 0x240, Size: 24]
	SubSystemConfig SSC_ARWeaponManager;//[Offset: 0x258, Size: 24]
	SubSystemConfig SSC_SignalGunGame;//[Offset: 0x270, Size: 24]
	SubSystemConfig SSC_PlayerStartManager;//[Offset: 0x288, Size: 24]
	SubSystemConfig SSC_GlobalSettings;//[Offset: 0x2a0, Size: 24]
	SubSystemConfig SSC_EmotionalMemory;//[Offset: 0x2b8, Size: 24]
	SubSystemConfig[] AdditionalSubSystems;//[Offset: 0x2d0, Size: 12]

--------------------------------
Class: SubSystemConfig
	enum SubSystemId;//[Offset: 0x0, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum ConstructType;//[Offset: 0x2, Size: 1]
	class Object* SubSystemClass;//[Offset: 0x4, Size: 4]
	DynamicCompConfig DCC_PlayerController;//[Offset: 0x8, Size: 8]
	DynamicCompConfig DCC_PlayerPawn;//[Offset: 0x10, Size: 8]

--------------------------------
Class: GMGeneralConfigData
	int appleGrenadeID;//[Offset: 0x0, Size: 4]
	int appleGrenadeCount;//[Offset: 0x4, Size: 4]
	int DebugPlayerNumPerTeam;//[Offset: 0x8, Size: 4]
	FString GameModeUI;//[Offset: 0xc, Size: 12]
	int[] forbitPickItemTypeList;//[Offset: 0x18, Size: 12]
	FString PlaneClassPath;//[Offset: 0x24, Size: 12]
	FString PlaneBTPath;//[Offset: 0x30, Size: 12]

--------------------------------
Class: GameModeWeaponConfigBase.DataAsset.Object
	<int,float> WeaponIDAndDamageOverrideMap;//[Offset: 0x20, Size: 60]
	void OverrideWeaponConfigProperties(STExtraWeapon* Weapon, int ID);// 0x24ad8e8
	float GetOverrideDamageByWeaponID(int ID);// 0x24ad868

--------------------------------
Class: AutoTestInterface.ActorComponent.Object
	void StartFire(int X, int Y, int Z, int MilliSec);// 0x2378d90
	void StarJumpPlane();// 0x2378d7c

--------------------------------
Class: AutoRunTest.ActorComponent.Object

--------------------------------
Class: UIAdaptationStructure
	FString DeviceName_2_A8CF6E1F40D8116DD8A17D97AD6515ED;//[Offset: 0x0, Size: 12]
	float LeftOffset_5_61C5916847A6DB0845C03799C935F0CD;//[Offset: 0xc, Size: 4]
	float RightOffset_7_338321234218040563FB88B423EA8023;//[Offset: 0x10, Size: 4]
	float TopOffset_9_68D32A004301A63A4ABF20B129DBC8DE;//[Offset: 0x14, Size: 4]
	float BottomOffset_11_0C31E5BC4AA9CD8E9DBA4A9D456E101E;//[Offset: 0x18, Size: 4]

--------------------------------
Class: BP_SAVEGAME_UIElemLayout_C.SaveGame.Object
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict1;//[Offset: 0x20, Size: 60]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict2;//[Offset: 0x5c, Size: 60]
	<int,BP_STRUCT_UIElemLayoutDetail> LayoutDetailDict3;//[Offset: 0x98, Size: 60]
	bool IsDataValid1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool IsDataValid2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool IsDataValid3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	float RushTriggerLength1;//[Offset: 0xd8, Size: 4]
	float RushTriggerLength2;//[Offset: 0xdc, Size: 4]
	float RushTriggerLength3;//[Offset: 0xe0, Size: 4]
	FString SaveSlotName;//[Offset: 0xe4, Size: 12]
	FString LayoutName1;//[Offset: 0xf0, Size: 12]
	FString LayoutName2;//[Offset: 0xfc, Size: 12]
	FString LayoutName3;//[Offset: 0x108, Size: 12]
	int TimeTag;//[Offset: 0x114, Size: 4]
	int[] InvalidArray1;//[Offset: 0x118, Size: 12]
	int[] InvalidArray2;//[Offset: 0x124, Size: 12]
	int[] InvalidArray3;//[Offset: 0x130, Size: 12]

--------------------------------
Class: BP_STRUCT_UIElemLayoutDetail
	int Type_23_55DBE0E544DAFBECC9EFB6BB17ABA028;//[Offset: 0x0, Size: 4]
	Vector2D Scale_17_041C81B04F88C44906CC9C9124ED2CF5;//[Offset: 0x4, Size: 8]
	float Opacity_7_DA1E8BC343F74DC18A9B0FBB6DA17CCB;//[Offset: 0xc, Size: 4]
	Anchors AnchorType_16_8C6A88824F5B4009F1532EBCA05CA534;//[Offset: 0x10, Size: 16]
	Vector2D RelativePos_19_41E2D4F647EC741044D6AC9C8DD94ED4;//[Offset: 0x20, Size: 8]
	Vector2D OriginSize_22_61D9CB8A48FFB415806311A1771BDF74;//[Offset: 0x28, Size: 8]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x310, Size: 1328]
	float Priority;//[Offset: 0x840, Size: 4]
	float BlendRadius;//[Offset: 0x844, Size: 4]
	float BlendWeight;//[Offset: 0x848, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84c, Size: 1]
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x4a3d174

--------------------------------
Class: BP_TrajectoryMove_C.TrajectoryWithParticleActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x358, Size: 4]
	STExtraPlayerCharacter* GetNextTarPlayer(STExtraPlayerState*[] TempTestPlayerList, int TempIndex, STExtraPlayerCharacter*[] TempPlayers, int Temp_int_Array_Index_Variable, FString CallFunc_Conv_IntToString_ReturnValue, int Temp_int_Loop_Counter_Variable, STExtraPlayerCharacter* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, float CallFunc_Conv_IntToFloat_ReturnValue, STExtraPlayerState* CallFunc_GetPlayerStateSafety_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, STExtraPlayerState*[] CallFunc_GetTeamMatePlayerStateList_OutList, int CallFunc_Array_Length_ReturnValue2, STExtraPlayerState* CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue, STExtraBaseCharacter* CallFunc_GetPlayerCharacter_ReturnValue, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_Dist2D_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	void OnRep_TrajectoryMoveState(enum OldState);// 0x46f6b154
	void OnRep_ShowStatus();// 0x46f6b154
	void ExecuteUbergraph_BP_TrajectoryMove(int EntryPoint, enum K2Node_Event_OldState, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x46f6b154
	SceneComponent* DefaultSceneRoot;//[Offset: 0x35c, Size: 4]

--------------------------------
Class: TrajectoryWithParticleActor.Actor.Object
	STExtraPlayerCharacter* InitPlayerCharacter;//[Offset: 0x2e4, Size: 4]
	STExtraPlayerCharacter* TarPlayerCharacter;//[Offset: 0x2e8, Size: 4]
	Vector CurInitPos;//[Offset: 0x2ec, Size: 12]
	float CurLifeTimer;//[Offset: 0x2f8, Size: 4]
	float CurStayTimer;//[Offset: 0x2fc, Size: 4]
	enum CurMoveState;//[Offset: 0x300, Size: 1]
	bool bShowStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	enum[] DestoryPawnState;//[Offset: 0x304, Size: 12]
	enum[] TempHiddenPawnState;//[Offset: 0x310, Size: 12]
	enum[] BackPawnState;//[Offset: 0x31c, Size: 12]
	float InitMaxStayTime;//[Offset: 0x328, Size: 4]
	float TarMaxStayTime;//[Offset: 0x32c, Size: 4]
	float InStayRange;//[Offset: 0x330, Size: 4]
	float LifeTotalTime;//[Offset: 0x334, Size: 4]
	int MaxEffectDistance;//[Offset: 0x338, Size: 4]
	float MoveSpeed;//[Offset: 0x33c, Size: 4]
	float MovementSmoothSpeed;//[Offset: 0x340, Size: 4]
	float MovementSmoothAlpha;//[Offset: 0x344, Size: 4]
	bool bOpenBufferMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	Vector LastRepLoc;//[Offset: 0x34c, Size: 12]
	void SetTarjectorInitData(STExtraPlayerCharacter* InPlayerCharacter);// 0x250a840
	void OnRep_TrajectoryMoveState(enum OldState);// 0x244d76c
	void OnRep_ShowStatus();// 0x234daf8
	bool IsNeedDestory();// 0x273c7cc
	bool IsNeedBack();// 0x273c79c
	bool IsInStayTarState();// 0x273c76c
	bool IsInStayInitState();// 0x273c73c
	void HandleSwitchMoveState(enum NextState);// 0x273c6bc
	STExtraPlayerCharacter* GetNextTarPlayer();// 0x273c68c

--------------------------------
Class: PlanGReportEventComp.ActorComponent.Object
	float VerifyTrampleMaxDist;//[Offset: 0xd0, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0xd4, Size: 4]
	void RPC_Server_Trample(Pawn* InBehemoth, Pawn* InVictim, class DamageType DamageTypeClass);// 0x256e014
	void RPC_Server_Destroy_APEXCamp(Pawn* InBehemoth, Actor* InAPEXCamp);// 0x256df18
	void ClientTrample(Pawn* InBehemoth, Actor* InVictim, class DamageType DamageTypeClass);// 0x256de18
	void ClientOpenSurroundPawnCollision(Vector InStartLoc, float InRadius, bool InIsOpen);// 0x256dcfc

--------------------------------
Class: PlayerCameraPossessManager_BP_C.PlayerCameraPossessManager.CameraPossessManager.ActorComponent.Object

--------------------------------
Class: BP_GISPlayerComponent_C.STExtraGISPlayerComponen.GISPlayerComponentBase.ActorComponent.Object

--------------------------------
Class: STExtraGISPlayerComponen.GISPlayerComponentBase.ActorComponent.Object

--------------------------------
Class: BP_TipsManager_C.TipsManager.ActorComponent.Object

--------------------------------
Class: TipsManager.ActorComponent.Object
	<int,AdvancedTipConfig> AdvancedTipsConfigMap;//[Offset: 0xd0, Size: 60]
	AdvancedTipConfig DefaultTipConfig;//[Offset: 0x110, Size: 568]
	byte MaxPriority;//[Offset: 0x348, Size: 1]
	<int,PopUpWindowConfig> PopUpWindowConfigMap;//[Offset: 0x34c, Size: 60]
	<int,DevTipConfig> DevTipConfigMap;//[Offset: 0x388, Size: 60]
	AdvancedTipConfig[] WaitingTips;//[Offset: 0x3c4, Size: 12]
	TopTipWidget* CurrentTipWidget;//[Offset: 0x3e4, Size: 8]
	TopTipWidget*[] PopUpWindowsList;//[Offset: 0x3ec, Size: 12]
	bool TryShowTipByTypeAndID(byte TipType, int ID, FString param1, FString param2, UAEBlackboard* ExtraParam);// 0x2736f80
	bool TryDisplayPopUpWindow(int ID, UAEBlackboard* ExtraParam);// 0x2736ebc
	bool TryDisplayGameTipWithMsgID(int ID, FString param1, FString param2, UAEBlackboard* ExtraParam);// 0x2736c90
	void DisplayDebugTip(FString param1, FString param2, int DevTipId_Extra);// 0x2736ab8

--------------------------------
Class: AdvancedTipConfig
	byte Priority;//[Offset: 0x0, Size: 1]
	bool bCanBeReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bDoOverrideTipWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	class TopTipWidget* TopTipWidget;//[Offset: 0x8, Size: 40]
	float PlayLength;//[Offset: 0x30, Size: 4]
	Vector2D Offset;//[Offset: 0x34, Size: 8]
	FString AnimationName;//[Offset: 0x3c, Size: 12]
	TopTipImageWidgetConfig MainBackgroundWidgetLayoutConfig;//[Offset: 0x48, Size: 112]
	TopTipImageWidgetConfig SecondBackgroundWidgetLayoutConfig;//[Offset: 0xb8, Size: 112]
	TopTipImageWidgetConfig LeftWidgetLayoutConfig;//[Offset: 0x128, Size: 112]
	TopTipImageWidgetConfig RightWidgetLayoutConfig;//[Offset: 0x198, Size: 112]
	FText FinalContext;//[Offset: 0x208, Size: 12]
	UAEBlackboard* ExtraParam;//[Offset: 0x214, Size: 4]
	FString ParentOuterName;//[Offset: 0x218, Size: 12]
	FString ParentWidgetName;//[Offset: 0x224, Size: 12]
	int ZOrder;//[Offset: 0x230, Size: 4]

--------------------------------
Class: TopTipWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bDoUseSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	WidgetAnimation*[] WidgetAnimations;//[Offset: 0x374, Size: 12]
	void Reset();// 0x46f6b154
	void RegisterWidgetAnimations();// 0x273ab88
	void BPInitWhenSpawned();// 0x46f6b154
	void BPDoActionsWhenNewTipEnd();// 0x46f6b154
	void BPDoActionsWhenNewTipBegin(out const AdvancedTipConfig Data);// 0x46f6b154
	void BPDoActionsWhenNewPopUpWindowBegin(out const PopUpWindowConfig Data);// 0x46f6b154

--------------------------------
Class: PopUpWindowConfig
	class TopTipWidget* TopTipWidget;//[Offset: 0x0, Size: 40]
	float PlayLength;//[Offset: 0x28, Size: 4]
	FString ParentOuterName;//[Offset: 0x2c, Size: 12]
	FString ParentWidgetName;//[Offset: 0x38, Size: 12]
	int ZOrder;//[Offset: 0x44, Size: 4]
	UAEBlackboard* ExtraParam;//[Offset: 0x48, Size: 4]

--------------------------------
Class: TopTipImageWidgetConfig
	SlateBrush Brush;//[Offset: 0x0, Size: 104]
	Vector2D Offset;//[Offset: 0x68, Size: 8]

--------------------------------
Class: DevTipConfig
	byte Priority;//[Offset: 0x0, Size: 1]
	bool bCanBeReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float PlayLength;//[Offset: 0x4, Size: 4]
	FString Template;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BP_ReportClientFieldOfViewDataComponent_C.ReportClientFieldOfViewDataComponent.ActorComponent.Object

--------------------------------
Class: ReportClientFieldOfViewDataComponent.ActorComponent.Object
	void ServerReportClientFieldOfViewData(const ClientFieldOfViewData ClientFieldOfViewData);// 0x25ac49c
	void OnFieldOfViewNotificationComponentRegistryFieldOfViewNotificationComponentUnregistered(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x25ac3d8
	void OnFieldOfViewNotificationComponentRegistryFieldOfViewNotificationComponentRegistered(FieldOfViewNotificationComponentRegistry* Sender, FieldOfViewNotificationComponent* FieldOfViewNotificationComponent);// 0x257e164
	bool OnFieldOfViewNotificationComponentIsCheckingFieldOfViewEnabled(FieldOfViewNotificationComponent* Sender);// 0x24a90a0
	void OnFieldOfViewNotificationComponentInFieldOfViewChanged(FieldOfViewNotificationComponent* Sender, enum OldFieldOfViewNotificationStatus);// 0x25ac314
	Box GetActorBoundingBox_Implementation(Actor* Actor);// 0x25ac270

--------------------------------
Class: ClientFieldOfViewData
	FieldOfViewNotificationComponent* FieldOfViewNotificationComponent;//[Offset: 0x0, Size: 4]
	Vector2D MinimalScreenLocation;//[Offset: 0x4, Size: 8]
	Vector2D MaximumScreenLocation;//[Offset: 0xc, Size: 8]
	enum OldFieldOfViewNotificationStatus;//[Offset: 0x14, Size: 1]
	enum CurrentFieldOfViewNotificationStatus;//[Offset: 0x15, Size: 1]

--------------------------------
Class: BP_MapUIMarkManager_C.MapUIMarkManager.ActorComponent.Object

--------------------------------
Class: MapUIMarkManager.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0xd4, Size: 12]
	MapWidgetBase* m_pMiniMapWidget;//[Offset: 0xe0, Size: 4]
	MapWidgetBase* m_pEntireMapWidget;//[Offset: 0xe4, Size: 4]
	int[] CurMarkInstList;//[Offset: 0xe8, Size: 12]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0x16c, Size: 12]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0x178, Size: 4]
	STExtraPlayerController* pExtraPC;//[Offset: 0x17c, Size: 4]
	float TickRate_Internal;//[Offset: 0x1a4, Size: 4]
	float TickRate_Callback;//[Offset: 0x1a8, Size: 4]
	void SetIsShowingActivityItem(bool bIsShow);// 0x251fab0
	void OnUIBPLoadCallBack(UIBPAsyncParams inCallBackParams);// 0x251f8ec
	void OnShowActivityItemDelegate__DelegateSignature(bool bIsShow);// 0x46f6b154
	void OnAlertItemListUpdateDelegate__DelegateSignature(int Counts);// 0x46f6b154

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0, Size: 4]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0x8, Size: 40]
	FString UIDescription;//[Offset: 0x30, Size: 12]
	byte UIBPType;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: MapUIMarkBaseWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	float MapScaleCreated;//[Offset: 0x370, Size: 4]
	bool bIsActivityItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool bDynamicPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	bool bDoCallFunctionWhenEnterEntireMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool bDoUsSelfZOrder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	Vector2D LimitedSize;//[Offset: 0x398, Size: 8]
	bool bRotateWidgetToAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	void UpdateUIBPState(out const CustomMarkEventData InState);// 0x251e040
	void UpdateMarkSize(float InScale, float inMapScale, float MapScaleInUI);// 0x251df38
	void UpdateMarkPosition(Vector2D NewMapPos, Vector2D MapAdjustOffset, float angle, float MapWindowHalfExtent);// 0x251dde8
	void SetUIBPVisibility(bool bIsShow);// 0x251dd68
	void OnUpdateOutScreen(bool InOutScreen);// 0x46f6b154
	void OnUIBPShow(out const CustomMarkEventData InState);// 0x251dca4
	void OnUIBPDestroy();// 0x24b11f0
	void OnUIBPCreate(out const CustomMarkEventData InState, byte ParentState, float inRealLevelToMapScale, float inMapScale);// 0x251db0c
	void OnEnterEntireMap();// 0x46f6b154
	Rotator GetWidgetCurWorldRot();// 0x251dabc
	Vector GetWidgetCurWorldPos();// 0x251da6c
	bool GetOutScreen();// 0x251da50

--------------------------------
Class: MapWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* m_pMarkRoot;//[Offset: 0x370, Size: 4]
	<int,MapUIMarkBaseWidget*> AllUIMarks;//[Offset: 0x374, Size: 60]
	MapVehicleIconWidget*[] UAVInfoWidgetArray;//[Offset: 0x3cc, Size: 12]
	Widget*[] UAVRotWidgetArray;//[Offset: 0x3d8, Size: 12]
	Vector LandscapeCenterCpp;//[Offset: 0x3e4, Size: 12]
	float LevelToMapScaleCpp;//[Offset: 0x3f0, Size: 4]
	float RotateAngleCpp;//[Offset: 0x3f4, Size: 4]
	float MapScaleCpp;//[Offset: 0x3f8, Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x3fc, Size: 8]
	byte MapWidgetType;//[Offset: 0x404, Size: 1]
	bool isMarkScaleAsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405, Size: 1]
	bool bIsUIShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x406, Size: 1]
	float NoiseTickRate;//[Offset: 0x424, Size: 4]
	float TranslationMax;//[Offset: 0x428, Size: 4]
	float ScaleMax;//[Offset: 0x42c, Size: 4]
	float ShearMax;//[Offset: 0x430, Size: 4]
	float AngleMax;//[Offset: 0x434, Size: 4]
	bool NoiseEnableTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool NoiseEnableScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool NoiseEnableShear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	bool NoiseEnableAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43b, Size: 1]
	bool bIsApplyMapItemNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 1]
	void SetupUIMarkRoot();// 0x24b11ac
	void SetReadyToApplyMapItemNoise(bool isApply);// 0x2520470
	void SetAirlineVisible(bool bShow);// 0x46f6b154
	void SetAirAttckVisible(bool bShow);// 0x46f6b154
	void OnUpdateUIMarks();// 0x251ecac
	void OnMapItemNoise(bool isApply);// 0x23bc7c8
	bool GetUIMarkIsExist(int InInstanceID);// 0x25203f0
	MapUIMarkBaseWidget* GetUIMarkByID(int InInstanceID);// 0x2520370
	void DrawMovePathByTrackPoints(out const PaintContext Context, out const LinearColor Tint);// 0x245e770

--------------------------------
Class: MapVehicleIconWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	enum curVehicleType;//[Offset: 0x370, Size: 1]
	enum CurRemoteControlPawnType;//[Offset: 0x371, Size: 1]
	void ChangeVehicleIcon();// 0x46f6b154
	void ChangeRemoteControlIcon();// 0x46f6b154

--------------------------------
Class: UIBPAsyncParams

--------------------------------
Class: QuickSignComponent_BP_C.QuickSignComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3d8, Size: 4]
	void RefreshSignMarkInfoIconBg(FString PlayerName, out int TeamIndex, Character* CallFunc_GetPlayerCharacter_ReturnValue, STExtraPlayerState* K2Node_DynamicCast_AsSTExtra_Player_State, bool K2Node_DynamicCast_bSuccess, STExtraPlayerState* CallFunc_GetTeammateByName_ReturnValue, int CallFunc_GetTeamMateIndex_ReturnValue);// 0x46f6b154
	void GetStrArgument(FString QuickSignID, FString StringParam, out FString StrArgument, FString AttachSlotName, FString FinalString, int Temp_int_Array_Index_Variable, FString CallFunc_GetTableData_String_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, FString CallFunc_GetTableData_String_ReturnValue2, bool CallFunc_NotEqual_StrStr_ReturnValue2, FString[] CallFunc_ParseIntoArray_ReturnValue, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Conv_StringToInt_ReturnValue, bool CallFunc_IsNumeric_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue3, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchString_CmpSuccess, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, FText CallFunc_MakeLiteralText_ReturnValue3, FText CallFunc_MakeLiteralText_ReturnValue4, FString CallFunc_Conv_TextToString_ReturnValue3, FString CallFunc_Conv_TextToString_ReturnValue4, FText CallFunc_MakeLiteralText_ReturnValue5, FText CallFunc_MakeLiteralText_ReturnValue6, FString CallFunc_Conv_TextToString_ReturnValue5, FString CallFunc_Conv_TextToString_ReturnValue6, FText CallFunc_MakeLiteralText_ReturnValue7, FText CallFunc_MakeLiteralText_ReturnValue8, FString CallFunc_Conv_TextToString_ReturnValue7, FString CallFunc_Conv_TextToString_ReturnValue8, FText CallFunc_MakeLiteralText_ReturnValue9, FText CallFunc_MakeLiteralText_ReturnValue10, FString CallFunc_Conv_TextToString_ReturnValue9, FString CallFunc_Conv_TextToString_ReturnValue10, bool CallFunc_EqualEqual_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue4, int Temp_int_Loop_Counter_Variable, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2);// 0x46f6b154
	void OrganizeMsg(int TextID, FString PlayerName, bool isSelf, FString StrParam, out FString MsgString, FString msgContent, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_Contains_ReturnValue, BP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_Conv_StringToText_ReturnValue2, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8);// 0x46f6b154
	void PickupWrapperActorHandle(FString Param, out QuickSignMark MarkInfo, FString CallFunc_GetTableData_String_ReturnValue, bool CallFunc_IsNumeric_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark);// 0x46f6b154
	bool GenerateMarkInfo(out QuickSignMsg msgItem, out QuickSignMark MarkInfo, int CurIndexInTeam, FString CurIconBg, QuickSignMark QuickSignMarkInfo, bool K2Node_SwitchString_CmpSuccess, int CallFunc_RefreshSignMarkInfoIconBg_TeamIndex, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, QuickSignMark K2Node_MakeStruct_QuickSignMark);// 0x46f6b154
	void LoadConfig(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, BP_STRUCT_QuickSignCfg_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void ShowMsgTipsVoice(out const QuickSignMsg msgItem, bool isSelf);// 0x46f6b154
	void PlayVoiceCD(float Duration);// 0x46f6b154
	void ExecuteUbergraph_QuickSignComponent_BP(int EntryPoint, QuickSignMsg K2Node_Event_MsgItem, bool K2Node_Event_IsSelf, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, ChatComponent_BP_C* K2Node_DynamicCast_AsChat_Component_BP, bool K2Node_DynamicCast_bSuccess2, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_VoicePackets_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, BP_STRUCT_QuickSignCfg_type CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FString CallFunc_GetStrArgument_StrArgument, FString CallFunc_OrganizeMsg_MsgString, bool CallFunc_Contains_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, float K2Node_CustomEvent_Duration, bool CallFunc_TeamSpeakerEnable_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue2);// 0x46f6b154
	UAEDataTable* QuickSignDataTable;//[Offset: 0x3dc, Size: 4]
	<FString,BP_STRUCT_QuickSignCfg_type> QuickTableConfigMap;//[Offset: 0x3e0, Size: 60]
	<FString,QuickSignMark> QuickMarkMap;//[Offset: 0x41c, Size: 60]
	FString TeammateColor;//[Offset: 0x458, Size: 12]
	FString SelfColor;//[Offset: 0x464, Size: 12]
	FString ColonChar;//[Offset: 0x470, Size: 12]
	FString EndChar;//[Offset: 0x47c, Size: 12]
	FString SelfName;//[Offset: 0x488, Size: 12]
	QuickSignMsg currMsg;//[Offset: 0x494, Size: 84]
	bool IsPlayVoiceCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	FString BankSwitchName;//[Offset: 0x4ec, Size: 12]
	FText SelfNameText;//[Offset: 0x4f8, Size: 12]

--------------------------------
Class: BP_STRUCT_BattleText_type
	FString BattleTextValue_0_C862B6A74DAE6AFFE016F7A75B08BB2E;//[Offset: 0x0, Size: 12]
	int BattleTextId_1_B87A149F450B53DA84777BAED491366B;//[Offset: 0xc, Size: 4]
	FString BattleTextUIPath_2_4EC470C007F8B84F30A2D617058DE758;//[Offset: 0x10, Size: 12]

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 12]
	byte ArgumentValueType;//[Offset: 0xc, Size: 1]
	FText ArgumentValue;//[Offset: 0x10, Size: 12]
	int ArgumentValueInt;//[Offset: 0x1c, Size: 4]
	float ArgumentValueFloat;//[Offset: 0x20, Size: 4]
	enum ArgumentValueGender;//[Offset: 0x24, Size: 1]

--------------------------------
Class: BP_STRUCT_QuickSignCfg_type
	FString RespondID_0_0E2787006157EE48655D98DC092FB8F4;//[Offset: 0x0, Size: 12]
	int LifeSpan_1_0AFEB18006FB71A602526E5601FD19DE;//[Offset: 0xc, Size: 4]
	FString IconPath_2_79023280522DA7F41B3040310874D6D8;//[Offset: 0x10, Size: 12]
	int MaxNum_3_73CA82807AF1FB3255FB24340FB7020D;//[Offset: 0x1c, Size: 4]
	FString ScriptParam_4_3C7BC68011D8B81C27E5F03F0C67C40D;//[Offset: 0x20, Size: 12]
	FString ID_5_3F8DB04004E99B570550F27B0E37BE54;//[Offset: 0x2c, Size: 12]
	int TextID_6_7A2819807E81ADFC4845A72A0F22CF64;//[Offset: 0x38, Size: 4]
	FString IconBGPath_7_5BDF54C04BC63EDF39F3D4B505D210D8;//[Offset: 0x3c, Size: 12]
	FString AudioPath_8_542FCCC0273B734F1E867B74099F88F8;//[Offset: 0x48, Size: 12]

--------------------------------
Class: ChatComponent_BP_C.ChatComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0, Size: 4]
	void TestAddAudioIds(int Temp_int_Variable, int Temp_int_Variable2, int Temp_int_Variable3, int Temp_int_Variable4, int Temp_int_Variable5, int Temp_int_Variable6, int Temp_int_Variable7, int Temp_int_Variable8);// 0x46f6b154
	void CacheAudioEvent(out AkAudioEvent* Audio, AkAudioEvent* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x46f6b154
	void PlaySoundByAudioID(int audioID);// 0x46f6b154
	void PlaySoundByChatID(int chatTextID, FString CallFunc_Conv_IntToString_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x46f6b154
	void SetQuickChatList(int chatQuickID, bool bFind, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsEditor_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable2, int Temp_int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue2, int CallFunc_Array_Get_Item2, bool CallFunc_Less_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, QuickChatIDAndAudio K2Node_MakeStruct_QuickChatIDAndAudio, int CallFunc_Array_AddUnique_ReturnValue);// 0x46f6b154
	void InitFromSetting(int CallFunc_Len_ReturnValue, FString CallFunc_Replace_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName CallFunc_Conv_StringToName_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue, BP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x46f6b154
	void AddOneMsgToUIInner(bool isMe, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void PlaySound(int msgID, int audioID, GameBackendHUD* CallFunc_GetInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, GVoiceInterface* CallFunc_GetGVoiceInterface_ReturnValue, BP_STRUCT_VoicePackets_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_TeamSpeakerEnable_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Concat_StrStr_ReturnValue2, FormatArgumentData[] K2Node_MakeArray_Array, FString CallFunc_Concat_StrStr_ReturnValue3, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x46f6b154
	void AddToArray(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue2, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_Less_IntInt_ReturnValue2);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void AddOneMsgToUI1(out const InGameChatMsg Item, FString Name, FString Content, int msgID, int audioID, bool isMe, bool PlaySound);// 0x46f6b154
	void NotifyFriendChat(FString str_gid, FString sender_name, FString chat_content, bool self_msg);// 0x46f6b154
	void NotifyFriendReplyInvite(FString str_gid, FString sender_name, bool bReply);// 0x46f6b154
	void SendDirtyFilter(FString Name, FString Content, bool isMe, bool isSys, int msgID);// 0x46f6b154
	void OnFilterFinish(FString filterText, FString callback_data);// 0x46f6b154
	void CloseChatHistoryList();// 0x46f6b154
	void UpdateQuickItemText(int msgID, int resID, int alternateMsgID);// 0x46f6b154
	void SendDirtyFilterContent(FString Content);// 0x46f6b154
	void FindTextIDByAudioID();// 0x46f6b154
	void ReportBattleChat(FString Msg);// 0x46f6b154
	void NotifyFriendInvite(FString str_gid, FString sender_name);// 0x46f6b154
	void UpdateQuickTextIDList();// 0x46f6b154
	void ExecuteUbergraph_ChatComponent_BP(int EntryPoint, InGameChatMsg K2Node_Event_item, FString K2Node_Event_name2, FString K2Node_Event_content3, int K2Node_Event_msgID3, int K2Node_Event_audioID, bool K2Node_Event_isMe2, bool K2Node_Event_playSound, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_NotEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller2, bool K2Node_DynamicCast_bSuccess2, FString K2Node_Event_str_gid3, FString K2Node_Event_sender_name3, FString K2Node_Event_chat_content, bool K2Node_Event_self_msg, Actor* CallFunc_GetOwner_ReturnValue3, FString K2Node_Event_str_gid2, FString K2Node_Event_sender_name2, bool K2Node_Event_bReply, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller3, bool K2Node_DynamicCast_bSuccess3, Actor* CallFunc_GetOwner_ReturnValue4, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller4, bool K2Node_DynamicCast_bSuccess4, FString K2Node_Event_name, FString K2Node_Event_content2, bool K2Node_Event_isMe, bool K2Node_Event_isSys, int K2Node_Event_msgID2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, int Temp_int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString K2Node_Event_filterText, FString K2Node_Event_callback_data, FString CallFunc_Concat_StrStr_ReturnValue8, Actor* CallFunc_GetOwner_ReturnValue5, GameInstance* CallFunc_GetGameInstance_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller5, bool K2Node_DynamicCast_bSuccess5, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess6, ChatComponent* CallFunc_GetChatComponentFromController_ReturnValue, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue6, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD, bool K2Node_DynamicCast_bSuccess7, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller6, bool K2Node_DynamicCast_bSuccess8, int K2Node_Event_msgID, int K2Node_Event_resID, int K2Node_Event_alternateMsgID, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, FString CallFunc_GetTableData_String_ReturnValue, BP_STRUCT_BattleText_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString K2Node_Event_content, GameInstance* CallFunc_GetGameInstance_ReturnValue2, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess9, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue2, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD2, bool K2Node_DynamicCast_bSuccess10, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue2, int CallFunc_Array_Length_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, int Temp_int_Loop_Counter_Variable, BP_STRUCT_VoicePackets_type CallFunc_GetDataTableRowFromName_OutRow2, bool CallFunc_GetDataTableRowFromName_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Map_Contains_ReturnValue, FString K2Node_Event_msg, GameInstance* CallFunc_GetGameInstance_ReturnValue3, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance3, bool K2Node_DynamicCast_bSuccess11, FString CallFunc_Concat_StrStr_ReturnValue9, FrontendHUD* CallFunc_GetAssociatedFrontendHUD_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue10, GameFrontendHUD* K2Node_DynamicCast_AsGame_Frontend_HUD3, bool K2Node_DynamicCast_bSuccess12, FString K2Node_Event_str_gid, FString K2Node_Event_sender_name, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12, FString CallFunc_Concat_StrStr_ReturnValue13, FString CallFunc_Concat_StrStr_ReturnValue14, FString CallFunc_Concat_StrStr_ReturnValue15, FString CallFunc_Concat_StrStr_ReturnValue16, FString CallFunc_Concat_StrStr_ReturnValue17, FString CallFunc_Concat_StrStr_ReturnValue18);// 0x46f6b154
	FString addToUIText;//[Offset: 0x2c4, Size: 12]
	FString[] UITextArray;//[Offset: 0x2d0, Size: 12]
	int FirstIndex;//[Offset: 0x2dc, Size: 4]
	FString currContentMsg;//[Offset: 0x2e0, Size: 12]
	SettingConfig_C* Setting;//[Offset: 0x2ec, Size: 4]
	bool bInitSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	FString FriendChatStrGid;//[Offset: 0x2f4, Size: 12]
	FString FriendChatSenderName;//[Offset: 0x300, Size: 12]
	FString FriendChatContent;//[Offset: 0x30c, Size: 12]
	bool FriendChatSelfMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	FString FriendInviteStrGid;//[Offset: 0x31c, Size: 12]
	FString FriendInviteSenderName;//[Offset: 0x328, Size: 12]
	FString FriendInviteBattleTextValue;//[Offset: 0x334, Size: 12]
	FString FriendReplyStrGid;//[Offset: 0x340, Size: 12]
	FString FriendReplySenderName;//[Offset: 0x34c, Size: 12]
	bool FriendReplyReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 1]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	int UI_MsgID;//[Offset: 0x35c, Size: 4]
	FString UI_ItemName;//[Offset: 0x360, Size: 12]
	int UI_AlternateMsgID;//[Offset: 0x36c, Size: 4]
	FText ChatIDAudioFormatPath;//[Offset: 0x370, Size: 12]
	FText AudioIDFormatPath;//[Offset: 0x37c, Size: 12]
	AkAudioEvent*[] cacheEvent;//[Offset: 0x388, Size: 12]
	InGameChatMsg currAddUIMsg;//[Offset: 0x394, Size: 56]
	FString CurrName;//[Offset: 0x3cc, Size: 12]
	FText I;//[Offset: 0x3d8, Size: 12]

--------------------------------
Class: BP_STRUCT_VoicePackets_type
	int PacketsID_0_1BE28BC05885D07957823EFC0ACAD564;//[Offset: 0x0, Size: 4]
	FString NamePackets_8_21D4E8C00BB4670F6A24427800FADFC3;//[Offset: 0x4, Size: 12]
	FString Id_3_3543C100779E045400DFC20F0C0D67B4;//[Offset: 0x10, Size: 12]
	int BankID_4_494ED80002F25B9E5BFFA77007CC42B4;//[Offset: 0x1c, Size: 4]
	int ChineseID_6_5F2EE8C01574BEA9544A0786009AE4E4;//[Offset: 0x20, Size: 4]
	FString ChineseName_7_3103A5C07B27615F37B8297D0AE578A5;//[Offset: 0x24, Size: 12]
	FString BankName_9_43EC55003B44B1E219B55B3A0C4321F5;//[Offset: 0x30, Size: 12]
	FString BankPath_10_7F8AB80065A35C1019A0E27A0C5D0F68;//[Offset: 0x3c, Size: 12]
	FString TextStyle_11_348EE340259D28E15BDE5C030F4CD225;//[Offset: 0x48, Size: 12]
	int IsTeam_12_3F07C68049934466454F0C4E0844A61D;//[Offset: 0x54, Size: 4]

--------------------------------
Class: BP_GameEventListener_C.GameEventListener.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1d0, Size: 4]
	void SetDefaultNearClipPlane(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, bool CallFunc_IsIOSPlatform_IsIOS);// 0x46f6b154
	void IsIOSPlatform(out bool IsIOS, FString CallFunc_GetPlatformName_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x46f6b154
	void SetDefaultRendering();// 0x46f6b154
	void EnableGrassLOD(int Enable, GameInstance* CallFunc_GetGameInstance_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void ChangeStreamingLevel(bool bFlying, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceLevel_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger2_CmpSuccess);// 0x46f6b154
	void InitIncaseReconnect(Actor* CallFunc_GetOwner_ReturnValue, DeathPlayBackController_C* K2Node_DynamicCast_AsDeath_Play_Back_Controller, bool K2Node_DynamicCast_bSuccess, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData2, FormatArgumentData[] K2Node_MakeArray_Array, FormatArgumentData[] K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue, FText CallFunc_Format_ReturnValue2, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue2, bool CallFunc_IsPlayerLandFromTheAir_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData3, FormatArgumentData[] K2Node_MakeArray_Array3, FText CallFunc_Format_ReturnValue3, FString CallFunc_Conv_TextToString_ReturnValue3, bool CallFunc_IsIOSPlatform_IsIOS, bool CallFunc_IsIOSPlatform_IsIOS2, bool CallFunc_IsPlayerFlying_ReturnValue);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void CustomEvent(byte gamePawnEvent);// 0x46f6b154
	void ReceiveEndPlay(byte EndPlayReason);// 0x46f6b154
	void UnloadTree();// 0x46f6b154
	void LoadTree();// 0x46f6b154
	void MakeFlyTreeName();// 0x46f6b154
	void ExecuteUbergraph_BP_GameEventListener(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, byte K2Node_CustomEvent_gamePawnEvent, byte K2Node_Event_EndPlayReason, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsDedicatedServer_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue2, int CallFunc_GetDeviceLevel_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetDeviceLevel_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue2, BP_GlobalConfig_C*[] CallFunc_GetAllActorsOfClass_OutActors, bool CallFunc_EqualEqual_NameName_ReturnValue, BP_GlobalConfig_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x46f6b154
	FName FlyTree;//[Offset: 0x1d8, Size: 8]
	bool bFlyTreeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]

--------------------------------
Class: GameEventListener.ActorComponent.Object
	delegate OnGameEventListener;//[Offset: 0xd0, Size: 12]
	float HeightCheck_High;//[Offset: 0xdc, Size: 4]
	float HeightCheck_Mid;//[Offset: 0xe0, Size: 4]
	float HeightCheck_Low;//[Offset: 0xe4, Size: 4]
	float FlyingScreenSizeCullingFactor;//[Offset: 0xec, Size: 4]
	float FlyingDistanceCullingFactor;//[Offset: 0xf0, Size: 4]
	float HighMidFightingScreenSizeCullingFactor;//[Offset: 0xf4, Size: 4]
	float HighMidFightingDistanceCullingFactor;//[Offset: 0xf8, Size: 4]
	float LowFightingScreenSizeCullingFactor;//[Offset: 0xfc, Size: 4]
	float LowFightingDistanceCullingFactor;//[Offset: 0x100, Size: 4]
	float DelaySecondsForEnterNgiht;//[Offset: 0x104, Size: 4]
	float DelaySecondsForExitNgiht;//[Offset: 0x108, Size: 4]
	float[] LODDistanceScaleAtNight;//[Offset: 0x10c, Size: 12]
	float[] ViewDistanceScaleAtNight;//[Offset: 0x11c, Size: 12]
	float[] FoliageViewDistanceScaleAtNight;//[Offset: 0x12c, Size: 12]
	float[] ScreenSizeCullingFactorAtNight;//[Offset: 0x13c, Size: 12]
	bool bUsetoControlNearClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	bool bNearClipInPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x161, Size: 1]
	int NearClipLanded;//[Offset: 0x164, Size: 4]
	int NearClipFlying;//[Offset: 0x168, Size: 4]
	int NearClipFlyingVehicle;//[Offset: 0x16c, Size: 4]
	float WinOBFreeView_ScreenSizeCullingFactor;//[Offset: 0x1b8, Size: 4]
	float WinOBFreeView_ViewDistanceScale;//[Offset: 0x1bc, Size: 4]
	void StarCalcJump();// 0x24a382c
	void ScaleScreenSizeCulling(byte pawnevent);// 0x24a37b4
	void OnFreeViewChanged(bool isFreeView);// 0x23910d8
	void OnChangeViewTarget();// 0x24a37a0
	bool IsPlayerLandFromTheAir();// 0x24a3778
	bool IsPlayerLanded();// 0x24a3750
	bool IsPlayerFlying();// 0x24a3728
	void HeightCheck();// 0x24a3714
	void GameEventStartShrinkCircle();// 0x24a3700
	void GameEventReceiveInviteNextBattle();// 0x24a36ec
	void GameEventReBirth();// 0x24a36d8
	void GameEventPlane_KeepNearClipNotChanged();// 0x24a36c4
	void GameEventPlane();// 0x24a36b0
	void GameEventParachute();// 0x24a369c
	void GameEventLanded();// 0x24a3688
	void GameEventJump();// 0x24a3674
	void GameEventIsInFortressChanged(bool bIsInFortress);// 0x24a35f4
	void GameEventInBomingArea();// 0x24a35e0
	void GameEventFighting();// 0x24a35cc
	void GameEventExitNight();// 0x24a35b8
	void GameEventEnterNight();// 0x24a35a4
	void GameEventEnterFlyVehicle(bool IsEnterOrLeave);// 0x24a3524
	void GameEventDie(float CurrentHP, float ratioHP);// 0x24a3468
	void GameEventBirth();// 0x24a3454
	void ChangeViewtargetToPlane();// 0x24a3440
	void ChangeNeedSetNearClip(bool bNeed);// 0x24a33b8

--------------------------------
Class: DeathPlayBackController_C.STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x33d0, Size: 4]
	void ReadEmoteDataRowPC(UAEDataTable* NewLocalVar);// 0x46f6b154
	void DoShowTouchInterface(bool Show);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void CallShowTouchInterface(bool InShow);// 0x46f6b154
	void ShowTouchInterface(bool bShow);// 0x46f6b154
	void ExecuteUbergraph_DeathPlayBackController(int EntryPoint, Transform Temp_struct_Variable, HealthControlComponent* CallFunc_AddComponent_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool K2Node_Event_InShow, bool K2Node_Event_bShow, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x46f6b154
	BP_TipsManager_C* BP_TipsManager;//[Offset: 0x33d4, Size: 4]
	BP_GameEventListener_C* BP_GameEventListener;//[Offset: 0x33d8, Size: 4]
	STExtraUnderWaterEffectComp* STExtraUnderWaterEffectComp;//[Offset: 0x33dc, Size: 4]
	BP_VehicleUser_C* BP_VehicleUser;//[Offset: 0x33e0, Size: 4]

--------------------------------
Class: HealthControlComponent.ActorComponent.Object
	float RecoverDelayWhenLeaveFightState;//[Offset: 0xd0, Size: 4]
	float SeriousWoundThreshold;//[Offset: 0xd4, Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0xd8, Size: 4]
	FName HealthRecoverBuffName;//[Offset: 0xe0, Size: 8]
	FName SeriousWoundApperanceBuffName;//[Offset: 0xe8, Size: 8]
	FName PlayerTakeDamageBuffName;//[Offset: 0xf0, Size: 8]
	AkAudioEvent* LowHealthWarningSound;//[Offset: 0xf8, Size: 4]
	enum[] FightState;//[Offset: 0xfc, Size: 12]
	<class STExtraBaseCharacter,HealthControlRecoverSetting> HealthControlRecoverSettings;//[Offset: 0x108, Size: 60]
	void PlayerTakeDamage();// 0x46f6b154
	void PlayerLowHealth(bool bNewLowHealth);// 0x46f6b154
	void HandlePlayerTakeDamage(float Damage, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser);// 0x24e03c0
	void HandlePlayerStateChanged(enum NewState);// 0x24e0348
	void HandlePlayerControllerPossessedPawn(Pawn* PossessedPawn);// 0x24e02d0
	void HandleComponentDeactivated(ActorComponent* Comp);// 0x24e0258
	void HandleComponentActivated(ActorComponent* Comp, bool bReset);// 0x24e0194
	STExtraBaseCharacter* GetOwnerPlayerPawn();// 0x24e00bc
	STExtraPlayerController* GetOwnerPlayerController();// 0x24e0034

--------------------------------
Class: HealthControlRecoverSetting
	float RecoverDelayWhenLeaveFightState;//[Offset: 0x0, Size: 4]
	FName HealthRecoverBuffName;//[Offset: 0x8, Size: 8]

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d, Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x240, Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x248, Size: 4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x250, Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x280, Size: 4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x284, Size: 4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x288, Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x28c, Size: 4]
	float CameraOutOfWaterZOffsetWithWaves;//[Offset: 0x290, Size: 4]
	float CameraIntoWaterZOffsetWithWaves;//[Offset: 0x294, Size: 4]
	ExponentialHeightFogComponent*[] UnderWaterFogComps;//[Offset: 0x298, Size: 12]
	ExponentialHeightFogComponent*[] SceneFogComps;//[Offset: 0x2a4, Size: 12]
	CameraComponent* LastActiveCamComp;//[Offset: 0x2b0, Size: 4]
	ScreenAppearanceActor* ScreenAppearanceMgr;//[Offset: 0x2bc, Size: 4]
	void SetUnderwaterScreenAppearanceByMgr(Actor* PC, bool bActive);// 0x26f619c
	void OnUserQualitySettingChanged(int renderlevel);// 0x26f6124

--------------------------------
Class: BP_VehicleUser_C.VehicleUserComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x298, Size: 4]
	void OnVehicleChargingStateChanged(bool ChargingState, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void BindUnmandedEvent(bool bind, bool CallFunc_IsValid_ReturnValue, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue2, float CallFunc_GetFuelMax_ReturnValue, float CallFunc_GetVehicleHPMax_ReturnValue, float CallFunc_GetFuel_ReturnValue, float CallFunc_GetVehicleHP_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2);// 0x46f6b154
	void BindEvent(bool bind, delegate K2Node_CreateDelegate_OutputDelegate, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate2, VehicleSeatComponent* CallFunc_GetComponentByClass_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, VehicleCommonComponent* CallFunc_GetComponentByClass_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate3, float CallFunc_GetFuelMax_ReturnValue, float CallFunc_GetVehicleHPMax_ReturnValue, float CallFunc_GetFuel_ReturnValue, float CallFunc_GetVehicleHP_ReturnValue, bool CallFunc_IsValid_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate4, delegate K2Node_CreateDelegate_OutputDelegate5);// 0x46f6b154
	void SetHelicopterSingleOperate(bool IsSingleOperate);// 0x46f6b154
	void SetUAVSpeedPercent(float SpeedPercent);// 0x46f6b154
	void SetUAVCameraMode(bool FreeCamera);// 0x46f6b154
	void OnUnmanedVehicleFuelChanged(float Fuel, float macFuel, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int CallFunc_PostEvent_ReturnValue, STExtraUAVVehicleBase* K2Node_DynamicCast_AsSTExtra_UAVVehicle_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue3);// 0x46f6b154
	void OnUnmanedVehicleHPChanged(float HP, float MaxHP, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void SetClampControllerRelativeYaw(bool Clamp, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void SetHelicopterCameraMode(bool IsFreeCamera);// 0x46f6b154
	void SendUIMsgWhenChangeSeatCompleted(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void SendUIMsgWhenEnterVehicleCompleted(bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, MountMovementComponent* CallFunc_GetComponentByClass_ReturnValue, SimulatedSlidingMovementComponent* CallFunc_GetComponentByClass_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsUCAV_ReturnValue, bool CallFunc_IsUAV_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue4);// 0x46f6b154
	void SendUIMsgWhenExitVehicleCompleted(bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsUCAV_ReturnValue, class STExtraVehicleBase CallFunc_GetObjectClass_ReturnValue, FString CallFunc_GetClassDisplayName_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, MountMovementComponent* CallFunc_GetComponentByClass_ReturnValue, SimulatedSlidingMovementComponent* CallFunc_GetComponentByClass_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_IsUCAV_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue4, class STExtraVehicleBase CallFunc_GetObjectClass_ReturnValue2, FString CallFunc_GetClassDisplayName_ReturnValue2, bool CallFunc_IsUAV_ReturnValue, bool CallFunc_EqualEqual_StriStri_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_BooleanOR_ReturnValue5, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue5, CustomSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue3, bool CallFunc_IsValid_ReturnValue6, STExtraBaseCharacter* CallFunc_GetPlayerCharacterSafety_ReturnValue2, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_IsValid_ReturnValue8, CustomSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue4, bool CallFunc_IsValid_ReturnValue9);// 0x46f6b154
	void SetPlayMusic(bool Enabled);// 0x46f6b154
	void SetDrivingViewMode(int int mode, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsUCAV_ReturnValue, VehicleSpringArmComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x46f6b154
	void ResetInputs(bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void OnMotorcycleContactChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void FixGoStraight(float InMoveRightRate, float GoStraightThreshold, out float OutMoveRightRate, float absInputRight, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_FMax_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2);// 0x46f6b154
	void OnUpdateSeatGUI(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void OnVehicleWheelsHPChanged(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void StopPlayerAutoSprint(BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void OnVehicleFuelChanged(float Fuel, float FuelMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void OnVehicleHPChanged(float HP, float HPMax, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void ExitVehicle();// 0x46f6b154
	void EnterVehicle(bool IsDriver, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x46f6b154
	void OnChangeVehicleSeatCompleted(enum SeatType);// 0x46f6b154
	void OnCurrrentClosestVehicleChanged();// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void OnExitVehicleCompleted();// 0x46f6b154
	void OnEnterVehicleCompleted(enum SeatType);// 0x46f6b154
	void EventSetDrivingViewMode(int IntValue);// 0x46f6b154
	void OnInputAxisMoveForward(float Rate);// 0x46f6b154
	void OnInputAxisMoveRight(float Rate);// 0x46f6b154
	void EventSetCarMusicSwitch(bool BoolValue);// 0x46f6b154
	void TickVehicleCullWater(STExtraVehicleBase* InCullWaterVehicle);// 0x46f6b154
	void EventSetHelicopterFreeCamera(bool BoolValue);// 0x46f6b154
	void OnLaunchUnmannedVehicleCompleted();// 0x46f6b154
	void OnPauseUnmannedVehicleCompleted();// 0x46f6b154
	void OnShutDownUnmannedVehicleCompleted(float CDTime);// 0x46f6b154
	void EventSetUAVFreeCamera(bool BoolValue);// 0x46f6b154
	void EventSetSpeedPercent(float FloatValue);// 0x46f6b154
	void EventUAVSingleOperate(bool BoolValue);// 0x46f6b154
	void EventSetHelicopterSingleOperate(bool BoolValue);// 0x46f6b154
	void OnUnmannedVehicle_Standby_Reconnet();// 0x46f6b154
	void ExecuteUbergraph_BP_VehicleUser(int EntryPoint, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, delegate K2Node_CreateDelegate_OutputDelegate4, enum K2Node_Event_SeatType2, LinearColor K2Node_MakeStruct_LinearColor, bool CallFunc_IsValid_ReturnValue, BP_STExtraWheeledVehicle_C* K2Node_DynamicCast_AsBP_STExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess, enum K2Node_Event_SeatType, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController, bool CallFunc_IsValid_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate5, GameBackendHUD* CallFunc_GetInstance_ReturnValue, int K2Node_CustomEvent_IntValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float K2Node_Event_rate2, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess2, float K2Node_Event_rate, float CallFunc_FixGoStraight_OutMoveRightRate, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController2, bool K2Node_CustomEvent_BoolValue5, bool CallFunc_IsValid_ReturnValue3, delegate K2Node_CreateDelegate_OutputDelegate6, STExtraVehicleBase* K2Node_Event_InCullWaterVehicle, bool CallFunc_IsValid_ReturnValue4, delegate K2Node_CreateDelegate_OutputDelegate7, Vector CallFunc_GetCullWaterCapsule_OutCapsulePointA, Vector CallFunc_GetCullWaterCapsule_OutCapsulePointB, float CallFunc_GetCullWaterCapsule_OutCullWaterCapsuleRadius, float CallFunc_GetCullWaterCapsule_OutCullWaterCapsuleBlendWidth, bool K2Node_CustomEvent_BoolValue4, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, LinearColor K2Node_MakeStruct_LinearColor2, LinearColor K2Node_MakeStruct_LinearColor3, float K2Node_Event_cdTime, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController3, bool K2Node_CustomEvent_BoolValue3, float K2Node_CustomEvent_FloatValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController4, bool K2Node_CustomEvent_BoolValue2, bool CallFunc_IsValid_ReturnValue5, bool K2Node_CustomEvent_BoolValue, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController5, bool CallFunc_IsValid_ReturnValue6, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController6, FString CallFunc_GetObjectName_ReturnValue, bool CallFunc_IsValid_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue2, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, GameBackendHUD* CallFunc_GetInstance_ReturnValue3, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue3, SaveGame* CallFunc_GetUserSettings_ReturnValue2, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle, bool K2Node_DynamicCast_bSuccess3, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config2, bool K2Node_DynamicCast_bSuccess4, STExtraWheeledVehicle* K2Node_DynamicCast_AsSTExtra_Wheeled_Vehicle2, bool K2Node_DynamicCast_bSuccess5, LinearColor K2Node_MakeStruct_LinearColor4);// 0x46f6b154
	bool AxisMoveForwardFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	bool AxisMoveRightFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d, Size: 1]
	float Fuel;//[Offset: 0x2a0, Size: 4]
	float FuelMax;//[Offset: 0x2a4, Size: 4]
	float HP;//[Offset: 0x2a8, Size: 4]
	float HPMax;//[Offset: 0x2ac, Size: 4]
	float OutMoveRightRate;//[Offset: 0x2b0, Size: 4]
	float RawSpeed;//[Offset: 0x2b4, Size: 4]
	enum SeatType;//[Offset: 0x2b8, Size: 1]
	float UnmanedFuel;//[Offset: 0x2bc, Size: 4]
	float UnmanedFuelMax;//[Offset: 0x2c0, Size: 4]
	float UnmanedHP;//[Offset: 0x2c4, Size: 4]
	float UnmanedHPMax;//[Offset: 0x2c8, Size: 4]
	float UnmanedCallBackTime;//[Offset: 0x2cc, Size: 4]
	bool bShowUnmanedLowPowerTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool bChargingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1, Size: 1]
	float PopKartRaceWarnTime;//[Offset: 0x2d4, Size: 4]

--------------------------------
Class: STExtraUAVVehicleBase.STExtraVehicleBase.Pawn.Actor.Object
	VehicleUserComponent* UAVVehicleUserComponent;//[Offset: 0xe60, Size: 4]
	CameraComponent* CameraComponent;//[Offset: 0xe64, Size: 4]
	SpringArmComponent* SpringArmComp;//[Offset: 0xe68, Size: 4]
	FName CameraBoneName;//[Offset: 0xe70, Size: 8]
	delegate OnVehicleUAVStateChanged;//[Offset: 0xe80, Size: 12]
	float FPP_TargetArmLength;//[Offset: 0xe8c, Size: 4]
	float TPP_TargetArmLength;//[Offset: 0xe90, Size: 4]
	float UAVFPPCameraFovPercent;//[Offset: 0xe94, Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 1]
	enum UAVVehicleState;//[Offset: 0xea0, Size: 1]
	float CoolDownTimeSpeed;//[Offset: 0xea4, Size: 4]
	float CoolDownTimeMin;//[Offset: 0xea8, Size: 4]
	float MaxOperateDistanceToPlayer;//[Offset: 0xeac, Size: 4]
	float MaxOperateFalloffDistance;//[Offset: 0xeb0, Size: 4]
	float LowFuelWarning;//[Offset: 0xeb4, Size: 4]
	float SkillRecallingTime;//[Offset: 0xeb8, Size: 4]
	float SkillDisappearingTime;//[Offset: 0xebc, Size: 4]
	float SkillDestoryTime;//[Offset: 0xec0, Size: 4]
	float MaxCameraFOV;//[Offset: 0xed8, Size: 4]
	float MinCameraFOV;//[Offset: 0xedc, Size: 4]
	DriverAttachmentData[] DriverAttachmentDataList;//[Offset: 0xee0, Size: 12]
	void SetViewTargetAgainForOB();// 0x26f3bc8
	void SetFPPCameraFov(float Factor);// 0x26f3b50
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);// 0x26f3a78
	void SendToServerUAVFPPCameraFovPercent(float percent);// 0x26f39c4
	void SendToServerIsFPP(bool IsFirstPerson);// 0x26f38fc
	void SendToServerClientInitOK();// 0x26f38a0
	void SendToServerChangeCameraMode(bool isFreeMode);// 0x26f37d8
	void SendToAllChangeCameraMode(bool isFreeMode);// 0x26f3750
	void OnRep_UAVVehicleState();// 0x2602f3c
	void OnRep_IsFPPChanged();// 0x26f373c
	void OnRep_FPPCameraFovChanged();// 0x26f3728
	bool LocalSwitchPersonPerspective(bool IsNewFPP, bool IsUseLerp, bool IsForceSwitch);// 0x26f3600
	void HandleOnMeshHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x26f3434
	float GetDisToPlayer();// 0x26f340c
	bool CheckCanSwitchFPP();// 0x266c840

--------------------------------
Class: MountMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13c, Size: 1]
	float GravityScale;//[Offset: 0x140, Size: 4]
	float JumpZVelocity;//[Offset: 0x144, Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x148, Size: 4]
	byte MovementMode;//[Offset: 0x14c, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x150, Size: 4]
	int MaxSimulationIterations;//[Offset: 0x154, Size: 4]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x158, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x158, Size: 1]
	bool bForceNoSimulatePrediction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x160, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x160, Size: 1]
	float MaxFlySpeed;//[Offset: 0x164, Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x168, Size: 4]
	float MaxAcceleration;//[Offset: 0x16c, Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x170, Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x174, Size: 4]
	float BrakingFriction;//[Offset: 0x178, Size: 4]
	float MaxStepHeight;//[Offset: 0x17c, Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x180, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x180, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x180, Size: 1]
	float PerchRadiusThreshold;//[Offset: 0x184, Size: 4]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x188, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x188, Size: 1]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x18c, Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x190, Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x198, Size: 152]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x230, Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x234, Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x239, Size: 1]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x23c, Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x240, Size: 4]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	MountVehicleMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x248, Size: 60]
	float GroundFriction;//[Offset: 0x2a0, Size: 4]
	float FallingLateralFriction;//[Offset: 0x2a4, Size: 4]
	float MaxWalkSpeed;//[Offset: 0x2a8, Size: 4]
	float AirControl;//[Offset: 0x2ac, Size: 4]
	byte GroundMovementMode;//[Offset: 0x2b0, Size: 1]
	STExtraMountVehicle* VehicleOwner;//[Offset: 0x2b4, Size: 4]
	Vector Acceleration;//[Offset: 0x2b8, Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x2c4, Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x2d0, Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x2e0, Size: 12]
	float AnalogInputModifier;//[Offset: 0x2ec, Size: 4]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x2f0, Size: 4]
	float WalkableFloorAngle;//[Offset: 0x300, Size: 4]
	float WalkableFloorZ;//[Offset: 0x304, Size: 4]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x252c4d8
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x252c460
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x252c39c
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x252c238
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x252bcd0
	void ServerMove(float TimeStamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x252b924
	bool IsWalkable(out const HitResult Hit);// 0x252b878
	float GetValidPerchRadius();// 0x252b850
	float GetPerchRadiusThreshold();// 0x252b828
	PrimitiveComponent* GetMovementBase();// 0x252b800
	float GetMinAnalogSpeed();// 0x23450b4
	float GetMaxAcceleration();// 0x252b7d0
	Vector GetImpartedMovementBaseVelocity();// 0x252b780
	void ClientVeryShortAdjustPosition(float TimeStamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x252b530
	void ClientAdjustPosition(float TimeStamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x252b268
	void ClientAckGoodMove(float TimeStamp);// 0x252b1e8
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x252b08c

--------------------------------
Class: MountVehicleMovementComponentPostPhysicsTickFunction.TickFunction
	MountMovementComponent* Target;//[Offset: 0x38, Size: 4]

--------------------------------
Class: STExtraMountVehicle.STExtraVehicleBase.Pawn.Actor.Object
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe64, Size: 1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe64, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe64, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe64, Size: 1]
	float JumpMaxHoldTime;//[Offset: 0xe68, Size: 4]
	float MaxMoveSpeed;//[Offset: 0xe6c, Size: 4]
	float SpeedCheckDeltaTime;//[Offset: 0xe70, Size: 4]
	int MaxSpeedOverflowTimes;//[Offset: 0xe74, Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0xe78, Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0xea8, Size: 48]
	MountMovementComponent* MountVehicleMovement;//[Offset: 0xed8, Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0xedc, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xedd, Size: 1]
	Vector BaseTranslationOffset;//[Offset: 0xee0, Size: 12]
	Quat BaseRotationOffset;//[Offset: 0xef0, Size: 16]
	CapsuleComponent* CapsuleComponent;//[Offset: 0xf00, Size: 4]
	float ForwardSpeed;//[Offset: 0xf04, Size: 4]
	float RightSpeed;//[Offset: 0xf08, Size: 4]
	float UpSpeed;//[Offset: 0xf0c, Size: 4]
	float MaxSpeedCheck;//[Offset: 0xf10, Size: 4]
	float MoonViewDistanceCheck;//[Offset: 0xf14, Size: 4]
	float MaxZSpeedCheck;//[Offset: 0xf18, Size: 4]
	Actor*[] MoonViewPlatforms;//[Offset: 0xf1c, Size: 12]
	void VehicleJump();// 0x260f91c
	void StopJumping();// 0x26103a0
	void ResetJumpZVelocity();// 0x2691780
	void OnRep_ReplicatedBasedMovement();// 0x2691764
	void MoveUp(float Rate);// 0x266a85c
	void MoveRight(float Rate);// 0x266a7dc
	void MoveForward(float Rate);// 0x266a75c
	bool IsPlayingRootMotion();// 0x269173c
	bool IsPlayingNetworkedRootMotionMontage();// 0x2691714
	bool IsJumpProvidingForce();// 0x26916e4
	float GetUpSpeed();// 0x26916b4
	float GetRightwardSpeed();// 0x2691684
	float GetForwardSpeed();// 0x2690e4c
	Vector GetBaseTranslationOffset();// 0x269165c
	bool CanVehicleJump();// 0x269162c
	bool CanMove();// 0x2691604
	bool CanJump();// 0x26915dc

--------------------------------
Class: SimulatedSlidingMovementComponent.STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float StartBrakeMontageSpeed;//[Offset: 0x4b4, Size: 4]
	float EndBrakeMontageSpeed;//[Offset: 0x4b8, Size: 4]
	float SpeedThresholds;//[Offset: 0x4bc, Size: 4]
	float EnterSnowBoardUpImpulse;//[Offset: 0x4c0, Size: 4]
	float SpeedUpImpulse;//[Offset: 0x4c4, Size: 4]
	float JumpImpulse;//[Offset: 0x4c8, Size: 4]
	float JumpImpulseBig;//[Offset: 0x4cc, Size: 4]
	float ImpulseMinusGradeCompensate;//[Offset: 0x4d0, Size: 4]
	float MaxStayAirTimeUseServerCtr;//[Offset: 0x4d4, Size: 4]
	float StayAirTimer;//[Offset: 0x4d8, Size: 4]
	float FallingLandHardThreshold;//[Offset: 0x4dc, Size: 4]
	bool bIsLandingHeavy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0, Size: 1]
	float JumpRiseBaseTime;//[Offset: 0x4f4, Size: 4]
	float AutoExitHeightThreshold;//[Offset: 0x4f8, Size: 4]
	float HitTestToSeaLevelBias;//[Offset: 0x4fc, Size: 4]
	enum SnowBoardState;//[Offset: 0x500, Size: 1]
	float FallingEnterTime;//[Offset: 0x50c, Size: 4]
	float FlyingEnterTime;//[Offset: 0x514, Size: 4]
	float DisToLand;//[Offset: 0x520, Size: 4]
	Vector ImpactPoint;//[Offset: 0x524, Size: 12]
	Vector ImpactNormal;//[Offset: 0x530, Size: 12]
	Rotator DesiredLandRot;//[Offset: 0x53c, Size: 12]
	bool HasLandCheckResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	byte LastSurfaceType;//[Offset: 0x549, Size: 1]
	PhysicalMaterial* LastSurfacePhysicalMaterial;//[Offset: 0x54c, Size: 4]
	float SpeedUpJumpDelay;//[Offset: 0x554, Size: 4]
	float SpeedUpForwardParm;//[Offset: 0x558, Size: 4]
	<byte,float> VehiclePhysicalSurfaceDragConfig;//[Offset: 0x570, Size: 60]
	float NoMappingLinearDamping;//[Offset: 0x5ac, Size: 4]
	float AirLinearDamping;//[Offset: 0x5b0, Size: 4]
	float GravityMaxLandDis;//[Offset: 0x5b4, Size: 4]
	float NearLandAdjustDis;//[Offset: 0x5b8, Size: 4]
	float InitPowerTime;//[Offset: 0x5bc, Size: 4]
	float InitPowerCD;//[Offset: 0x5c0, Size: 4]
	CurveFloat* InitPowerCurve;//[Offset: 0x5c4, Size: 4]
	float SlideThrottleFactor;//[Offset: 0x5c8, Size: 4]
	float BackoffThrottleFactor;//[Offset: 0x5cc, Size: 4]
	float ForwardThrottleFactor;//[Offset: 0x5d0, Size: 4]
	float InitPowerSpeed;//[Offset: 0x5d4, Size: 4]
	float LandTraceMaxHeight;//[Offset: 0x5d8, Size: 4]
	float LandTraceForwardOffset;//[Offset: 0x5dc, Size: 4]
	int SlidingWheelNotInAirMinNum;//[Offset: 0x5e0, Size: 4]
	float SlidingSpeedTolerate;//[Offset: 0x5e4, Size: 4]
	float SlidingSpeedCosAngle;//[Offset: 0x5e8, Size: 4]
	float MagicFloat1;//[Offset: 0x5ec, Size: 4]
	float MagicFloat2;//[Offset: 0x5f0, Size: 4]
	float PlayAnimDisToLand;//[Offset: 0x5f4, Size: 4]
	float InitPowerTimeCounter;//[Offset: 0x5f8, Size: 4]
	bool RepValidInitPower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610, Size: 1]
	delegate OnSpeedReachJumpDelegate;//[Offset: 0x614, Size: 12]
	void ServerSetSnowBoardState(enum InState, bool bLandingHeavy);// 0x25ddaa0
	void ServerInitPower(bool IsEnterVehicle);// 0x25dd9d8
	void ServerDoJump();// 0x25dd97c
	void OnRep_SnowBoardState();// 0x25dd968
	void OnExitVehicle();// 0x25dd954
	void OnEnterVehicle(bool IsSucc);// 0x25dd8d4
	bool NeartLand();// 0x25dd8ac
	bool IsSpeedReachJumpThreshold();// 0x25dd884
	void EnterOrExitVehicleJump(bool IsEnter);// 0x23910d8
	void DelaySpeedUpJump();// 0x25dd870
	void ClientSetSnowBoardState(enum InState, bool bLandingHeavy);// 0x25dd760
	void BroadcastClientSpeedUp(bool IsEnterVehicle);// 0x25dd698

--------------------------------
Class: BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1190, Size: 4]
	void DeferredCreateDMI(int CallFunc_GetMaterialIndex_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue);// 0x46f6b154
	void SetDMIParam(FName Name, float Value, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x46f6b154
	void UpdateExhaustFx(FName ExhaustName, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, ParticleSoftWrapperArray CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, ParticleSoftWrapper CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, CustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAttached_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x46f6b154
	void OnClientVehicleHealthStateChanged(enum VehicleHealthState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue);// 0x46f6b154
	void CreateDMI();// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	void OnEngineStart();// 0x46f6b154
	void OnEngineStop();// 0x46f6b154
	void OnBoostingChanged();// 0x46f6b154
	void AfterBeginPlay();// 0x46f6b154
	void SetAvatarMID(MaterialInterface* MatDMI);// 0x46f6b154
	void OnSetTailLightValue(float LightValue);// 0x46f6b154
	void BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature(STExtraPlayerCharacter* Character, enum SeatType, int SeatIdx);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void ꁚ[IN�N�N();// 0x46f6b154
	void ExecuteUbergraph_BP_STExtraWheeledVehicle(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsDedicatedServer_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, MaterialInterface* K2Node_Event_MatDMI, MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsDedicatedServer_ReturnValue3, float K2Node_Event_LightValue, STExtraPlayerCharacter* K2Node_ComponentBoundEvent_Character, enum K2Node_ComponentBoundEvent_SeatType, int K2Node_ComponentBoundEvent_SeatIdx, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_SwitchPoseState_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_HasAuthority_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_AddUnique_ReturnValue, float CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x46f6b154
	BP_VehicleShowFrameComp_C* BP_VehicleShowFrameComp;//[Offset: 0x1194, Size: 4]
	ConditionalChildActorComponent* ConditionalChildActor1;//[Offset: 0x1198, Size: 4]
	ConditionalChildActorComponent* ConditionalChildActor;//[Offset: 0x119c, Size: 4]
	BP_VehicleFieldOfViewNotificationComponent_C* BP_VehicleFieldOfViewNotificationComponent1;//[Offset: 0x11a0, Size: 4]
	CameraComponent* Camera;//[Offset: 0x11a4, Size: 4]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0x11a8, Size: 4]
	bool IsPlayingEngineAk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ac, Size: 1]
	MaterialInstanceDynamic* DMI;//[Offset: 0x11b0, Size: 4]
	MaterialInstance* VehicleMaterial;//[Offset: 0x11b4, Size: 4]
	FName TailLightParamName;//[Offset: 0x11b8, Size: 8]
	FName FrontLightParamName;//[Offset: 0x11c0, Size: 8]
	FName FPPBoostLightParamName;//[Offset: 0x11c8, Size: 8]
	int[] PlayTireExplosionList;//[Offset: 0x11d0, Size: 12]

--------------------------------
Class: BP_VehicleShowFrameComp_C.ShowActorFrameComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ShowActorFrameComponent.SceneComponent.ActorComponent.Object
	FrameUITransformData FrameUITransformData;//[Offset: 0x240, Size: 64]
	MaterialBillboardComponent* FrameUI;//[Offset: 0x280, Size: 8]
	int TranslucentSortPriority;//[Offset: 0x288, Size: 4]
	MaterialInterface* Material;//[Offset: 0x28c, Size: 4]
	CurveFloat* DistanceToOpacityCurve;//[Offset: 0x290, Size: 4]
	bool bSizeIsInScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	CurveFloat* DistanceToSizeCurve;//[Offset: 0x298, Size: 4]
	FString FrameDetailsUIPath;//[Offset: 0x29c, Size: 12]
	FString FrameDetailsParentWidgetName;//[Offset: 0x2a8, Size: 12]
	FString FrameDetailsParentOuterName;//[Offset: 0x2b4, Size: 12]
	FString BPFunction_WhenWidgetCreate;//[Offset: 0x2c0, Size: 12]
	FString BPFunction_WhenWidgetDestroy;//[Offset: 0x2cc, Size: 12]
	ActorPositionWidget* DetailsWidget;//[Offset: 0x2d8, Size: 4]
	ActorPositionWidget* GetDetailsWidget();// 0x25d8b40
	void DestroyFrameUI();// 0x25d8b2c
	bool CreateFrameUI(int ParamIfNecessary);// 0x25d8aac

--------------------------------
Class: FrameUITransformData
	Transform Offset;//[Offset: 0x0, Size: 48]
	float BaseSizeX;//[Offset: 0x30, Size: 4]
	float BaseSizeY;//[Offset: 0x34, Size: 4]

--------------------------------
Class: ActorPositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x370, Size: 4]
	TextBlock* TextBlockDist;//[Offset: 0x374, Size: 4]
	Actor* AttachedActor;//[Offset: 0x378, Size: 4]
	Vector4 Limit;//[Offset: 0x380, Size: 16]
	Vector2D UIOffset;//[Offset: 0x390, Size: 8]
	Vector LocOffset;//[Offset: 0x398, Size: 12]
	bool BNeedShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	float AlphaBegin;//[Offset: 0x3a8, Size: 4]
	float AlphaEnd;//[Offset: 0x3ac, Size: 4]
	float AlphaStep;//[Offset: 0x3b0, Size: 4]
	float AlphaBeginDistance;//[Offset: 0x3b4, Size: 4]
	float AlphaEndDistance;//[Offset: 0x3b8, Size: 4]
	float ScaleBegin;//[Offset: 0x3bc, Size: 4]
	float ScaleEnd;//[Offset: 0x3c0, Size: 4]
	float ScaleStep;//[Offset: 0x3c4, Size: 4]
	float ScaleBeginDistance;//[Offset: 0x3c8, Size: 4]
	float ScaleEndDistance;//[Offset: 0x3cc, Size: 4]
	float MaxShowDistance;//[Offset: 0x3d0, Size: 4]
	int TargetDistance;//[Offset: 0x3d4, Size: 4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x3e4, Size: 4]
	void ShowArrowAngle(bool Visible, float angle);// 0x46f6b154
	void SetCurrentWidgetVisible(bool Visible);// 0x46f6b154
	void SetActorImage(Texture2D* Texture);// 0x46f6b154
	void PostAttachmentChanged();// 0x46f6b154
	void DetachFromActor(Actor* InActor);// 0x234c6b0
	void AttachToActor(Actor* InActor);// 0x234c638

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x110, Size: 12]
	delegate TextDelegate;//[Offset: 0x120, Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x130, Size: 28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x150, Size: 16]
	SlateFontInfo Font;//[Offset: 0x160, Size: 64]
	Vector2D ShadowOffset;//[Offset: 0x1a0, Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x1a8, Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x1b8, Size: 16]
	float MinDesiredWidth;//[Offset: 0x1c8, Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	void SetWrapTextAt(float InWrapTextAt);// 0x3e332a8
	void SetVerticalJustification(byte InJustification);// 0x3e33230
	void SetText(FText InText);// 0x3e330a8
	void SetShadowOffset(Vector2D InShadowOffset);// 0x3e33038
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x3e32fbc
	void SetOpacity(float InOpacity);// 0x3e32f44
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3e32ecc
	void SetJustification(byte InJustification);// 0x3e32e54
	void SetFont(SlateFontInfo InFontInfo);// 0x3e32c70
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x3e32a80
	void SetAutoEllipsisText(bool InAutoEllipsisText);// 0x3e32a00
	FText GetText();// 0x3e3293c

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xec, Size: 4]
	byte Justification;//[Offset: 0xf0, Size: 1]
	byte VerticalJustification;//[Offset: 0xf1, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf2, Size: 1]
	float WrapTextAt;//[Offset: 0xf4, Size: 4]
	enum WrappingPolicy;//[Offset: 0xf8, Size: 1]
	Margin Margin;//[Offset: 0xfc, Size: 16]
	float LineHeightPercentage;//[Offset: 0x10c, Size: 4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 4]
	Object* FontMaterial;//[Offset: 0x4, Size: 4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8, Size: 28]
	FName TypefaceFontName;//[Offset: 0x30, Size: 8]
	int Size;//[Offset: 0x38, Size: 4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 4]
	Object* OutlineMaterial;//[Offset: 0x4, Size: 4]
	LinearColor OutlineColor;//[Offset: 0x8, Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: ConditionalChildActorComponent.ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorPath;//[Offset: 0x270, Size: 40]
	class ChildActorSpawnCondition* ChildActorSpawnCondition;//[Offset: 0x298, Size: 4]
	bool IsDestoryConditionalChildActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]

--------------------------------
Class: ChildActorSpawnCondition.Object

--------------------------------
Class: BP_VehicleFieldOfViewNotificationComponent_C.BP_FieldOfViewNotificationComponent_C.FieldOfViewNotificationComponent.ActorComponent.Object
	FString GetUniqueIdentifier(Object* Context, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue3, Actor* CallFunc_GetOwner_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, STExtraVehicleBase* K2Node_DynamicCast_AsSTExtra_Vehicle_Base, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, STExtraPlayerCharacter* CallFunc_GetDriver_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue4, FString CallFunc_GetObjectName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8);// 0x46f6b154
	FString GetFieldOfViewTargetCategory(Object* Context, FString CallFunc_GetEnemyVehicle_ReturnValue, ReportClientFieldOfViewDataComponent* K2Node_DynamicCast_AsReport_Client_Field_Of_View_Data_Component, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, FString CallFunc_GetTeammateVehicle_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, Actor* CallFunc_GetOwner_ReturnValue2, STExtraVehicleBase* K2Node_DynamicCast_AsSTExtra_Vehicle_Base, bool K2Node_DynamicCast_bSuccess3, STExtraPlayerCharacter* CallFunc_GetDriver_ReturnValue, bool CallFunc_IsTeamMate_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154

--------------------------------
Class: BP_FieldOfViewNotificationComponent_C.FieldOfViewNotificationComponent.ActorComponent.Object
	FString GetFieldOfViewTargetCategory(Object* Context);// 0x46f6b154

--------------------------------
Class: BP_ServerSwitcher_C.ServerSwitchComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x130, Size: 4]
	void ReceiveBeginPlay();// 0x46f6b154
	void CustomEvent(bool BoolValue);// 0x46f6b154
	void ExecuteUbergraph_BP_ServerSwitcher(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool K2Node_CustomEvent_BoolValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154

--------------------------------
Class: ServerSwitchComponent.ActorComponent.Object
	delegate OnFPSMonitorConfigSwitchRecv;//[Offset: 0xd0, Size: 12]
	delegate OnFPSLowWarning;//[Offset: 0xdc, Size: 12]
	FPSMonitorConfigSwitch FPSMonitorConfigSwitch;//[Offset: 0xe8, Size: 20]
	float LowFPSWarningTipsLastTime;//[Offset: 0xfc, Size: 4]
	FString[] FPSLowWarningSDKMatch;//[Offset: 0x104, Size: 12]
	bool bLocalSwitcherFPSLowWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	void RequireConfigRPC();// 0x25d2668
	void OnUserQualitySettingChanged(int renderlevel);// 0x25d25f0
	void MakeLowFPSWarningEx();// 0x25d25dc
	void MakeLowFPSWarning(float targetFPS, float currentFPS);// 0x25d2520
	void CountingDown();// 0x25d250c
	void CloseFPSCheck();// 0x25d24f8
	void AnswerconfigRPC(FPSMonitorConfigSwitch configswitch);// 0x25d2444

--------------------------------
Class: FPSMonitorConfigSwitch
	bool bFPSMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float FPSCollectInternal;//[Offset: 0x4, Size: 4]
	int FPSCollectCountForGroup;//[Offset: 0x8, Size: 4]
	float FPSThreshold;//[Offset: 0xc, Size: 4]
	int FPSLowActionType;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BP_CommonBtn_C.CommonBtnComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x108, Size: 4]
	void OnChangeOpenDoorMode(int OpenMode);// 0x46f6b154
	void UnRegistShowDoorButton();// 0x46f6b154
	void OnShowDoorButton(byte Type);// 0x46f6b154
	void RegistShowDoorButton();// 0x46f6b154
	void ShowDoorButton(bool Show, bool Open, int OpenMode, BP_STExtraPlayerController_C* CallFunc_GetPlayerController_PlayerController);// 0x46f6b154
	void GetPlayerController(out BP_STExtraPlayerController_C* PlayerController, Actor* CallFunc_GetOwner_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void CharacterStatusChanged(bool IsNearDeath, bool IsRescueingOther);// 0x46f6b154
	void PlayerControllerReconnectedDelegate_Event();// 0x46f6b154
	void UI_Click(bool bSimulateExtraDoor);// 0x46f6b154
	void ToogleDoor();// 0x46f6b154
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);// 0x46f6b154
	void AutoOpenDoor(bool BoolValue);// 0x46f6b154
	void BP_SimulateUIClick(bool bExtraDoor);// 0x46f6b154
	void ExecuteUbergraph_BP_CommonBtn(int EntryPoint, bool Temp_bool_Variable, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate2, Actor* CallFunc_GetOwner_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_IsNearDeath, bool K2Node_CustomEvent_IsRescueingOther, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, bool K2Node_CustomEvent_bSimulateExtraDoor, bool Temp_bool_IsClosed_Variable, bool K2Node_Event_bShow, bool K2Node_Event_bOpen, int K2Node_Event_doorOpenMode, GameBackendHUD* CallFunc_GetInstance_ReturnValue, interface class K2Node_DynamicCast_AsDoor_Interface, bool K2Node_DynamicCast_bSuccess2, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, bool CallFunc_RefreshUIOnClientInf_ret, SaveGame* CallFunc_GetUserSettings_ReturnValue, bool CallFunc_IsValid_ReturnValue2, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess3, bool K2Node_CustomEvent_BoolValue, bool Temp_bool_Variable2, bool K2Node_Event_bExtraDoor, PUBGDoor* CallFunc_GetPriorityDoor_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsAimingExtraDoor_ReturnValue, bool K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate3);// 0x46f6b154
	int OpenMode;//[Offset: 0x10c, Size: 4]
	byte BtnType;//[Offset: 0x110, Size: 1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 1]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xd0, Size: 136]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 1]
	void Stop();// 0x4a79d10
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x4a79c54
	void SetTimelineLengthMode(byte NewLengthMode);// 0x4a79bdc
	void SetTimelineLength(float NewLength);// 0x4a79b64
	void SetPlayRate(float NewRate);// 0x4a79aec
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x4a799d8
	void SetNewTime(float NewTime);// 0x4a79960
	void SetLooping(bool bNewLooping);// 0x4a798e0
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x4a79824
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x4a797a4
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x4a796e8
	void ReverseFromEnd();// 0x4a796d4
	void Reverse();// 0x4a796c0
	void PlayFromStart();// 0x4a796ac
	void Play();// 0x4a79698
	void OnRep_Timeline();// 0x4a79684
	bool IsReversing();// 0x4a7965c
	bool IsPlaying();// 0x4a79634
	bool IsLooping();// 0x4a7960c
	float GetTimelineLength();// 0x4a795e4
	float GetPlayRate();// 0x4a795bc
	float GetPlaybackPosition();// 0x242981c
	bool GetIgnoreTimeDilation();// 0x4a79594

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	float Length;//[Offset: 0x4, Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	float PlayRate;//[Offset: 0xc, Size: 4]
	float Position;//[Offset: 0x10, Size: 4]
	TimelineEventEntry[] Events;//[Offset: 0x14, Size: 12]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 12]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x2c, Size: 12]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x38, Size: 12]
	delegate TimelinePostUpdateFunc;//[Offset: 0x48, Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x58, Size: 16]
	Object* PropertySetObject;//[Offset: 0x70, Size: 8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 8]
	Property* DirectionProperty;//[Offset: 0x80, Size: 4]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 4]
	delegate EventFunc;//[Offset: 0x8, Size: 16]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 4]
	delegate InterpFunc;//[Offset: 0x8, Size: 16]
	FName TrackName;//[Offset: 0x18, Size: 8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 4]

--------------------------------
Class: STR_CameraSetting
	float TargetArmLength_30_2007ABB34694949F7A9AC4BB2C7AE57D;//[Offset: 0x0, Size: 4]
	float LagSpeed_34_CBFA29604D40F5BC431D969F9216FCF7;//[Offset: 0x4, Size: 4]
	Vector SocketOffset_26_FD34F6424351327A3F447882FEBC198D;//[Offset: 0x8, Size: 12]

--------------------------------
Class: BP_GiveupDamageType_C.STExtraDamageType.DamageType.Object

--------------------------------
Class: BP_PaintDecalDetectLine_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e8, Size: 4]
	void UpdateDetectLine(Actor* CallFunc_GetParentActor_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, enum CallFunc_IsValidPaintDecalTarget_OutvalidationType, Vector CallFunc_IsValidPaintDecalTarget_OutStart, Vector CallFunc_IsValidPaintDecalTarget_OutEnd, bool CallFunc_IsValidPaintDecalTarget_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	void ReceiveTick(float DeltaSeconds);// 0x46f6b154
	void StartDetecting();// 0x46f6b154
	void StopDetecting();// 0x46f6b154
	void ExecuteUbergraph_BP_PaintDecalDetectLine(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x46f6b154
	StaticMeshComponent* StaticMesh;//[Offset: 0x2ec, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2f0, Size: 4]

--------------------------------
Class: SurviveGameState_C.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	BP_ObjectPosMgr_C* BP_ObjectPosMgr;//[Offset: 0xe18, Size: 4]
	TriggerLevelsComponent* TriggerLevels;//[Offset: 0xe1c, Size: 4]
	AirAttackCS* AirAttackCS;//[Offset: 0xe20, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0xe24, Size: 4]
	Vector PlaneCanJumpPos;//[Offset: 0xe28, Size: 12]
	Vector PlaneForceJumpPos;//[Offset: 0xe34, Size: 12]
	float WidgetAngle;//[Offset: 0xe40, Size: 4]
	float RouteLength;//[Offset: 0xe44, Size: 4]
	Vector2D CanJumpLocInMap;//[Offset: 0xe48, Size: 8]

--------------------------------
Class: BP_ObjectPosMgr_C.ObjectPosUIMgr.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a8, Size: 4]
	FString GetLuaModule();// 0x46f6b154
	void LuaBeginPlay();// 0x53b8964
	void ReceiveBeginPlay();// 0x46f6b154
	void ExecuteUbergraph_BP_ObjectPosMgr(int EntryPoint);// 0x46f6b154

--------------------------------
Class: ObjectPosUIMgr.ActorComponent.Object
	float LineTickness;//[Offset: 0xd0, Size: 4]
	int DrawTemplateLimit;//[Offset: 0xd4, Size: 4]
	LinearColor DrawTemplateLimitColor;//[Offset: 0xd8, Size: 16]
	int RootUserWidgetZorder;//[Offset: 0xe8, Size: 4]
	class UserWidget* RootUserWidgetClass;//[Offset: 0xf0, Size: 40]
	UserWidget* RootUserWidget;//[Offset: 0x118, Size: 4]
	CanvasPanel* RootPanel;//[Offset: 0x11c, Size: 4]
	bool EnableModifyTemplateList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int ProcessWaittingCount;//[Offset: 0x134, Size: 4]
	int DelayCount;//[Offset: 0x138, Size: 4]
	float DelayTime;//[Offset: 0x13c, Size: 4]
	<int,bool> TemplateActiveMap;//[Offset: 0x140, Size: 60]
	<int,ObjectPosUIInfo> OverrideTemplateList;//[Offset: 0x17c, Size: 60]
	ObjectPosUITemplate[] TemplateList;//[Offset: 0x1b8, Size: 12]
	ObjectPosUIItem[] WidgetItemList;//[Offset: 0x1c4, Size: 12]
	<int,ObjectPosWattingData> WaittingDataMap;//[Offset: 0x1d0, Size: 60]
	ObjectPosUIData[] ProcessDataList;//[Offset: 0x20c, Size: 12]
	ObjectPosUIData[] DelayProcessDataList;//[Offset: 0x218, Size: 12]
	<int,ObjectPosUIData> CurrentDataMap;//[Offset: 0x224, Size: 60]
	<int,ObjectPosUIPool*> WidgetPool;//[Offset: 0x260, Size: 60]
	void SetRootWidgetVisable(bool InVisable);// 0x2549558
	static void SetObjectWidgetVisableStatic(const Object* WorldContent, int InInstanceID, bool InVisable);// 0x2549458
	void SetObjectWidgetVisable(int InInstanceID, bool InVisable);// 0x2549394
	static void SetObjectTargetActorStatic(const Object* WorldContent, int InInstanceID, Actor* InTarget);// 0x254929c
	static void SetObjectPosStatic(const Object* WorldContent, int InInstanceID, Vector InPos);// 0x2549198
	void SetHideFlagList(out const FName[] InHideFlagList);// 0x25490f8
	void SetHideFlag(bool IsAdd, FName HideFlag);// 0x2549028
	static void SetExParamStatic(const Object* WorldContent, int InInstanceID, int InParam);// 0x2548f30
	void SetExParam(int InInstanceID, int InParam);// 0x2548e74
	static void RemoveTemplatePosUIStatic(const Object* WorldContent, int InInstanceID);// 0x2548dc0
	void RemoveTemplatePosUI(int InInstanceID);// 0x2548d48
	void OnLoadDefaultWidgetClassCompleted();// 0x2548d34
	void OnHandleActorSpawn(Actor* InSpawnActor);// 0x236ffe8
	void LoadTemplatePosUI(out const ObjectPosUIInfo UIInfo, out const ObjectPosUIData UIData);// 0x2548a00
	static bool IsInstanceValidStatic(const Object* WorldContent, int InInstanceID);// 0x2548938
	bool IsInstanceValid(int InInstanceID);// 0x25488b8
	ObjectPositionWidget* GetObjectWidget(int InInstanceID);// 0x2548838
	static ObjectPosUIMgr* GetObjectPosUIMgr(const Object* WorldContent);// 0x25487c0
	static ObjectUIPosCacheDataActor* GetCacheObject(const Object* WorldContent);// 0x2548748
	void ClearAllHideFlag();// 0x2548734
	static int AddTemplatePosUIStatic(const Object* WorldContent, int InTemplateID, const Actor* InActor, Vector InPos, int InTeamID, int InParam);// 0x2548550
	int AddTemplatePosUI(int InTemplateID, const Actor* InActor, Vector InPos, int InTeamID, int InParam);// 0x25483a4

--------------------------------
Class: ObjectPosUIInfo
	bool SizeAutoContent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool ShowSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum ShowType;//[Offset: 0x2, Size: 1]
	int MemPoolCount;//[Offset: 0x4, Size: 4]
	FString LuaClassPath;//[Offset: 0x8, Size: 12]
	class ObjectPositionWidget* WidgetClass;//[Offset: 0x18, Size: 40]
	bool CompareUesContains;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	FString MountName;//[Offset: 0x44, Size: 12]
	FString OuterName;//[Offset: 0x50, Size: 12]
	AnchorData LayoutData;//[Offset: 0x5c, Size: 40]
	int ZOrder;//[Offset: 0x84, Size: 4]
	FName LogicNames;//[Offset: 0x88, Size: 8]
	enum[] PlaybackTypeFilter;//[Offset: 0x90, Size: 12]
	WidgetParamInfo WidgetParamInfo;//[Offset: 0xa0, Size: 128]

--------------------------------
Class: ObjectPositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool CheckGameModeStateValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	bool isSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x372, Size: 1]
	bool IsTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x373, Size: 1]
	bool NormalPanelVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool ArrowPanelVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	int DistanceForText;//[Offset: 0x390, Size: 4]
	float DistanceToPlayer;//[Offset: 0x398, Size: 4]
	int ExParam;//[Offset: 0x3a4, Size: 4]
	float ShowRemainingTime;//[Offset: 0x3a8, Size: 4]
	WidgetParamInfo ParamInfo;//[Offset: 0x3c0, Size: 128]
	bool DrawInteractionResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool InteractionResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	float InteractionDuraction;//[Offset: 0x448, Size: 4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x44c, Size: 4]
	STExtraGameStateBase* GameStateBase;//[Offset: 0x450, Size: 4]
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x454, Size: 4]
	CanvasPanelSlot* DistPanelSlot;//[Offset: 0x458, Size: 4]
	TextBlock* TextBlockDist;//[Offset: 0x45c, Size: 4]
	Widget* DistPanel;//[Offset: 0x460, Size: 4]
	Widget* NormalPanel;//[Offset: 0x464, Size: 4]
	Widget* ArrowPanel;//[Offset: 0x468, Size: 4]
	Widget* ArrowWidget;//[Offset: 0x46c, Size: 4]
	Actor* TargetActor;//[Offset: 0x470, Size: 4]
	void UpdateAlphaAndScaleControlValue();// 0x2547074
	void SetTargetActor(Actor* InTarget);// 0x2546fc4
	void SetStateWidgetPanel(Widget* InScreenPanel, Widget* OutScreenPanel, Widget* InArrowWidget, Widget* InDistanPanel, TextBlock* InDistanText);// 0x2546e38
	void SetObjectLoction(out const Vector InPos);// 0x2546d3c
	void SetItemInvalid();// 0x2546d20
	void SetIsVisibility(bool InVisable);// 0x2546c80
	void OnActorRecycled();// 0x2546c6c
	bool GetWidgetVisible();// 0x2546c50
	Actor* GetTargetActor();// 0x2546c34
	Vector GetObjectLoction();// 0x2546c10
	bool GetIsTeammate();// 0x2546bf4
	bool GetIsSelf();// 0x2546bd8
	float GetDistanceToPlayer();// 0x2546bbc
	int GetDistanceForText();// 0x2546ba0
	void FreshStateVisibility();// 0x2546b8c
	void Event_UpdateWidgetVisible();// 0x2451bc0
	void Event_UpdateVisibility(out const Vector Loc);// 0x2546af4
	void Event_UpdateTargetPos();// 0x2546ad8
	void Event_UpdateDistance(int InDistance);// 0x2546a58
	void Event_UnInitParam();// 0x2546a3c
	void Event_TickWidgetEnd(float InDeltaTime);// 0x25469bc
	void Event_TickWidgetBegin(float InDeltaTime);// 0x254693c
	void Event_SetExParam(int InParam);// 0x25468bc
	void Event_InitParamEnd();// 0x251ecc8
	void Event_InitParam(out const WidgetParamInfo InParam, out const Vector InDestinPos, Actor* InTargetActor);// 0x2546680
	void Event_FreshTargetActor();// 0x24b11ac
	void Event_FreshPosition();// 0x24b11f0
	bool Event_CalculationVisable(out const Vector Loc);// 0x25465dc

--------------------------------
Class: WidgetParamInfo
	bool BNeedShowArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool BOutScreenHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool BBeOcclusionHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool BBeOcclusionUseCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool BDistanceUse3D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	int OcclusionTraceMobilityType;//[Offset: 0x8, Size: 4]
	float MaxShowDistance;//[Offset: 0xc, Size: 4]
	float IgnoreScaleVal;//[Offset: 0x10, Size: 4]
	float MinScaleDistance;//[Offset: 0x14, Size: 4]
	float MaxScaleDistance;//[Offset: 0x18, Size: 4]
	float LerpFromScale;//[Offset: 0x1c, Size: 4]
	float LerpToScale;//[Offset: 0x20, Size: 4]
	float IgnoreAlphaVal;//[Offset: 0x24, Size: 4]
	float MinAlphaDistance;//[Offset: 0x28, Size: 4]
	float MaxAlphaDistance;//[Offset: 0x2c, Size: 4]
	float LerpFromAlpha;//[Offset: 0x30, Size: 4]
	float LerpToAlpha;//[Offset: 0x34, Size: 4]
	bool BUseCenterExtendLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool BUsePercentLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	Vector4 Limit;//[Offset: 0x40, Size: 16]
	Vector2D UIOffset;//[Offset: 0x50, Size: 8]
	Vector LocOffset;//[Offset: 0x58, Size: 12]
	FName CheckGameModeState;//[Offset: 0x68, Size: 8]
	float IconShowTime;//[Offset: 0x70, Size: 4]

--------------------------------
Class: ObjectPosUITemplate
	int TemplateID;//[Offset: 0x0, Size: 4]
	FString Describe;//[Offset: 0x4, Size: 12]
	ObjectPosUIInfo ObjectPosUIInfo;//[Offset: 0x10, Size: 288]

--------------------------------
Class: ObjectPosUIItem
	ObjectPositionWidget* ObjectWidget;//[Offset: 0x0, Size: 8]
	ObjectPosUIData Data;//[Offset: 0x8, Size: 48]

--------------------------------
Class: ObjectPosWattingData
	int DelayCount;//[Offset: 0x0, Size: 4]
	ObjectPosUIInfo UIInfo;//[Offset: 0x10, Size: 288]
	ObjectPosUIData UIData;//[Offset: 0x130, Size: 48]

--------------------------------
Class: ObjectPosUIPool.Object
	UserWidget*[] PoolList;//[Offset: 0x1c, Size: 12]

--------------------------------
Class: ObjectUIPosCacheDataActor.Actor.Object
	ObjectPosUIData[] CacheDataList;//[Offset: 0x2e4, Size: 12]
	void SetObjectWidgetVisable(int InInstanceID, bool InVisable);// 0x254b59c
	void SetObjectTargetActor(int InInstanceID, Actor* InTarget);// 0x254b4e0
	void SetObjectPos(int InInstanceID, Vector InPos);// 0x254b410
	void SetExParam(int InInstanceID, int InParam);// 0x254b354
	void RemoveCacheData(int InInstanceID);// 0x254b2dc
	bool IsInstanceValid(int InInstanceID);// 0x254b25c
	void CopyToUIMgr(ObjectPosUIMgr* PosUIMgr);// 0x254b1e4
	void CleanData();// 0x254b1d0
	int AddCacheData(int InTemplateID, const Actor* InActor, out const Vector InPos, int InTeamID, int InParam);// 0x254b020

--------------------------------
Class: TriggerLevelsComponent.ActorComponent.Object
	TriggerLevelSyncInfo[] ActiveTriggerLevels;//[Offset: 0xd0, Size: 12]
	float TickInterval;//[Offset: 0xdc, Size: 4]
	float ClientCheckDistance;//[Offset: 0xe0, Size: 4]
	FString[] LevelCheckWhiteList;//[Offset: 0xe4, Size: 12]
	void UpdateClientWhiteList(out const FString[] InClientWhiteList);// 0x2751f38
	void UpdateClientBlackList(out const FString[] InClientBlackList);// 0x2751e6c
	void UnloadStreamLevel(FString LevelName, int LevelID);// 0x2751d44
	void OnUnLoadStreamLevelCompleted(int Linkage);// 0x2751ccc
	void OnRep_ActiveTriggerLevels();// 0x2751cb8
	void OnLoadStreamLevelCompleted(int Linkage);// 0x2751c40
	void LoadStreamLevel(FString LevelName, int LevelID);// 0x2751b18

--------------------------------
Class: TriggerLevelSyncInfo
	int TriggerLevelID;//[Offset: 0x0, Size: 4]
	FString TriggerLevelName;//[Offset: 0x4, Size: 12]
	int TriggerLevelDistance;//[Offset: 0x10, Size: 4]
	bool bIsIgnoreZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	bool bRepInstanceParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 1]
	FString[] PropertyBlackList;//[Offset: 0x18, Size: 12]
	Box LevelBox;//[Offset: 0x24, Size: 28]

--------------------------------
Class: AirAttackCS.TimerRegistComponent.GameModeBaseComponent.ActorComponent.Object
	AkAudioEvent* BlackWarningSound;//[Offset: 0x12c, Size: 4]
	AkAudioEvent* FlySound;//[Offset: 0x130, Size: 4]
	float FlySoundDelayTime;//[Offset: 0x134, Size: 4]
	bool bShowBlackIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 1]
	bool bOptimizeMarkNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139, Size: 1]
	bool bOptimizeMiniMarkNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 1]
	float BlackWarningSoundRange;//[Offset: 0x13c, Size: 4]
	int BlackIconIndex;//[Offset: 0x140, Size: 4]
	float IconRadius;//[Offset: 0x144, Size: 4]
	int CallBlackIconIndex;//[Offset: 0x148, Size: 4]
	float CallIconRadius;//[Offset: 0x14c, Size: 4]
	int BlackCenterIconIndex;//[Offset: 0x150, Size: 4]
	float BlackCenterIconRadius;//[Offset: 0x154, Size: 4]
	float FilterHouseInterval;//[Offset: 0x158, Size: 4]
	float FilterHouseRange;//[Offset: 0x15c, Size: 4]
	int MaxShownHouse;//[Offset: 0x160, Size: 4]
	float MinMapScale;//[Offset: 0x164, Size: 4]
	float MaxMapScale;//[Offset: 0x168, Size: 4]
	float CallBlackAirAttackShowIconDelayTime;//[Offset: 0x16c, Size: 4]
	float BlackAirAttackShowIconDelayTime;//[Offset: 0x170, Size: 4]
	class STExtraExplosionEffect* ExplosionEffectTemplate;//[Offset: 0x174, Size: 4]
	Vector[] BombedHousePosArr;//[Offset: 0x184, Size: 12]
	Vector[] BombedHouseCenterArr;//[Offset: 0x190, Size: 12]
	RegisterTimer[] CallBlackAirAttackTimerRegister;//[Offset: 0x19c, Size: 12]
	int MiniMapCurrentLocalHouseInstanceCount;//[Offset: 0x220, Size: 4]
	int CurrentLocalHouseInstanceCount;//[Offset: 0x348, Size: 4]
	int CurrentLocalHouseCenterInstanceCount;//[Offset: 0x350, Size: 4]
	void ShowCenterMark();// 0x235b010
	void ShowCallBlackAirAttackIcon(int waveindex);// 0x235af98
	void ShowBlackAirAttackIcon();// 0x235af84
	void ShowAllBombHouse();// 0x235af70
	void ShowAllBombedHouseInMiniMap();// 0x235af5c
	void RefreshCallBlackAirAttackWarningCircle(int waveindex, bool bShown, Vector airAttackAreaSrc);// 0x235ae3c
	void PlayCallBlackAirAttackWarningAudio(Vector airAttackAreaSrc);// 0x235adbc
	void PlayBlackAirAttackWarningAudio();// 0x235ada8
	void OnRep_BombedHousePosArr();// 0x235ad94
	void OnRep_BombedHouseCenterArr();// 0x235ad80
	void OnMapUIScaleChanged(float MapUIScale);// 0x235ad08
	void OnCallBlackAirAttack(byte airattacktype, int waveindex, enum AirAttackMode, Vector airAttackAreaSrc);// 0x235abac
	void OnAirAttack(byte airattacktype, int waveindex, enum AirAttackMode);// 0x235aaac
	void FilterMiniMapBombHousePosInst();// 0x235aa98
	void FilterBombHousePosInst();// 0x235aa84
	void DoBombHarmAtLocation(out Vector bombLocation);// 0x235a9f4
	void ClearFilteredMark();// 0x235a9e0
	void ClearCenterMark();// 0x235a9cc
	void CallBlackAirAttackThrowBomb(int waveindex);// 0x235a954
	void AirAttackThrowBomb(int Index);// 0x235a8dc

--------------------------------
Class: BRGameStateTeam_DeathMatch.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	enum DeathMatchSubModeType;//[Offset: 0xe18, Size: 1]
	int RemainMatchTime;//[Offset: 0xe1c, Size: 4]
	int DeathMatchWinScore;//[Offset: 0xe20, Size: 4]
	int RespawnInvincibleTime;//[Offset: 0xe24, Size: 4]
	int Score_Kill;//[Offset: 0xe28, Size: 4]
	int ContinuouKillNum;//[Offset: 0xe2c, Size: 4]
	int SuperGodKillNum;//[Offset: 0xe30, Size: 4]
	int GameComingEndNotify_RemainKillNum;//[Offset: 0xe34, Size: 4]
	int GameComingEndNotify_RemainTime;//[Offset: 0xe38, Size: 4]
	int GameComingEndNotify_HalfTime;//[Offset: 0xe3c, Size: 4]
	ReplayTeamScore ReplayTeamScore;//[Offset: 0xe40, Size: 8]
	int ReplayRedTeamMaxScore;//[Offset: 0xe48, Size: 4]
	int ReplayBlueTeamMaxScore;//[Offset: 0xe4c, Size: 4]
	delegate ARModeTeamMaxScoreReplayDelegate;//[Offset: 0xe50, Size: 12]
	FString ReplayMaxRedPlayerUID;//[Offset: 0xe5c, Size: 12]
	FString ReplayMaxBluePlayerUID;//[Offset: 0xe68, Size: 12]
	delegate ARModeTeamMaxPlayerChangedDelegate;//[Offset: 0xe74, Size: 12]
	int SelectedArmsRaceWeaponGroupID;//[Offset: 0xe80, Size: 4]
	bool bUseTopPlayerScoreAsTeamScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe84, Size: 1]
	FString MedalDataTableName;//[Offset: 0xe88, Size: 12]
	FString DeathMatchWeaponConfigTableName;//[Offset: 0xe94, Size: 12]
	DeathMatchTeamScoreData[] DeathMatchTeamScoreDatas;//[Offset: 0xea0, Size: 12]
	DeathMatchTeamScoreData[] ReplayDeathMatchTeamScoreDatas;//[Offset: 0xeac, Size: 12]
	DeathMatchTeamScoreData[] OnLookReplayDeathMatchTeamScoreDatas;//[Offset: 0xeb8, Size: 12]
	bool bRepIsAlreadyFirstKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec4, Size: 1]
	delegate OnDeathMatchTeamAddPlayerDelegate;//[Offset: 0xfdc, Size: 12]
	delegate OnDeathMatchTeamScoreChangeDelegate;//[Offset: 0xfe8, Size: 12]
	delegate OnDeathMatchPlayerScoreDatasChangeDelegate;//[Offset: 0xff4, Size: 12]
	delegate OnDeathMatchGlobalNotifyDelegate;//[Offset: 0x1000, Size: 12]
	delegate OnDeathMatchGlobalAudioDelegate;//[Offset: 0x100c, Size: 12]
	delegate OnDeathMatchGameEndDelegate;//[Offset: 0x1018, Size: 12]
	delegate OnDeathMatchTeamScoreChangeReplayDelegate;//[Offset: 0x1024, Size: 12]
	DeathMatchWWISEManagerComponent* WWISEManagerComponent;//[Offset: 0x1030, Size: 4]
	bool bIsAlreadyFirstKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1034, Size: 1]
	void Server_BroadcastDeathMatchGameStartFightNotify();// 0x23d3c38
	void Replay_RPC_CheckKilledPlayerNotify(const DeathMatchPlayerStateData KillerStateData, const DeathMatchPlayerStateData VictimerStateData);// 0x23d3a48
	void OnRep_ReplayRedTeamMaxScore();// 0x23d3a34
	void OnRep_ReplayMaxRedPlayerUID();// 0x23d3a20
	void OnRep_ReplayMaxBluePlayerUID();// 0x23d3a0c
	void OnRep_ReplayDeathMatchTeamScoreDatas();// 0x23d39f8
	void OnRep_ReplayBlueTeamMaxScore();// 0x23d39e4
	void OnRep_RepIsAlreadyFirstKill();// 0x23d39d0
	void OnRep_RefreshReplayScore();// 0x23d39bc
	void OnPlayerStateChanged();// 0x23d39a8
	void MulticastRPC_BroadcastDeathMatchGameEndNotify(int WinTeamID, enum GameEndType);// 0x23d38e4
	bool GetDeathMatchTeamScoreRank(int InPlayerKey, out int OutTeamRank, out int OutPlayerRank);// 0x23d37b8
	DeathMatchPlayerStateData GetCurrentClientDeathMatchPlayerStateData();// 0x23d35a4

--------------------------------
Class: ReplayTeamScore
	int RedTeamScore;//[Offset: 0x0, Size: 4]
	int BlueTeamScore;//[Offset: 0x4, Size: 4]

--------------------------------
Class: DeathMatchTeamScoreData
	int TeamID;//[Offset: 0x0, Size: 4]
	FString Result;//[Offset: 0x4, Size: 12]
	int TeamRank;//[Offset: 0x10, Size: 4]
	int TeamScore;//[Offset: 0x14, Size: 4]
	DeathMatchPlayerStateData[] PlayerStateDatas;//[Offset: 0x18, Size: 12]

--------------------------------
Class: DeathMatchPlayerStateData
	uint32 PlayerKey;//[Offset: 0x0, Size: 4]
	DeathMatchPlayerInfo DeathMatchPlayerInfo;//[Offset: 0x8, Size: 72]
	int TeamID;//[Offset: 0x50, Size: 4]
	int Score;//[Offset: 0x54, Size: 4]
	int Rank;//[Offset: 0x58, Size: 4]
	int OccupyScore;//[Offset: 0x5c, Size: 4]
	int Kills;//[Offset: 0x60, Size: 4]
	int Assists;//[Offset: 0x64, Size: 4]
	int Deaths;//[Offset: 0x68, Size: 4]
	int ContinuouKills;//[Offset: 0x6c, Size: 4]
	bool IsAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int InfectType;//[Offset: 0x74, Size: 4]
	int CurLiveState;//[Offset: 0x78, Size: 4]
	int InGameLevel;//[Offset: 0x7c, Size: 4]
	bool IsRealTimeLevelUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int ReasonID;//[Offset: 0x84, Size: 4]
	int HeadShotID;//[Offset: 0x88, Size: 4]

--------------------------------
Class: DeathMatchPlayerInfo
	uint64 UID;//[Offset: 0x0, Size: 8]
	FString UIDString;//[Offset: 0x8, Size: 12]
	FString PlayerName;//[Offset: 0x14, Size: 12]
	FString IconURL;//[Offset: 0x20, Size: 12]
	byte Gender;//[Offset: 0x2c, Size: 1]
	byte PlatformGender;//[Offset: 0x2d, Size: 1]
	int PlayerLevel;//[Offset: 0x30, Size: 4]
	int SegmentLevel;//[Offset: 0x34, Size: 4]
	int AvatarBoxId;//[Offset: 0x38, Size: 4]
	int[] AchievementPrizeIDList;//[Offset: 0x3c, Size: 12]

--------------------------------
Class: DeathMatchWWISEManagerComponent.ActorComponent.Object
	<enum,WWIEBankContainer> RandEventPool;//[Offset: 0xd0, Size: 60]
	<enum,AkAudioEvent*> GlobalEventPool;//[Offset: 0x10c, Size: 60]
	void OnReload();// 0x243e5e0
	void OnPlayerStateRep();// 0x243e5cc
	void OnGlobalNotify(const DeathMatchPlayerStateData KillerData, const DeathMatchPlayerStateData VictimerData, enum GlobalNotifyReason);// 0x243e268
	void DeathMatchMedalNotify(out const int[] MedalIDList);// 0x243e1c8

--------------------------------
Class: WWIEBankContainer
	AkAudioEvent* MaleBank;//[Offset: 0x0, Size: 4]
	AkAudioEvent* FemaleBank;//[Offset: 0x4, Size: 4]

--------------------------------
Class: Vault_Controller_C.PlayerVaultComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x150, Size: 4]
	void ForceSetPlayerToStartLocAfterCancel(Actor*[] Temp_object_Variable, byte[] K2Node_MakeArray_Array, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetScaledCapsuleHalfHeight_ReturnValue, float CallFunc_GetScaledCapsuleRadius_ReturnValue, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue);// 0x46f6b154
	FString GetVaultKeyByBlockHeightAndBlockLengthWithJump(float Height, float BlockLength, bool bIsJump, bool CallFunc_GetVaultDataByBlockHeightAndBlockLengthWithJump_IsFind, FString CallFunc_GetVaultDataByBlockHeightAndBlockLengthWithJump_OutVaultKey, VaultData CallFunc_GetVaultDataByBlockHeightAndBlockLengthWithJump_VaultDataTemp);// 0x46f6b154
	void GetVaultDataByBlockHeightAndBlockLengthWithJump(float BlockHeight, float BlockLength, bool isjump, out bool IsFind, out FString OutVaultKey, out VaultData VaultDataTemp, bool IsJumpTemp, float TestBlocklength, float blockHeightTemp, FString nowkey, float TestHeight, float BlockLengthTemp, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetAIVaultKeyWithJump_ReturnValue, int CallFunc_Array_Length_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue2, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VaultData CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue6);// 0x46f6b154
	void GetStartPosToCheckActor(out Vector worldPos, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x46f6b154
	bool CheckCanVaultWithPosition(bool bUsePawnPosition, bool bCheckState, Vector WorldLocation, Rotator WorldRotation, float NowHeightTestHeight, Vector nowHeightHitPoint, bool isInFalling, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_IsInEditor_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_GetNowData_IsGet, bool CallFunc_CheckHeight_isActive, Vector CallFunc_CheckHeight_point, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_GetCliblastCheckDis_result, bool CallFunc_CheckHeight_isActive2, Vector CallFunc_CheckHeight_point2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_CheckNowisJumpAnimation_result, bool CallFunc_CheckNowisJumpAnimation_ishasAnimation, byte[] CallFunc_GetTestObjectChannels_channels, bool CallFunc_CheckIsValidByHeightCheckDis_isVaild, byte[] CallFunc_GetTestObjectChannels_channels2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Actor*[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_CheckUpLengthBlock_result, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, bool CallFunc_GetCrossMaxBlockDisOffsset_result, bool CallFunc_CheckHeight_isActive3, Vector CallFunc_CheckHeight_point3, bool CallFunc_CheckHeight_isActive4, Vector CallFunc_CheckHeight_point4, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, Actor*[] Temp_object_Variable, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, bool CallFunc_GetCrossMaxBlockDisForward_result, FString CallFunc_Concat_StrStr_ReturnValue7, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, bool CallFunc_CheckForward_isActive, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Actor*[] Temp_object_Variable2, Vector CallFunc_MakeVector_ReturnValue3, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_AllowState_ReturnValue, bool CallFunc_IsFalling_ReturnValue, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x46f6b154
	void GetVaultDataByBlockHeightAndBlockLength(float BlockHeight, float BlockLength, out bool IsFind, out FString OutVaultKey, out VaultData VaultDataTemp, float TestBlocklength, float blockHeightTemp, FString nowkey, float TestHeight, float BlockLengthTemp, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetAIVaultKey_ReturnValue, int CallFunc_Array_Length_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue2, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VaultData CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue5);// 0x46f6b154
	bool GetIsJumpByBlockHeightAndBlockLength(float Height, float BlockLength, bool CallFunc_GetVaultDataByBlockHeightAndBlockLength_IsFind, FString CallFunc_GetVaultDataByBlockHeightAndBlockLength_OutVaultKey, VaultData CallFunc_GetVaultDataByBlockHeightAndBlockLength_VaultDataTemp, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x46f6b154
	FString GetVaultKeyByBlockHeightAndBlockLength(float Height, float BlockLength, bool CallFunc_GetVaultDataByBlockHeightAndBlockLength_IsFind, FString CallFunc_GetVaultDataByBlockHeightAndBlockLength_OutVaultKey, VaultData CallFunc_GetVaultDataByBlockHeightAndBlockLength_VaultDataTemp);// 0x46f6b154
	void GetRealCharacter(out Character* Result);// 0x46f6b154
	void ActorVaultStart(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* CheckActor, float Crossmax, float CrossmaxDis, Vector hitpoint, Rotator movedir, AnimMontage* vaultMontage, bool IsCheckDynamic, VaultData vaultDatanow, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_K2_GetActorLocation_ReturnValue, AnimMontage* CallFunc_GetVaultAnimByName_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, Character* K2Node_DynamicCast_AsCharacter2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue3, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float CallFunc_Montage_Play_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue3, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x46f6b154
	void JumpVaultCheck(out bool Result, byte[] CallFunc_GetTestObjectChannels_channels, Actor*[] K2Node_MakeArray_Array, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x46f6b154
	void ServerCrossingBlockCheck(Vector StartPos, float distoblock, float BlockHeight, Rotator movedir, out bool Result, byte[] CallFunc_GetTestObjectChannels_channels, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, Actor*[] K2Node_MakeArray_Array, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x46f6b154
	void UpdateMoveMode(bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x46f6b154
	FString GetVaultKeyByBlockHeight(float Height, float CallFunc_GetJumpLengthByHeight_length);// 0x46f6b154
	void fpsVaultGetRotaion(out Rotator rotion, Rotator CallFunc_GetRelicateRotator_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x46f6b154
	void SetFpsVaultSpeed(float nowdataHeight, float NowfpsBlockheight, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FpsVaultData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x46f6b154
	void FpsVaultGetTppAnimationInfo(out FString AnimationName, out float animationTime, out float PlayRate, float animationrate, float NowfpsBlockheight, float nowdataHeight, float NowTime, FString nowAnimationName, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FpsVaultData CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z);// 0x46f6b154
	void FpsGetTotalTime(out float TotalTime, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue3, float CallFunc_VSize_ReturnValue2, float CallFunc_VSize_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue2);// 0x46f6b154
	void FpsTestLimitPostion(Vector nowpostion, out bool Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x46f6b154
	void FpsVaultTrigger(Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2);// 0x46f6b154
	void FpsVaultServerCheating(Vector playerpos, Vector topPos, out bool Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_K2_MoveSweepTest_OutHit, bool CallFunc_K2_MoveSweepTest_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue2, float CallFunc_VSize2D_ReturnValue, float CallFunc_VSize2D_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x46f6b154
	void FpsVaultStart(Vector StartPos, Vector topPos, float offsetMaxX, float offsetMaxY, bool isjump, Rotator palyerRtion, float BlockLength, Vector toblockHitVec, float CallFunc_VSize_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue2, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess, AnimMontage* CallFunc_GetVaultFPPAnimByName_ReturnValue, AnimMontage* CallFunc_GetVaultFPPAnimByName_ReturnValue2, AnimMontage* CallFunc_GetVaultFPPAnimByName_ReturnValue3, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_FpsVaultGetTppAnimationInfo_animationname, float CallFunc_FpsVaultGetTppAnimationInfo_animationTime, float CallFunc_FpsVaultGetTppAnimationInfo_playrate, AnimMontage* CallFunc_GetVaultFPPAnimByName_ReturnValue4, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_FpsGetTotalTime_totalTime, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, Vector CallFunc_Normal_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue4, Vector CallFunc_Normal_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue3, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue4, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_PlayAnimMontage_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue3, float CallFunc_PlayAnimMontage_ReturnValue2, float CallFunc_PlayAnimMontage_ReturnValue3, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue4, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_EnterState_ReturnValue, bool CallFunc_AllowState_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue2, bool CallFunc_HasState_ReturnValue);// 0x46f6b154
	void FpsVaultGetNowPostion(float nowPastTime, out Vector nowpostion, out bool isGet, float OnBlockTime, float DownTotalTime, float UpTotalTime, float PastTime, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue3, Vector CallFunc_Subtract_VectorVector_ReturnValue2, Vector CallFunc_VLerp_ReturnValue2, float CallFunc_VSize_ReturnValue2, bool CallFunc_FpsTestLimitPostion_result, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue5, Vector CallFunc_VLerp_ReturnValue3, Vector CallFunc_Subtract_VectorVector_ReturnValue3, float CallFunc_VSize_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue6);// 0x46f6b154
	void FpsVualtUpdate(Vector NowTargetPostion, float nowPastTime, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_FpsVaultGetNowPostion_nowPostion, bool CallFunc_FpsVaultGetNowPostion_isGet, Rotator CallFunc_fpsVaultGetRotaion_rotion, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_GetScaledCapsuleRadius_ReturnValue, byte[] K2Node_MakeArray_Array, Actor*[] K2Node_MakeArray_Array2, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, HitResult CallFunc_K2_MoveUpdatedComponent_OutHit, bool CallFunc_K2_MoveUpdatedComponent_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x46f6b154
	void SetStopForwardDis(float shoulddis, out float Result, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x46f6b154
	void DealBrokenWindows(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable2, Vector CallFunc_GetStartPosToCheckActor_worldPos, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_GetStartPosToCheckActor_worldPos2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable2, BP_WindowCompBase_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, BP_WindowCompBase_C* CallFunc_Array_Get_Item2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue4, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue2, float CallFunc_VSize2D_ReturnValue, float CallFunc_VSize2D_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2);// 0x46f6b154
	bool VaultFromCPP(bool CallFunc_CheckCanVault_isActive);// 0x46f6b154
	void CheckVaultWindows(Vector CheckStart, Vector CheckEnd, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Actor*[] Temp_object_Variable, byte[] K2Node_MakeArray_Array, HitResult[] CallFunc_SphereTraceMultiForObjects_OutHits, bool CallFunc_SphereTraceMultiForObjects_ReturnValue, int CallFunc_Array_Length_ReturnValue, HitResult CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, BP_WindowCompBase_C* K2Node_DynamicCast_AsBP_Window_Comp_Base, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_AddUnique_ReturnValue);// 0x46f6b154
	void EnableCulling(bool bEnable, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_isAutonomous_NewParam);// 0x46f6b154
	void GetCliblastCheckDis(out float Result, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_HasState_ReturnValue3);// 0x46f6b154
	void NowStateCheck(bool Sprint, bool Walk, bool stand, out bool Result, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2);// 0x46f6b154
	void CheckNowisJumpAnimation(float Height, float thcikLength, out bool Result, out bool ishasAnimation, float nowTestheight, float nowSelectThickLength, FString nowkey, float nowThcklength, float nowheight, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_NowStateCheck_result, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4);// 0x46f6b154
	void CheckIsValidByHeightCheckDis(float nowheight, float checkDis, out bool IsVaild, float nowChckDis, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, VaultCheckRule CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x46f6b154
	void IsValidVault(out bool IsValid, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue3, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2);// 0x46f6b154
	void GetTestObjectChannels(out byte[] Channels, byte[] K2Node_MakeArray_Array);// 0x46f6b154
	void UpdateMontageSpeed(bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3);// 0x46f6b154
	void ServerCheckBlockDis(Vector hitpoint, FString Key, Vector StartPos, float blockdis, float BlockHeight, float BlockLength, out bool Result, FString CallFunc_Concat_StrStr_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, HitResult CallFunc_K2_MoveSweepTest_OutHit, bool CallFunc_K2_MoveSweepTest_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_VSize_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_VSize2D_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Abs_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue4, bool CallFunc_LessEqual_FloatFloat_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, bool CallFunc_LessEqual_FloatFloat_ReturnValue5);// 0x46f6b154
	void GetNowOppSideDis(out float Result, float totalLength, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x46f6b154
	void CheckUpLengthBlock(out bool Result, Vector EndPos, Vector StartPos, float NowHeightTestHeight, Vector CallFunc_Multiply_VectorInt_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Divide_VectorFloat_ReturnValue, bool CallFunc_ComponentHasTag_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, bool CallFunc_ComponentHasTag_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Actor*[] K2Node_MakeArray_Array, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2);// 0x46f6b154
	void GetCrossMaxBlockDisOffsset(out bool Result, float TestCrossBlockMaxDis, float NowTestHalfHeight, Actor*[] Temp_object_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_GetNowOppSideDis_result, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, bool CallFunc_Greater_FloatFloat_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_GetPlayerStartZ_result, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue5, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue4, float CallFunc_VSize_ReturnValue);// 0x46f6b154
	void SetLimitPostion(float XValue, float ZVaule, Vector realPos, Vector CallFunc_GetStartPosToCheckActor_worldPos, Vector CallFunc_K2_GetActorLocation_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult);// 0x46f6b154
	void CheckForward(out bool IsActive, float nowCheckDis, Vector nowNormal, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, Actor*[] K2Node_MakeArray_Array, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue3, byte[] CallFunc_GetTestObjectChannels_channels2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue2, Actor*[] K2Node_MakeArray_Array2, float CallFunc_Divide_FloatFloat_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue4, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit2, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue2, bool CallFunc_BreakHitResult_bBlockingHit2, bool CallFunc_BreakHitResult_bInitialOverlap2, float CallFunc_BreakHitResult_Time2, float CallFunc_BreakHitResult_Distance2, Vector CallFunc_BreakHitResult_Location2, Vector CallFunc_BreakHitResult_ImpactPoint2, Vector CallFunc_BreakHitResult_Normal2, Vector CallFunc_BreakHitResult_ImpactNormal2, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat2, Actor* CallFunc_BreakHitResult_HitActor2, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent2, FName CallFunc_BreakHitResult_HitBoneName2, int CallFunc_BreakHitResult_HitItem2, int CallFunc_BreakHitResult_FaceIndex2, Vector CallFunc_BreakHitResult_TraceStart2, Vector CallFunc_BreakHitResult_TraceEnd2, bool CallFunc_NotEqual_ObjectObject_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_ForwardTestObjectType_result, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_Normal_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Multiply_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector CallFunc_MakeVector_ReturnValue4, Vector CallFunc_GetForwardVector_ReturnValue2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_Normal_ReturnValue2, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector2D CallFunc_MakeVector2D_ReturnValue2, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_DotProduct2D_ReturnValue, float CallFunc_DegAcos_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4);// 0x46f6b154
	void CheckHeight(float Height, out bool IsActive, out Vector Point, float nowminheight, float testCapsuleRadius, Vector nowHitPoint, float nowCheckHeight, float NowHeightTestHeight, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor*[] K2Node_MakeArray_Array, float CallFunc_Add_FloatFloat_ReturnValue, byte[] CallFunc_GetTestObjectChannels_channels, byte[] CallFunc_GetTestObjectChannels_channels2, byte[] CallFunc_GetTestObjectChannels_channels3, Vector CallFunc_Multiply_VectorFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, Actor*[] K2Node_MakeArray_Array2, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_GetScaledCapsuleRadius_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Actor*[] K2Node_MakeArray_Array3, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, Vector CallFunc_MakeVector_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, int Temp_int_Loop_Counter_Variable, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, float CallFunc_BreakVector_X6, float CallFunc_BreakVector_Y6, float CallFunc_BreakVector_Z6, float CallFunc_BreakVector_X7, float CallFunc_BreakVector_Y7, float CallFunc_BreakVector_Z7, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, Vector CallFunc_MakeVector_ReturnValue4, Vector CallFunc_MakeVector_ReturnValue5, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, float CallFunc_BreakVector_X8, float CallFunc_BreakVector_Y8, float CallFunc_BreakVector_Z8, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue4, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3);// 0x46f6b154
	void GetJumpLengthByHeight(float Height, out float Length, float TestHeight, float nowheight, FString nowkey, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_GetAIVaultLengthKey_ReturnValue, int CallFunc_Array_Length_ReturnValue, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue2, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, VaultData CallFunc_Map_Find_Value3, bool CallFunc_Map_Find_ReturnValue3, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4);// 0x46f6b154
	void printReason(FString Result);// 0x46f6b154
	void PrintEnable(PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Conv_BoolToText_ReturnValue);// 0x46f6b154
	void CacultLimitData(Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Subtract_FloatFloat_ReturnValue4);// 0x46f6b154
	void GetCrossMaxBlockDisForward(out bool Result, float NowTestHalfHeight, float CallFunc_GetNowOppSideDis_result, byte[] CallFunc_GetTestObjectChannels_channels, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetParentActor_ReturnValue, Actor*[] K2Node_MakeArray_Array, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_GetPlayerStartZ_result, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue5, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue3, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_VSize_ReturnValue);// 0x46f6b154
	void GetPlayerStartZ(out float Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x46f6b154
	void GetCrossBlockMaxFallingHeight(float capsuleTestLefHeight, Actor*[] Temp_object_Variable, byte[] CallFunc_GetTestObjectChannels_channels, float CallFunc_GetPlayerStartZ_result, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, HitResult CallFunc_CapsuleTraceSingleForObjects_OutHit, bool CallFunc_CapsuleTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x46f6b154
	void ForwardTestObjectType(Actor* Actor, out bool Result, Actor* NewLocalVar, bool CallFunc_ActorHasTag_ReturnValue, LandscapeStreamingProxy* K2Node_DynamicCast_AsLandscape_Streaming_Proxy, bool K2Node_DynamicCast_bSuccess, Landscape* K2Node_DynamicCast_AsLandscape, bool K2Node_DynamicCast_bSuccess2, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess3);// 0x46f6b154
	void SetEnd(WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, STExtraWeapon* CallFunc_GetInventoryWeaponByLogicSocket_ReturnValue, WeaponEntity* CallFunc_GetWeaponEntityComponent_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, bool CallFunc_LeaveState_ReturnValue, bool CallFunc_IsValidVault_isvalid, bool CallFunc_IsValid_ReturnValue2, interface class CallFunc_SwitchToLastWeapon_self_CastInput, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LeaveState_ReturnValue2);// 0x46f6b154
	void SetVaultData(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* CheckActor, float crossmaxFalling, float CrossmaxDis, Vector hitpoint, Rotator movedir, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void UpdatePostion2(float testhalfHeight, float ZOffset, Vector nowmoveOffset, float preTime, bool isUping, float shouldheight, float nowheight, float shoulddis, float nowdis, bool CallFunc_Not_PreBool_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_IsUnAttachToWorld_ReturnValue, float CallFunc_GetScaledCapsuleRadius_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue3, Vector CallFunc_K2_GetComponentLocation_ReturnValue2, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_GetStartPosToCheckActor_worldPos, bool CallFunc_Not_PreBool_ReturnValue4, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue2, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue5, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, float CallFunc_SetStopForwardDis_result, float CallFunc_GetAnimMontagePlayRate_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue4, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue3, float CallFunc_Subtract_FloatFloat_ReturnValue4, byte[] K2Node_MakeArray_Array, Actor*[] K2Node_MakeArray_Array2, float CallFunc_GetTimeSeconds_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue5, float CallFunc_Multiply_FloatFloat_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue6, bool CallFunc_Less_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue3, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue7, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue4, bool CallFunc_Less_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_GetFloatValue_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue4, float CallFunc_GetFloatValue_ReturnValue3, Vector CallFunc_Conv_RotatorToVector_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue5, Vector CallFunc_VLerp_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, HitResult CallFunc_K2_SetActorLocationAndRotation_SweepHitResult, bool CallFunc_K2_SetActorLocationAndRotation_ReturnValue, bool CallFunc_BooleanOR_ReturnValue3, HitResult CallFunc_K2_MoveUpdatedComponent_OutHit, bool CallFunc_K2_MoveUpdatedComponent_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue3);// 0x46f6b154
	void GetNowData(bool isInFalling, out bool isGet, bool isNowInFalling, float nowTestheight, float nowSelectThickLength, float TestHeight, bool IsGetData, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue2, FString[] CallFunc_Map_Keys_Keys, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, FString CallFunc_Array_Get_Item, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_BoolBool_ReturnValue2, bool CallFunc_NowStateCheck_result, bool CallFunc_EqualEqual_BoolBool_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue5, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_BooleanAND_ReturnValue7, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue);// 0x46f6b154
	void CheckCanVault(out bool IsActive, bool isInFalling, float NowHeightTestHeight, Vector nowHeightHitPoint, bool nowResult, Actor*[] Temp_object_Variable, int Temp_int_Array_Index_Variable, Actor*[] Temp_object_Variable2, float CallFunc_GetScaledCapsuleHalfHeight_ReturnValue, bool CallFunc_JumpVaultCheck_result, bool CallFunc_GetNowData_IsGet, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_CheckHeight_isActive, Vector CallFunc_CheckHeight_point, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_CheckHeight_isActive2, Vector CallFunc_CheckHeight_point2, float CallFunc_GetCliblastCheckDis_result, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_CheckNowisJumpAnimation_result, bool CallFunc_CheckNowisJumpAnimation_ishasAnimation, byte[] CallFunc_GetTestObjectChannels_channels, bool CallFunc_CheckIsValidByHeightCheckDis_isVaild, byte[] CallFunc_GetTestObjectChannels_channels2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Actor*[] K2Node_MakeArray_Array, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_Add_FloatFloat_ReturnValue2, bool CallFunc_CheckUpLengthBlock_result, float CallFunc_Add_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue4, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue2, Actor*[] CallFunc_CapsuleOverlapActors_OutActors, bool CallFunc_CapsuleOverlapActors_ReturnValue, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue, bool CallFunc_GetCrossMaxBlockDisOffsset_result, bool CallFunc_CheckHeight_isActive3, Vector CallFunc_CheckHeight_point3, bool CallFunc_CheckForward_isActive, bool CallFunc_CheckHeight_isActive4, Vector CallFunc_CheckHeight_point4, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, bool CallFunc_IsInEditor_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue10, bool CallFunc_GetCrossMaxBlockDisForward_result, float CallFunc_Subtract_FloatFloat_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue2, int Temp_int_Loop_Counter_Variable, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue, HitResult[] CallFunc_CapsuleTraceMultiForObjects_OutHits2, bool CallFunc_CapsuleTraceMultiForObjects_ReturnValue2, HitResult CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_VSize_ReturnValue, bool CallFunc_HasState_ReturnValue, float CallFunc_BreakVector_X5, float CallFunc_BreakVector_Y5, float CallFunc_BreakVector_Z5, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_AllowState_ReturnValue);// 0x46f6b154
	void StartVault();// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void JumpVault();// 0x46f6b154
	void VaultServer(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Actor* WindowActor, Rotator movedir);// 0x46f6b154
	void vaultAll(float dis, float Height, float Length, FString VaultKey, Vector StartPos, Actor* CheckActor, float crossmaxFalling, float CrossmaxDis, Vector hitpoint, Rotator movedir);// 0x46f6b154
	void jumpfromUI();// 0x46f6b154
	void VaultFail(FString Reason);// 0x46f6b154
	void UpdateVault_BluePrint();// 0x46f6b154
	void interrupted(enum State, enum InterruptedBy);// 0x46f6b154
	void vaultLeave(enum State);// 0x46f6b154
	void DsCheckStopVault();// 0x46f6b154
	void StopVault();// 0x46f6b154
	void FpsVaultToAll(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x46f6b154
	void FpsVaultServer(Vector StartPos, Vector topPos, float crossblockMaxFall, float crossblockMaxDis, bool isjump, Rotator movedir, float blobkthick);// 0x46f6b154
	void CharacterStartVault(float dis, float Height, float Length, out const FString VaultKey, Vector StartPos, Actor* CheckActor, float crossblockMaxFall, float crossblockMaxDis, Vector hitpoint, Rotator movedir, AnimMontage* AnimMontage, bool bCheckDynamicBlock);// 0x46f6b154
	void Vault();// 0x46f6b154
	void PreSaveCacheData();// 0x46f6b154
	void OnRespawned_BlueprintImpl();// 0x46f6b154
	void ForceStopVaultOnServer();// 0x46f6b154
	void ExecuteUbergraph_Vault_Controller(int EntryPoint, int CallFunc_GetConsoleVariableIntValue_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, bool CallFunc_AllowState_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, CH_Base_AnimBP_C* K2Node_DynamicCast_AsCH_Base_Anim_BP, bool K2Node_DynamicCast_bSuccess, VaultData CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, byte CallFunc_GetCurrentUsingPropSlot_ReturnValue, bool CallFunc_HasAuthority_ReturnValue2, bool CallFunc_EnterState_ReturnValue, bool CallFunc_HasState_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue2, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_IsLocallyControlled_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, FString CallFunc_Concat_StrStr_ReturnValue4, AnimMontage* CallFunc_GetVaultAnimByName_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_PlayAnimMontage_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Character* K2Node_DynamicCast_AsCharacter, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue2, STExtraWeapon* CallFunc_GetCurrentUsingWeapon_ReturnValue, WeaponEntity* CallFunc_GetWeaponEntityComponent_ReturnValue, bool CallFunc_HasAuthority_ReturnValue3, int Temp_int_Array_Index_Variable, bool CallFunc_IsLocallyControlled_ReturnValue2, float K2Node_CustomEvent_dis2, float K2Node_CustomEvent_height2, float K2Node_CustomEvent_length2, FString K2Node_CustomEvent_vaultKey2, Vector K2Node_CustomEvent_StartPos2, Actor* K2Node_CustomEvent_CheckActor2, float K2Node_CustomEvent_crossblockMaxFall, float K2Node_CustomEvent_crossblockMaxDis, Vector K2Node_CustomEvent_hitpoint2, Actor* K2Node_CustomEvent_WindowActor, Rotator K2Node_CustomEvent_movedir2, bool CallFunc_ServerCrossingBlockCheck_result, bool CallFunc_ServerCheckBlockDis_Result, float K2Node_CustomEvent_Dis, float K2Node_CustomEvent_Height, float K2Node_CustomEvent_length, FString K2Node_CustomEvent_VaultKey, Vector K2Node_CustomEvent_StartPos, Actor* K2Node_CustomEvent_CheckActor, float K2Node_CustomEvent_crossmaxFalling, float K2Node_CustomEvent_crossmaxDis, Vector K2Node_CustomEvent_hitpoint, Rotator K2Node_CustomEvent_movedir, bool CallFunc_BooleanAND_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, GameModeBase* CallFunc_GetGameMode_ReturnValue, UAEGameMode* K2Node_DynamicCast_AsUAEGame_Mode, bool K2Node_DynamicCast_bSuccess3, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess4, Controller* CallFunc_GetController_ReturnValue, UAEPlayerController* K2Node_DynamicCast_AsUAEPlayer_Controller, bool K2Node_DynamicCast_bSuccess5, FString K2Node_CustomEvent_Reason, bool CallFunc_CheckAcknowledgedPawn_ReturnValue, bool CallFunc_LeaveState_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue3, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess6, FString CallFunc_MakeLiteralString_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue2, enum K2Node_CustomEvent_state2, enum K2Node_CustomEvent_InterruptedBy, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum K2Node_CustomEvent_State, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_IsValid_ReturnValue3, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue4, bool CallFunc_EnterState_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue3, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, bool CallFunc_HasAuthority_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, Vector K2Node_Event_startPos3, Vector K2Node_Event_topPos2, float K2Node_Event_crossblockMaxFall3, float K2Node_Event_crossblockMaxDis3, bool K2Node_Event_isjump2, Rotator K2Node_Event_movedir3, float K2Node_Event_blobkthick2, Vector K2Node_Event_startPos2, Vector K2Node_Event_topPos, float K2Node_Event_crossblockMaxFall2, float K2Node_Event_crossblockMaxDis2, bool K2Node_Event_isjump, Rotator K2Node_Event_movedir2, float K2Node_Event_blobkthick, Vector CallFunc_Subtract_VectorVector_ReturnValue2, bool CallFunc_FpsVaultServerCheating_result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector2D CallFunc_MakeVector2D_ReturnValue, FString CallFunc_MakeLiteralString_ReturnValue3, float CallFunc_VSize2D_ReturnValue, bool CallFunc_ServerCrossingBlockCheck_result2, bool CallFunc_BooleanAND_ReturnValue4, float K2Node_Event_dis, float K2Node_Event_height, float K2Node_Event_length, FString K2Node_Event_VaultKey, Vector K2Node_Event_startPos, Actor* K2Node_Event_checkActor, float K2Node_Event_crossblockMaxFall, float K2Node_Event_crossblockMaxDis, Vector K2Node_Event_hitpoint, Rotator K2Node_Event_movedir, AnimMontage* K2Node_Event_AnimMontage, bool K2Node_Event_bCheckDynamicBlock, float CallFunc_GetAnimMontagePlayRate_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue2, bool CallFunc_EnterState_ReturnValue3, Rotator CallFunc_Conv_VectorToRotator_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue5, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_Subtract_VectorVector_ReturnValue3, Vector CallFunc_Subtract_VectorVector_ReturnValue4, FString[] CallFunc_Map_Keys_Keys, FString CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, VaultData CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue3, PlayerAIVaultCheckData K2Node_MakeStruct_PlayerAIVaultCheckData, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess7, int CallFunc_Array_Add_ReturnValue, bool CallFunc_CanEnterState_ReturnValue, bool CallFunc_IsValid_ReturnValue4, FString CallFunc_MakeLiteralString_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue6, bool CallFunc_IsDedicatedServer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue12, bool CallFunc_IsValid_ReturnValue5, int CallFunc_GetConsoleVariableIntValue_ReturnValue2, int CallFunc_GetConsoleVariableIntValue_ReturnValue3, bool CallFunc_LessEqual_IntInt_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue7);// 0x46f6b154
	BP_PlayerPawn_C* PlayerPawn;//[Offset: 0x154, Size: 4]
	float DeltaTime;//[Offset: 0x158, Size: 4]
	float NowBlockDis;//[Offset: 0x15c, Size: 4]
	float NowBlockHeight;//[Offset: 0x160, Size: 4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0x164, Size: 4]
	float NowCrossBlockMaxDis;//[Offset: 0x168, Size: 4]
	float NowBlockLength;//[Offset: 0x16c, Size: 4]
	float maxCheckDis;//[Offset: 0x170, Size: 4]
	float MaxCheckOppSiteDis;//[Offset: 0x174, Size: 4]
	float UnActiveMaxAngle;//[Offset: 0x178, Size: 4]
	float MaxCheckHeight;//[Offset: 0x17c, Size: 4]
	Actor* CheckActor;//[Offset: 0x180, Size: 4]
	Vector PlayerStartPostion;//[Offset: 0x184, Size: 12]
	Rotator PlayerRotation;//[Offset: 0x190, Size: 12]
	Vector hitpoint;//[Offset: 0x19c, Size: 12]
	PrimitiveComponent* HitComponent;//[Offset: 0x1a8, Size: 4]
	float CapsuleRadius;//[Offset: 0x1ac, Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x1b0, Size: 4]
	Vector blockDir;//[Offset: 0x1b4, Size: 12]
	VaultData NowVaultData;//[Offset: 0x1c0, Size: 84]
	float MaxJumpLength;//[Offset: 0x214, Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	float CountTime;//[Offset: 0x21c, Size: 4]
	byte NowDrawDebugType;//[Offset: 0x220, Size: 1]
	float realStartTime;//[Offset: 0x224, Size: 4]
	Vector DataStartpos;//[Offset: 0x228, Size: 12]
	FString nowVaultKey;//[Offset: 0x234, Size: 12]
	<FString,VaultData> vaultDataallMap;//[Offset: 0x240, Size: 60]
	bool isend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	float nowMaxX;//[Offset: 0x280, Size: 4]
	float nowMinFallingY;//[Offset: 0x284, Size: 4]
	float realStartZ;//[Offset: 0x288, Size: 4]
	float OffsetSpeed;//[Offset: 0x28c, Size: 4]
	byte gunSlot;//[Offset: 0x290, Size: 1]
	Vector oppsiteHitPoint;//[Offset: 0x294, Size: 12]
	Vector uphitPoint;//[Offset: 0x2a0, Size: 12]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	float heightoffsetcheck;//[Offset: 0x2b0, Size: 4]
	float HeightFowardCheck;//[Offset: 0x2b4, Size: 4]
	float minVaultHeight;//[Offset: 0x2b8, Size: 4]
	float nowAnimSpeed;//[Offset: 0x2bc, Size: 4]
	float animSpeedChangeTime;//[Offset: 0x2c0, Size: 4]
	float animChangegSpeedRate;//[Offset: 0x2c4, Size: 4]
	bool ischangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	VaultCheckRule[] CheckRuleList;//[Offset: 0x2cc, Size: 12]
	float laststandDis;//[Offset: 0x2d8, Size: 4]
	float lastwalkDis;//[Offset: 0x2dc, Size: 4]
	float lastsprintDis;//[Offset: 0x2e0, Size: 4]
	BP_WindowCompBase_C*[] VaultWindows;//[Offset: 0x2e4, Size: 12]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	float windowsbrokenoffsetdis;//[Offset: 0x2f4, Size: 4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	Vector PlayerStartDir;//[Offset: 0x2fc, Size: 12]
	bool waitStopvaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	float stopVaultOppDis;//[Offset: 0x30c, Size: 4]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x310, Size: 4]
	float FpsVaultSpeed;//[Offset: 0x314, Size: 4]
	Vector FpsVaultStartPosition;//[Offset: 0x318, Size: 12]
	Vector FpsvVaultTopoffsetPostion;//[Offset: 0x324, Size: 12]
	Vector FpsVaultTopPosition;//[Offset: 0x330, Size: 12]
	Vector FpsVaultEndPosition;//[Offset: 0x33c, Size: 12]
	bool FpsVaultIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	float FpsVaultMontangeTotalTime;//[Offset: 0x34c, Size: 4]
	FString FpsVaultMontageName;//[Offset: 0x350, Size: 12]
	float FpsVaultMontageTopTime;//[Offset: 0x35c, Size: 4]
	float FpsVaultCheckDis;//[Offset: 0x360, Size: 4]
	float FpsVaultCheckHeight;//[Offset: 0x364, Size: 4]
	float FpsVaultCheckThick;//[Offset: 0x368, Size: 4]
	bool NowIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c, Size: 1]
	float FpsCheatingVaule;//[Offset: 0x370, Size: 4]
	float FpsMinHtight;//[Offset: 0x374, Size: 4]
	FpsVaultData[] FpsVaultAnimationList;//[Offset: 0x378, Size: 12]
	bool fpsisplayedcamerashake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 1]
	float fpsvaultshakeoffsetheight;//[Offset: 0x388, Size: 4]
	float JumpVauleMinDisToland;//[Offset: 0x38c, Size: 4]
	float blockledageZ;//[Offset: 0x390, Size: 4]
	Actor* OwnerActor;//[Offset: 0x394, Size: 4]
	<FString,AnimMontage*> PlayerVaultMontageDataMap;//[Offset: 0x398, Size: 60]
	AnimMontage* NowMontage;//[Offset: 0x3d4, Size: 4]
	bool isShouldSkipDynamicCol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool PlayerPawnIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	bool CheckActorisValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da, Size: 1]
	Character* nowCharacter;//[Offset: 0x3dc, Size: 4]
	float afterblockMinHeightOffset;//[Offset: 0x3e0, Size: 4]
	float DoorHeightForwardChek;//[Offset: 0x3e4, Size: 4]
	bool initRuncheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]

--------------------------------
Class: VaultData
	FString montageSectionName_7_0E6EFDD2441CFF562A032DAC952922CF;//[Offset: 0x0, Size: 12]
	CurveFloat* upCurve_69_EB26D4B04E0BF112150F9DAEBC25B4F7;//[Offset: 0xc, Size: 4]
	CurveFloat* fowardCurve_31_D55B5E974DFC24E74019D6A31F141C7C;//[Offset: 0x10, Size: 4]
	float blockdis_28_FAA34AE04D5F621CD5FA08B1C4D4B37E;//[Offset: 0x14, Size: 4]
	float blockheight_27_6E4FCDFF4446BA2250C19BB28913EBD8;//[Offset: 0x18, Size: 4]
	float blokcThicklength_70_9688AE2B4F2BEF79873A64A463F93E21;//[Offset: 0x1c, Size: 4]
	bool IsJump_18_602D0B664C933E0434EF71A8DFFDBD7F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool forceStartSync_39_921F70144A2C12C3A5C929BEE107315F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool forceZPostionStartSync_90_D54E574045CB2629E4013399A3615907;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool forceStartLocAfterCancel_104_894EA0614CD5D4DDAA1762899C14E783;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	float CountTime_44_F467486040D210D7A55E3A93FD62BD77;//[Offset: 0x24, Size: 4]
	float playSpeed_50_D2F6C3D243B8799B4E0FE88E44823E6D;//[Offset: 0x28, Size: 4]
	float speedChangeTime_58_14BE38BF403A2B6F8E94E387CB638965;//[Offset: 0x2c, Size: 4]
	float changeSpeedRate_61_5D150C9C4C80B4F16BD0EF8309AC2BEA;//[Offset: 0x30, Size: 4]
	bool standState_63_6706D1D149B7C65CE7BCB0B80179A054;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool walkState_65_CABF0046484F703B4F0E4BA3AC9869C4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	bool SprintState_67_661945074C9AB243C7C7B98121DC76CC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36, Size: 1]
	bool isPutUpGun_73_29CDC65141670209C60AC7B5423932FF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37, Size: 1]
	float BreakWindowDelayTime_76_9869354F4F44910A229A82B65F612FF6;//[Offset: 0x38, Size: 4]
	bool IsCancelable_78_298DE56E46F42A44C1EC8F9E8BA27BD0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float MinCancelVTimer_84_5B6F3A36470D81814354F49C1D1C7B1B;//[Offset: 0x40, Size: 4]
	bool fallingVault_87_A2007D6D46965CBF59D42FB5E701E86D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	float MaxCancelVTimer_85_94626C4447005BBF447CAE8AC5AEE74F;//[Offset: 0x48, Size: 4]
	float fallingvaultMinHeight_93_514D32B048BD48E39B548584CAD58E11;//[Offset: 0x4c, Size: 4]
	float crossMinFallHeight_102_5CF9F9A249D6A146F4925D8360D15405;//[Offset: 0x50, Size: 4]

--------------------------------
Class: FpsVaultData
	float height_2_6778DFBB410A85EE91BEA6B781695021;//[Offset: 0x0, Size: 4]
	FString montageName_7_CA242A584BEEC1452642F38AA6D6DBDC;//[Offset: 0x4, Size: 12]
	float TimeLength_6_7FB8643042854CAE734259ADA01E6C94;//[Offset: 0x10, Size: 4]
	bool isJunp_9_ACBB864A4F8D9AC4532F6A813ABF2CA8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float movespeed_12_E5EBE4EE4240C619828D8BAC783C265D;//[Offset: 0x18, Size: 4]
	float speedrate_15_62D9B9D84072A09B660969889D7617FC;//[Offset: 0x1c, Size: 4]

--------------------------------
Class: BP_WindowCompBase_C.UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x700, Size: 4]
	void callvoicecheck(Vector CallFunc_K2_GetComponentLocation_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void NotifyServerBroken();// 0x46f6b154
	void LocalHandleWindowBrokenBP(bool bInitial, bool bLocal);// 0x46f6b154
	void ExecuteUbergraph_BP_WindowCompBase(int EntryPoint, PlayerController* CallFunc_GetPlayerController_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, UAEHouseActor* K2Node_DynamicCast_AsUAEHouse_Actor, bool K2Node_DynamicCast_bSuccess, UAEWindowRepData CallFunc_GetRepData_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue2, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue2, bool K2Node_Event_bInitial, bool K2Node_Event_bLocal, AkComponent* CallFunc_GetAkComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue3, int CallFunc_PostAkEvent_ReturnValue, bool CallFunc_OnSameTeam_ReturnValue, bool CallFunc_IsValid_ReturnValue4, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x46f6b154
	AkAudioEvent* BrokenSound;//[Offset: 0x704, Size: 4]
	float voiceShowTime;//[Offset: 0x708, Size: 4]

--------------------------------
Class: LandscapeStreamingProxy.LandscapeProxy.Actor.Object
	Landscape* LandscapeActor;//[Offset: 0x6a0, Size: 28]

--------------------------------
Class: CH_Base_AnimBP_C.STExtraAnimInstance.STExtraAnimInstanceBase.AnimInstanceBase.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1190, Size: 4]
	void InitAnimVarDefaultValue();// 0x46f6b154
	void OnLoaded_5490E6F0469DC87FB9FBDDA9FF90C7A2(Object* Loaded);// 0x46f6b154
	void OnLoaded_5490E6F0469DC87FB9FBDDA9D703BE43(Object* Loaded);// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B59343664AC();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_B2F791E64EDB();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_F6D7DD6A403();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_71504472478();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_6E46129C4B61CAA4();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D9EA1E284D0();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_6904FBD042F();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_C3774AAD495();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D87B9FFF40B();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_5C09D152435B2E49();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_A2D1C6B84DA();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_44A5B8CE475();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_F28E2A424F();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_1CA2C6504EB6D();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_E1D2BE8E44();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_1E77A757476();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_B3AD733F4922AFAD();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_498F1954461BE8D0();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_622C90C34D2();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_7D2D3CDF4CC43884();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_889C354A43E();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_84772815402();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_A2883EB746();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotateRootBone_F71FB4C142A8();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_LayeredBoneBlend_183C719444();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D7428F0E4FD();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_1F7D9D194D();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_253D3877409();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_LayeredBoneBlend_4EF78C1B4D();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_884AC72D4D2();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_7C101FD044850033();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_4CF8CB9E4B3();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_RotationOffsetBlendSpace_F2();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_F31C810746D();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_LayeredBoneBlend_1CB7599B40();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_0EF5334A430();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_8E964C0A4A4();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_92D4D11D499C04AA();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_84F5CCB947D();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_A6C712DB4F081105();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_F4392EC74C2();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_9BEDD6B444C();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_568411434AE41336();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_46063A1C49C();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_9AA3C81A4813();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_5B3179124044A8F();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_06C8BE01495();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByInt_1E0B621F45D9();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_3C1C448E4BF();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_6D0039F746();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TwoWayBlend_0F8D596F47555CC();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_8E257EC14B3();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_AA0526D343();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_AA59500540C();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ApplyAdditive_6BCD08EB410E0();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_C489CE0542F6();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_EC58EF22440();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByEnum_51F2F2CE4F9();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_911B630343C2();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_76E9869E4F8B();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_575ABF53498();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_C14FADD641();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_A0BD36774BA();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_E3B2B7864B();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_0D56A4B94D7F();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_771B757847BE();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_E66A242940B();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_E0DFB82641A();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_D1752D48489();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FFF262E84F13();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_A9AB99C84EA();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_F2DEE79A4E46();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_208069ED420();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_AnimDynamics_8E57203E4703F8();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_4EA5943244();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_01784F134E3();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_BCC9BC4645();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_837F227A49();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_F81FF58D406();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_C189F8E540();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_CFA457CC489();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_9E88F58F4A();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1873132544();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_SequencePlayer_FBB56C944649();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_1CA6B8D549();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_FE06234541();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_201A359C4C0();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_895296D24A();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_D02CB51E45();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_4B9202814E();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_76B99DC840();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_61316C7E46();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_8CCABF8A43();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendSpacePlayer_923ECC9946();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_B809929A4E();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_EA8583CF48();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_TransitionResult_ACDC5F0141();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B1B8C2144F2();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_78C7AFFE461E9736();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_B682FC3D408();// 0x46f6b154
	void BlueprintInitializeAnimation();// 0x46f6b154
	void HandlePlayerEnterCallingForRevivalState(bool bBeginCalling);// 0x46f6b154
	void DelayLeaveCallingState();// 0x46f6b154
	void ChangeAngledRot(Rotator Rot);// 0x46f6b154
	void AnimNotify_HiddenOwner();// 0x46f6b154
	void AnimNotify_PlayFallSound();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_ModifyBone_9629294C46AC6A26();// 0x46f6b154
	void EvaluateGraphExposedInputs_ExecuteUbergraph_CH_Base_AnimBP_AnimGraphNode_BlendListByBool_14F88A7F4A4();// 0x46f6b154
	void AnimNotify_SpawnRFootprint();// 0x46f6b154
	void AnimNotify_SpawnLFootprint();// 0x46f6b154
	void AnimNotify_PlayShellDropFX();// 0x46f6b154
	void AnimNotify_PlayMagOUTSound();// 0x46f6b154
	void AnimNotify_PlayMagINSound();// 0x46f6b154
	void AnimNotify_PlayBoltSound();// 0x46f6b154
	void AnimNotify_PlayChangeMagazineSound();// 0x46f6b154
	void AnimNotify_PlayLoadBulletSound();// 0x46f6b154
	void AnimNotify_PlayCrawlSound();// 0x46f6b154
	void AnimNotify_LandHardCameraShake();// 0x46f6b154
	void AnimNotify_LandCameraShake();// 0x46f6b154
	void ExecuteUbergraph_CH_Base_AnimBP(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue2, float CallFunc_VSize_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_BreakRotator_Roll2, float CallFunc_BreakRotator_Pitch2, float CallFunc_BreakRotator_Yaw2, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, FString CallFunc_GetDisplayName_ReturnValue, AnimMontage* K2Node_DynamicCast_AsAnim_Montage, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate2, delegate K2Node_CreateDelegate_OutputDelegate3, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, Object* Temp_object_Variable2, Object* K2Node_CustomEvent_Loaded2, FString CallFunc_GetDisplayName_ReturnValue2, AnimMontage* K2Node_DynamicCast_AsAnim_Montage2, bool K2Node_DynamicCast_bSuccess2, float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue2, float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue2, bool CallFunc_LessEqual_FloatFloat_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue3, bool CallFunc_NotEqual_ByteByte_ReturnValue2, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue4, bool CallFunc_BooleanOR_ReturnValue5, bool CallFunc_BooleanOR_ReturnValue6, bool CallFunc_NotEqual_ByteByte_ReturnValue3, float CallFunc_GetInstanceAssetPlayerTimeFraction_ReturnValue3, bool CallFunc_Greater_FloatFloat_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue7, bool CallFunc_BooleanOR_ReturnValue8, bool CallFunc_BooleanOR_ReturnValue9, bool CallFunc_EqualEqual_BoolBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue3, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess3, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakRotator_Roll3, float CallFunc_BreakRotator_Pitch3, float CallFunc_BreakRotator_Yaw3, Rotator CallFunc_MakeRotator_ReturnValue, float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_BreakRotator_Roll4, float CallFunc_BreakRotator_Pitch4, float CallFunc_BreakRotator_Yaw4, bool CallFunc_BooleanOR_ReturnValue10, Vector CallFunc_ClampVectorSize_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, bool K2Node_Event_bBeginCalling, float CallFunc_Montage_Play_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, Rotator K2Node_CustomEvent_rot, STExtraCharacter* CallFunc_GetOwnerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, Pawn* CallFunc_TryGetPawnOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess5, GameStateBase* CallFunc_GetGameState_ReturnValue2, Pawn* CallFunc_TryGetPawnOwner_ReturnValue2, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base2, bool K2Node_DynamicCast_bSuccess6, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character3, bool K2Node_DynamicCast_bSuccess7, bool CallFunc_EqualEqual_ByteByte_ReturnValue4, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character4, bool K2Node_DynamicCast_bSuccess8, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character5, bool K2Node_DynamicCast_bSuccess9, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character6, bool K2Node_DynamicCast_bSuccess10, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character7, bool K2Node_DynamicCast_bSuccess11, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character8, bool K2Node_DynamicCast_bSuccess12, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character9, bool K2Node_DynamicCast_bSuccess13, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character10, bool K2Node_DynamicCast_bSuccess14, delegate K2Node_CreateDelegate_OutputDelegate4, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_TryGetPawnOwner_ReturnValue3, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue4, bool CallFunc_BooleanAND_ReturnValue4);// 0x46f6b154
	AnimNode_Root AnimGraphNode_Root_54C1F0ED422F557A3D58A1B8B79F8C7E;//[Offset: 0x1198, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B1B8C2144F2B644B0EDF5890856C8E8F;//[Offset: 0x11d0, Size: 152]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_ACDC5F01413E6CDDD5E26290FB0D2A28;//[Offset: 0x1268, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_EA8583CF48558D8742D60989B755AECF;//[Offset: 0x12a0, Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_923ECC9946F87BD9304658A4C6C371E1;//[Offset: 0x12d8, Size: 248]
	AnimNode_Root AnimGraphNode_StateResult_7D4B6F6A41970A5756B8039B8D969461;//[Offset: 0x13d0, Size: 56]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_8CCABF8A4335407291BE5F82A4F2DF4C;//[Offset: 0x1408, Size: 248]
	AnimNode_Root AnimGraphNode_StateResult_E36EB3AF45864D643ACA079211777C8E;//[Offset: 0x1500, Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_BD0EC74E47B535EF6B18C4A8DED838DD;//[Offset: 0x1538, Size: 168]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_61316C7E46619171838C3F963F405D2A;//[Offset: 0x15e0, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_76B99DC84072BA3C0786C29E9E29BB65;//[Offset: 0x1618, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_4B9202814EAEE5E8C6F84BBCA2B779F3;//[Offset: 0x1650, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_895296D24A9F7A856166378E952F6B69;//[Offset: 0x1688, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_FE062345416B64A640EA20B26FCCADD2;//[Offset: 0x16c0, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_1CA6B8D5497E74E6F43CAEB6DDEFBBC5;//[Offset: 0x16f8, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_1873132544FC0C24E6E9D78009A10781;//[Offset: 0x1730, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_9E88F58F4AB6EE52BA9A69BFC886550A;//[Offset: 0x1768, Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_350760C24A674CB2829982A5F1A0C397;//[Offset: 0x17a0, Size: 104]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_2F90F4514BEBFA29A975C0937D48F61B;//[Offset: 0x1808, Size: 104]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_CFA457CC489909B3D1CFD1AD227A504E;//[Offset: 0x1870, Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_A634DF8A4905E31EABFA498497ECCB7B;//[Offset: 0x1908, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0A73E8C2401CD9E44A7212AC48CCB72B;//[Offset: 0x19b8, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_E69E2516477CB891386C189A701EB7A0;//[Offset: 0x19f8, Size: 176]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_C189F8E54011EEB11B60C28FE27D5923;//[Offset: 0x1aa8, Size: 248]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_F81FF58D4068879BA81DB880873A7D4F;//[Offset: 0x1ba0, Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_BCC9BC46452C9DA0AAACF788647E6409;//[Offset: 0x1c38, Size: 248]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_01784F134E30A700037CAAB1CB8DCB12;//[Offset: 0x1d30, Size: 152]
	AnimNode_Root AnimGraphNode_StateResult_4F9BC4314BE4DA84F20AD4A27AAC395A;//[Offset: 0x1dc8, Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FFF262E84F13F43A0FDF44A2F37CA696;//[Offset: 0x1e00, Size: 104]
	AnimNode_Root AnimGraphNode_StateResult_9D9D8FCC441A7F05532D81BE6C797E4A;//[Offset: 0x1e68, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D1752D484898194FF45BA485585792F5;//[Offset: 0x1ea0, Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_C1DC798A414C26493B681F8DAA3DC39B;//[Offset: 0x1f38, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_E0DFB82641A02AAFEDC6299EF16D2988;//[Offset: 0x1fe8, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_50CA3B304A16E2B46F6C3BB7CD430D9B;//[Offset: 0x2080, Size: 104]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_4DE46883449F9CA5FC1928A76833737F;//[Offset: 0x20e8, Size: 104]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_E66A242940BFD90AB027798326F3DC73;//[Offset: 0x2150, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_89B2C1D7410B6DA93F9E748F3954C9BB;//[Offset: 0x21e8, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_3F8AD8714C18C68CD3447CAF3C2C7CD2;//[Offset: 0x2228, Size: 176]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_771B757847BE5BD1D142EF9DAC5AD141;//[Offset: 0x22d8, Size: 104]
	AnimNode_Root AnimGraphNode_StateResult_6E1D113D4A61E2CDD8D86989D7072B12;//[Offset: 0x2340, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_A0BD36774BA7A7EC2ED536B032374D09;//[Offset: 0x2378, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_3946327C42B63ABAE26AC7BB18A8ED25;//[Offset: 0x2410, Size: 104]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_03C3AA8C429DF686404CF480A5BA37F7;//[Offset: 0x2478, Size: 104]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_575ABF53498329E0203C97875461FAD8;//[Offset: 0x24e0, Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_7D34E9974B2D7CD4792DEC9AC98EAA4D;//[Offset: 0x2578, Size: 176]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_76E9869E4F8B8132BE70E98F846027A4;//[Offset: 0x2628, Size: 104]
	AnimNode_Root AnimGraphNode_StateResult_A5BBC01C4E35430A5EA3F7B595589567;//[Offset: 0x2690, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F36577154A84E9638340B19CB439624A;//[Offset: 0x26c8, Size: 64]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_1CF150234CC2C8D35D381F9C7E447C27;//[Offset: 0x2708, Size: 104]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_EC58EF22440F5629E656CCACAAC6425B;//[Offset: 0x2770, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_C489CE0542F69637F4FF2A8E70E7FF28;//[Offset: 0x2808, Size: 104]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_6BCD08EB410E000767F30D81197CD228;//[Offset: 0x2870, Size: 88]
	AnimNode_Root AnimGraphNode_StateResult_B02F45DC49034869CCF72E8A45EDDEDA;//[Offset: 0x28c8, Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_58F3F41C45E674D0FEBB6DAE55DA0751;//[Offset: 0x2900, Size: 168]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_AA0526D343FA015B28DF25921C724329;//[Offset: 0x29a8, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_6D0039F746DBFEE3FB7C8793D9CC4D70;//[Offset: 0x29e0, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_3C1C448E4BFC14F4DF9541BD7B686D80;//[Offset: 0x2a18, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_5E984FB544A69AFB45E68B8479EA9A9D;//[Offset: 0x2ab0, Size: 104]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B370B18543B80658FC331D8359BDA455;//[Offset: 0x2b18, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8886315C46DC93464C7004BEE2E45D9B;//[Offset: 0x2b58, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_2F713306402D4EB35FA74BA217F872DE;//[Offset: 0x2b98, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3E7F3743411A3726D8BD919415CBB1AE;//[Offset: 0x2c48, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A7754639472ADB097643B9B30CBCBC66;//[Offset: 0x2c88, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_528D52F7443BB34F0313688FCBD2C6F0;//[Offset: 0x2cc8, Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_60E3C51F409D1CB237D47FADD6617FFD;//[Offset: 0x2d78, Size: 104]
	AnimNode_Root AnimGraphNode_StateResult_D4B28F76445E4C2A222EAD9D1E15415D;//[Offset: 0x2de0, Size: 56]
	AnimNode_Slot AnimGraphNode_Slot_660A058B46568A74F8131BA5C1F42219;//[Offset: 0x2e18, Size: 104]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_737789D44D5CF444978B5786F856CB57;//[Offset: 0x2e80, Size: 64]
	AnimNode_BlendListByInt AnimGraphNode_BlendListByInt_1E0B621F45D9A4CFD700B0A5BD310279;//[Offset: 0x2ec0, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_37EB47644D7AAB6B2D9E0E98EE761A6E;//[Offset: 0x2f58, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_3055654248764C3CBAF1469BD326CB96;//[Offset: 0x2f98, Size: 104]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_AE8F6F0F42D2D6000C96B6B9D7505C43;//[Offset: 0x3000, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_06C8BE01495EFD1786DF0292E22587DC;//[Offset: 0x3040, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_440DC34F4A13E07E064A7BB03E74A54F;//[Offset: 0x30d8, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_CAB0A88044B25AB5AE92A4BFB2BCD96D;//[Offset: 0x3118, Size: 104]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_231578C54FCC77878660EC9550623595;//[Offset: 0x3180, Size: 64]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_5B3179124044A8F2937CD8A25215D534;//[Offset: 0x31c0, Size: 88]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_67D0E8454D0A46CCC629589013A5E4B4;//[Offset: 0x3218, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F36686304A11EB5191BC8B9E783EFCB3;//[Offset: 0x32c8, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_C0D7C67343FC97963EC5D286F32224F0;//[Offset: 0x3308, Size: 104]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_39E9591C4C31F1889C1CEFA558EB739F;//[Offset: 0x3370, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_EFAAE26040167B6C0B3951BF6B2F0739;//[Offset: 0x33b0, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_F6D7DD6A403BD68FC30671B65E47BC37;//[Offset: 0x3460, Size: 152]
	AnimNode_Root AnimGraphNode_StateResult_D7000B504F670B39E309E4AA59C5664A;//[Offset: 0x34f8, Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_49DA45D64C0BEAD52ED89AA2C5B48025;//[Offset: 0x3530, Size: 168]
	AnimNode_Slot AnimGraphNode_Slot_174894E5463498BD5CE2C58529C87F63;//[Offset: 0x35d8, Size: 104]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_458080404F9C55B75C14EF80F4847606;//[Offset: 0x3640, Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_319716464D13C4ECDD98CB9595742352;//[Offset: 0x36f0, Size: 104]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_AA59500540C87D28E005F0BD7F172675;//[Offset: 0x3758, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_43A9039E41EF41FC5803878ECCF2115F;//[Offset: 0x37f0, Size: 128]
	AnimNode_Slot AnimGraphNode_Slot_98F2602F4DC5A49F702075A17D51FF69;//[Offset: 0x3870, Size: 104]
	AnimNode_Slot AnimGraphNode_Slot_E94CE6A24C14A812C27178A06F48CDC2;//[Offset: 0x38d8, Size: 104]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_669C6C0C4F1D960F8CF708B30A34DE05;//[Offset: 0x3940, Size: 176]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_51F2F2CE4F9082CAD0AD7189F7934CB0;//[Offset: 0x39f0, Size: 168]
	AnimNode_AnimDynamics AnimGraphNode_AnimDynamics_8E57203E4703F8A43B3E2BBD49A0C850;//[Offset: 0x3a98, Size: 664]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4B788175470581A209B76B973D807262;//[Offset: 0x3d30, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_FF22DAD4497C34327A559AA3DCF2AE45;//[Offset: 0x3d68, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_201A359C4C06F74821DF918ED7086E55;//[Offset: 0x3da0, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_E1876D99465C1BE509443BAE29D33409;//[Offset: 0x3e38, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_14F88A7F4A4C63B386ED5BBFAFF8ABCE;//[Offset: 0x3eb8, Size: 152]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_9629294C46AC6A26181183837695EE4C;//[Offset: 0x3f50, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2A1F872D45E5392E9F1F09A1B323C944;//[Offset: 0x3ff0, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_E6B21B0C4937DF1281AB46ACB479F1A8;//[Offset: 0x4028, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_334079BF4A13B2F29708F5AD7E43BC4C;//[Offset: 0x4060, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_7797FEE34831097BF63BF69B63F59DA9;//[Offset: 0x40a0, Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_DF0B9A3F4A87F2F63283E3B7F893A693;//[Offset: 0x4120, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_622244D444EE7EE65F88C8957C185EEF;//[Offset: 0x41a0, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B682FC3D408904703D3DECB95804E4C6;//[Offset: 0x41e0, Size: 152]
	AnimNode_SubInstance AnimGraphNode_SubInstance_B6EA793741EF081F1D4B18BE9B29A9E8;//[Offset: 0x4278, Size: 256]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_16B201EE496A66D027E50CB55A8ABD62;//[Offset: 0x4378, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F75C21C84EB4D615E9FC2F9A9D8853F5;//[Offset: 0x43f8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9101E8B941BCBB1C76031A872C91A3FC;//[Offset: 0x4438, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A143725F42DD4467D41CA0BFB906A522;//[Offset: 0x4478, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_0712F5734AC37790D9A12F8096EE9C4E;//[Offset: 0x44b8, Size: 104]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_0F051A204E1F9A9172B92E86CB305A1E;//[Offset: 0x4520, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D9BDED8D4B7DE338450804B21CB65D90;//[Offset: 0x45d0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_1DB39F3145453030AB0728B31A1B2049;//[Offset: 0x4610, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_F70F6EE744718CA0AA76638976CD41C5;//[Offset: 0x4650, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_A31BBF2D4CD8CE0BDF9AEB9FDDF8B096;//[Offset: 0x46d0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_45E193384DE39BDB8BF5949428D8CDC4;//[Offset: 0x4710, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_78C7AFFE461E973613B6EB970B5A2AB8;//[Offset: 0x4750, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_115F73CC4F4EB99D57153CA9C0B25298;//[Offset: 0x47f0, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_5E08C82C430E1441B11FF599B3529D1D;//[Offset: 0x4828, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_B809929A4E022092F286288F5F93A314;//[Offset: 0x4860, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_D02CB51E459D36E8D787D4B32C8397B1;//[Offset: 0x4898, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_837F227A4947B468B67220AC380EAAD1;//[Offset: 0x48d0, Size: 56]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult_4EA59432449B81706DD549AF628AE96C;//[Offset: 0x4908, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_208069ED42034FC299A773AD65271C46;//[Offset: 0x4940, Size: 152]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_F2DEE79A4E468D1A280B35A0DF13B123;//[Offset: 0x49d8, Size: 104]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_A10D9C164939AE768F5EB9915824594F;//[Offset: 0x4a40, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_A9AB99C84EA5D3FAD77CC2A3ADDB3EC2;//[Offset: 0x4af0, Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_126E2586473B9D0D170B02A36A2A9958;//[Offset: 0x4b88, Size: 176]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_0D56A4B94D7F58DE95F36A84C2B0FBE1;//[Offset: 0x4c38, Size: 104]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_E3B2B7864B72C984BBD0E0BEBD4BDE18;//[Offset: 0x4ca0, Size: 248]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_C14FADD641497324A32D008973E91A14;//[Offset: 0x4d98, Size: 248]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_911B630343C2CB192658EF86D17F4269;//[Offset: 0x4e90, Size: 104]
	AnimNode_Root AnimGraphNode_StateResult_5C6E456F49E65EDD6DCFC48A3EDC66DE;//[Offset: 0x4ef8, Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_B2F791E64EDBBE01E145088956272F21;//[Offset: 0x4f30, Size: 104]
	AnimNode_Root AnimGraphNode_StateResult_8761D4234454F907141A9DB6AE9ADF6E;//[Offset: 0x4f98, Size: 56]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_FBB56C94464980EA951193B6FF9101B5;//[Offset: 0x4fd0, Size: 104]
	AnimNode_Root AnimGraphNode_StateResult_ED1DED144668BF6F586CBCA6FA9D0E02;//[Offset: 0x5038, Size: 56]
	AnimNode_SubInstance AnimGraphNode_SubInstance_F02CED07443488E5F97F32AABA509AAD;//[Offset: 0x5070, Size: 256]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_8E257EC14B318B55E4C87AB2551F567B;//[Offset: 0x5170, Size: 168]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_60973F0B497D634FA6DDC891AC641A43;//[Offset: 0x5218, Size: 104]
	AnimNode_TwoWayBlend AnimGraphNode_TwoWayBlend_0F8D596F47555CC144FC028F17052B3E;//[Offset: 0x5280, Size: 88]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_366D910649DD3FA9AFBA1E838ACAEE57;//[Offset: 0x52d8, Size: 104]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer_9AA3C81A481374C893DB60AC7BD47D37;//[Offset: 0x5340, Size: 104]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_B59343664AC4B234A509C6A416B8827B;//[Offset: 0x53a8, Size: 152]
	AnimNode_Root AnimGraphNode_StateResult_5FA6ECDD4695357A89E7C290FB015914;//[Offset: 0x5440, Size: 56]
	AnimNode_StateMachine AnimGraphNode_StateMachine_27FA876E4F2C51AB4FBB54A4314A9AF1;//[Offset: 0x5478, Size: 168]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_6B33B0BF4CFBDF576C90BD8B97298239;//[Offset: 0x5520, Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_220F99A04986C25E9539B2A92C64D7A8;//[Offset: 0x55a0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0DA5260C449DE23EFBC503A7C77F7E00;//[Offset: 0x5620, Size: 64]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_8D15414541B3EB717FE0CF94A60DBD3B;//[Offset: 0x5660, Size: 176]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_71504472478A09FF13DFE68B69DFEF98;//[Offset: 0x5710, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E1808C9D43A40CE46EB8F6A534DC1ABC;//[Offset: 0x57a8, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_6E46129C4B61CAA43CEB07ADE4C3FD59;//[Offset: 0x57e8, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_F95908034B8D9CFB2B155BB5933D94A9;//[Offset: 0x5888, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_0AFC812147DFC014CDE3A3825EA3CBE5;//[Offset: 0x58c0, Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C5A628AA4F9EFD70D6EA9BBA06098B5C;//[Offset: 0x58f8, Size: 128]
	AnimNode_Slot AnimGraphNode_Slot_8BC235B84F01BD46AFCB7E8A2C2DCBF0;//[Offset: 0x5978, Size: 104]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0D4679C242F79898D029EBB785DC10B3;//[Offset: 0x59e0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C4F7B15F4B32CBCC8519998F035B4536;//[Offset: 0x5a20, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_F5AB53FE422F92A928203CA78734E9FD;//[Offset: 0x5a60, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_0F0A9BAD4E606ACC202A4DB1099E3308;//[Offset: 0x5ae0, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_0855A2E34D22984F160B23AF245637C9;//[Offset: 0x5b20, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_195026BB4D191A5BA75F678ED0E00504;//[Offset: 0x5ba0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_12CEB9124449465AF873EC9C930C2384;//[Offset: 0x5be0, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_69EE9A0448E1F9BF4DA327809542DE2A;//[Offset: 0x5c20, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D9EA1E284D09B9B6E286988290F65187;//[Offset: 0x5ca0, Size: 152]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_6904FBD042F55B5E17696E9EFB800E69;//[Offset: 0x5d38, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C444C4FD4729985BDCCDED9E316E8717;//[Offset: 0x5dd0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_62837EB942922DA14A60FB885FE8903E;//[Offset: 0x5e50, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D4154717432C4F79E3AD4A9D4CB7023A;//[Offset: 0x5e90, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_94656FBC478E9C84F652EF9CF4358064;//[Offset: 0x5f10, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7C8105A245E522BB023434A9626A1857;//[Offset: 0x5f50, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B811170549581ECAF70A6AB4EDF14F79;//[Offset: 0x5f90, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_C3774AAD49537B5E5580C8AD7B82845A;//[Offset: 0x5fd0, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8678E8794F2ADC6611F61EB69D756B81;//[Offset: 0x6068, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_1E2AC0854DB34634B8628FA06761103D;//[Offset: 0x60a8, Size: 104]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_4A1B031341D802FD273D66A0FE2D12E4;//[Offset: 0x6110, Size: 176]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_1A68941B4BFA7BDBEF64FEBEECE360AF;//[Offset: 0x61c0, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D87B9FFF40BE0E4CA6C92F8D7E97DD44;//[Offset: 0x6240, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_A0EFD9664DD84B310B99C984DD6A4AAA;//[Offset: 0x62d8, Size: 104]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_164B39124F06BEBA983A0BA2D881A5D7;//[Offset: 0x6340, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_CCC27FF2465460FAD4F1A8B2F266D8BF;//[Offset: 0x6380, Size: 128]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_F1F1A8644E34297A552D818E04519FEB;//[Offset: 0x6400, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6027CB55419F934F8E18EA80F4D7698D;//[Offset: 0x64b0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_B4CEC9874939189D23470CB92BEE9058;//[Offset: 0x64f0, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_0CF553C94338A5B94125DBBF043D3990;//[Offset: 0x6530, Size: 104]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_77FA54084AFDB4EA2E24F9B06AA51359;//[Offset: 0x6598, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_F987941B4FFE404DB9331BAFE9DD871A;//[Offset: 0x65d8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_E046F99D4E0ED3D192A214BED85B97DD;//[Offset: 0x6618, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_5C09D152435B2E49760E26BFEBFAB38F;//[Offset: 0x6658, Size: 160]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_A2D1C6B84DAFBD4510A8DEA98BBF0E63;//[Offset: 0x66f8, Size: 152]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_188FBD054C22ECF794DF8F80F902E69D;//[Offset: 0x6790, Size: 56]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_F53F959A480B8FC025A26DB3152393C6;//[Offset: 0x67c8, Size: 56]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_C6B6EB8E469FD531C31B61A90E6B4B88;//[Offset: 0x6800, Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_ADC8D6C64F9D35CC79956B9FE37051C9;//[Offset: 0x6838, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_44A5B8CE475FD2574C4611980BC35CF2;//[Offset: 0x68b8, Size: 152]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_F28E2A424F878283F7DEA0AE8A54DFD5;//[Offset: 0x6950, Size: 248]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_1CA2C6504EB6D75BF518E7A7F5EC3115;//[Offset: 0x6a48, Size: 88]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_552DC7D84C63C53259CB8491E6BC6FC4;//[Offset: 0x6aa0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6878C167432E7E28C9248795EDDE316E;//[Offset: 0x6ae0, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_B1769EF44F49916601CBB49B71C832D9;//[Offset: 0x6b20, Size: 128]
	AnimNode_ApplyAdditive AnimGraphNode_ApplyAdditive_CA0B457F429A332EE601B5902A8572F2;//[Offset: 0x6ba0, Size: 88]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_E1D2BE8E44E40346B088148129084A4F;//[Offset: 0x6bf8, Size: 248]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_1E77A7574761A433C038CC8BC8AC0A45;//[Offset: 0x6cf0, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_67E1AA254E58CC6513C74E9F9318193C;//[Offset: 0x6d88, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_EF21EDB44F97529EE1E09E9A4391B898;//[Offset: 0x6e08, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_817662614222E92AC86CA8829688BD1A;//[Offset: 0x6e48, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3D44474F4DD495CA249A70A7BE2EEC14;//[Offset: 0x6e88, Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_8252F5B94B75079FAD56A4B8FDC3923D;//[Offset: 0x6f08, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3DE712CF488ED90D9F1BDBB832CC2FEF;//[Offset: 0x6f88, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D20F896F49D700B1748441A6EE1A25AA;//[Offset: 0x6fc8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9ADB541645F5BDCCC6C5928DE18869E3;//[Offset: 0x7008, Size: 64]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_BECFB6DC44218544E8C444BC8AFB1202;//[Offset: 0x7048, Size: 56]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_B3AD733F4922AFAD2566C79DD25EDEFE;//[Offset: 0x7080, Size: 160]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_498F1954461BE8D048038FA233AE6DDD;//[Offset: 0x7120, Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_9F59706C406BCE19C71E258D8FC13D1E;//[Offset: 0x71c0, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_622C90C34D2C4A7D9FE15DB2AF13DB62;//[Offset: 0x71f8, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5D9C6A25475BADAE664FAFB5D9268B48;//[Offset: 0x7290, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_8D77AF21460DA36C40B081B2454344B9;//[Offset: 0x72d0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_05180F7F48A3F0BB0981C7A8C967D2CB;//[Offset: 0x7350, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_AF7EB0F84438643878CF718628C1A144;//[Offset: 0x7390, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_7D2D3CDF4CC43884ACD28DB9EDA3D90D;//[Offset: 0x73d0, Size: 160]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C2194B5646AE261B9BAE778E6432175E;//[Offset: 0x7470, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_889C354A43EAD1D91F09668858DC5AC2;//[Offset: 0x74f0, Size: 152]
	AnimNode_Slot AnimGraphNode_Slot_0A2E74AE478731B8043FE7ACB1B2EC2C;//[Offset: 0x7588, Size: 104]
	AnimNode_Slot AnimGraphNode_Slot_B3E427DB4027E7508A5F55911220ED7A;//[Offset: 0x75f0, Size: 104]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D32AAE194279E1197E86E29F6F57D03A;//[Offset: 0x7658, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_99423F984E692D261FABA5BCFA26139C;//[Offset: 0x76d8, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8ED97CD64F978CB5B6471BB87E22963F;//[Offset: 0x7718, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_E57C40104B4C1B0EAE1DAEBC7A267397;//[Offset: 0x7758, Size: 104]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_9F5DE586404B6D16F3D573B11AD7FA19;//[Offset: 0x77c0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_387EAF34458686265D7903A272DC9F07;//[Offset: 0x7840, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2FFCC8994745915051C4238967E1D797;//[Offset: 0x7880, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_847728154029BAD0A30C9B931504DFA9;//[Offset: 0x78c0, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_9A6EFA6E4E856567546F9683AD9D6E05;//[Offset: 0x7958, Size: 64]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_A2883EB746E71B49B626A2B956A2D61C;//[Offset: 0x7998, Size: 248]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_9933C22E449BFF3731ABD48FE613355B;//[Offset: 0x7a90, Size: 128]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_76C8727B4B65DFC7437AF8AE39F7C546;//[Offset: 0x7b10, Size: 176]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_70D595D441605B1CAD6FB5BC2FBD6294;//[Offset: 0x7bc0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_CB53CDF6406F0FBE0DA82FBED79D6222;//[Offset: 0x7c00, Size: 64]
	AnimNode_RotateRootBone AnimGraphNode_RotateRootBone_F71FB4C142A8EF51E50072A663998CF2;//[Offset: 0x7c40, Size: 80]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4516001F4B61DF895AB96BB2DCBB1C99;//[Offset: 0x7c90, Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_FE1A0DE24D8999FCDB883480B8906F14;//[Offset: 0x7cc8, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_060336BD4CDF466B8D418EA323045F2F;//[Offset: 0x7d48, Size: 64]
	AnimNode_Fabrik AnimGraphNode_Fabrik_BEC6A434409C6E5115285D8CF5D2AB25;//[Offset: 0x7d90, Size: 352]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_53306B57498F227FC54DA0A78F7CBB02;//[Offset: 0x7ef0, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_71CC9C914E0C5B7688923E879BB97ADF;//[Offset: 0x7f28, Size: 56]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_183C719444F215F5B2E192A2AE498E52;//[Offset: 0x7f60, Size: 176]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_A101D4894347B8CD9CD450936933FCAB;//[Offset: 0x8010, Size: 56]
	AnimNode_Fabrik AnimGraphNode_Fabrik_3A37B0BC4E7C1A59CFBA059E292E4571;//[Offset: 0x8050, Size: 352]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_8062BB924F1C5D18B152839F94D2FF62;//[Offset: 0x81b0, Size: 56]
	AnimNode_CopyBone AnimGraphNode_CopyBone_3D0AB2C44768C53564C6FAA03BD12CC1;//[Offset: 0x81e8, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_4EF5F06D448175A02140E5A77BBE9A43;//[Offset: 0x8278, Size: 144]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_1A1B329D488357D9CB6080B96EEAE0E1;//[Offset: 0x8308, Size: 64]
	AnimNode_CopyBone AnimGraphNode_CopyBone_328DF579494B839ED41EB9BBF1A28207;//[Offset: 0x8348, Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_C3F60727486C15AD25358E8E95A0E56C;//[Offset: 0x83d8, Size: 56]
	AnimNode_CopyBone AnimGraphNode_CopyBone_99DDDBBF44A8CE89B5191894CF95737A;//[Offset: 0x8410, Size: 144]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_F8B6CD054C5D2CE0DB61F59CD86C56C7;//[Offset: 0x84a0, Size: 56]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_62C222B649B134174ED4C287A248BCF2;//[Offset: 0x84d8, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_306D58CA41EDFB7FD438109F08EF1F92;//[Offset: 0x8558, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_012706224917B522C6FACFBC30186BE9;//[Offset: 0x8598, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_D7428F0E4FDEABF9AFD6B3A2179BBAD8;//[Offset: 0x85d8, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7473F851489616B418F8DD8F9C46D171;//[Offset: 0x8670, Size: 64]
	AnimNode_BlendSpacePlayer AnimGraphNode_BlendSpacePlayer_1F7D9D194DD9ED707A2A679E0DB6EB61;//[Offset: 0x86b0, Size: 248]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_253D38774091B2CF3877EFB7975D23AA;//[Offset: 0x87a8, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_03CCC4AE4F904AC89C915C80E54D99CE;//[Offset: 0x8840, Size: 128]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_4EF78C1B4D30FF5C1514778E907ACFE0;//[Offset: 0x88c0, Size: 176]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_63A05E054A56588B73B2BD9D1B313986;//[Offset: 0x8970, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7BBAB7EE44BA6711A1ACD9AE149652B4;//[Offset: 0x89f0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_3E4802D745399D2BF34F5488F6954AB5;//[Offset: 0x8a30, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_039E37BD45F922394EBA268745E15DF9;//[Offset: 0x8a70, Size: 64]
	AnimNode_SubInstance AnimGraphNode_SubInstance_446CA0B440ED9A79D767AEB7A2077AE1;//[Offset: 0x8ab0, Size: 256]
	AnimNode_Inertialization AnimGraphNode_Inertialization_FB0944D546798FA465FEA2975786FD8C;//[Offset: 0x8bb0, Size: 128]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_B6F3D3C84F00500909E365984CEEC4E1;//[Offset: 0x8c30, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_04A5D1CB4183447FB21A998C72E69FB8;//[Offset: 0x8cb0, Size: 64]
	AnimNode_Slot AnimGraphNode_Slot_FDAA3DC3485317AD20085FA2CC4C516F;//[Offset: 0x8cf0, Size: 104]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_884AC72D4D218A5B3A40D58E02658D51;//[Offset: 0x8d58, Size: 152]
	AnimNode_CopyBone AnimGraphNode_CopyBone_41D9A42F44D9954A981105866E7527CB;//[Offset: 0x8df0, Size: 144]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3CD7695440D6F77EE96C708B37635587;//[Offset: 0x8e80, Size: 56]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_490015F84D7E9F9837EA5989973B77CB;//[Offset: 0x8eb8, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7BDAF7B94561ECAC769BF3B8BEAC4793;//[Offset: 0x8ef0, Size: 64]
	AnimNode_CopyBone AnimGraphNode_CopyBone_CECCD6AA4F67791748D54D8516CDEAA6;//[Offset: 0x8f30, Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_A868E8844434A6D84649D998CB1F3071;//[Offset: 0x8fc0, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_9924F2EE43AEEF6CDB365FA9B7B55FCB;//[Offset: 0x8ff8, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_232A6A7043355E2A4ACEFCB542529E96;//[Offset: 0x9030, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_3F11F1F54ADDE423B124C29CE65683E2;//[Offset: 0x9070, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6EB87BC74EA19F48F3B14DB8776FDFFD;//[Offset: 0x90f0, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_1CAAD0C840B959CCD253F2A2578F6CFE;//[Offset: 0x9130, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_1F4AD3FC4952A6839550FCA50DF3E47E;//[Offset: 0x91b0, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_DEF230CA404FDB75609A74A0E00184B9;//[Offset: 0x91f0, Size: 64]
	AnimNode_SubInstance AnimGraphNode_SubInstance_F45848F74BB058CEDD83B89D03E3B18F;//[Offset: 0x9230, Size: 256]
	AnimNode_SubInstance AnimGraphNode_SubInstance_6B36ED414DC04516708A06B95825C2D0;//[Offset: 0x9330, Size: 256]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_D9BCD41C485E44389AC97EBB43F3313E;//[Offset: 0x9430, Size: 64]
	AnimNode_SubInstance AnimGraphNode_SubInstance_576240024BEA177260EBEE8B8450F5EE;//[Offset: 0x9470, Size: 256]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_7C101FD04485003304E6868C0F2B7C1A;//[Offset: 0x9570, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_FDE528AC4191E4A474FA0BB4FB4E7E57;//[Offset: 0x9610, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_DB67240B457439FD69F5889EB25A6E11;//[Offset: 0x9648, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_4CF8CB9E4B38948E88FE21B73F26C47F;//[Offset: 0x9680, Size: 152]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_EAB478B440FC3B61A9745D8C8758B793;//[Offset: 0x9718, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_057A672F4EEDCF617B92EA921E8E8FF8;//[Offset: 0x9798, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_5DE2FA7E4501B04DDF44F1A21171F271;//[Offset: 0x97d8, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_7CBA90C0499C998EDAC2EF9DC17EBA79;//[Offset: 0x9818, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_8F8F8F504E8B69E88DE0BDACDE80D35D;//[Offset: 0x9898, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_1D74D36049074CE851FB34B7EA1F70AE;//[Offset: 0x98d8, Size: 64]
	AnimNode_RotationOffsetBlendSpace AnimGraphNode_RotationOffsetBlendSpace_F2DD7159447342A33D38A689E4B9FFE8;//[Offset: 0x9918, Size: 280]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_F31C810746D354A99D98D4864C34FD99;//[Offset: 0x9a30, Size: 152]
	AnimNode_LayeredBoneBlend AnimGraphNode_LayeredBoneBlend_1CB7599B4035CE4D25E21D849D17858A;//[Offset: 0x9ac8, Size: 176]
	AnimNode_Slot AnimGraphNode_Slot_398B203A44A32AFDC27AF0A0558B4527;//[Offset: 0x9b78, Size: 104]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_C5229BA4454128C0FCBB9ABC533BE7DE;//[Offset: 0x9be0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_BAF509A448C5C137D875F1B669BFB3E9;//[Offset: 0x9c60, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_C257268948591FE6908455B351331E02;//[Offset: 0x9ca0, Size: 64]
	AnimNode_CopyBone AnimGraphNode_CopyBone_CB554F54439A1C1EF8253AB8703AB9C2;//[Offset: 0x9ce0, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_04FFAC8740409704AF2F8ABFF4E3B6B8;//[Offset: 0x9d70, Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2CDD67234AD7D2682CBBE489F78BAAD2;//[Offset: 0x9e00, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_A471F4104BCF91F5AABF37A4F288E587;//[Offset: 0x9e38, Size: 56]
	AnimNode_CopyBone AnimGraphNode_CopyBone_D390A01A4A8950650A42519B0A4C2BED;//[Offset: 0x9e70, Size: 144]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_F99CCABB4F28219FBFAAAD872169E353;//[Offset: 0x9f00, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_E7FC85CA4D28048234C6F1A1F1C43F0A;//[Offset: 0x9f38, Size: 56]
	AnimNode_CopyBone AnimGraphNode_CopyBone_E3E5F8214E1BA783890D74AFB3ABBBD5;//[Offset: 0x9f70, Size: 144]
	AnimNode_CopyBone AnimGraphNode_CopyBone_0A2744FA434380D2048E3C96002FB74A;//[Offset: 0xa000, Size: 144]
	AnimNode_Fabrik AnimGraphNode_Fabrik_BB031F1B4C374F67E58BD6829E078FAF;//[Offset: 0xa090, Size: 352]
	AnimNode_Fabrik AnimGraphNode_Fabrik_B0E054054E0EE8E8F2D8009A01FE9193;//[Offset: 0xa1f0, Size: 352]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D7E89BF0455F1D3DB6C283B3C1CA8660;//[Offset: 0xa350, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_7445EE2841BA35B33F58AEB68B870BD8;//[Offset: 0xa3d0, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_0EF5334A4302C3916E0F788A2C617609;//[Offset: 0xa410, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_DEF5728D455D93147709E7861634979F;//[Offset: 0xa4a8, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_D98041564D49EE34F4A3F180E1470102;//[Offset: 0xa4e8, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_2D52347147CA632E47775EAB80FDE6A8;//[Offset: 0xa568, Size: 64]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_21F3666F4D38A4F8D8A3F186A9F0F49D;//[Offset: 0xa5a8, Size: 128]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_8E964C0A4A4D9DB8CE8F23B333AFB9AA;//[Offset: 0xa628, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_20AD046C4F2D02917A3569BB7FE6DEA1;//[Offset: 0xa6c0, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_92D4D11D499C04AA212BB3B237906384;//[Offset: 0xa700, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_6FFF923B4FCDA870A06C5DAE5DC759AE;//[Offset: 0xa7a0, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_84F5CCB947DCC71A179031B8CFEC14A6;//[Offset: 0xa7d8, Size: 152]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_083DD7B44F5B4E5A0C56D9A544F4677C;//[Offset: 0xa870, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_012D17084EC3991AA5BC66ABFEDD0141;//[Offset: 0xa8a8, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_A6C712DB4F0811052A23668D5B745B15;//[Offset: 0xa8e8, Size: 160]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_F0E38331421DB284E5A8F294ECCE8C8C;//[Offset: 0xa988, Size: 56]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_04F047854A81E15189F9FEA04A8F4EFB;//[Offset: 0xa9c0, Size: 56]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_51A37F11467158A7EDA0C38EC3146DC8;//[Offset: 0xa9f8, Size: 64]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_F4392EC74C241CB308C504920C869FA9;//[Offset: 0xaa38, Size: 152]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_6BDB5A364DD1E926E3EFD48C60C83783;//[Offset: 0xaad0, Size: 64]
	AnimNode_BlendListByEnum AnimGraphNode_BlendListByEnum_9BEDD6B444C6E64970EA16BBB4B56F8C;//[Offset: 0xab10, Size: 168]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_56F7A9EE401EEA29BA382CA124DBEA5F;//[Offset: 0xabb8, Size: 64]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone_568411434AE413364D035E8118D23ABB;//[Offset: 0xabf8, Size: 160]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_975C12FE4C3BE3DEEF2CDC8300339812;//[Offset: 0xac98, Size: 56]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_D8C677544DBF4A8658BAEBAA911082AE;//[Offset: 0xacd0, Size: 56]
	AnimNode_BlendListByBool AnimGraphNode_BlendListByBool_46063A1C49C093E280180AA7843A0588;//[Offset: 0xad08, Size: 152]
	AnimNode_SubInstance AnimGraphNode_SubInstance_7B61AEA8464B69F29CEE07A329DFDCD2;//[Offset: 0xada0, Size: 256]
	AnimNode_SaveCachedPose AnimGraphNode_SaveCachedPose_25C663E7469B183218031398DE2CB6E4;//[Offset: 0xaea0, Size: 128]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_DBD1D9E54348139737304E810313D471;//[Offset: 0xaf20, Size: 64]
	AnimNode_UseCachedPose AnimGraphNode_UseCachedPose_238CB742480AB7A98A2CCC8D06A90BA8;//[Offset: 0xaf60, Size: 64]
	float MoveRight;//[Offset: 0xafa0, Size: 4]
	float MoveForward;//[Offset: 0xafa4, Size: 4]
	float AnimRate;//[Offset: 0xafa8, Size: 4]
	float HandFavoring;//[Offset: 0xafac, Size: 4]
	float HandIKWeight;//[Offset: 0xafb0, Size: 4]
	Vector FirstAimSpine_StandAndCrouch;//[Offset: 0xafb4, Size: 12]
	Vector FirstAimSpine_Prone;//[Offset: 0xafc0, Size: 12]
	float PlaySaveMontageTime;//[Offset: 0xafcc, Size: 4]
	TimerHandle TimerHandle_DelayLeaveCallingState;//[Offset: 0xafd0, Size: 8]
	Object* SpecialRescueMontageAsset;//[Offset: 0xafd8, Size: 40]
	float Shovel_BS_Alpha;//[Offset: 0xb000, Size: 4]
	float ShovelMaxDifferent;//[Offset: 0xb004, Size: 4]
	Rotator Shovel_Pevis;//[Offset: 0xb008, Size: 12]
	float Direction;//[Offset: 0xb014, Size: 4]
	float LeaveShovel_Rate;//[Offset: 0xb018, Size: 4]
	float MaxSpeed;//[Offset: 0xb01c, Size: 4]
	float TempSaveSightSlow;//[Offset: 0xb020, Size: 4]

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: AnimNode_Base
	ExposedValueHandler EvaluateGraphExposedInputs;//[Offset: 0x8, Size: 32]
	bool bEnableAsyncInitNode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: ExposedValueHandler
	FName BoundFunction;//[Offset: 0x0, Size: 8]
	ExposedValueCopyRecord[] CopyRecords;//[Offset: 0x8, Size: 12]

--------------------------------
Class: ExposedValueCopyRecord
	Property* SourceProperty;//[Offset: 0x0, Size: 4]
	FName SourcePropertyName;//[Offset: 0x8, Size: 8]
	FName SourceSubPropertyName;//[Offset: 0x10, Size: 8]
	int SourceArrayIndex;//[Offset: 0x18, Size: 4]
	Property* DestProperty;//[Offset: 0x1c, Size: 4]
	int DestArrayIndex;//[Offset: 0x20, Size: 4]
	int Size;//[Offset: 0x24, Size: 4]
	bool bInstanceIsTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bFastPathExtend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	enum PostCopyOperation;//[Offset: 0x2a, Size: 1]
	enum CopyType;//[Offset: 0x2b, Size: 1]
	Property* CachedSourceProperty;//[Offset: 0x2c, Size: 4]
	FName[] SourceSubStructPropertyNameArray;//[Offset: 0x40, Size: 12]
	Property*[] CachedSourceStructSubPropertyArray;//[Offset: 0x4c, Size: 12]
	Object* CachedFastObj;//[Offset: 0x58, Size: 4]

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 4]

--------------------------------
Class: AnimNode_BlendListByBool.AnimNode_BlendListBase.AnimNode_Base
	bool bActiveValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92, Size: 1]

--------------------------------
Class: AnimNode_BlendListBase.AnimNode_Base
	PoseLink[] BlendPose;//[Offset: 0x2c, Size: 12]
	float[] BlendTime;//[Offset: 0x38, Size: 12]
	enum TransitionType;//[Offset: 0x44, Size: 1]
	enum BlendType;//[Offset: 0x45, Size: 1]
	CurveFloat* CustomBlendCurve;//[Offset: 0x48, Size: 4]
	BlendProfile* BlendProfile;//[Offset: 0x4c, Size: 4]
	AlphaBlend[] Blends;//[Offset: 0x50, Size: 12]
	float[] BlendWeights;//[Offset: 0x5c, Size: 12]
	float[] RemainingBlendTimes;//[Offset: 0x68, Size: 12]
	int LastActiveChildIndex;//[Offset: 0x74, Size: 4]
	BlendSampleData[] PerBoneSampleData;//[Offset: 0x78, Size: 12]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	bool bResetChildOnBlendListChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91, Size: 1]

--------------------------------
Class: BlendSampleData
	int SampleDataIndex;//[Offset: 0x0, Size: 4]
	AnimSequence* Animation;//[Offset: 0x4, Size: 4]
	float TotalWeight;//[Offset: 0x8, Size: 4]
	float Time;//[Offset: 0xc, Size: 4]
	float PreviousTime;//[Offset: 0x10, Size: 4]
	float SamplePlayRate;//[Offset: 0x14, Size: 4]

--------------------------------
Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]

--------------------------------
Class: AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	float X;//[Offset: 0x58, Size: 4]
	float Y;//[Offset: 0x5c, Size: 4]
	float Z;//[Offset: 0x60, Size: 4]
	float PlayRate;//[Offset: 0x64, Size: 4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	float StartPosition;//[Offset: 0x6c, Size: 4]
	BlendSpaceBase* BlendSpace;//[Offset: 0x70, Size: 4]
	bool bResetPlayTimeWhenBlendSpaceChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	BlendFilter BlendFilter;//[Offset: 0x78, Size: 108]
	BlendSampleData[] BlendSampleDataCache;//[Offset: 0xe4, Size: 12]
	BlendSpaceBase* PreviousBlendSpace;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	int GroupIndex;//[Offset: 0x2c, Size: 4]
	FName GroupName;//[Offset: 0x30, Size: 8]
	byte GroupRole;//[Offset: 0x38, Size: 1]
	bool bNeedAnimNotifyWhenNotLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float BlendWeight;//[Offset: 0x3c, Size: 4]
	float InternalTimeAccumulator;//[Offset: 0x40, Size: 4]

--------------------------------
Class: BlendFilter

--------------------------------
Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x2c, Size: 4]
	int MaxTransitionsPerFrame;//[Offset: 0x30, Size: 4]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	int CurrentState;//[Offset: 0x3c, Size: 4]
	float ElapsedTime;//[Offset: 0x40, Size: 4]

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x58, Size: 4]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	float PlayRate;//[Offset: 0x60, Size: 4]
	float StartPosition;//[Offset: 0x64, Size: 4]

--------------------------------
Class: AnimNode_LayeredBoneBlend.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x2c, Size: 12]
	PoseLink[] BlendPoses;//[Offset: 0x38, Size: 12]
	InputBlendPose[] LayerSetup;//[Offset: 0x44, Size: 12]
	float[] BlendWeights;//[Offset: 0x50, Size: 12]
	bool bMeshSpaceRotationBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	byte CurveBlendOption;//[Offset: 0x5d, Size: 1]
	bool bBlendRootMotionBasedOnRootBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool bHasRelevantPoses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	PerBoneBlendWeight[] PerBoneBlendWeights;//[Offset: 0x60, Size: 12]
	Guid SkeletonGuid;//[Offset: 0x6c, Size: 16]
	Guid VirtualBoneGuid;//[Offset: 0x7c, Size: 16]

--------------------------------
Class: PerBoneBlendWeight
	int SourceIndex;//[Offset: 0x0, Size: 4]
	float BlendWeight;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimNode_UseCachedPose.AnimNode_Base
	PoseLink LinkToCachingNode;//[Offset: 0x2c, Size: 12]
	FName CachePoseName;//[Offset: 0x38, Size: 8]

--------------------------------
Class: AnimNode_ApplyAdditive.AnimNode_Base
	PoseLink Base;//[Offset: 0x2c, Size: 12]
	PoseLink Additive;//[Offset: 0x38, Size: 12]
	float Alpha;//[Offset: 0x44, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x48, Size: 8]
	int LODThreshold;//[Offset: 0x50, Size: 4]
	float ActualAlpha;//[Offset: 0x54, Size: 4]

--------------------------------
Class: InputScaleBias
	float Scale;//[Offset: 0x0, Size: 4]
	float Bias;//[Offset: 0x4, Size: 4]

--------------------------------
Class: AnimNode_Slot.AnimNode_Base
	PoseLink Source;//[Offset: 0x2c, Size: 12]
	FName SlotName;//[Offset: 0x38, Size: 8]
	bool bAlwaysUpdateSourcePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: AnimNode_BlendListByInt.AnimNode_BlendListBase.AnimNode_Base
	int ActiveChildIndex;//[Offset: 0x94, Size: 4]

--------------------------------
Class: AnimNode_TwoWayBlend.AnimNode_Base
	PoseLink A;//[Offset: 0x2c, Size: 12]
	PoseLink B;//[Offset: 0x38, Size: 12]
	float Alpha;//[Offset: 0x44, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x48, Size: 8]
	float InternalBlendAlpha;//[Offset: 0x50, Size: 4]
	bool bAIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	bool bBIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]
	bool bResetChildOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56, Size: 1]

--------------------------------
Class: AnimNode_SaveCachedPose.AnimNode_Base
	PoseLink Pose;//[Offset: 0x2c, Size: 12]
	FName CachePoseName;//[Offset: 0x38, Size: 8]
	float GlobalWeight;//[Offset: 0x40, Size: 4]

--------------------------------
Class: AnimNode_BlendListByEnum.AnimNode_BlendListBase.AnimNode_Base
	int[] EnumToPoseIndex;//[Offset: 0x94, Size: 12]
	byte ActiveEnumValue;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: AnimNode_AnimDynamics.AnimNode_SkeletalControlBase.AnimNode_Base
	enum SimulationSpace;//[Offset: 0x58, Size: 1]
	BoneReference RelativeSpaceBone;//[Offset: 0x60, Size: 24]
	bool bChain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	BoneReference BoundBone;//[Offset: 0x80, Size: 24]
	BoneReference ChainEnd;//[Offset: 0x98, Size: 24]
	Vector BoxExtents;//[Offset: 0xb0, Size: 12]
	Vector LocalJointOffset;//[Offset: 0xbc, Size: 12]
	Vector OldLocalJointOffset;//[Offset: 0xc8, Size: 12]
	float GravityScale;//[Offset: 0xd4, Size: 4]
	bool bLinearSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bAngularSpring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	float LinearSpringConstant;//[Offset: 0xdc, Size: 4]
	float AngularSpringConstant;//[Offset: 0xe0, Size: 4]
	bool bEnableWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	bool bWindWasEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5, Size: 1]
	float WindScale;//[Offset: 0xe8, Size: 4]
	bool bOverrideLinearDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	float LinearDampingOverride;//[Offset: 0xf0, Size: 4]
	bool bOverrideAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	float AngularDampingOverride;//[Offset: 0xf8, Size: 4]
	bool bOverrideAngularBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc, Size: 1]
	float AngularBiasOverride;//[Offset: 0x100, Size: 4]
	bool bDoUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	bool bDoEval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 1]
	int NumSolverIterationsPreUpdate;//[Offset: 0x108, Size: 4]
	int NumSolverIterationsPostUpdate;//[Offset: 0x10c, Size: 4]
	AnimPhysConstraintSetup ConstraintSetup;//[Offset: 0x110, Size: 92]
	bool bUseDynamicAngularLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c, Size: 1]
	Vector Dynamic_AngularLimitsMin;//[Offset: 0x170, Size: 12]
	Vector Dynamic_AngularLimitsMax;//[Offset: 0x17c, Size: 12]
	bool bUsePlanarLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	AnimPhysPlanarLimit[] PlanarLimits;//[Offset: 0x18c, Size: 12]
	bool bUseSphericalLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	AnimPhysSphericalLimit[] SphericalLimits;//[Offset: 0x19c, Size: 12]
	enum CollisionType;//[Offset: 0x1a8, Size: 1]
	float SphereCollisionRadius;//[Offset: 0x1ac, Size: 4]
	int NonEvaluateFrameNum;//[Offset: 0x1b0, Size: 4]
	Vector ExternalForce;//[Offset: 0x1b8, Size: 12]
	AnimNodeBoneShiftTolerenceChecker BoneShiftTolerenceChecker;//[Offset: 0x270, Size: 36]

--------------------------------
Class: AnimNode_SkeletalControlBase.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x2c, Size: 12]
	float Alpha;//[Offset: 0x38, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x3c, Size: 8]
	int LODThreshold;//[Offset: 0x44, Size: 4]
	float ActualAlpha;//[Offset: 0x48, Size: 4]

--------------------------------
Class: ComponentSpacePoseLink.PoseLinkBase

--------------------------------
Class: AnimPhysConstraintSetup
	enum LinearXLimitType;//[Offset: 0x0, Size: 1]
	enum LinearYLimitType;//[Offset: 0x1, Size: 1]
	enum LinearZLimitType;//[Offset: 0x2, Size: 1]
	Vector LinearAxesMin;//[Offset: 0x4, Size: 12]
	Vector LinearAxesMax;//[Offset: 0x10, Size: 12]
	enum AngularConstraintType;//[Offset: 0x1c, Size: 1]
	enum TwistAxis;//[Offset: 0x1d, Size: 1]
	float ConeAngle;//[Offset: 0x20, Size: 4]
	float AngularXAngle;//[Offset: 0x24, Size: 4]
	float AngularYAngle;//[Offset: 0x28, Size: 4]
	float AngularZAngle;//[Offset: 0x2c, Size: 4]
	Vector AngularLimitsMin;//[Offset: 0x30, Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x3c, Size: 12]
	enum AngularTargetAxis;//[Offset: 0x48, Size: 1]
	Vector AngularTarget;//[Offset: 0x4c, Size: 12]
	bool bLinearFullyLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: AnimPhysPlanarLimit
	BoneReference DrivingBone;//[Offset: 0x0, Size: 24]
	Transform PlaneTransform;//[Offset: 0x20, Size: 48]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: AnimPhysSphericalLimit
	BoneReference DrivingBone;//[Offset: 0x0, Size: 24]
	Vector SphereLocalOffset;//[Offset: 0x18, Size: 12]
	float LimitRadius;//[Offset: 0x24, Size: 4]
	enum LimitType;//[Offset: 0x28, Size: 1]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: AnimNodeBoneShiftTolerenceChecker
	bool bShrinkIfOutofTolerence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIncludeRootKinamiticBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum TolerencePolicy;//[Offset: 0x2, Size: 1]
	float MaxTolerenceBoneShiftDistance;//[Offset: 0x4, Size: 4]
	float MaxTolerenceBoneShiftScale;//[Offset: 0x8, Size: 4]

--------------------------------
Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: AnimNode_ModifyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference BoneToModify;//[Offset: 0x58, Size: 24]
	Vector Translation;//[Offset: 0x70, Size: 12]
	Rotator Rotation;//[Offset: 0x7c, Size: 12]
	Vector Scale;//[Offset: 0x88, Size: 12]
	byte TranslationMode;//[Offset: 0x94, Size: 1]
	byte RotationMode;//[Offset: 0x95, Size: 1]
	byte ScaleMode;//[Offset: 0x96, Size: 1]
	byte TranslationSpace;//[Offset: 0x97, Size: 1]
	byte RotationSpace;//[Offset: 0x98, Size: 1]
	byte ScaleSpace;//[Offset: 0x99, Size: 1]

--------------------------------
Class: AnimNode_SubInstance.AnimNode_Base
	PoseLink InPose;//[Offset: 0x2c, Size: 12]
	PoseLink[] InPoses;//[Offset: 0x38, Size: 12]
	FName SubInstanceSlotName;//[Offset: 0x48, Size: 8]
	class AnimInstance* InstanceClass;//[Offset: 0x50, Size: 4]
	AnimInstance* InstanceToRun;//[Offset: 0x54, Size: 4]
	Property*[] InstanceProperties;//[Offset: 0x58, Size: 12]
	Property*[] SubInstanceProperties;//[Offset: 0x64, Size: 12]
	FName[] SourcePropertyNames;//[Offset: 0x70, Size: 12]
	FName[] DestPropertyNames;//[Offset: 0x7c, Size: 12]
	AnimNode_SubAnimInertialization PosInertialization;//[Offset: 0xa8, Size: 72]
	float NewAnimBlendTime;//[Offset: 0xf0, Size: 4]
	bool bUpdateWhenNotRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]

--------------------------------
Class: AnimNode_SubAnimInertialization

--------------------------------
Class: AnimNode_RotateRootBone.AnimNode_Base
	PoseLink BasePose;//[Offset: 0x2c, Size: 12]
	float Pitch;//[Offset: 0x38, Size: 4]
	float Yaw;//[Offset: 0x3c, Size: 4]
	Rotator MeshToComponent;//[Offset: 0x40, Size: 12]

--------------------------------
Class: AnimNode_Fabrik.AnimNode_SkeletalControlBase.AnimNode_Base
	Transform EffectorTransform;//[Offset: 0x60, Size: 48]
	byte EffectorTransformSpace;//[Offset: 0x90, Size: 1]
	BoneReference EffectorTransformBone;//[Offset: 0x98, Size: 24]
	BoneSocketTarget EffectorTarget;//[Offset: 0xb0, Size: 96]
	byte EffectorRotationSource;//[Offset: 0x110, Size: 1]
	BoneReference TipBone;//[Offset: 0x118, Size: 24]
	BoneReference RootBone;//[Offset: 0x130, Size: 24]
	float Precision;//[Offset: 0x148, Size: 4]
	int MaxIterations;//[Offset: 0x14c, Size: 4]
	bool bEnableDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]

--------------------------------
Class: BoneSocketTarget
	bool bUseSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	BoneReference BoneReference;//[Offset: 0x8, Size: 24]
	SocketReference SocketReference;//[Offset: 0x20, Size: 64]

--------------------------------
Class: SocketReference
	FName SocketName;//[Offset: 0x0, Size: 8]

--------------------------------
Class: AnimNode_CopyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference SourceBone;//[Offset: 0x58, Size: 24]
	BoneReference TargetBone;//[Offset: 0x70, Size: 24]
	bool bCopyTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	bool bCopyRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 1]
	bool bCopyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a, Size: 1]
	byte ControlSpace;//[Offset: 0x8b, Size: 1]

--------------------------------
Class: AnimNode_Inertialization.AnimNode_Base
	PoseLink Source;//[Offset: 0x2c, Size: 12]

--------------------------------
Class: AnimNode_RotationOffsetBlendSpace.AnimNode_BlendSpacePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	PoseLink BasePose;//[Offset: 0xf4, Size: 12]
	int LODThreshold;//[Offset: 0x100, Size: 4]
	bool bIsLODEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	float Alpha;//[Offset: 0x108, Size: 4]
	InputScaleBias AlphaScaleBias;//[Offset: 0x10c, Size: 8]
	float ActualAlpha;//[Offset: 0x114, Size: 4]

--------------------------------
Class: CustomCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	void InterpToTargetFov(float FOV, float InterpSpeed);// 0x242bd70
	bool InterpFov(float DeltaTime);// 0x242bce8

--------------------------------
Class: SimpleOBCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BP_SearchVehicleRadarComp_C.VehicleRadarSearchComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: VehicleRadarSearchComponent.SceneComponent.ActorComponent.Object
	float SearchIntervalTime;//[Offset: 0x240, Size: 4]
	float SearchRange_Map;//[Offset: 0x244, Size: 4]
	float SearchRange_World;//[Offset: 0x248, Size: 4]
	<class STExtraVehicleBase,int> VehicleTypeIcons;//[Offset: 0x24c, Size: 60]
	int DefaultVehicleTypeIcons;//[Offset: 0x288, Size: 4]
	int SearchRangeIconID;//[Offset: 0x28c, Size: 4]
	class STExtraVehicleBase[] IgnoreVehicleType;//[Offset: 0x290, Size: 12]
	int MaxDetectedCount;//[Offset: 0x29c, Size: 4]
	int TipsWhenPlayerEnter;//[Offset: 0x2a0, Size: 4]
	AkAudioEvent* EnterTipSound;//[Offset: 0x2a4, Size: 4]
	int TipsWhenPlayerLeave;//[Offset: 0x2a8, Size: 4]
	<STExtraVehicleBase*,int> VehiclesDetected;//[Offset: 0x2ac, Size: 60]
	void StartDetect();// 0x27a3294
	byte GetNetRoleSafety(bool bDoIncludeOB);// 0x27a320c
	void EndDtect();// 0x27a31f8

--------------------------------
Class: BP_PlayerGunCollision_C.PlayerGunCollosionComp.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x190, Size: 4]
	void GetQEOffset(out Vector QEOffset, bool CallFunc_HasState_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void GetDectectOffset(out Vector Offset, Vector CallFunc_GetQEOffset_QEOffset, Vector CallFunc_GetQEOffset_QEOffset2, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_GetQEOffset_QEOffset3, Vector CallFunc_Add_VectorVector_ReturnValue3, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_HasState_ReturnValue3, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void InitAimFoldPoint(CustomParticleSystemComponent* CallFunc_SpawnCustomEmitterAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsLocallyControlled_ReturnValue);// 0x46f6b154
	void IsCanCheckCollosion(out bool CanCheck, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, WeaponManagerComponent* CallFunc_GetWeaponManager_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, STExtraWeapon* CallFunc_GetCurrentUsingWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x46f6b154
	void PostCollisionProcess(float FoldFactor, Vector FoldPoint, Vector FoldNormal, int CallFunc_Abs_Int_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_FFloor_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, bool CallFunc_IsValid_ReturnValue, int CallFunc_Abs_Int_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_HasState_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Abs_Int_ReturnValue3, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x46f6b154
	void ChecCollisionProne(out float GunFolderFactor, out Vector FoldPoint, out Vector FoldNormal, float CallFunc_CheckCollisionStand_GunFolderFactor, Vector CallFunc_CheckCollisionStand_FoldPoint, Vector CallFunc_CheckCollisionStand_FoldNormal);// 0x46f6b154
	void CheckCollisionCrouch(out float GunFolderFactor, out Vector FoldPoint, out Vector FoldNormal, float CallFunc_CheckCollisionStand_GunFolderFactor, Vector CallFunc_CheckCollisionStand_FoldPoint, Vector CallFunc_CheckCollisionStand_FoldNormal);// 0x46f6b154
	void CheckCollisionStand(out float GunFolderFactor, out Vector FoldPoint, out Vector FoldNormal, byte[] K2Node_MakeArray_Array, Vector CallFunc_GetDetectStartLoc_DetectStartLoc, bool CallFunc_IsUpFolder_bUpFolder, float CallFunc_GetCurrentWeaponBodyLength_BodyLength, Vector CallFunc_GetDetectStartLoc_DetectStartLoc2, Vector CallFunc_Subtract_VectorVector_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, float CallFunc_VSize_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Abs_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_FClamp_ReturnValue, STExtraVehicleBase* CallFunc_GetCurrentVehicle_ReturnValue, Actor*[] K2Node_MakeArray_Array2, float CallFunc_Multiply_IntFloat_ReturnValue, HitResult CallFunc_BoxTraceSingleForObjects_OutHit, bool CallFunc_BoxTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void CheckGunCollision(bool CallFunc_IsCanCheckCollosion_CanCheck, float CallFunc_ChecCollisionProne_GunFolderFactor, Vector CallFunc_ChecCollisionProne_FoldPoint, Vector CallFunc_ChecCollisionProne_FoldNormal, float CallFunc_CheckCollisionCrouch_GunFolderFactor, Vector CallFunc_CheckCollisionCrouch_FoldPoint, Vector CallFunc_CheckCollisionCrouch_FoldNormal, float CallFunc_CheckCollisionStand_GunFolderFactor, Vector CallFunc_CheckCollisionStand_FoldPoint, Vector CallFunc_CheckCollisionStand_FoldNormal, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void IsUpFolder(out bool bUpFolder, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_GetActorUpVector_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerController_ReturnValue, Rotator CallFunc_GetCameraRotation_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x46f6b154
	void GetCurrentWeaponBodyLength(out float BodyLength, bool CallFunc_IsValid_ReturnValue, interface class CallFunc_GetCurrentShootWeapon_self_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, float CallFunc_GetWeaponBodyLength_ReturnValue, bool CallFunc_IsValid_ReturnValue2);// 0x46f6b154
	void GetDetectStartLoc(out Vector DetectStartLoc, Vector CallFunc_GetDectectOffset_Offset, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_IsValid_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_GetRightVector_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue2, Vector CallFunc_GetUpVector_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue3, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue3);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x46f6b154
	void ReceiveEndPlay(byte EndPlayReason);// 0x46f6b154
	void ExecuteUbergraph_BP_PlayerGunCollision(int EntryPoint, bool K2Node_Event_Visbile, Vector K2Node_Event_EffectLoc, bool CallFunc_IsValid_ReturnValue, HitResult CallFunc_K2_SetWorldLocation_SweepHitResult, byte K2Node_Event_EndPlayReason, bool CallFunc_IsValid_ReturnValue2);// 0x46f6b154
	PrimitiveComponent* HitBox;//[Offset: 0x194, Size: 4]
	STExtraBaseCharacter* TargetCH;//[Offset: 0x198, Size: 4]
	Vector ImpactPoint;//[Offset: 0x19c, Size: 12]
	bool CheckDeltaTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	int LastFoldRatio;//[Offset: 0x1ac, Size: 4]
	int CurFlodRatio;//[Offset: 0x1b0, Size: 4]
	bool BSendZero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4, Size: 1]
	bool CanCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b5, Size: 1]
	CustomParticleSystemComponent* AimFoldEffect;//[Offset: 0x1b8, Size: 4]
	Vector ImpactNormal;//[Offset: 0x1bc, Size: 12]
	Vector InFoldPoint;//[Offset: 0x1c8, Size: 12]

--------------------------------
Class: BP_CharacterFieldOfViewNotificationComponent_C.BP_FieldOfViewNotificationComponent_C.FieldOfViewNotificationComponent.ActorComponent.Object
	Box GetActorBoundingBox(Actor* Actor, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, Vector CallFunc_GetComponentBounds_Origin, Vector CallFunc_GetComponentBounds_BoxExtent, float CallFunc_GetComponentBounds_SphereRadius, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_TransformLocation_ReturnValue, Vector CallFunc_TransformLocation_ReturnValue2, Box CallFunc_MakeBox_ReturnValue, Box CallFunc_MakeBox_ReturnValue2);// 0x46f6b154
	FString GetFieldOfViewTargetCategory(Object* Context, FString CallFunc_GetDisplayName_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue2, ReportClientFieldOfViewDataComponent* K2Node_DynamicCast_AsReport_Client_Field_Of_View_Data_Component, bool K2Node_DynamicCast_bSuccess, FString CallFunc_Concat_StrStr_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue3, FString CallFunc_GetDisplayName_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_GetEnemy_ReturnValue, FString CallFunc_GetTeammate_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, STExtraPlayerCharacter* K2Node_DynamicCast_AsSTExtra_Player_Character, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsTeamMate_ReturnValue);// 0x46f6b154

--------------------------------
Class: GiftGiverComp_BP_C.STCharacterGiftGiverComp.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x198, Size: 4]
	int GetGiftSubType(int CallFunc_Conv_ByteToInt_ReturnValue);// 0x46f6b154
	void OnSetMyGiftGiverCandidate(Pawn* Owner, GiftTypeData CurrentGiftType, GiftTypeData PrevType);// 0x46f6b154
	void ExecuteUbergraph_GiftGiverComp_BP(int EntryPoint, Pawn* K2Node_Event_Owner, GiftTypeData K2Node_Event_CurrentGiftType, GiftTypeData K2Node_Event_PrevType, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, UTSkillManagerComponent* CallFunc_GetSkillManagerComponent_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, GiftTypeDataConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, UTSkillManagerComponent* CallFunc_GetSkillManagerComponent_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue3, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue2, GiftTypeDataConfig CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2);// 0x46f6b154
	byte SubGiftType;//[Offset: 0x19c, Size: 1]
	BP_GiftConfigData_C* DataAsset;//[Offset: 0x1a0, Size: 4]

--------------------------------
Class: STCharacterGiftGiverComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xfc, Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0x100, Size: 4]
	GiftFanPickerData FanDataOrigin;//[Offset: 0x104, Size: 28]
	GiftFanPickerData FanData;//[Offset: 0x120, Size: 28]
	STExtraBaseCharacter* receiver;//[Offset: 0x158, Size: 4]
	byte GiftType;//[Offset: 0x15c, Size: 1]
	float RescueingStatusStartTimeSeconds;//[Offset: 0x160, Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x17c, Size: 8]
	void WaitingFroAcceptState_ActOnSatisfied(float DeltaTime);// 0x236ffe8
	void WaitingForAcceptState_ActOnUnsatisfied();// 0x25f8380
	bool WaitingConfirmState_IsConditionSatisfied();// 0x23c140c
	void TickGiveComp(float DeltaTime);// 0x25f8308
	void SetGiftGivingDuration(float Val);// 0x25f8290
	bool ReceiverConfirmReceiving();// 0x25f8268
	void ReceiverAccept();// 0x25f8254
	bool PickTargetsAsReceiver(out STExtraBaseCharacter*[] pickedTargets);// 0x25f81ac
	void OnSetMyGiftGiverCandidate(Pawn* Owner, GiftTypeData CurrentGiftType, GiftTypeData PrevType);// 0x46f6b154
	void OnRespawned();// 0x234fed4
	void OnRecycled();// 0x234fef0
	void MyReceiverReceivingStateInterrupted();// 0x25f8198
	bool IsGiftGivingStatus();// 0x25f8170
	bool IsGiftCanGiveStatus();// 0x25f8148
	void InitializeOwner(Pawn* _TempPawn);// 0x25f80d0
	bool InGivingState_IsConditionSatisfied();// 0x25f80a8
	void InGivingState_ActOnUnsatisfied();// 0x25f8094
	void InGivingState_ActOnSatisfied(float DeltaTime);// 0x236ffe8
	void GivingStateInterrupted();// 0x25f8080
	void GivingFinished();// 0x25f806c
	float GetGivingStatusDuration();// 0x25f8044
	int GetGiftSubType();// 0x46f6b154
	void CanGiveStateInterrupted();// 0x25f8030

--------------------------------
Class: GiftFanPickerData
	float Radius;//[Offset: 0x0, Size: 4]
	float HightDiff;//[Offset: 0x4, Size: 4]
	float angle;//[Offset: 0x8, Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]
	float LowerTraceRatio;//[Offset: 0x10, Size: 4]
	float SweepSingleSize;//[Offset: 0x14, Size: 4]
	bool NeedReceiverFaceGiver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: GiftTypeDataConfig
	SoftObjectPath IconTexture;//[Offset: 0x0, Size: 24]
	class UTSkill* SkillSoftClass_Giver;//[Offset: 0x18, Size: 40]
	class UTSkill* SkillSoftClass_Receiver;//[Offset: 0x40, Size: 40]

--------------------------------
Class: BP_GiftConfigData_C.GiftSetupDataExtended.PrimaryDataAsset.DataAsset.Object
	<byte,GiftTypeDataConfig> ConfigMap;//[Offset: 0x20, Size: 60]

--------------------------------
Class: GiftSetupDataExtended.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: HoldComponent_C.ActorComponent.Object
	void HoldTime(out float Time, float CallFunc_GetTimeSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x46f6b154
	void Release(byte FingerIndex, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue2, float CallFunc_HoldTime_Time, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x46f6b154
	void Push(int FingerIndex, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue3, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void HoldAndRelease__DelegateSignature(int FingeerIndex);// 0x46f6b154
	delegate HoldAndRelease;//[Offset: 0xd0, Size: 12]
	float HoldTimeThreshold;//[Offset: 0xdc, Size: 4]
	int HoldFingerIndex;//[Offset: 0xe0, Size: 4]
	byte HoldMode;//[Offset: 0xe4, Size: 1]
	float PushTime;//[Offset: 0xe8, Size: 4]
	bool IsPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool  isClick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]

--------------------------------
Class: CharacterAnimList_Skill_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: PlayerSkillComp_BP_C.UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object

--------------------------------
Class: UAECharacterSkillManagerComponent.UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	SkillCover[] SkillCoverUIDMap;//[Offset: 0x704, Size: 12]
	bool bEnableSkillCover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710, Size: 1]
	bool TriggerEvent(int SkillID, byte EventType);// 0x2756a68
	void TriggerCurSkillEvent(byte UAEEvent, int SkillIndex);// 0x27569a4
	void SetSkillOwner(Actor* Pawn);// 0x2507ca0
	void RemoveSkillCover(class UTSkill SkillCoverClass, class UTSkill SkillCoveredClass);// 0x27567d0
	void CheckSkillCover(out int SkillID);// 0x2756748
	void AddSkillCover(class UTSkill SkillCoverClass, class UTSkill SkillCoveredClass, bool bIsForceLoad);// 0x2756524

--------------------------------
Class: SkillCover
	int[] SkillCoverUIDArray;//[Offset: 0x0, Size: 12]
	int SkillCoveredUID;//[Offset: 0xc, Size: 4]

--------------------------------
Class: LevelActiveComponent.ActorComponent.Object
	bool IsActiveLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: AimAndFireComponent_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd0, Size: 4]
	void GetPawn(out BP_PlayerPawn_C* NewParam, Actor* CallFunc_GetOwner_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void ClearPressedTimes();// 0x46f6b154
	void DelayPress_WeaponVersion(BP_PlayerPawn_C* CallFunc_GetPawn_NewParam, interface class CallFunc_GetCurrentShootWeapon_self_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPressed_NewParam, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_Press_Pressed, FString CallFunc_Concat_StrStr_ReturnValue);// 0x46f6b154
	void DelayPress(enum State, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_Press_Pressed);// 0x46f6b154
	void FireType(out byte Type, BP_PlayerPawn_C* CallFunc_GetPawn_NewParam, bool CallFunc_IsValid_ReturnValue, interface class CallFunc_GetCurrentShootWeapon_self_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int CallFunc_GetWeaponID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, WeaponAimFireStruct2 CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x46f6b154
	void MultiPress(byte FingerIndex, out bool IsPressed, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, bool CallFunc_IsPressed_NewParam);// 0x46f6b154
	void IsPressed(out bool NewParam, bool CallFunc_Greater_IntInt_ReturnValue);// 0x46f6b154
	void Fire(BP_PlayerPawn_C* CallFunc_GetPawn_NewParam, interface class CallFunc_StartFire_self_CastInput, Controller* CallFunc_GetController_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void Release(byte FingerIndex, bool releaseFinger, bool ReleaseFing, BP_PlayerPawn_C* CallFunc_GetPawn_NewParam, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BP_PlayerPawn_C* CallFunc_GetPawn_NewParam2, BP_PlayerPawn_C* CallFunc_GetPawn_NewParam3, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, byte CallFunc_FireType_Type, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, byte CallFunc_FireType_Type2, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue3, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, int CallFunc_Subtract_IntInt_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, bool K2Node_SwitchInteger_CmpSuccess, int CallFunc_Conv_ByteToInt_ReturnValue);// 0x46f6b154
	void Press(byte FingerIndex, out bool Pressed, BP_PlayerPawn_C* CallFunc_GetPawn_NewParam, bool CallFunc_IsValid_ReturnValue, interface class CallFunc_GetCurrentShootWeapon_self_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, interface class CallFunc_GetCurrentShootWeapon_self2_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_HasState_ReturnValue, bool CallFunc_HasState_ReturnValue2, bool CallFunc_AllowState_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_FireType_Type, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_Conv_ByteToInt_ReturnValue, byte CallFunc_FireType_Type2, bool K2Node_SwitchEnum_CmpSuccess, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, PlayerController* CallFunc_GetPlayerController_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue6, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_Concat_StrStr_ReturnValue7);// 0x46f6b154
	void DoFire();// 0x46f6b154
	void ExecuteUbergraph_AimAndFireComponent(int EntryPoint, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x46f6b154
	void HoldFire__DelegateSignature();// 0x46f6b154
	void OpenFire__DelegateSignature(Geometry NewParam, PointerEvent NewParam1);// 0x46f6b154
	void ScopeOut__DelegateSignature(int FingerIndex, bool ScopeIn, bool IgnoreAngledSight, bool PushButton);// 0x46f6b154
	void ScopeIn__DelegateSignature(int FingerIndex, bool ScopeIn, bool IgnoreAngledSight, bool PushButton);// 0x46f6b154
	BP_PlayerPawn_C* Pawn;//[Offset: 0xd4, Size: 4]
	delegate ScopeIn;//[Offset: 0xd8, Size: 12]
	delegate ScopeOut;//[Offset: 0xe4, Size: 12]
	delegate OpenFire;//[Offset: 0xf0, Size: 12]
	delegate HoldFire;//[Offset: 0xfc, Size: 12]
	byte FingerIndex;//[Offset: 0x108, Size: 1]
	int PressedTimes;//[Offset: 0x10c, Size: 4]
	float FireDelay;//[Offset: 0x110, Size: 4]
	bool PreADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]

--------------------------------
Class: WeaponAimFireStruct2
	byte AimFireType_6_2AB32BA74CF21302DCA61AA1A3D772B5;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CharacterAnimList_Parachute_C.UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: BuildSystemComp_BP_C.STBuildSystemComponent.BuildSystemComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 4]
	bool ShouldEnableDoubleTouchMode(bool CallFunc_NotEqual_IntInt_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue);// 0x46f6b154
	bool IsCanPlaceBuildingBP(int InBuildID);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void InitBuildDataFromDataTable();// 0x46f6b154
	void OnConstructionComplete_Event(bool bWasSuccessful, byte ConstructionType, bool bIsFromServer);// 0x46f6b154
	void OnInsufficientMaterial_Event(byte BuildType);// 0x46f6b154
	void RegisterUIEvents();// 0x46f6b154
	void CustomEvent(float FloatValue);// 0x46f6b154
	void CustomEvent(float FloatValue);// 0x46f6b154
	void UpdateParameters();// 0x46f6b154
	void CustomEvent(int IntValue);// 0x46f6b154
	void CustomEvent(int IntValue);// 0x46f6b154
	void CustomEvent(float FloatValue);// 0x46f6b154
	void ExecuteUbergraph_BuildSystemComp_BP(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate2, FString Temp_string_Variable, FString Temp_string_Variable2, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable2, delegate K2Node_CreateDelegate_OutputDelegate3, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable2, bool CallFunc_GetIsHasInitData_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_GetDataTableRowNames_OutRowNames, UAELoadedClassManager* CallFunc_Get_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int Temp_int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, byte[] K2Node_MakeArray_Array, byte[] K2Node_MakeArray_Array2, bool K2Node_CustomEvent_bWasSuccessful, byte K2Node_CustomEvent_ConstructionType, bool K2Node_CustomEvent_bIsFromServer, byte K2Node_CustomEvent_BuildType, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString K2Node_Select_Default, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, float K2Node_CustomEvent_FloatValue3, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_CustomEvent_FloatValue2, int Temp_int_Loop_Counter_Variable3, delegate K2Node_CreateDelegate_OutputDelegate4, int CallFunc_Add_IntInt_ReturnValue3, int K2Node_CustomEvent_IntValue2, float CallFunc_Conv_IntToFloat_ReturnValue2, Actor* CallFunc_GetOwner_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess2, int K2Node_CustomEvent_IntValue, Controller* CallFunc_GetControllerSafety_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, float K2Node_CustomEvent_FloatValue, bool CallFunc_IsEditor_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue2, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess4, UTSkillManagerComponent* CallFunc_GetSkillManagerComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate5, int[] CallFunc_GetCurSkillIndexes_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue2, UAESkillManagerComponent* K2Node_DynamicCast_AsUAESkill_Manager_Component, bool K2Node_DynamicCast_bSuccess5, bool CallFunc_Less_IntInt_ReturnValue2, int Temp_int_Array_Index_Variable3, FName CallFunc_Array_Get_Item2, delegate K2Node_CreateDelegate_OutputDelegate6, BP_STRUCT_BuildingActorTable_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue3, float CallFunc_Conv_IntToFloat_ReturnValue4, BuildingConsumeData K2Node_MakeStruct_BuildingConsumeData, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, byte[] K2Node_Select2_Default, FString CallFunc_GetTableData_String_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue3, BuildingData K2Node_MakeStruct_BuildingData, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn2, bool K2Node_DynamicCast_bSuccess6, UTSkillManagerComponent* CallFunc_GetSkillManagerComponent_ReturnValue2, bool CallFunc_IsDedicatedServer_ReturnValue2, int[] CallFunc_GetCurSkillIndexes_ReturnValue2, int CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, UAESkillManagerComponent* K2Node_DynamicCast_AsUAESkill_Manager_Component2, bool K2Node_DynamicCast_bSuccess7, bool CallFunc_Less_IntInt_ReturnValue3);// 0x46f6b154
	UAEDataTable* DataTable;//[Offset: 0x2a4, Size: 4]

--------------------------------
Class: STBuildSystemComponent.BuildSystemComponent.ActorComponent.Object
	delegate OnInsufficientMaterial;//[Offset: 0x270, Size: 12]
	int CurrentUIBuildingID;//[Offset: 0x27c, Size: 4]
	class ConstructBot* ConstructBotTemplate;//[Offset: 0x280, Size: 4]
	bool hasConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool CheckConnections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	int MaxmumBuildingAllowed;//[Offset: 0x288, Size: 4]
	ConstructBot* ConstructBot;//[Offset: 0x28c, Size: 4]
	STExtraPlayerController* CachedOwnerPlayerController;//[Offset: 0x290, Size: 4]
	void SpawnConstructBot();// 0x25f5c60
	void SetCheatBuilding(bool IsCheat);// 0x25f5be0
	void SetBuildingConfig(const int Config);// 0x25f5b68
	void ServerSpawnConstructBot();// 0x25f5b0c
	void ServerDestroyConstructBot();// 0x25f5ab0
	void RestartConstructBot();// 0x46f6b154
	void PlayerControllerReconnectedHandler();// 0x25f5a9c
	void OnUIInterfaceCreated();// 0x25f5a88
	void OnLostConnectionHandler(UAEPlayerController* Controller, bool bFromServer);// 0x25f59bc
	void OnControllerBeginTouch(out const Vector2D ScreenPosition);// 0x25f5938
	void OnConnectionRestoredHandler(UAEPlayerController* Controller);// 0x25f58b8
	void JoystickTouchBeginHandler(out const Vector2D ScreenPosition, int PointerIndex, bool IsBegin);// 0x25f57a0
	bool IsCanPlaceBuilding(int InBuildID, byte _TYPE);// 0x25f56d4
	void InitializeComponent();// 0x25f56b8
	void InitBuildDataFromDataTable();// 0x46f6b154
	void HandleStopPlaceBuilding();// 0x251ecac
	void HandleStartPlaceBuilding();// 0x251ebf4
	void HandleServerPlaceBuildingSuccess(Actor* BuiltActor);// 0x25f5638
	PlayerController* GetOwnerPlayerController();// 0x2577fa0
	STExtraPlayerController* GetExtraPlayerController();// 0x25f5610
	int GetCurrentBuildIDFromUI();// 0x25f55e0
	static bool GetBuildingConsumeDataByID(int InBuildingID, out BuildingConsumeData OutBuildData);// 0x25f54f0
	void DoSpawnConstructBot();// 0x25f54dc
	void DoShutdownConstructBot();// 0x25f54c8
	void DestroyConstructBot();// 0x25f54b4
	bool CustomizedCheck(out const BuildingData CurBuildData, out const Rotator DestRotation, out const Vector DestLocation);// 0x25f5344
	void BindTouchEvents();// 0x25f5330
	void BeginPlay();// 0x250f4a8
	void AddBuildingConsumeData(BuildingConsumeData InData);// 0x25f5280

--------------------------------
Class: BuildSystemComponent.ActorComponent.Object
	delegate OnConstructionComplete;//[Offset: 0xd0, Size: 12]
	delegate OnDoubleClickMode2Event;//[Offset: 0xdc, Size: 12]
	delegate OnDoubleClickMode2PercentEvent;//[Offset: 0xe8, Size: 12]
	float MaxmumConstructingDistance;//[Offset: 0xf4, Size: 4]
	class SelectBuildActor* BuildingSelectorClass;//[Offset: 0xfc, Size: 4]
	class SelectBuildActor* SelectBuildMeshClass;//[Offset: 0x100, Size: 4]
	float UpdateBuildEnableTimer;//[Offset: 0x104, Size: 4]
	float MinBuildDist;//[Offset: 0x108, Size: 4]
	float GridGroundThreshold;//[Offset: 0x10c, Size: 4]
	bool AIIsOpenAdsorb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool AIIsOpenLeftAndRightTry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	float GridGroundCheckDepth;//[Offset: 0x114, Size: 4]
	WorldGridData WorldGridData;//[Offset: 0x118, Size: 12]
	bool bCanPlaceOnConstructableActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x124, Size: 1]
	int bIsFastPlacementMode;//[Offset: 0x128, Size: 4]
	int Mode2PressTouchBuildIndex;//[Offset: 0x12c, Size: 4]
	bool bIsStartPreBuildMode2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	Vector2D Mode2PreBuildPos;//[Offset: 0x134, Size: 8]
	float CurrentDoubleClickDuration;//[Offset: 0x13c, Size: 4]
	float ValidDoubleClickDuration;//[Offset: 0x140, Size: 4]
	float ValidDoubleClickInterval;//[Offset: 0x144, Size: 4]
	float ValidDoubleClickDistance;//[Offset: 0x148, Size: 4]
	bool bSouldSkipOwningPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 1]
	bool bNativeTouchActorBuildEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d, Size: 1]
	bool bNativeDoubleCkickBuildEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e, Size: 1]
	<int,class SelectBuildActor> ActorSelectorMap;//[Offset: 0x150, Size: 60]
	class Object[] SkippingObjects;//[Offset: 0x18c, Size: 12]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	class Object[] FilterTemplates;//[Offset: 0x19c, Size: 12]
	class Object[] ActorsShouldSkipVisiblityCheck;//[Offset: 0x1a8, Size: 12]
	byte BuildingGridChannel;//[Offset: 0x1b4, Size: 1]
	float MaxCanAdsorbAngle;//[Offset: 0x1b8, Size: 4]
	float SnappingDistance;//[Offset: 0x1bc, Size: 4]
	float SnappingDetectRadius;//[Offset: 0x1c0, Size: 4]
	float AIMaxCanRotateAngle;//[Offset: 0x1c4, Size: 4]
	SelectBuildActor* SelectBuildActor;//[Offset: 0x1c8, Size: 4]
	int CachedCDOIndex;//[Offset: 0x1ec, Size: 4]
	Actor* CachedCDOActor;//[Offset: 0x1f0, Size: 4]
	void StopPlaceBuilding();// 0x25329ec
	void StartPrePlaceBuilding(int InBuildID, byte viewType);// 0x54a5700
	void SkipCDTimeByBuildID(int InBuildID, float IncreaseRate);// 0x5758fd4
	bool ShouldEnableDoubleTouchMode();// 0x27ca244
	void SetPrebuildEnabled(bool CanBePlaced, bool IsVisible);// 0x5758f04
	void ServerStopPlaceBuilding();// 0x5758ea8
	void ServerStartPrePlaceBuilding();// 0x5758e4c
	void ServerPlaceBuildActor(int BuildingIndex, Vector BuildLocation, Rotator BuildRotation);// 0x5758cdc
	void S2C_SkipCDTimeByBuildID(int InBuildID, float IncreaseRate);// 0x255bed8
	void S2C_ResetBuildngCDByBuildID(int InBuildID, float InNewCDTime);// 0x257e228
	void ResetBuildngCDByBuildID(int InBuildID, float InNewCDTime);// 0x5758c20
	void ResetBuildList();// 0x5758c0c
	void PlaceBuildingWithIndex(int BuildIndex);// 0x4ba382c
	void PlaceBuildingAtLocation(int BuildIndex, out const Vector Loc, out const Rotator Rot);// 0x5758adc
	void PlaceBuilding();// 0x2451bc0
	void OverriveDeploymentTransform(out const Rotator rotIn, out const Vector locIn, out Rotator rotOut, out Vector locOut);// 0x5758938
	void OverrideBuildingMaxBuildDistance(float BuildingMaxDistance, bool SetAll, int BuildingID);// 0x575882c
	void OnTouchedConstructableBoxEnded(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x5758768
	void OnTouchedConstructableBox(byte FingerIndex, PrimitiveComponent* TouchedComponent);// 0x57586a4
	void OnTouchActorBuild(out const Vector2D ScreenPosition, PlayerController* Controller);// 0x57585d0
	void OnAsyncLoadingEffectFinished(ParticleSystem* EffectPtr, int BuildIndex);// 0x5758480
	void OnAsyncLoadingBuildingFinished(class Actor AcotrPtr, int BuildIndex);// 0x5758330
	bool IsInPreBuildingMode();// 0x5758308
	bool IsCanPlaceBuildingBP(int InBuildID);// 0x5758280
	bool IsCanPlaceBuilding(int InBuildID, byte _TYPE);// 0x25f56d4
	PlayerController* GetOwnerPlayerController();// 0x2577fa0
	float GetMaxDistance();// 0x5758250
	bool GetIsHasInitData();// 0x5758220
	int GetIndexByBuildingID(int BuildID);// 0x57581a0
	byte GetCurrentBuildType();// 0x5758178
	Actor* GetCDOByIndex(int Index);// 0x57580f8
	BuildingData[] GetBuildingList();// 0x5757fe8
	void EnableBuildingByID(int BuildID, bool bEnable);// 0x5757f24
	void DoSceenTouchBuild(int BuildIndex, out const Vector2D ScreenPostion, int PointerIndex, byte _TYPE, bool IsBegin, byte CustomBuildEvent);// 0x5757d30
	bool BuildAtWorldLoc(int BuildIndex, out const Transform tranx, Vector EndLocation, bool bUseTrace, byte BuildType);// 0x5757b10
	void AddBuildingData(BuildingData InData);// 0x5757980

--------------------------------
Class: SelectBuildActor.Actor.Object
	ParticleSystemComponent* SelectBuildEffect;//[Offset: 0x2e4, Size: 4]
	void SetSelectActorTemplate(ParticleSystem* Template);// 0x5759f8c
	void SetSelectActorPlacementEnable(bool PlacementEnable, bool IsVisible);// 0x5759ebc
	void SetIsPlacementEnable(bool Val);// 0x5759e40
	void OnParticleLoaded();// 0x234daf8
	bool IsCurrentPlacementEnable();// 0x5759e24
	bool GetIsPlacementEnable();// 0x5759e24

--------------------------------
Class: WorldGridData
	Vector GridSize;//[Offset: 0x0, Size: 12]

--------------------------------
Class: ConstructBot.Actor.Object
	AnimationAsset* StartupAnimation;//[Offset: 0x2e4, Size: 4]
	AnimationAsset* LoopAnimation;//[Offset: 0x2e8, Size: 4]
	AnimationAsset* ShutdownAnimation;//[Offset: 0x2ec, Size: 4]
	SkeletalMeshComponent* Mesh;//[Offset: 0x2f0, Size: 4]
	ParticleSystemComponent* GFX;//[Offset: 0x2f4, Size: 4]
	void ShutdownConstructBot();// 0x234daf8
	void RestartConstructBot();// 0x23444d8
	void OnLoopAnimation();// 0x2428514
	void OnEndingAnimation();// 0x2428500

--------------------------------
Class: BP_STRUCT_BuildingActorTable_type
	int BTID_0_3793920014AA44EA3F8AC81C094E2BF4;//[Offset: 0x0, Size: 4]
	int resourcenumber_1_6E94858029572FE007491E400595BD82;//[Offset: 0x4, Size: 4]
	FString Icon_2_4A928B8000C0CF663ABCCB64094EAB7E;//[Offset: 0x8, Size: 12]
	int ID_3_13C46C806EB23C1217AC50B203294E84;//[Offset: 0x14, Size: 4]
	int restoreresourcenumber_4_695E468011AD406E67743BD300C0A132;//[Offset: 0x18, Size: 4]
	int resourceID_5_703EA68056B5EB047B5EC0B70F854614;//[Offset: 0x1c, Size: 4]
	FString BuildingName_6_226D9500201382A22B469D4F0284ADD5;//[Offset: 0x20, Size: 12]
	int SortID_7_719B368018040ECC2FDAF80F0FD5B194;//[Offset: 0x2c, Size: 4]
	FString Tips_8_4BCBD14041A035173A8EC8CC09500353;//[Offset: 0x30, Size: 12]
	FString SupportedGameMode_9_52EDDA8005B096F03B4DDD31065D8B75;//[Offset: 0x3c, Size: 12]
	int MaxBuildDist_10_6EE473C0608F72AF353F108E01435054;//[Offset: 0x48, Size: 4]
	int ColdDownTime_11_6BB0738075B1199C5ED781B10814AFC5;//[Offset: 0x4c, Size: 4]
	int MaxCount_12_6ED335003D1A56A802F234F10BE12534;//[Offset: 0x50, Size: 4]
	int AutoRefreshCD_13_4E0365006E419CBA2E98B29700754024;//[Offset: 0x54, Size: 4]

--------------------------------
Class: BuildingConsumeData
	int BuildingID;//[Offset: 0x0, Size: 4]
	int ConsumeItemID;//[Offset: 0x4, Size: 4]
	int ConsumeItemCount;//[Offset: 0x8, Size: 4]
	int ReturnItemCount;//[Offset: 0xc, Size: 4]

--------------------------------
Class: BuildingData
	int BuildingID;//[Offset: 0x0, Size: 4]
	byte BuildingType;//[Offset: 0x4, Size: 1]
	SoftObjectPath BuildingActorClassPath;//[Offset: 0x8, Size: 24]
	byte[] BlockingChannels;//[Offset: 0x20, Size: 12]
	float MaxBuildDist;//[Offset: 0x2c, Size: 4]
	float CDInterval;//[Offset: 0x30, Size: 4]
	int MaxBuildCount;//[Offset: 0x34, Size: 4]
	bool bConstructable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bAutoRefreshCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]

--------------------------------
Class: ObserverCameraComponent.CustomCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x82c, Size: 4]
	bool bIsFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	Rotator FreeCameraRot;//[Offset: 0x834, Size: 12]
	Rotator FreeCameraDeltaRot;//[Offset: 0x840, Size: 12]
	bool bLockCameraRollWhenUseControllerRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool bForceUseCameraComponentRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	float FreeCameraOffsetRadius;//[Offset: 0x850, Size: 4]
	<byte,float> FreeCameraOffsetRadiusMap;//[Offset: 0x854, Size: 60]
	bool DrawDebugGraphics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	Vector DrawDebugGraphicsOffset;//[Offset: 0x894, Size: 12]
	float ProbeRadius;//[Offset: 0x8a0, Size: 4]
	float SpecialStatePitchLimitMin;//[Offset: 0x8a4, Size: 4]
	float SpecialStatePitchLimitMax;//[Offset: 0x8a8, Size: 4]
	float DefaultFieldOfView;//[Offset: 0x8ac, Size: 4]
	float WeaponOffsetDistance;//[Offset: 0x8b0, Size: 4]
	float helicopterFppStartYaw;//[Offset: 0x8b4, Size: 4]
	float helicopterFppawDelta;//[Offset: 0x8b8, Size: 4]
	bool IsinHelicopterFppState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc, Size: 1]
	enum PerspectiveMode;//[Offset: 0x8bd, Size: 1]
	void UpdateHelicopterFppCamera();// 0x254e46c
	bool UpdateHelicopterBlueprintCamera();// 0x46f6b154
	void SwitchPerspectiveMode(enum NewMode);// 0x254e3f4
	void SetFreeCameraDeltaRot(Rotator Rot);// 0x254e384
	bool SetFieldOfViewBlueprint(float InFieldOfView);// 0x46f6b154
	void SetFieldOfView(float InFieldOfView);// 0x254e304
	bool RefreshCameraWorldRotBlueprint();// 0x46f6b154
	void RefreshCameraWorldRot();// 0x23c8804
	void OnRespawned();// 0x254e2e8
	void OnRecycled();// 0x254e2cc
	bool NeedUpdateTransformViewTranslatedBP(SceneComponent* SceneComp);// 0x254e254
	bool IsFastForwardingBP(DemoNetDriver* dnd);// 0x254e1d4
	Rotator GetWorldFinalRot();// 0x254e18c
	Vector GetNonObstacleRelativeLoc(Vector StartRelativeLoc, Vector EndRelativeLoc, STExtraBaseCharacter* Owner);// 0x254e048
	bool GetCameraViewBlueprint(float DeltaTime, out MinimalViewInfo DesiredView);// 0x46f6b154
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x254deb0
	bool GetbFinalizeFastForwardBP(DemoNetDriver* dnd);// 0x254de34
	void ClearAdditiveOffsetBP();// 0x254de20
	void AddAdditiveOffsetBP(out const Transform Transform, float FOV);// 0x254dd00

--------------------------------
Class: FPPSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x324, Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x328, Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x32c, Size: 4]
	SpringArmModifierFPP* ModifierFPP;//[Offset: 0x330, Size: 4]
	class SpringArmModifier* ModifierFPPTemplate;//[Offset: 0x334, Size: 4]
	CameraOffsetData CurCameraData;//[Offset: 0x380, Size: 104]
	CameraOffsetData DefaultCameraData;//[Offset: 0x3e8, Size: 104]
	bool bViewTargetIsAnActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	PlayerController* CachedPC;//[Offset: 0x454, Size: 4]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x458, Size: 104]
	Transform InVehicleCameraTrans;//[Offset: 0x4c0, Size: 48]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x4f0, Size: 104]
	bool ShouldForceUseComponentRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	void SetFPPCameraDataEnable(enum CameraDataType, bool IsEnable);// 0x2498760
	void OnRespawned();// 0x2432308
	void OnRecycled();// 0x24322ec
	Rotator GetTargetRotation();// 0x2498710
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x24985a4
	void ClearCameraData();// 0x2498588

--------------------------------
Class: FPPComponent_C.BaseFPPComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x980, Size: 4]
	void ChangeScopeTPPGlassMat(MeshComponent* ScopeMeshComp, int ScopeID, byte WeaponSlot, bool NeedCheckAngled, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, BP_STRUCT_WeaponScopeGlassMat_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void GetScopeMatTableKey(STExtraPlayerController* PlayerController, STExtraShootWeapon* Weapon, enum ScopeType, out FString Key, int MatTableKey, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsScopeSpecialMatExist_exist, int CallFunc_IsScopeSpecialMatExist_MatTableKey, int CallFunc_GetScopeID_ReturnValue, SightMaterialConfig CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6);// 0x46f6b154
	void IsScopeSpecialMatExist(STExtraWeapon* Weapon, enum ScopeType, out bool exist, out int MatTableKey, int Temp_int_Loop_Counter_Variable, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, AvatarEntity* CallFunc_GetAvatarEntity_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, BattleItemHandleBase* CallFunc_GetLoadedHandle_ReturnValue, BackpackWeaponAttachHandle* K2Node_DynamicCast_AsBackpack_Weapon_Attach_Handle, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable2, WeaponAttachmentConfig CallFunc_GetAttachmentConfig_ReturnValue, ItemDefineID CallFunc_GetItemDefineID_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2);// 0x46f6b154
	void GetPawnBP(out BP_PlayerPawn_C* NewParam, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	float SwitchAngledSightConfigMaterial(bool forceSwitch, MeshComponent* ScopeMeshComp, int AngledSightID, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, interface class CallFunc_GetCurrentShootWeapon_self_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, FString CallFunc_GetScopeMatTableKey_Key, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, bool CallFunc_IsValid_ReturnValue3, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, int CallFunc_GetMaterialIndex_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, MaterialInterface* CallFunc_GetMaterial_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8);// 0x46f6b154
	float ShowAngledSightTPPMaterial(bool forceADSState, BP_PlayerPawn_C* CallFunc_GetPawnBP_NewParam, float CallFunc_SwitchAngledSightConfigMaterial_ReturnValue, interface class CallFunc_GetCurrentShootWeapon_self_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, byte CallFunc_GetWeaponSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, bool CallFunc_IsValid_ReturnValue2, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsAngledSight_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsServer_ReturnValue);// 0x46f6b154
	bool IsScopeInTimelinePlaying(BP_PlayerPawn_C* CallFunc_GetPawnBP_NewParam, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPlaying_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x46f6b154
	float SwitchSightConfigMaterial(STExtraShootWeapon* CurShootWeapon, MeshComponent* ScopeMeshComp, FString CallFunc_Concat_StrStr_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsServer_ReturnValue, interface class CallFunc_GetCurrentShootWeapon_self_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_GetDisplayName_ReturnValue, STExtraPlayerController* CallFunc_GetPlayerControllerSafety_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_GetScopeMatTableKey_Key, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, BP_STRUCT_WeaponScopeMaterial_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, LinearColor CallFunc_Conv_StringToColor_OutConvertedColor, bool CallFunc_Conv_StringToColor_OutIsValid, FName CallFunc_Conv_StringToName_ReturnValue2, MaterialInterface* CallFunc_GetMaterialFromString_ReturnValue, int CallFunc_GetMaterialIndex_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_GetDisplayName_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, bool CallFunc_IsValid_ReturnValue3);// 0x46f6b154
	float ShowReflectorSightTPPMaterial(bool forceADSState, BP_PlayerPawn_C* CallFunc_GetPawnBP_NewParam, BP_PlayerPawn_C* CallFunc_GetPawnBP_NewParam2, interface class CallFunc_GetCurrentShootWeapon_self_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, interface class CallFunc_GetCurrentShootWeapon_self2_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, byte CallFunc_GetWeaponSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetScopeID_ReturnValue, byte CallFunc_GetCurSightType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, MeshComponent* CallFunc_GetScopeAimCameraSecondScopeByType_ReturnValue, bool CallFunc_IsValid_ReturnValue2, float CallFunc_SwitchSightConfigMaterial_ReturnValue, bool CallFunc_IsAngledSight_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x46f6b154
	float GetScopeFov(STExtraShootWeapon* ShootWeapon, bool bIsAngled, float CallFunc_GetCurrentScopeZoomFov_MinFov, float CallFunc_GetCurrentScopeZoomFov_CurFov, int CallFunc_GetScopeID_ReturnValue, int CallFunc_GetWeaponID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, byte CallFunc_GetSightType_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue4, BP_STRUCT_WeaponScopeFOV_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue2, bool CallFunc_BooleanOR_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue5);// 0x46f6b154
	void SetTagCullingBP(bool IsUse, GameStateBase* CallFunc_GetGameState_ReturnValue, STExtraGameStateBase* K2Node_DynamicCast_AsSTExtra_Game_State_Base, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void requestResourceGuarantee(int InOrOut, byte loadMode, byte applyStatus, byte CallFunc_GetSightType_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue2, int CallFunc_Conv_ByteToInt_ReturnValue3, int K2Node_MathExpression_ReturnValue, FString CallFunc_GetPlatformName_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x46f6b154
	void ReloadEvent();// 0x46f6b154
	void SetTagCulling(bool IsUse);// 0x46f6b154
	void PlayScopeInTimeline();// 0x46f6b154
	void ScopeInEnd();// 0x46f6b154
	void ScopeOutEnd();// 0x46f6b154
	void StopScopeIn();// 0x46f6b154
	void AttachToSight();// 0x46f6b154
	void AttachTo(SceneComponent* NewParam);// 0x46f6b154
	void Detach(SceneComponent* NewParam);// 0x46f6b154
	void AttachToSightKeepTransform();// 0x46f6b154
	void LoadMaterialAsync(FString Path, MeshComponent* Mesh, int Index, byte Slot, bool NeedCheckAngled);// 0x46f6b154
	void OnMaterialLoaded(MaterialInterface* Material, MeshComponent* Mesh, int ElementIndex, byte Slot, bool NeedCheckAngled);// 0x46f6b154
	void ExecuteUbergraph_FPPComponent(int EntryPoint, BP_PlayerPawn_C* CallFunc_GetPawnBP_NewParam, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_Event_IsUse, interface class CallFunc_GetCurrentShootWeapon_self_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue, interface class CallFunc_GetCurrentShootWeapon_self2_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue2, bool CallFunc_IsEnableReloadADS_ReturnValue, SceneComponent* K2Node_CustomEvent_NewParam2, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue, SceneComponent* K2Node_CustomEvent_NewParam, bool CallFunc_IsValid_ReturnValue, FName CallFunc_GetScopeAimCameraSocketName_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, bool CallFunc_K2_AttachToComponent_ReturnValue, MeshComponent* CallFunc_GetScopeCameraAttachTarget_ReturnValue2, FName CallFunc_GetScopeAimCameraSocketName_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, BP_PlayerPawn_C* CallFunc_GetPawnBP_NewParam2, interface class CallFunc_GetCurrentShootWeapon_self3_CastInput, STExtraShootWeapon* CallFunc_GetCurrentShootWeapon_ReturnValue3, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue3, ShootWeaponEntity* CallFunc_GetShootWeaponEntityComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue4, FString CallFunc_Conv_FloatToString_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, BP_PlayerPawn_C* CallFunc_GetPawnBP_NewParam3, FString CallFunc_Concat_StrStr_ReturnValue3, SpringArmComponent* CallFunc_GetScopeSpringArm_ReturnValue, BP_PlayerPawn_C* CallFunc_GetPawnBP_NewParam4, FString K2Node_CustomEvent_Path, MeshComponent* K2Node_CustomEvent_Mesh2, int K2Node_CustomEvent_Index, byte K2Node_CustomEvent_Slot2, bool K2Node_CustomEvent_NeedCheckAngled2, SpringArmComponent* CallFunc_GetScopeSpringArm_ReturnValue2, bool CallFunc_K2_AttachToComponent_ReturnValue2, MaterialInterface* K2Node_CustomEvent_Material, MeshComponent* K2Node_CustomEvent_Mesh, int K2Node_CustomEvent_ElementIndex, byte K2Node_CustomEvent_Slot, bool K2Node_CustomEvent_NeedCheckAngled, BP_PlayerPawn_C* CallFunc_GetPawnBP_NewParam5, bool CallFunc_Not_PreBool_ReturnValue, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue, interface class CallFunc_GetWeaponBySlot_self_CastInput, STExtraWeapon* CallFunc_GetWeaponBySlot_ReturnValue, bool CallFunc_IsAngledSightBySlot_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue5, bool CallFunc_BooleanOR_ReturnValue, BP_PlayerPawn_C* CallFunc_GetPawnBP_NewParam6, STExtraWeapon* CallFunc_GetCurrentWeapon_ReturnValue2, interface class CallFunc_GetWeaponBySlot_self2_CastInput, STExtraWeapon* CallFunc_GetWeaponBySlot_ReturnValue2, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Not_PreBool_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue2);// 0x46f6b154
	float DeltaTime;//[Offset: 0x984, Size: 4]
	MaterialInstance* NewSightMaterial;//[Offset: 0x988, Size: 4]
	BP_PlayerPawn_C* PawnBP;//[Offset: 0x98c, Size: 4]
	FName SourceScopeAimCameraSocketName;//[Offset: 0x990, Size: 8]

--------------------------------
Class: BP_STRUCT_WeaponScopeGlassMat_type
	FString MaterialPath_0_5C2E3480396102E244C9A5850B9B5408;//[Offset: 0x0, Size: 12]
	FString ScopeID_1_0872E740109AD1491DFC990E05CF6BF4;//[Offset: 0xc, Size: 12]

--------------------------------
Class: BP_STRUCT_WeaponScopeMaterial_type
	FString ScopeGroupID_0_289E4F406E35B6A1337959050F04DD14;//[Offset: 0x0, Size: 12]
	FString ScopeMaterial_1_4BEFD48030177D8A6925FD700F8D124C;//[Offset: 0xc, Size: 12]
	FString ScopeMaterialSocket_3_63700EC07064DCC960E067A00E289394;//[Offset: 0x18, Size: 12]
	FString ScopeMaterialColor_4_1DC014403E6A0BAB129284A605F29442;//[Offset: 0x24, Size: 12]

--------------------------------
Class: BP_SwimController_C.PlayerSwimComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x140, Size: 4]
	void EnterWaterImp(Actor* CallFunc_GetOwner_ReturnValue, Actor* CallFunc_GetWaterObject_ReturnValue, BP_PlayerPawn_C* K2Node_DynamicCast_AsBP_Player_Pawn, bool K2Node_DynamicCast_bSuccess, WaterSwimObject_C* K2Node_DynamicCast_AsWater_Swim_Object, bool K2Node_DynamicCast_bSuccess2, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Controller* CallFunc_GetController_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, BP_STExtraPlayerController_C* K2Node_DynamicCast_AsBP_STExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess3, Vector CallFunc_K2_GetComponentLocation_ReturnValue, CameraAnimInst* CallFunc_PlayCameraAnim_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x46f6b154
	void EnterWater_BluePrint();// 0x46f6b154
	void ExecuteUbergraph_BP_SwimController(int EntryPoint);// 0x46f6b154

--------------------------------
Class: CharacterAnimList_Base_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: CameraSettingComponent_C.ActorComponent.Object
	void SaveCurCameraSetting(SpringArmComponent* SprintArm);// 0x46f6b154
	void LerpCameraSettings(float LerpAlpha, STR_CameraSetting CameraSettings, SpringArmComponent* SpringArm, SpringArmComponent* TargetSpringArm, Vector TargetSocketOffset, float TargetLagSpeed, float TargetSpringArmLength, float Alpha, Vector CallFunc_VLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue2);// 0x46f6b154
	float Current Target Arm Length;//[Offset: 0xd0, Size: 4]
	float CurrentCameraLagSpeed;//[Offset: 0xd4, Size: 4]
	Vector CurrentSocketOffset;//[Offset: 0xd8, Size: 12]

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x250, Size: 1328]
	float Priority;//[Offset: 0x780, Size: 4]
	float BlendRadius;//[Offset: 0x784, Size: 4]
	float BlendWeight;//[Offset: 0x788, Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78c, Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78c, Size: 1]
	void AddOrUpdateBlendable(interface class InBlendableObject, float InWeight);// 0x4a3cda0

--------------------------------
Class: BlockOceanAndRiverVoice_C.WaterSoundVolume.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	BoxComponent* Box;//[Offset: 0x2f0, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2f4, Size: 4]

--------------------------------
Class: RiverZone_C.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	BoxComponent* Box;//[Offset: 0x2e8, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2ec, Size: 4]

--------------------------------
Class: RiverDetectZone_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e8, Size: 4]
	void CalcRTPCValue(out float OutValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_FindLocationClosestToWorldLocation_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x46f6b154
	void StopRiverVoice();// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	void ReceiveTick(float DeltaSeconds);// 0x46f6b154
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x46f6b154
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x46f6b154
	void ExecuteUbergraph_RiverDetectZone(int EntryPoint, float CallFunc_CalcRTPCValue_OutValue, float K2Node_Event_DeltaSeconds, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent2, Actor* K2Node_ComponentBoundEvent_OtherActor2, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp2, int K2Node_ComponentBoundEvent_OtherBodyIndex2, bool K2Node_ComponentBoundEvent_bFromSweep, HitResult K2Node_ComponentBoundEvent_SweepResult, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool CallFunc_IsLocallyControlled_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character2, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_IsLocallyControlled_ReturnValue2, bool CallFunc_IsActorTickEnabled_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, float CallFunc_CalcRTPCValue_OutValue2);// 0x46f6b154
	AkComponent* Ak;//[Offset: 0x2ec, Size: 4]
	SplineComponent* Spline;//[Offset: 0x2f0, Size: 4]
	BoxComponent* Box;//[Offset: 0x2f4, Size: 4]
	SceneComponent* Scene;//[Offset: 0x2f8, Size: 4]
	float MaxHearableDistance;//[Offset: 0x2fc, Size: 4]
	float CurRTPCValue;//[Offset: 0x300, Size: 4]

--------------------------------
Class: Baltic_Main_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e8, Size: 4]
	void ReceiveBeginPlay();// 0x46f6b154
	void ExecuteUbergraph_Baltic_Main(int EntryPoint, int CallFunc_GetCVarConsoleValue_ReturnValue, bool CallFunc_CreateMyLandscape_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_CreateMyLandscape_ReturnValue2);// 0x46f6b154
	FString MatPath;//[Offset: 0x2ec, Size: 12]
	FString GeoPath;//[Offset: 0x2f8, Size: 12]
	FString MatPath_Sim;//[Offset: 0x304, Size: 12]

--------------------------------
Class: Water_C.OceanManager.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3a8, Size: 4]

--------------------------------
Class: SegmentOceanWater_C.SegmentOceanManager.OceanManager.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	SceneComponent* DefaultSceneRoot;//[Offset: 0x470, Size: 4]

--------------------------------
Class: SegmentOceanManager.OceanManager.Actor.Object
	WaterBoxComponent*[] CandidateWaterBoxes;//[Offset: 0x3a8, Size: 12]
	<WaterBoxComponent*,SegmentWaterBox> SegmentdWaterBoxes;//[Offset: 0x3b4, Size: 60]
	float FrequencyScale;//[Offset: 0x464, Size: 4]
	void RemoveBoxComponent(WaterBoxComponent* InBoxComponent);// 0x54d5b74
	void AddBoxComponent(WaterBoxComponent* InBoxComponent, SplineComponent* InDirectionSpline);// 0x54d5ab8

--------------------------------
Class: SegmentWaterBox
	Box WaterBox;//[Offset: 0x0, Size: 28]
	Transform WaterTransform;//[Offset: 0x20, Size: 48]
	Vector WaterBoxExtend;//[Offset: 0x50, Size: 12]
	float WaterBoxAcceptZValue;//[Offset: 0x5c, Size: 4]
	Vector2D Direction;//[Offset: 0x60, Size: 8]
	float SpeedValue;//[Offset: 0x68, Size: 4]
	bool UseSplineZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	float WaveForceMultiplier;//[Offset: 0x70, Size: 4]
	TrippleWaveParameter[] WaveClusters;//[Offset: 0x74, Size: 12]
	SplineComponent* DirectionSpline;//[Offset: 0x80, Size: 4]

--------------------------------
Class: BP_STExtraPlayerController_SumummerDay_C.BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	FString GetLuaModule();// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154

--------------------------------
Class: BP_PlayerCameraManager_C.STPlayerCameraManager.PlayerCameraManager.Actor.Object

--------------------------------
Class: STPlayerCameraManager.PlayerCameraManager.Actor.Object
	class Actor* ScreenAppearanceClass;//[Offset: 0x1ac0, Size: 40]
	Actor* ScreenAppearanceActor;//[Offset: 0x1ae8, Size: 4]
	class Actor* FutureTechCameraClass;//[Offset: 0x1af0, Size: 40]
	Actor* FutureTechCameraActor;//[Offset: 0x1b18, Size: 4]
	float InVehicleFPPViewPitchLimitMin;//[Offset: 0x1b1c, Size: 4]
	float InVehicleFPPViewYawLimit;//[Offset: 0x1b20, Size: 4]
	float InVehicleNarrowSeatGrenadesYawLimit;//[Offset: 0x1b24, Size: 4]
	void DestroyFutureTechCamera();// 0x2712410
	Actor* CreateFutureTechCamera();// 0x27123e8

--------------------------------
Class: BP_BattleRoyaleHUD_C.SurviveHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x478, Size: 4]
	LinearColor GetPlayerNameColorByTeamID(int TeamID, Color CallFunc_GetPlayerNameColorByTeamID_PlayerNameColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x46f6b154
	LinearColor GetColorByTeamID(int TeamID, Color CallFunc_GetPlayerColorByTeamID_PlayerColor, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void HitFeedBackChanged(bool BoolValue);// 0x46f6b154
	void ExecuteUbergraph_BP_BattleRoyaleHUD(int EntryPoint, bool K2Node_CustomEvent_BoolValue, delegate K2Node_CreateDelegate_OutputDelegate, GameBackendHUD* CallFunc_GetInstance_ReturnValue, GameFrontendHUD* CallFunc_GetFirstGameFrontendHUD_ReturnValue, SaveGame* CallFunc_GetUserSettings_ReturnValue, SettingConfig_C* K2Node_DynamicCast_AsSetting_Config, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	SceneComponent* DefaultSceneRoot;//[Offset: 0x47c, Size: 4]

--------------------------------
Class: Skill_Punch_Fist_bp_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	STBuffAction_CameraAnim* STBuffAction_CameraAnim4;//[Offset: 0x4f0, Size: 4]
	STBuffAction_CameraAnim* STBuffAction_CameraAnim3;//[Offset: 0x4f4, Size: 4]
	STBuffAction_CameraAnim* STBuffAction_CameraAnim2;//[Offset: 0x4f8, Size: 4]
	STBuffAction_CameraAnim* STBuffAction_CameraAnim1;//[Offset: 0x4fc, Size: 4]
	STBuffAction_CameraAnim* STBuffAction_CameraAnim;//[Offset: 0x500, Size: 4]
	UAESkillPhase* UAESkillPhase3;//[Offset: 0x504, Size: 4]
	UAESkillPhase* UAESkillPhase2;//[Offset: 0x508, Size: 4]
	UTSkillPhase* UTSkillPhase;//[Offset: 0x50c, Size: 4]
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x510, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x514, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x518, Size: 4]

--------------------------------
Class: UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4dc, Size: 1]
	enum PawnState;//[Offset: 0x4dd, Size: 1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4de, Size: 1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4df, Size: 1]
	int CastFailTipsID;//[Offset: 0x4e0, Size: 4]
	bool NeedLockTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e5, Size: 1]
	void DelayLeaveStateForMelee(UTSkillManagerComponent* SkillManagerComponent);// 0x275cc20

--------------------------------
Class: UAEBaseSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x4c4, Size: 12]
	delegate OnSkillCustomStrEvent;//[Offset: 0x4d0, Size: 12]
	bool OnEvent(UTSkillManagerComponent* Comp, byte TheEventType, int PhaseIndex);// 0x27560f4

--------------------------------
Class: STBuffAction_CameraAnim.STExtraBuffAction.UAESkillActionBP.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	class CameraShake* CameraShakeClass;//[Offset: 0x120, Size: 4]
	float CameraShakeScale;//[Offset: 0x124, Size: 4]
	bool bImmediatelyStopCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	byte CameraShakePlaySpace;//[Offset: 0x129, Size: 1]
	Rotator CameraShakeUserPlaySpaceRot;//[Offset: 0x12c, Size: 12]

--------------------------------
Class: STExtraBuffAction.UAESkillActionBP.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	STBaseBuffSystemComponent* GetOwnerBuffSystem();// 0x264e400
	bool GetOwnerBuffInstance(out BuffInstancedItem OutOwnerBuffInstance);// 0x264e26c
	STBaseBuff* GetOwnerBuff();// 0x264e244
	void FireEvent(out STBaseBuffEventContext Context);// 0x264e034

--------------------------------
Class: UAESkillActionBP.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	void UpdateAction_Internal(float DeltaSeconds);// 0x2774430
	void UndoAction_Internal();// 0x27634bc
	void Reset_Internal();// 0x2774414
	bool RealDoAction_Internal();// 0x276348c
	void PreCloseSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x2500abc
	void PostInitSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x276a9f0
	void PostActiveSkill(UTSkillManagerComponent* SkillManagerComponent, UTSkill* CurOwnerSkill);// 0x257df5c

--------------------------------
Class: UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UAESkillPicker* SkillTargetPicker;//[Offset: 0x11c, Size: 4]

--------------------------------
Class: UAESkillPicker.UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAESkillPhase.UTSkillPhase.ActorComponent.Object

--------------------------------
Class: Skill_Melee_Machete_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillPhase* UAESkillPhase3;//[Offset: 0x4f0, Size: 4]
	UAESkillPhase* UAESkillPhase2;//[Offset: 0x4f4, Size: 4]
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4f8, Size: 4]
	UTSkillPhase* UTSkillPhase;//[Offset: 0x4fc, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x500, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x504, Size: 4]

--------------------------------
Class: Skill_Melee_Cowbar_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillPhase* UAESkillPhase4;//[Offset: 0x4f0, Size: 4]
	UAESkillPhase* UAESkillPhase3;//[Offset: 0x4f4, Size: 4]
	UAESkillPhase* UAESkillPhase2;//[Offset: 0x4f8, Size: 4]
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4fc, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x500, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x504, Size: 4]

--------------------------------
Class: Skill_Melee_Pan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillPhase* UAESkillPhase4;//[Offset: 0x4f0, Size: 4]
	UAESkillPhase* UAESkillPhase3;//[Offset: 0x4f4, Size: 4]
	UAESkillPhase* UAESkillPhase2;//[Offset: 0x4f8, Size: 4]
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4fc, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x500, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x504, Size: 4]

--------------------------------
Class: Skill_Melee_Sickle_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillPhase* UAESkillPhase4;//[Offset: 0x4f0, Size: 4]
	UAESkillPhase* UAESkillPhase3;//[Offset: 0x4f4, Size: 4]
	UAESkillPhase* UAESkillPhase2;//[Offset: 0x4f8, Size: 4]
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4fc, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x500, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x504, Size: 4]

--------------------------------
Class: Skill_AdrenalineSyringe_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4f0, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x4f4, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4f8, Size: 4]

--------------------------------
Class: Skill_Bandage_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UTSkillEventEffectMapForEditor* UTSkillEventEffectMapForEditor3;//[Offset: 0x4f0, Size: 4]
	UTSkillEventEffectMapForEditor* UTSkillEventEffectMapForEditor2;//[Offset: 0x4f4, Size: 4]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor1;//[Offset: 0x4f8, Size: 4]
	UTSkillEventEffectMapForEditor* UTSkillEventEffectMapForEditor1;//[Offset: 0x4fc, Size: 4]
	UAESkillEventEffectMapForEditor* UAESkillEventEffectMapForEditor;//[Offset: 0x500, Size: 4]
	UTSkillEventEffectMapForEditor* UTSkillEventEffectMapForEditor;//[Offset: 0x504, Size: 4]
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x508, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x50c, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x510, Size: 4]

--------------------------------
Class: Skill_EnergyDrink_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillAction_ActionWithConditions* UAESkillAction_ActionWithConditions;//[Offset: 0x4f0, Size: 4]
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4f4, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x4f8, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4fc, Size: 4]

--------------------------------
Class: UAESkillAction_ActionWithConditions.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UAESkillCondition*[] Conditions;//[Offset: 0x120, Size: 12]
	UTSkillAction* Action;//[Offset: 0x12c, Size: 4]
	UTSkillAction* FalseAction;//[Offset: 0x130, Size: 4]

--------------------------------
Class: UAESkillCondition.UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object

--------------------------------
Class: UAEBaseSkillCondition.UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	Pawn* OwnerPawnForBuff;//[Offset: 0x10c, Size: 4]
	STBaseBuffSystemComponent* GetOwnerBuffSystem();// 0x2884500
	STBaseBuff* GetOwnerBuff();// 0x28844d8

--------------------------------
Class: Skill_FirstAidKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4f0, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x4f4, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4f8, Size: 4]

--------------------------------
Class: Skill_MedKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4f0, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x4f4, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4f8, Size: 4]

--------------------------------
Class: Skill_Painkiller_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4f0, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x4f4, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4f8, Size: 4]

--------------------------------
Class: Skill_ParachuteLand_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillAction_PlayMontage* UAESkillAction_PlayMontage1;//[Offset: 0x4f0, Size: 4]
	UAESkillAction_PlayMontage* UAESkillAction_PlayMontage;//[Offset: 0x4f4, Size: 4]
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4f8, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x4fc, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x500, Size: 4]

--------------------------------
Class: UAESkillAction_PlayMontage.STExtraBuffAction.UAESkillActionBP.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	AnimMontage* AnimMontage;//[Offset: 0x120, Size: 4]
	bool StopPrevMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 1]
	bool bResetStopAnim;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 1]
	bool bUndoStopAnim;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 1]
	bool bOnlySimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x124, Size: 1]
	FName StartSectionName;//[Offset: 0x128, Size: 8]
	AnimMontage*[] AnimCacheList;//[Offset: 0x130, Size: 12]

--------------------------------
Class: SuitSkinReplace_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	UAESkillAction_SubAction* UAESkillAction_SubAction;//[Offset: 0x4f0, Size: 4]
	UAESkillPhase* UAESkillPhase1;//[Offset: 0x4f4, Size: 4]
	UAESkillPhase* UAESkillPhase;//[Offset: 0x4f8, Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4fc, Size: 4]

--------------------------------
Class: UAESkillAction_SubAction.UAESkillAction.UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UAESkillSubAction* SubAction;//[Offset: 0x120, Size: 4]

--------------------------------
Class: UAESkillSubAction.Object
	void UpdateSubAction(float DeltaSeconds);// 0x23f3188
	void UndoSubAction(Actor* OwnerPawn);// 0x2374df4
	bool DoSubAction(Actor* OwnerPawn);// 0x271bc78

--------------------------------
Class: BP_PlayerState_CG14_C.BP_PlayerState_C.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	FString GetLuaModule();// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154

--------------------------------
Class: BP_PlayerState_C.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	SceneComponent* DefaultSceneRoot;//[Offset: 0x1000, Size: 4]

--------------------------------
Class: BP_CharmPlayerDisplayDirector_C.SceneDisplayDirectorBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x410, Size: 4]
	void RefreshItemList(CharmAvatarPoseComponent_BP_C* PoseComp, out int[] ItemList, FString TargerName, out int[] OnlyWearList, out int[] RetItemList, out int[] RetOnlyWearList, int[] RetWears, int[] RetItems, bool WithNoDownloadAvatar, bool CallFunc_NotEqual_StrStr_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable2, int Temp_int_Loop_Counter_Variable2, int CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue2, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsPakDownloaded_ReturnValue, bool CallFunc_IsAvatarItemFiltered_ReturnValue, int Temp_int_Array_Index_Variable3, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_HasAuthority_ReturnValue, int Temp_int_Loop_Counter_Variable3, int CallFunc_Add_IntInt_ReturnValue3, enum CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Conv_ByteToInt_ReturnValue, STExtraBaseCharacter*[] CallFunc_GetAllPlayerPawnsOfClass_OutPawns, STExtraBaseCharacter* CallFunc_Array_Get_Item3, int CallFunc_Array_Length_ReturnValue3, CharacterAvatarComponent* CallFunc_getAvatarComponent_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue3, AvatarEntity* CallFunc_GetAvatarEntity_ReturnValue, bool CallFunc_IsValid_ReturnValue2, ItemDefineID CallFunc_GetDefineID_ReturnValue, FString CallFunc_GetPlayerNameSafety_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, int CallFunc_Array_Add_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, int CallFunc_Array_Add_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue3);// 0x46f6b154
	void CheckCopy(CharmAvatarPoseComponent_BP_C* PoseComp, out int[] ItemList, FString TargerName, out bool Success, bool WithNoDownloadAvatar, bool ExistHead, bool UseLod, int Temp_int_Loop_Counter_Variable, bool CallFunc_NotEqual_StrStr_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Get_Item, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsPakDownloaded_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsAvatarItemFiltered_ReturnValue, bool CallFunc_HasAuthority_ReturnValue, STExtraBaseCharacter*[] CallFunc_GetAllPlayerPawnsOfClass_OutPawns, int CallFunc_Array_Length_ReturnValue2, int Temp_int_Array_Index_Variable2, STExtraBaseCharacter* CallFunc_Array_Get_Item2, CharacterAvatarComponent* CallFunc_getAvatarComponent_ReturnValue, FString CallFunc_GetPlayerNameSafety_ReturnValue, int CallFunc_GetAvatarGender_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, AvatarEntity* CallFunc_GetAvatarEntity_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, int Temp_int_Loop_Counter_Variable2, bool CallFunc_Less_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2);// 0x46f6b154
	void ShouldUpdateWingMan(int WingManID, FString WingManName, out bool Result, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x46f6b154
	void CheckAddHead(CharmAvatarPoseComponent_BP_C* PoseComp, out int[] ItemList, int PlayerGender, bool ExistHead, bool UseLod, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int Temp_int_Array_Index_Variable, int CallFunc_Array_Get_Item, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, BackpackAvatarHandle* K2Node_DynamicCast_AsBackpack_Avatar_Handle, bool K2Node_DynamicCast_bSuccess, GameInstance* CallFunc_GetGameInstance_ReturnValue, STExtraGameInstance* K2Node_DynamicCast_AsSTExtra_Game_Instance, bool K2Node_DynamicCast_bSuccess2, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int CallFunc_GetDeviceLevel_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x46f6b154
	void SpawnSpecialAvatarParticles(MeshComponent* AttachParent, AvatarDisplayPoseComponent* AvatarComp, int ItemID, out bool IsSuceess, Object* RightEffectObj, Object* EffectObj, Vector EffectLoc, CharmAvatarPoseComponent_BP_C* K2Node_DynamicCast_AsCharm_Avatar_Pose_Component_BP, bool K2Node_DynamicCast_bSuccess, CharmAvatarPoseComponent_BP_C* K2Node_DynamicCast_AsCharm_Avatar_Pose_Component_BP2, bool K2Node_DynamicCast_bSuccess2, Vector CallFunc_K2_GetComponentScale_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, SoftObjectPath CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess3, Object* CallFunc_GetAssetByAssetReference_ReturnValue, int Temp_int_Variable2, SoftObjectPath CallFunc_Map_Find_Value2, bool CallFunc_Map_Find_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FString CallFunc_BreakSoftObjectPath_PathString, FString CallFunc_Concat_StrStr_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString Temp_string_Variable, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString Temp_string_Variable2, FString K2Node_Select_Default, FName CallFunc_Conv_StringToName_ReturnValue, SceneComponent* CallFunc_GetAvatarParticleAttachComp_AttachComp, Vector CallFunc_GetSocketLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue2, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, int CallFunc_Array_Add_ReturnValue2);// 0x46f6b154
	void GetAvatarParticleAttachComp(FName SocketName, AvatarDisplayPoseComponent* Parent, out SceneComponent* AttachComp, SceneComponent*[] CallFunc_GetChildrenComponents_Children, bool CallFunc_EqualEqual_NameName_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_EqualEqual_NameName_ReturnValue2, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable2, SceneComponent* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_ComponentHasTag_ReturnValue, int CallFunc_Add_IntInt_ReturnValue2, int Temp_int_Array_Index_Variable2, SceneComponent* CallFunc_Array_Get_Item2, bool CallFunc_ComponentHasTag_ReturnValue2);// 0x46f6b154
	void GetAvatarParticleOffset(FName SocketName, Vector Location, Vector Scale, out Vector Offset, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_EqualEqual_NameName_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue2);// 0x46f6b154
	void SpawnAvatarParticles(out ParticleSet[] ParticleSets, MeshComponent* AttachParent, AvatarDisplayPoseComponent* AvatarComp, Vector EffectLoc, int Temp_int_Array_Index_Variable, CharmAvatarPoseComponent_BP_C* K2Node_DynamicCast_AsCharm_Avatar_Pose_Component_BP, bool K2Node_DynamicCast_bSuccess, ParticleSet CallFunc_Array_Get_Item, Vector CallFunc_GetSocketLocation_ReturnValue, SceneComponent* CallFunc_GetAvatarParticleAttachComp_AttachComp, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_NameToString_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, CharmAvatarPoseComponent_BP_C* K2Node_DynamicCast_AsCharm_Avatar_Pose_Component_BP2, bool K2Node_DynamicCast_bSuccess2, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue2, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, Object* CallFunc_GetAssetByAssetReference_ReturnValue, ParticleSystem* K2Node_DynamicCast_AsParticle_System, bool K2Node_DynamicCast_bSuccess3, Vector CallFunc_K2_GetComponentScale_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, int CallFunc_Array_Add_ReturnValue2);// 0x46f6b154
	bool IsAvatarItemFiltered(int ItemID, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsAvatarItemFiltered_ReturnValue, int CallFunc_GetTableData_Int_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x46f6b154
	Vector GetPlayerInfoWidgetLocation(int ActorIndex, bool CallFunc_Array_IsValidIndex_ReturnValue, AvatarDisplayPoseComponent* CallFunc_Array_Get_Item, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x46f6b154
	void InitializeWidgetVisibility(int Temp_int_Variable, StaticMeshComponent* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, WidgetComponent* CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue2, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_Array_IsValidIndex_ReturnValue2);// 0x46f6b154
	void AddNewEffectInstance(ParticleSystemComponent* NewEffectIns, int Index, bool CallFunc_Array_IsValidIndex_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void DelaySetVisibility(bool CallFunc_IsEnableCharmPlayerShowTest_ReturnValue, int Temp_int_Variable, CustomActorIndicatorWidget* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsValid_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item2, bool CallFunc_Array_IsValidIndex_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue, AvatarDisplayPoseComponent* CallFunc_Array_Get_Item3, bool CallFunc_Array_IsValidIndex_ReturnValue3, bool CallFunc_IsValid_ReturnValue2, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2);// 0x46f6b154
	bool NeedEnableDisplayActor(bool CallFunc_IsEnableCharmPlayerShowTest_ReturnValue);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	void OnLoaded_83694D344D99A11E2F1120882D97C00D(Object* Loaded);// 0x46f6b154
	void OnLoaded_08C843D5437E775F7140EBBE699EDA30(Object* Loaded);// 0x46f6b154
	void OnLoaded_526F062D433EC66B458B3D8428F4E812(Object* Loaded);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void OnPreRefreshAvatarInfoBlueprint(int ActorIndex, bool isSelf, bool IsTeammate, out const PlayerDetailInfo DetailInfo, AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, bool IsAlreadyDisplaying);// 0x46f6b154
	void OnCountDownChanged(int CountDown, int TotalCountDown);// 0x46f6b154
	void SpawnSwitchEffect(AvatarDisplayPoseComponent* TargetComp, int ActorIndex);// 0x46f6b154
	void OnPostRefreshAvatarInfoBlueprint(AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, out const PlayerDetailInfo DetailInfo);// 0x46f6b154
	void OnRefreshAvatarInfoBlueprint(AvatarDisplayPoseComponent* DisplayComp, WidgetComponent* WidgetComp, out const PlayerDetailInfo DetailInfo, out const int[] OnlyWearList);// 0x46f6b154
	void OnDestroyDisplayActorBlueprint();// 0x46f6b154
	void TakeOffOldWear(out const int[] NewWearList, CharmAvatarPoseComponent_BP_C* PoseComp);// 0x46f6b154
	void UpdateWingMan(int WingManID, FString WingManName);// 0x46f6b154
	void UpdateWingManMaterial();// 0x46f6b154
	void OnDrawTextToRenderTargetFinish(WidgetToTextureRenderTarget2DManager* Sender, DrawTextToTextureRenderTarget2DParams Params);// 0x46f6b154
	void UpdateWingManTransform(int WingManID);// 0x46f6b154
	void ExecuteUbergraph_BP_CharmPlayerDisplayDirector(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_Event_CountDown, int K2Node_Event_TotalCountDown, AvatarDisplayPoseComponent* K2Node_CustomEvent_TargetComp, int K2Node_CustomEvent_ActorIndex, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue2, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate2, PlayerController* CallFunc_GetPlayerController_ReturnValue, STExtraPlayerController* K2Node_DynamicCast_AsSTExtra_Player_Controller, bool K2Node_DynamicCast_bSuccess, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_BooleanAND_ReturnValue2, int CallFunc_Array_Length_ReturnValue, int K2Node_Event_ActorIndex, bool K2Node_Event_IsSelf, bool K2Node_Event_IsTeammate, PlayerDetailInfo K2Node_Event_DetailInfo3, AvatarDisplayPoseComponent* K2Node_Event_DisplayComp3, WidgetComponent* K2Node_Event_WidgetComp3, bool K2Node_Event_IsAlreadyDisplaying, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_IsValid_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue4, bool CallFunc_EqualEqual_IntInt_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue2, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue2, int Temp_int_Loop_Counter_Variable2, BP_CG011_Relizhi_C* K2Node_DynamicCast_AsBP_CG011_Relizhi, bool K2Node_DynamicCast_bSuccess2, int CallFunc_Add_IntInt_ReturnValue3, AnimMontage* CallFunc_Array_Get_Item, int CallFunc_PostAkEvent_ReturnValue, AvatarDisplayPoseComponent* K2Node_Event_DisplayComp2, WidgetComponent* K2Node_Event_WidgetComp2, PlayerDetailInfo K2Node_Event_DetailInfo2, int CallFunc_Percent_IntInt_ReturnValue2, UserWidget* CallFunc_GetUserWidgetObject_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4, CharmAvatarPoseComponent_BP_C* K2Node_DynamicCast_AsCharm_Avatar_Pose_Component_BP, bool K2Node_DynamicCast_bSuccess3, bool CallFunc_IsValid_ReturnValue5, AvatarDisplayPoseComponent* K2Node_Event_DisplayComp, WidgetComponent* K2Node_Event_WidgetComp, PlayerDetailInfo K2Node_Event_DetailInfo, int[] K2Node_Event_OnlyWearList, bool CallFunc_EqualEqual_IntInt_ReturnValue6, CharmAvatarPoseComponent_BP_C* K2Node_DynamicCast_AsCharm_Avatar_Pose_Component_BP2, bool K2Node_DynamicCast_bSuccess4, int Temp_int_Array_Index_Variable2, int[] CallFunc_RefreshItemList_RetItemList, int[] CallFunc_RefreshItemList_RetOnlyWearList, int CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue3, bool CallFunc_SpawnSpecialAvatarParticles_IsSuceess, bool CallFunc_Less_IntInt_ReturnValue3, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, bool CallFunc_PutOnEquipmentByResID_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, BattleItemHandle_AvatarBP_C* K2Node_DynamicCast_AsBattle_Item_Handle_Avatar_BP, bool K2Node_DynamicCast_bSuccess5, bool CallFunc_IsAvatarItemFiltered_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, Object* K2Node_CustomEvent_Loaded3, int Temp_int_Array_Index_Variable3, int CallFunc_Array_Length_ReturnValue4, AvatarDisplayPoseComponent* CallFunc_Array_Get_Item3, CharmAvatarPoseComponent_BP_C* K2Node_DynamicCast_AsCharm_Avatar_Pose_Component_BP3, bool K2Node_DynamicCast_bSuccess6, const int[] K2Node_CustomEvent_NewWearList, CharmAvatarPoseComponent_BP_C* K2Node_CustomEvent_PoseComp, ParticleSystemComponent* CallFunc_Array_Get_Item4, int CallFunc_Array_Length_ReturnValue5, bool CallFunc_Less_IntInt_ReturnValue4, int[] CallFunc_GetTakeOffAvatarList_TakeOffList, int CallFunc_Array_Length_ReturnValue6, Object* Temp_object_Variable, StaticMesh* K2Node_DynamicCast_AsStatic_Mesh, bool K2Node_DynamicCast_bSuccess7, WidgetComponent*[] K2Node_MakeArray_Array, AvatarDisplayPoseComponent*[] K2Node_MakeArray_Array2, int K2Node_CustomEvent_WingManID2, FString K2Node_CustomEvent_WingManName, bool CallFunc_ShouldUpdateWingMan_Result, FString CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsValid_ReturnValue6, delegate K2Node_CreateDelegate_OutputDelegate3, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue2, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, BackpackWingPlaneHandle* K2Node_DynamicCast_AsBackpack_Wing_Plane_Handle, bool K2Node_DynamicCast_bSuccess8, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, StaticMesh* CallFunc_Array_Get_Item5, int CallFunc_Array_Length_ReturnValue7, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable3, bool CallFunc_IsValid_ReturnValue7, bool CallFunc_Less_IntInt_ReturnValue5, int CallFunc_Add_IntInt_ReturnValue4, WidgetToTextureRenderTarget2DManager* K2Node_CustomEvent_Sender, DrawTextToTextureRenderTarget2DParams K2Node_CustomEvent_Params, TextureRenderTarget2D* CallFunc_CreateRenderTarget2DExt_ReturnValue, bool CallFunc_IsValid_ReturnValue8, bool CallFunc_IsValid_ReturnValue9, int Temp_int_Array_Index_Variable4, int CallFunc_Array_Get_Item6, bool CallFunc_Array_RemoveItem_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, bool CallFunc_PutOffEquimentByResID_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FText CallFunc_Conv_StringToText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate4, bool CallFunc_IsValid_ReturnValue10, bool CallFunc_IsValid_ReturnValue11, int K2Node_CustomEvent_WingManID, int Temp_int_Loop_Counter_Variable4, FString CallFunc_Conv_IntToString_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue8, bool CallFunc_Less_IntInt_ReturnValue6, int CallFunc_Add_IntInt_ReturnValue5, Transform CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult, HitResult CallFunc_K2_SetRelativeTransform_SweepHitResult2, Object* Temp_object_Variable2, MaterialInterface* K2Node_DynamicCast_AsMaterial_Interface, bool K2Node_DynamicCast_bSuccess9, delegate K2Node_CreateDelegate_OutputDelegate5, bool CallFunc_HasAuthority_ReturnValue, bool CallFunc_IsValid_ReturnValue12, MaterialInterface* CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue, DrawTextToTextureRenderTarget2DParams K2Node_MakeStruct_DrawTextToTextureRenderTarget2DParams, bool CallFunc_IsValid_ReturnValue13, FString CallFunc_GetDisplayName_ReturnValue, Object* K2Node_CustomEvent_Loaded, FString CallFunc_Concat_StrStr_ReturnValue9, Object* Temp_object_Variable3, AnimMontage* CallFunc_Array_Get_Item7, StaticMesh* K2Node_DynamicCast_AsStatic_Mesh2, bool K2Node_DynamicCast_bSuccess10, bool CallFunc_IsValid_ReturnValue14, bool CallFunc_SetStaticMesh_ReturnValue, bool CallFunc_IsValid_ReturnValue15, bool CallFunc_SetStaticMesh_ReturnValue2, Object* K2Node_CustomEvent_Loaded2);// 0x46f6b154
	BoxComponent* Box11;//[Offset: 0x414, Size: 4]
	BoxComponent* Box10;//[Offset: 0x418, Size: 4]
	BoxComponent* Box9;//[Offset: 0x41c, Size: 4]
	BoxComponent* Box8;//[Offset: 0x420, Size: 4]
	BoxComponent* Box7;//[Offset: 0x424, Size: 4]
	BoxComponent* Box6;//[Offset: 0x428, Size: 4]
	BoxComponent* Box5;//[Offset: 0x42c, Size: 4]
	BoxComponent* Box4;//[Offset: 0x430, Size: 4]
	BoxComponent* Box3;//[Offset: 0x434, Size: 4]
	BoxComponent* box2;//[Offset: 0x438, Size: 4]
	BoxComponent* Box1;//[Offset: 0x43c, Size: 4]
	BoxComponent* Box;//[Offset: 0x440, Size: 4]
	StaticMeshComponent* WingManPropellerStaticMesh;//[Offset: 0x444, Size: 4]
	StaticMeshComponent* WingManStaticmesh;//[Offset: 0x448, Size: 4]
	SceneComponent* SocketLeft5;//[Offset: 0x44c, Size: 4]
	SceneComponent* SocketRight5;//[Offset: 0x450, Size: 4]
	CharmAvatarPoseComponent_BP_C* CharmAvatarPoseComponent_WingMan;//[Offset: 0x454, Size: 4]
	SceneComponent* SocketRight4;//[Offset: 0x458, Size: 4]
	SceneComponent* SocketLeft4;//[Offset: 0x45c, Size: 4]
	CharmAvatarPoseComponent_BP_C* CharmAvatarPoseComponent_Lucky;//[Offset: 0x460, Size: 4]
	SceneComponent* SocketRight3;//[Offset: 0x464, Size: 4]
	SceneComponent* SocketLeft3;//[Offset: 0x468, Size: 4]
	CharmAvatarPoseComponent_BP_C* CharmAvatarPoseComponent_BP3;//[Offset: 0x46c, Size: 4]
	SceneComponent* SocketRight2;//[Offset: 0x470, Size: 4]
	SceneComponent* SocketLeft2;//[Offset: 0x474, Size: 4]
	CharmAvatarPoseComponent_BP_C* CharmAvatarPoseComponent_BP2;//[Offset: 0x478, Size: 4]
	SceneComponent* SocketRight;//[Offset: 0x47c, Size: 4]
	SceneComponent* SocketLeft;//[Offset: 0x480, Size: 4]
	CharmAvatarPoseComponent_BP_C* CharmAvatarPoseComponent_BP1;//[Offset: 0x484, Size: 4]
	WidgetComponent* Widget5;//[Offset: 0x488, Size: 4]
	ParticleSystemComponent* CountDownEffect;//[Offset: 0x48c, Size: 4]
	AkSoundPlayerSceneComponent* AkSoundPlayerScene;//[Offset: 0x490, Size: 4]
	WidgetComponent* Widget;//[Offset: 0x494, Size: 4]
	WidgetComponent* Widget;//[Offset: 0x498, Size: 4]
	WidgetComponent* Widget;//[Offset: 0x49c, Size: 4]
	WidgetComponent* Widget;//[Offset: 0x4a0, Size: 4]
	AkComponent* AKComp;//[Offset: 0x4a4, Size: 4]
	ChildActorComponent* ArtPlatform;//[Offset: 0x4a8, Size: 4]
	SceneComponent* Scene;//[Offset: 0x4ac, Size: 4]
	bool IsTopPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	TimerHandle[] TimerHandleList;//[Offset: 0x4b4, Size: 12]
	float SwitchEffectDelay;//[Offset: 0x4c0, Size: 4]
	ParticleSystemComponent*[] EffectList;//[Offset: 0x4c4, Size: 12]
	Vector PlayerInfoTipOffset;//[Offset: 0x4d0, Size: 12]
	AnimMontage*[] EmoteList;//[Offset: 0x4dc, Size: 12]
	StaticMeshComponent*[] FireMeshList;//[Offset: 0x4e8, Size: 12]
	Vector LeftParticleOffset;//[Offset: 0x4f4, Size: 12]
	Vector RightParticleOffset;//[Offset: 0x500, Size: 12]
	<int,SoftObjectPath> SpecialEffectMap;//[Offset: 0x50c, Size: 60]
	<int,SoftObjectPath> SpecialEffectMapRight;//[Offset: 0x548, Size: 60]
	bool IsLuckyPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584, Size: 1]
	bool IsWingManPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x585, Size: 1]
	int CacheWingManID;//[Offset: 0x588, Size: 4]
	FString CacheWingManName;//[Offset: 0x58c, Size: 12]
	TextureRenderTarget2D* CacheTextureRenderTarget;//[Offset: 0x598, Size: 4]
	LinearColor ClearColor;//[Offset: 0x59c, Size: 16]
	StaticMesh* WingManMesh;//[Offset: 0x5ac, Size: 4]
	StaticMesh* WingManPropellerMesh;//[Offset: 0x5b0, Size: 4]
	<int,Transform> SpecialWingManTransformMap;//[Offset: 0x5b4, Size: 60]
	Transform DefaultWingManTransform;//[Offset: 0x5f0, Size: 48]
	MaterialInterface* WingManMaterial;//[Offset: 0x620, Size: 4]
	enum[] CopySlots;//[Offset: 0x624, Size: 12]

--------------------------------
Class: CharmAvatarPoseComponent_BP_C.AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 4]
	void PlayCustomMontage(AnimMontage* Montage, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, float CallFunc_Montage_Play_ReturnValue);// 0x46f6b154
	void GetTakeOffAvatarList(out int[] NewWearList, out int[] TakeOffList, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x46f6b154
	void ClearAvatarParticles(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x46f6b154
	void SpawnAvatar(bool IsUseLod);// 0x46f6b154
	void ExecuteUbergraph_CharmAvatarPoseComponent_BP(int EntryPoint, Vector CallFunc_K2_GetComponentLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool K2Node_Event_IsUseLod, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, bool CallFunc_IsValid_ReturnValue, class Actor K2Node_ClassDynamicCast_AsActor, bool K2Node_ClassDynamicCast_bSuccess, Vector CallFunc_K2_GetComponentScale_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_K2_GetComponentScale_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, Actor* CallFunc_FinishSpawningActor_ReturnValue, CharacterAvatarComp_BP_C* CallFunc_GetComponentByClass_ReturnValue, STExtraLobbyCharacter* K2Node_DynamicCast_AsSTExtra_Lobby_Character, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetDisplayQuality_ReturnValue, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x46f6b154
	CharacterAvatarComp_BP_C* AvatarComponent;//[Offset: 0x294, Size: 4]
	FString SectionName;//[Offset: 0x298, Size: 12]
	float NormalHeight;//[Offset: 0x2a4, Size: 4]
	ParticleSystemComponent*[] ParticleSet;//[Offset: 0x2a8, Size: 12]
	int[] TakeOffAvatarList;//[Offset: 0x2b4, Size: 12]
	int[] AvatarWearList;//[Offset: 0x2c0, Size: 12]

--------------------------------
Class: BP_CG011_Relizhi_C.Actor.Object
	void UpdateCountDown(int PhaseIndex, int Coundown, int CurrntCounDown, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x46f6b154
	void SwitchShowPhase(int PhaseIndex, MaterialInstanceDynamic* NewMaterialIns, Object* CallFunc_GetAssetByAssetReference_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, MaterialInterface* K2Node_DynamicCast_AsMaterial_Interface, bool K2Node_DynamicCast_bSuccess, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue2, Texture* K2Node_DynamicCast_AsTexture, bool K2Node_DynamicCast_bSuccess2);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	ParticleSystemComponent* P_CG011_Relizhi_light015;//[Offset: 0x2e8, Size: 4]
	ParticleSystemComponent* P_CG011_Relizhi_light014;//[Offset: 0x2ec, Size: 4]
	ParticleSystemComponent* P_CG011_Relizhi_light013;//[Offset: 0x2f0, Size: 4]
	ParticleSystemComponent* P_CG011_Relizhi_light012;//[Offset: 0x2f4, Size: 4]
	ParticleSystemComponent* P_CG011_Relizhi_light011;//[Offset: 0x2f8, Size: 4]
	ParticleSystemComponent* P_CG011_Relizhi_light01;//[Offset: 0x2fc, Size: 4]
	StaticMeshComponent* CG03_Relizhi04;//[Offset: 0x300, Size: 4]
	StaticMeshComponent* CG03_Relizhi02;//[Offset: 0x304, Size: 4]
	StaticMeshComponent* CG03_Relizhi01;//[Offset: 0x308, Size: 4]
	StaticMeshComponent* CG03_Relizhi06_a;//[Offset: 0x30c, Size: 4]
	SceneComponent* SharedRoot;//[Offset: 0x310, Size: 4]
	MaterialInstance*[] ShowTextMatInsList;//[Offset: 0x314, Size: 12]
	SoftObjectPath[] TextureSoftRefList;//[Offset: 0x320, Size: 12]
	SoftObjectPath[] MaskTextureSoftRefList;//[Offset: 0x32c, Size: 12]
	SoftObjectPath ParentMatSoftRef;//[Offset: 0x338, Size: 24]
	int LastPhaseIndex;//[Offset: 0x350, Size: 4]

--------------------------------
Class: BattleItemHandle_AvatarBP_C.BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	BattleItemData ExtractItemData(<FName,ItemAssociation> CallFunc_GetAssociationMap_ReturnValue, ItemAssociation[] CallFunc_Map_Values_Values, ItemDefineID CallFunc_GetDefineID_ReturnValue, BattleItemData CallFunc_ConstructBattleItemDataByDefineID_ReturnValue, BattleItemData K2Node_SetFieldsInStruct_StructOut);// 0x46f6b154
	void LocalHandleDisuse(FName CallFunc_GetEnumeratorName_ReturnValue);// 0x46f6b154
	World* GetWorldInternal(World* CallFunc_GetWorld_BP_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x46f6b154
	void SpawnWrapperOnGround(class PickUpWrapperActor WrapperClass, bool bUseRandomLoc, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue, PickupManagerComponent* CallFunc_GetComponentByClass_ReturnValue, Vector CallFunc_GetRandomPutDownLocation_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue2, PickUpWrapperActor* CallFunc_FinishSpawningActor_ReturnValue2);// 0x46f6b154
	bool HandleDisuse(enum Reason, bool CallFunc_HandleDisuse_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_ItemEmotionRefer_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, interface class CallFunc_GetItemHandleListByDefineID_self_CastInput, ItemHandleBase*[] CallFunc_GetItemHandleListByDefineID_ReturnValue, int CallFunc_Array_Length_ReturnValue, ItemHandleBase* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, bool CallFunc_DropItem_ReturnValue);// 0x46f6b154
	bool HandleDrop(int InCount, enum Reason, ItemDefineID CallFunc_GetDefineID_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HandleDrop_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Conv_SoftClassReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, class Object CallFunc_GetClassByAssetReference_ReturnValue, class PickUpWrapperActor K2Node_ClassDynamicCast_AsPick_Up_Wrapper_Actor, bool K2Node_ClassDynamicCast_bSuccess, class PickUpWrapperActor K2Node_ClassDynamicCast_AsPick_Up_Wrapper_Actor2, bool K2Node_ClassDynamicCast_bSuccess2);// 0x46f6b154
	bool HandlePickup(out interface class ItemContainer, BattleItemPickupInfo PickupInfo, enum Reason, bool CallFunc_HandlePickup_ReturnValue, BattleItemHandleBase* CallFunc_GetCharacterVirtualItemHandleInBackpack_ReturnValue, BackpackComponent* K2Node_DynamicCast_AsBackpack_Component, bool K2Node_DynamicCast_bSuccess, Actor* K2Node_DynamicCast_AsActor, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_GetTransform_ReturnValue, Object* CallFunc_GetOwningObject_ReturnValue, Controller* K2Node_DynamicCast_AsController, bool K2Node_DynamicCast_bSuccess3, Pawn* CallFunc_K2_GetPawn_ReturnValue, STExtraBaseCharacter* K2Node_DynamicCast_AsSTExtra_Base_Character, bool K2Node_DynamicCast_bSuccess4);// 0x46f6b154
	bool HandleUse(BattleItemUseTarget Target, enum Reason, ItemDefineID K2Node_MakeStruct_ItemDefineID, bool CallFunc_HandleUse_ReturnValue, BattleItemUseTarget K2Node_MakeStruct_BattleItemUseTarget, BattleItemAdditionalData[] K2Node_MakeArray_Array, BattleItemPickupInfo K2Node_MakeStruct_BattleItemPickupInfo, ItemDefineID CallFunc_GetDefineID_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_GetEnumeratorName_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_ItemEmotionRefer_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue2, ItemAssociation K2Node_MakeStruct_ItemAssociation, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array2, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_PickupItem_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue3, ItemDefineID CallFunc_GetDefineID_ReturnValue4, ItemAssociation K2Node_MakeStruct_ItemAssociation2);// 0x46f6b154
	STExtraPlayerController* OwningPlayerController;//[Offset: 0x7b8, Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0x7bc, Size: 4]
	BackpackComponent* OwningBackpackComponent;//[Offset: 0x7c0, Size: 4]
	Transform SourceWrapperTrans;//[Offset: 0x7d0, Size: 48]
	Transform WrapperPutdownTrans;//[Offset: 0x800, Size: 48]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0x830, Size: 4]
	BattleItemHandleBase* CharacterItemHandle;//[Offset: 0x834, Size: 4]
	class PickUpWrapperActor* SoftWrapperClass;//[Offset: 0x838, Size: 40]

--------------------------------
Class: BP_STRUCT_ItemEmotionRefer_type
	int ItemID_1_1B8A64001EF75D1E3D2FCAA20A2F0824;//[Offset: 0x0, Size: 4]
	int EmotionID_0_600A3700757143F669C230E80231D854;//[Offset: 0x4, Size: 4]
	int ExclusiveEmoteID_3_68DEACC046B8E9617DBF561702174FA4;//[Offset: 0x8, Size: 4]
	int IdleEmoteID_2_6ABFDE40243A9C656B11CABE05BB5FD4;//[Offset: 0xc, Size: 4]
	int LobbyShowEmoteID_4_65A9C5007B9D608828898D380C32AEA4;//[Offset: 0x10, Size: 4]

--------------------------------
Class: BackpackWingPlaneHandle.BattleItemHandleBase.ItemHandleBase.Object
	StaticMesh* battleStMesh;//[Offset: 0xb0, Size: 40]
	StaticMesh*[] BattleAdditionStMesh;//[Offset: 0xd8, Size: 12]
	ParticleSystem* BattleParticleSystem;//[Offset: 0xe8, Size: 40]
	SkeletalMesh* LobbySkMesh;//[Offset: 0x110, Size: 40]
	class AnimInstance* animBPClass;//[Offset: 0x138, Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0x160, Size: 40]
	ParticleSystem* LobbyParticleEffect_helpSocket;//[Offset: 0x188, Size: 40]
	ParticleSystem* LobbyParticleEffect_helpSocket;//[Offset: 0x1b0, Size: 40]
	int LobbyWingManTranslucentPriority;//[Offset: 0x1d8, Size: 4]
	FString GetSTMeshPath();// 0x23b5f48
	FString GetSKMeshPath();// 0x23b5eb8
	FString GetMeshMat();// 0x23b5e28
	FString[] GetAdditionSTMeshPath();// 0x23b5d3c

--------------------------------
Class: AkSoundPlayerSceneComponent.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkSoundEvent;//[Offset: 0x240, Size: 4]
	Actor* BindActor;//[Offset: 0x244, Size: 4]
	int AkSoundID;//[Offset: 0x248, Size: 4]
	void SetBindActor(Actor* pActor);// 0x2368ad0

--------------------------------
Class: BP_WingPlaneSystem_C.WingPlaneSystem.Info.Actor.Object

--------------------------------
Class: WingPlaneSystem.Info.Actor.Object
	WingManBoardInfo[] ClientAllWingInfos;//[Offset: 0x2e8, Size: 12]
	bool bHasWingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	class ClusterActor* PlaneWingCluster;//[Offset: 0x2f8, Size: 4]
	int PlanesNum;//[Offset: 0x2fc, Size: 4]
	float PlanesLifeTime;//[Offset: 0x300, Size: 4]
	float NeedShowAfterFly;//[Offset: 0x304, Size: 4]
	Transform AttachLocation;//[Offset: 0x310, Size: 48]
	WingManInfoRep WingManInfoRep;//[Offset: 0x340, Size: 16]
	WingPlaneSystem* SyncWingPlaneSystem;//[Offset: 0x350, Size: 4]
	BackpackWingPlaneHandle*[] CacheBackpackWingPlaneHandles;//[Offset: 0x354, Size: 12]
	delegate OnWidgetToTextureRenderTarget2DManagerDrawn;//[Offset: 0x360, Size: 16]
	WingManStaticmesh[] WingManStaticmeshes;//[Offset: 0x370, Size: 12]
	ClusterActor* WingPlanes;//[Offset: 0x37c, Size: 4]
	class TeammateInPlaneWidget* WingPlaneHUDClass;//[Offset: 0x38c, Size: 4]
	<uint32,TeammateInPlaneWidget*> WingPlaneHUD;//[Offset: 0x3cc, Size: 60]
	GameModePlayerParams RetrievePlayerParams(PlayerID PlayerID);// 0x27d9750
	void OnTextRTFinished(WidgetToTextureRenderTarget2DManager* Sender, DrawTextToTextureRenderTarget2DParams Params);// 0x27d9410
	void OnRep_SyncWingPlaneSystem();// 0x27d93f8
	void OnRep_ClientPlayerWingInfos();// 0x27d93e4
	void OnRep_ClientAllWingInfos();// 0x27d93d0
	void OnPlayerLogin(PlayerController* NewPlayer);// 0x27d9358
	void OnPlayerExit(PlayerController* NewPlayer);// 0x27d92e0
	void OnGameEnterFight();// 0x27d92cc
	void OnCurrentPlayerParachuting(enum State, Character* OwnerCharacter);// 0x27d9210
	void OnBattleItemHandleAsyncList(BattleItemHandleBase*[] handleList, int RequestID);// 0x27d90e8
	bool NeedPlayShow();// 0x27d90c0
	WingManInfoWrapper GetPlayerWingInfo(FString PlayerKey);// 0x27d8f98

--------------------------------
Class: WingManBoardInfo
	int CharmValue;//[Offset: 0x0, Size: 4]
	FString OwnerName;//[Offset: 0x4, Size: 12]
	int TeamID;//[Offset: 0x10, Size: 4]
	int CurrentWingManID;//[Offset: 0x14, Size: 4]
	bool bShowCharm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: ClusterActor.Actor.Object
	SkeletalMesh* FrameSkeletalMesh;//[Offset: 0x2e8, Size: 40]
	ClusterLeaf[] AttachConfigs;//[Offset: 0x310, Size: 12]
	bool NeedUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 1]
	SkeletalMeshComponent* FrameSkeletalMeshComp;//[Offset: 0x320, Size: 4]
	delegate OnAnimationPlayCompleted;//[Offset: 0x32c, Size: 12]
	ClusterLeafInst[] AllLeafMeshInst;//[Offset: 0x33c, Size: 12]
	void OnAnimationHasPlayCompleted();// 0x248e254
	void AttachToFrameEnd(int Index);// 0x241d0b0
	bool AttachToFrame(StaticMesh* LeafMesh, int PlayerKey);// 0x28761ec

--------------------------------
Class: ClusterLeaf
	FName SocketName;//[Offset: 0x0, Size: 8]
	Transform TransformOffset;//[Offset: 0x10, Size: 48]
	bool bOcuppied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: ClusterLeafInst
	StaticMeshComponent* Mesh;//[Offset: 0x0, Size: 4]
	FString[] Msg;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WingManInfoRep
	float SeverStartWingPlanesTime;//[Offset: 0x0, Size: 4]
	WingManInfoWrapper[] ClientPlayerWingInfos;//[Offset: 0x4, Size: 12]

--------------------------------
Class: WingManInfoWrapper
	int CharmValue;//[Offset: 0x0, Size: 4]
	uint32 PlayerKey;//[Offset: 0x4, Size: 4]
	FString PlayerKeyString;//[Offset: 0x8, Size: 12]
	WingManInfo WingManInfo;//[Offset: 0x14, Size: 36]
	uint32[] PassengerPlayerKeys;//[Offset: 0x38, Size: 12]
	FString[] PassengerPlayerKeysString;//[Offset: 0x44, Size: 12]

--------------------------------
Class: WingManStaticmesh
	FString WingManName;//[Offset: 0x0, Size: 12]
	StaticMeshComponent* MeshComponent;//[Offset: 0xc, Size: 4]

--------------------------------
Class: TeammateInPlaneWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	Vector2D BigPlaneScreenOffset;//[Offset: 0x3bc, Size: 8]
	Vector2D WingPlaneScreenOffset;//[Offset: 0x3c4, Size: 8]
	CanvasPanelSlot* WidgetSlot;//[Offset: 0x3d0, Size: 4]
	int[] PassagerTeamIDList;//[Offset: 0x3d4, Size: 12]
	enum PlaneType;//[Offset: 0x3e0, Size: 1]
	void UpdatePassager();// 0x46f6b154
	void Init();// 0x46f6b154
	void ActivateWidget();// 0x272974c

--------------------------------
Class: BP_SurviveGameState_CG14_C.SurviveGameState_C.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	void UserConstructionScript();// 0x46f6b154
	BP_WaterVehicleAreaManager_C* VehicleAreaManager;//[Offset: 0xe50, Size: 4]

--------------------------------
Class: BP_WaterVehicleAreaManager_C.BP_VehicleAreaManager_C.Actor.Object
	void ActorPlayParticle(Actor* Actor, ParticleSystem* ParticleSystem, int64 UtcNowUnixTimestampMillseconds, STExtraCharacter* K2Node_DynamicCast_AsSTExtra_Character, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetDeviceQualityLevel_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int64 CallFunc_GetUtcNowUnixTimestampMillseconds_ReturnValue, int64 CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, int64 CallFunc_Subtract_Int64Int64_ReturnValue, bool CallFunc_Greater_Int64Int64_ReturnValue);// 0x46f6b154
	void RegisterToGameState(GameStateBase* CallFunc_GetGameState_ReturnValue, BP_SurviveGameState_CG14_C* K2Node_DynamicCast_AsBP_Survive_Game_State_CG14, bool K2Node_DynamicCast_bSuccess);// 0x46f6b154
	void PlayParticle2(Actor* Actor, ParticleSystem* ParticleSystem, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue);// 0x46f6b154
	void OnRep_BP_WaterVehiclePlayerStatus();// 0x53b8964
	FString GetLuaModule();// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	int SufingBoardItemId;//[Offset: 0x3b4, Size: 4]
	<int,SWaterGoldToItemIdCounts> GoldToItemIdCounts;//[Offset: 0x3b8, Size: 60]
	int ExitFromTrackTipId;//[Offset: 0x3f4, Size: 4]
	SWaterVehiclePlayerStatus[] BP_WaterVehiclePlayerStatus;//[Offset: 0x3f8, Size: 12]
	<FString,int64> ActorPlayParticleInfos;//[Offset: 0x404, Size: 60]
	int64 Interval;//[Offset: 0x440, Size: 8]

--------------------------------
Class: BP_VehicleAreaManager_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2e8, Size: 4]
	FString GetLuaModule();// 0x46f6b154
	void OnRep_BP_VehiclePlayerStatus();// 0x53b8964
	void UserConstructionScript(FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue2);// 0x46f6b154
	void ReceiveTick(float DeltaSeconds);// 0x53b8964
	void ExecuteUbergraph_BP_VehicleAreaManager(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x46f6b154
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2ec, Size: 4]
	SAllowedStandOn[] AllowedStandOns;//[Offset: 0x2f0, Size: 12]
	float MillisecondsToInterruptAfterOutOfVehicleArea;//[Offset: 0x2fc, Size: 4]
	AkAudioEvent* PlayBGMAkAudioEventObjectPath;//[Offset: 0x300, Size: 40]
	FString PlayBGMAkAudioEventObjectPath_LuaBug;//[Offset: 0x328, Size: 12]
	AkAudioEvent* StopBGMAkAudioEventObjectPath;//[Offset: 0x338, Size: 40]
	FString StopBGMAkAudioEventObjectPath_LuaBug;//[Offset: 0x360, Size: 12]
	SVehiclePlayerStatus[] BP_VehiclePlayerStatus;//[Offset: 0x36c, Size: 12]
	<int,float> RoleToTickIntervals;//[Offset: 0x378, Size: 60]

--------------------------------
Class: SAllowedStandOn
	class Actor* ActorClass_8_1FC8B3C6426783AF3D61AF8FB7615CB4;//[Offset: 0x0, Size: 40]
	FName Tag_9_71AC5475480B057B0D7A36BE4C3D141D;//[Offset: 0x28, Size: 8]

--------------------------------
Class: SVehiclePlayerStatus
	Actor* OwnerActor_28_8D22493C445728F438CBED8C44982097;//[Offset: 0x0, Size: 4]
	SHasPassedTriggerAreaIDData[] HasPassedTriggerAreaIDDatas_6_228F01A34410281CA14AE284F5330AFE;//[Offset: 0x4, Size: 12]
	SPlayerStatus[] PlayerStatus_9_EE62275E46347C6AC145A5A60577C518;//[Offset: 0x10, Size: 12]
	float ElapsedSecondsSinceFirstPass_26_A01A1D524082C6F4C76B358B71A6B8C2;//[Offset: 0x1c, Size: 4]
	int64 NoneInVehicleUtcNowUnixTimestampMillseconds_19_A4D7AD5F4DC5FA085159239D0D12CAAD;//[Offset: 0x20, Size: 8]
	bool bInVehicleArea_22_529AB4EA420C89A1FD83E69EEF3C3501;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: SHasPassedTriggerAreaIDData
	int ID_7_41324ACB44C33FA49815758B16D77084;//[Offset: 0x0, Size: 4]

--------------------------------
Class: SPlayerStatus
	FString UID_2_50CFE9894BAD92605EC24F8694281AEE;//[Offset: 0x0, Size: 12]
	int64 ExitVehicleUtcNowUnixTimestampMillseconds_5_370382024E395456CA404481A39D1390;//[Offset: 0x10, Size: 8]

--------------------------------
Class: SWaterGoldToItemIdCounts
	SWaterItemIdCount[] ItemIds_4_65B7E3AC46FF928A9F1C498523F7B686;//[Offset: 0x0, Size: 12]

--------------------------------
Class: SWaterItemIdCount
	int ItemId_2_EBEC2E604DB673FBAFB09A87B619DAE7;//[Offset: 0x0, Size: 4]
	int Count_4_24C3D32D48D227042623C0A99776628D;//[Offset: 0x4, Size: 4]

--------------------------------
Class: SWaterVehiclePlayerStatus
	Actor* OwnerActor_2_5EB60F944F5F788090106C830C7B7C53;//[Offset: 0x0, Size: 4]
	int Gold_5_BC3C0ECA41AD17BBFE8BA6977BC2911F;//[Offset: 0x4, Size: 4]

--------------------------------
Class: VehicleDataMgr.Actor.Object
	STExtraVehicleBase*[] VehiclesDataMap;//[Offset: 0x2e4, Size: 12]
	STExtraVehicleBase*[] uavDataMap;//[Offset: 0x2f0, Size: 12]
	UAEDataTable* VehicleSpawnTable;//[Offset: 0x338, Size: 4]
	UAEDataTable* VehicleMaxHPTable;//[Offset: 0x33c, Size: 4]
	UAEDataTable* CarMusicTable;//[Offset: 0x37c, Size: 4]
	void UnRegisterVehicle(STExtraVehicleBase* Vehicle);// 0x27a1c70
	void UnRegisterUAV(STExtraVehicleBase* uav);// 0x27a1bf8
	void RemoveNoFreezeOn(SceneComponent* Actor);// 0x27a1b80
	void RegisterVehicle(STExtraVehicleBase* Vehicle);// 0x27a1b08
	void RegisterUAV(STExtraVehicleBase* uav);// 0x27a1a90
	static VehicleDataMgr* GetInstance(World* World);// 0x27a1a18
	void AddNoFreezeOn(SceneComponent* Actor);// 0x27a19a0

--------------------------------
Class: MyLandscape.Actor.Object
	RuntimeMeshComponent* Mesh;//[Offset: 0x2e4, Size: 4]
	MyLandscapeGeometry* LandscapeGeometry;//[Offset: 0x2e8, Size: 4]
	Material* LandscapeMat;//[Offset: 0x2ec, Size: 4]
	StaticMeshComponent* HighQualityMesh;//[Offset: 0x344, Size: 4]
	LandscapeGeometry_ExtendData* LandscapeGeometry_ExtendData;//[Offset: 0x348, Size: 4]
	void TryCreateHighQualityMesh();// 0x2534208
	static MyLandscape* GetWorldMyLandscape();// 0x25341d4
	void GameEventFlying();// 0x25341c0
	void GameEventFighting();// 0x25341ac
	void GameEventAvatarDisplay();// 0x2534198
	void AboutToSwitchViewTargetPlayer();// 0x2534184

--------------------------------
Class: MyLandscapeGeometry.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x20, Size: 12]
	Vector[] Normals;//[Offset: 0x2c, Size: 12]
	Vector2D[] UV;//[Offset: 0x38, Size: 12]
	int[] Indices;//[Offset: 0x44, Size: 12]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x50, Size: 60]
	int ComponentIndexCount;//[Offset: 0x8c, Size: 4]
	int ComponentVertexCount;//[Offset: 0x90, Size: 4]
	<FString,SubLevelComponentMapValue> SubLevelComponentMap;//[Offset: 0x94, Size: 60]
	StaticMesh* HighQualityMesh;//[Offset: 0xd0, Size: 40]
	float HighQualityMeshDestroyHight;//[Offset: 0xf8, Size: 4]

--------------------------------
Class: SubLevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 12]
	int[] IndexOffsetArray;//[Offset: 0xc, Size: 12]
	int[] VertexOffsetIndex;//[Offset: 0x18, Size: 12]
	int[] BorderIndex1;//[Offset: 0x24, Size: 12]
	int[] BorderIndex2;//[Offset: 0x30, Size: 12]
	int[] BorderIndex3;//[Offset: 0x3c, Size: 12]
	int[] BorderIndex4;//[Offset: 0x48, Size: 12]
	int[] UnderBorderIndex1;//[Offset: 0x54, Size: 12]
	int[] UnderBorderIndex2;//[Offset: 0x60, Size: 12]
	int[] UnderBorderIndex3;//[Offset: 0x6c, Size: 12]
	int[] UnderBorderIndex4;//[Offset: 0x78, Size: 12]
	int[] BorderIndicesBuffer1;//[Offset: 0x84, Size: 12]
	int[] BorderIndicesBuffer2;//[Offset: 0x90, Size: 12]
	int[] BorderIndicesBuffer3;//[Offset: 0x9c, Size: 12]
	int[] BorderIndicesBuffer4;//[Offset: 0xa8, Size: 12]
	FString Sibling1Name;//[Offset: 0xb4, Size: 12]
	FString Sibling2Name;//[Offset: 0xc0, Size: 12]
	FString Sibling3Name;//[Offset: 0xcc, Size: 12]
	FString Sibling4Name;//[Offset: 0xd8, Size: 12]
	int Sibling1Idx;//[Offset: 0xe4, Size: 4]
	int Sibling2Idx;//[Offset: 0xe8, Size: 4]
	int Sibling3Idx;//[Offset: 0xec, Size: 4]
	int Sibling4Idx;//[Offset: 0xf0, Size: 4]

--------------------------------
Class: LandscapeGeometry_ExtendData.DataAsset.Object
	<IntPoint,int> ComponentVertexIndexOffset;//[Offset: 0x20, Size: 60]

--------------------------------
Class: TssHookEx.Actor.Object

--------------------------------
Class: BP_ScreenAppearanceActor_C.ScreenAppearanceActor.Actor.Object

--------------------------------
Class: BP_AdvertismentBoard_C.UAEAdvertisementActor.StaticMeshActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x320, Size: 4]
	bool ShouldBeDisabled(int DisableAdvertisementCategories, int CallFunc_And_IntInt_ReturnValue, bool CallFunc_ShouldBeDisabled_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x46f6b154
	void E(BP_STRUCT_BuildingAdvertismentTableProperties_type[] CallFunc_FilterBuildingAdvertismentIds_ReturnValue, int[] CallFunc_GetWeightsFromBuildingAdvertismentTableProperties_ReturnValue, FloatRange[] CallFunc_GetProbabilities_ReturnValue, float CallFunc_GetProbabilities_MinValue, float CallFunc_GetProbabilities_MaxValue, int CallFunc_RandomFromProbabilities_Index, float CallFunc_RandomFromProbabilities_RandomValue, bool CallFunc_Array_IsValidIndex_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, Object* CallFunc_GetAssetByAssetReference_ReturnValue, StaticMesh* K2Node_DynamicCast_AsStatic_Mesh, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SetStaticMesh_ReturnValue);// 0x46f6b154
	int[] GetWeightsFromBuildingAdvertismentTableProperties(out BP_STRUCT_BuildingAdvertismentTableProperties_type[] BuildingAdvertismentTableProperties, int[] ReturnValue_, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x46f6b154
	BP_STRUCT_BuildingAdvertismentTableProperties_type[] FilterBuildingAdvertismentIds(out int[] BuildingAdvertismentIds, BP_STRUCT_BuildingAdvertismentTableProperties_type[] ReturnValue_, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_BuildingAdvertismentTableProperties_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Find_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Array_Find_ReturnValue2, bool CallFunc_Array_IsValidIndex_ReturnValue2, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x46f6b154
	void RandomFromProbabilities(out FloatRange[] Probabilities, float RandomLowerBound, float RandomUpperBound, out int Index, out float RandomValue, float RandomFloat, int Temp_int_Variable, float CallFunc_RandomFloatInRange_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsInFloatRange_ReturnValue);// 0x46f6b154
	FloatRange[] GetProbabilities(out int[] Weights, out float MinValue, out float MaxValue, int AccumulatedWeight, float LowerBound, FloatRange[] Probabilities, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue2, byte Temp_byte_Variable, byte Temp_byte_Variable2, int Temp_int_Array_Index_Variable, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable2, FString CallFunc_Conv_IntToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue2, float CallFunc_Conv_IntToFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, float CallFunc_Conv_IntToFloat_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue2, float CallFunc_Divide_FloatFloat_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable2, byte K2Node_Select_Default, bool CallFunc_Less_IntInt_ReturnValue2, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, FloatRangeBound K2Node_MakeStruct_FloatRangeBound, int CallFunc_Add_IntInt_ReturnValue3, FloatRangeBound K2Node_MakeStruct_FloatRangeBound2, FloatRange K2Node_MakeStruct_FloatRange, FString CallFunc_Conv_FloatToString_ReturnValue2, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, FString CallFunc_Concat_StrStr_ReturnValue8);// 0x46f6b154
	void UserConstructionScript(bool Temp_bool_Variable, StaticMesh* Temp_object_Variable, bool Temp_bool_Variable2, StaticMesh* Temp_object_Variable2, bool CallFunc_IsEditor_ReturnValue, bool CallFunc_IsValid_ReturnValue, StaticMesh* K2Node_Select_Default, StaticMesh* K2Node_Select2_Default, bool CallFunc_SetStaticMesh_ReturnValue);// 0x46f6b154
	void ReceiveBeginPlay();// 0x46f6b154
	void ExecuteUbergraph_BP_AdvertismentBoard(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, GameModeBase* CallFunc_GetGameMode_ReturnValue, UAEGameMode* K2Node_DynamicCast_AsUAEGame_Mode, bool K2Node_DynamicCast_bSuccess, BP_STRUCT_BuildingAdvertismentTableProperties_type[] CallFunc_FilterBuildingAdvertismentIds_ReturnValue, int CallFunc_Array_Length_ReturnValue, int[] CallFunc_GetWeightsFromBuildingAdvertismentTableProperties_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue2, FloatRange[] CallFunc_GetProbabilities_ReturnValue, float CallFunc_GetProbabilities_MinValue, float CallFunc_GetProbabilities_MaxValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_RandomFromProbabilities_Index, float CallFunc_RandomFromProbabilities_RandomValue, FString CallFunc_Concat_StrStr_ReturnValue2, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue3, bool CallFunc_Array_IsValidIndex_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue3, FString CallFunc_Concat_StrStr_ReturnValue4, FString CallFunc_Concat_StrStr_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue6, FString CallFunc_Concat_StrStr_ReturnValue7, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue4, FString CallFunc_Conv_IntToString_ReturnValue5, FString CallFunc_Concat_StrStr_ReturnValue8, FString CallFunc_Concat_StrStr_ReturnValue9, FString CallFunc_Concat_StrStr_ReturnValue10, FString CallFunc_Concat_StrStr_ReturnValue11, FString CallFunc_Concat_StrStr_ReturnValue12);// 0x46f6b154
	int Type;//[Offset: 0x324, Size: 4]
	int StyleID;//[Offset: 0x328, Size: 4]
	int ColorID;//[Offset: 0x32c, Size: 4]
	int[] BuildingAdvertismentIds;//[Offset: 0x330, Size: 12]

--------------------------------
Class: BP_STRUCT_BuildingAdvertismentTableProperties_type
	FString ResourcePath_0_611E49004834750E6B02BE5906A7EFD8;//[Offset: 0x0, Size: 12]
	int Weight_1_25F14DC02187FA097C8D3FB10E6A1C44;//[Offset: 0xc, Size: 4]
	FString Name_3_635DB4002F88455A7C3ACC8E01C0F7D5;//[Offset: 0x10, Size: 12]
	int Type_4_3A2A1C403920BD477CCE837D01BE1185;//[Offset: 0x1c, Size: 4]
	int ID_5_617F37007C6BA2263FD0048F01E1BF64;//[Offset: 0x20, Size: 4]
	int[] ColorIDs_a_7_766E238008BC667C1C293C1307D28E81;//[Offset: 0x24, Size: 12]
	int[] StyleIDs_a_8_2C48280034333C3A28A179080323A371;//[Offset: 0x30, Size: 12]

--------------------------------
Class: Forest_CG014_Summer_C.UAELevelDirector.Actor.Object
	void C(int LevelIndex);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	SceneComponent* DefaultSceneRoot;//[Offset: 0x478, Size: 4]

--------------------------------
Class: CharmDisplayPawn_BP_C.BP_IngameDisplayPawn_C.STExtraDisplayPawn.STExtraLobbyCharacter.Character.Pawn.Actor.Object

--------------------------------
Class: BP_IngameDisplayPawn_C.STExtraDisplayPawn.STExtraLobbyCharacter.Character.Pawn.Actor.Object
	void EquipDisplayWeapon(int resID, bool ForceClientMode, bool PutToBack, BattleItemHandleBase* CallFunc_GenerateWeaponByResID_weaponHandle, STExtraWeapon* CallFunc_GenerateWeaponByResID_WeaponObject, enum CallFunc_GenerateWeaponByResID_LogicSocket, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, WeaponAvatarComponent* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue3, bool CallFunc_IsValid_ReturnValue4);// 0x46f6b154
	void GetItemBPID(int ID, out int BPID, out enum WeaponType, enum WeaponSocketType, FString CallFunc_Conv_IntToString_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, BP_STRUCT_BattleItem_type CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, int CallFunc_RandomIntegerInRange_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess);// 0x46f6b154
	void GenerateWeaponByResID(int resID, out BattleItemHandleBase* weaponHandle, out STExtraWeapon* WeaponObject, out enum LogicSocket, BackpackBlueprintUtils* CallFunc_GetBPUtils_ReturnValue, ItemDefineID CallFunc_GenerateItemDefineIDByItemTableIDWithRandomInstanceID_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, BattleItemHandleBase* CallFunc_CreateBattleItemHandle_ReturnValue, ItemDefineID CallFunc_GetDefineID_ReturnValue, BackpackWeaponHandle* K2Node_DynamicCast_AsBackpack_Weapon_Handle, bool K2Node_DynamicCast_bSuccess, class BackpackWeaponHandle CallFunc_GetObjectClass_ReturnValue, int CallFunc_GetItemBPID_BPID, enum CallFunc_GetItemBPID_WeaponType, class Object CallFunc_LoadClassFromSoftClassRef_ReturnValue, class STExtraWeapon K2Node_ClassDynamicCast_AsSTExtra_Weapon, bool K2Node_ClassDynamicCast_bSuccess, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, STExtraWeapon* CallFunc_FinishSpawningActor_ReturnValue);// 0x46f6b154
	void UserConstructionScript();// 0x46f6b154
	AELobbyCharAnimListComp* AELobbyCharAnimListComp;//[Offset: 0x790, Size: 4]
	CharacterAvatarComp_BP_C* CharacterAvatarComp_BP;//[Offset: 0x794, Size: 4]
	STExtraWeapon* curEquipingWeapon;//[Offset: 0x798, Size: 4]
	int curWeaponResId;//[Offset: 0x79c, Size: 4]

--------------------------------
Class: STExtraDisplayPawn.STExtraLobbyCharacter.Character.Pawn.Actor.Object
	<enum,FName> WeaponAttachSocketMap;//[Offset: 0x710, Size: 60]
	<enum,FName> WeaponAttachSocketMapNoBag;//[Offset: 0x74c, Size: 60]
	void SwitchLightChannel(int Channel);// 0x2666768
	FName GetWeaponAttachSocketDirectly(enum WeaponType, STExtraWeapon* Weapon, int BagLevel);// 0x2666650
	void AttachDisplayWeaponToBackDirectly(STExtraWeapon* Weapon, enum WeaponType, int BagLevel);// 0x2666550

--------------------------------
Class: BP_STRUCT_BattleItem_type
	int ItemID_13_35E8A7403ADF78A55584A29E0DA3B6B4;//[Offset: 0x0, Size: 4]
	FString ItemName_14_136EE4400F13F9732230DCE003B72B95;//[Offset: 0x4, Size: 12]
	int ItemType_2_6A3B4C80470C5DBE2218801D03B5EDC5;//[Offset: 0x10, Size: 4]
	int ItemSubType_0_053337001ACB01EE13103DF30C6D9B35;//[Offset: 0x14, Size: 4]
	int BPID_6_238FA8002DCE542E0EA54FE4076CDDC4;//[Offset: 0x18, Size: 4]
	int Durability_27_129A868022C9BE283A01F71900E44529;//[Offset: 0x1c, Size: 4]
	int Electricity_25_0F2B808057F7E0202FAD31480D4D3A69;//[Offset: 0x20, Size: 4]
	int AIFullVaule_5_5FBE06C00595C9A13C21B5D405D3C8F5;//[Offset: 0x24, Size: 4]
	bool Equippable_28_4672624064736BAF596F5A94071A1A95;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool Consumable_21_567CA280640482FE5AD3F4F10DEF3665;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool AutoEquipAndDrop_3_763791802385EFF057FFB25304EC1EE0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	int MaxCount_18_15444C006BB8FA4874C49ACA01DF07C4;//[Offset: 0x2c, Size: 4]
	int WeightforOrder_26_3886CB000BAB73EA2C99F2A3049C1D02;//[Offset: 0x30, Size: 4]
	float UnitWeight_f_17_3E4E13801332BC8633587F3806D3E8E6;//[Offset: 0x34, Size: 4]
	FString ItemBigIcon_15_5CADAAC03606455113E2BA0E0E21C33E;//[Offset: 0x38, Size: 12]
	FString ItemSmallIcon_24_5E82E480271D9BAC379BF70E0E2B9ABE;//[Offset: 0x44, Size: 12]
	FString ItemWhiteIcon_19_24B7C6801359987E516B75780A92A31E;//[Offset: 0x50, Size: 12]
	FString ItemDesc_23_598EE3C02D192E2D224D42FC03B6C133;//[Offset: 0x5c, Size: 12]
	FString PickupDesc_7_67455B00214AA19A69D4AB4805A96A03;//[Offset: 0x68, Size: 12]
	FString ArmorySimpleDesc_30_66DB7900602E19D65AE5D98B08DB12E3;//[Offset: 0x74, Size: 12]
	FString BackpackSimple_10_7AA91EC06BA4FAEB2DEFF4DB0E0B4EE5;//[Offset: 0x80, Size: 12]
	int ItemQuality_29_7AFCBE403B57755F704AE4160E6E2BE9;//[Offset: 0x8c, Size: 4]
	FString PickUpSound_8_3C00D580748C4CB463A50FCD0A860334;//[Offset: 0x90, Size: 12]
	FString DropSound_11_74D167C065B5D69D7E316BC00730AB64;//[Offset: 0x9c, Size: 12]
	FString EquipSound_1_74E3A3802372C2C20E3F259507360BF4;//[Offset: 0xa8, Size: 12]
	FString UnEquipSound_12_189C3440698B994B16ECC61C0D73B5A4;//[Offset: 0xb4, Size: 12]
	FString PickUpBank_4_2ACCB2401673903953C45F3D07A942DB;//[Offset: 0xc0, Size: 12]
	FString DropBank_16_4FD264804CEA100A295EAD700273EC5B;//[Offset: 0xcc, Size: 12]
	FString EquipBank_9_57B680403A056C6F7DD4AB7E0B72425B;//[Offset: 0xd8, Size: 12]
	FString UnEquipBank_20_005B710066A1DCB6753A1DDB0ED63BBB;//[Offset: 0xe4, Size: 12]
	FString KillWhiteIcon_22_5C0945C075ED47E3170AFDE60BDD931E;//[Offset: 0xf0, Size: 12]

--------------------------------
Class: BackpackWeaponHandle.BattleItemHandleBase.ItemHandleBase.Object
	bool bForbidSpawnWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5, Size: 1]
	int BulletsNumStoreToWrapper;//[Offset: 0xb8, Size: 4]
	BackpackComponent* BackpackComp;//[Offset: 0xbc, Size: 4]
	WeaponMeshCfg MeshPackage;//[Offset: 0xc0, Size: 344]
	class AnimInstance* AnimBP;//[Offset: 0x218, Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x220, Size: 40]
	<ItemDefineID,ItemDefineID> AttachmentAvatarList;//[Offset: 0x248, Size: 60]
	ItemDefineID[] DefaultAvatarList;//[Offset: 0x284, Size: 12]
	ItemDefineID[] ParentIDList;//[Offset: 0x290, Size: 12]
	class STExtraWeapon* lobbyWeapon;//[Offset: 0x2a0, Size: 40]
	enum OverrideSocket;//[Offset: 0x2c8, Size: 1]
	BattleItemAdditionalData[] WeaponAttachmentAdditionalDataList;//[Offset: 0x2cc, Size: 12]
	STExtraWeapon* CachedTargetWeapon;//[Offset: 0x2d8, Size: 4]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x2e0, Size: 64]
	WeaponAttachItemUnit[] CachedWeaponAttachmentListBeforeDrop;//[Offset: 0x320, Size: 12]
	void SaveWeaponAttachmentListBeforeDrop();// 0x23b1e20
	void PreLocalHandleDisuse();// 0x23b1e0c
	PickUpWrapperActor* LocalSpawnWrapperOnGround(class Object InWrapperClass, STExtraBaseCharacter* InOwningCharacter);// 0x23b1d48
	bool LocalHandleUse(out const BattleItemUseTarget InTarget, enum InReason, WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, BattleItemHandleBase* InCharacterItemHandle, BackpackComponent* InOwningBackpackComponnent, STExtraBaseCharacter* InOwningCharacter, class STExtraWeapon InWeaponClass, bool bInResetInitBulletInBullet, out STExtraWeapon* OutTargetWeaponActor, out FName bOutSocket);// 0x23b1794
	FName LocalGetAvailableInstantLogicSocketName(WeaponManagerComponent* InWeaponMgr, FName InTargetLogicSocket, bool bInTargetAutoUse, FName InMainLogicSlot1Name, FName InMainLogicSlot2Name, FName InSubLogicSlotName, bool bInIsPistol, STExtraPlayerController* InOwningPlayerController, out bool bOutNeedPutDownOldWeapon, out bool bOutAutoUse);// 0x23b1410
	void LocalAutoEquipAttachments();// 0x46f6b154
	bool IsVirtualAvatarHandle();// 0x23b13e0
	bool IsAvatarWeapon();// 0x23b13b8
	bool IsAvatarOf(int resID);// 0x23b1330
	void GetWidgetList(out UIWidgetRes[] UIList);// 0x23b1288
	class STExtraWeapon GetWeaponClass();// 0x46f6b154
	WeaponSlotBase* GetTargetCommonWeaponSlot();// 0x23b1258
	int GetSubSlotID();// 0x23b1228
	int GetSlotID();// 0x23ad448
	ItemDefineID GetReadyPakItemDefineID();// 0x23afc00
	void GetParentDefineIDList(out ItemDefineID[] ParentList);// 0x23b1130
	WeaponMeshCfg GetMeshPackCfgCopy();// 0x23b10d8
	void GetMeshPackCfg(out WeaponMeshCfg meshCfg);// 0x23b0f20
	void GetDefaultAvatarList(out ItemDefineID[] DefaultAvatarList);// 0x23b0e78
	WeaponAttachmentSlot[] GetAvailableWeaponAttachment();// 0x46f6b154
	SoftObjectPath GetAnimationBPAsset();// 0x23b0e18
	class Object GetAnimationBP();// 0x23b0de8
	bool BPModifyAutoUse(bool bInAutoUse, STExtraBaseCharacter* OwnerPawn);// 0x23b0d10

--------------------------------
Class: WeaponAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0, Size: 24]
	enum socket;//[Offset: 0x18, Size: 1]

--------------------------------
