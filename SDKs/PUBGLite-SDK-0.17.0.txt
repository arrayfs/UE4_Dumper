Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20 , Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24 , Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28 , Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c , Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30 , Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34 , Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38 , Size: 4]
	Object[] ExtraReferencedObjects;//[Offset: 0x3c , Size: 12]
	Object[] PerModuleDataObjects;//[Offset: 0x48 , Size: 12]
	LevelStreaming[] StreamingLevels;//[Offset: 0x54 , Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60 , Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c , Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70 , Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74 , Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78 , Size: 4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c , Size: 124]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0xfc , Size: 4]
	NavigationSystem* NavigationSystem;//[Offset: 0x11c , Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x120 , Size: 4]
	GameStateBase* GameState;//[Offset: 0x124 , Size: 4]
	AISystemBase* AISystem;//[Offset: 0x128 , Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x12c , Size: 4]
	Level[] Levels;//[Offset: 0x130 , Size: 12]
	LevelCollection[] LevelCollections;//[Offset: 0x13c , Size: 12]
	Level* CurrentLevel;//[Offset: 0x14c , Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x150 , Size: 4]
	MaterialParameterCollectionInstance[] ParameterCollectionInstances;//[Offset: 0x154 , Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x160 , Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x164 , Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0x6e4 , Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72a , Size: 1]

--------------------------------
Class: Object
	function ExecuteUbergraph();// 0x1ddc250

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88 , Size: 4]
	Model* Model;//[Offset: 0x8c , Size: 4]
	ModelComponent[] ModelComponents;//[Offset: 0x90 , Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c , Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0 , Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4 , Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8 , Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac , Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0 , Size: 4]
	NavigationDataChunk[] NavDataChunks;//[Offset: 0xb4 , Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0 , Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4 , Size: 4]
	Vector[] StaticNavigableGeometry;//[Offset: 0xc8 , Size: 12]
	Guid[] StreamingTextureGuids;//[Offset: 0xd4 , Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150 , Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x154 , Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x164 , Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x168 , Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x174 , Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x174 , Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x174 , Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x1c8 , Size: 4]
	AssetUserData[] AssetUserData;//[Offset: 0x1d0 , Size: 12]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x514 , Size: 4]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x240 , Size: 4]
	float MinDrawDistance;//[Offset: 0x244 , Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x248 , Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x24c , Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x250 , Size: 4]
	byte DepthPriorityGroup;//[Offset: 0x254 , Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x255 , Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x256 , Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x256 , Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x256 , Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x256 , Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x257 , Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x257 , Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x257 , Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x257 , Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x257 , Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x257 , Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x257 , Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x257 , Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258 , Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258 , Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258 , Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258 , Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x258 , Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x258 , Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x258 , Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x258 , Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x25c , Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c , Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x270 , Size: 4]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274 , Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274 , Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274 , Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274 , Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274 , Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x274 , Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x274 , Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x274 , Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x275 , Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x275 , Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x275 , Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x275 , Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x275 , Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x275 , Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x275 , Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x275 , Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x276 , Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x276 , Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x276 , Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x276 , Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x276 , Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x276 , Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x276 , Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x276 , Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x277 , Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x277 , Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x277 , Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x277 , Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x278 , Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x27a , Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x27b , Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x27c , Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x280 , Size: 4]
	int TranslucencySortPriority;//[Offset: 0x284 , Size: 4]
	int VisibilityId;//[Offset: 0x288 , Size: 4]
	float BoundsScale;//[Offset: 0x298 , Size: 4]
	float LastSubmitTime;//[Offset: 0x29c , Size: 4]
	float LastRenderTime;//[Offset: 0x2a0 , Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x2a4 , Size: 4]
	Actor[] MoveIgnoreActors;//[Offset: 0x2a8 , Size: 12]
	PrimitiveComponent[] MoveIgnoreComponents;//[Offset: 0x2b4 , Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x2d0 , Size: 328]
	delegate OnComponentHit;//[Offset: 0x418 , Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x424 , Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x430 , Size: 12]
	delegate OnComponentWake;//[Offset: 0x43c , Size: 12]
	delegate OnComponentSleep;//[Offset: 0x448 , Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x460 , Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x46c , Size: 12]
	delegate OnClicked;//[Offset: 0x478 , Size: 12]
	delegate OnReleased;//[Offset: 0x484 , Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x490 , Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x49c , Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x4a8 , Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x4b4 , Size: 12]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x4c8 , Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x4cc , Size: 60]
	function WakeRigidBody();// 0x35db2e4
	function WakeAllRigidBodies();// 0x35db2c8
	function SetWalkableSlopeOverride();// 0x35db230
	function SetTranslucentSortPriority();// 0x35db1b8
	function SetSingleSampleShadowFromStationaryLights();// 0x13f789c
	function SetSimulatePhysics();// 0x35db130
	function SetRenderInMono();// 0x35db0b0
	function SetRenderInMainPass();// 0x35db030
	function SetRenderCustomDepth();// 0x35dafb0
	function SetReceivesDecals();// 0x35daf30
	function SetPhysMaterialOverride();// 0x35daeb0
	function SetPhysicsMaxAngularVelocityInRadians();// 0x35dad9c
	function SetPhysicsMaxAngularVelocityInDegrees();// 0x35dac78
	function SetPhysicsMaxAngularVelocity();// 0x35dac78
	function SetPhysicsLinearVelocity();// 0x35dab64
	function SetPhysicsAngularVelocityInRadians();// 0x35daa50
	function SetPhysicsAngularVelocityInDegrees();// 0x35da918
	function SetPhysicsAngularVelocity();// 0x35da918
	function SetOwnerNoSee();// 0x35da898
	function SetOnlyOwnerSee();// 0x35da818
	function SetNotifyRigidBodyCollision();// 0x35da790
	function SetMaterialByName();// 0x35da6cc
	function SetMaterial();// 0x35da608
	function SetMassScale();// 0x35da53c
	function SetMassOverrideInKg();// 0x35da420
	function SetLockedAxis();// 0x35da3a0
	function SetLinearDamping();// 0x13f4b94
	function SetEnableGravity();// 0x35da318
	function SetDrawIdeaOutline();// 0x35da298
	function SetCustomDepthStencilWriteMask();// 0x35da220
	function SetCustomDepthStencilValue();// 0x35da1a8
	function SetCullDistance();// 0x35da130
	function SetConstraintMode();// 0x35da0b0
	function SetCollisionResponseToChannel();// 0x35d9fec
	function SetCollisionResponseToAllChannels();// 0x35d9f6c
	function SetCollisionProfileName();// 0x35d9eec
	function SetCollisionObjectType();// 0x35d9e6c
	function SetCollisionEnabled();// 0x35d9dec
	function SetCenterOfMass();// 0x35d9d2c
	function SetCastShadow();// 0x35d9cac
	function SetBoundsScale();// 0x35d9c34
	function SetAngularDamping();// 0x350c120
	function SetAllPhysicsLinearVelocity();// 0x35d9b68
	function SetAllPhysicsAngularVelocityInRadians();// 0x35d9a8c
	function SetAllPhysicsAngularVelocityInDegrees();// 0x35d9984
	function SetAllPhysicsAngularVelocity();// 0x35d98a8
	function SetAllMassScale();// 0x13f2054
	function ScaleByMomentOfInertia();// 0x35d97bc
	function PutRigidBodyToSleep();// 0x35d9744
	function OverrideIdeaOutlineThickness();// 0x35d967c
	function OverrideIdeaOutlineColor();// 0x35d95a8
	function K2_LineTraceComponent();// 0x35d92b8
	function K2_IsQueryCollisionEnabled();// 0x35d9278
	function K2_IsPhysicsCollisionEnabled();// 0x35d9238
	function K2_IsCollisionEnabled();// 0x35d9200
	function IsOverlappingComponent();// 0x35d9180
	function IsOverlappingActor();// 0x35d9100
	function IsGravityEnabled();// 0x34e995c
	function IsAnyRigidBodyAwake();// 0x1512970
	function IgnoreComponentWhenMoving();// 0x35d903c
	function IgnoreActorWhenMoving();// 0x35d8f78
	function GetWalkableSlopeOverride();// 0x35d8f3c
	function GetPhysicsLinearVelocityAtPoint();// 0x35d8e58
	function GetPhysicsLinearVelocity();// 0x35d8dc4
	function GetPhysicsAngularVelocityInRadians();// 0x35d8d30
	function GetPhysicsAngularVelocityInDegrees();// 0x35d8c84
	function GetPhysicsAngularVelocity();// 0x35d8c84
	function GetOverlappingComponents();// 0x35d8bb8
	function GetOverlappingActors();// 0x35d8aa4
	function GetNumMaterials();// 0x1945dbc
	function GetMaterialFromCollisionFaceIndex();// 0x35d89c8
	function GetMaterial();// 0x35d8940
	function GetMassScale();// 0x35d88b8
	function GetMass();// 0x35d8888
	function GetLinearDamping();// 0x35d8858
	function GetInertiaTensor();// 0x35d87bc
	function GetCollisionResponseToChannel();// 0x35d8734
	function GetCollisionProfileName();// 0x35d86f4
	function GetCollisionObjectType();// 0x35d86c4
	function GetCollisionEnabled();// 0x35d8694
	function GetClosestPointOnCollision();// 0x35d8564
	function GetCenterOfMass();// 0x35d84d0
	function GetAngularDamping();// 0x35d84a0
	function CreateDynamicMaterialInstance();// 0x35d83d4
	function CreateAndSetMaterialInstanceDynamicFromMaterial();// 0x35d8308
	function CreateAndSetMaterialInstanceDynamic();// 0x35d8280
	function CopyArrayOfMoveIgnoreComponents();// 0x35d81c0
	function CopyArrayOfMoveIgnoreActors();// 0x35d8100
	function ClearMoveIgnoreComponents();// 0x35d80d0
	function ClearMoveIgnoreActors();// 0x35d80bc
	function CanCharacterStepUp();// 0x35d8034
	function AddTorqueInRadians();// 0x35d7df0
	function AddTorqueInDegrees();// 0x35d7f00
	function AddTorque();// 0x35d7df0
	function AddRadialImpulse();// 0x35d7c4c
	function AddRadialForce();// 0x35d7aa8
	function AddImpulseAtLocation();// 0x35d7990
	function AddImpulse();// 0x35d7878
	function AddForceAtLocationLocal();// 0x35d7760
	function AddForceAtLocation();// 0x35d7648
	function AddForce();// 0x35d7530
	function AddAngularImpulseInRadians();// 0x35d7418
	function AddAngularImpulseInDegrees();// 0x35d72dc
	function AddAngularImpulse();// 0x35d71c4

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0 , Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xc8 , Size: 4]
	FName AttachSocketName;//[Offset: 0xd0 , Size: 8]
	SceneComponent[] AttachChildren;//[Offset: 0xd8 , Size: 12]
	SceneComponent[] ClientAttachedChildren;//[Offset: 0xe4 , Size: 12]
	Vector RelativeLocation;//[Offset: 0x118 , Size: 12]
	Rotator RelativeRotation;//[Offset: 0x124 , Size: 12]
	Vector RelativeScale3D;//[Offset: 0x130 , Size: 12]
	Vector ComponentVelocity;//[Offset: 0x1a0 , Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac , Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac , Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ac , Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ac , Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ac , Size: 1]
	bool bVisibleInLowLevelDevice;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1ac , Size: 1]
	bool bVisibleInMidLevelDevice;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1ac , Size: 1]
	bool bVisibleInHighLevelDevice;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1ac , Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ad , Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ad , Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ad , Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ad , Size: 1]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ad , Size: 1]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ae , Size: 1]
	byte Mobility;//[Offset: 0x1af , Size: 1]
	byte DetailMode;//[Offset: 0x1b0 , Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x200 , Size: 12]
	function ToggleVisibility();// 0x35ee280
	function SnapTo();// 0x35ee1bc
	function SetWorldScale3D();// 0x35ee14c
	function SetVisibility();// 0x35ee078
	function SetRelativeScale3D();// 0x35ee000
	function SetHiddenInGame();// 0x35edf2c
	function SetAbsolute();// 0x35ede0c
	function ResetRelativeTransform();// 0x35eddf8
	function OnRep_Visibility();// 0x35edd78
	function OnRep_Transform();// 0x35edd64
	function OnRep_AttachSocketName();// 0x35edd50
	function OnRep_AttachParent();// 0x35edd50
	function OnRep_AttachChildren();// 0x35edd3c
	function K2_SetWorldTransform();// 0x35edb30
	function K2_SetWorldRotation();// 0x35ed9b4
	function K2_SetWorldLocationAndRotation();// 0x35ed7f8
	function K2_SetWorldLocation();// 0x35ed67c
	function K2_SetRelativeTransform();// 0x35ed470
	function K2_SetRelativeRotation();// 0x35ed2e8
	function K2_SetRelativeLocationAndRotation();// 0x35ed12c
	function K2_SetRelativeLocation();// 0x35ecfb0
	function K2_GetComponentToWorld();// 0x35ecf28
	function K2_GetComponentScale();// 0x35ecee0
	function K2_GetComponentRotation();// 0x35ece98
	function K2_GetComponentLocation();// 0x35ece50
	function K2_DetachFromComponent();// 0x35ecd00
	function K2_AttachToComponent();// 0x35ecb18
	function K2_AttachTo();// 0x35ec9bc
	function K2_AddWorldTransform();// 0x35ec7b0
	function K2_AddWorldRotation();// 0x35ec630
	function K2_AddWorldOffset();// 0x35ec4b4
	function K2_AddRelativeRotation();// 0x35ec338
	function K2_AddRelativeLocation();// 0x35ec1bc
	function K2_AddLocalTransform();// 0x35ebfb0
	function K2_AddLocalRotation();// 0x35ebe2c
	function K2_AddLocalOffset();// 0x35ebcb0
	function IsVisible();// 0x35ebc80
	function IsSimulatingPhysics();// 0x35ebbf8
	function IsAnySimulatingPhysics();// 0x35ebbc8
	function GetUpVector();// 0x35ebb80
	function GetSocketTransform();// 0x35eba58
	function GetSocketRotation();// 0x35eb9bc
	function GetSocketQuaternion();// 0x35eb920
	function GetSocketLocation();// 0x35eb884
	function GetRightVector();// 0x35eb83c
	function GetRelativeTransform();// 0x35eb7b4
	function GetPhysicsVolume();// 0x35eb78c
	function GetParentComponents();// 0x35eb6c0
	function GetNumChildrenComponents();// 0x35eb698
	function GetForwardVector();// 0x35c1b24
	function GetComponentVelocity();// 0x35eb648
	function GetComponentTransformViewTranslatedBP();// 0x35eb5cc
	function GetComponentLocal();// 0x35eb480
	function GetChildrenComponents();// 0x35eb364
	function GetChildComponent();// 0x35eb2e4
	function GetAttachSocketName();// 0x35eb2c8
	function GetAttachParent();// 0x14c9580
	function GetAllSocketNames();// 0x35eb208
	function DoesSocketExist();// 0x35eb180
	function DetachFromParent();// 0x35eb0a8

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20 , Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d , Size: 1]
	FName[] ComponentTags;//[Offset: 0x60 , Size: 12]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c , Size: 1]
	float NetUpdateFrequency;//[Offset: 0x70 , Size: 4]
	AssetUserData[] AssetUserData;//[Offset: 0x78 , Size: 12]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84 , Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84 , Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x85 , Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86 , Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86 , Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x86 , Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x86 , Size: 1]
	enum CreationMethod;//[Offset: 0x88 , Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x8c , Size: 12]
	delegate OnComponentActivated;//[Offset: 0x9c , Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xa8 , Size: 12]
	function ToggleActive();// 0x1471288
	function SetTickGroup();// 0x34aacfc
	function SetTickableWhenPaused();// 0x34aac7c
	function SetIsReplicated();// 0x34aabfc
	function SetComponentTickInterval();// 0x34aab84
	function SetComponentTickEnabled();// 0x34aaafc
	function SetAutoActivate();// 0x13b30d0
	function SetActive();// 0x34aaa24
	function RemoveTickPrerequisiteComponent();// 0x34aa9a4
	function RemoveTickPrerequisiteActor();// 0x34aa924
	function ReceiveTick();// 0x1ddc250
	function ReceiveEndPlay();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function OnRep_IsActive();// 0x34aa910
	function K2_DestroyComponent();// 0x34aa898
	function IsComponentTickEnabled();// 0x34aa870
	function IsBeingDestroyed();// 0x34aa850
	function IsActive();// 0x34aa820
	function GetOwner();// 0x34aa804
	function GetComponentTickInterval();// 0x34aa7dc
	function ForceNetUpdate();// 0x14755ec
	function Deactivate();// 0x1471250
	function ComponentHasTag();// 0x34aa75c
	function AddTickPrerequisiteComponent();// 0x34aa6dc
	function AddTickPrerequisiteActor();// 0x34aa65c
	function Activate();// 0x13b3048

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4 , Size: 1]
	byte EndTickGroup;//[Offset: 0x5 , Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8 , Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8 , Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8 , Size: 1]
	float TickInterval;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0 , Size: 4]
	float G;//[Offset: 0x4 , Size: 4]
	float B;//[Offset: 0x8 , Size: 4]
	float A;//[Offset: 0xc , Size: 4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x2e8 , Size: 4]
	int Priority;//[Offset: 0x2ec , Size: 4]
	float FluidFriction;//[Offset: 0x2f0 , Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4 , Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4 , Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x2c0 , Size: 1]
	Color BrushColor;//[Offset: 0x2c4 , Size: 4]
	int PolyFlags;//[Offset: 0x2c8 , Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2cc , Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2cc , Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2cc , Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2cc , Size: 1]
	Model* Brush;//[Offset: 0x2d0 , Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x2d4 , Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8 , Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x2dc , Size: 12]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c , Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]
	float CustomTimeDilation;//[Offset: 0x5c , Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60 , Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60 , Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60 , Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60 , Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60 , Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60 , Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60 , Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61 , Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61 , Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61 , Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61 , Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x61 , Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61 , Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61 , Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62 , Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x62 , Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x62 , Size: 1]
	byte RemoteRole;//[Offset: 0x63 , Size: 1]
	Actor* Owner;//[Offset: 0x64 , Size: 4]
	byte WorldParallelismID;//[Offset: 0x68 , Size: 1]
	FName NetDriverName;//[Offset: 0x70 , Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0x78 , Size: 52]
	float InitialLifeSpan;//[Offset: 0xac , Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xb0 , Size: 56]
	byte Role;//[Offset: 0xe8 , Size: 1]
	byte NetDormancy;//[Offset: 0xe9 , Size: 1]
	byte AutoReceiveInput;//[Offset: 0xea , Size: 1]
	int InputPriority;//[Offset: 0xec , Size: 4]
	InputComponent* InputComponent;//[Offset: 0xf0 , Size: 4]
	float NetCullDistanceSquared;//[Offset: 0xf4 , Size: 4]
	int NetTag;//[Offset: 0xf8 , Size: 4]
	float NetConsiderFrequency;//[Offset: 0x100 , Size: 4]
	float NetUpdateFrequency;//[Offset: 0x104 , Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x108 , Size: 4]
	float NetPriority;//[Offset: 0x110 , Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118 , Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x118 , Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x118 , Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x118 , Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x118 , Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x118 , Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x118 , Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x118 , Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x119 , Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x119 , Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x119 , Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x119 , Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x119 , Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x11a , Size: 1]
	Pawn* Instigator;//[Offset: 0x128 , Size: 4]
	Actor[] Children;//[Offset: 0x12c , Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x138 , Size: 4]
	MatineeActor[] ControllingMatineeActors;//[Offset: 0x13c , Size: 12]
	FName[] Layers;//[Offset: 0x150 , Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x15c , Size: 8]
	FName[] Tags;//[Offset: 0x164 , Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x170 , Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x178 , Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x184 , Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x190 , Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x19c , Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1a8 , Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1b4 , Size: 12]
	delegate OnClicked;//[Offset: 0x1c0 , Size: 12]
	delegate OnReleased;//[Offset: 0x1cc , Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x1d8 , Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x1e4 , Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x1f0 , Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x1fc , Size: 12]
	delegate OnActorHit;//[Offset: 0x208 , Size: 12]
	delegate OnDestroyed;//[Offset: 0x214 , Size: 12]
	delegate OnEndPlay;//[Offset: 0x220 , Size: 12]
	ActorComponent[] BlueprintCreatedComponents;//[Offset: 0x2a4 , Size: 12]
	ActorComponent[] InstanceComponents;//[Offset: 0x2b0 , Size: 12]
	function WasRecentlyRendered();// 0x34a79b4
	function UserConstructionScript();// 0x1ddc250
	function TearOff();// 0x13f070c
	function SnapRootComponentTo();// 0x34a78f8
	function SetTickGroup();// 0x34a7880
	function SetTickableWhenPaused();// 0x34a7800
	function SetReplicates();// 0x34a7780
	function SetReplicateMovement();// 0x34a76f8
	function SetOwner();// 0x143ed04
	function SetNetDormancy();// 0x34a7680
	function SetLifeSpan();// 0x34a7600
	function SetActorTickInterval();// 0x34a7588
	function SetActorTickEnabled();// 0x34a7508
	function SetActorScale3D();// 0x34a7498
	function SetActorRelativeScale3D();// 0x34a7428
	function SetActorHiddenInGame();// 0x34a73a0
	function SetActorEnableCollision();// 0x34a7320
	function RemoveTickPrerequisiteComponent();// 0x13f776c
	function RemoveTickPrerequisiteActor();// 0x13f7808
	function ReceiveTick();// 0x1ddc250
	function ReceiveRadialDamage();// 0x1ddc250
	function ReceivePointDamage();// 0x1ddc250
	function ReceiveHit();// 0x1ddc250
	function ReceiveEndPlay();// 0x1ddc250
	function ReceiveDestroyed();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function ReceiveAnyDamage();// 0x1ddc250
	function ReceiveActorOnReleased();// 0x1ddc250
	function ReceiveActorOnInputTouchLeave();// 0x1ddc250
	function ReceiveActorOnInputTouchEnter();// 0x1ddc250
	function ReceiveActorOnInputTouchEnd();// 0x1ddc250
	function ReceiveActorOnInputTouchBegin();// 0x1ddc250
	function ReceiveActorOnClicked();// 0x1ddc250
	function ReceiveActorEndOverlap();// 0x1ddc250
	function ReceiveActorEndCursorOver();// 0x1ddc250
	function ReceiveActorBeginOverlap();// 0x1ddc250
	function ReceiveActorBeginCursorOver();// 0x1ddc250
	function PrestreamTextures();// 0x34a720c
	function OnRep_ReplicateMovement();// 0x13cda9c
	function OnRep_ReplicatedMovement();// 0x1395678
	function OnRep_Owner();// 0x1471288
	function OnRep_Instigator();// 0x34a71f0
	function OnRep_AttachmentReplication();// 0x1475b04
	function MakeNoise();// 0x34a7054
	function MakeMIDForMaterial();// 0x163c3f8
	function K2_TeleportTo();// 0x34a6f8c
	function K2_SetActorTransform();// 0x34a6d70
	function K2_SetActorRotation();// 0x34a6c9c
	function K2_SetActorRelativeTransform();// 0x34a6a90
	function K2_SetActorRelativeRotation();// 0x34a690c
	function K2_SetActorRelativeLocation();// 0x34a6790
	function K2_SetActorLocationAndRotation();// 0x34a65c0
	function K2_SetActorLocation();// 0x34a6440
	function K2_OnReset();// 0x1ddc250
	function K2_OnEndViewTarget();// 0x1ddc250
	function K2_OnBecomeViewTarget();// 0x1ddc250
	function K2_GetRootComponent();// 0x34a6424
	function K2_GetActorRotation();// 0x34a631c
	function K2_GetActorLocation();// 0x34a62b8
	function K2_DetachFromActor();// 0x34a61b8
	function K2_DestroyComponent();// 0x34a6140
	function K2_DestroyActor();// 0x34a6124
	function K2_AttachToComponent();// 0x34a5f44
	function K2_AttachToActor();// 0x34a5d64
	function K2_AttachRootComponentToActor();// 0x34a5c10
	function K2_AttachRootComponentTo();// 0x34a5abc
	function K2_AddActorWorldTransform();// 0x34a58b0
	function K2_AddActorWorldRotation();// 0x34a5728
	function K2_AddActorWorldOffset();// 0x34a55ac
	function K2_AddActorLocalTransform();// 0x34a53a0
	function K2_AddActorLocalRotation();// 0x34a521c
	function K2_AddActorLocalOffset();// 0x34a50a0
	function IsOverlappingActor();// 0x34a5020
	function IsChildActor();// 0x34a4ff8
	function IsActorTickEnabled();// 0x34a4fd0
	function IsActorBeingDestroyed();// 0x34a4fac
	function HasAuthority();// 0x34a4f84
	function GetVerticalDistanceTo();// 0x34a4f04
	function GetVelocity();// 0x34a4eb4
	function GetTransform();// 0x34a4e20
	function GetTickableWhenPaused();// 0x34a4df8
	function GetSquaredDistanceTo();// 0x34a4d78
	function GetRemoteRole();// 0x34a4d5c
	function GetParentComponent();// 0x34a4d34
	function GetParentActor();// 0x34a4d0c
	function GetOwner();// 0x34a4cf0
	function GetOverlappingComponents();// 0x34a4c24
	function GetOverlappingActors();// 0x34a4b10
	function GetLifeSpan();// 0x34a4ae0
	function GetInstigatorController();// 0x34a4ab8
	function GetInstigator();// 0x34a4a90
	function GetInputVectorAxisValue();// 0x34a478c
	function GetInputAxisValue();// 0x34a470c
	function GetInputAxisKeyValue();// 0x34a4414
	function GetHorizontalDotProductTo();// 0x34a4394
	function GetHorizontalDistanceTo();// 0x34a4314
	function GetGameTimeSinceCreation();// 0x34a42ec
	function GetDotProductTo();// 0x34a426c
	function GetDistanceTo();// 0x34a41ec
	function GetComponentsByTag();// 0x34a4098
	function GetComponentsByClass();// 0x34a3f90
	function GetComponentByClass();// 0x34a3f10
	function GetAttachParentSocketName();// 0x34a3ed0
	function GetAttachParentActor();// 0x34a3ea8
	function GetAttachedActors();// 0x34a3ddc
	function GetAllChildActors();// 0x34a3cc0
	function GetActorUpVector();// 0x34a3c4c
	function GetActorTimeDilation();// 0x34a3c24
	function GetActorTickInterval();// 0x34a3bfc
	function GetActorScale3D();// 0x34a3bb4
	function GetActorRightVector();// 0x34a3b40
	function GetActorRelativeScale3D();// 0x34a3af8
	function GetActorForwardVector();// 0x34a3a84
	function GetActorEyesViewPoint();// 0x34a39a4
	function GetActorEnableCollision();// 0x34a3984
	function GetActorBounds();// 0x34a385c
	function ForceNetUpdate();// 0x14755ec
	function ForceNetConsider();// 0x34a3840
	function FlushNetDormancy();// 0x34a382c
	function EnableInput();// 0x34a37ac
	function DisableInput();// 0x151eff4
	function DetachRootComponentFromParent();// 0x34a372c
	function AddTickPrerequisiteComponent();// 0x34a36ac
	function AddTickPrerequisiteActor();// 0x34a362c
	function AddComponent();// 0x34a3440
	function ActorHasTag();// 0x34a33b8

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: Color
	byte B;//[Offset: 0x0 , Size: 1]
	byte G;//[Offset: 0x1 , Size: 1]
	byte R;//[Offset: 0x2 , Size: 1]
	byte A;//[Offset: 0x3 , Size: 1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x508 , Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x50c , Size: 4]
	Vector PrePivot;//[Offset: 0x510 , Size: 12]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c , Size: 52]
	FName BoneName;//[Offset: 0x50 , Size: 8]
	byte PhysicsType;//[Offset: 0x58 , Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59 , Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59 , Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59 , Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59 , Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59 , Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59 , Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59 , Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c , Size: 4]
	byte CollisionReponse;//[Offset: 0x60 , Size: 1]
	byte CollisionTraceFlag;//[Offset: 0x61 , Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0x68 , Size: 328]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x1b0 , Size: 16]
	float BuildScale;//[Offset: 0x1c0 , Size: 4]
	Vector BuildScale3D;//[Offset: 0x1c4 , Size: 12]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0 , Size: 12]
	KBoxElem[] BoxElems;//[Offset: 0xc , Size: 12]
	KSphylElem[] SphylElems;//[Offset: 0x18 , Size: 12]
	KConvexElem[] ConvexElems;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: KSphereElem.KShapeElem
	Matrix TM;//[Offset: 0x10 , Size: 64]
	Vector Center;//[Offset: 0x50 , Size: 12]
	float Radius;//[Offset: 0x5c , Size: 4]

--------------------------------
Class: KShapeElem

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0 , Size: 16]
	Plane YPlane;//[Offset: 0x10 , Size: 16]
	Plane ZPlane;//[Offset: 0x20 , Size: 16]
	Plane WPlane;//[Offset: 0x30 , Size: 16]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc , Size: 4]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]
	float Z;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: KBoxElem.KShapeElem
	Matrix TM;//[Offset: 0x10 , Size: 64]
	Quat Orientation;//[Offset: 0x50 , Size: 16]
	Vector Center;//[Offset: 0x60 , Size: 12]
	Rotator Rotation;//[Offset: 0x6c , Size: 12]
	float X;//[Offset: 0x78 , Size: 4]
	float Y;//[Offset: 0x7c , Size: 4]
	float Z;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]
	float Z;//[Offset: 0x8 , Size: 4]
	float W;//[Offset: 0xc , Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0 , Size: 4]
	float Yaw;//[Offset: 0x4 , Size: 4]
	float Roll;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: KSphylElem.KShapeElem
	Matrix TM;//[Offset: 0x10 , Size: 64]
	Quat Orientation;//[Offset: 0x50 , Size: 16]
	Vector Center;//[Offset: 0x60 , Size: 12]
	Rotator Rotation;//[Offset: 0x6c , Size: 12]
	float Radius;//[Offset: 0x78 , Size: 4]
	float Length;//[Offset: 0x7c , Size: 4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x10 , Size: 12]
	Box ElemBox;//[Offset: 0x1c , Size: 28]
	Transform Transform;//[Offset: 0x40 , Size: 48]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0 , Size: 12]
	Vector Max;//[Offset: 0xc , Size: 12]
	byte IsValid;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0 , Size: 16]
	Vector Translation;//[Offset: 0x10 , Size: 12]
	Vector Scale3D;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c , Size: 4]
	byte FrictionCombineMode;//[Offset: 0x20 , Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	float Restitution;//[Offset: 0x24 , Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x28 , Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29 , Size: 1]
	float Density;//[Offset: 0x2c , Size: 4]
	float RaiseMassToPower;//[Offset: 0x30 , Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x34 , Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x38 , Size: 4]
	byte SurfaceType;//[Offset: 0x3c , Size: 1]
	float TireFrictionScale;//[Offset: 0x40 , Size: 4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x44 , Size: 12]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0 , Size: 4]
	float FrictionScale;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19 , Size: 1]
	byte DOFMode;//[Offset: 0x1a , Size: 1]
	byte CollisionEnabled;//[Offset: 0x1b , Size: 1]
	FName CollisionProfileName;//[Offset: 0x20 , Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28 , Size: 44]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55 , Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55 , Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55 , Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55 , Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55 , Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55 , Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55 , Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55 , Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56 , Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56 , Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56 , Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56 , Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56 , Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56 , Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56 , Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56 , Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57 , Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57 , Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57 , Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57 , Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57 , Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58 , Size: 4]
	float MassInKgOverride;//[Offset: 0x64 , Size: 4]
	float LinearDamping;//[Offset: 0x68 , Size: 4]
	float AngularDamping;//[Offset: 0x6c , Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70 , Size: 12]
	Vector COMNudge;//[Offset: 0x7c , Size: 12]
	float MassScale;//[Offset: 0x88 , Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x8c , Size: 12]
	byte ObjectType;//[Offset: 0x98 , Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4 , Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4 , Size: 4]
	float MaxAngularVelocity;//[Offset: 0xb8 , Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc , Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0 , Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc4 , Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xc8 , Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0xe0 , Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8 , Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0xf0 , Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0 , Size: 32]
	ResponseChannel[] ResponseArray;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0 , Size: 1]
	byte WorldDynamic;//[Offset: 0x1 , Size: 1]
	byte Pawn;//[Offset: 0x2 , Size: 1]
	byte Visibility;//[Offset: 0x3 , Size: 1]
	byte Camera;//[Offset: 0x4 , Size: 1]
	byte PhysicsBody;//[Offset: 0x5 , Size: 1]
	byte Vehicle;//[Offset: 0x6 , Size: 1]
	byte Destructible;//[Offset: 0x7 , Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8 , Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9 , Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa , Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb , Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc , Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd , Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe , Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf , Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10 , Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11 , Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12 , Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13 , Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14 , Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15 , Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16 , Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17 , Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18 , Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19 , Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a , Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b , Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c , Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d , Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e , Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f , Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0 , Size: 8]
	byte Response;//[Offset: 0x8 , Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0 , Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0 , Size: 4]
	int Index;//[Offset: 0x4 , Size: 4]
	int SelectionIndex;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0 , Size: 12]
	Vector AngularVelocity;//[Offset: 0xc , Size: 12]
	Vector Location;//[Offset: 0x18 , Size: 12]
	Rotator Rotation;//[Offset: 0x24 , Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31 , Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32 , Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33 , Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0 , Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4 , Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10 , Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c , Size: 12]
	FName AttachSocket;//[Offset: 0x28 , Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: InputComponent.ActorComponent.Object
	function WasControllerKeyJustReleased();// 0x3522268
	function WasControllerKeyJustPressed();// 0x3522268
	function IsControllerKeyDown();// 0x3522268
	function GetTouchState();// 0x35220e8
	function GetControllerVectorKeyState();// 0x3521de4
	function GetControllerMouseDelta();// 0x3521d04
	function GetControllerKeyTimeDown();// 0x35218e8
	function GetControllerAnalogStickState();// 0x3521be0
	function GetControllerAnalogKeyState();// 0x35218e8

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4 , Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4 , Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c4 , Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c4 , Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c4 , Size: 1]
	float BaseEyeHeight;//[Offset: 0x2c8 , Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x2cc , Size: 1]
	enum AutoPossessAI;//[Offset: 0x2cd , Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x2d0 , Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2d4 , Size: 4]
	byte RemoteViewPitch;//[Offset: 0x2d8 , Size: 1]
	Controller* LastHitBy;//[Offset: 0x2dc , Size: 4]
	Controller* Controller;//[Offset: 0x2e0 , Size: 4]
	Vector ControlInputVector;//[Offset: 0x2ec , Size: 12]
	Vector LastControlInputVector;//[Offset: 0x2f8 , Size: 12]
	function SpawnDefaultController();// 0x35bad8c
	function SetUseViewTranslatedTransform();// 0x35bad04
	function SetCanAffectNavigationGeneration();// 0x35bac34
	function ReceiveUnpossessed();// 0x1ddc250
	function ReceivePossessed();// 0x1ddc250
	function PawnMakeNoise();// 0x35baae0
	function OnRep_PlayerState();// 0x156b3a0
	function OnRep_Controller();// 0x34e9b0c
	function LaunchPawn();// 0x35ba9cc
	function K2_GetMovementInputVector();// 0x35ba8cc
	function IsPlayerControlled();// 0x35ba99c
	function IsMoveInputIgnored();// 0x35ba96c
	function IsLocallyControlled();// 0x35ba93c
	function IsControlled();// 0x35ba914
	function GetPendingMovementInputVector();// 0x35ba8cc
	function GetNavAgentLocation();// 0x35ba87c
	function GetMovementComponent();// 0x14a292c
	function GetMovementBaseActor();// 0x35ba804
	function GetLastMovementInputVector();// 0x35ba7bc
	function GetControlRotation();// 0x35ba76c
	function GetController();// 0x1393f34
	function GetBaseAimRotation();// 0x35ba71c
	function DetachFromControllerPendingDestroy();// 0x35ba700
	function ConsumeMovementInputVector();// 0x35ba6b0
	function AddMovementInput();// 0x35ba59c
	function AddControllerYawInput();// 0x35ba51c
	function AddControllerRollInput();// 0x350c120
	function AddControllerPitchInput();// 0x13f4b94

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x2c4 , Size: 4]
	Character* Character;//[Offset: 0x2d0 , Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2d4 , Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2d8 , Size: 4]
	Rotator ControlRotation;//[Offset: 0x2dc , Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8 , Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8 , Size: 1]
	FName StateName;//[Offset: 0x2f8 , Size: 8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x300 , Size: 12]
	function UnPossess();// 0x34e9dd0
	function StopMovement();// 0x1511f1c
	function SetInitialLocationAndRotation();// 0x34e9cf0
	function SetIgnoreMoveInput();// 0x34e9c68
	function SetIgnoreLookInput();// 0x34e9be0
	function SetControlRotation();// 0x153f328
	function ResetIgnoreMoveInput();// 0x34e9bc4
	function ResetIgnoreLookInput();// 0x13f4b78
	function ResetIgnoreInputFlags();// 0x34e9ba8
	function ReceiveInstigatedAnyDamage();// 0x1ddc250
	function Possess();// 0x34e9b28
	function OnRep_PlayerState();// 0x34e9b0c
	function OnRep_Pawn();// 0x34e9af0
	function LineOfSightTo();// 0x34e99d4
	function K2_GetPawn();// 0x34e99ac
	function IsPlayerController();// 0x34e998c
	function IsMoveInputIgnored();// 0x34e995c
	function IsLookInputIgnored();// 0x34e992c
	function IsLocalPlayerController();// 0x34e98e8
	function IsLocalController();// 0x34e98b8
	function GetViewTarget();// 0x34e23f4
	function GetDesiredRotation();// 0x34e9868
	function GetControlRotation();// 0x34e9818
	function ClientSetRotation();// 0x34e974c
	function ClientSetLocation();// 0x34e9684
	function CastToPlayerController();// 0x34e965c

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x304 , Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x308 , Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x30c , Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x310 , Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x340 , Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x370 , Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x374 , Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x380 , Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x390 , Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x394 , Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395 , Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x398 , Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x39c , Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3a0 , Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x3a4 , Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x3ac , Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b0 , Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b0 , Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b0 , Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b0 , Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b0 , Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3b0 , Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b0 , Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b0 , Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b1 , Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x3b4 , Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x3b8 , Size: 4]
	int JumpMaxCount;//[Offset: 0x3bc , Size: 4]
	int JumpCurrentCount;//[Offset: 0x3c0 , Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c4 , Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x3c8 , Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x3e0 , Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x3ec , Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x3f8 , Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x490 , Size: 64]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x4d0 , Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x4e0 , Size: 224]
	function UnCrouch();// 0x34dfd00
	function StopJumping();// 0x155675c
	function StopAnimMontage();// 0x13e1a10
	function SetReplicateMovement();// 0x34a76f8
	function RootMotionDebugClientPrintOnScreen();// 0x34dfc3c
	function PlayAnimMontage();// 0x34dfb24
	function OnWalkingOffLedge();// 0x34df9a4
	function OnRep_RootMotion();// 0x34df990
	function OnRep_ReplicatedBasedMovement();// 0x34df974
	function OnRep_IsCrouched();// 0x15567f8
	function OnLaunched();// 0x1ddc250
	function OnLanded();// 0x1ddc250
	function OnJumped();// 0x34df958
	function LaunchCharacter();// 0x34df83c
	function K2_UpdateCustomMovement();// 0x1ddc250
	function K2_OnStartCrouch();// 0x1ddc250
	function K2_OnMovementModeChanged();// 0x1ddc250
	function K2_OnEndCrouch();// 0x1ddc250
	function Jump();// 0x13f4920
	function IsPlayingRootMotion();// 0x34df814
	function IsPlayingNetworkedRootMotionMontage();// 0x34df7ec
	function IsJumpProvidingForce();// 0x34df7bc
	function GetCurrentMontage();// 0x34df794
	function GetBaseTranslationOffset();// 0x34df770
	function GetBaseRotationOffsetRotator();// 0x34df70c
	function GetAnimRootMotionTranslationScale();// 0x34df6e4
	function Crouch();// 0x34df65c
	function ClientCheatWalk();// 0x34df640
	function ClientCheatGhost();// 0x34df624
	function ClientCheatFly();// 0x34df608
	function CanJumpInternal();// 0x34df5d8
	function CanJump();// 0x34df5b0
	function CacheInitialMeshOffset();// 0x34df4e8

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x614 , Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x618 , Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x61c , Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x620 , Size: 4]
	AnimInstance[] SubInstances;//[Offset: 0x624 , Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x630 , Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x634 , Size: 16]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x668 , Size: 12]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x674 , Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x694 , Size: 4]
	enum UseAsyncScene;//[Offset: 0x698 , Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x699 , Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x69a , Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x69b , Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x69c , Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x69c , Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x69c , Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x69c , Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x69c , Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x69c , Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x6a0 , Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6ac , Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6ac , Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6ac , Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6ac , Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6ac , Size: 1]
	float ClothBlendWeight;//[Offset: 0x6b0 , Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x6b8 , Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c4 , Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c4 , Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c4 , Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c5 , Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c6 , Size: 1]
	BodySetup* BodySetup;//[Offset: 0x6c8 , Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc , Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6cd , Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6cd , Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6cd , Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6cd , Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6cd , Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6cd , Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6cd , Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6cd , Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x6ce , Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x6d0 , Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x6e0 , Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x7a8 , Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x7ac , Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x7b0 , Size: 4]
	delegate OnAnimInitialized;//[Offset: 0x8a0 , Size: 12]
	AnimSequence* SequenceToPlay;//[Offset: 0x934 , Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0x938 , Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x93c , Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x93c , Size: 1]
	float DefaultPosition;//[Offset: 0x940 , Size: 4]
	float DefaultPlayRate;//[Offset: 0x944 , Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0x948 , Size: 4]
	float LastPoseTickTime;//[Offset: 0x94c , Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x988 , Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98a , Size: 1]
	enum CurrentTickMode;//[Offset: 0x98b , Size: 1]
	bool bEnableConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x990 , Size: 1]
	bool bEnableShouldUseLodMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x991 , Size: 1]
	bool bEnableShouldUseMidLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x992 , Size: 1]
	bool bEnableUseSkipMapForDistanceFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x993 , Size: 1]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0x994 , Size: 12]
	LODToSkipFrame[] ConfigLODToFrameSkipMap;//[Offset: 0x9a0 , Size: 12]
	float ConfigMinDistFromMainChar;//[Offset: 0x9ac , Size: 4]
	float ConfigMaxDistFromMainChar;//[Offset: 0x9b0 , Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0x9b4 , Size: 4]
	bool bEnableNewURO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8 , Size: 1]
	bool bShouldUseMinLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b9 , Size: 1]
	bool bShouldUseLodMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ba , Size: 1]
	bool bUseSkipMapForDistanceFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bb , Size: 1]
	float[] BaseVisibleDistanceFactorThesholds;//[Offset: 0x9bc , Size: 12]
	LODToSkipFrame[] LODToFrameSkipMap;//[Offset: 0x9c8 , Size: 12]
	float MinDistFromMainChar;//[Offset: 0x9d4 , Size: 4]
	float MaxDistFromMainChar;//[Offset: 0x9d8 , Size: 4]
	int BaseNonRenderedUpdateRate;//[Offset: 0x9dc , Size: 4]
	function UnbindClothFromMasterPoseComponent();// 0x35f5d70
	function SuspendClothingSimulation();// 0x35f5d5c
	function Stop();// 0x35f5d48
	function SnapshotPose();// 0x35f5c38
	function SetUpdateAnimationInEditor();// 0x13f789c
	function SetTickMode();// 0x35f5bc4
	function SetTeleportRotationThreshold();// 0x35f5b4c
	function SetTeleportDistanceThreshold();// 0x35f5ad4
	function SetPosition();// 0x35f5a10
	function SetPlayRate();// 0x35f5998
	function SetPhysicsBlendWeight();// 0x35f5920
	function SetNotifyRigidBodyCollisionBelow();// 0x35f57fc
	function SetMorphTarget();// 0x35f56e8
	function SetEnablePhysicsBlending();// 0x35f5668
	function SetEnableGravityOnAllBodiesBelow();// 0x35f554c
	function SetEnableBodyGravity();// 0x35f5484
	function SetDisableAnimCurves();// 0x35f5404
	function SetConstraintProfileForAll();// 0x35f5338
	function SetConstraintProfile();// 0x35f521c
	function SetClothMaxDistanceScale();// 0x35f51a4
	function SetBodyNotifyRigidBodyCollision();// 0x35f50d4
	function SetAnimInstanceClass();// 0x35f505c
	function SetAnimationMode();// 0x35f4fe4
	function SetAnimation();// 0x35f4f6c
	function SetAngularLimits();// 0x35f4e18
	function SetAllowedAnimCurvesEvaluation();// 0x35f4cfc
	function SetAllowAnimCurveEvaluation();// 0x35f4c7c
	function SetAllMotorsAngularVelocityDrive();// 0x35f4b5c
	function SetAllMotorsAngularPositionDrive();// 0x35f4a3c
	function SetAllMotorsAngularDriveParams();// 0x35f48ec
	function SetAllBodiesSimulatePhysics();// 0x35f486c
	function SetAllBodiesPhysicsBlendWeight();// 0x35f47a8
	function SetAllBodiesBelowSimulatePhysics();// 0x35f467c
	function SetAllBodiesBelowPhysicsBlendWeight();// 0x35f4508
	function ResumeClothingSimulation();// 0x35f44f4
	function ResetClothTeleportMode();// 0x35f44e0
	function ResetAllowedAnimCurveEvaluation();// 0x35f44cc
	function ResetAllBodiesSimulatePhysics();// 0x35f44b8
	function PlayAnimation();// 0x35f43f4
	function Play();// 0x35f4374
	function OverrideAnimationData();// 0x35f41cc
	function K2_GetClosestPointOnPhysicsAsset();// 0x35f3fe0
	function IsPlaying();// 0x35f3fb8
	function IsClothingSimulationSuspended();// 0x35f3f90
	function IsBodyGravityEnabled();// 0x35f3f10
	function GetTickMode();// 0x35f3ef4
	function GetTeleportRotationThreshold();// 0x35f3ecc
	function GetTeleportDistanceThreshold();// 0x35f3ecc
	function GetSubAnimInstances();// 0x35f3e0c
	function GetSkeletalCenterOfMass();// 0x35f3dc4
	function GetPostProcessInstance();// 0x1517710
	function GetPosition();// 0x35f3d9c
	function GetPlayRate();// 0x35f3d74
	function GetMorphTarget();// 0x35f3cf4
	function GetDisableAnimCurves();// 0x35f3cd0
	function GetCurrentJointAngles();// 0x35f3b50
	function GetClothMaxDistanceScale();// 0x35f3b28
	function GetBoneMass();// 0x35f3a54
	function GetAnimInstance();// 0x35f3a2c
	function GetAnimationMode();// 0x35f3a04
	function GetAllowedAnimCurveEvaluate();// 0x35f39e4
	function ForceClothNextUpdateTeleportAndReset();// 0x35f39d0
	function ForceClothNextUpdateTeleport();// 0x35f39bc
	function FindConstraintBoneName();// 0x35f3934
	function ClearMorphTargets();// 0x35f3920
	function BreakConstraint();// 0x35f3810
	function BindClothToMasterPoseComponent();// 0x35f37fc
	function AllowAnimCurveEvaluation();// 0x35f3730
	function AddImpulseToAllBodiesBelow();// 0x35f35c8
	function AddForceToAllBodiesBelow();// 0x35f3460
	function AccumulateAllBodiesBelowPhysicsBlendWeight();// 0x35f3340

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x524 , Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x528 , Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x574 , Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x590 , Size: 4]
	int ForcedLodModel;//[Offset: 0x594 , Size: 4]
	int MinLodModel;//[Offset: 0x598 , Size: 4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5a8 , Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x5b4 , Size: 4]
	Color WireframeColor;//[Offset: 0x5b8 , Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5bc , Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5bc , Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5bc , Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5bc , Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5cc , Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5cc , Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5cc , Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x5cd , Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ce , Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5cf , Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5cf , Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5cf , Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x5d0 , Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d1 , Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d1 , Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x5d4 , Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d8 , Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x5e4 , Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600 , Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601 , Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x602 , Size: 1]
	function UnHideBoneByName();// 0x35f99c8
	function TransformToBoneSpace();// 0x35f9804
	function TransformFromBoneSpace();// 0x35f9640
	function SetVertexColorOverride_LinearColor();// 0x35f9530
	function SetSkinWeightOverride();// 0x35f9420
	function SetSkeletalMesh();// 0x35f9354
	function SetPhysicsAsset();// 0x35f9288
	function SetMinLOD();// 0x35f9210
	function SetMasterPoseComponent();// 0x35f9198
	function SetForcedLOD();// 0x35f9120
	function SetCastCapsuleIndirectShadow();// 0x35f90a0
	function SetCastCapsuleDirectShadow();// 0x35f9020
	function SetCapsuleIndirectShadowMinVisibility();// 0x35f8fa8
	function IsBoneHiddenByName();// 0x35f8f28
	function HideBoneByName();// 0x35f8e64
	function GetSocketBoneName();// 0x35f8dd8
	function GetParentBone();// 0x35f8d4c
	function GetNumBones();// 0x35f8d24
	function GetBoneName();// 0x35f8c9c
	function GetBoneIndex();// 0x35f8c1c
	function FindClosestBone_K2();// 0x35f8aa4
	function ClearVertexColorOverride();// 0x35f8a2c
	function ClearSkinWeightOverride();// 0x35f89b4
	function BoneIsChildOf();// 0x35f88e8

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface[] OverrideMaterials;//[Offset: 0x508 , Size: 12]
	function SetVectorParameterValueOnMaterials();// 0x3599c70
	function SetScalarParameterValueOnMaterials();// 0x3599bac
	function PrestreamTextures();// 0x3599a98
	function IsMaterialSlotNameValid();// 0x3599a10
	function GetMaterialSlotNames();// 0x3599948
	function GetMaterials();// 0x3599880
	function GetMaterialIndex();// 0x35997f8

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c , Size: 4]
	float CullingScreenSize;//[Offset: 0x30 , Size: 4]
	BoxSphereBounds ImportedBounds;//[Offset: 0x34 , Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x50 , Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x6c , Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x78 , Size: 12]
	SkeletalMaterial[] Materials;//[Offset: 0x84 , Size: 12]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0x90 , Size: 12]
	byte SkelMirrorAxis;//[Offset: 0x9c , Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x9d , Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xa0 , Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac , Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac , Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xac , Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xac , Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xac , Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xac , Size: 1]
	BodySetup* BodySetup;//[Offset: 0xb0 , Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xb4 , Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xb8 , Size: 4]
	NodeMappingContainer[] NodeMappingData;//[Offset: 0xbc , Size: 12]
	MorphTarget[] MorphTargets;//[Offset: 0xc8 , Size: 12]
	ClothingAssetData_Legacy[] ClothingAssets;//[Offset: 0x1e0 , Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x1ec , Size: 4]
	ClothingAssetBase[] MeshClothingAssets;//[Offset: 0x1f0 , Size: 12]
	AssetUserData[] AssetUserData;//[Offset: 0x1fc , Size: 12]
	SkeletalMeshSocket[] Sockets;//[Offset: 0x20c , Size: 12]
	function NumSockets();// 0x35f1180
	function IsSectionUsingCloth();// 0x35f10b4
	function GetSocketByIndex();// 0x35f1034
	function GetNodeMappingContainer();// 0x35f0fb4
	function GetImportedBounds();// 0x35f0f60
	function GetBounds();// 0x35f0f0c
	function FindSocketAndIndex();// 0x35f0e30
	function FindSocket();// 0x35f0db0

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x20 , Size: 12]
	Transform[] RefLocalPoses;//[Offset: 0x2c , Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108 , Size: 16]
	VirtualBone[] VirtualBones;//[Offset: 0x118 , Size: 12]
	SkeletalMeshSocket[] Sockets;//[Offset: 0x124 , Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c , Size: 60]
	BlendProfile[] BlendProfiles;//[Offset: 0x1b8 , Size: 12]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x1c4 , Size: 12]
	AssetUserData[] AssetUserData;//[Offset: 0x270 , Size: 12]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0 , Size: 8]
	int ParentIndex;//[Offset: 0x8 , Size: 4]
	byte TranslationRetargetingMode;//[Offset: 0xc , Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0 , Size: 4]
	int B;//[Offset: 0x4 , Size: 4]
	int C;//[Offset: 0x8 , Size: 4]
	int D;//[Offset: 0xc , Size: 4]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0 , Size: 8]
	FName TargetBoneName;//[Offset: 0x8 , Size: 8]
	FName VirtualBoneName;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20 , Size: 8]
	FName BoneName;//[Offset: 0x28 , Size: 8]
	Vector RelativeLocation;//[Offset: 0x30 , Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c , Size: 12]
	Vector RelativeScale;//[Offset: 0x48 , Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	function InitializeSocketFromLocation();// 0x35f78cc
	function GetSocketLocation();// 0x35f783c

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20 , Size: 4]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0 , Size: 24]
	float BlendScale;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0 , Size: 8]
	FName[] SlotNames;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0 , Size: 12]
	Vector BoxExtent;//[Offset: 0xc , Size: 12]
	float SphereRadius;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0 , Size: 4]
	bool bEnableShadowCasting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool bRecomputeTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	FName MaterialSlotName;//[Offset: 0x8 , Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10 , Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28 , Size: 24]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20 , Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x28 , Size: 20]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x3c , Size: 12]
	function SetStreamingTextureMipOffset();// 0x157161c
	function SetForceMipLevelsToBeResident();// 0x3597410
	function GetPhysicalMaterial();// 0x35973e0
	function GetBaseMaterial();// 0x35973b8

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c , Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0 , Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4 , Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14 , Size: 16]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	float EmissiveBoost;//[Offset: 0x4 , Size: 4]
	float DiffuseBoost;//[Offset: 0x8 , Size: 4]
	float ExportResolutionScale;//[Offset: 0xc , Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10 , Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10 , Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10 , Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0 , Size: 4]
	int UVChannelIndex;//[Offset: 0x4 , Size: 4]
	FName TextureName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	float LocalUVDensities;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0 , Size: 8]
	FString SubPathString;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0 , Size: 4]
	byte BoneFlipAxis;//[Offset: 0x4 , Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	float ScreenSize;//[Offset: 0x0 , Size: 4]
	float LODHysteresis;//[Offset: 0x4 , Size: 4]
	int[] LODMaterialMap;//[Offset: 0x8 , Size: 12]
	bool[] bEnableShadowCasting;//[Offset: 0x14 , Size: 12]
	TriangleSortSettings[] TriangleSortSettings;//[Offset: 0x20 , Size: 12]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c , Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x30 , Size: 328]
	SimplygonRemeshingSettings RemeshingSettings;//[Offset: 0x178 , Size: 140]
	GroupedSkeletalOptimizationSettings OptimizationSettings;//[Offset: 0x204 , Size: 532]
	FName[] RemovedBones;//[Offset: 0x418 , Size: 12]
	BoneReference[] BonesToRemove;//[Offset: 0x424 , Size: 12]
	AnimSequence* BakePose;//[Offset: 0x430 , Size: 4]
	FString SourceImportFilename;//[Offset: 0x434 , Size: 12]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x440 , Size: 1]

--------------------------------
Class: TriangleSortSettings
	byte TriangleSorting;//[Offset: 0x0 , Size: 1]
	byte CustomLeftRightAxis;//[Offset: 0x1 , Size: 1]
	FName CustomLeftRightBoneName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte ReductionMethod;//[Offset: 0x0 , Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4 , Size: 4]
	float MaxDeviationPercentage;//[Offset: 0x8 , Size: 4]
	int ScreenSize;//[Offset: 0xc , Size: 4]
	float WeldingThreshold;//[Offset: 0x10 , Size: 4]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	float NormalsThreshold;//[Offset: 0x18 , Size: 4]
	byte SilhouetteImportance;//[Offset: 0x1c , Size: 1]
	byte TextureImportance;//[Offset: 0x1d , Size: 1]
	byte ShadingImportance;//[Offset: 0x1e , Size: 1]
	byte SkinningImportance;//[Offset: 0x1f , Size: 1]
	float BoneReductionRatio;//[Offset: 0x20 , Size: 4]
	int MaxBonesPerVertex;//[Offset: 0x24 , Size: 4]
	bool bTransferMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x2c , Size: 12]
	int BaseLOD;//[Offset: 0x38 , Size: 4]
	int LODChainLastIndex;//[Offset: 0x3c , Size: 4]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	bool bUseVertexWeightsForMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41 , Size: 1]
	bool bSimplifyMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42 , Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x44 , Size: 104]
	MaterialProxySettings MaterialSettings;//[Offset: 0xac , Size: 148]
	bool bForceRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140 , Size: 1]
	AnimSequence* BakePose;//[Offset: 0x144 , Size: 4]

--------------------------------
Class: SimplygonMaterialLODSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	byte MaterialLODType;//[Offset: 0x1 , Size: 1]
	bool bUseAutomaticSizes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	byte TextureWidth;//[Offset: 0x3 , Size: 1]
	byte TextureHeight;//[Offset: 0x4 , Size: 1]
	byte SamplingQuality;//[Offset: 0x5 , Size: 1]
	int GutterSpace;//[Offset: 0x8 , Size: 4]
	byte TextureStrech;//[Offset: 0xc , Size: 1]
	bool bReuseExistingCharts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	SimplygonChannelCastingSettings[] ChannelsToCast;//[Offset: 0x10 , Size: 12]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	bool bBakeActorData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d , Size: 1]
	bool bAllowMultiMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e , Size: 1]
	bool bPreferTwoSideMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f , Size: 1]
	bool bUseVertexWeights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	OutputMaterialInfo OutputMaterialInfo;//[Offset: 0x24 , Size: 68]

--------------------------------
Class: SimplygonChannelCastingSettings
	byte MaterialChannel;//[Offset: 0x0 , Size: 1]
	byte Caster;//[Offset: 0x1 , Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	byte ColorChannels;//[Offset: 0x3 , Size: 1]
	int BitsPerChannel;//[Offset: 0x4 , Size: 4]
	bool bUseSRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	bool bBakeVertexColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9 , Size: 1]
	bool bFlipBackfacingNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa , Size: 1]
	bool bUseTangentSpaceNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb , Size: 1]
	bool bFlipGreenChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]

--------------------------------
Class: OutputMaterialInfo

--------------------------------
Class: MaterialProxySettings
	IntPoint TextureSize;//[Offset: 0x0 , Size: 8]
	byte TextureSizingType;//[Offset: 0x8 , Size: 1]
	float GutterSpace;//[Offset: 0xc , Size: 4]
	enum SamplingQuality;//[Offset: 0x10 , Size: 1]
	enum UVStrech;//[Offset: 0x11 , Size: 1]
	bool bSplitProxyMaterialBasedOnType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	bool bUseTangentSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13 , Size: 1]
	bool bNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	bool bMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15 , Size: 1]
	float MetallicConstant;//[Offset: 0x18 , Size: 4]
	bool bRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	float RoughnessConstant;//[Offset: 0x20 , Size: 4]
	bool bSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	float SpecularConstant;//[Offset: 0x28 , Size: 4]
	bool bEmissiveMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]
	bool bOpacityMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d , Size: 1]
	float OpacityConstant;//[Offset: 0x30 , Size: 4]
	float AOConstant;//[Offset: 0x34 , Size: 4]
	bool bOpacityMaskMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	float OpacityMaskConstant;//[Offset: 0x3c , Size: 4]
	bool bAmbientOcclusionMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	float AmbientOcclusionConstant;//[Offset: 0x44 , Size: 4]
	IntPoint DiffuseTextureSize;//[Offset: 0x48 , Size: 8]
	IntPoint NormalTextureSize;//[Offset: 0x50 , Size: 8]
	IntPoint MetallicTextureSize;//[Offset: 0x58 , Size: 8]
	IntPoint RoughnessTextureSize;//[Offset: 0x60 , Size: 8]
	IntPoint SpecularTextureSize;//[Offset: 0x68 , Size: 8]
	IntPoint EmissiveTextureSize;//[Offset: 0x70 , Size: 8]
	IntPoint OpacityTextureSize;//[Offset: 0x78 , Size: 8]
	IntPoint OpacityMaskTextureSize;//[Offset: 0x80 , Size: 8]
	IntPoint AmbientOcclusionTextureSize;//[Offset: 0x88 , Size: 8]
	byte MaterialMergeType;//[Offset: 0x90 , Size: 1]
	byte BlendMode;//[Offset: 0x91 , Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0 , Size: 4]
	int Y;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c , Size: 4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0x80 , Size: 12]
	byte AdditiveAnimType;//[Offset: 0xf0 , Size: 1]
	byte RefPoseType;//[Offset: 0xf1 , Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0xf4 , Size: 4]
	int RefFrameIndex;//[Offset: 0xf8 , Size: 4]
	int EncodingPkgVersion;//[Offset: 0xfc , Size: 4]
	FName RetargetSource;//[Offset: 0x100 , Size: 8]
	enum Interpolation;//[Offset: 0x108 , Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109 , Size: 1]
	byte RootMotionRootLock;//[Offset: 0x10a , Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b , Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c , Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x110 , Size: 12]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x5c , Size: 12]
	float SequenceLength;//[Offset: 0x68 , Size: 4]
	float RateScale;//[Offset: 0x6c , Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70 , Size: 12]
	function GetPlayLength();// 0x13d16b0

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20 , Size: 4]
	AnimMetaData[] MetaData;//[Offset: 0x44 , Size: 12]
	AssetUserData[] AssetUserData;//[Offset: 0x50 , Size: 12]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x24 , Size: 4]
	float TriggerTimeOffset;//[Offset: 0x28 , Size: 4]
	float EndTriggerTimeOffset;//[Offset: 0x2c , Size: 4]
	float TriggerWeightThreshold;//[Offset: 0x30 , Size: 4]
	FName NotifyName;//[Offset: 0x38 , Size: 8]
	AnimNotify* Notify;//[Offset: 0x40 , Size: 4]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x44 , Size: 4]
	float Duration;//[Offset: 0x48 , Size: 4]
	AnimLinkableElement EndLink;//[Offset: 0x4c , Size: 36]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70 , Size: 1]
	byte MontageTickType;//[Offset: 0x71 , Size: 1]
	float NotifyTriggerChance;//[Offset: 0x74 , Size: 4]
	byte NotifyFilterType;//[Offset: 0x78 , Size: 1]
	int NotifyFilterLOD;//[Offset: 0x7c , Size: 4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80 , Size: 1]
	int TrackIndex;//[Offset: 0x84 , Size: 4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x4 , Size: 4]
	int SlotIndex;//[Offset: 0x8 , Size: 4]
	int SegmentIndex;//[Offset: 0xc , Size: 4]
	byte LinkMethod;//[Offset: 0x10 , Size: 1]
	byte CachedLinkMethod;//[Offset: 0x11 , Size: 1]
	float SegmentBeginTime;//[Offset: 0x14 , Size: 4]
	float SegmentLength;//[Offset: 0x18 , Size: 4]
	float LinkValue;//[Offset: 0x1c , Size: 4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c , Size: 44]
	float BlendInTime;//[Offset: 0xa8 , Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac , Size: 44]
	float BlendOutTime;//[Offset: 0xd8 , Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc , Size: 4]
	FName SyncGroup;//[Offset: 0xe0 , Size: 8]
	int SyncSlotIndex;//[Offset: 0xe8 , Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xec , Size: 24]
	CompositeSection[] CompositeSections;//[Offset: 0x104 , Size: 12]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x110 , Size: 12]
	BranchingPoint[] BranchingPoints;//[Offset: 0x11c , Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128 , Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129 , Size: 1]
	byte RootMotionRootLock;//[Offset: 0x12a , Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x12c , Size: 12]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x138 , Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144 , Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x168 , Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0 , Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4 , Size: 4]
	float blendTime;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20 , Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74 , Size: 1]
	function GetFloatValue();// 0x34ecdcc

--------------------------------
Class: CurveBase.Object
	function GetValueRange();// 0x34ec808
	function GetTimeRange();// 0x34ec728

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40 , Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x41 , Size: 1]
	float DefaultValue;//[Offset: 0x44 , Size: 4]
	RichCurveKey[] Keys;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4 , Size: 60]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0 , Size: 1]
	byte TangentMode;//[Offset: 0x1 , Size: 1]
	byte TangentWeightMode;//[Offset: 0x2 , Size: 1]
	float Time;//[Offset: 0x4 , Size: 4]
	float Value;//[Offset: 0x8 , Size: 4]
	float ArriveTangent;//[Offset: 0xc , Size: 4]
	float ArriveTangentWeight;//[Offset: 0x10 , Size: 4]
	float LeaveTangent;//[Offset: 0x14 , Size: 4]
	float LeaveTangentWeight;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0 , Size: 8]
	float Time;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x28 , Size: 8]
	float StartTime;//[Offset: 0x30 , Size: 4]
	FName NextSectionName;//[Offset: 0x38 , Size: 8]
	AnimMetaData[] MetaData;//[Offset: 0x40 , Size: 12]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0 , Size: 8]
	AnimTrack AnimTrack;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0 , Size: 4]
	float StartPos;//[Offset: 0x4 , Size: 4]
	float AnimStartTime;//[Offset: 0x8 , Size: 4]
	float AnimEndTime;//[Offset: 0xc , Size: 4]
	float AnimPlayRate;//[Offset: 0x10 , Size: 4]
	int LoopingCount;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x28 , Size: 8]
	float DisplayTime;//[Offset: 0x30 , Size: 4]
	float TriggerTimeOffset;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0 , Size: 4]
	float TriggerTime;//[Offset: 0x4 , Size: 4]
	byte NotifyEventType;//[Offset: 0x8 , Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0 , Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4 , Size: 4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8 , Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0 , Size: 4]
	float alpha;//[Offset: 0xc , Size: 4]

--------------------------------
Class: AnimNotify.Object
	function Received_Notify();// 0x1ddc250
	function GetNotifyName();// 0x34bc238

--------------------------------
Class: AnimNotifyState.Object
	function Received_NotifyTick();// 0x1ddc250
	function Received_NotifyEnd();// 0x1ddc250
	function Received_NotifyBegin();// 0x1ddc250
	function GetNotifyName();// 0x34bc238

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x1c , Size: 84]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0 , Size: 8]
	SmartName Name;//[Offset: 0x8 , Size: 16]
	int CurveTypeFlags;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: SimplygonRemeshingSettings
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	int ScreenSize;//[Offset: 0x4 , Size: 4]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	float HardAngleThreshold;//[Offset: 0xc , Size: 4]
	int MergeDistance;//[Offset: 0x10 , Size: 4]
	bool bUseClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	float ClippingLevel;//[Offset: 0x18 , Size: 4]
	int AxisIndex;//[Offset: 0x1c , Size: 4]
	bool bPlaneNegativeHalfspace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	bool bUseMassiveLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	bool bUseAggregateLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22 , Size: 1]
	SimplygonMaterialLODSettings MaterialLODSettings;//[Offset: 0x24 , Size: 104]

--------------------------------
Class: GroupedSkeletalOptimizationSettings
	bool bAutoComputeLODDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	enum LevelOfDetailType;//[Offset: 0x1 , Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x4 , Size: 328]
	MeshProxySettings ProxySettings;//[Offset: 0x14c , Size: 196]
	bool bForceLODRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210 , Size: 1]

--------------------------------
Class: MeshProxySettings
	int ScreenSize;//[Offset: 0x0 , Size: 4]
	MaterialProxySettings MaterialSettings;//[Offset: 0x4 , Size: 148]
	int TextureWidth;//[Offset: 0x98 , Size: 4]
	int TextureHeight;//[Offset: 0x9c , Size: 4]
	bool bExportNormalMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0 , Size: 1]
	bool bExportMetallicMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1 , Size: 1]
	bool bExportRoughnessMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa2 , Size: 1]
	bool bExportSpecularMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3 , Size: 1]
	bool bCalculateCorrectLODModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	float MergeDistance;//[Offset: 0xa8 , Size: 4]
	float HardAngleThreshold;//[Offset: 0xac , Size: 4]
	int LightMapResolution;//[Offset: 0xb0 , Size: 4]
	bool bComputeLightMapResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4 , Size: 1]
	bool bRecalculateNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5 , Size: 1]
	bool bBakeVertexData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6 , Size: 1]
	bool bUseLandscapeCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7 , Size: 1]
	byte LandscapeCullingPrecision;//[Offset: 0xb8 , Size: 1]
	bool bAssignLODGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9 , Size: 1]
	int LODGroupIndex;//[Offset: 0xbc , Size: 4]
	bool bAggregateMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0 , Size: 1]
	enum AggregatorMode;//[Offset: 0xc1 , Size: 1]
	bool bUseCustomHemisphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc2 , Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x1c , Size: 12]
	SkeletalBodySetup[] SkeletalBodySetups;//[Offset: 0x28 , Size: 12]
	PhysicsConstraintTemplate[] ConstraintSetup;//[Offset: 0x34 , Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40 , Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc , Size: 4]
	BodySetup[] BodySetup;//[Offset: 0xc0 , Size: 12]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x258 , Size: 12]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0 , Size: 8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0 , Size: 8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	float OrientationStrength;//[Offset: 0xc , Size: 4]
	float AngularVelocityStrength;//[Offset: 0x10 , Size: 4]
	float PositionStrength;//[Offset: 0x14 , Size: 4]
	float VelocityStrength;//[Offset: 0x18 , Size: 4]
	float MaxLinearForce;//[Offset: 0x1c , Size: 4]
	float MaxAngularForce;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20 , Size: 416]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1c0 , Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc , Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10 , Size: 8]
	FName ConstraintBone1;//[Offset: 0x18 , Size: 8]
	FName ConstraintBone2;//[Offset: 0x20 , Size: 8]
	Vector Pos1;//[Offset: 0x28 , Size: 12]
	Vector PriAxis1;//[Offset: 0x34 , Size: 12]
	Vector SecAxis1;//[Offset: 0x40 , Size: 12]
	Vector Pos2;//[Offset: 0x4c , Size: 12]
	Vector PriAxis2;//[Offset: 0x58 , Size: 12]
	Vector SecAxis2;//[Offset: 0x64 , Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70 , Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84 , Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0 , Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4 , Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8 , Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc , Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10 , Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c , Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c , Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68 , Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4 , Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100 , Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100 , Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100 , Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100 , Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100 , Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14 , Size: 4]
	byte XMotion;//[Offset: 0x18 , Size: 1]
	byte YMotion;//[Offset: 0x19 , Size: 1]
	byte ZMotion;//[Offset: 0x1a , Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0 , Size: 4]
	float Damping;//[Offset: 0x4 , Size: 4]
	float Restitution;//[Offset: 0x8 , Size: 4]
	float ContactDistance;//[Offset: 0xc , Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14 , Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18 , Size: 4]
	byte Swing1Motion;//[Offset: 0x1c , Size: 1]
	byte Swing2Motion;//[Offset: 0x1d , Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14 , Size: 4]
	byte TwistMotion;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0 , Size: 12]
	Vector VelocityTarget;//[Offset: 0xc , Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18 , Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28 , Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38 , Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0 , Size: 4]
	float Damping;//[Offset: 0x4 , Size: 4]
	float MaxForce;//[Offset: 0x8 , Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc , Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0 , Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10 , Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20 , Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30 , Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c , Size: 12]
	byte AngularDriveMode;//[Offset: 0x48 , Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0 , Size: 260]
	FName ProfileName;//[Offset: 0x108 , Size: 8]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeMap> NodeMapping;//[Offset: 0x1c , Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58 , Size: 40]

--------------------------------
Class: NodeMap
	FName TargetNodeName;//[Offset: 0x0 , Size: 8]
	Transform SourceToTargetTransform;//[Offset: 0x10 , Size: 48]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	class Object* ParentClass;//[Offset: 0x3c , Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40 , Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48 , Size: 4]
	ActorComponent[] ComponentTemplates;//[Offset: 0x4c , Size: 12]
	TimelineTemplate[] Timelines;//[Offset: 0x58 , Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64 , Size: 4]
	byte BlueprintType;//[Offset: 0x68 , Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c , Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8 , Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c , Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20 , Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	Guid BlueprintGuid;//[Offset: 0x28 , Size: 16]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node[] RootNodes;//[Offset: 0x1c , Size: 12]
	SCS_Node[] AllNodes;//[Offset: 0x28 , Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34 , Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38 , Size: 4]
	SCS_Node[] ActorComponentNodes;//[Offset: 0x3c , Size: 12]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c , Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20 , Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28 , Size: 56]
	FName VariableName;//[Offset: 0x60 , Size: 8]
	FName AttachToName;//[Offset: 0x68 , Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70 , Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78 , Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80 , Size: 1]
	SCS_Node[] ChildNodes;//[Offset: 0x84 , Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x90 , Size: 12]
	Guid VariableGuid;//[Offset: 0x9c , Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad , Size: 1]
	FName NativeComponentName;//[Offset: 0xb0 , Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8 , Size: 1]
	FName InternalVariableName;//[Offset: 0xc0 , Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0 , Size: 8]
	int ArrayIndex;//[Offset: 0x8 , Size: 4]
	Struct* PropertyScope;//[Offset: 0xc , Size: 4]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0 , Size: 8]
	FString DataValue;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c , Size: 4]
	byte LengthMode;//[Offset: 0x20 , Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21 , Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21 , Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21 , Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21 , Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21 , Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x24 , Size: 12]
	TTFloatTrack[] FloatTracks;//[Offset: 0x30 , Size: 12]
	TTVectorTrack[] VectorTracks;//[Offset: 0x3c , Size: 12]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x48 , Size: 12]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x54 , Size: 12]
	Guid TimelineGuid;//[Offset: 0x60 , Size: 16]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0xc , Size: 4]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0 , Size: 8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0xc , Size: 4]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0xc , Size: 4]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20 , Size: 84]
	function GetVectorValue();// 0x34ee354

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0xc , Size: 4]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20 , Size: 84]
	function GetLinearColorValue();// 0x34ed1b4

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x1c , Size: 12]
	ActorComponent[] UnnecessaryComponents;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0 , Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x4 , Size: 4]
	ComponentKey ComponentKey;//[Offset: 0x8 , Size: 32]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28 , Size: 56]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0 , Size: 4]
	FName SCSVariableName;//[Offset: 0x8 , Size: 8]
	Guid AssociatedGuid;//[Offset: 0x10 , Size: 16]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: ClothingAssetData_Legacy
	FName AssetName;//[Offset: 0x0 , Size: 8]
	FString ApexFileName;//[Offset: 0x8 , Size: 12]
	bool bClothPropertiesChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	ClothPhysicsProperties_Legacy PhysicsProperties;//[Offset: 0x18 , Size: 80]

--------------------------------
Class: ClothPhysicsProperties_Legacy
	float VerticalResistance;//[Offset: 0x0 , Size: 4]
	float HorizontalResistance;//[Offset: 0x4 , Size: 4]
	float BendResistance;//[Offset: 0x8 , Size: 4]
	float ShearResistance;//[Offset: 0xc , Size: 4]
	float Friction;//[Offset: 0x10 , Size: 4]
	float Damping;//[Offset: 0x14 , Size: 4]
	float TetherStiffness;//[Offset: 0x18 , Size: 4]
	float TetherLimit;//[Offset: 0x1c , Size: 4]
	float Drag;//[Offset: 0x20 , Size: 4]
	float StiffnessFrequency;//[Offset: 0x24 , Size: 4]
	float GravityScale;//[Offset: 0x28 , Size: 4]
	float MassScale;//[Offset: 0x2c , Size: 4]
	float InertiaBlend;//[Offset: 0x30 , Size: 4]
	float SelfCollisionThickness;//[Offset: 0x34 , Size: 4]
	float SelfCollisionSquashScale;//[Offset: 0x38 , Size: 4]
	float SelfCollisionStiffness;//[Offset: 0x3c , Size: 4]
	float SolverFrequency;//[Offset: 0x40 , Size: 4]
	float FiberCompression;//[Offset: 0x44 , Size: 4]
	float FiberExpansion;//[Offset: 0x48 , Size: 4]
	float FiberResistance;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c , Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20 , Size: 4]
	byte RootMotionMode;//[Offset: 0x24 , Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26 , Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27 , Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c , Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38 , Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44 , Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50 , Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x118 , Size: 12]
	function UnlockAIResources();// 0x34b5404
	function TryGetPawnOwner();// 0x34ab738
	function StopSlotAnimation();// 0x34b5348
	function SnapshotPose();// 0x34b5230
	function SetRootMotionMode();// 0x34b51b0
	function SetMorphTarget();// 0x34b50ec
	function SavePoseSnapshot();// 0x34b506c
	function PlaySlotAnimationAsDynamicMontage();// 0x34b4df4
	function PlaySlotAnimation();// 0x34b4c0c
	function Montage_Stop();// 0x34b4b50
	function Montage_SetPosition();// 0x34b4a94
	function Montage_SetPlayRate();// 0x34b49d8
	function Montage_SetNextSection();// 0x34b48d0
	function Montage_Resume();// 0x34b4858
	function Montage_Play();// 0x34b4700
	function Montage_Pause();// 0x34b4688
	function Montage_JumpToSectionsEnd();// 0x34b45cc
	function Montage_JumpToSection();// 0x34b4510
	function Montage_IsPlaying();// 0x34b4490
	function Montage_IsActive();// 0x34b4410
	function Montage_GetPosition();// 0x34b4390
	function Montage_GetPlayRate();// 0x34b4310
	function Montage_GetNextSection();// 0x34b4238
	function Montage_GetIsStopped();// 0x34b41b8
	function Montage_GetCurrentSection();// 0x34b4130
	function Montage_GetBlendTime();// 0x34b40b0
	function LockAIResources();// 0x34b3fe0
	function IsSyncGroupBetweenMarkers();// 0x34b3e70
	function IsPlayingSlotAnimation();// 0x34b3dac
	function IsAnyMontagePlaying();// 0x34b3d84
	function HasMarkerBeenHitThisFrame();// 0x34b3cb8
	function GetTimeToClosestMarker();// 0x34b3b88
	function GetSyncGroupPosition();// 0x34b3af0
	function GetRelevantAnimTimeRemainingFraction();// 0x34b3a2c
	function GetRelevantAnimTimeRemaining();// 0x34b3968
	function GetRelevantAnimTimeFraction();// 0x34b38a4
	function GetRelevantAnimTime();// 0x34b37e0
	function GetRelevantAnimLength();// 0x34b371c
	function GetOwningComponent();// 0x34b36f4
	function GetOwningActor();// 0x34b36cc
	function GetInstanceTransitionTimeElapsedFraction();// 0x34b3608
	function GetInstanceTransitionTimeElapsed();// 0x34b3544
	function GetInstanceTransitionCrossfadeDuration();// 0x34b3480
	function GetInstanceStateWeight();// 0x34b33bc
	function GetInstanceMachineWeight();// 0x34b333c
	function GetInstanceCurrentStateElapsedTime();// 0x34b32bc
	function GetInstanceAssetPlayerTimeFromEndFraction();// 0x34b323c
	function GetInstanceAssetPlayerTimeFromEnd();// 0x34b31bc
	function GetInstanceAssetPlayerTimeFraction();// 0x34b313c
	function GetInstanceAssetPlayerTime();// 0x34b30bc
	function GetInstanceAssetPlayerLength();// 0x34b303c
	function GetCurveValue();// 0x34b2fbc
	function GetCurrentStateName();// 0x34b2f34
	function GetCurrentActiveMontage();// 0x34b2f0c
	function ClearMorphTargets();// 0x34b2ef8
	function CalculateDirection();// 0x34b2e18
	function BlueprintUpdateAnimation();// 0x1ddc250
	function BlueprintPostEvaluateAnimation();// 0x1ddc250
	function BlueprintInitializeAnimation();// 0x1ddc250
	function BlueprintBeginPlay();// 0x1ddc250

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x1c , Size: 12]
	Guid AssetGuid;//[Offset: 0x28 , Size: 16]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0 , Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4 , Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4 , Size: 1]
	float SavedPosition;//[Offset: 0x8 , Size: 4]
	float SavedPlayRate;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: LODToSkipFrame
	int SkipFrame;//[Offset: 0x0 , Size: 4]
	int SkipAnimCount;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x12c , Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130 , Size: 1]
	float GravityScale;//[Offset: 0x134 , Size: 4]
	float MaxStepHeight;//[Offset: 0x138 , Size: 4]
	float JumpZVelocity;//[Offset: 0x13c , Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x140 , Size: 4]
	float WalkableFloorAngle;//[Offset: 0x144 , Size: 4]
	float WalkableFloorZ;//[Offset: 0x148 , Size: 4]
	byte MovementMode;//[Offset: 0x14c , Size: 1]
	byte CustomMovementMode;//[Offset: 0x14d , Size: 1]
	float GroundFriction;//[Offset: 0x170 , Size: 4]
	float MaxWalkSpeed;//[Offset: 0x174 , Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x178 , Size: 4]
	float MaxSwimSpeed;//[Offset: 0x17c , Size: 4]
	float MaxFlySpeed;//[Offset: 0x180 , Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x184 , Size: 4]
	float MaxAcceleration;//[Offset: 0x188 , Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x18c , Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x190 , Size: 4]
	float BrakingFriction;//[Offset: 0x194 , Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198 , Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x19c , Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1a0 , Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1a4 , Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1a8 , Size: 4]
	float AirControl;//[Offset: 0x1ac , Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1b0 , Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1b4 , Size: 4]
	float FallingLateralFriction;//[Offset: 0x1b8 , Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1bc , Size: 4]
	float Buoyancy;//[Offset: 0x1c0 , Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1c4 , Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1c8 , Size: 4]
	Rotator RotationRate;//[Offset: 0x1cc , Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8 , Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8 , Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8 , Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8 , Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8 , Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8 , Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8 , Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9 , Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9 , Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9 , Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9 , Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d9 , Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d9 , Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1dc , Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1e0 , Size: 4]
	float OutofWaterZ;//[Offset: 0x1e4 , Size: 4]
	float Mass;//[Offset: 0x1e8 , Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec , Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed , Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee , Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef , Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0 , Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x1f4 , Size: 4]
	float InitialPushForceFactor;//[Offset: 0x1f8 , Size: 4]
	float PushForceFactor;//[Offset: 0x1fc , Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x200 , Size: 4]
	float TouchForceFactor;//[Offset: 0x204 , Size: 4]
	float MinTouchForce;//[Offset: 0x208 , Size: 4]
	float MaxTouchForce;//[Offset: 0x20c , Size: 4]
	float RepulsionForce;//[Offset: 0x210 , Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214 , Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x218 , Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x21c , Size: 4]
	Vector Acceleration;//[Offset: 0x220 , Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x22c , Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x240 , Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x250 , Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x25c , Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x260 , Size: 12]
	Vector PendingForceToApply;//[Offset: 0x26c , Size: 12]
	float AnalogInputModifier;//[Offset: 0x278 , Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x284 , Size: 4]
	int MaxSimulationIterations;//[Offset: 0x288 , Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x28c , Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x290 , Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x294 , Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x298 , Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x29c , Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2a0 , Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2a4 , Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2a8 , Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2ac , Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2b0 , Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2b4 , Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2b8 , Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc , Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x2bd , Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2c0 , Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2c4 , Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2c8 , Size: 152]
	byte DefaultLandMovementMode;//[Offset: 0x360 , Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x361 , Size: 1]
	byte GroundMovementMode;//[Offset: 0x362 , Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x363 , Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x363 , Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x363 , Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x363 , Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x363 , Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x363 , Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x363 , Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x363 , Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364 , Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x364 , Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x364 , Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x364 , Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x364 , Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x364 , Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x364 , Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x364 , Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x365 , Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x365 , Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x365 , Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x365 , Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x365 , Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x365 , Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x365 , Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x366 , Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x366 , Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x366 , Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x378 , Size: 4]
	Vector RequestedVelocity;//[Offset: 0x37c , Size: 12]
	int AvoidanceUID;//[Offset: 0x388 , Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x38c , Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x390 , Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x394 , Size: 4]
	float AvoidanceWeight;//[Offset: 0x398 , Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x39c , Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x448 , Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x44c , Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x450 , Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x454 , Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x458 , Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x45c , Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x460 , Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4a4 , Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4a8 , Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5d0 , Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x610 , Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c , Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61d , Size: 1]
	function SetWalkableFloorZ();// 0x34e3bf4
	function SetWalkableFloorAngle();// 0x34e3b7c
	function SetMovementMode();// 0x34e3ab8
	function SetGroupsToIgnoreMask();// 0x34e3a34
	function SetGroupsToIgnore();// 0x34e39bc
	function SetGroupsToAvoidMask();// 0x34e3938
	function SetGroupsToAvoid();// 0x34e38c0
	function SetAvoidanceGroupMask();// 0x34e383c
	function SetAvoidanceGroup();// 0x34e37c4
	function SetAvoidanceEnabled();// 0x34e3744
	function ServerMoveOld();// 0x34e35f0
	function ServerMoveDualHybridRootMotion();// 0x34e30b8
	function ServerMoveDual();// 0x34e2b80
	function ServerMove();// 0x34e27f4
	function K2_GetWalkableFloorZ();// 0x34e27cc
	function K2_GetWalkableFloorAngle();// 0x34e27a4
	function K2_GetModifiedMaxAcceleration();// 0x34e2774
	function K2_FindFloor();// 0x34e268c
	function K2_ComputeFloorDist();// 0x34e24cc
	function IsWalking();// 0x34e249c
	function IsWalkable();// 0x14c7594
	function GetValidPerchRadius();// 0x34e2474
	function GetPerchRadiusThreshold();// 0x34e244c
	function GetMovementBase();// 0x34e2424
	function GetMinAnalogSpeed();// 0x34e23f4
	function GetMaxJumpHeightWithJumpTime();// 0x34e23c4
	function GetMaxJumpHeight();// 0x1393f04
	function GetMaxBrakingDeceleration();// 0x34e2394
	function GetMaxAcceleration();// 0x34e2364
	function GetImpartedMovementBaseVelocity();// 0x34e2314
	function GetCurrentAcceleration();// 0x34e22cc
	function GetCharacterOwner();// 0x34e22b0
	function GetAnalogInputModifier();// 0x34e2288
	function DisableMovement();// 0x34e226c
	function ClientVeryShortAdjustPosition();// 0x34e202c
	function ClientAdjustRootMotionSourcePosition();// 0x34e1c24
	function ClientAdjustRootMotionPosition();// 0x34e1900
	function ClientAdjustPosition();// 0x34e1658
	function ClientAckGoodMove();// 0x34e15d8
	function ClearAccumulatedForces();// 0x15516b4
	function CapsuleTouched();// 0x34e13d4
	function CalcVelocity();// 0x34e1278
	function AddImpulse();// 0x34e11ac
	function AddForce();// 0x34e1134

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x120 , Size: 4]
	function K2_GetInputVector();// 0x35bba40
	function IsMoveInputIgnored();// 0x35bba88
	function GetPendingInputVector();// 0x35bba40
	function GetPawnOwner();// 0x35bba18
	function GetLastInputVector();// 0x35bb9d0
	function ConsumeInputVector();// 0x35bb980
	function AddInputVector();// 0x35bb8b4

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf4 , Size: 24]
	float FixedPathBrakingDistance;//[Offset: 0x10c , Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110 , Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110 , Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110 , Size: 1]
	MovementProperties MovementState;//[Offset: 0x114 , Size: 4]
	function StopMovementKeepPathing();// 0x35a6c0c
	function StopActiveMovement();// 0x35a6bf0
	function IsSwimming();// 0x35a6bc0
	function IsMovingOnGround();// 0x34e249c
	function IsFlying();// 0x35a6b90
	function IsFalling();// 0x14ac06c
	function IsCrouching();// 0x14ac09c

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xbc , Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0 , Size: 4]
	Vector Velocity;//[Offset: 0xc8 , Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4 , Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4 , Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xd5 , Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd8 , Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4 , Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0 , Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0 , Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0 , Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0 , Size: 1]
	function StopMovementImmediately();// 0x1435f00
	function SnapUpdatedComponentToPlane();// 0x359dc84
	function SetUpdatedComponent();// 0x359dc04
	function SetPlaneConstraintOrigin();// 0x359db8c
	function SetPlaneConstraintNormal();// 0x359db14
	function SetPlaneConstraintFromVectors();// 0x359da4c
	function SetPlaneConstraintEnabled();// 0x359d9c4
	function SetPlaneConstraintAxisSetting();// 0x359d944
	function PhysicsVolumeChanged();// 0x191efd8
	function K2_MoveUpdatedComponent();// 0x359d780
	function K2_GetModifiedMaxSpeed();// 0x13fa150
	function K2_GetMaxSpeedModifier();// 0x359d750
	function IsExceedingMaxSpeed();// 0x359d6c8
	function GetPlaneConstraintOrigin();// 0x359d694
	function GetPlaneConstraintNormal();// 0x359d660
	function GetPlaneConstraintAxisSetting();// 0x359d644
	function GetPhysicsVolume();// 0x359d614
	function GetMaxSpeed();// 0x359d5e4
	function GetGravityZ();// 0x19071bc
	function ConstrainNormalToPlane();// 0x359d548
	function ConstrainLocationToPlane();// 0x359d4ac
	function ConstrainDirectionToPlane();// 0x359d410

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4 , Size: 4]
	float AgentHeight;//[Offset: 0x8 , Size: 4]
	float AgentStepHeight;//[Offset: 0xc , Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10 , Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x2c0 , Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x2c8 , Size: 80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318 , Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318 , Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x318 , Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x318 , Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x318 , Size: 1]
	enum RuntimeGeneration;//[Offset: 0x319 , Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x31c , Size: 4]
	uint32 DataVersion;//[Offset: 0x320 , Size: 4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x3ac , Size: 12]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x18 , Size: 8]
	Color Color;//[Offset: 0x20 , Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x24 , Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x30 , Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38 , Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0 , Size: 12]
	int AreaID;//[Offset: 0xc , Size: 4]
	class Object* AreaClass;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	float FloorDist;//[Offset: 0x4 , Size: 4]
	float LineDist;//[Offset: 0x8 , Size: 4]
	HitResult HitResult;//[Offset: 0x10 , Size: 136]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	float Time;//[Offset: 0x4 , Size: 4]
	float Distance;//[Offset: 0x8 , Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc , Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18 , Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24 , Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30 , Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c , Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48 , Size: 12]
	float PenetrationDepth;//[Offset: 0x54 , Size: 4]
	int Item;//[Offset: 0x58 , Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c , Size: 8]
	Actor* Actor;//[Offset: 0x64 , Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c , Size: 8]
	FName BoneName;//[Offset: 0x78 , Size: 8]
	int FaceIndex;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2 , Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2 , Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2 , Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2 , Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2 , Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2 , Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2 , Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2 , Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3 , Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3 , Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3 , Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3 , Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3 , Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3 , Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3 , Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3 , Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c , Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d , Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80 , Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c , Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d , Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0 , Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float BlendWeight;//[Offset: 0x4 , Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10 , Size: 48]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x518 , Size: 4]
	float CapsuleRadius;//[Offset: 0x51c , Size: 4]
	float CapsuleHeight;//[Offset: 0x520 , Size: 4]
	function SetCapsuleSize();// 0x34de498
	function SetCapsuleRadius();// 0x34de3d0
	function SetCapsuleHalfHeight();// 0x34de308
	function GetUnscaledCapsuleSize_WithoutHemisphere();// 0x34de21c
	function GetUnscaledCapsuleSize();// 0x34de138
	function GetUnscaledCapsuleRadius();// 0x34de11c
	function GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x34de0e8
	function GetUnscaledCapsuleHalfHeight();// 0x34de0cc
	function GetShapeScale();// 0x34de084
	function GetScaledCapsuleSize_WithoutHemisphere();// 0x34ddf50
	function GetScaledCapsuleSize();// 0x34dde24
	function GetScaledCapsuleRadius();// 0x34dddcc
	function GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x34ddd64
	function GetScaledCapsuleHalfHeight();// 0x34ddd0c

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x508 , Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x50c , Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x510 , Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x510 , Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x510 , Size: 1]
	class NavArea* AreaClass;//[Offset: 0x514 , Size: 4]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c , Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x20 , Size: 4]
	Color DrawColor;//[Offset: 0x24 , Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28 , Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d , Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0 , Size: 4]
	FName BoneName;//[Offset: 0x8 , Size: 8]
	Vector_NetQuantize100 Location;//[Offset: 0x10 , Size: 12]
	Rotator Rotation;//[Offset: 0x1c , Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29 , Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a , Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0 , Size: 4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8 , Size: 224]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4 , Size: 4]
	float Position;//[Offset: 0x8 , Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc , Size: 12]
	Rotator Rotation;//[Offset: 0x18 , Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24 , Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28 , Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31 , Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34 , Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4 , Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0 , Size: 12]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x2c0 , Size: 4]
	byte Ping;//[Offset: 0x2c4 , Size: 1]
	FString PlayerName;//[Offset: 0x2c8 , Size: 12]
	int PlayerID;//[Offset: 0x2e0 , Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4 , Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e4 , Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e4 , Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e4 , Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e4 , Size: 1]
	int StartTime;//[Offset: 0x2e8 , Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2ec , Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x2f4 , Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x300 , Size: 12]
	function ReceiveOverrideWith();// 0x1ddc250
	function ReceiveCopyProperties();// 0x1ddc250
	function OnRep_UniqueId();// 0x13f0384
	function OnRep_Score();// 0x13ef5c4
	function OnRep_PlayerName();// 0x13ef5a8
	function OnRep_bIsInactive();// 0x13a1b48

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x2c0 , Size: 4]
	FName MatineeControllerName;//[Offset: 0x2c8 , Size: 8]
	float PlayRate;//[Offset: 0x2d0 , Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4 , Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4 , Size: 1]
	float ForceStartPosition;//[Offset: 0x2d8 , Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc , Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc , Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dc , Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dc , Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2dc , Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dc , Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2dc , Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2dc , Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x2e0 , Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4 , Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e4 , Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e4 , Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e4 , Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x2e8 , Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4 , Size: 1]
	InterpGroupInst[] GroupInst;//[Offset: 0x2f8 , Size: 12]
	CameraCutInfo[] CameraCuts;//[Offset: 0x304 , Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310 , Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310 , Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x310 , Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x310 , Size: 1]
	float InterpPosition;//[Offset: 0x314 , Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x31c , Size: 1]
	delegate OnPlay;//[Offset: 0x320 , Size: 12]
	delegate OnStop;//[Offset: 0x32c , Size: 12]
	delegate OnPause;//[Offset: 0x338 , Size: 12]
	function Stop();// 0x13a1b48
	function SetPosition();// 0x3598df8
	function SetLoopingState();// 0x3598d70
	function Reverse();// 0x13f0384
	function Play();// 0x13ef5a8
	function Pause();// 0x141378c
	function EnableGroupByName();// 0x3598bc8
	function ChangePlaybackDirection();// 0x13f4904

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c , Size: 4]
	float PathBuildTime;//[Offset: 0x20 , Size: 4]
	InterpGroup[] InterpGroups;//[Offset: 0x24 , Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30 , Size: 4]
	float EdSectionStart;//[Offset: 0x34 , Size: 4]
	float EdSectionEnd;//[Offset: 0x38 , Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40 , Size: 4]
	FName[] AllEventNames;//[Offset: 0x44 , Size: 12]

--------------------------------
Class: InterpGroup.Object
	InterpTrack[] InterpTracks;//[Offset: 0x20 , Size: 12]
	FName GroupName;//[Offset: 0x30 , Size: 8]
	Color GroupColor;//[Offset: 0x38 , Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c , Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c , Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c , Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c , Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack[] SubTracks;//[Offset: 0x24 , Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30 , Size: 4]
	byte ActiveCondition;//[Offset: 0x34 , Size: 1]
	FString TrackTitle;//[Offset: 0x38 , Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44 , Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44 , Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44 , Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44 , Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44 , Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44 , Size: 1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x1c , Size: 12]
	int ActiveTab;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0 , Size: 12]
	CurveEdEntry[] Curves;//[Offset: 0xc , Size: 12]
	float ViewStartInput;//[Offset: 0x18 , Size: 4]
	float ViewEndInput;//[Offset: 0x1c , Size: 4]
	float ViewStartOutput;//[Offset: 0x20 , Size: 4]
	float ViewEndOutput;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0 , Size: 4]
	Color CurveColor;//[Offset: 0x4 , Size: 4]
	FString CurveName;//[Offset: 0x8 , Size: 12]
	int bHideCurve;//[Offset: 0x14 , Size: 4]
	int bColorCurve;//[Offset: 0x18 , Size: 4]
	int bFloatingPointColorCurve;//[Offset: 0x1c , Size: 4]
	int bClamp;//[Offset: 0x20 , Size: 4]
	float ClampLow;//[Offset: 0x24 , Size: 4]
	float ClampHigh;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0 , Size: 8]
	Actor[] Actors;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c , Size: 4]
	Actor* GroupActor;//[Offset: 0x20 , Size: 4]
	InterpTrackInst[] TrackInst;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0 , Size: 12]
	float TimeStamp;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x238 , Size: 4]
	Actor* ChildActor;//[Offset: 0x23c , Size: 4]
	Actor* ChildActorTemplate;//[Offset: 0x240 , Size: 4]
	function SetChildActorClass();// 0x34e79b8

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0 , Size: 4]
	FName MemberName;//[Offset: 0x8 , Size: 8]
	Guid MemberGuid;//[Offset: 0x10 , Size: 16]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor[] Actors;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c0 , Size: 1]
	function WorldOriginLocationChanged();// 0x1ddc250
	function SetCinematicMode();// 0x3580a44
	function RemoteEvent();// 0x35809bc
	function LevelReset();// 0x1ddc250

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2c4 , Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x2c8 , Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x2cc , Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0 , Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x508 , Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50c , Size: 1]
	float ScreenSize;//[Offset: 0x510 , Size: 4]
	float U;//[Offset: 0x514 , Size: 4]
	float UL;//[Offset: 0x518 , Size: 4]
	float V;//[Offset: 0x51c , Size: 4]
	float VL;//[Offset: 0x520 , Size: 4]
	function SetUV();// 0x34c89a0
	function SetSpriteAndUV();// 0x34c8808
	function SetSprite();// 0x34c8788

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0x8c , Size: 4]
	int LevelIndex;//[Offset: 0x90 , Size: 4]
	int FirstResourceMemMip;//[Offset: 0x94 , Size: 4]
	IntPoint ImportedSize;//[Offset: 0x98 , Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xa0 , Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8 , Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9 , Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa , Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa , Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xaa , Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xaa , Size: 1]
	byte AddressX;//[Offset: 0xab , Size: 1]
	byte AddressY;//[Offset: 0xac , Size: 1]
	function Blueprint_GetSizeY();// 0x360deb0
	function Blueprint_GetSizeX();// 0x360de88

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20 , Size: 16]
	int LODBias;//[Offset: 0x30 , Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34 , Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38 , Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38 , Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38 , Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38 , Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38 , Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38 , Size: 1]
	AssetUserData[] AssetUserData;//[Offset: 0x3c , Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x48 , Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c , Size: 1]
	byte CompressionSettings;//[Offset: 0x4d , Size: 1]
	byte Filter;//[Offset: 0x4e , Size: 1]
	byte LODGroup;//[Offset: 0x4f , Size: 1]

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c , Size: 1]

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0 , Size: 4]
	int Y;//[Offset: 0x4 , Size: 4]
	int Z;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4 , Size: 1]
	Vector2D[] FOVCulling;//[Offset: 0x2c8 , Size: 12]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4 , Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4 , Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d4 , Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d4 , Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d4 , Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d4 , Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d4 , Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d4 , Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d5 , Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d5 , Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d5 , Size: 1]
	float KillZ;//[Offset: 0x2d8 , Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x2dc , Size: 4]
	float WorldGravityZ;//[Offset: 0x2e0 , Size: 4]
	float GlobalGravityZ;//[Offset: 0x2e4 , Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2e8 , Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2ec , Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2f0 , Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2f4 , Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8 , Size: 1]
	Vector DefaultColorScale;//[Offset: 0x2fc , Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x308 , Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x30c , Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310 , Size: 1]
	float MaxWorldSize;//[Offset: 0x314 , Size: 4]
	int RegionSizeNear;//[Offset: 0x318 , Size: 4]
	int RegionSizeFar;//[Offset: 0x31c , Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320 , Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321 , Size: 1]
	int Graduation;//[Offset: 0x324 , Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x328 , Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c , Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c , Size: 1]
	int VisibilityCellSize;//[Offset: 0x330 , Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x334 , Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x335 , Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x338 , Size: 80]
	float WorldToMeters;//[Offset: 0x388 , Size: 4]
	float MonoCullingDistance;//[Offset: 0x38c , Size: 4]
	BookMark* BookMarks;//[Offset: 0x390 , Size: 4]
	float TimeDilation;//[Offset: 0x3b8 , Size: 4]
	float MatineeTimeDilation;//[Offset: 0x3bc , Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x3c0 , Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x3c4 , Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x3c8 , Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x3cc , Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x3d0 , Size: 4]
	PlayerState* Pauser;//[Offset: 0x3d4 , Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8 , Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d8 , Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x3dc , Size: 12]
	AssetUserData[] AssetUserData;//[Offset: 0x3e8 , Size: 12]
	float[] LODRelativeDistances;//[Offset: 0x3f4 , Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400 , Size: 1]
	int WorldCompositionNums;//[Offset: 0x404 , Size: 4]
	int CompositionBlockLength;//[Offset: 0x408 , Size: 4]
	function OnRep_WorldGravityZ();// 0x13ef5a8

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c , Size: 1]
	float DamageImpulse;//[Offset: 0x20 , Size: 4]
	float DestructibleImpulse;//[Offset: 0x24 , Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28 , Size: 4]
	float DamageFalloff;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c , Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20 , Size: 4]
	float LastImpactSoundTime;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x2c0 , Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x2c4 , Size: 4]
	int TotalNetBandwidth;//[Offset: 0x2c8 , Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x2cc , Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x2d0 , Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4 , Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4 , Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x2d8 , Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x2dc , Size: 4]
	int BadPingThreshold;//[Offset: 0x2e0 , Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x2e4 , Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x2e8 , Size: 4]
	float PercentForBadPing;//[Offset: 0x2ec , Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x2f0 , Size: 4]
	float MoveRepSize;//[Offset: 0x2f4 , Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x2f8 , Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x2fc , Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x300 , Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x304 , Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x308 , Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x30c , Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x310 , Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x314 , Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x318 , Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x31c , Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320 , Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x324 , Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328 , Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329 , Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x32c , Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x330 , Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x334 , Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x338 , Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c , Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33d , Size: 1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0 , Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4 , Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8 , Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc , Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10 , Size: 4]
	Color EnvironmentColor;//[Offset: 0x14 , Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18 , Size: 4]
	float EmissiveBoost;//[Offset: 0x1c , Size: 4]
	float DiffuseBoost;//[Offset: 0x20 , Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24 , Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28 , Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c , Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30 , Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34 , Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38 , Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c , Size: 4]
	float OcclusionExponent;//[Offset: 0x40 , Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44 , Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48 , Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c , Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c , Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c , Size: 1]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c , Size: 12]
	Rotator Rotation;//[Offset: 0x28 , Size: 12]
	FString[] HiddenLevels;//[Offset: 0x34 , Size: 12]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0 , Size: 4]
	Actor* InViewer;//[Offset: 0x4 , Size: 4]
	Actor* ViewTarget;//[Offset: 0x8 , Size: 4]
	Vector ViewLocation;//[Offset: 0xc , Size: 12]
	Vector ViewDir;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection[] Children;//[Offset: 0x30 , Size: 12]
	NetDriver* Driver;//[Offset: 0x3c , Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40 , Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44 , Size: 4]
	Channel[] OpenChannels;//[Offset: 0x48 , Size: 12]
	Actor[] SentTemporaries;//[Offset: 0x54 , Size: 12]
	Actor* ViewTarget;//[Offset: 0x60 , Size: 4]
	Actor* OwningActor;//[Offset: 0x64 , Size: 4]
	int MaxPacket;//[Offset: 0x68 , Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c , Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xec , Size: 12]
	double LastReceiveTime;//[Offset: 0x148 , Size: 8]
	Channel[] ChannelsToTick;//[Offset: 0x294b8 , Size: 12]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20 , Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24 , Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28 , Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x294f4 , Size: 4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20 , Size: 12]
	int MaxDownloadSize;//[Offset: 0x2c , Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x34 , Size: 4]
	int MaxInternetClientRate;//[Offset: 0x38 , Size: 4]
	int MaxClientRate;//[Offset: 0x3c , Size: 4]
	float ServerTravelPause;//[Offset: 0x40 , Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x44 , Size: 4]
	float RelevantTimeout;//[Offset: 0x48 , Size: 4]
	float KeepAliveTime;//[Offset: 0x4c , Size: 4]
	float InitialConnectTimeout;//[Offset: 0x50 , Size: 4]
	float ConnectionTimeout;//[Offset: 0x54 , Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x58 , Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d , Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x60 , Size: 4]
	NetConnection[] ClientConnections;//[Offset: 0x64 , Size: 12]
	World* World;//[Offset: 0x7c , Size: 4]
	class Object* NetConnectionClass;//[Offset: 0x90 , Size: 4]
	Property* RoleProperty;//[Offset: 0x94 , Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0x98 , Size: 4]
	FName NetDriverName;//[Offset: 0xa0 , Size: 8]
	float Time;//[Offset: 0xcc , Size: 4]
	<Object> PendingForceNetUpdateObjectSet;//[Offset: 0x340 , Size: 60]

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x30c , Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x314 , Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x318 , Size: 4]
	HUD* MyHUD;//[Offset: 0x320 , Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x324 , Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x328 , Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c , Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x330 , Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x348 , Size: 4]
	Actor[] HiddenActors;//[Offset: 0x34c , Size: 12]
	PrimitiveComponent[] HiddenPrimitiveComponents;//[Offset: 0x358 , Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x368 , Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x36c , Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x378 , Size: 12]
	int ClientCap;//[Offset: 0x384 , Size: 4]
	CheatManager* CheatManager;//[Offset: 0x388 , Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x38c , Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x390 , Size: 4]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x394 , Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x400 , Size: 1]
	byte NetPlayerIndex;//[Offset: 0x401 , Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x430 , Size: 4]
	NetConnection* NetConnection;//[Offset: 0x434 , Size: 4]
	float InputYawScale;//[Offset: 0x444 , Size: 4]
	float InputPitchScale;//[Offset: 0x448 , Size: 4]
	float InputRollScale;//[Offset: 0x44c , Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450 , Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x450 , Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x450 , Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x450 , Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x450 , Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x450 , Size: 1]
	float ForceFeedbackScale;//[Offset: 0x454 , Size: 4]
	Key[] ClickEventKeys;//[Offset: 0x458 , Size: 12]
	byte DefaultMouseCursor;//[Offset: 0x464 , Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x465 , Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x466 , Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x467 , Size: 1]
	float HitResultTraceDistance;//[Offset: 0x468 , Size: 4]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4e8 , Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4ec , Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4f8 , Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x53c , Size: 4]
	Vector SpawnLocation;//[Offset: 0x540 , Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550 , Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x552 , Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x554 , Size: 2]
	function WasInputKeyJustReleased();// 0x35ced88
	function WasInputKeyJustPressed();// 0x35cea94
	function ToggleSpeaking();// 0x35cea0c
	function SwitchLevel();// 0x35ce948
	function StopHapticEffect();// 0x35ce8d0
	function StartFire();// 0x35ce850
	function SetVirtualJoystickVisibility();// 0x35ce7c8
	function SetViewTargetWithBlend();// 0x35ce628
	function SetName();// 0x35ce564
	function SetMouseLocation();// 0x35ce4a8
	function SetMouseCursorWidget();// 0x35ce3ec
	function SetHapticsByValue();// 0x35ce2ec
	function SetControllerLightColor();// 0x35ce27c
	function SetCinematicMode();// 0x35ce0b0
	function SetAudioListenerOverride();// 0x35cdfa4
	function ServerViewSelf();// 0x35cde94
	function ServerViewPrevPlayer();// 0x35cde38
	function ServerViewNextPlayer();// 0x35cdddc
	function ServerVerifyViewTarget();// 0x35cdd80
	function ServerUpdateLevelVisibility();// 0x35cdc74
	function ServerUpdateCamera();// 0x35cdb70
	function ServerUnmutePlayer();// 0x35cd654
	function ServerToggleAILogging();// 0x35cd5f8
	function ServerShortTimeout();// 0x35cd59c
	function ServerSetSpectatorWaiting();// 0x35cd4d4
	function ServerSetSpectatorLocation();// 0x35cd3bc
	function ServerRestartPlayer();// 0x35cd360
	function ServerPause();// 0x35cd304
	function ServerNotifyLoadedWorld();// 0x35cd260
	function ServerMutePlayer();// 0x35ccd44
	function ServerCheckClientPossessionReliable();// 0x35ccce8
	function ServerCheckClientPossession();// 0x35ccc8c
	function ServerChangeName();// 0x35ccb98
	function ServerCamera();// 0x35ccae4
	function ServerAcknowledgePossession();// 0x35cca30
	function SendToConsole();// 0x35cc96c
	function RestartLevel();// 0x35cc950
	function ProjectWorldLocationToScreen();// 0x35cc830
	function PlayHapticEffect();// 0x35cc6e0
	function PlayDynamicForceFeedback();// 0x35cc400
	function Pause();// 0x152101c
	function OnServerStartedVisualLogger();// 0x35cc374
	function LocalTravel();// 0x35cc2b0
	function IsInputKeyDown();// 0x35cbfbc
	function GetViewportSize();// 0x35cbedc
	function GetSpectatorPawn();// 0x151272c
	function GetMousePosition();// 0x35cbdf4
	function GetInputVectorKeyState();// 0x35cbaf0
	function GetInputTouchState();// 0x35cb970
	function GetInputMouseDelta();// 0x35cb890
	function GetInputMotionState();// 0x35cb70c
	function GetInputKeyTimeDown();// 0x35cb414
	function GetInputAnalogStickState();// 0x35cb2f0
	function GetInputAnalogKeyState();// 0x35caff8
	function GetHUD();// 0x35cafd0
	function GetHitResultUnderFingerForObjects();// 0x35cadfc
	function GetHitResultUnderFingerByChannel();// 0x35cac80
	function GetHitResultUnderFinger();// 0x35cab04
	function GetHitResultUnderCursorForObjects();// 0x35ca974
	function GetHitResultUnderCursorByChannel();// 0x35ca83c
	function GetHitResultUnderCursor();// 0x35ca704
	function GetFocalLocation();// 0x1532c14
	function FOV();// 0x35ca684
	function EnableCheats();// 0x35ca668
	function DeprojectScreenPositionToWorld();// 0x35ca4fc
	function DeprojectMousePositionToWorld();// 0x35ca41c
	function ConsoleKey();// 0x35ca128
	function ClientWasKicked();// 0x35c9f94
	function ClientVoiceHandshakeComplete();// 0x35c9f78
	function ClientUpdateLevelStreamingStatus();// 0x35c9dc0
	function ClientUnmutePlayer();// 0x35c9a54
	function ClientTravelInternal();// 0x35c98a4
	function ClientTravel();// 0x35c9704
	function ClientTeamMessage();// 0x35c9568
	function ClientStopForceFeedback();// 0x35c94a4
	function ClientStopCameraShake();// 0x35c93d8
	function ClientStopCameraAnim();// 0x35c9358
	function ClientStartOnlineSession();// 0x1517c34
	function ClientSpawnCameraLensEffect();// 0x14cdc3c
	function ClientSetViewTarget();// 0x35c9250
	function ClientSetSpectatorWaiting();// 0x35c91c8
	function ClientSetHUD();// 0x35c9148
	function ClientSetForceMipLevelsToBeResident();// 0x35c9040
	function ClientSetCinematicMode();// 0x35c8ec4
	function ClientSetCameraMode();// 0x35c8e44
	function ClientSetCameraFade();// 0x35c8ca0
	function ClientSetBlockOnAsyncLoading();// 0x35c8c84
	function ClientReturnToMainMenu();// 0x35c8bc0
	function ClientRetryClientRestart();// 0x35c8b40
	function ClientRestart();// 0x35c8ac0
	function ClientReset();// 0x14e3d18
	function ClientRepObjRef();// 0x1931e30
	function ClientReceiveLocalizedMessage();// 0x35c8928
	function ClientPrestreamTextures();// 0x35c87cc
	function ClientPrepareMapChange();// 0x35c86a8
	function ClientPlaySoundAtLocation();// 0x35c8554
	function ClientPlaySound();// 0x35c844c
	function ClientPlayForceFeedback();// 0x35c82e0
	function ClientPlayCameraShake();// 0x35c818c
	function ClientPlayCameraAnim();// 0x35c7ebc
	function ClientMutePlayer();// 0x35c7b50
	function ClientMessage();// 0x35c79fc
	function ClientIgnoreMoveInput();// 0x35c7974
	function ClientIgnoreLookInput();// 0x35c78ec
	function ClientGotoState();// 0x35c786c
	function ClientGameEnded();// 0x35c77a0
	function ClientForceGarbageCollection();// 0x35c7784
	function ClientFlushLevelStreaming();// 0x35c7770
	function ClientEndOnlineSession();// 0x35c7754
	function ClientEnableNetworkVoice();// 0x35c76cc
	function ClientCommitMapChange();// 0x35c76b0
	function ClientClearCameraLensEffects();// 0x35c7694
	function ClientCapBandwidth();// 0x35c7614
	function ClientCancelPendingMapChange();// 0x15c7c98
	function ClientAddTextureStreamingLoc();// 0x35c7508
	function ClearAudioListenerOverride();// 0x35c74f4
	function Camera();// 0x35c7474
	function AddYawInput();// 0x35c73f4
	function AddRollInput();// 0x35c7374
	function AddPitchInput();// 0x35c72f4
	function ActivateTouchInterface();// 0x152dbd8

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x2c0 , Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4 , Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4 , Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c4 , Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c4 , Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c4 , Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c4 , Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c4 , Size: 1]
	Actor[] PostRenderedActors;//[Offset: 0x2c8 , Size: 12]
	FName[] DebugDisplay;//[Offset: 0x2dc , Size: 12]
	FName[] ToggledDebugCategories;//[Offset: 0x2e8 , Size: 12]
	Canvas* Canvas;//[Offset: 0x2f4 , Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x2f8 , Size: 4]
	DebugTextInfo[] DebugTextList;//[Offset: 0x2fc , Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x308 , Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x30c , Size: 4]
	function UpdateShowDebugTargetActor();// 0x1ddc250
	function ShowHUD();// 0x13ef5c4
	function ShowDebugToggleSubCategory();// 0x351d690
	function ShowDebugForReticleTargetToggle();// 0x351d618
	function ShowDebugForMoifiedTargetActor();// 0x351d604
	function ShowDebug();// 0x351d584
	function RemoveDebugText();// 0x351d4c0
	function RemoveAllDebugStrings();// 0x351d4ac
	function ReceiveHitBoxRelease();// 0x1ddc250
	function ReceiveHitBoxEndCursorOver();// 0x1ddc250
	function ReceiveHitBoxClick();// 0x1ddc250
	function ReceiveHitBoxBeginCursorOver();// 0x1ddc250
	function ReceiveDrawHUD();// 0x1ddc250
	function Project();// 0x351d418
	function GetTextSize();// 0x351d21c
	function GetOwningPlayerController();// 0x29a9598
	function GetOwningPawn();// 0x351d1f4
	function GetActorsInSelectionRectangle();// 0x351cf9c
	function DrawTextureSimple();// 0x351ce04
	function DrawTexture();// 0x351c98c
	function DrawText();// 0x351c714
	function DrawRect();// 0x351c578
	function DrawMaterialTriangle();// 0x351c1f4
	function DrawMaterialSimple();// 0x351bfcc
	function DrawMaterial();// 0x351bbf4
	function DrawLine();// 0x351ba10
	function Deproject();// 0x351b8ac
	function AddHitBox();// 0x351b710
	function AddDebugText();// 0x351b320

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c , Size: 4]
	float OrgY;//[Offset: 0x20 , Size: 4]
	float ClipX;//[Offset: 0x24 , Size: 4]
	float ClipY;//[Offset: 0x28 , Size: 4]
	Color DrawColor;//[Offset: 0x2c , Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30 , Size: 1]
	int SizeX;//[Offset: 0x34 , Size: 4]
	int SizeY;//[Offset: 0x38 , Size: 4]
	Plane ColorModulate;//[Offset: 0x40 , Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50 , Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54 , Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58 , Size: 4]
	function K2_TextSize();// 0x34dcde0
	function K2_StrLen();// 0x34dccd0
	function K2_Project();// 0x34dcc3c
	function K2_DrawTriangle();// 0x34dca98
	function K2_DrawTexture();// 0x34dc7c4
	function K2_DrawText();// 0x34dc3bc
	function K2_DrawPolygon();// 0x34dc228
	function K2_DrawMaterialTriangle();// 0x34dc084
	function K2_DrawMaterial();// 0x34dbe6c
	function K2_DrawLine();// 0x34dbd14
	function K2_DrawBox();// 0x34dbc14
	function K2_DrawBorder();// 0x34db6f4
	function K2_Deproject();// 0x34db5d8

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0 , Size: 4]
	Vector SrcActorOffset;//[Offset: 0x4 , Size: 12]
	Vector SrcActorDesiredOffset;//[Offset: 0x10 , Size: 12]
	FString DebugText;//[Offset: 0x1c , Size: 12]
	float TimeRemaining;//[Offset: 0x28 , Size: 4]
	float Duration;//[Offset: 0x2c , Size: 4]
	Color TextColor;//[Offset: 0x30 , Size: 4]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34 , Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34 , Size: 1]
	Vector OrigActorLocation;//[Offset: 0x38 , Size: 12]
	Font* Font;//[Offset: 0x44 , Size: 4]
	float FontScale;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20 , Size: 1]
	FontCharacter[] Characters;//[Offset: 0x24 , Size: 12]
	Texture2D[] Textures;//[Offset: 0x30 , Size: 12]
	int IsRemapped;//[Offset: 0x3c , Size: 4]
	float EmScale;//[Offset: 0x40 , Size: 4]
	float Ascent;//[Offset: 0x44 , Size: 4]
	float Descent;//[Offset: 0x48 , Size: 4]
	float Leading;//[Offset: 0x4c , Size: 4]
	int Kerning;//[Offset: 0x50 , Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54 , Size: 144]
	int NumCharacters;//[Offset: 0xe4 , Size: 4]
	int[] MaxCharHeight;//[Offset: 0xe8 , Size: 12]
	float ScalingFactor;//[Offset: 0xf4 , Size: 4]
	int LegacyFontSize;//[Offset: 0xf8 , Size: 4]
	FName LegacyFontName;//[Offset: 0x100 , Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108 , Size: 24]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0 , Size: 4]
	int StartV;//[Offset: 0x4 , Size: 4]
	int USize;//[Offset: 0x8 , Size: 4]
	int VSize;//[Offset: 0xc , Size: 4]
	byte TextureIndex;//[Offset: 0x10 , Size: 1]
	int VerticalOffset;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0 , Size: 12]
	float Height;//[Offset: 0xc , Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10 , Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10 , Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10 , Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10 , Size: 1]
	byte CharacterSet;//[Offset: 0x11 , Size: 1]
	FString Chars;//[Offset: 0x14 , Size: 12]
	FString UnicodeRange;//[Offset: 0x20 , Size: 12]
	FString CharsFilePath;//[Offset: 0x2c , Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38 , Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48 , Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58 , Size: 1]
	int TexturePageWidth;//[Offset: 0x5c , Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60 , Size: 4]
	int XPadding;//[Offset: 0x64 , Size: 4]
	int YPadding;//[Offset: 0x68 , Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c , Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70 , Size: 4]
	int ExtendBoxRight;//[Offset: 0x74 , Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78 , Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	int Kerning;//[Offset: 0x80 , Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84 , Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88 , Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c , Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0 , Size: 12]
	CompositeSubFont[] SubTypefaces;//[Offset: 0xc , Size: 12]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0 , Size: 8]
	FontData Font;//[Offset: 0x8 , Size: 20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0 , Size: 12]
	enum Hinting;//[Offset: 0xc , Size: 1]
	enum LoadingPolicy;//[Offset: 0xd , Size: 1]
	Object* FontFaceAsset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: CompositeSubFont
	Typeface Typeface;//[Offset: 0x0 , Size: 12]
	Int32Range[] CharacterRanges;//[Offset: 0xc , Size: 12]
	float ScalingFactor;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0 , Size: 8]
	Int32RangeBound UpperBound;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0 , Size: 1]
	int Value;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x2c0 , Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2c4 , Size: 4]
	float DefaultFOV;//[Offset: 0x2d0 , Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x2d8 , Size: 4]
	float DefaultAspectRatio;//[Offset: 0x2e0 , Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x330 , Size: 1328]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x860 , Size: 1328]
	TViewTarget ViewTarget;//[Offset: 0xd90 , Size: 1344]
	TViewTarget PendingViewTarget;//[Offset: 0x12d0 , Size: 1344]
	CameraModifier[] ModifierList;//[Offset: 0x1824 , Size: 12]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x1830 , Size: 12]
	float FreeCamDistance;//[Offset: 0x183c , Size: 4]
	Vector FreeCamOffset;//[Offset: 0x1840 , Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x184c , Size: 12]
	EmitterCameraLensEffectBase[] CameraLensEffects;//[Offset: 0x1868 , Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1874 , Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1878 , Size: 4]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x1898 , Size: 12]
	CameraAnimInst[] ActiveAnims;//[Offset: 0x18b0 , Size: 12]
	CameraAnimInst[] FreeAnims;//[Offset: 0x18bc , Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x18c8 , Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18cc , Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18cc , Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18cc , Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18cd , Size: 1]
	float ViewPitchMin;//[Offset: 0x18d0 , Size: 4]
	float ViewPitchMax;//[Offset: 0x18d4 , Size: 4]
	float ViewYawMin;//[Offset: 0x18d8 , Size: 4]
	float ViewYawMax;//[Offset: 0x18dc , Size: 4]
	float ViewRollMin;//[Offset: 0x18e0 , Size: 4]
	float ViewRollMax;//[Offset: 0x18e4 , Size: 4]
	function StopCameraShake();// 0x35c4c2c
	function StopCameraFade();// 0x35c4c10
	function StopCameraAnimInst();// 0x35c4b44
	function StopAllInstancesOfCameraShake();// 0x35c4a78
	function StopAllInstancesOfCameraAnim();// 0x35c49ac
	function StopAllCameraShakes();// 0x34e9c68
	function StopAllCameraAnims();// 0x35c4924
	function StartCameraFade();// 0x35c4738
	function SetManualCameraFade();// 0x35c4624
	function RemoveCameraModifier();// 0x1394060
	function RemoveCameraLensEffect();// 0x35c45a4
	function PlayCameraShake();// 0x35c4448
	function PlayCameraAnim();// 0x35c4124
	function PhotographyCameraModify();// 0x35c3fbc
	function OnPhotographySessionStart();// 0x13f0384
	function OnPhotographySessionEnd();// 0x13a1b48
	function OnPhotographyMultiPartCaptureStart();// 0x13ef5a8
	function OnPhotographyMultiPartCaptureEnd();// 0x13ef5c4
	function GetOwningPlayerController();// 0x35c3f8c
	function GetFOVAngle();// 0x34e23c4
	function GetCameraRotation();// 0x35c3f44
	function GetCameraLocation();// 0x35c3efc
	function FindCameraModifierByClass();// 0x35c3e74
	function ClearCameraLensEffects();// 0x35bad8c
	function BlueprintUpdateCamera();// 0x1ddc250
	function AddNewCameraModifier();// 0x35c3dec
	function AddCameraLensEffect();// 0x35c3d64

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0 , Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10 , Size: 1312]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0 , Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc , Size: 12]
	Rotator Rotation;//[Offset: 0x18 , Size: 12]
	float FOV;//[Offset: 0x24 , Size: 4]
	float OrthoWidth;//[Offset: 0x28 , Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c , Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30 , Size: 4]
	float AspectRatio;//[Offset: 0x34 , Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38 , Size: 1]
	byte ProjectionMode;//[Offset: 0x39 , Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c , Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40 , Size: 1232]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x510 , Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2 , Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5 , Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5 , Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5 , Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5 , Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5 , Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5 , Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5 , Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5 , Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7 , Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7 , Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7 , Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8 , Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9 , Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa , Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa , Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb , Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb , Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc , Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe , Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe , Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe , Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe , Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe , Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe , Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe , Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe , Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf , Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf , Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10 , Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11 , Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11 , Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12 , Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12 , Size: 1]
	float WhiteTemp;//[Offset: 0x14 , Size: 4]
	float WhiteTint;//[Offset: 0x18 , Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20 , Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30 , Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40 , Size: 16]
	Vector4 ColorGain;//[Offset: 0x50 , Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60 , Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70 , Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80 , Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90 , Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0 , Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0 , Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0 , Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0 , Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0 , Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0 , Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100 , Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110 , Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120 , Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130 , Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140 , Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150 , Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160 , Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170 , Size: 4]
	float FilmSlope;//[Offset: 0x174 , Size: 4]
	float FilmToe;//[Offset: 0x178 , Size: 4]
	float FilmShoulder;//[Offset: 0x17c , Size: 4]
	float FilmBlackClip;//[Offset: 0x180 , Size: 4]
	float FilmWhiteClip;//[Offset: 0x184 , Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188 , Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198 , Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8 , Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac , Size: 4]
	float FilmSaturation;//[Offset: 0x1b0 , Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4 , Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4 , Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4 , Size: 16]
	float FilmContrast;//[Offset: 0x1e4 , Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8 , Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec , Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0 , Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4 , Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204 , Size: 4]
	byte BloomMethod;//[Offset: 0x208 , Size: 1]
	float BloomIntensity;//[Offset: 0x20c , Size: 4]
	float BloomThreshold;//[Offset: 0x210 , Size: 4]
	float BloomSizeScale;//[Offset: 0x214 , Size: 4]
	float Bloom1Size;//[Offset: 0x218 , Size: 4]
	float Bloom2Size;//[Offset: 0x21c , Size: 4]
	float Bloom3Size;//[Offset: 0x220 , Size: 4]
	float Bloom4Size;//[Offset: 0x224 , Size: 4]
	float Bloom5Size;//[Offset: 0x228 , Size: 4]
	float Bloom6Size;//[Offset: 0x22c , Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230 , Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240 , Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250 , Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260 , Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270 , Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280 , Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290 , Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294 , Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298 , Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0 , Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac , Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0 , Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4 , Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8 , Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc , Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0 , Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4 , Size: 16]
	LinearColor AmbientCubemapTint;//[Offset: 0x2d4 , Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2e4 , Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2e8 , Size: 4]
	byte AutoExposureMethod;//[Offset: 0x2ec , Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x2f0 , Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x2f4 , Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x2f8 , Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x2fc , Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x300 , Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x304 , Size: 4]
	float AutoExposureBias;//[Offset: 0x308 , Size: 4]
	float HistogramLogMin;//[Offset: 0x30c , Size: 4]
	float HistogramLogMax;//[Offset: 0x310 , Size: 4]
	float LensFlareIntensity;//[Offset: 0x314 , Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x318 , Size: 16]
	float LensFlareBokehSize;//[Offset: 0x328 , Size: 4]
	int LensFlareCount;//[Offset: 0x32c , Size: 4]
	float LensFlareThreshold;//[Offset: 0x330 , Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x334 , Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x338 , Size: 16]
	float VignetteIntensity;//[Offset: 0x3b8 , Size: 4]
	float GrainJitter;//[Offset: 0x3bc , Size: 4]
	float GrainIntensity;//[Offset: 0x3c0 , Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3c4 , Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3c8 , Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3cc , Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0 , Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3d4 , Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3d8 , Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3dc , Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3e0 , Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x3e4 , Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x3e8 , Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x3ec , Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x3f0 , Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x3f4 , Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x3f8 , Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x408 , Size: 4]
	float ColorGradingIntensity;//[Offset: 0x40c , Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x410 , Size: 4]
	byte DepthOfFieldMethod;//[Offset: 0x414 , Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x415 , Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x418 , Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x41c , Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x420 , Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x424 , Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x428 , Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x42c , Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x430 , Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x434 , Size: 4]
	float DepthOfFieldScale;//[Offset: 0x438 , Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x43c , Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x440 , Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x444 , Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x448 , Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x44c , Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x450 , Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x454 , Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x458 , Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x45c , Size: 4]
	float MotionBlurAmount;//[Offset: 0x460 , Size: 4]
	float MotionBlurMax;//[Offset: 0x464 , Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x468 , Size: 4]
	float LPVIntensity;//[Offset: 0x46c , Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x470 , Size: 4]
	float LPVSize;//[Offset: 0x474 , Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x478 , Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x47c , Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x480 , Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x484 , Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x488 , Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x48c , Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x490 , Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x494 , Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x498 , Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x49c , Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4a0 , Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4a4 , Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4a8 , Size: 4]
	float LPVFadeRange;//[Offset: 0x4ac , Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x4b0 , Size: 4]
	float ScreenPercentage;//[Offset: 0x4b4 , Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x4b8 , Size: 12]
	Object[] Blendables;//[Offset: 0x4c4 , Size: 12]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]
	float Z;//[Offset: 0x8 , Size: 4]
	float W;//[Offset: 0xc , Size: 4]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0 , Size: 4]
	Object* Object;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0 , Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10 , Size: 1312]
	PlayerState* PlayerState;//[Offset: 0x530 , Size: 4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	byte Priority;//[Offset: 0x1d , Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20 , Size: 4]
	float AlphaInTime;//[Offset: 0x24 , Size: 4]
	float AlphaOutTime;//[Offset: 0x28 , Size: 4]
	float alpha;//[Offset: 0x2c , Size: 4]
	function IsDisabled();// 0x1420e64
	function GetViewTarget();// 0x27bb6b8
	function EnableModifier();// 0x16493e4
	function DisableModifier();// 0x34d8530
	function BlueprintModifyPostProcess();// 0x1ddc250
	function BlueprintModifyCamera();// 0x1ddc250

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x2f8 , Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x2fc , Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x300 , Size: 4]
	Transform RelativeTransform;//[Offset: 0x310 , Size: 48]
	float BaseFOV;//[Offset: 0x340 , Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344 , Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344 , Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x348 , Size: 12]
	float DistFromCamera;//[Offset: 0x354 , Size: 4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2c0 , Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4 , Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4 , Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c4 , Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x2c8 , Size: 12]
	delegate OnParticleBurst;//[Offset: 0x2d4 , Size: 12]
	delegate OnParticleDeath;//[Offset: 0x2e0 , Size: 12]
	delegate OnParticleCollide;//[Offset: 0x2ec , Size: 12]
	function ToggleActive();// 0x34f8040
	function SetVectorParameter();// 0x34f7f80
	function SetTemplate();// 0x1416e0c
	function SetMaterialParameter();// 0x34f7ec4
	function SetFloatParameter();// 0x34f7e00
	function SetColorParameter();// 0x34f7d38
	function SetActorParameter();// 0x34f7c7c
	function OnRep_bCurrentlyActive();// 0x13ef5a8
	function OnParticleSystemFinished();// 0x13a1b64
	function IsActive();// 0x34f7c54
	function Deactivate();// 0x34f7c40
	function Activate();// 0x34f7c2c

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c , Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20 , Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24 , Size: 4]
	float WarmupTime;//[Offset: 0x28 , Size: 4]
	float WarmupTickRate;//[Offset: 0x2c , Size: 4]
	ParticleEmitter[] Emitters;//[Offset: 0x30 , Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c , Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40 , Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48 , Size: 4]
	float CullingScreenSize;//[Offset: 0x4c , Size: 4]
	byte LODMethod;//[Offset: 0x50 , Size: 1]
	float[] LODDistances;//[Offset: 0x54 , Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x64 , Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70 , Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x74 , Size: 28]
	float SecondsBeforeInactive;//[Offset: 0x90 , Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94 , Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x94 , Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x94 , Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x94 , Size: 1]
	float Delay;//[Offset: 0x98 , Size: 4]
	float DelayLow;//[Offset: 0x9c , Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0 , Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1 , Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa4 , Size: 4]
	enum InsignificantReaction;//[Offset: 0xa8 , Size: 1]
	float InsignificanceDelay;//[Offset: 0xac , Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xb0 , Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb4 , Size: 12]
	float MacroUVRadius;//[Offset: 0xc0 , Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xc4 , Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc8 , Size: 28]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe4 , Size: 12]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf0 , Size: 12]
	function GetBounds();// 0x35b64c8
	function GetBoundingBox();// 0x35b6474
	function ContainsEmitterType();// 0x35b63f4

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20 , Size: 8]
	int SubUVDataOffset;//[Offset: 0x28 , Size: 4]
	byte EmitterRenderMode;//[Offset: 0x2c , Size: 1]
	ParticleLODLevel[] LODLevels;//[Offset: 0x30 , Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	int PeakActiveParticles;//[Offset: 0x40 , Size: 4]
	int InitialAllocationCount;//[Offset: 0x44 , Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48 , Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c , Size: 4]
	byte DetailMode;//[Offset: 0x50 , Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51 , Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51 , Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x51 , Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51 , Size: 1]
	enum SignificanceLevel;//[Offset: 0x52 , Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53 , Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20 , Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24 , Size: 4]
	ParticleModule[] Modules;//[Offset: 0x28 , Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34 , Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38 , Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c , Size: 4]
	ParticleModuleSpawnBase[] SpawningModules;//[Offset: 0x40 , Size: 12]
	ParticleModule[] SpawnModules;//[Offset: 0x4c , Size: 12]
	ParticleModule[] UpdateModules;//[Offset: 0x58 , Size: 12]
	ParticleModuleOrbit[] OrbitModules;//[Offset: 0x64 , Size: 12]
	ParticleModuleEventReceiverBase[] EventReceiverModules;//[Offset: 0x70 , Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	int PeakActiveParticles;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x20 , Size: 4]
	Vector EmitterOrigin;//[Offset: 0x24 , Size: 12]
	Rotator EmitterRotation;//[Offset: 0x30 , Size: 12]
	byte ScreenAlignment;//[Offset: 0x3c , Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x40 , Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x44 , Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48 , Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48 , Size: 1]
	byte SortMode;//[Offset: 0x49 , Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a , Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a , Size: 1]
	float EmitterDuration;//[Offset: 0x4c , Size: 4]
	float EmitterDurationLow;//[Offset: 0x50 , Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54 , Size: 1]
	int EmitterLoops;//[Offset: 0x58 , Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x5c , Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x84 , Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x88 , Size: 12]
	float EmitterDelay;//[Offset: 0x94 , Size: 4]
	float EmitterDelayLow;//[Offset: 0x98 , Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c , Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c , Size: 1]
	byte InterpolationMethod;//[Offset: 0x9d , Size: 1]
	int SubImages_Horizontal;//[Offset: 0xa0 , Size: 4]
	int SubImages_Vertical;//[Offset: 0xa4 , Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]
	float RandomImageTime;//[Offset: 0xac , Size: 4]
	int RandomImageChanges;//[Offset: 0xb0 , Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4 , Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb8 , Size: 12]
	float MacroUVRadius;//[Offset: 0xc4 , Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8 , Size: 1]
	int MaxDrawCount;//[Offset: 0xcc , Size: 4]
	int MaxDrawCountInLowDevice;//[Offset: 0xd0 , Size: 4]
	enum UVFlippingMode;//[Offset: 0xd4 , Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xd8 , Size: 4]
	byte BoundingMode;//[Offset: 0xdc , Size: 1]
	byte OpacitySourceMode;//[Offset: 0xdd , Size: 1]
	float AlphaThreshold;//[Offset: 0xe0 , Size: 4]
	byte EmitterNormalsMode;//[Offset: 0xe4 , Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xe8 , Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0xf4 , Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100 , Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x104 , Size: 12]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c , Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c , Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c , Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c , Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c , Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c , Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d , Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d , Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d , Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d , Size: 1]
	byte LODValidity;//[Offset: 0x1e , Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c , Size: 4]
	float MaxValue;//[Offset: 0x20 , Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0 , Size: 28]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0 , Size: 1]
	byte EntryCount;//[Offset: 0x1 , Size: 1]
	byte EntryStride;//[Offset: 0x2 , Size: 1]
	byte SubEntryStride;//[Offset: 0x3 , Size: 1]
	float TimeScale;//[Offset: 0x4 , Size: 4]
	float TimeBias;//[Offset: 0x8 , Size: 4]
	float[] Values;//[Offset: 0xc , Size: 12]
	byte LockFlag;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20 , Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20 , Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0 , Size: 4]
	int CountLow;//[Offset: 0x4 , Size: 4]
	float Time;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x20 , Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x48 , Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x70 , Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x74 , Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x80 , Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f , Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0 , Size: 1]
	int Frequency;//[Offset: 0x4 , Size: 4]
	int ParticleFrequency;//[Offset: 0x8 , Size: 4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc , Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc , Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc , Size: 1]
	FName CustomName;//[Offset: 0x10 , Size: 8]
	ParticleModuleEventSendToGame[] ParticleModuleEventsToSendToGame;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x20 , Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x24 , Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x64 , Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x68 , Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xa8 , Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xac , Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xec , Size: 4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c , Size: 4]
	float MaxValue;//[Offset: 0x20 , Size: 4]
	Vector MinValueVec;//[Offset: 0x24 , Size: 12]
	Vector MaxValueVec;//[Offset: 0x30 , Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20 , Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20 , Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20 , Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x1f , Size: 1]
	FName EventName;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x508 , Size: 4]
	MaterialInterface[] EmitterMaterials;//[Offset: 0x50c , Size: 12]
	SkeletalMeshComponent[] SkelMeshComponents;//[Offset: 0x518 , Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x524 , Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x525 , Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x525 , Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x525 , Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x525 , Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x526 , Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x526 , Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x526 , Size: 1]
	byte LODMethod;//[Offset: 0x528 , Size: 1]
	enum RequiredSignificance;//[Offset: 0x529 , Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x52c , Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x538 , Size: 12]
	delegate OnParticleBurst;//[Offset: 0x544 , Size: 12]
	delegate OnParticleDeath;//[Offset: 0x550 , Size: 12]
	delegate OnParticleCollide;//[Offset: 0x55c , Size: 12]
	Vector OldPosition;//[Offset: 0x568 , Size: 12]
	Vector PartSysVelocity;//[Offset: 0x574 , Size: 12]
	float WarmupTime;//[Offset: 0x580 , Size: 4]
	float WarmupTickRate;//[Offset: 0x584 , Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x58c , Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x594 , Size: 4]
	ParticleSystemReplay[] ReplayClips;//[Offset: 0x5b4 , Size: 12]
	float CustomTimeDilation;//[Offset: 0x5c8 , Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x60c , Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x618 , Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x620 , Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x621 , Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x622 , Size: 1]
	delegate OnSystemFinished;//[Offset: 0x64c , Size: 12]
	function SetVectorParameter();// 0x35b95ec
	function SetTrailSourceData();// 0x35b9494
	function SetTemplate();// 0x35b941c
	function SetMaterialParameter();// 0x35b9360
	function SetFloatParameter();// 0x35b929c
	function SetEmitterEnable();// 0x35b91c8
	function SetColorParameter();// 0x35b9100
	function SetBeamTargetTangent();// 0x35b8ff4
	function SetBeamTargetStrength();// 0x35b8eec
	function SetBeamTargetPoint();// 0x35b8de0
	function SetBeamSourceTangent();// 0x35b8cd4
	function SetBeamSourceStrength();// 0x35b8bcc
	function SetBeamSourcePoint();// 0x35b8ac0
	function SetBeamEndPoint();// 0x35b89fc
	function SetAutoAttachParams();// 0x35b88d0
	function SetAutoAttachmentParameters();// 0x35b872c
	function SetActorParameter();// 0x35b8670
	function GetTemplate();// 0x35b8648
	function GetNumActiveParticles();// 0x35b8620
	function GetNamedMaterial();// 0x35b8598
	function GetBeamTargetTangent();// 0x35b847c
	function GetBeamTargetStrength();// 0x35b835c
	function GetBeamTargetPoint();// 0x35b8240
	function GetBeamSourceTangent();// 0x35b8124
	function GetBeamSourceStrength();// 0x35b8004
	function GetBeamSourcePoint();// 0x35b7ee8
	function GetBeamEndPoint();// 0x35b7e10
	function GenerateParticleEvent();// 0x35b7c70
	function EndTrails();// 0x35b7c5c
	function DisableTickWhenNoParticle();// 0x35b7bdc
	function CreateNamedDynamicMaterialInstance();// 0x35b7b10
	function BeginTrails();// 0x35b79b8

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0 , Size: 8]
	byte ParamType;//[Offset: 0x8 , Size: 1]
	float Scalar;//[Offset: 0xc , Size: 4]
	float Scalar_Low;//[Offset: 0x10 , Size: 4]
	Vector Vector;//[Offset: 0x14 , Size: 12]
	Vector Vector_Low;//[Offset: 0x20 , Size: 12]
	Color Color;//[Offset: 0x2c , Size: 4]
	Actor* Actor;//[Offset: 0x30 , Size: 4]
	MaterialInterface* Material;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0 , Size: 8]
	MaterialInterface* Material;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake[] ActiveShakes;//[Offset: 0x30 , Size: 12]
	float SplitScreenShakeScale;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	float OscillationDuration;//[Offset: 0x20 , Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24 , Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28 , Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c , Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50 , Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74 , Size: 12]
	float AnimPlayRate;//[Offset: 0x80 , Size: 4]
	float AnimScale;//[Offset: 0x84 , Size: 4]
	float AnimBlendInTime;//[Offset: 0x88 , Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c , Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90 , Size: 4]
	CameraAnim* Anim;//[Offset: 0x94 , Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98 , Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8 , Size: 4]
	float ShakeScale;//[Offset: 0x134 , Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138 , Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c , Size: 4]
	function ReceiveStopShake();// 0x1ddc250
	function ReceivePlayShake();// 0x1ddc250
	function ReceiveIsFinished();// 0x14031c8
	function BlueprintUpdateCameraShake();// 0x1ddc250

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0 , Size: 12]
	FOscillator Yaw;//[Offset: 0xc , Size: 12]
	FOscillator Roll;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0 , Size: 4]
	float Frequency;//[Offset: 0x4 , Size: 4]
	byte InitialOffset;//[Offset: 0x8 , Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0 , Size: 12]
	FOscillator Y;//[Offset: 0xc , Size: 12]
	FOscillator Z;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c , Size: 4]
	float AnimLength;//[Offset: 0x20 , Size: 4]
	Box BoundingBox;//[Offset: 0x24 , Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40 , Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40 , Size: 1]
	float BaseFOV;//[Offset: 0x44 , Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50 , Size: 1232]
	float BasePostProcessBlendWeight;//[Offset: 0x520 , Size: 4]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c , Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20 , Size: 4]
	float PlayRate;//[Offset: 0x3c , Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50 , Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54 , Size: 4]
	byte PlaySpace;//[Offset: 0x58 , Size: 1]
	function Stop();// 0x34d7060
	function SetScale();// 0x157fe94
	function SetDuration();// 0x34d6fe8

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48 , Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c , Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70 , Size: 12]
	FName LookAtGroupName;//[Offset: 0x80 , Size: 8]
	float LinCurveTension;//[Offset: 0x88 , Size: 4]
	float AngCurveTension;//[Offset: 0x8c , Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90 , Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90 , Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90 , Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90 , Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90 , Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90 , Size: 1]
	byte RotMode;//[Offset: 0x91 , Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0 , Size: 4]
	Vector OutVal;//[Offset: 0x4 , Size: 12]
	Vector ArriveTangent;//[Offset: 0x10 , Size: 12]
	Vector LeaveTangent;//[Offset: 0x1c , Size: 12]
	byte InterpMode;//[Offset: 0x28 , Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0 , Size: 8]
	float Time;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c , Size: 12]
	Rotator ResetRotation;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x2c0 , Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x2c4 , Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x2c8 , Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4 , Size: 1]
	float AspectRatio;//[Offset: 0x2d8 , Size: 4]
	float FOVAngle;//[Offset: 0x2dc , Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x2e0 , Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0 , Size: 1232]
	function GetAutoActivatePlayerIndex();// 0x34d6a38

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x238 , Size: 4]
	float OrthoWidth;//[Offset: 0x23c , Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x240 , Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x244 , Size: 4]
	float AspectRatio;//[Offset: 0x248 , Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c , Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24c , Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24c , Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24c , Size: 1]
	byte ProjectionMode;//[Offset: 0x24d , Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x250 , Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x260 , Size: 1232]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77c , Size: 1]
	function SetUseFieldOfViewForLOD();// 0x34d79d4
	function SetProjectionMode();// 0x34d7960
	function SetPostProcessBlendWeight();// 0x34d78ec
	function SetOrthoWidth();// 0x34d7878
	function SetOrthoNearClipPlane();// 0x34d7804
	function SetOrthoFarClipPlane();// 0x34d7790
	function SetFieldOfView();// 0x1444344
	function SetConstraintAspectRatio();// 0x34d7708
	function SetAspectRatio();// 0x34d7694
	function SetActive();// 0x34aaa24
	function RemoveBlendable();// 0x34d75f4
	function GetCameraView();// 0x146a550
	function ApplyDrawDistanceOffset();// 0x34d757c
	function AddOrUpdateBlendable();// 0x34d7490

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c , Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20 , Size: 4]
	function Walk();// 0x16493e4
	function ViewSelf();// 0x34a71f0
	function ViewPlayer();// 0x34e65f8
	function ViewClass();// 0x15b7200
	function ViewActor();// 0x34e6578
	function ToggleDebugCamera();// 0x34e655c
	function ToggleAILogging();// 0x14d14c0
	function TestCollisionDistance();// 0x34e6540
	function Teleport();// 0x147126c
	function Summon();// 0x34e647c
	function StreamLevelOut();// 0x34e63fc
	function StreamLevelIn();// 0x14d1210
	function Slomo();// 0x34e637c
	function SetWorldOrigin();// 0x34e6368
	function SetNavDrawDistance();// 0x34e62f0
	function SetMouseSensitivityToDefault();// 0x34e62dc
	function ServerToggleAILogging();// 0x34e6280
	function ReceiveInitCheatManager();// 0x1ddc250
	function ReceiveEndPlay();// 0x1ddc250
	function RebuildNavigation();// 0x34e6264
	function PlayersOnly();// 0x13b33ac
	function OnlyLoadLevel();// 0x34e61e4
	function LogLoc();// 0x34e61c8
	function InvertMouse();// 0x34e61b4
	function God();// 0x13cd5fc
	function Ghost();// 0x141e230
	function FreezeFrame();// 0x139feec
	function Fly();// 0x13b3390
	function FlushLog();// 0x34e6198
	function EnableDebugCamera();// 0x34e617c
	function DumpVoiceMutingState();// 0x34e6160
	function DumpPartyState();// 0x34e6144
	function DumpOnlineSessionState();// 0x34e6128
	function DumpChatState();// 0x34e610c
	function DisableDebugCamera();// 0x34e60f0
	function DestroyTarget();// 0x13b3858
	function DestroyPawns();// 0x34e6070
	function DestroyAllPawnsExceptTarget();// 0x34e6054
	function DestroyAll();// 0x2795168
	function DebugCapsuleSweepSize();// 0x34e5f90
	function DebugCapsuleSweepPawn();// 0x34e5f74
	function DebugCapsuleSweepComplex();// 0x34e5eec
	function DebugCapsuleSweepClear();// 0x34e5ed0
	function DebugCapsuleSweepChannel();// 0x34e5e50
	function DebugCapsuleSweepCapture();// 0x34e5e34
	function DebugCapsuleSweep();// 0x13f77ec
	function DamageTarget();// 0x34e5db4
	function CheatScript();// 0x34e5c5c
	function ChangeSize();// 0x1581108
	function BugItStringCreator();// 0x34e5a60
	function BugItGo();// 0x34e5880
	function BugIt();// 0x34e57bc

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x556 , Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x556 , Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x558 , Size: 4]
	float SpeedScale;//[Offset: 0x56c , Size: 4]
	float InitialMaxSpeed;//[Offset: 0x570 , Size: 4]
	float InitialAccel;//[Offset: 0x574 , Size: 4]
	float InitialDecel;//[Offset: 0x578 , Size: 4]
	function ToggleDisplay();// 0x34f01e8
	function ShowDebugSelectedInfo();// 0x34f01cc
	function SetPawnMovementSpeedScale();// 0x34f0154
	function ReceiveOnDeactivate();// 0x1ddc250
	function ReceiveOnActorSelected();// 0x1ddc250
	function ReceiveOnActivate();// 0x1ddc250
	function GetSelectedActor();// 0x34f012c

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x508 , Size: 4]
	float FrustumAngle;//[Offset: 0x50c , Size: 4]
	float FrustumAspectRatio;//[Offset: 0x510 , Size: 4]
	float FrustumStartDist;//[Offset: 0x514 , Size: 4]
	float FrustumEndDist;//[Offset: 0x518 , Size: 4]
	Texture* Texture;//[Offset: 0x51c , Size: 4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d , Size: 1]
	KeyBind[] DebugExecBindings;//[Offset: 0x160 , Size: 12]
	FName[] InvertedAxis;//[Offset: 0x190 , Size: 12]
	function SetMouseSensitivity();// 0x35d2eac
	function SetBind();// 0x35d2da4
	function InvertAxisKey();// 0x35d2ab8
	function InvertAxis();// 0x35d2a40
	function ClearSmoothing();// 0x35d2a2c

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0 , Size: 16]
	FString Command;//[Offset: 0x10 , Size: 12]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c , Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c , Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c , Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c , Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c , Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c , Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d , Size: 1]

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x1c , Size: 12]
	float Duration;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x4 , Size: 88]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0 , Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54 , Size: 4]

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x1c , Size: 12]
	float ActiveOpacity;//[Offset: 0x28 , Size: 4]
	float InactiveOpacity;//[Offset: 0x2c , Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30 , Size: 4]
	float TimeUntilReset;//[Offset: 0x34 , Size: 4]
	float ActivationDelay;//[Offset: 0x38 , Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	float StartupDelay;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0 , Size: 4]
	Texture2D* Image2;//[Offset: 0x4 , Size: 4]
	Vector2D Center;//[Offset: 0x8 , Size: 8]
	Vector2D VisualSize;//[Offset: 0x10 , Size: 8]
	Vector2D ThumbSize;//[Offset: 0x18 , Size: 8]
	Vector2D InteractionSize;//[Offset: 0x20 , Size: 8]
	Vector2D InputScale;//[Offset: 0x28 , Size: 8]
	Key MainInputKey;//[Offset: 0x30 , Size: 16]
	Key AltInputKey;//[Offset: 0x40 , Size: 16]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x304 , Size: 4]
	float BaseLookUpRate;//[Offset: 0x308 , Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x30c , Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x310 , Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x314 , Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318 , Size: 1]
	function TurnAtRate();// 0x34f1758
	function MoveUp_World();// 0x34f16d8
	function MoveRight();// 0x13f2054
	function MoveForward();// 0x34f1658
	function LookUpAtRate();// 0x34f15e0

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x518 , Size: 4]
	function SetSphereRadius();// 0x35fdcd4
	function GetUnscaledSphereRadius();// 0x34de0cc
	function GetShapeScale();// 0x34de084
	function GetScaledSphereRadius();// 0x34ddd0c

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x524 , Size: 4]
	int PreviousLODLevel;//[Offset: 0x528 , Size: 4]
	int MinLod;//[Offset: 0x52c , Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x530 , Size: 4]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x534 , Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x534 , Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x534 , Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x534 , Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x534 , Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x534 , Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x534 , Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x534 , Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x538 , Size: 4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x53c , Size: 12]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x548 , Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554 , Size: 1]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x558 , Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x594 , Size: 24]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ac , Size: 1]
	function SetStaticMesh();// 0x29a9a8c
	function SetForcedLodModel();// 0x3608b3c
	function SetDistanceFieldSelfShadowBias();// 0x1427acc
	function SetDirty();// 0x3608b28
	function OnRep_StaticMesh();// 0x3608ab0
	function GetLocalBounds();// 0x36089d8

--------------------------------
Class: StaticMesh.Object
	FName LODGroup;//[Offset: 0x30 , Size: 8]
	int MinLod;//[Offset: 0x38 , Size: 4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x3c , Size: 12]
	BodySetup* BodySetup;//[Offset: 0x48 , Size: 4]
	int LODForCollision;//[Offset: 0x4c , Size: 4]
	float CullingScreenSize;//[Offset: 0x50 , Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55 , Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56 , Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57 , Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57 , Size: 1]
	bool bIsVisibleInLowDevice;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x57 , Size: 1]
	bool bIsVisibleInMidDevice;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57 , Size: 1]
	bool bIsVisibleInHighDevice;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57 , Size: 1]
	int SupportCPUInstancesLOD;//[Offset: 0x58 , Size: 4]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90 , Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x94 , Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	StaticMeshSocket[] Sockets;//[Offset: 0xc0 , Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0xd4 , Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xe0 , Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xec , Size: 28]
	Vector4[] OcclusionCullingVertex;//[Offset: 0x108 , Size: 12]
	int ElementToIgnoreForTexFactor;//[Offset: 0x114 , Size: 4]
	AssetUserData[] AssetUserData;//[Offset: 0x118 , Size: 12]
	NavCollision* NavCollision;//[Offset: 0x124 , Size: 4]
	function GetNumSections();// 0x360812c
	function GetNumLODs();// 0x3608104
	function GetMaterialIndex();// 0x3608084
	function GetMaterial();// 0x3608004
	function GetBounds();// 0x3607fb0
	function GetBoundingBox();// 0x3607f5c

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0 , Size: 4]
	FName MaterialSlotName;//[Offset: 0x8 , Size: 8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10 , Size: 20]
	SoftObjectPath MaterialSoftRef;//[Offset: 0x28 , Size: 24]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20 , Size: 8]
	Vector RelativeLocation;//[Offset: 0x28 , Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34 , Size: 12]
	Vector RelativeScale;//[Offset: 0x40 , Size: 12]
	FString Tag;//[Offset: 0x4c , Size: 12]

--------------------------------
Class: NavCollision.Object
	NavCollisionCylinder[] CylinderCollision;//[Offset: 0x58 , Size: 12]
	NavCollisionBox[] BoxCollision;//[Offset: 0x64 , Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70 , Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74 , Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74 , Size: 1]

--------------------------------
Class: NavCollisionCylinder
	Vector Offset;//[Offset: 0x0 , Size: 12]
	float Radius;//[Offset: 0xc , Size: 4]
	float Height;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: NavCollisionBox
	Vector Offset;//[Offset: 0x0 , Size: 12]
	Vector Extent;//[Offset: 0xc , Size: 12]

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0 , Size: 12]
	PackedNormal Normal;//[Offset: 0xc , Size: 4]
	Color Color;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: PackedNormal
	byte X;//[Offset: 0x0 , Size: 1]
	byte Y;//[Offset: 0x1 , Size: 1]
	byte Z;//[Offset: 0x2 , Size: 1]
	byte W;//[Offset: 0x3 , Size: 1]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0 , Size: 4]
	int TextureLevelIndex;//[Offset: 0x4 , Size: 4]
	float TexelFactor;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4 , Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8 , Size: 4]
	float EmissiveBoost;//[Offset: 0xc , Size: 4]
	float DiffuseBoost;//[Offset: 0x10 , Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20 , Size: 8]
	World* WorldAsset;//[Offset: 0x28 , Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50 , Size: 8]
	FName[] LODPackageNames;//[Offset: 0x58 , Size: 12]
	Transform LevelTransform;//[Offset: 0x70 , Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0 , Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0 , Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0 , Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0 , Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa0 , Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa1 , Size: 1]
	int LevelLODIndex;//[Offset: 0xa4 , Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8 , Size: 1]
	Color DrawColor;//[Offset: 0xac , Size: 4]
	LinearColor LevelColor;//[Offset: 0xb0 , Size: 16]
	LevelStreamingVolume[] EditorStreamingVolumes;//[Offset: 0xc0 , Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xcc , Size: 4]
	FString[] Keywords;//[Offset: 0xd4 , Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xe0 , Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xec , Size: 12]
	delegate OnLevelShown;//[Offset: 0xf8 , Size: 12]
	delegate OnLevelHidden;//[Offset: 0x104 , Size: 12]
	Level* LoadedLevel;//[Offset: 0x110 , Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x114 , Size: 4]
	Level[] UnloadingLevels;//[Offset: 0x118 , Size: 12]
	function IsStreamingStatePending();// 0x3581360
	function IsLevelVisible();// 0x3581338
	function IsLevelLoaded();// 0x3581314
	function GetWorldAssetPackageFName();// 0x35812d4
	function GetLevelScriptActor();// 0x35812ac
	function CreateInstance();// 0x358114c

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x2e8 , Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4 , Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4 , Size: 1]
	byte StreamingUsage;//[Offset: 0x2f5 , Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x494 , Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x71c , Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x744 , Size: 1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8 , Size: 4]
	Level* Level;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	<class Object,ObjectPool> Pools;//[Offset: 0x4 , Size: 60]
	<class Object> EnabledClasses;//[Offset: 0x40 , Size: 60]

--------------------------------
Class: ObjectPool
	class Object* ObjectClass;//[Offset: 0x0 , Size: 4]
	Object[] Pool;//[Offset: 0x4 , Size: 12]
	<Object,uint32> RecycleTime;//[Offset: 0x10 , Size: 60]
	int Size;//[Offset: 0x4c , Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c , Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20 , Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x24 , Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28 , Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28 , Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28 , Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28 , Size: 1]
	enum DataGatheringMode;//[Offset: 0x29 , Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a , Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x2c , Size: 4]
	NavDataConfig[] SupportedAgents;//[Offset: 0x30 , Size: 12]
	float UpdateInterval;//[Offset: 0x3c , Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x40 , Size: 4]
	NavigationData[] NavDataSet;//[Offset: 0x44 , Size: 12]
	NavigationData[] NavDataRegistrationQueue;//[Offset: 0x50 , Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa4 , Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb0 , Size: 12]
	enum OperationMode;//[Offset: 0x160 , Size: 1]
	function UpdateDynamicGenerateTargetNav();// 0x35a2d64
	function UnregisterNavigationInvoker();// 0x35a2cec
	function SimpleMoveToLocation();// 0x35a2c2c
	function SimpleMoveToActor();// 0x35a2b78
	function SetMaxSimultaneousTileGenerationJobsCount();// 0x35a2b00
	function SetGeometryGatheringMode();// 0x35a2a88
	function ResetMaxSimultaneousTileGenerationJobsCount();// 0x35a2a74
	function RegisterNavigationInvoker();// 0x35a2974
	function ProjectPointToNavigation();// 0x35a27c8
	function OnNavigationBoundsUpdated();// 0x35a2750
	function NavigationRaycast();// 0x35a2550
	function K2_ProjectPointToNavigation();// 0x35a2360
	function K2_GetRandomReachablePointInRadius();// 0x35a2170
	function K2_GetRandomPointInNavigableRadius();// 0x35a1f80
	function IsNavigationBeingBuiltOrLocked();// 0x35a1f08
	function IsNavigationBeingBuilt();// 0x35a1e90
	function GetRandomReachablePointInRadius();// 0x35a1ce4
	function GetRandomPointInNavigableRadius();// 0x35a1b38
	function GetPathLength();// 0x35a1934
	function GetPathCost();// 0x35a1730
	function GetNavigationSystem();// 0x35a16b8
	function FindPathToLocationSynchronously();// 0x35a150c
	function FindPathToActorSynchronously();// 0x35a132c

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x2c0 , Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x2cc , Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x2d0 , Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x2d4 , Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x2d8 , Size: 4]
	class HUD* HUDClass;//[Offset: 0x2dc , Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x2e0 , Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2e4 , Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x2e8 , Size: 4]
	GameSession* GameSession;//[Offset: 0x2ec , Size: 4]
	GameStateBase* GameState;//[Offset: 0x2f0 , Size: 4]
	FText DefaultPlayerName;//[Offset: 0x2f4 , Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300 , Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x300 , Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x300 , Size: 1]
	function StartPlay();// 0x350c548
	function SpawnDefaultPawnFor();// 0x350c47c
	function SpawnDefaultPawnAtTransform();// 0x350c320
	function ShouldReset();// 0x1394060
	function ReturnToMainMenuHost();// 0x350c2fc
	function RestartPlayerAtTransform();// 0x350c1a0
	function RestartPlayerAtPlayerStart();// 0x1933b78
	function RestartPlayer();// 0x350c120
	function ResetLevel();// 0x1551770
	function PlayerCanRestart();// 0x350c098
	function MustSpectate();// 0x350c010
	function K2_PostLogin();// 0x1ddc250
	function K2_OnSwapPlayerControllers();// 0x1ddc250
	function K2_OnRestartPlayer();// 0x1ddc250
	function K2_OnLogout();// 0x1ddc250
	function K2_OnChangeName();// 0x1ddc250
	function K2_FindPlayerStart();// 0x350bf08
	function InitStartSpot();// 0x1582218
	function InitializeHUDForPlayer();// 0x13a1b64
	function HasMatchStarted();// 0x350bed8
	function HandleStartingNewPlayer();// 0x139463c
	function GetNumSpectators();// 0x350bea8
	function GetNumPlayers();// 0x34e23f4
	function GetDefaultPawnClassForController();// 0x350be20
	function FindPlayerStart();// 0x350bd10
	function ChoosePlayerStart();// 0x1518b9c
	function ChangeName();// 0x1931b74
	function CanSpectate();// 0x350bc44

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x2c0 , Size: 4]
	int MaxPlayers;//[Offset: 0x2c4 , Size: 4]
	int MaxPartySize;//[Offset: 0x2c8 , Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x2cc , Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd , Size: 1]
	FName SessionName;//[Offset: 0x2d0 , Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x2c0 , Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2c4 , Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2c8 , Size: 4]
	PlayerState[] PlayerArray;//[Offset: 0x2cc , Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8 , Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x2dc , Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x2e0 , Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x2e4 , Size: 4]
	function OnRep_SpectatorClass();// 0x34e9b0c
	function OnRep_ReplicatedWorldTimeSeconds();// 0x3517a8c
	function OnRep_ReplicatedHasBegunPlay();// 0x156b3a0
	function OnRep_GameModeClass();// 0x34e9af0
	function HasMatchStarted();// 0x1518d70
	function HasBegunPlay();// 0x3517a5c
	function GetServerWorldTimeSeconds();// 0x14a292c
	function GetPlayerStartTime();// 0x35179d4
	function GetPlayerRespawnDelay();// 0x351794c

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20 , Size: 24]
	FName AISystemModuleName;//[Offset: 0x38 , Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20 , Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24 , Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28 , Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c , Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30 , Size: 4]
	float TestHeightDifference;//[Offset: 0x34 , Size: 4]
	float HeightCheckMargin;//[Offset: 0x38 , Size: 4]
	function RegisterMovementComponent();// 0x34c8368
	function GetObjectCount();// 0x34c8340
	function GetNewAvoidanceUID();// 0x34c8318
	function GetAvoidanceVelocityForComponent();// 0x34c8288

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x4 , Size: 4]
	NetDriver* NetDriver;//[Offset: 0x8 , Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xc , Size: 4]
	Level* PersistentLevel;//[Offset: 0x10 , Size: 4]
	<Level> Levels;//[Offset: 0x14 , Size: 60]

--------------------------------
Class: GameInstance.Object
	int64[] EncryptedLocalPlayers;//[Offset: 0x24 , Size: 12]
	LocalPlayer[] LocalPlayers;//[Offset: 0x30 , Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c , Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68 , Size: 1]
	function ReceiveShutdown();// 0x1ddc250
	function ReceiveInit();// 0x1ddc250
	function HandleTravelError();// 0x1ddc250
	function HandleNetworkError();// 0x1ddc250
	function GetDeviceLevel();// 0x150b024
	function DebugRemovePlayer();// 0x34e637c
	function DebugCreatePlayer();// 0x350a7b4

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38 , Size: 4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58 , Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c , Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	int ControllerId;//[Offset: 0xa0 , Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24 , Size: 4]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x28 , Size: 12]
	World* World;//[Offset: 0x58 , Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c , Size: 4]
	function SSSwapControllers();// 0x13cda9c
	function ShowTitleSafeArea();// 0x13f070c
	function SetConsoleTarget();// 0x139feec

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24 , Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28 , Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c , Size: 4]
	FString[] HistoryBuffer;//[Offset: 0x44 , Size: 12]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0 , Size: 4]
	class Object* WithinClass;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20 , Size: 4]
	World* World;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x1c , Size: 16]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x2c , Size: 12]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	Guid ID;//[Offset: 0x8 , Size: 16]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18 , Size: 16]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming[] TilesStreaming;//[Offset: 0x98 , Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xa8 , Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0 , Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1 , Size: 1]
	float RebaseOriginDistance;//[Offset: 0xb4 , Size: 4]
	FString PVEBordersName;//[Offset: 0xb8 , Size: 12]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x2c0 , Size: 4]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x518 , Size: 12]
	function SetBoxExtent();// 0x34d53bc
	function GetUnscaledBoxExtent();// 0x34d5390
	function GetScaledBoxExtent();// 0x34d5338

--------------------------------
Class: WaterSwimObject_C.WaterSwimActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c8 , Size: 4]
	function IsNewIphone();// 0x1ddc250
	function SetWateMaterial();// 0x1ddc250
	function HideUnderWaterEffect();// 0x1ddc250
	function ShowUnderWaterEffect();// 0x1ddc250
	function IsCapsult();// 0x1ddc250
	function UserConstructionScript();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature();// 0x1ddc250
	function BndEvt__PostSceneBox_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature();// 0x1ddc250
	function CustomEvent();// 0x1ddc250
	function CustomEvent();// 0x1ddc250
	function ReceiveEndPlay();// 0x1ddc250
	function ExecuteUbergraph_WaterSwimObject();// 0x1ddc250
	GameEventListener* GameEventListener;//[Offset: 0x2cc , Size: 4]
	ParticleSystemComponent* P_Water_down_01;//[Offset: 0x2d0 , Size: 4]
	AkComponent* Ak;//[Offset: 0x2d4 , Size: 4]
	PostProcessComponent* PostProcess;//[Offset: 0x2d8 , Size: 4]
	BoxComponent* PostSceneBox;//[Offset: 0x2dc , Size: 4]
	StaticMeshComponent* watermesh;//[Offset: 0x2e0 , Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e4 , Size: 4]
	float Gamma;//[Offset: 0x2e8 , Size: 4]
	PostProcessSettings NewVar;//[Offset: 0x2f0 , Size: 1232]
	STExtraBaseCharacter[] playerList;//[Offset: 0x7c0 , Size: 12]
	byte NewVar;//[Offset: 0x7cc , Size: 1]
	float FogDensity;//[Offset: 0x7d0 , Size: 4]
	ExponentialHeightFog* heightfog;//[Offset: 0x7d4 , Size: 4]
	MaterialInstanceDynamic* NoHDRWater;//[Offset: 0x7d8 , Size: 4]
	MaterialInstanceDynamic* HDROcean;//[Offset: 0x7dc , Size: 4]
	MaterialInstanceDynamic* HDRSwamp;//[Offset: 0x7e0 , Size: 4]
	MaterialInterface* HDROceanMaterial;//[Offset: 0x7e4 , Size: 4]
	MaterialInterface* HDRSwampMaterial;//[Offset: 0x7e8 , Size: 4]
	MaterialInterface* NoHDRWaterMaterial;//[Offset: 0x7ec , Size: 4]
	<FString> newIOSDevice;//[Offset: 0x7f0 , Size: 60]

--------------------------------
Class: WaterSwimActor.Actor.Object
	BoxComponent* WaterBoxComp;//[Offset: 0x2c0 , Size: 4]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: GameEventListener.ActorComponent.Object
	delegate OnGameEventListener;//[Offset: 0xbc , Size: 12]
	float HeightCheck_High;//[Offset: 0xc8 , Size: 4]
	float HeightCheck_Mid;//[Offset: 0xcc , Size: 4]
	float HeightCheck_Low;//[Offset: 0xd0 , Size: 4]
	float FlyingScreenSizeCullingFactor;//[Offset: 0xd8 , Size: 4]
	float FlyingDistanceCullingFactor;//[Offset: 0xdc , Size: 4]
	float HighMidFightingScreenSizeCullingFactor;//[Offset: 0xe0 , Size: 4]
	float HighMidFightingDistanceCullingFactor;//[Offset: 0xe4 , Size: 4]
	float LowFightingScreenSizeCullingFactor;//[Offset: 0xe8 , Size: 4]
	float LowFightingDistanceCullingFactor;//[Offset: 0xec , Size: 4]
	bool bUsetoControlNearClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	bool bNearClipInPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	function StarCalcJump();// 0x1419d14
	function ScaleScreenSizeCulling();// 0x1419c9c
	function OnChangeViewTarget();// 0x1419c88
	function IsPlayerLandFromTheAir();// 0x1419c60
	function IsPlayerLanded();// 0x1419c38
	function IsPlayerFlying();// 0x1419c10
	function HeightCheck();// 0x1419bfc
	function GameEventReBirth();// 0x1419be8
	function GameEventPlane();// 0x1419bd4
	function GameEventParachute();// 0x1419bc0
	function GameEventLanded();// 0x1419bac
	function GameEventJump();// 0x1419b98
	function GameEventFinished();// 0x1419b84
	function GameEventFighting();// 0x1419b70
	function GameEventDie();// 0x1419ab4
	function GameEventBirth();// 0x1419aa0
	function ChangeViewtargetToPlane();// 0x1419a8c

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x238 , Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x23c , Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x248 , Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x24c , Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x250 , Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258 , Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x258 , Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x258 , Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x258 , Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259 , Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25a , Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25a , Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x25c , Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x260 , Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x264 , Size: 4]
	FString EventName;//[Offset: 0x268 , Size: 12]
	function UseReverbVolumes();// 0x3fe6838
	function UseEarlyReflections();// 0x3fe6504
	function Stop();// 0x3fe64f0
	function SetSwitch();// 0x3fe6280
	function SetStopWhenOwnerDestroyed();// 0x3fe6200
	function SetRTPCValueGlobally();// 0x3fe6064
	function SetRTPCValue();// 0x3fe5e84
	function SetOutputBusVolume();// 0x3fe5e0c
	function SetListeners();// 0x3fe5d40
	function SetEarlyReflectionOrder();// 0x3fe5cc8
	function SetAutoDestroy();// 0x3fe5c4c
	function SetAttenuationScalingFactor();// 0x3fe5bd4
	function PostTrigger();// 0x3fe5a7c
	function PostAssociatedAkEvent();// 0x3fe5a54
	function PostAkEventByName();// 0x3fe5990
	function PostAkEvent();// 0x3fe5888
	function GetAttenuationRadius();// 0x3fe5860

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c , Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20 , Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	float MinimumDuration;//[Offset: 0x28 , Size: 4]
	float MaximumDuration;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x240 , Size: 1232]
	float Priority;//[Offset: 0x710 , Size: 4]
	float BlendRadius;//[Offset: 0x714 , Size: 4]
	float BlendWeight;//[Offset: 0x718 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c , Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c , Size: 1]
	function AddOrUpdateBlendable();// 0x35d5acc

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0x804 , Size: 12]
	delegate OnPlayerPawnHPChange;//[Offset: 0x810 , Size: 12]
	delegate OnDeath;//[Offset: 0x81c , Size: 12]
	delegate OnBulletChange;//[Offset: 0x828 , Size: 12]
	delegate OnPlayerPoseChange;//[Offset: 0x834 , Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x840 , Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0x84c , Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0x858 , Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0x864 , Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0x870 , Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0x87c , Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0x888 , Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0x894 , Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0x8c8 , Size: 12]
	delegate OnPerspectiveChanged;//[Offset: 0x8d4 , Size: 12]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0x8e0 , Size: 12]
	delegate OnDeathDelegate;//[Offset: 0x8ec , Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0x8f8 , Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0x904 , Size: 12]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0x92c , Size: 12]
	delegate OnUpdateForSleepComponent;//[Offset: 0x938 , Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0x984 , Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x990 , Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0x99c , Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0x9a8 , Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0x9b4 , Size: 12]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0x9c0 , Size: 12]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0x9cc , Size: 12]
	delegate OnPawnRespawnDelegate;//[Offset: 0x9d8 , Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0x9e4 , Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0x9e8 , Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0x9ec , Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0x9f0 , Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0x9f4 , Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0x9f8 , Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9fc , Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9fc , Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9fc , Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xa00 , Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa04 , Size: 1]
	float Money;//[Offset: 0xa08 , Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0c , Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0d , Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0d , Size: 1]
	byte TeamNum;//[Offset: 0xa0e , Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0f , Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa10 , Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xa14 , Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa18 , Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa19 , Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1a , Size: 1]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1b , Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1c , Size: 1]
	float FallingTime;//[Offset: 0xa20 , Size: 4]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa24 , Size: 1]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa25 , Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa26 , Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xa2c , Size: 4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xa34 , Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0xa38 , Size: 4]
	FName HeadSocketName;//[Offset: 0xa40 , Size: 8]
	FName LFootSocketName;//[Offset: 0xa48 , Size: 8]
	FName RFootSocketName;//[Offset: 0xa50 , Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0xa58 , Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0xa5c , Size: 4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0xa60 , Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xa64 , Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0xa68 , Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0xa6c , Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0xa70 , Size: 4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa74 , Size: 1]
	Rotator ServerControlRotation;//[Offset: 0xa78 , Size: 12]
	byte PoseState;//[Offset: 0xa84 , Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0xa88 , Size: 4]
	Actor* ThePlane;//[Offset: 0xa8c , Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0xa90 , Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0xa94 , Size: 12]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa0 , Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa1 , Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0 , Size: 1]
	byte LastPoseState;//[Offset: 0xab8 , Size: 1]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab9 , Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0xabc , Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac4 , Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac5 , Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac6 , Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0xac8 , Size: 4]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0xacc , Size: 4]
	WeaponSlotSwitchTimeData[] SwitchSlotTimeDataList;//[Offset: 0xad0 , Size: 12]
	Actor[] PlayerSlotData;//[Offset: 0xadc , Size: 12]
	Actor[] InventoryData;//[Offset: 0xae8 , Size: 12]
	AkComponent* SoundComp;//[Offset: 0xb4c , Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0xb50 , Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb54 , Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0xb58 , Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0xb5c , Size: 4]
	<FString,SpecialAmbientData> SpecialMapAmbientSoundConfig;//[Offset: 0xb60 , Size: 60]
	SceneComponent* MeshContainer;//[Offset: 0xb9c , Size: 4]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0 , Size: 1]
	Actor* WaterObj;//[Offset: 0xba4 , Size: 4]
	float HearRadius;//[Offset: 0xba8 , Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbac , Size: 1]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbad , Size: 1]
	byte ClientHitPartJudgment;//[Offset: 0xbae , Size: 1]
	byte DSHitPartJudgment;//[Offset: 0xbaf , Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0xbb0 , Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0xbb4 , Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0xbb8 , Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbbc , Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0xbc0 , Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc4 , Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0xbc8 , Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0 , Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0xbd4 , Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0xbd8 , Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0xbe0 , Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0xbe8 , Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0xbf0 , Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0xbf8 , Size: 8]
	Vector NewStandHitBodyBoxScale;//[Offset: 0xc00 , Size: 12]
	Vector NewProneHitBodyBoxScale;//[Offset: 0xc0c , Size: 12]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0xc18 , Size: 60]
	Vector ScopeNewIdleLoc;//[Offset: 0xc54 , Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0xc60 , Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0xc6c , Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0xc70 , Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0xc7c , Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0xc80 , Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0xc84 , Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0xc8c , Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0xc98 , Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0xc9c , Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0xca0 , Size: 4]
	float ScopeLagScale;//[Offset: 0xca8 , Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0xcac , Size: 4]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0xcb0 , Size: 4]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0xcb4 , Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0xcb8 , Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0xcbc , Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0xcc0 , Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0xcc4 , Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0xcd0 , Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcdc , Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0xce0 , Size: 4]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0xce4 , Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0xce8 , Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0xcec , Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0xcf0 , Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0xcf4 , Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0xcf8 , Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfc , Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0xd00 , Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0xd10 , Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0xd1c , Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0xd28 , Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd34 , Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd35 , Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd36 , Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0xd38 , Size: 4]
	Vector ProneBoxRelativeLocation;//[Offset: 0xd3c , Size: 12]
	DamageCauserRecordData[] DamageCauserRecords;//[Offset: 0xd48 , Size: 12]
	DamageCauserRecordData[] DamageRecords;//[Offset: 0xd54 , Size: 12]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0xd60 , Size: 4]
	float PickUpRadius;//[Offset: 0xd64 , Size: 4]
	SimViewData SimulateViewData;//[Offset: 0xd68 , Size: 4]
	SearchedTombBoxAndWrapperListResult[] SearchTombBoxResult;//[Offset: 0xd6c , Size: 12]
	AnchorPlatData AnchorPlat;//[Offset: 0xd78 , Size: 8]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0xd88 , Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0xdb0 , Size: 8]
	float MaxDispalyFootprintDistance;//[Offset: 0xdc4 , Size: 4]
	KilledTipsBlock BlockData;//[Offset: 0xdc8 , Size: 40]
	class AnimInstance* MainCharAnimClass;//[Offset: 0xdf0 , Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0xdf4 , Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfc , Size: 1]
	int CurrentEmoteIndex;//[Offset: 0xe00 , Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0xe08 , Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0xe18 , Size: 40]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0xe40 , Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0xe44 , Size: 4]
	<FName,enum> PawnStateRelatedBuffMap;//[Offset: 0xe4c , Size: 60]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe88 , Size: 1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe89 , Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0xe8c , Size: 4]
	Vector CurInputVector;//[Offset: 0xe90 , Size: 12]
	StaticMeshComponent* ScopComp;//[Offset: 0xe9c , Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0xeac , Size: 4]
	float voiceCheckCD;//[Offset: 0xeb0 , Size: 4]
	float voiceCheckShowCD;//[Offset: 0xeb4 , Size: 4]
	float VoiceCheckDis;//[Offset: 0xeb8 , Size: 4]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0xed4 , Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0xee4 , Size: 4]
	byte MovementModeBeforeNearDeath;//[Offset: 0xee8 , Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0xeec , Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0xef0 , Size: 4]
	int HandFolderRatio;//[Offset: 0xef4 , Size: 4]
	float SwimUpRate;//[Offset: 0xef8 , Size: 4]
	bool IsSwimUpWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefc , Size: 1]
	float UpWaterHeight;//[Offset: 0xf00 , Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0xf04 , Size: 4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf08 , Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf09 , Size: 1]
	Vector_NetQuantize MoveInputState;//[Offset: 0xf44 , Size: 12]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf88 , Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0xfa8 , Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0xfb0 , Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0xfc0 , Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0xff0 , Size: 48]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x1038 , Size: 4]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x103c , Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1040 , Size: 4]
	float DelayHideDuration;//[Offset: 0x1044 , Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1048 , Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104c , Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x1050 , Size: 4]
	CircleMgrComponent* CircleMgr;//[Offset: 0x1054 , Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1060 , Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x1064 , Size: 132]
	AnimParamList CurAnimParamList;//[Offset: 0x10e8 , Size: 276]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x11fc , Size: 44]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x1228 , Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x1258 , Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x1278 , Size: 32]
	byte ThrowGrenadeMode;//[Offset: 0x1298 , Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a8 , Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a9 , Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x12ac , Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b4 , Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x12b8 , Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x12bc , Size: 4]
	float HighWalkSpeed;//[Offset: 0x12d4 , Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x12d8 , Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x12dc , Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x12e0 , Size: 4]
	float MaxProneSpeed;//[Offset: 0x12e4 , Size: 4]
	float MaxSprintSpeed;//[Offset: 0x12e8 , Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x12ec , Size: 4]
	float MaxSwimSpeed;//[Offset: 0x12f0 , Size: 4]
	float HealthPredict;//[Offset: 0x12f4 , Size: 4]
	float BreathAmount;//[Offset: 0x12f8 , Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fc , Size: 1]
	int PoisonSmogStage;//[Offset: 0x1300 , Size: 4]
	float PoisonSmogProgress;//[Offset: 0x1304 , Size: 4]
	float AntidoteExeTime;//[Offset: 0x1308 , Size: 4]
	float AntidoteMaxTime;//[Offset: 0x130c , Size: 4]
	float SpeedDynamicScale;//[Offset: 0x1310 , Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1314 , Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x1318 , Size: 12]
	byte HealthStatus;//[Offset: 0x1324 , Size: 1]
	<enum,BodyPartCfg> BodyPartConfigMap;//[Offset: 0x1328 , Size: 60]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1364 , Size: 1]
	float SpeedScale;//[Offset: 0x1368 , Size: 4]
	float EnergySpeedScale;//[Offset: 0x136c , Size: 4]
	float DefaultSpeedValue;//[Offset: 0x1370 , Size: 4]
	float SpeedValue;//[Offset: 0x1374 , Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x1378 , Size: 4]
	CharacterEnergyData Energy;//[Offset: 0x137c , Size: 44]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a8 , Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x13ac , Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x13b0 , Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x13b4 , Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x13b8 , Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x13c0 , Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x13c4 , Size: 4]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x13c8 , Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x13cc , Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x13d0 , Size: 4]
	float StandHalfHeight;//[Offset: 0x13d4 , Size: 4]
	float CrouchHalfHeight;//[Offset: 0x13d8 , Size: 4]
	float ProneHalfHeight;//[Offset: 0x13dc , Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x13e0 , Size: 4]
	float StandRadius;//[Offset: 0x13e4 , Size: 4]
	float DyingRadius;//[Offset: 0x13e8 , Size: 4]
	HealthPredictShowData[] HealthPredictShowDataList;//[Offset: 0x13ec , Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x13f8 , Size: 4]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1408 , Size: 1]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0x140c , Size: 4]
	float LastVehicleDamageCD;//[Offset: 0x1414 , Size: 4]
	int VehicleSeatIdx;//[Offset: 0x141c , Size: 4]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x1428 , Size: 4]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1444 , Size: 1]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x1448 , Size: 4]
	delegate OnAttachedToVehicle;//[Offset: 0x144c , Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x1458 , Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x1464 , Size: 12]
	delegate StateEnterHandler;//[Offset: 0x1470 , Size: 12]
	delegate StateLeaveHandler;//[Offset: 0x147c , Size: 12]
	delegate StateInterruptedHandlerBP;//[Offset: 0x14a4 , Size: 12]
	PawnStateDisable[] DisabledPawnStates;//[Offset: 0x14b0 , Size: 12]
	uint64 CurrentStates;//[Offset: 0x14c0 , Size: 8]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x1554 , Size: 4]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155c , Size: 1]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155d , Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x1560 , Size: 4]
	STParachuteState STReplicateParchuteState;//[Offset: 0x1568 , Size: 24]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x1580 , Size: 32]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a0 , Size: 1]
	float MoveForwardInputValue;//[Offset: 0x15a4 , Size: 4]
	float MoveRightInputValue;//[Offset: 0x15a8 , Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ac , Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x15b0 , Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b4 , Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x15b8 , Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x15bc , Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x15c4 , Size: 4]
	STExtraBaseCharacter[] FlyingTeam;//[Offset: 0x15c8 , Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x15d4 , Size: 4]
	enum FollowState;//[Offset: 0x15d8 , Size: 1]
	ParachuteFollowState[] TeammateParachuteFollowState;//[Offset: 0x15dc , Size: 12]
	STExtraBaseCharacter[] Inviters;//[Offset: 0x15e8 , Size: 12]
	STExtraPlayerState[] InviterStateArr;//[Offset: 0x15f4 , Size: 12]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x1604 , Size: 4]
	float maxShowAlpha;//[Offset: 0x160c , Size: 4]
	float MoveMaxShowDis;//[Offset: 0x1610 , Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x1614 , Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x1618 , Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x1654 , Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x1658 , Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x165c , Size: 4]
	int IsEnableReportRoute;//[Offset: 0x1728 , Size: 4]
	Vector EmoteColBox;//[Offset: 0x1768 , Size: 12]
	float CompVisionOpDis;//[Offset: 0x1774 , Size: 4]
	float CompVisionOpDelay;//[Offset: 0x1778 , Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x177c , Size: 1]
	<SceneComponent,CharacterCompOutOfVisionOptimizationItem> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x178c , Size: 60]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c8 , Size: 1]
	bool bNightVisionUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c9 , Size: 1]
	float MaxRelavantDistance;//[Offset: 0x17d0 , Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x17d4 , Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x17d8 , Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x17dc , Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x17e0 , Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x17e4 , Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x17e8 , Size: 4]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ec , Size: 1]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x17f8 , Size: 4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1800 , Size: 1]
	float EquipingScopeDelay;//[Offset: 0x1804 , Size: 4]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1809 , Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x180c , Size: 12]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x181c , Size: 24]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x1834 , Size: 16]
	float CharacterFallingVelocityZFactor;//[Offset: 0x1844 , Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1880 , Size: 1]
	delegate CharacterDisplayFinalDamageDelegate;//[Offset: 0x1884 , Size: 12]
	<byte,float> DamagePosOffsetZ;//[Offset: 0x1890 , Size: 60]
	int AloneDistance;//[Offset: 0x18cc , Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x18d0 , Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x18d8 , Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x1900 , Size: 4]
	int ChangeWearingPromptTextID;//[Offset: 0x1904 , Size: 4]
	FString ChangeWearingPromptText;//[Offset: 0x1908 , Size: 12]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x1914 , Size: 4]
	delegate WearingMontageFinishedEvent;//[Offset: 0x1918 , Size: 12]
	Vector ChangeWearingColBox;//[Offset: 0x195c , Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x1968 , Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x196c , Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x196d , Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x1970 , Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x1974 , Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x1978 , Size: 4]
	Actor* DecalActor;//[Offset: 0x197c , Size: 4]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1980 , Size: 1]
	float OutBattleStateTime;//[Offset: 0x1984 , Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x198c , Size: 12]
	delegate OnCharacterPlayEmote;//[Offset: 0x1998 , Size: 12]
	delegate OnCharacterWin;//[Offset: 0x19a4 , Size: 12]
	delegate OnCharacterFallingModeChange;//[Offset: 0x19b0 , Size: 12]
	Vector LastServerHitImpactPoint;//[Offset: 0x19bc , Size: 12]
	byte RemainUseSupplySpotTimes;//[Offset: 0x19c8 , Size: 1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x19c9 , Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19ca , Size: 1]
	int[] UseEnhanceSpotTip;//[Offset: 0x19cc , Size: 12]
	int MonsterDamageReduceSkillID;//[Offset: 0x19d8 , Size: 4]
	<int,InteractionEmoteConfig> InteractionEmoteConfig;//[Offset: 0x19dc , Size: 60]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x1a18 , Size: 4]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a29 , Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x1a2c , Size: 12]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x1a38 , Size: 4]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x1a3c , Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x1a40 , Size: 244]
	byte MeleeAutoAimType;//[Offset: 0x1b34 , Size: 1]
	float LastSprintTriggerTime;//[Offset: 0x1b68 , Size: 4]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b70 , Size: 1]
	delegate ZombieModePropSkillUIShowDelegate;//[Offset: 0x1b74 , Size: 12]
	int ZombieModeCurrentSkillPropLevel;//[Offset: 0x1b80 , Size: 4]
	int ZombieModeCurrentSkillPropID;//[Offset: 0x1b84 , Size: 4]
	delegate MarkPlayerPosDelegate;//[Offset: 0x1b88 , Size: 12]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x1b94 , Size: 28]
	Actor* LastShootActor;//[Offset: 0x1bb0 , Size: 4]
	float RTNoDamageTime;//[Offset: 0x1bb4 , Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x1bb8 , Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x1bbc , Size: 4]
	function VaultStartPosNotifyBPToCpp();// 0x14ec5a8
	function VaultFailPawnCPP();// 0x14ec4e4
	function VaultFailPawnBluePrint();// 0x14ec410
	function UserCancelRescue();// 0x14ec3fc
	function UpdateShovelingState();// 0x14ec3d4
	function UpdateShovelingHoldStateRelease();// 0x14ec3c0
	function UpdateShovelingHoldStatePressed();// 0x14ec3ac
	function UpdatePoseCollisionCpp();// 0x14ec2f0
	function UpdateFallingTime();// 0x14ec278
	function UpdateDeathReplayInitTrans();// 0x14ec200
	function UpdateCurrentShootWeaponTick();// 0x14ec1ec
	function UpdateAllInstanceBodyTransform();// 0x14ec174
	function UnequipWeaponFinish();// 0x139c4bc
	function UnequipWeapon();// 0x14ec0b0
	function TryToBroadcastFatalDamageEvent();// 0x14ebef0
	function TryPeek();// 0x14ebe20
	function TriggerEntryEvent_Implementation();// 0x14ebda0
	function TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x1ddc250
	function SyncWaterObjectServer();// 0x14ebcec
	function SyncWaterObject();// 0x14ebc6c
	function SyncServerTagsChange();// 0x14ebb08
	function SyncDeadTombBoxToController();// 0x14eba88
	function SwitchWeaponCheck();// 0x14eb9bc
	function SwitchWeaponBySlot();// 0x14eb854
	function SwitchToLastWeapon();// 0x14eb784
	function SwitchToLastNoneMeleeWeapon();// 0x14eb6b4
	function SwitchToLastNoneGrenageWeapon();// 0x14eb5e4
	function SwitchPoseState();// 0x14eb424
	function SwapMainWeapon();// 0x14eb410
	function STServerUpdateState();// 0x14eb288
	function StopSlotAnim();// 0x14eb178
	function StopPlayEmoteAnim();// 0x14eb0f8
	function StopFireFilter();// 0x14eb0c8
	function StopFire();// 0x14eb0b4
	function StopChangeWearingAnim();// 0x14eb08c
	function StartPlayEmoteAnim();// 0x14eb00c
	function StartFireSimple();// 0x14eaff0
	function StartFireFilter();// 0x14eafc0
	function StartFire();// 0x14eae6c
	function StartChangeWearingAnim();// 0x14eae44
	function SpawnFootprint();// 0x14eadcc
	function SpawnAndSwithToGrenadeServerCall();// 0x14eacd0
	function SpawnAndSwitchToGrenadeOnServer();// 0x14eac50
	function SpawnAndSwitchToGrenadeOnClient();// 0x14eabd0
	function SpawnAndBackpackWeaponOnServer();// 0x14eaa14
	function ShowNightVisionFrame();// 0x14ea9f8
	function ShowDebugRole();// 0x14ea9e4
	function ShowDebugRecordData();// 0x14ea9d0
	function ShowDebugPickUpFlow();// 0x14ea9bc
	function ShowDebugEquipOrUnequipFlow();// 0x14ea9a8
	function ShowDebugBornLandFlow();// 0x14ea994
	function ShowConfirmDialogOfMisKill();// 0x14ea978
	function ShouldUpdateHPOnUI();// 0x14ea948
	function ShouldShowCorp();// 0x14ea920
	function ShouldShowAnchor();// 0x14ea8f8
	function ShouldAutoScopeWhenPeek();// 0x14ea8c8
	function SetWeaponShootType();// 0x14ea850
	function SetViewTargetAgainForOB();// 0x14ea83c
	function SetThrowGrenadeMode();// 0x14ea7c4
	function SetRTNoDamageTimer();// 0x14ea74c
	function SetReloadMethod();// 0x14ea688
	function SetPawnStateDisabled();// 0x14ea5c4
	function SetPawnReloadWeaponFinished();// 0x14ea53c
	function SetIsAutoFollow();// 0x14ea474
	function SetHighWalkSpeed();// 0x14ea3fc
	function SetHealthSafety();// 0x14ea340
	function SetHandFoldRatio();// 0x14ea2c8
	function SetExitingParachute();// 0x14ea248
	function SetDelayStateSwitchTime();// 0x14ea1d0
	function SetCurrentPersonPerspective();// 0x14ea0f8
	function SetComponentsActive();// 0x14ea02c
	function SetCheatSpeedModifier();// 0x14e9fac
	function SetChangeWearingPromptEnable();// 0x14e9f2c
	function SetAntidoteMaxTime();// 0x14e9eb4
	function SetAntidoteExeTime();// 0x14e9e3c
	function SetAnimParamIsRescueing();// 0x14e9dbc
	function SetAnimParamIsNearDeathStatus();// 0x14e9d3c
	function SetAnimParamCallingForRevival();// 0x14e9cbc
	function SetAnimMontagePlayRate();// 0x14e9c00
	function SetAmbientRTPC();// 0x14e9a64
	function ServerUpdateShovelingHoldState();// 0x14e999c
	function ServerTriggerJump();// 0x14e9940
	function ServerSetPoisonSmogStage();// 0x14e98c8
	function ServerSetPeekState();// 0x14e97a4
	function ServerSetPeekCollision();// 0x14e96dc
	function ServerSetPawnStateDisabled();// 0x14e95cc
	function ServerSetMovementState();// 0x14e9520
	function ServerSendToLobbyServerUseItem();// 0x14e9464
	function ServerResponseInvite();// 0x14e930c
	function ServerRequestPaintDecal();// 0x14e9150
	function ServerNightVisionUse();// 0x14e9088
	function ServerInviteTeammate();// 0x14e8f2c
	function ServerHandleBulletHitData();// 0x14e8db0
	function ServerFollowTeammate();// 0x14e8cb0
	function ServerEndZombieModePropSkill();// 0x139c4bc
	function ServerChangeThrowGrenadeMode();// 0x14e8bfc
	function ServerCancelFollow();// 0x14e8ba0
	function SendServerMoveToClientUnreliaby();// 0x14e8a68
	function SendClientMoveToServerUnreliaby();// 0x14e88f0
	function SendClientMoveToServerReliaby();// 0x14e8778
	function SearchTombBoxes();// 0x14e8688
	function SearchPickUpWrapperActors();// 0x14e8584
	function Scoping();// 0x14e850c
	function ScopeOut();// 0x14e8494
	function ScopeInterrupt();// 0x14e841c
	function ScopeIn();// 0x14e83a4
	function SaveMeshUpdateFlag();// 0x14e8384
	function S2C_InterruptState();// 0x14e82c0
	function RspSetInteractionEmoteSender();// 0x14e820c
	function RspPlayInteractionEmote();// 0x14e8158
	function RPC_Server_UseZombieModeSkill();// 0x14e80fc
	function RPC_Server_SwitchWeapon();// 0x14e7f30
	function RPC_Server_SwitchSkillProp();// 0x14e7e7c
	function RPC_Server_SwapMainWeapon();// 0x14e7e20
	function RPC_Server_SpawnAndSwitchToGrenade();// 0x14e7d6c
	function RPC_Server_SetHandFoldRatio();// 0x14e7cb8
	function RPC_Server_EnableCurrentWeaponInfiniteBullets();// 0x14e7bf0
	function RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x14e7b94
	function RPC_ReliableOwnerClientDie();// 0x14e78e0
	function RPC_NetMulticast_HandlePlayerPickUpActor();// 0x14e782c
	function RPC_CollideByTeamMate();// 0x14e7778
	function RPC_Client_SwitchWeapon();// 0x14e75ac
	function RPC_Client_SwapMainWeapon();// 0x14e7550
	function RPC_Client_SpawnAndSwitchToGrenade();// 0x14e749c
	function RPC_Client_ShowZombieModeSkillCD();// 0x14e7358
	function RPC_Client_ShootVertifyRes();// 0x14e70f0
	function RPC_Client_SetReloadCurWeapon();// 0x14e7034
	function RPC_Client_ResetWeaponSlot();// 0x14e7018
	function RPC_Client_ReportPlayerKillFlow();// 0x14e6f64
	function RPC_Client_OnSkillPropCountChanged();// 0x14e6eb0
	function RPC_Client_OnDeathStopRecordingNotify();// 0x14e6dfc
	function RPC_Client_OnDamageNotifyRecord();// 0x14e6b54
	function RPC_Client_MarkPlayersOnUI();// 0x14e6a60
	function RPC_Client_EnableCurrentWeaponInfiniteBullets();// 0x14e6998
	function RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x14e693c
	function RestoreMeshUpdateFlag();// 0x14e691c
	function ResponceInvite();// 0x14e6814
	function ResetValueLimitForHealthPredict();// 0x14e6800
	function ResetCharacterEnergy();// 0x14e67ec
	function ResetCamera();// 0x14e67d8
	function RequestUserCancleRescue();// 0x14e677c
	function RequestPaintDecal();// 0x14e66fc
	function ReqStartPlayEmoteWithRand();// 0x14e6600
	function ReqStartPlayEmote();// 0x14e654c
	function ReqStartChangeWearing();// 0x14e64f0
	function ReqSetInteractionEmoteReceiver();// 0x14e643c
	function ReqPlayInteractionEmote();// 0x14e62f8
	function ReqInteruptPlayEmote();// 0x14e6244
	function ReqInteruptChangeWearing();// 0x14e61e8
	function ReqEmotePlayFinished();// 0x14e6134
	function ReqChangeWearingFinished();// 0x14e6080
	function ReqAcceptInteractionEmote();// 0x14e6024
	function ReportAntiCheatInfo();// 0x139c4bc
	function ReloadWeaponFilter();// 0x14e5ff4
	function ReloadCurrentWeapon();// 0x14e5fcc
	function RegisterPlayerPickUpList();// 0x14e5fb8
	function RefreshWeaponOwnerCollision();// 0x14e5f38
	function RefreshPersonPerspective();// 0x14e5f24
	function RefreshPawnVaultTypeServer();// 0x14e5ec8
	function RefreshPawnVaultTypeAll();// 0x14e5e40
	function RefreshMoveAttrModifier();// 0x14e5e2c
	function RefreshAvatar();// 0x14e5d20
	function PrintAIPolicyDecisionData();// 0x14e5d0c
	function PostGetPlayerAnimation();// 0x1ddc250
	function PlaySwitchSightSound();// 0x14e5cf8
	function PlaySwitchFireModeSound();// 0x14e5ce4
	function PlaySpecialAmbientSound();// 0x14e5c6c
	function PlaySlotAnim();// 0x14e5b14
	function PlaySelfThrowAwayWeaponSound();// 0x14e5b00
	function PlayPullBoltSound();// 0x14e5aec
	function PlayOperateItemSound();// 0x14e587c
	function PlayMountAccessoriesSound();// 0x14e5868
	function PlayMagOUTSound();// 0x14e5854
	function PlayMagINSound();// 0x14e5840
	function PlayLocalShellDropFX();// 0x14e582c
	function PlayLoadBulletSound();// 0x14e5818
	function PlayFootstepSound();// 0x14e57a0
	function PlayerConfirmToRescue();// 0x14e5778
	function PlayChangeMagazineSound();// 0x14e5764
	function PlayAmbientSound();// 0x14e5750
	function PickUpWrapperActor();// 0x14e5574
	function PickUpActor();// 0x14e5474
	function PawnVaultStopCPP();// 0x14e5458
	function PawnVaultStopBluePrint();// 0x14e543c
	function PawnVaultServerStopCheckCPP();// 0x14e53e0
	function PawnVaultServerStopCheckBluePrint();// 0x14e53c4
	function PawnVaultServerCPP();// 0x14e4f3c
	function PawnVaultServerBluePrint();// 0x14e4b60
	function PawnVaultAllCPP();// 0x14e47ec
	function PawnVaultAllBluePrint();// 0x14e445c
	function PawnLeaveState();// 0x14e43dc
	function PawnHasState();// 0x14e4354
	function PawnEnterState();// 0x14e42cc
	function PawnAllowState();// 0x14e41f8
	function OnWeaponEquipmentUpdate();// 0x14e41dc
	function OnUnEquipWeapon();// 0x1ddc250
	function OnUIZombieModeSkillCDShowDelegate();// 0x14e40dc
	function OnStopFire();// 0x1ddc250
	function OnStateLeave();// 0x14e4064
	function OnStateEnter();// 0x14e3fec
	function OnStartFire();// 0x1ddc250
	function OnShowName();// 0x1ddc250
	function OnScopeNotHandFold();// 0x14e3fd8
	function OnScopeHandFold();// 0x14e3fc4
	function OnRep_ZombieModeSkillPropLevel();// 0x14e3fb0
	function OnRep_ZombieModeSkillPropChanged();// 0x14e3f9c
	function OnRep_WaterObj();// 0x14e3f88
	function OnRep_VehicleSeatIdx();// 0x14e3f74
	function OnRep_ThrowGrenadeMode();// 0x14e3f60
	function OnRep_StatusChanged();// 0x14e3ee0
	function OnRep_ShowRevivalPointIcon();// 0x14e3ecc
	function OnRep_ResetDataOnRespawn();// 0x14e3eb8
	function OnRep_ReplicatedParachuteState();// 0x139c4bc
	function OnRep_ReplicatedMoveState();// 0x14e3ea4
	function OnRep_ReplicatedIsStartParachute();// 0x14e3e90
	function OnRep_RemainUseSupplySpotTimes();// 0x14e3e7c
	function OnRep_RemainUseEnhancerSpotTimes();// 0x14e3e68
	function OnRep_PoseStateNotify();// 0x14e3df0
	function OnRep_PoisonFogStageChange();// 0x14e3ddc
	function OnRep_PlayerKey();// 0x14e3dc0
	function OnRep_PeekHasCollision();// 0x14e3dac
	function OnRep_MoneyNotify();// 0x14e3d98
	function OnRep_KillTipsNotify();// 0x139c4bc
	function OnRep_IsRescueingOtherStatusChange();// 0x14e3d84
	function OnRep_IsInvincible();// 0x14e3d70
	function OnRep_IsFPPChanged();// 0x14e3d5c
	function OnRep_IsBeingRescuedStatusChange();// 0x14e3d48
	function OnRep_HealthPredict();// 0x14e3d34
	function OnRep_Health();// 0x14e3d18
	function OnRep_HandFolderRatio();// 0x14e3d04
	function OnRep_FollowState();// 0x14e3cf0
	function OnRep_EnergyChange();// 0x14e3cdc
	function OnRep_DisabledPawnStates();// 0x14e3cc8
	function OnRep_CurrentVehicle();// 0x14e3c50
	function OnRep_CurrentStates();// 0x14e3bd4
	function OnRep_CharacterFallingVelocityZFactor();// 0x14e3bc0
	function OnRep_BreathAmmountChange();// 0x14e3bac
	function OnRep_bNightVisionUseTest();// 0x14e3b98
	function OnRep_bNightVisionUse();// 0x14e3b84
	function OnRep_bIsCallingForRevival();// 0x14e3b70
	function OnRep_AntidoteMaxTimeSync();// 0x139c4bc
	function OnRep_AntidoteExeTimeSync();// 0x139c4bc
	function OnRep_AnchorPlat();// 0x14e3b5c
	function OnRep_AKEventNotify();// 0x14e3b48
	function OnPoseStateChange();// 0x1ddc250
	function OnPlayEmote();// 0x14e3ac8
	function OnOpenDoor();// 0x14e3a04
	function OnNotifyHurt();// 0x1ddc250
	function OnLeaveStateInChangeWearing();// 0x14e398c
	function OnLeaveStateForBp();// 0x1ddc250
	function OnInterruptCurrentEmote();// 0x14e3978
	function OnInterruptChangeWearing();// 0x14e3964
	function OnHealthChangeFromRPC();// 0x14e38ec
	function OnFollowStateChange();// 0x14e38d8
	function OnEquipWeapon();// 0x1ddc250
	function OnEnterStateInChangeWearing();// 0x14e3860
	function OnEnterStateForBp();// 0x1ddc250
	function OnEndCurrentEmote();// 0x14e37a4
	function OnEndChangeWearing();// 0x14e372c
	function OnDetectPaintDecalTarget();// 0x1ddc250
	function OnCurEquipedShootWeaponChangeState();// 0x14e3670
	function OnChangeWearingAnimFinishedEvent();// 0x14e35f8
	function OnChangeWearing();// 0x14e3578
	function OnBPMoneyChange();// 0x1ddc250
	function OnBPIsInvincibleChange();// 0x1ddc250
	function OnBPHealthChange();// 0x1ddc250
	function OnBeforeGetUp();// 0x1ddc250
	function OnAsyncLoadEmoteAnim();// 0x14e33f8
	function OnAsyncLoadChangeWearingAnim();// 0x14e33e4
	function OnActorHitHandle();// 0x14e327c
	function NM_SetPeekState();// 0x14e31a4
	function MulticastStartPlayEmoteWithRand();// 0x14e30a8
	function MulticastStartPlayEmote();// 0x14e2ff4
	function MulticastStartChangeWearing();// 0x14e2f98
	function MulticastInteruptPlayEmoteOnServer();// 0x14e2ee4
	function MulticastInteruptPlayEmote();// 0x14e2e30
	function MulticastInteruptChangeWearingOnServer();// 0x14e2dd4
	function MulticastInteruptChangeWearing();// 0x14e2d78
	function MeleeServer();// 0x14e2d1c
	function MeleeReleased();// 0x14e2d08
	function MeleeLocal();// 0x1ddc250
	function MeleeBroadcastOtherClients();// 0x14e2cac
	function Melee();// 0x14e2c2c
	function LogWeaponsDataInWeaponManagerAndBackpack();// 0x14e2c18
	function LocalUnEquipWeapon();// 0x14e2ba0
	function LocalSwitchPersonPerspective();// 0x14e2a78
	function LocalStartPlayEmote();// 0x14e29f8
	function LocalStartChangeWearing();// 0x14e29d0
	function LocalInteruptPlayEmote();// 0x14e2950
	function LocalInteruptChangeWearing();// 0x14e2928
	function LocalEquipWeapon();// 0x14e286c
	function LevaveFire();// 0x14e27ec
	function LeaveState();// 0x14e2774
	function LeaveServerState();// 0x14e26c0
	function LeaveBattleState();// 0x14e26ac
	function IsWeaponOwnerLocallyControlled();// 0x14e267c
	function IsValidPaintDecalTarget_Simple();// 0x14e265c
	function IsValidPaintDecalTarget();// 0x14e2524
	function IsUsingGrenade();// 0x14e24fc
	function IsSameTeamWithPlayerState();// 0x14e247c
	function IsSameTeamWithLocal();// 0x14e2454
	function IsSameTeam();// 0x14e23cc
	function IsReplayViewTarget();// 0x14e23a4
	function IsProneMove();// 0x14e237c
	function IsPawnStateDisabled();// 0x14e22fc
	function IsOnVehicle();// 0x14e22d4
	function IsNowUpWater();// 0x14e22ac
	function IsNearDeath();// 0x14e2284
	function IsLocalViewed();// 0x14e2254
	function IsLocalControlorView();// 0x14e222c
	function IsInFlyingTeam();// 0x14e2204
	function IsInEditor();// 0x14e21dc
	function IsHealthyAlive();// 0x14e21b4
	function IsHandleInFold();// 0x14e218c
	function IsGunADS();// 0x14e215c
	function IsFirstPerson();// 0x14e2134
	function IsExitingParachute();// 0x14e210c
	function IsEnableBulletFlySound();// 0x14e20dc
	function IsDetectingPaintDecalTarget();// 0x14e20bc
	function IsDeathPlayViewTarget();// 0x14e2094
	function IsCharacterSprinting();// 0x14e206c
	function IsChangeWearingState();// 0x14e2044
	function IsBattleState();// 0x14e201c
	function IsAngledSight();// 0x14e1ff4
	function IsAllowScopeIn();// 0x14e1fcc
	function IsAlive();// 0x14e1f9c
	function InviteTeammate();// 0x14e1d88
	function InsertDelayStateRelation();// 0x14e1ccc
	function InitCharacterSkillList();// 0x14e1cb8
	function InitBodyBoneMap();// 0x14e1c9c
	function InClientSetAntidoteTime();// 0x14e1be0
	function HidePlayerMagOnGunReload();// 0x14e1bcc
	function HideNightVisionFrame();// 0x14e1bb0
	function HasState();// 0x14e1b30
	function HandleWeaponShootLost();// 0x14e1b14
	function HandleWeaponOnShoot();// 0x14e1b00
	function HandleStartFireDelegate();// 0x14e1a80
	function HandleShootDelegate();// 0x14e1a00
	function HandlePlayOperateItemSoundOnServer();// 0x14e1944
	function HandlePlayerWeaponChangeState();// 0x14e18c4
	function HandlePlayerPoseChanged();// 0x14e1808
	function HandlePlayerPickUpActor();// 0x14e174c
	function HandleOpenPickUpBoxAction();// 0x14e1738
	function HandleOnCharAnimLoadingFinished();// 0x14e1724
	function HandleMoveAntiShootVerifyMiss();// 0x14e1708
	function HandleConsumeItemSkillBreak();// 0x14e16f4
	function HandleBulletHitEvent();// 0x14e1630
	function HandleAutoSwitchWeaponDelay();// 0x14e161c
	function GrenadeBackToWeaponServerCall();// 0x14e15c0
	function GMTestZengzuo();// 0x14e15ac
	function GMShowName();// 0x139c4bc
	function GetWeaponOwnerPawnHealth();// 0x14e157c
	function GetWeaponManager();// 0x14e154c
	function GetViewRotation();// 0x14e14fc
	function GetValueLimitForHealthPredict();// 0x14e14d4
	function GetUIHelmetPosition();// 0x14e1484
	function GetThrowGrenadeMode();// 0x14e1464
	function GetTeamMateIndex();// 0x14e13e4
	function GetSkillIdListByCharaSkillID();// 0x14e1204
	function GetShootWeaponNameByWeapon();// 0x1ddc250
	function GetRole();// 0x14e11d4
	function GetRelevantVehicleInReady();// 0x14e11b4
	function GetRedClothIDByEmote();// 0x14e112c
	function GetRandomPutDownLocation();// 0x14e109c
	function GetProneShapeComponent();// 0x14e1080
	function GetPlayerWeaponFireMode();// 0x14724f8
	function GetPlayerWeaponEquipSlot();// 0x14e1058
	function GetPlayerVehAnimParam();// 0x14e0f94
	function GetPlayerVehAnimation();// 0x14e0f50
	function GetPlayerTeamIndex();// 0x14e0f28
	function GetPlayerStateSafety();// 0x14e0f00
	function GetPlayerState();// 0x14e0ed0
	function GetPlayerPawnCollisionInfo();// 0x14e0e10
	function GetPlayerNameSafety();// 0x14e0d48
	function GetPlayerJumpType();// 0x14e0d20
	function GetPlayerControllerSafety();// 0x14e0cf0
	function GetPlayerControllerInReplay();// 0x14e0cc8
	function GetPlayerControllerInDeathReplay();// 0x14e0ca0
	function GetPlayerAnimParam();// 0x14e0b70
	function GetPlayerAnimationByEventType();// 0x14e0ae8
	function GetPlayerAnimation();// 0x14e0a20
	function GetNearTeamPlayerNum();// 0x14e09f8
	function GetMoveAntiCheatComponentInterface();// 0x14e09c8
	function GetLatestInviter();// 0x14e09a0
	function GetLastInviterPlayerState();// 0x14e0978
	function GetLagCompensationComponent();// 0x14e0948
	function GetIsPlayingEmote();// 0x14e0928
	function GetIsFPP();// 0x14e0900
	function GetIsChangeWearing();// 0x14e08e0
	function GetHitBoxByState();// 0x14e0860
	function GetHitBodyTypeByHitPos();// 0x14e07cc
	function GetHitBodyTypeByBoneName();// 0x14e0700
	function GetHitBodyType();// 0x14e058c
	function GetHeadLocation();// 0x14e04f4
	function GetHandFolderRatio();// 0x14e04c4
	function GetGrenadeNameByGrenadeType();// 0x1ddc250
	function GetFPPComp();// 0x14e049c
	function GetFollowerLocOffset();// 0x14e040c
	function GetFollowerLoc();// 0x14e037c
	function GetFinalDamage();// 0x14e0208
	function GetEmoteHandle();// 0x1ddc250
	function GetEmote();// 0x1ddc250
	function GetCurrentWeapon();// 0x14e01e0
	function GetCurrentVehicle();// 0x14e01b0
	function GetCurrentStatesInterface();// 0x14e0180
	function GetCurrentShootWeapon();// 0x14e0158
	function GetCurrentShieldWeapon();// 0x14e0130
	function GetCurHitPartJugementType();// 0x14e0108
	function GetCorpName();// 0x14e0048
	function GetControllerSafety();// 0x14e0018
	function GetCharacterXYPlaneVelocity();// 0x14dfff0
	function GetCharacterEnergy();// 0x14dfe04
	function GetCharacterAnimComponent();// 0x14dfdd4
	function GetCapsuleComponentInterface();// 0x14dfda4
	function GetCachedControlRotation();// 0x14dfd5c
	function GetBodyhurtDamage();// 0x14dfbc0
	function getAvatarComponent2();// 0x14dfb98
	function GetAnimMontagePlayRate();// 0x14dfb18
	function GetAdjustDurabilityReduce();// 0x14dfa54
	function GetActiveSpringArm();// 0x14dfa24
	function GeneratePlayerBackpackWrappersToGround();// 0x14dfa08
	function FpsPawnVaultToServer();// 0x14df73c
	function FpsPawnVaultToAll();// 0x14df4f8
	function ForceWeaponFireInMuzzleDirection();// 0x14df478
	function ForceSwitchWeaponBySlotOnServer();// 0x14df3ac
	function ForcePlayerUpdateAnimation();// 0x14df398
	function ForceDestroyWeaponInventoryAndClearData();// 0x14df384
	function ForceCorrectClient();// 0x14df294
	function FollowTeammate();// 0x14df13c
	function FindBuffRelatedPawnState();// 0x14df0bc
	function FillPlayerAnimRate();// 0x14def44
	function ExecFollowTeammate();// 0x14dedec
	function EquipZoomScope();// 0x14ded30
	function EquipWeaponFinish();// 0x139c4bc
	function EquipWeapon();// 0x14dec6c
	function EnterState();// 0x14debec
	function EnterServerState();// 0x14deb38
	function EnterFire();// 0x14deb1c
	function EnterBattleState();// 0x14deb08
	function EnableCurrentWeaponInfiniteBullets();// 0x14dea88
	function EmoteAnimFinishedSuccessfully();// 0x14dea60
	function DoDetectPaintDecalTarget();// 0x14de9e0
	function DisappearOnDeath();// 0x14de9cc
	function DettachWeapon();// 0x139c4bc
	function DestroyWeaponOnServerByPropSlot();// 0x14de900
	function DestroyWeaponOnServer();// 0x14de82c
	function DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x14de818
	function DelayMoveEnd();// 0x14de804
	function DelayMove();// 0x14de78c
	function DelayHidden();// 0x14de770
	function DelayCustomDepth();// 0x14de6f8
	function CreateCapsuleComponentForDeltaRotation();// 0x14de670
	function ConvertWeaponSlotToCharacterAnimType();// 0x14de5f0
	function ConvertWeaponFireModeToWeaponAnimType();// 0x14de570
	function ConvertCharacterPoseStateToPoseType();// 0x14de4f0
	function ClientSyncServerTagsChange();// 0x14de374
	function ClientSomeOneResponseMe();// 0x14de26c
	function ClientSomeOneInviteMe();// 0x14de1ec
	function ClientSetLeaveVehicleLocation();// 0x14de174
	function ClientSetAntidoteTime();// 0x14de0b0
	function ClientResponseFeedback();// 0x14de030
	function ClientPlayVehicleOverlapCameraShake();// 0x14ddfd4
	function ClientOnPossessBy();// 0x14ddf20
	function ClientFeedbackZombiePointDamage();// 0x14ddd04
	function ClientFeedbackZombieMeleeDamage();// 0x14ddad4
	function ClientBulletLineTrace();// 0x14dd970
	function ClearOnDeath();// 0x14dd8b4
	function ClearHPUI();// 0x14dd898
	function ClearClientJump();// 0x14dd884
	function CheckWeaponIsCurUsingWeapon();// 0x14dd7fc
	function CheckPlayerNeedUpdateAnimation();// 0x14dd76c
	function CheckNeedReload();// 0x14dd6a8
	function CheckIsWearingThisCloth();// 0x14dd628
	function CheckCanAutoUseWeapon();// 0x14dd5a0
	function CheckBaseIsMoving();// 0x14dd578
	function CheckBaseIsMoveable();// 0x14dd550
	function CharacterPoseStateToPoseType();// 0x14dd4d8
	function CharacterMovementUpdatedCallback();// 0x14dd3cc
	function ChangeWearingAnimFinishedSuccessfully();// 0x14dd3a4
	function ChangeVehWeaponCameraData();// 0x14dd2d4
	function CanPaintDecal();// 0x14dd254
	function CanEnterWaterArea();// 0x14dd0f4
	function CanEnterState();// 0x14dd074
	function CanChangeThrowMode();// 0x14dd04c
	function CancelFollow();// 0x14dd038
	function CalculateBornLandThrowGrenade();// 0x14dcfc0
	function CalculateBornLandGrenadeBattle();// 0x14dcefc
	function BulletLineTrace();// 0x14dcdb0
	function BulletChange();// 0x14dcd54
	function BroadcastOtherClientsDie();// 0x14dcaf0
	function BroadcastFatalDamageInfoWrapper();// 0x14dc83c
	function BroadcastFatalDamageInfo();// 0x14dc68c
	function BroadcastClientsSimulateVehicleDamageDie();// 0x14dc3c0
	function BroadcastClientsSimulateVehicleDamage();// 0x14dc0f4
	function BroadcastClientsSimulateRadialDamageDie();// 0x14dbdbc
	function BroadcastClientsSimulateRadialDamage();// 0x14dba84
	function BroadcastClientsSimulatePoisonDamageDie();// 0x14db7b8
	function BroadcastClientsSimulatePoisonDamage();// 0x14db4ec
	function BroadcastClientsSimulatePointDamageDie();// 0x14db220
	function BroadcastClientsSimulatePointDamage();// 0x14daf54
	function BroadcastClientsSimulateMeleeDamageDie();// 0x14dac74
	function BroadcastClientsSimulateMeleeDamage();// 0x14da994
	function BroadcastClientsSimulateFallingDamageDie();// 0x14da6c8
	function BroadcastClientsSimulateFallingDamage();// 0x14da3fc
	function BroadcastClientsSimulateDrowningDamageDie();// 0x14da130
	function BroadcastClientsSimulateDrowningDamage();// 0x14d9e64
	function BroadcastClientsSimulateBurningDamageDie();// 0x14d9b90
	function BroadcastClientsSimulateBurningDamage();// 0x14d98bc
	function BroadcastClientsSimulateAirAttackDamageDie();// 0x14d9584
	function BroadcastClientsSimulateAirAttackDamage();// 0x14d924c
	function BPTakeDamage();// 0x14d90d0
	function BPResetCharacter();// 0x1ddc250
	function BPReceiveRadialDamage();// 0x1ddc250
	function BPReceivePointDamage();// 0x1ddc250
	function BPReceiveMeleeDamage();// 0x1ddc250
	function BPReceiveDamage();// 0x1ddc250
	function BPNotifyStartDying();// 0x1ddc250
	function BPNotifyDeathEnd();// 0x1ddc250
	function BPDie();// 0x14d8f5c
	function BP_SetInteractionEmoteSender();// 0x1ddc250
	function BleStopCurSkill();// 0x14d8f48
	function BleIsCastingSkill();// 0x14d8f20
	function AutoScopeWhenPeek();// 0x14d8f0c
	function AttachWeapon();// 0x139c4bc
	function AsyncAnimOpenDoorCallback();// 0x14d8e94
	function AllowState();// 0x14d8dc8
	function AIStartFireOnServer();// 0x14d8c74
	function AddOneDamageCauserRecord();// 0x14d8ab4
	function AddMoveOffSet();// 0x14d89b4
	function AddDamageRecord();// 0x14d8800

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate CharacterAnimEventDelegate;//[Offset: 0x6e0 , Size: 12]
	float Health;//[Offset: 0x778 , Size: 4]
	float HealthMax;//[Offset: 0x77c , Size: 4]
	int[] TypeIds;//[Offset: 0x780 , Size: 12]
	float SwimSpeedDynamicScale;//[Offset: 0x78c , Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790 , Size: 1]
	float threatenValue;//[Offset: 0x794 , Size: 4]
	float HurtParticleOffset;//[Offset: 0x798 , Size: 4]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0x7b4 , Size: 4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0x7b8 , Size: 4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0x7bc , Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0x7c0 , Size: 4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0x7c4 , Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x7c8 , Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0x7d4 , Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8 , Size: 1]
	function TriggerEntryEvent_Implementation();// 0x14ebda0
	function TriggerCustomEvent_Implementation();// 0x15067f4
	function SetBuffExpiry();// 0x1506720
	function RemoveBuffBySkill();// 0x1506610
	function RemoveBuffByID();// 0x15064b8
	function RemoveBuff();// 0x1506394
	function PlayAnimMontageWithStartPos();// 0x1506234
	function OnRep_HealthMax();// 0x1506218
	function OnRep_Health();// 0x14e3d18
	function IsCanDamageTeammate();// 0x1506174
	function IsCanDamageSelf();// 0x15060d0
	function IsAlive();// 0x14e1f9c
	function HasBuff();// 0x1506048
	function GetPlayerNameSafety();// 0x14e0d48
	function GetPlayerControllerSafety();// 0x14e0cf0
	function GetObserverType();// 0x1506018
	function GetDamageableGameObjectType();// 0x1505f50
	function GetCurSkill();// 0x1505f20
	function GetCurrentVehicle();// 0x14e01b0
	function GetBuffsByID();// 0x1505e18
	function ExtractDamageParams();// 0x1505cd8
	function DelayHidden();// 0x14de770
	function ClearBuff();// 0x1505cbc
	function BPReceiveDamage();// 0x1ddc250
	function AddBuffBySkill();// 0x1505bac
	function AddBuffByID();// 0x1505a54
	function AddBuff();// 0x15058f8

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x5c4 , Size: 4]
	FName PlayerType;//[Offset: 0x5d0 , Size: 8]
	FString PlayerName;//[Offset: 0x5d8 , Size: 12]
	FString Nation;//[Offset: 0x5e4 , Size: 12]
	uint32 PlayerKey;//[Offset: 0x5f0 , Size: 4]
	FString PlayerUID;//[Offset: 0x5f4 , Size: 12]
	int TeamID;//[Offset: 0x600 , Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604 , Size: 1]
	int CampID;//[Offset: 0x608 , Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x60c , Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x610 , Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x61c , Size: 36]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x640 , Size: 24]
	int planeAvatarId;//[Offset: 0x658 , Size: 4]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x65c , Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668 , Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669 , Size: 1]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c , Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d , Size: 1]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c , Size: 1]
	function OnRep_UseWholeModel();// 0x192f8f4
	function OnRep_TeamID();// 0x192f8e0
	function OnRep_PlayerUID();// 0x192f8cc
	function OnRep_PlayerKey();// 0x14e3dc0
	function OnRep_CampID();// 0x192f8b8
	function GetPlayerKey();// 0x192f7f8
	function GetNonSimulatedComponents_OnFighting();// 0x192f730
	function GetNonSimulatedComponents_NonTeammates();// 0x192f668
	function GetNonSimulatedComponents();// 0x192f5a0
	function GetNonDedicatedComponents();// 0x192f4d8
	function ClientAcknowledgeReconnection();// 0x192f458

--------------------------------
Class: GameModePlayerItem
	int ItemTableID;//[Offset: 0x0 , Size: 4]
	int Count;//[Offset: 0x4 , Size: 4]
	int[] AdditionIntData;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0 , Size: 4]
	int upassLevel;//[Offset: 0x4 , Size: 4]
	int upassScore;//[Offset: 0x8 , Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe , Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf , Size: 1]
	FString iconUrl;//[Offset: 0x10 , Size: 12]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	int upassKeepBuy;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0 , Size: 4]
	int PetLevel;//[Offset: 0x4 , Size: 4]
	int PetCfgId;//[Offset: 0x8 , Size: 4]
	int[] PetAvatarList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: GameModePlayerTaskData
	int task_id;//[Offset: 0x0 , Size: 4]
	int process;//[Offset: 0x4 , Size: 4]
	FString ext_info;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	BuffInstancedItem[] AllBuffs;//[Offset: 0xbc , Size: 12]
	Pawn* PawnOwner;//[Offset: 0xc8 , Size: 8]
	function SetBuffExpiry();// 0x1648108
	function ResetForDeath();// 0x16480f4
	function RemoveBuffWithCauser();// 0x1647fd8
	function RemoveBuffByID();// 0x1647e7c
	function RemoveBuff();// 0x1647d60
	function RefreshAllBuffs();// 0x1435f00
	function IsBufferMutexed();// 0x1647ce0
	function InitModifier();// 0x1647c68
	function HasBuff();// 0x1647be8
	function GetBuffName();// 0x1647b60
	function GetBuffID();// 0x1647ae0
	function GetBuffByName();// 0x1647a60
	function ClientSimulateRemoveBuff();// 0x1647944
	function ClientSimulateAddBuff();// 0x16477f0
	function ClientMulticastSimulateRemoveBuff();// 0x16476d4
	function ClientMulticastSimulateAddBuff();// 0x1647580
	function ClientMulticastSetBuffExpiry();// 0x16474b4
	function ClearBuff();// 0x16473e4
	function CheckBuffStatus();// 0x1647310
	function AddBuffLayer();// 0x164724c
	function AddBuffExpiry();// 0x1647180
	function AddBuffByID();// 0x1647028
	function AddBuff();// 0x1646ed8

--------------------------------
Class: BuffInstancedItem
	int BuffID;//[Offset: 0x0 , Size: 4]
	STBaseBuff* Buff;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STBaseBuff.Object
	FString BuffName;//[Offset: 0x1c , Size: 12]
	FString DisplayName;//[Offset: 0x28 , Size: 12]
	FString Message;//[Offset: 0x34 , Size: 12]
	Texture2D* Icon;//[Offset: 0x40 , Size: 4]
	SoundBase* SoundData;//[Offset: 0x44 , Size: 4]
	bool IsDeBuff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	bool IgnoreMagicalImmunity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49 , Size: 1]
	bool Layerable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a , Size: 1]
	bool NeedDetachAndAttachForReplaceExit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b , Size: 1]
	bool NeedDetachAndAttachForAddLayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	bool ReplaceExsist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d , Size: 1]
	bool StaysOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e , Size: 1]
	int LayerMax;//[Offset: 0x50 , Size: 4]
	int InitialLayerCount;//[Offset: 0x54 , Size: 4]
	int LayerCount;//[Offset: 0x58 , Size: 4]
	float ValidityTime;//[Offset: 0x5c , Size: 4]
	float Internal;//[Offset: 0x60 , Size: 4]
	UTSkillCondition[] BuffConditions;//[Offset: 0x64 , Size: 12]
	float Expiry;//[Offset: 0x70 , Size: 4]
	StatusChange[] StatusChanges;//[Offset: 0x74 , Size: 12]
	bool NeedSimulateToClientMulticast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80 , Size: 1]
	bool NeedSimulateToClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81 , Size: 1]
	byte SimulateAddBuffRole;//[Offset: 0x82 , Size: 1]
	FName[] MutexBuffers;//[Offset: 0x84 , Size: 12]
	BuffActionItem[] BuffActions;//[Offset: 0x90 , Size: 12]
	BuffEventActionItem[] EventBuffActions;//[Offset: 0x9c , Size: 12]
	float fADScale;//[Offset: 0xa8 , Size: 4]
	float fAPScale;//[Offset: 0xac , Size: 4]
	bool IsAlwaysExists;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0 , Size: 1]
	Controller* CauserPawnController;//[Offset: 0xb4 , Size: 4]
	Pawn* Target;//[Offset: 0xb8 , Size: 4]
	Actor* BuffApplier;//[Offset: 0xc4 , Size: 4]
	function GetBuffPassPercentage();// 0x164460c

--------------------------------
Class: SoundBase.Object

--------------------------------
Class: UTSkillCondition.UTSkillBaseWidget.ActorComponent.Object
	UTSkill* OwnerSkill;//[Offset: 0xd4 , Size: 8]
	function IsTargetOK();// 0x4051150
	function IsOK();// 0x40510dc

--------------------------------
Class: UTSkillBaseWidget.ActorComponent.Object
	bool bWidgetEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	FString WidgetDescription;//[Offset: 0xc0 , Size: 12]
	Pawn* BuffOwnerPawn;//[Offset: 0xcc , Size: 4]
	Actor* BuffTargetActor;//[Offset: 0xd0 , Size: 4]

--------------------------------
Class: UTSkill.Actor.Object
	FString SkillName;//[Offset: 0x2c0 , Size: 12]
	int SkillID;//[Offset: 0x2cc , Size: 4]
	enum SkillTargetType;//[Offset: 0x2d0 , Size: 1]
	FString SkillDescription;//[Offset: 0x2d4 , Size: 12]
	FString SkillDetailDes;//[Offset: 0x2e0 , Size: 12]
	bool bMeleeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec , Size: 1]
	bool bNeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ed , Size: 1]
	bool bClearInputCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ee , Size: 1]
	UTSkillCreateData BaseData;//[Offset: 0x2f0 , Size: 44]
	Texture2D* SkillIcon;//[Offset: 0x31c , Size: 4]
	Texture2D* SkillVehicleIcon;//[Offset: 0x320 , Size: 4]
	FString SkillVehicleName;//[Offset: 0x324 , Size: 12]
	bool NegativeSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330 , Size: 1]
	bool ShouldShowTargetPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x331 , Size: 1]
	bool ChangePawnStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x332 , Size: 1]
	Pawn* OwnerPawn;//[Offset: 0x334 , Size: 8]
	UTSkillManagerComponent* OwnerSkillManager;//[Offset: 0x33c , Size: 8]
	Actor* LastSpawnedActor;//[Offset: 0x344 , Size: 8]
	Pawn* LastSpawnedPawn;//[Offset: 0x34c , Size: 8]
	float PhasePercentage;//[Offset: 0x380 , Size: 4]
	FString[] ParentFolderPath;//[Offset: 0x384 , Size: 12]
	int64 LastEditBluePrintTime;//[Offset: 0x390 , Size: 8]
	int CurComponentNameIndex;//[Offset: 0x398 , Size: 4]
	bool IsSkillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c , Size: 1]
	function SetSkillPhasePercentage();// 0x404fd84
	function OnEvent();// 0x404fc90
	function GetSkillPhasePercentage();// 0x404fc24
	function GetSkillPhase();// 0x404fb38
	function DoSkillCoolDown();// 0x404fad0
	function CanBePlayed();// 0x404f9b4

--------------------------------
Class: UTSkillCreateData
	int SkillGroupIndex;//[Offset: 0x0 , Size: 4]
	float Interval;//[Offset: 0x4 , Size: 4]
	float IntervalSincePrevFinish;//[Offset: 0x8 , Size: 4]
	FString CoolDownMessage;//[Offset: 0xc , Size: 12]
	float Range;//[Offset: 0x18 , Size: 4]
	UTSkillPhase[] Phases;//[Offset: 0x1c , Size: 12]
	bool bIgnoreDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]

--------------------------------
Class: UTSkillPhase.ActorComponent.Object
	FString PhaseName;//[Offset: 0xbc , Size: 12]
	FString PhaseDescription;//[Offset: 0xc8 , Size: 12]
	bool bPhaseEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	UTSkill* OwnerSkill;//[Offset: 0xd8 , Size: 8]
	UTSkillPhaseCreateData BaseData;//[Offset: 0x100 , Size: 96]
	UTSkillPicker* InEffectPickerOnAction;//[Offset: 0x170 , Size: 4]
	function TryJumpToPhase();// 0x4057764
	function StopPhase();// 0x40576fc
	function StartPhase();// 0x4057694
	function RepeatPhase();// 0x405762c
	function PlaySkillHurtEffect();// 0x4051150
	function PlaySkillHurtAppearances();// 0x405753c
	function PickTargets();// 0x40574d4
	function OnEvent();// 0x40573e0
	function OnCustomEvent();// 0x40572ec
	function GetChargePhaseRate();// 0x4057280
	function ForceStopPhase();// 0x405720c
	function ClearAttachments();// 0x40571a0

--------------------------------
Class: UTSkillPhaseCreateData
	float PhaseDuration;//[Offset: 0x0 , Size: 4]
	FString TimeAdjustAttr;//[Offset: 0x4 , Size: 12]
	float AltPhaseDuration;//[Offset: 0x10 , Size: 4]
	float CacheMouseInputTime;//[Offset: 0x14 , Size: 4]
	bool bMustHasTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	bool bCoolDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19 , Size: 1]
	UTSkillCondition[] PhaseConditions;//[Offset: 0x1c , Size: 12]
	UTSkillPicker* Picker;//[Offset: 0x28 , Size: 4]
	UTSkillEffect[] Actions;//[Offset: 0x2c , Size: 12]
	UTSkillEffect[] HurtAppearances;//[Offset: 0x38 , Size: 12]
	enum PhaseType;//[Offset: 0x44 , Size: 1]
	FString EnterPhaseTipString;//[Offset: 0x48 , Size: 12]
	UTSkillEventEffectMapForEditor[] EditorEventEffectMap;//[Offset: 0x54 , Size: 12]

--------------------------------
Class: UTSkillPicker.UTSkillBaseWidget.ActorComponent.Object
	UTSkillPickerCreateData BaseData;//[Offset: 0xd4 , Size: 12]
	UTSkill* OwnerSkill;//[Offset: 0xe0 , Size: 8]
	UTSkillPickedTarget[] PickedResultTargets;//[Offset: 0xf4 , Size: 12]
	Actor[] IgnoreTargets;//[Offset: 0x100 , Size: 12]

--------------------------------
Class: UTSkillPickerCreateData
	enum PickerType;//[Offset: 0x0 , Size: 1]
	enum PickerTargetType;//[Offset: 0x1 , Size: 1]
	int PickerMaxCount;//[Offset: 0x4 , Size: 4]
	bool bIncludeOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	bool bOnlyHero;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9 , Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa , Size: 1]
	bool bIsUsingViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb , Size: 1]

--------------------------------
Class: UTSkillPickedTarget
	Actor* Target;//[Offset: 0x0 , Size: 8]
	PrimitiveComponent* TargetComponent;//[Offset: 0x8 , Size: 8]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	byte HitPos;//[Offset: 0x11 , Size: 1]
	FName BoneName;//[Offset: 0x18 , Size: 8]
	Vector HitEnvLocation;//[Offset: 0x20 , Size: 12]
	byte hitPhysMatType;//[Offset: 0x2c , Size: 1]
	bool IgnoreTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d , Size: 1]

--------------------------------
Class: UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	float fADScale;//[Offset: 0xd4 , Size: 4]
	float fAPScale;//[Offset: 0xd8 , Size: 4]
	UTSkill* OwnerSkill;//[Offset: 0xdc , Size: 8]
	function UpdateAction();// 0x4050958
	function UndoAction();// 0x40508f0
	function DoHurtAppearance();// 0x40518fc
	function DoAction();// 0x405072c

--------------------------------
Class: UTSkillEventEffectMapForEditor.UTSkillBaseWidget.ActorComponent.Object
	byte SkillEventType;//[Offset: 0xd4 , Size: 1]
	UTSkillEffect* SkillEffect;//[Offset: 0xd8 , Size: 4]
	SkillConditionWarpper[] Conditions;//[Offset: 0xdc , Size: 12]
	SkillConditionWarpper[] TargetConditions;//[Offset: 0xe8 , Size: 12]

--------------------------------
Class: SkillConditionWarpper
	UTSkillCondition* SkillCondition;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: UTSkillManagerComponent.ActorComponent.Object
	Pawn* OwnerPawn;//[Offset: 0xbc , Size: 4]
	class UTSkill[] USkillArchetypes;//[Offset: 0xc0 , Size: 12]
	class UTSkill[] SkillArchetypes;//[Offset: 0xcc , Size: 12]
	bool UseSkillsCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9 , Size: 1]
	bool LoadSkillsAllClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda , Size: 1]
	UTSkill[] Skills;//[Offset: 0xdc , Size: 12]
	Actor* Target;//[Offset: 0xe8 , Size: 4]
	Pawn[] RepTargets;//[Offset: 0xec , Size: 12]
	UTSkillSynData SkillSynData;//[Offset: 0xf8 , Size: 16]
	delegate OnSkillHit;//[Offset: 0x108 , Size: 12]
	delegate OnSkillCast;//[Offset: 0x114 , Size: 12]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x128 , Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x150 , Size: 40]
	FString[] MutexMontageGroupBeenPlayed;//[Offset: 0x178 , Size: 12]
	FString LastESkillTargetDesc;//[Offset: 0x198 , Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x1a4 , Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x1a8 , Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x1b0 , Size: 4]
	bool bNeedBeginInitOnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4 , Size: 1]
	float ZombieModeUseSkillCD;//[Offset: 0x1b8 , Size: 4]
	int ZombieModeMaxSkillPropLevel;//[Offset: 0x1c0 , Size: 4]
	function TriggerEvent();// 0x4055f38
	function TraceTarget();// 0x4055c2c
	function SwitchSkill();// 0x4055ad8
	function StopSkill();// 0x4055988
	function ShouldTriggerEvent();// 0x4055828
	function SetCurSkill();// 0x4055758
	function ServerTriggerEvent();// 0x40555c0
	function ServerStartSkill();// 0x405543c
	function ServerNotifyRandomSeed();// 0x405531c
	function RepSkillSynData();// 0x40552b4
	function RepSkillHitInfo();// 0x4055254
	function RandRangeSyn();// 0x4055114
	function PreCheckNewSkill();// 0x4055024
	function PlayHurtSkillEffect();// 0x4054edc
	function OnSameTeam();// 0x4054da4
	function OnRep_SkillHitInfo();// 0x4054d3c
	function IsReadyToCastSkill();// 0x4054c4c
	function IsCastingSkill();// 0x4050814
	function InitSkillSystem();// 0x4054b3c
	function GetSkillByName();// 0x40549c4
	function GetSkill();// 0x40548a0
	function GetCurSkillPhase();// 0x4054838
	function GetCurSkill();// 0x40547d0
	function ClientStartSkill();// 0x4054658
	function ClearSkill();// 0x40545f0
	function CheckNewSkill();// 0x4054500
	function CheckAutoSkill();// 0x4054498

--------------------------------
Class: UTSkillSynData
	int CurSkillIndex;//[Offset: 0x0 , Size: 4]
	int CurSkillPhase;//[Offset: 0x4 , Size: 4]
	bool ReplicateImpulseFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	int CurLoadDynSkillID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: UTSkillHitInfo
	Pawn[] ToPawn;//[Offset: 0x0 , Size: 12]
	Pawn* FromPawn;//[Offset: 0xc , Size: 4]
	int SkillID;//[Offset: 0x10 , Size: 4]
	int SkillPhaseID;//[Offset: 0x14 , Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19 , Size: 1]
	byte HitSurfaceType;//[Offset: 0x1a , Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	Pawn[] ToPawn;//[Offset: 0x0 , Size: 12]
	Pawn* FromPawn;//[Offset: 0xc , Size: 4]
	int SkillID;//[Offset: 0x10 , Size: 4]
	int SkillPhaseID;//[Offset: 0x14 , Size: 4]
	byte HitSurfaceType;//[Offset: 0x18 , Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0 , Size: 4]
	int Seed;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: StatusChange
	class STBaseBuffStatusType* StatusName;//[Offset: 0x0 , Size: 4]
	bool StatusValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: STBaseBuffStatusType.Object

--------------------------------
Class: BuffActionItem
	UTSkillAction* BuffAction;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: UTSkillAction.UTSkillEffect.UTSkillBaseWidget.ActorComponent.Object
	UTSkillActionCreateData BaseData;//[Offset: 0xe4 , Size: 4]
	function UpdateAction();// 0x4050958
	function UndoAction();// 0x40508f0
	function Reset();// 0x4050888
	function RealDoAction();// 0x4050814
	function JudgeNeedPhaseWait();// 0x40507a0
	function DoAction();// 0x405072c

--------------------------------
Class: UTSkillActionCreateData
	float DelayTime;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: BuffEventActionItem
	STBaseBuffEventType* EventType;//[Offset: 0x0 , Size: 4]
	UTSkillAction* BuffEventAction;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STBaseBuffEventType.Object

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	FString BuffTableName;//[Offset: 0xbc , Size: 12]
	FString OneceBuffTableName;//[Offset: 0xc8 , Size: 12]
	FString ConditionBuffTableName;//[Offset: 0xd4 , Size: 12]
	STBuff[] Buffs;//[Offset: 0xe8 , Size: 12]
	int SyncBriefNum;//[Offset: 0xf4 , Size: 4]
	ClientSyncBrief SyncBriefs;//[Offset: 0xf8 , Size: 24]
	ClientSyncBrief SyncRefBriefs;//[Offset: 0x188 , Size: 24]
	<int,STBuff> MaxPowerBuffs;//[Offset: 0x218 , Size: 60]
	function UpdateServerSyncBuff();// 0x164cb80
	function UpdateClientBuff();// 0x164ca38
	function RemoveClientBuff();// 0x164c9c0
	function RemoveBuffInner();// 0x164c870
	function RemoveBuff();// 0x164c728
	function RemoveAndFindMaxPowerBuff();// 0x164c6b0
	function OnRep_SyncBriefs();// 0x164c69c
	function HandleCauserSkill();// 0x164c5e0
	function HandleBuffTypeMutex();// 0x164c560
	function HandleBuffLayer();// 0x164c458
	function GetBuffsByID();// 0x164c350
	function CreateBuff();// 0x164c200
	function CompareBuffPower();// 0x164c188
	function ClearBuffs();// 0x164c108
	function AddBuff();// 0x164bfb8

--------------------------------
Class: STBuff.Object
	FString BuffName;//[Offset: 0x1c , Size: 12]
	FString Desc;//[Offset: 0x28 , Size: 12]
	Texture2D* Icon;//[Offset: 0x34 , Size: 4]
	int LayerMax;//[Offset: 0x38 , Size: 4]
	int InitialLayerCount;//[Offset: 0x3c , Size: 4]
	float Duration;//[Offset: 0x40 , Size: 4]
	float ClientSyncInterval;//[Offset: 0x44 , Size: 4]
	bool IsClientSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	enum TargetType;//[Offset: 0x49 , Size: 1]
	enum TargetSubype;//[Offset: 0x4a , Size: 1]
	enum RefreshType;//[Offset: 0x4b , Size: 1]
	enum ReActionType;//[Offset: 0x4c , Size: 1]
	enum MultiCauserHandleType;//[Offset: 0x4d , Size: 1]
	enum MultiSkillHandleType;//[Offset: 0x4e , Size: 1]
	bool IsExecuteOnece;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f , Size: 1]
	STBuffAction[] Actions;//[Offset: 0x50 , Size: 12]
	int InstID;//[Offset: 0x5c , Size: 4]
	int BuffID;//[Offset: 0x60 , Size: 4]
	int LayerCount;//[Offset: 0x64 , Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68 , Size: 1]
	float endTime;//[Offset: 0x6c , Size: 4]
	Actor* Causer;//[Offset: 0x70 , Size: 8]
	Actor* Owner;//[Offset: 0x78 , Size: 8]
	int CauseSkillID;//[Offset: 0x80 , Size: 4]
	STBuffSystemComponent* OwnerSystem;//[Offset: 0x84 , Size: 8]
	bool ExistForever;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c , Size: 1]
	float PowerValue;//[Offset: 0x90 , Size: 4]
	float LastSyncClientTime;//[Offset: 0x94 , Size: 4]
	bool IsNeedSyncClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	function Tick();// 0x1648c9c
	function ResetActionExecute();// 0x1648c88
	function RefreshEndTime();// 0x1648c74
	function Initialize();// 0x1648c60
	function End();// 0x1648c4c
	function EnabledRemove();// 0x1648c38
	function Destroy();// 0x1648c24
	function CopyActions();// 0x1648bfc
	function CheckOnceBuffForClient();// 0x1648be8
	function ChangeNotify();// 0x1648bd4
	function ChangeDuration();// 0x1648b5c

--------------------------------
Class: STBuffAction.Object
	float ExecuteDelay;//[Offset: 0x1c , Size: 4]
	STBuff* OwnerBuff;//[Offset: 0x20 , Size: 8]
	int ArrayIndex;//[Offset: 0x28 , Size: 4]
	function Tick();// 0x1649500
	function SetEnabled();// 0x1649480
	function ResetExecute();// 0x1649400
	function OnTick();// 0x139ffec
	function OnInitialize();// 0x13f070c
	function OnExecute();// 0x1471250
	function OnEnd();// 0x1471288
	function OnDestroy();// 0x13b3390
	function OnChangeNotify();// 0x16493e4
	function Initialize();// 0x16493d0
	function GetOwnerBuff();// 0x16493a8
	function GetOwner();// 0x14b7ef8
	function GetIsExecute();// 0x164938c
	function GetCauser();// 0x1649364
	function End();// 0x1649350
	function Destroy();// 0x164933c
	function CopyAction();// 0x16492b4
	function ChangeNotify();// 0x16492a0

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0 , Size: 4]
	int BuffID;//[Offset: 0x4 , Size: 4]
	int LayerCount;//[Offset: 0x8 , Size: 4]
	int CauseSkillID;//[Offset: 0xc , Size: 4]
	float SyncTime;//[Offset: 0x10 , Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	bool UseAttributeModifyRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	delegate OnAttrModified;//[Offset: 0xc0 , Size: 12]
	int AttrGroup;//[Offset: 0xcc , Size: 4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0xd0 , Size: 12]
	AttrModifyGroupItem[] ConfigAttrModifyGroupList;//[Offset: 0xdc , Size: 12]
	uint32 AttrModifyStateList;//[Offset: 0x1a0 , Size: 4]
	bool[] AttrModifyGroupStateList;//[Offset: 0x1a4 , Size: 12]
	AttrModifyItem[] DynamicModifierRepList;//[Offset: 0x1b0 , Size: 12]
	int AttrModifyStateListNum;//[Offset: 0x1dc , Size: 4]
	AttributeExpand[] AttributeExpands;//[Offset: 0x1e0 , Size: 12]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x1ec , Size: 124]
	<FString,RelateAttributeGroup> RelateAttributeGroup;//[Offset: 0x268 , Size: 60]
	function SetAttrModifyStateValue();// 0x1639a5c
	function RegisterModifyAbleAttr();// 0x16398d0
	function OnRep_DynamicModifierList();// 0x16398bc
	function OnRep_AttrModifyStateList();// 0x16398a8
	function OnRep_AttrModifyGroupStateList();// 0x1639894
	function OnAttrModifiedEvent__DelegateSignature();// 0x1ddc250
	function IsAttrModifyStateValidIndex();// 0x1639814
	function GetAttrModifyStateValue();// 0x1639794
	function GetAttrModifyStateNum();// 0x1639778
	function GetAttrModifyItemByItemName();// 0x16394ac
	function EnableAttrModifier();// 0x163934c
	function EnableAllAttrModifier();// 0x1639324
	function DisableModifierToActor();// 0x16392a4
	function DisableAttrModifier();// 0x1639144
	function DisableAllAttrModifier();// 0x163911c
	function AddDynamicModifier();// 0x1638fc8

--------------------------------
Class: AttrModifyItem
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x0 , Size: 12]
	FString AttrModifyItemName;//[Offset: 0xc , Size: 12]
	FString AttrName;//[Offset: 0x18 , Size: 12]
	byte AttrId;//[Offset: 0x24 , Size: 1]
	enum ModifierOp;//[Offset: 0x25 , Size: 1]
	float ModifierValue;//[Offset: 0x28 , Size: 4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]
	bool ClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d , Size: 1]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0 , Size: 8]
	float FinalAddValue;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: AttrModifyGroupItem
	AttrModifyItem[] AttrModifyItem;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: AttributeExpand
	FString AttrName;//[Offset: 0x0 , Size: 12]
	FString AttrDesc;//[Offset: 0xc , Size: 12]
	int RelateTypeId;//[Offset: 0x18 , Size: 4]
	FString RelateGroup;//[Offset: 0x1c , Size: 12]
	float Value;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: AttrDynamicModifier
	<FString,AttrDynamicModifyTarget> ModifyAttrs;//[Offset: 0x0 , Size: 60]
	<FString,AttrDynamicModifyConfig> ModifyConfigs;//[Offset: 0x3c , Size: 60]
	AttrModifyComponent* Component;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: AttrDynamicModifyTarget

--------------------------------
Class: AttrDynamicModifyConfig
	bool IsOneceModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool HasLimitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	bool HasMaxAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	FString AttrName;//[Offset: 0x4 , Size: 12]
	FString LimitAttrName;//[Offset: 0x10 , Size: 12]
	FString MaxAttrName;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: RelateAttributeGroup
	<int,FString> RelateAttributes;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc , Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0xc0 , Size: 4]
	int MaxCheatTimes;//[Offset: 0xc4 , Size: 4]
	float TolerateDistanceFractor;//[Offset: 0xc8 , Size: 4]
	float MaxPacketLossRate;//[Offset: 0xcc , Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xd0 , Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xd4 , Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xd8 , Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xdc , Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	int MaxShootPointPassWall;//[Offset: 0xe4 , Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0xe8 , Size: 4]
	float MaxSkeletonLength;//[Offset: 0xec , Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0xf0 , Size: 4]
	int MaxLocusFailTime;//[Offset: 0xf4 , Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0xf8 , Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0xfc , Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x100 , Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x104 , Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x108 , Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x114 , Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x120 , Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x12c , Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x138 , Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x144 , Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x150 , Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x15c , Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x168 , Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x174 , Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x180 , Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x18c , Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x198 , Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x1a4 , Size: 12]
	bool IsOpenReportAntiMovementData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220 , Size: 1]
	float RecordAntiCheatInterval;//[Offset: 0x224 , Size: 4]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x240 , Size: 128]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x2c0 , Size: 80]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x310 , Size: 52]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x348 , Size: 120]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x408 , Size: 52]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x43c , Size: 1396]
	float MaxJumpHeight;//[Offset: 0x9b4 , Size: 4]
	Character* CharacterOwner;//[Offset: 0x9b8 , Size: 4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28 , Size: 1]
	function SendShovelDataToServer();// 0x145d2f0
	function RefreshRealMaxJumpHeight();// 0x145d2dc
	function Ping2Server();// 0x145d160
	function Ping2Client();// 0x145d0e8
	function OnPreReconnectOnServer();// 0x145d0d4
	function K2_MoveSweepTest();// 0x145ce68
	function DebugDrawLine();// 0x145cdbc
	function ClearJumpLimit();// 0x145cda8

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0 , Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x4 , Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x8 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0xc , Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10 , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x14 , Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x18 , Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x1c , Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x20 , Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8 , Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10 , Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x14 , Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4 , Size: 4]
	float MaxAllowMoveZHeight;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0 , Size: 4]
	float DataSampleInterval;//[Offset: 0x4 , Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8 , Size: 4]
	float CheatLockTime;//[Offset: 0xc , Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10 , Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74 , Size: 4]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x20 , Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x24 , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x28 , Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x2c , Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4 , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x8 , Size: 4]
	float MaxVectorAccAngel;//[Offset: 0xc , Size: 4]
	float MaxSumVectorLength;//[Offset: 0x10 , Size: 4]
	float MaxVectorAccTime;//[Offset: 0x14 , Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	function SimulatedCharacterServerTime();// 0x143c5bc

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	ServerCheckBox[] PoseCheckBoxesCfg;//[Offset: 0xd4 , Size: 12]
	bool GM_UseNewProjectileBulletVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1 , Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2 , Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3 , Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4 , Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5 , Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6 , Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe7 , Size: 1]
	float TolerateShootPointDistanceSqured;//[Offset: 0xe8 , Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xec , Size: 4]
	bool bVerifyHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0xf4 , Size: 4]
	float TolerateSimulatedDelayTime;//[Offset: 0xf8 , Size: 4]
	bool bVerifyBulletFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc , Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd , Size: 1]
	bool bVerifyMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe , Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff , Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100 , Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101 , Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102 , Size: 1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103 , Size: 1]
	bool bVerifyShooterWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105 , Size: 1]
	float BulletFlyTimeVerifyMinTime;//[Offset: 0x108 , Size: 4]
	float TolerateBulletFlyTimePercentage;//[Offset: 0x10c , Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x110 , Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x114 , Size: 4]
	float TolerateShootHitAngle;//[Offset: 0x118 , Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x11c , Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x120 , Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x124 , Size: 4]
	float TolerateShootRange;//[Offset: 0x128 , Size: 4]
	byte[] traceObjectTypes;//[Offset: 0x12c , Size: 12]
	float ShooterWeaponRange;//[Offset: 0x138 , Size: 4]
	float ShooterWeaponHeight;//[Offset: 0x13c , Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140 , Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x144 , Size: 4]
	float TolerateShootMuzzleHeight;//[Offset: 0x148 , Size: 4]
	bool bUseSimpleVerifyHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c , Size: 1]
	bool bUseSimpleVerifyHitParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d , Size: 1]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e , Size: 1]
	float TolerateLocusSingle;//[Offset: 0x150 , Size: 4]
	float TolerateLocusDist;//[Offset: 0x154 , Size: 4]
	float TolerateLocusSegment;//[Offset: 0x158 , Size: 4]
	float TolerateBoxExpand;//[Offset: 0x15c , Size: 4]
	float TolerateLocusZOffsetUp;//[Offset: 0x160 , Size: 4]
	float TolerateLocusZOffsetDown;//[Offset: 0x164 , Size: 4]
	float LocusSearchBackTime;//[Offset: 0x168 , Size: 4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x16c , Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x170 , Size: 4]
	float MaxGunPosLength;//[Offset: 0x174 , Size: 4]
	Vector GiftHeadBoundingBoxUpperOffset;//[Offset: 0x178 , Size: 12]
	Vector GiftHeadBoundingBoxLowerOffset;//[Offset: 0x184 , Size: 12]
	bool bVerifyBonePointInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190 , Size: 1]
	bool bVerifyBoneHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191 , Size: 1]
	float BonePointTorelate;//[Offset: 0x194 , Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x198 , Size: 4]
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c , Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d , Size: 1]
	Character* CharacterOwner;//[Offset: 0x1a0 , Size: 4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4 , Size: 1]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5 , Size: 1]
	uint32 TolerateMuzzleAndCharacterDisSquare;//[Offset: 0x1a8 , Size: 4]
	uint32 TolerateMuzzleAndVehicleDisSquare;//[Offset: 0x1ac , Size: 4]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0 , Size: 1]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1 , Size: 1]
	float VehiclePosCheckInterval;//[Offset: 0x1b4 , Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x1b8 , Size: 4]
	float TolerateVehicleDis;//[Offset: 0x1bc , Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x1c0 , Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x1c4 , Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x1c8 , Size: 4]
	float TolerateCharacterDis;//[Offset: 0x1cc , Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x1d0 , Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x1d4 , Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x1d8 , Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x1dc , Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x1e0 , Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x1e4 , Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x1e8 , Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x1ec , Size: 4]
	float TolerateNetDelay;//[Offset: 0x1f0 , Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x1f4 , Size: 4]
	bool GM_VerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8 , Size: 1]
	float TolerateDownShootMuzzleAndCharacterBottomHeight;//[Offset: 0x1fc , Size: 4]
	float TolerateDownShootMaxMuzzleAndCharacterHeight;//[Offset: 0x200 , Size: 4]
	float VerifyDownShootCD;//[Offset: 0x204 , Size: 4]
	float GrayMuzzleAndCharacterBottomHeight;//[Offset: 0x210 , Size: 4]
	float GrayMuzzleAndCharacterHeight;//[Offset: 0x214 , Size: 4]
	float GrayWeaponAndShootAngle;//[Offset: 0x218 , Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x21c , Size: 4]
	uint32 GrayCharacterImpactMaxOffset2;//[Offset: 0x220 , Size: 4]
	uint32 GrayCharacterImpactMinOffset;//[Offset: 0x224 , Size: 4]
	uint32 GrayCharacterImpactOffsetChange;//[Offset: 0x228 , Size: 4]
	uint32 GrayFirstCharacterImpactMaxOffset;//[Offset: 0x22c , Size: 4]
	float GrayImpactPointChangeMinDistSqured;//[Offset: 0x230 , Size: 4]
	float GrayBulletImpactOffsetMaxDistSqured;//[Offset: 0x234 , Size: 4]
	float GrayBulletImpactOffsetMinDistSqured;//[Offset: 0x238 , Size: 4]
	uint32 LastCharacterImpactOffset;//[Offset: 0x23c , Size: 4]
	Vector LastImpactPoint;//[Offset: 0x240 , Size: 12]
	uint32 LastFirstCharacterImpactOffset;//[Offset: 0x24c , Size: 4]
	function VertifyMuzzleHeight();// 0x143d3f0
	function VertifyImpactActorPosWithNoLagCompensation();// 0x143d2d0
	function VertifyClientAntiCheatResult();// 0x143d20c
	function VerifyWeaponOwnerPos();// 0x143d080
	function VerifyWeaponOwnerAndMuzzleDis();// 0x143cef0
	function SimulatedCharacterServerTime();// 0x143c5bc
	function RPC_DrawHeadBox();// 0x143ce0c
	function GrayVerify();// 0x143cc90
	function GetTolerateServerVictmPosTolerateByNetDelay();// 0x143cbc0
	function GetTolerateServerVictmPosByNearMaxNetDelay();// 0x143cafc
	function GetTolerateServerShooterPosDisByNetDelay();// 0x143ca7c

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd , Size: 1]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0xc0 , Size: 16]
	float TolerateOwnerAndBulletDist;//[Offset: 0xd0 , Size: 4]

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0 , Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4 , Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8 , Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ServerCheckBox
	byte PoseID;//[Offset: 0x0 , Size: 1]
	Vector BodyBoundBoxExtent;//[Offset: 0x4 , Size: 12]
	Vector HeadBoundBoxExtent;//[Offset: 0x10 , Size: 12]
	Vector Offset;//[Offset: 0x1c , Size: 12]
	Vector PitchOffset;//[Offset: 0x28 , Size: 12]
	float ReferenceHSlope;//[Offset: 0x34 , Size: 4]
	float ReferenceVSlope;//[Offset: 0x38 , Size: 4]
	float HMinScale;//[Offset: 0x3c , Size: 4]
	float VMinScale;//[Offset: 0x40 , Size: 4]
	float HMaxScale;//[Offset: 0x44 , Size: 4]
	float VMaxScale;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0xbc , Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xc0 , Size: 4]
	function HandleOwnerDeath();// 0x13d3f4c

--------------------------------
Class: EffectComponent.ActorComponent.Object
	function S2Sim_CallRemoteEffect();// 0x1412ba0
	function S2C_CallRemoteEffect();// 0x141297c
	function S2A_EndEffectGraph();// 0x13955f8
	function C2S_CallRemoteEffect();// 0x1412710

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0xc4 , Size: 4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0xd8 , Size: 4]
	float FreeFall_AcceFall;//[Offset: 0xdc , Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0xe0 , Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0xe4 , Size: 4]
	float FreeFall_AcceForward;//[Offset: 0xe8 , Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0xec , Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0xf0 , Size: 4]
	float FreeFall_AcceRight;//[Offset: 0xf4 , Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0xf8 , Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0xfc , Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x100 , Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x104 , Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x108 , Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x10c , Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x110 , Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x114 , Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x118 , Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c , Size: 1]
	float Opened_AcceFall;//[Offset: 0x120 , Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x124 , Size: 4]
	float Opened_AcceForward;//[Offset: 0x128 , Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x12c , Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x130 , Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x134 , Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x138 , Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x13c , Size: 4]
	float Opened_AcceRight;//[Offset: 0x140 , Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x144 , Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x148 , Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x14c , Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x150 , Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x154 , Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x158 , Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x15c , Size: 4]
	float CurrentFallSpeed;//[Offset: 0x160 , Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x164 , Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168 , Size: 1]
	float FollowerDist;//[Offset: 0x190 , Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x194 , Size: 4]
	function VerifyClientTimeStamp();// 0x13f92f8
	function UpdateRotation();// 0x13f915c
	function UpdateParachuteState();// 0x13f8fc0
	function UpdateParachuteOpenedRotation();// 0x13f8ec0
	function UpdateFreeFallRotation();// 0x13f8d74
	function TickParachuteComponent();// 0x13f8c20
	function StopParachute();// 0x13f8c0c
	function StartParachute();// 0x13f8bf8
	function ResetVelocity();// 0x13f8be4
	function PostNetReceiveNewState();// 0x13f8bd0
	function OnPreReconnectOnServer();// 0x13f8bbc
	function InvalidateAdjustFollowerLocation();// 0x13f8ba8
	function GetReplicatedRightInput();// 0x13f8b80
	function GetReplicatedForwardInput();// 0x13f8b58
	function GetParachuteVelocity();// 0x13f8b10
	function CalParachuteOpenedVelocity();// 0x13f89f4
	function CalFreeFallVelocity();// 0x13f88d8
	function AngleInterpTo();// 0x13f8788
	function AdjustFollowerLocation();// 0x13f8774

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xbc , Size: 4]
	float TileRemovalRadius;//[Offset: 0xc0 , Size: 4]

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString TableName;//[Offset: 0xbc , Size: 12]
	function UpdateAttribute();// 0x1395694
	function InitializeFollow();// 0x1395678
	function Initialize();// 0x13955f8

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xbc , Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xc0 , Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4 , Size: 1]
	bool bOptimizeBulletCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5 , Size: 1]
	bool bBoxCollionOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6 , Size: 1]
	Transform[] HitBoxs_Stand_Tran;//[Offset: 0xc8 , Size: 12]
	Transform[] HitBoxs_Prone_Tran;//[Offset: 0xd4 , Size: 12]
	PrimitiveComponent[] HitBoxs_Stand;//[Offset: 0xe0 , Size: 12]
	PrimitiveComponent[] HitBoxs_Prone;//[Offset: 0xec , Size: 12]
	byte ClientHitPartJudgment;//[Offset: 0xf8 , Size: 1]
	byte DSHitPartJudgment;//[Offset: 0xf9 , Size: 1]
	FString HitBox_Stand_Tag;//[Offset: 0xfc , Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x108 , Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x114 , Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x118 , Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x11c , Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x120 , Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x124 , Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x12c , Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x134 , Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x13c , Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x144 , Size: 8]
	<FString,enum> NewHitBodyPosMap;//[Offset: 0x14c , Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x188 , Size: 4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c , Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x190 , Size: 4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194 , Size: 1]
	function UpdatePoseCollisionShapes();// 0x13a71a4
	function UpdateAllInstanceBodyTransform();// 0x146ba98
	function InitBodyBoneMap();// 0x1405260
	function GetHitBoxByState();// 0x146ba18
	function GetHitBodyTypeByHitPos();// 0x146b984
	function GetHitBodyTypeByBoneName();// 0x146b8b8
	function GetHitBodyType();// 0x146b744
	function GetCurHitPartJugementType();// 0x146b71c
	function CloseBodyBulletCollision();// 0x1395678
	function CalcHitBodyType();// 0x146b580

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0 , Size: 4]
	int DownThreshold;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668 , Size: 1]
	float voiceCheckCD;//[Offset: 0x66c , Size: 4]
	float voiceCheckShowCD;//[Offset: 0x670 , Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x674 , Size: 1]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68e , Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68f , Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x690 , Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x69c , Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x6a8 , Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x6b4 , Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0x6c0 , Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0x6cc , Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x6d8 , Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0x6e4 , Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0x6f0 , Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0x6fc , Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0x708 , Size: 12]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0x714 , Size: 12]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0x720 , Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0x72c , Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0x738 , Size: 12]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0x750 , Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0x75c , Size: 12]
	delegate OnScopeIn;//[Offset: 0x768 , Size: 12]
	delegate OnScopeOut;//[Offset: 0x774 , Size: 12]
	delegate OnScopeInContinue;//[Offset: 0x780 , Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0x78c , Size: 4]
	int CurBulletNumInClip;//[Offset: 0x790 , Size: 4]
	int CurMaxBulletNumInOneClip;//[Offset: 0x794 , Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0x798 , Size: 4]
	byte ShootMode;//[Offset: 0x79c , Size: 1]
	byte CurShootType;//[Offset: 0x79d , Size: 1]
	int CurShootTotalType;//[Offset: 0x7a0 , Size: 4]
	float VoiceCheckDis;//[Offset: 0x7a4 , Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0x7a8 , Size: 4]
	float nowVoiceCheckDis;//[Offset: 0x7ac , Size: 4]
	Vector ShootTargetLoc;//[Offset: 0x7b0 , Size: 12]
	byte TraceChannel;//[Offset: 0x7c0 , Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0x7c4 , Size: 12]
	float LastImpactEffectTime;//[Offset: 0x7d0 , Size: 4]
	int CurBurstShootIndex;//[Offset: 0x7d8 , Size: 4]
	Transform BoltActionTransform;//[Offset: 0x7e0 , Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810 , Size: 1]
	int ClientShootTimes;//[Offset: 0x814 , Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0x818 , Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0x81c , Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0x820 , Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0x824 , Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0x828 , Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0x82c , Size: 4]
	Vector BulletDecalScale;//[Offset: 0x830 , Size: 12]
	int CurBulletNumInClipOnSimulatedClients;//[Offset: 0x83c , Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0x844 , Size: 4]
	float AIShootLoudness;//[Offset: 0x848 , Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0x84c , Size: 4]
	float AIShootMaxDis;//[Offset: 0x850 , Size: 4]
	float AISilenceShootLoudness;//[Offset: 0x854 , Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0x858 , Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0x85c , Size: 4]
	byte CurShootWeaponState;//[Offset: 0x860 , Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0x870 , Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0x874 , Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0x878 , Size: 4]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c , Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87d , Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87e , Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0x880 , Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x88c , Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x898 , Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x8a4 , Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x8b0 , Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x8bc , Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0x8c8 , Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x8d4 , Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0x8e0 , Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0x8ec , Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0x8f8 , Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0x904 , Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0x910 , Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0x91c , Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928 , Size: 1]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0x93c , Size: 4]
	WeaponAttrModifyConfig[] WeaponAttrModifyConfigList;//[Offset: 0x940 , Size: 12]
	int[] AttachedAttachmentID;//[Offset: 0x94c , Size: 12]
	BulletHitInfoUploadData[] HitDataArray;//[Offset: 0x960 , Size: 12]
	SimulateBulletHitInfoData[] SimulateHitDataArray;//[Offset: 0x96c , Size: 12]
	bool UseNewSimulateHitInfoData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978 , Size: 1]
	bool bNeedForceSyncSimulatedClientsBulletsNumAfterReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x980 , Size: 1]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x981 , Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x982 , Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30 , Size: 1]
	function UpdateComponentTick();// 0x15568f4
	function StopFireFilter();// 0x15568c4
	function StopFire();// 0x1556844
	function StartReload();// 0x1556814
	function StartFireFilter();// 0x13f3f40
	function StartFire();// 0x15567f8
	function StartDoPreBarrel();// 0x1556778
	function StartDoBarrel();// 0x155675c
	function ShowDefaultScope();// 0x15566dc
	function ShowDefaultAttachmentComponentByType();// 0x1556618
	function ShootIDIsNotValid();// 0x15565fc
	function SetWeaponAttrModifierEnable();// 0x15564f4
	function SetCurShootType();// 0x155647c
	function SetCurrentBulletNumInClipOnServer();// 0x1556404
	function SetCurrentBulletNumInClipOnClient();// 0x155638c
	function SetCurReloadMethod();// 0x1556314
	function SetBaseImpactDamageEntity();// 0x1427acc
	function SetAvailableWeaponAttachmentSocketTypeList();// 0x1556208
	function ScopeOut();// 0x15561d8
	function ScopeInContinue();// 0x15561c4
	function ScopeIn();// 0x1512940
	function S2C_SyncAllClientsBulletsNum();// 0x1556144
	function RPC_ServerSetMaxBulletNum();// 0x15560e8
	function RPC_ServerSetBaseImpactDamageEntity();// 0x1556034
	function RPC_ClientSetCurShootType();// 0x1555f80
	function RPC_ClientSetCurReloadMethod();// 0x1555ecc
	function RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne();// 0x1555e4c
	function RPC_Client_SetBulletNumInClip();// 0x1555d98
	function ResetInitialBulletNumInClip();// 0x1555d18
	function OnWeaponUnEquipDelegate__DelegateSignature();// 0x1ddc250
	function OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x1ddc250
	function OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x1ddc250
	function OnWeaponShootHitDelegate__DelegateSignature();// 0x1ddc250
	function OnWeaponShootDelegate__DelegateSignature();// 0x1ddc250
	function OnWeaponSecurityLogShootActorDelegate__DelegateSignature();// 0x1ddc250
	function OnWeaponReloadStartDelegate__DelegateSignature();// 0x1ddc250
	function OnWeaponReloadEndDelegage__DelegateSignature();// 0x1ddc250
	function OnWeaponEquipDelegate__DelegateSignature();// 0x1ddc250
	function OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x1ddc250
	function OnStopFireDelegate__DelegateSignature();// 0x1ddc250
	function OnStartFireDelegate__DelegateSignature();// 0x1ddc250
	function OnShootWeaponAutoReloadDelegate__DelegateSignature();// 0x1ddc250
	function OnScopeInContinue__DelegateSignature();// 0x1ddc250
	function OnRep_SimulateHitDataArray();// 0x1555d04
	function OnRep_HitDataArray();// 0x1555cf0
	function OnRep_CurMaxBulletNumChange();// 0x1555cdc
	function OnRep_CurBulletNumInClipOnSimulatedClients();// 0x1555cc8
	function OnMaxBulletChange__DelegateSignature();// 0x1ddc250
	function OnLeftLastBulletWhenReloadOneByOne__DelegateSignature();// 0x1ddc250
	function OnCurBulletChange__DelegateSignature();// 0x1ddc250
	function OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x1ddc250
	function OnBulletNumChangeDelegate__DelegateSignature();// 0x1ddc250
	function NotifyServerNoneShootAction();// 0x1555c6c
	function NotifyLeftLastBulletWhenReloadOneByOneOnServer();// 0x1555bf4
	function NotifyClientNoneShootAction();// 0x1555b98
	function LocalSetBulletNumInClip();// 0x1555b20
	function IsSupportAutoAim();// 0x1555af8
	function IsInPreFire();// 0x1555ad0
	function HandleWeaponScopeEquiped();// 0x1555abc
	function GetWeaponReloadType();// 0x1555a94
	function GetWeaponIDFromEntity();// 0x1555a6c
	function GetWeaponID();// 0x1555a44
	function GetWeaponBodyLength();// 0x1555a1c
	function GetVisualBulletTrackFX();// 0x15559f4
	function GetVisualBulletTrackEnabled();// 0x15559cc
	function GetVisualBulletItemConfig();// 0x155598c
	function GetVerifyScopeSocketNameFromEntity();// 0x155594c
	function GetUseSpecificBulletNumOnReloadFromEntity();// 0x1555924
	function GetTraceDistanceFromEntity();// 0x15558fc
	function GetSilencerSocketNameFromEntity();// 0x15558bc
	function GetShootWeaponEntityComponent();// 0x1555894
	function GetShootWeaponEffectComponent();// 0x155586c
	function GetShootTypeFromEntity();// 0x1555844
	function GetShootIntervalFromEntity();// 0x155581c
	function GetShellDropSocketNameFromEntity();// 0x15557dc
	function GetScopeID();// 0x1555754
	function GetScopeAimCameraTransform();// 0x1555690
	function GetReloadWithNoCostFromEntity();// 0x1555668
	function GetReloadTimeMagOutFromEntity();// 0x1555640
	function GetReloadTimeFromEntity();// 0x1555618
	function GetReloadTIDName();// 0x1555588
	function GetReloadTacticalTimeFromEntity();// 0x1555560
	function GetReloadSpecificBulletNumFromEntity();// 0x1555538
	function GetReloadDurationStartFromEntity();// 0x1555510
	function GetReloadDurationLoopFromEntity();// 0x15554e8
	function GetRelativeMuzzleTransform();// 0x1555458
	function GetReferenceDistance();// 0x1555430
	function GetRangeModifier();// 0x1555408
	function GetRangeAttenuateFromEntity();// 0x1555348
	function GetPreFireTimeFromEntity();// 0x1555320
	function GetPostReloadTimeFromEntity();// 0x15552f8
	function GetPostFireTimeFromEntity();// 0x15552d0
	function GetMuzzleTransform();// 0x1555240
	function GetMuzzleSocketNameFromEntity();// 0x1555200
	function GetMaxVelocityOffsetAddRateFromEntity();// 0x15551d8
	function GetMaxValidHitTimeFromEntity();// 0x15551b0
	function GetMaxImpactEffectSkipTimeFromEntity();// 0x1555188
	function GetMaxBulletNumInOneClipFromEntity();// 0x14c76b8
	function GetMaxBulletNumInBarrelFromEntity();// 0x1555160
	function GetIsNeedOffsetVelocityFromEntity();// 0x1555138
	function GetImpactEffectSkipDistanceFromEntity();// 0x1555110
	function GetIgnoreRangeAttenuatDis();// 0x15550e8
	function GetHitPartCoff();// 0x1555054
	function GetGameDeviationFactor();// 0x155502c
	function GetFiringSuppressorSocketNameFromEntity();// 0x1554fec
	function GetFireSensitiveYawRate();// 0x1554fc4
	function GetFireSensitivePitchRate();// 0x1554f9c
	function GetDefaultAttachmentComponentByType();// 0x1554f1c
	function GetCurSightType();// 0x1554ef4
	function GetCurReloadTime();// 0x1554ecc
	function GetCurReloadMethod();// 0x1554ea4
	function GetCrossHairInitSize();// 0x1554e7c
	function GetCrossHairBurstSpeed();// 0x1554e54
	function GetCrossHairBurstIncreaseSpeed();// 0x1554e2c
	function GetControllerRole();// 0x1414e10
	function GetClipHasInfiniteBulletsFromEntity();// 0x1554e04
	function GetChildMeshComp();// 0x1554d84
	function GetBurstShootIntervalFromEntity();// 0x1554d5c
	function GetBurstShootCDFromEntity();// 0x1554d34
	function GetBurstShootBulletsNumFromEntity();// 0x1554d0c
	function GetBulletTypeFromEntity();// 0x1554cc0
	function GetBulletRangeEntity();// 0x1554c98
	function GetBulletNumSingleShotFromEntity();// 0x1554c70
	function GetBulletFireSpeedFromEntity();// 0x1554c48
	function GetBaseImpactDamageEntity();// 0x1554c20
	function GetAvailableWeaponAttachmentSocketTypeList();// 0x1554b08
	function GetAutoReloadFromEntity();// 0x1554ae0
	function GetADSManualStop();// 0x1554ab8
	function GetAccessoriesVRecoilFactor();// 0x1554a90
	function GetAccessoriesRecoveryFactor();// 0x1554a68
	function GetAccessoriesHRecoilFactor();// 0x1554a40
	function GetAccessoriesDeviationFactor();// 0x1554a18
	function ForceSyncSimulatedClientsBulletsNumAfterReload();// 0x1554964
	function ForceSyncAllClientsBulletsNumOnServer();// 0x1554950
	function FixBulletNumWithValideData();// 0x155493c
	function EnableInfiniteBullets();// 0x15548bc
	function ClearWeaponAttrModifier();// 0x15548a8
	function CheckReloadAttr();// 0x1554894
	function CheckNeedClientSetMaxBulletNum();// 0x155486c
	function BP_OnActiveLocalShellDropFX();// 0x1ddc250
	function AddOwnerOffsetVelocity();// 0x15547e8

--------------------------------
Class: STExtraWeapon.Actor.Object
	int iRegionWeapon;//[Offset: 0x2c8 , Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x2cc , Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0 , Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1 , Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2 , Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3 , Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x2d4 , Size: 16]
	Transform FPPWeaponOffset;//[Offset: 0x2f0 , Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x320 , Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x350 , Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x380 , Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x3b0 , Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x3e0 , Size: 48]
	int CrossHairType;//[Offset: 0x410 , Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x414 , Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x418 , Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x420 , Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x428 , Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x42c , Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x438 , Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x444 , Size: 12]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x450 , Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x45c , Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x468 , Size: 4]
	byte CurFreshWeaponState;//[Offset: 0x46c , Size: 1]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x470 , Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x47c , Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x488 , Size: 12]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x494 , Size: 12]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x4a0 , Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x4a8 , Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0 , Size: 1]
	bool GM_CloseMaxWeaponReconnetTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1 , Size: 1]
	float MaxReconnectTime;//[Offset: 0x4b4 , Size: 4]
	float StartReconnectTime;//[Offset: 0x4b8 , Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x4c0 , Size: 96]
	SceneComponent[] UpdateOptimizationList;//[Offset: 0x528 , Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534 , Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x538 , Size: 80]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x58c , Size: 4]
	byte CurWeaponState;//[Offset: 0x590 , Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x594 , Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x598 , Size: 4]
	<SceneComponent,SceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;//[Offset: 0x5a0 , Size: 60]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x5e8 , Size: 4]
	MeshSynData[] synData;//[Offset: 0x5ec , Size: 12]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8 , Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9 , Size: 1]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600 , Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x604 , Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608 , Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x60c , Size: 12]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618 , Size: 1]
	byte WeaponUIType;//[Offset: 0x619 , Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x620 , Size: 48]
	Rotator RotForSimulate;//[Offset: 0x650 , Size: 12]
	int FuncFlag;//[Offset: 0x65c , Size: 4]
	function WeaponNotifyChangeStateDelegate__DelegateSignature();// 0x1ddc250
	function WeaponEffectActionDelegate__DelegateSignature();// 0x1ddc250
	function UpdateWeaponAvatar();// 0x1ddc250
	function SpecialResetForWeaponCrosshair();// 0x1ddc250
	function RPC_ClientSyncPostFireHandledTime();// 0x156b4f0
	function RPC_ClientChangeFreshWeaponState();// 0x156b43c
	function PlayLocalShellDropFX();// 0x1ddc250
	function OnWeaponDrawHUD__DelegateSignature();// 0x1ddc250
	function OnWeaponAttachToBackDelegate__DelegateSignature();// 0x1ddc250
	function OnShootWeaponChangeStateDelegate__DelegateSignature();// 0x1ddc250
	function OnRep_WeaponReconnectReplicateData();// 0x156b428
	function OnRep_WeaponAttachSocketName();// 0x156b414
	function OnRep_SimulatedOwnerPawn();// 0x156b400
	function OnRep_OwnerClientCreateWeaponData();// 0x156b3ec
	function OnRep_AvatarMeshChanged();// 0x156b3d8
	function OnRep_AttachmentReplication();// 0x1475b04
	function OnReleaseTrigger();// 0x156b3bc
	function OnRecoverOnClientDelegate__DelegateSignature();// 0x1ddc250
	function OnReconnectToClientOnServerDelegate__DelegateSignature();// 0x1ddc250
	function OnPushTrigger();// 0x156b3a0
	function OnGetOwnerActorDelegate__DelegateSignature();// 0x1ddc250
	function OnDisconnectToClientOnServerDelegate__DelegateSignature();// 0x1ddc250
	function NewInitWeapon();// 0x156b38c
	function JudgeHasEquipedComponentSlot();// 0x156b30c
	function IsLocalOrSpectorPlayer();// 0x156b2e4
	function InitWeapon();// 0x156b2d0
	function HasComponentSlot();// 0x156b250
	function HandleReconnectNew();// 0x156b1d8
	function GetWeaponStaticMeshComponent();// 0x156b1b0
	function GetWeaponStateType();// 0x156b188
	function GetWeaponSkeletalMeshComponent();// 0x156b160
	function GetWeaponOwnerObserverType();// 0x156b138
	function GetWeaponName();// 0x156b078
	function GetWeaponMeshComponent();// 0x156b050
	function GetWeaponEntityComponent();// 0x156b028
	function GetWeaponAttachSocket();// 0x156afe0
	function GetSpecificHandler();// 0x156afb8
	function GetOwnerPlayerName();// 0x156aef8
	function GetOwnerPlayerController();// 0x156aed0
	function GetOwnerPawn();// 0x156aea8
	function GetOwnerName();// 0x156ade8
	function GetOwnerController();// 0x156adc0
	function GetOwnerActor();// 0x156ad98
	function GetItemDefineID();// 0x156ad4c
	function GetGrenadeAvatar();// 0x156ad24
	function GetComponentSlotTarget();// 0x156ac50
	function GetColorByTeamID();// 0x1ddc250
	function GetBackpackItemHandle();// 0x156ac28
	function ForceHideWeaponWidget__DelegateSignature();// 0x1ddc250
	function DelayHandleAvatarMeshChanged();// 0x156ac14
	function CheckNeedReInitWeaponOwnerData();// 0x156ab9c
	function ChangeSequenceState();// 0x156ab1c
	function CallForceHideWeaponWidgetDel();// 0x156ab08

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0 , Size: 4]
	int[] SkillIDList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: WeaponAvatarComponent.AvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	bool bAsyncLoadMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x544 , Size: 1]
	delegate OnScopeEquipDelegate;//[Offset: 0x548 , Size: 12]
	delegate OnScopeUnequipDelegate;//[Offset: 0x554 , Size: 12]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x560 , Size: 12]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x56c , Size: 12]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x578 , Size: 12]
	BackpackWeaponHandle* AsyncCacheWeaponHandle;//[Offset: 0x584 , Size: 4]
	delegate OnWeaponPartsEquipped;//[Offset: 0x588 , Size: 12]
	BattleItemHandleBase* handleRecord;//[Offset: 0x594 , Size: 4]
	BattleItemHandleBase* MasterWeaponHandle;//[Offset: 0x598 , Size: 4]
	<MiniItem,WeaponAttachmentConfig> attachmentRef;//[Offset: 0x59c , Size: 60]
	MeshSynData[] defaultSynData;//[Offset: 0x5e4 , Size: 12]
	<int,HandleMeshPack> DefaultAttachmentMesh;//[Offset: 0x5f0 , Size: 60]
	<int,ParticleEffectGroup> ParticleComponents;//[Offset: 0x62c , Size: 60]
	function ShouldDisplayByQuality();// 0x15baed4
	function ResetAttachmentParent();// 0x15baec0
	function RemoveParticleEffect();// 0x15bae48
	function ReloadItemHandle();// 0x15badc8
	function PutOnMasterComponentByItemHandle();// 0x15bac68
	function PutOnEquipmentByResID();// 0x13b13a8
	function PutOnEquipmentByItemHandle();// 0x13b1248
	function PutOffEquimentByResID();// 0x13b11c0
	function PreFiltHandles();// 0x15bab8c
	function OnWeaponPartsEquipEvent__DelegateSignature();// 0x1ddc250
	function OnWeaponAvatarLoaded__DelegateSignature();// 0x1ddc250
	function OnWeaponAvatarClearSlot__DelegateSignature();// 0x1ddc250
	function OnWeaponAttachAvatarLoaded__DelegateSignature();// 0x1ddc250
	function OnScopeUnequipDelegate__DelegateSignature();// 0x1ddc250
	function OnScopeEquipDelegate__DelegateSignature();// 0x1ddc250
	function OnMeshLoaded();// 0x15ba938
	function OnItemHandleLoaded();// 0x15ba86c
	function OnItemHandleListLoaded();// 0x15ba714
	function OnDefaultItemLoaded();// 0x15ba648
	function OnAttachItemLoaded();// 0x15ba57c
	function OnAsyncLoadMeshList();// 0x13b0ee8
	function OnAsyncInitDefaultAvatar_Default();// 0x15ba568
	function OnAsyncInitDefaultAvatar();// 0x15ba4e8
	function NetSyncData();// 0x15ba3e8
	function LoadMeshsAsync();// 0x13b0bb8
	function LoadMeshListAsync();// 0x13b0a8c
	function LoadDefaultAttachmentsAsync();// 0x15ba3d4
	function IsTeammate();// 0x13b0a5c
	function IsAutonomousAvatar();// 0x15ba3a4
	function InitMasterComponent();// 0x15ba324
	function InitialAvatarParam();// 0x15ba2a4
	function InitDefaultMesh();// 0x13b0808
	function InitDefaultAvatar();// 0x13b0788
	function InitDefaultAttachment();// 0x15ba1e0
	function GetWeaponParentID();// 0x15ba104
	function GetWeaponController();// 0x15ba0dc
	function GetStaticMesh();// 0x15b9ed0
	function GetSocketName();// 0x15b9dfc
	function GetSkeletalMesh();// 0x15b9bf0
	function GetMeshResRef();// 0x15b98fc
	function GetMeshPack();// 0x15b96f8
	function GetMeshComponentBySlotID();// 0x15b9678
	function GetMaterial();// 0x15b94b8
	function GetEquippedHandle();// 0x15b9438
	function GetAttachmentSocketTransform();// 0x15b93b8
	function GetAttachmentAnim();// 0x15b92f4
	function ClearMeshBySlot();// 0x13affcc
	function ClearMeshByItemHandle();// 0x13aff4c
	function CheckSlotIsEquipped();// 0x15b9274
	function CheckIsAlreadyEquipped();// 0x15b91e4
	function ApplyStaticMeshByID();// 0x13afda4
	function ApplySkeletalMeshByID();// 0x13afbfc
	function ApplyParticleEffect();// 0x15b90dc
	function ApplyMaterial();// 0x13af994
	function ApplyAttachment();// 0x15b9018
	function ApplyAnimation();// 0x15b8f5c

--------------------------------
Class: AvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x274 , Size: 4]
	<int,MeshData> avatarMeshList;//[Offset: 0x278 , Size: 60]
	<int,MeshComponent> meshComponentList;//[Offset: 0x2b4 , Size: 60]
	<int,FName> slotToSocket;//[Offset: 0x2f0 , Size: 60]
	<enum,MeshData> DefaultAvataConfig;//[Offset: 0x32c , Size: 60]
	<int,BattleItemHandleBase> loadedItemList;//[Offset: 0x368 , Size: 60]
	int gender;//[Offset: 0x3a4 , Size: 4]
	bool isNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8 , Size: 1]
	bool forceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9 , Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa , Size: 1]
	<SoftObjectPath,BattleItemHandleBase> PendingLoadRes;//[Offset: 0x3ac , Size: 60]
	delegate OnAvatarEquipped;//[Offset: 0x3e8 , Size: 12]
	BattleItemHandleBase[] handleTickDispatcher;//[Offset: 0x3f4 , Size: 12]
	<int,bool> OutlineEnableList;//[Offset: 0x420 , Size: 60]
	int MinLod;//[Offset: 0x45c , Size: 4]
	bool bResSyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460 , Size: 1]
	<int,AsyncLoadMeshResReq> PendingLoadMeshRequestList;//[Offset: 0x504 , Size: 60]
	int AsyncLoadReqID;//[Offset: 0x540 , Size: 4]
	function ShowAttachmentByIndex();// 0x13b15f4
	function SetMeshVisibleByID();// 0x13b14d8
	function ResetComponentMaster();// 0x13b14c4
	function ResetAllAvataSlot();// 0x13b14b0
	function ReloadAllEquippedAvatar();// 0x13b1430
	function PutOnEquipmentByResID();// 0x13b13a8
	function PutOnEquipmentByItemHandle();// 0x13b1248
	function PutOffEquimentByResID();// 0x13b11c0
	function PutOffEquiment();// 0x13b1140
	function OnAsyncLoadMeshList();// 0x13b0ee8
	function OnAsyncLoadMesh();// 0x13b0cdc
	function LoadMeshsAsync();// 0x13b0bb8
	function LoadMeshListAsync();// 0x13b0a8c
	function IsTeammate();// 0x13b0a5c
	function IsSlotHasEquipped();// 0x13b09dc
	function IsNeedReplaced();// 0x13b0954
	function InitWidgetComponent();// 0x13b0888
	function InitDefaultMesh();// 0x13b0808
	function InitDefaultAvatar();// 0x13b0788
	function GetStaticMesh();// 0x13b0688
	function GetSlotDefinedID();// 0x13b05f4
	function GetSkeletalMesh();// 0x13b04f4
	function GetMaterial();// 0x13b0440
	function GetEquimentMeshBySlot();// 0x13b0348
	function GetAvatarSlotTypeFromInt();// 0x13b02d0
	function GetApplyMeshType();// 0x13b01b8
	function DrawOutlineEffect();// 0x13b00e8
	function ClearMeshBySlot();// 0x13affcc
	function ClearMeshByItemHandle();// 0x13aff4c
	function ApplyStaticMeshByID();// 0x13afda4
	function ApplySkeletalMeshByID();// 0x13afbfc
	function ApplyMesh();// 0x13afaa4
	function ApplyMaterial();// 0x13af994
	function ApplyConfig();// 0x13af980

--------------------------------
Class: AvatarComponentBase.SceneComponent.ActorComponent.Object
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260 , Size: 1]
	FName LightVectorName;//[Offset: 0x268 , Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x270 , Size: 4]
	function GetGameInstance();// 0x13b2334

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x2c0 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4 , Size: 1]
	function ToggleEnabled();// 0x3582474
	function SetLightFunctionScale();// 0x3582404
	function SetLightFunctionMaterial();// 0x358238c
	function SetLightFunctionFadeDistance();// 0x3582314
	function SetLightColor();// 0x3582298
	function SetEnabled();// 0x3582218
	function SetCastShadows();// 0x3582198
	function SetBrightness();// 0x3582120
	function SetAffectTranslucentLighting();// 0x35820a0
	function OnRep_bEnabled();// 0x13ef5c4
	function IsEnabled();// 0x3582078
	function GetLightColor();// 0x3582034
	function GetBrightness();// 0x358200c

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x260 , Size: 4]
	float MaxDrawDistance;//[Offset: 0x264 , Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x268 , Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c , Size: 1]
	int ShadowMapChannel;//[Offset: 0x270 , Size: 4]
	float MinRoughness;//[Offset: 0x278 , Size: 4]
	float ShadowResolutionScale;//[Offset: 0x27c , Size: 4]
	float ShadowBias;//[Offset: 0x280 , Size: 4]
	float ShadowSharpen;//[Offset: 0x284 , Size: 4]
	float ContactShadowLength;//[Offset: 0x288 , Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28c , Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28c , Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28c , Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28c , Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x28d , Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x290 , Size: 4]
	Vector LightFunctionScale;//[Offset: 0x294 , Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x2a0 , Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a4 , Size: 1]
	float IESBrightnessScale;//[Offset: 0x2a8 , Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x2ac , Size: 4]
	float DisabledBrightness;//[Offset: 0x2b0 , Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b4 , Size: 1]
	float BloomScale;//[Offset: 0x2b8 , Size: 4]
	float BloomThreshold;//[Offset: 0x2bc , Size: 4]
	Color BloomTint;//[Offset: 0x2c0 , Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2c8 , Size: 4]
	function SetVolumetricScatteringIntensity();// 0x3583330
	function SetTemperature();// 0x35832b8
	function SetShadowBias();// 0x3583240
	function SetLightFunctionScale();// 0x35831d0
	function SetLightFunctionMaterial();// 0x3583158
	function SetLightFunctionFadeDistance();// 0x35830e0
	function SetLightFunctionDisabledBrightness();// 0x3583068
	function SetLightColor();// 0x3582fa0
	function SetIntensity();// 0x3582f28
	function SetIndirectLightingIntensity();// 0x3582eb0
	function SetIESTexture();// 0x3582e38
	function SetEnableLightShaftBloom();// 0x3582db8
	function SetBloomTint();// 0x3582d48
	function SetBloomThreshold();// 0x3582cd0
	function SetBloomScale();// 0x3582c58
	function SetAffectTranslucentLighting();// 0x3582bd8
	function SetAffectDynamicIndirectLighting();// 0x3582b58

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x238 , Size: 16]
	float Brightness;//[Offset: 0x248 , Size: 4]
	float Intensity;//[Offset: 0x24c , Size: 4]
	Color LightColor;//[Offset: 0x250 , Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x254 , Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x254 , Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x254 , Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x254 , Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x254 , Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x254 , Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x258 , Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x25c , Size: 4]
	function SetCastVolumetricShadow();// 0x35849fc
	function SetCastShadows();// 0x358497c
	function GetLightColor();// 0x3584938

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xc0 , Size: 4]
	float TextureMultiplier;//[Offset: 0xc4 , Size: 4]

--------------------------------
Class: BackpackWeaponHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComp;//[Offset: 0xa8 , Size: 4]
	WeaponMeshCfg MeshPackage;//[Offset: 0xb0 , Size: 320]
	class AnimInstance* animBP;//[Offset: 0x1f0 , Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x1f8 , Size: 40]
	<ItemDefineID,ItemDefineID> AttachmentAvatarList;//[Offset: 0x220 , Size: 60]
	ItemDefineID[] DefaultAvatarList;//[Offset: 0x25c , Size: 12]
	ItemDefineID ParentID;//[Offset: 0x268 , Size: 24]
	ItemDefineID[] ParentIDList;//[Offset: 0x280 , Size: 12]
	class STExtraWeapon* lobbyWeapon;//[Offset: 0x28c , Size: 4]
	enum OverrideSocket;//[Offset: 0x290 , Size: 1]
	BattleItemAdditionalData[] WeaponAttachmentAdditionalDataList;//[Offset: 0x294 , Size: 12]
	STExtraWeapon* CachedTargetWeapon;//[Offset: 0x2a0 , Size: 4]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x2a8 , Size: 56]
	WeaponAttachItemUnit[] CachedWeaponAttachmentListBeforeDrop;//[Offset: 0x2e0 , Size: 12]
	WeaponKillEffectCfg KillEffect;//[Offset: 0x2ec , Size: 4]
	ParticleSystem* LightEffect;//[Offset: 0x2f0 , Size: 40]
	ParticleSystem* ShootLightEffect;//[Offset: 0x318 , Size: 40]
	<byte,AkAudioEvent> HitSoundMap;//[Offset: 0x340 , Size: 60]
	AkAudioEvent* SlashSound;//[Offset: 0x380 , Size: 40]
	bool IsInitUIWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8 , Size: 1]
	function SaveWeaponAttachmentListBeforeDrop();// 0x13d2164
	function PreLocalHandleDisuse();// 0x13d2150
	function LocalSpawnWrapperOnGround();// 0x13d208c
	function LocalHandleUse();// 0x13d1ad8
	function LocalGetAvailableInstantLogicSocketName();// 0x13d1768
	function LocalAutoEquipAttachments();// 0x1ddc250
	function IsVirtualAvatarHandle();// 0x13d1738
	function IsAvatarWeapon();// 0x13d1710
	function GetWidgetList();// 0x13d0980
	function GetSubSlotID();// 0x13d16e0
	function GetSlotID();// 0x13d16b0
	function GetMeshPackCfgCopy();// 0x13d1644
	function GetMeshPackCfg();// 0x13d1484
	function GetDefaultAvatarList();// 0x13d13b0
	function GetAnimationBP();// 0x13d1380

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84 , Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x88 , Size: 12]
	float UnitWeight;//[Offset: 0x94 , Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99 , Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a , Size: 1]
	function HandleUse();// 0x13bcb40
	function HandlePickup();// 0x13bc72c
	function HandleEnable();// 0x13bc304
	function HandleDrop();// 0x13bc238
	function HandleDisuse();// 0x13bc1b0
	function GetWorldInternal();// 0x163bb78
	function ExtractItemData();// 0x163bb0c

--------------------------------
Class: ItemHandleBase.Object
	int Count;//[Offset: 0x1c , Size: 4]
	int MaxCount;//[Offset: 0x20 , Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x28 , Size: 60]
	ItemDefineID DefineID;//[Offset: 0x68 , Size: 24]
	function SetAssociation();// 0x1642aac
	function RemoveAssociation();// 0x1642a34
	function Init();// 0x16429a4
	function GetDefineID();// 0x1642960
	function GetAssociationMap();// 0x16427e0
	function GetAssociationListByTargetType();// 0x16426d0
	function GetAssociationByTargetDefineID();// 0x1642624
	function GetAssociation();// 0x1642584
	function AddAssociation();// 0x164247c

--------------------------------
Class: BattleItemAdditionalData
	FName Name;//[Offset: 0x0 , Size: 8]
	float FloatData;//[Offset: 0x8 , Size: 4]
	FString StringData;//[Offset: 0xc , Size: 12]
	int IntData;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0 , Size: 8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8 , Size: 24]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0 , Size: 4]
	int TypeSpecificID;//[Offset: 0x4 , Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9 , Size: 1]
	uint64 InstanceID;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0xc4 , Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0xd0 , Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0xdc , Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0xe8 , Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0xf4 , Size: 12]
	delegate ItemOperCountDelegate;//[Offset: 0x100 , Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x10c , Size: 12]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x118 , Size: 12]
	delegate ItemUpdatedDelegate;//[Offset: 0x124 , Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x130 , Size: 12]
	SpecialPickInfo[] specialCountLimit;//[Offset: 0x13c , Size: 12]
	IncNetArray ItemListNet;//[Offset: 0x154 , Size: 24]
	BattleItemData[] CachItemList;//[Offset: 0x16c , Size: 12]
	IncNetArray ItemListNetCache;//[Offset: 0x178 , Size: 24]
	ItemHandleBase[] ItemHandleList;//[Offset: 0x194 , Size: 12]
	<ItemDefineID,ItemHandleBase> ItemHandleMap;//[Offset: 0x1a0 , Size: 60]
	int CapacityThreshold;//[Offset: 0x1dc , Size: 4]
	float Capacity;//[Offset: 0x1e0 , Size: 4]
	float OccupiedCapacity;//[Offset: 0x1e4 , Size: 4]
	int virtualitemid;//[Offset: 0x1f8 , Size: 4]
	delegate ZombieModeSkillPropLevelChangedDelegate;//[Offset: 0x200 , Size: 12]
	delegate ZombieModeSkillPropCDDelegate;//[Offset: 0x20c , Size: 12]
	function UseItem();// 0x19071ec
	function UpdateCapacity();// 0x19071bc
	function UnequipItem();// 0x1907134
	function TryMergeItemHandles();// 0x19070ac
	function TakeItem();// 0x1906f88
	function SwapItem();// 0x1906e9c
	function ServerEnableItem();// 0x1906d6c
	function ReturnItem();// 0x1906c48
	function RemoveItemHandle();// 0x1906bb0
	function ReceiveItemList();// 0x158feb4
	function ReceiveCapacity();// 0x1395678
	function PickupItem();// 0x19068bc
	function OnRep_specialCountLimit();// 0x19068a8
	function OnRep_ItemListNet();// 0x1906894
	function OnRep_ItemList();// 0x1906880
	function OnRep_Capacity();// 0x190686c
	function NotifyItemUpdated();// 0x19067dc
	function NotifyItemRemoved();// 0x190674c
	function NotifyItemListUpdated();// 0x1906730
	function NotifyCapacityUpdated();// 0x1906714
	function NewItemHandle();// 0x190667c
	function ModifyItemHandleEquippingState();// 0x19065b8
	function ModifyItemHandleCount();// 0x19064fc
	function ItemNet2Data();// 0x1906338
	function HasUnEquipItemByDefindIdRange();// 0x1906274
	function HasItemBySubType();// 0x19061f4
	function HasItemByDefineID();// 0x1906164
	function HasItemByDefindIdRange();// 0x19060a0
	function GetWorld_BP();// 0x1906078
	function GetSpecialItemNow();// 0x1905fd8
	function GetSpecialItemBefore();// 0x1905f48
	function GetItemListByDefineID();// 0x1905dd8
	function GetItemHandleMap();// 0x1905da0
	function GetItemHandleList();// 0x1905d30
	function GetItemCountByType();// 0x1905cb0
	function GetItemByDefineID();// 0x1905bf4
	function GetBattleItemFeatureDataByDefineID();// 0x1905b48
	function GetAllItemList();// 0x1905aa8
	function ForceNetUpdate();// 0x14755ec
	function EquipItem();// 0x1905a20
	function DropItem();// 0x1905900
	function DisuseItem();// 0x1905824
	function CreateItemHandleInternal();// 0x190578c
	function CreateItemHandle();// 0x19056f4
	function ConsumeItem();// 0x1905620
	function ClientUpdateSingleItem();// 0x19055a0
	function ClientUpdateItemData();// 0x1905504
	function ClientRemoveItemData();// 0x1905468
	function ClientBroadcastItemOperationFailedDelegate();// 0x1905350
	function ClientBroadcastItemOperationDelegate();// 0x1905238
	function CheckSkillPropItemCanBePickup();// 0x1905158
	function CheckCapacityForItem();// 0x1905084
	function CanDisuseToBackpack();// 0x1904ff4
	function BroadcastItemOperCountDelegate();// 0x1904ee4
	function BroadcastItemOperationFailedDelegate();// 0x1904dd4
	function BroadcastItemOperationDelegate();// 0x1904cc4
	function AddItemHandle();// 0x1904be8

--------------------------------
Class: SpecialPickInfo
	int item_id;//[Offset: 0x0 , Size: 4]
	int cur_count;//[Offset: 0x4 , Size: 4]
	int total_count;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: IncNetArray
	NetArrayUnit[] incArray;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: NetArrayUnit
	BattleItemNet Unit;//[Offset: 0x0 , Size: 56]
	bool markDelete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]

--------------------------------
Class: BattleItemNet
	ItemDefineID DefineID;//[Offset: 0x0 , Size: 24]
	int Count;//[Offset: 0x18 , Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x20 , Size: 12]
	ItemAssociation[] Associations;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: BattleItemData.ItemData
	int Count;//[Offset: 0x48 , Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x50 , Size: 12]
	BattleItemFeatureData FeatureData;//[Offset: 0x5c , Size: 24]
	ItemAssociation[] Associations;//[Offset: 0x74 , Size: 12]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8 , Size: 24]
	FString Name;//[Offset: 0x20 , Size: 12]
	FString Desc;//[Offset: 0x2c , Size: 12]
	FString Icon;//[Offset: 0x38 , Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0 , Size: 4]
	int MaxCount;//[Offset: 0x4 , Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9 , Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa , Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb , Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	int SortingPriority;//[Offset: 0x10 , Size: 4]
	int ItemType;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0 , Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28 , Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50 , Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78 , Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0 , Size: 40]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xc8 , Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf0 , Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0xf8 , Size: 40]
	ParticleRes[] ParticleEffects;//[Offset: 0x120 , Size: 12]
	UIWidgetRes[] WidgetList;//[Offset: 0x12c , Size: 12]
	enum meshType;//[Offset: 0x138 , Size: 1]

--------------------------------
Class: ParticleRes
	ParticleSystem* ParticleRes;//[Offset: 0x0 , Size: 4]
	FName AttachSocket;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: UIWidgetRes
	class UserWidget* UserWidget;//[Offset: 0x0 , Size: 4]
	FName AttachSocket;//[Offset: 0x8 , Size: 8]
	Transform Trans;//[Offset: 0x10 , Size: 48]
	Vector2D DrawSize;//[Offset: 0x40 , Size: 8]
	bool bShowDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	bool bUseScreenSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49 , Size: 1]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd0 , Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe0 , Size: 16]
	SlateColor ForegroundColor;//[Offset: 0xf0 , Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x110 , Size: 16]
	Margin Padding;//[Offset: 0x120 , Size: 16]
	UMGSequencePlayer[] ActiveSequencePlayers;//[Offset: 0x130 , Size: 12]
	UMGSequencePlayer[] StoppedSequencePlayers;//[Offset: 0x13c , Size: 12]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x148 , Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x154 , Size: 4]
	int Priority;//[Offset: 0x158 , Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c , Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15c , Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15c , Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15c , Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15c , Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15c , Size: 1]
	InputComponent* InputComponent;//[Offset: 0x160 , Size: 4]
	function UnregisterInputComponent();// 0x27bcb90
	function Tick();// 0x1ddc250
	function StopListeningForInputAction();// 0x27bcac4
	function StopListeningForAllInputActions();// 0x27bcab0
	function StopAnimation();// 0x27bca38
	function SetPositionInViewport();// 0x27bc978
	function SetPlaybackSpeed();// 0x27bc8bc
	function SetPadding();// 0x27bc834
	function SetOwningPlayer();// 0x27bc7bc
	function SetOwningLocalPlayer();// 0x27bc744
	function SetNumLoopsToPlay();// 0x27bc688
	function SetInputActionPriority();// 0x27bc610
	function SetInputActionBlocking();// 0x27bc590
	function SetForegroundColor();// 0x27bc270
	function SetDesiredSizeInViewport();// 0x27bc1fc
	function SetColorAndOpacity();// 0x27bc180
	function SetAnchorsInViewport();// 0x27bc0f8
	function SetAlignmentInViewport();// 0x27bc088
	function ReverseAnimation();// 0x27bc010
	function RemoveFromViewport();// 0x27bbffc
	function RegisterInputComponent();// 0x27bbfe8
	function PreConstruct();// 0x1ddc250
	function PlayAnimationTo();// 0x27bbe14
	function PlayAnimation();// 0x27bbc84
	function PauseAnimation();// 0x27bbc04
	function OnTouchStarted();// 0x1ddc250
	function OnTouchMoved();// 0x1ddc250
	function OnTouchGesture();// 0x1ddc250
	function OnTouchEnded();// 0x1ddc250
	function OnRemovedFromFocusPath();// 0x1ddc250
	function OnPreviewMouseButtonDown();// 0x1ddc250
	function OnPreviewKeyDown();// 0x1ddc250
	function OnPaint();// 0x1ddc250
	function OnMouseWheel();// 0x1ddc250
	function OnMouseMove();// 0x1ddc250
	function OnMouseLeave();// 0x1ddc250
	function OnMouseEnter();// 0x1ddc250
	function OnMouseCaptureLost();// 0x1ddc250
	function OnMouseButtonUp();// 0x1ddc250
	function OnMouseButtonDown();// 0x1ddc250
	function OnMouseButtonDoubleClick();// 0x1ddc250
	function OnMotionDetected();// 0x1ddc250
	function OnKeyUp();// 0x1ddc250
	function OnKeyDown();// 0x1ddc250
	function OnKeyChar();// 0x1ddc250
	function OnFocusReceived();// 0x1ddc250
	function OnFocusLost();// 0x1ddc250
	function OnDrop();// 0x1ddc250
	function OnDragOver();// 0x1ddc250
	function OnDragLeave();// 0x1ddc250
	function OnDragEnter();// 0x1ddc250
	function OnDragDetected();// 0x1ddc250
	function OnDragCancelled();// 0x1ddc250
	function OnAnimationStarted();// 0x27bbb84
	function OnAnimationFinished();// 0x27bbb04
	function OnAnalogValueChanged();// 0x1ddc250
	function OnAddedToFocusPath();// 0x1ddc250
	function ListenForInputAction();// 0x27bb974
	function IsPlayingAnimation();// 0x27bb94c
	function IsListeningForInputAction();// 0x27bb8cc
	function IsInViewport();// 0x27bb668
	function IsInteractable();// 0x1ddc250
	function IsAnyAnimationPlaying();// 0x27bb8a4
	function IsAnimationPlayingForward();// 0x27bb824
	function IsAnimationPlaying();// 0x27bb7a4
	function GetWidgetFromName();// 0x27bb710
	function GetOwningPlayerPawn();// 0x27bb6e8
	function GetOwningPlayer();// 0x27bb6b8
	function GetOwningLocalPlayer();// 0x27bb690
	function GetIsVisible();// 0x27bb668
	function GetAnimationCurrentTime();// 0x27bb5e8
	function GetAnchorsInViewport();// 0x27bb5a4
	function GetAlignmentInViewport();// 0x27bb564
	function Destruct();// 0x1ddc250
	function Construct();// 0x1ddc250
	function AddToViewport();// 0x27bb4ec
	function AddToPlayerScreen();// 0x27bb46c

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c , Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20 , Size: 16]
	FText ToolTipText;//[Offset: 0x30 , Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40 , Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50 , Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58 , Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68 , Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x78 , Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0x94 , Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c , Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c , Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c , Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c , Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c , Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c , Size: 1]
	byte UsedLayerPolicy;//[Offset: 0x9d , Size: 1]
	byte PreservedLayerNum;//[Offset: 0x9e , Size: 1]
	byte Cursor;//[Offset: 0x9f , Size: 1]
	enum Clipping;//[Offset: 0xa0 , Size: 1]
	enum Visibility;//[Offset: 0xa1 , Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xa4 , Size: 4]
	PropertyBinding[] NativeBindings;//[Offset: 0xc0 , Size: 12]
	function SetVisibility();// 0x27c04fc
	function SetUserFocus();// 0x27c0484
	function SetToolTipText();// 0x27c02e0
	function SetToolTip();// 0x27c0268
	function SetRenderTranslation();// 0x27c01f8
	function SetRenderTransformPivot();// 0x27c0188
	function SetRenderTransform();// 0x27c00b0
	function SetRenderShear();// 0x27c0040
	function SetRenderScale();// 0x27bffd0
	function SetRenderAngle();// 0x27bff58
	function SetNavigationRule();// 0x27bfe50
	function SetKeyboardFocus();// 0x27bfe3c
	function SetIsEnabled();// 0x13b3048
	function SetCursor();// 0x27bfdc4
	function SetClipping();// 0x27bfd4c
	function SetAllNavigationRules();// 0x27bfc90
	function ResetCursor();// 0x27bfc7c
	function RemoveFromParent();// 0x147126c
	function OnReply__DelegateSignature();// 0x1ddc250
	function OnPointerEvent__DelegateSignature();// 0x1ddc250
	function IsVisible();// 0x27bfc54
	function IsHovered();// 0x27bfc2c
	function InvalidateLayoutAndVolatility();// 0x27bfc18
	function HasUserFocusedDescendants();// 0x27bfb98
	function HasUserFocus();// 0x27bfb18
	function HasMouseCapture();// 0x27bfaf0
	function HasKeyboardFocus();// 0x27bfac8
	function HasFocusedDescendants();// 0x27bfaa0
	function HasAnyUserFocus();// 0x27bfa78
	function GetWidget__DelegateSignature();// 0x1ddc250
	function GetVisibility();// 0x27bfa50
	function GetText__DelegateSignature();// 0x1ddc250
	function GetSlateVisibility__DelegateSignature();// 0x1ddc250
	function GetSlateColor__DelegateSignature();// 0x1ddc250
	function GetSlateBrush__DelegateSignature();// 0x1ddc250
	function GetParent();// 0x27bfa28
	function GetOwningPlayer();// 0x27bb6b8
	function GetMouseCursor__DelegateSignature();// 0x1ddc250
	function GetLinearColor__DelegateSignature();// 0x1ddc250
	function GetIsEnabled();// 0x27bfa00
	function GetInt32__DelegateSignature();// 0x1ddc250
	function GetFloat__DelegateSignature();// 0x1ddc250
	function GetDesiredSize();// 0x27bf9c0
	function GetClipping();// 0x27bf998
	function GetCheckBoxState__DelegateSignature();// 0x1ddc250
	function GetCachedGeometry();// 0x27bf968
	function GetCachedAllottedGeometry();// 0x27bf938
	function GetBool__DelegateSignature();// 0x1ddc250
	function GenerateWidgetForString__DelegateSignature();// 0x1ddc250
	function GenerateWidgetForObject__DelegateSignature();// 0x1ddc250
	function ForceVolatile();// 0x27bf8b8
	function ForceLayoutPrepass();// 0x27bf8a4

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0 , Size: 16]
	byte ColorUseRule;//[Offset: 0x10 , Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0 , Size: 4]
	float Top;//[Offset: 0x4 , Size: 4]
	float Right;//[Offset: 0x8 , Size: 4]
	float Bottom;//[Offset: 0xc , Size: 4]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x2e0 , Size: 4]

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	delegate OnAnimationStarted;//[Offset: 0x220 , Size: 12]
	delegate OnAnimationFinished;//[Offset: 0x22c , Size: 12]
	MovieScene* MovieScene;//[Offset: 0x238 , Size: 4]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x23c , Size: 12]
	function GetStartTime();// 0x27c16b0
	function GetEndTime();// 0x27c1688

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	CachedMovieSceneEvaluationTemplate EvaluationTemplate;//[Offset: 0x48 , Size: 404]
	MovieSceneTrackCompilationParams TemplateParameters;//[Offset: 0x1dc , Size: 2]
	<Object,CachedMovieSceneEvaluationTemplate> InstancedSubSequenceEvaluationTemplates;//[Offset: 0x1e0 , Size: 60]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c , Size: 1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x1c , Size: 16]

--------------------------------
Class: CachedMovieSceneEvaluationTemplate.MovieSceneEvaluationTemplate

--------------------------------
Class: MovieSceneEvaluationTemplate
	<uint32,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0 , Size: 60]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0x78 , Size: 36]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0x9c , Size: 120]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x114 , Size: 124]
	bool bHasLegacyTrackInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x190 , Size: 1]
	bool bKeepStaleTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x190 , Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0 , Size: 16]
	uint16 EvaluationPriority;//[Offset: 0x10 , Size: 2]
	enum EvaluationMethod;//[Offset: 0x12 , Size: 1]
	MovieSceneSegment[] Segments;//[Offset: 0x14 , Size: 12]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0x20 , Size: 12]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0x30 , Size: 56]
	FName EvaluationGroup;//[Offset: 0x68 , Size: 8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70 , Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70 , Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	FloatRange[] Ranges;//[Offset: 0x0 , Size: 12]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0xc , Size: 12]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0 , Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0 , Size: 1]
	float Value;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0 , Size: 12]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0xc , Size: 12]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0 , Size: 4]
	int NumInitPtrs;//[Offset: 0x4 , Size: 4]
	int NumEvalPtrs;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	int SegmentIndex;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0 , Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0 , Size: 12]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0xc , Size: 12]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0 , Size: 12]
	uint32 EvaluationIndex;//[Offset: 0xc , Size: 4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0 , Size: 4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4 , Size: 4]
	uint32 SectionIdentifier;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<uint32,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0 , Size: 60]
	<uint32,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x3c , Size: 60]

--------------------------------
Class: MovieSceneSubSequenceData
	MovieSceneSequence* Sequence;//[Offset: 0x0 , Size: 4]
	Object* SequenceKeyObject;//[Offset: 0x4 , Size: 4]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x8 , Size: 8]
	Guid SourceSequenceSignature;//[Offset: 0x10 , Size: 16]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x20 , Size: 4]
	FloatRange PreRollRange;//[Offset: 0x24 , Size: 16]
	FloatRange PostRollRange;//[Offset: 0x34 , Size: 16]
	int HierarchicalBias;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0 , Size: 4]
	float Offset;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0 , Size: 4]
	MovieSceneSequenceID[] Children;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0 , Size: 4]
	<MovieSceneTrackIdentifier,int> TrackReferenceCounts;//[Offset: 0x4 , Size: 60]
	<Guid,MovieSceneTrackIdentifiers> TrackSignatureToTrackIdentifier;//[Offset: 0x40 , Size: 60]

--------------------------------
Class: MovieSceneTrackIdentifiers
	MovieSceneTrackIdentifier[] Data;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: MovieSceneTrackCompilationParams
	bool bForEditorPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bDuringBlueprintCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x48 , Size: 12]
	MovieScenePossessable[] Possessables;//[Offset: 0x54 , Size: 12]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x60 , Size: 12]
	MovieSceneTrack[] MasterTracks;//[Offset: 0x6c , Size: 12]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x78 , Size: 4]
	FloatRange SelectionRange;//[Offset: 0x7c , Size: 16]
	FloatRange PlaybackRange;//[Offset: 0x8c , Size: 16]
	bool bForceFixedFrameIntervalPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c , Size: 1]
	float FixedFrameInterval;//[Offset: 0xa0 , Size: 4]
	float InTime;//[Offset: 0xa4 , Size: 4]
	float OutTime;//[Offset: 0xa8 , Size: 4]
	float StartTime;//[Offset: 0xac , Size: 4]
	float endTime;//[Offset: 0xb0 , Size: 4]

--------------------------------
Class: MovieSceneSpawnable
	Guid Guid;//[Offset: 0x0 , Size: 16]
	FString Name;//[Offset: 0x10 , Size: 12]
	Object* ObjectTemplate;//[Offset: 0x1c , Size: 4]
	Guid[] ChildPossessables;//[Offset: 0x20 , Size: 12]
	enum Ownership;//[Offset: 0x2c , Size: 1]

--------------------------------
Class: MovieScenePossessable
	Guid Guid;//[Offset: 0x0 , Size: 16]
	FString Name;//[Offset: 0x10 , Size: 12]
	class Object* PossessedObjectClass;//[Offset: 0x1c , Size: 4]
	Guid ParentGuid;//[Offset: 0x20 , Size: 16]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0 , Size: 16]
	FString BindingName;//[Offset: 0x10 , Size: 12]
	MovieSceneTrack[] Tracks;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0 , Size: 8]
	FName SlotWidgetName;//[Offset: 0x8 , Size: 8]
	Guid AnimationGuid;//[Offset: 0x10 , Size: 16]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0 , Size: 8]
	Widget* content;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c , Size: 4]
	Widget[] AllWidgets;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c , Size: 4]
	Widget* content;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot[] Slots;//[Offset: 0xcc , Size: 12]
	function RemoveChildAt();// 0x27a6a98
	function RemoveChild();// 0x27a6a18
	function HasChild();// 0x27a6998
	function HasAnyChildren();// 0x27a6970
	function GetChildrenCount();// 0x27a6948
	function GetChildIndex();// 0x27a68c8
	function GetChildAt();// 0x27a6848
	function DoToAllChildren();// 0x27a6758
	function ClearChildren();// 0x27a6744
	function AddChild();// 0x27a66c4

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0 , Size: 8]
	Vector2D Scale;//[Offset: 0x8 , Size: 8]
	Vector2D Shear;//[Offset: 0x10 , Size: 8]
	float angle;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20 , Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38 , Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50 , Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68 , Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80 , Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98 , Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0 , Size: 1]
	FName WidgetToFocus;//[Offset: 0x8 , Size: 8]
	Widget* Widget;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x1c , Size: 8]
	DynamicPropertyPath SourcePath;//[Offset: 0x24 , Size: 12]
	FName DestinationProperty;//[Offset: 0x30 , Size: 8]

--------------------------------
Class: DynamicPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0 , Size: 8]
	int ArrayIndex;//[Offset: 0x8 , Size: 4]
	Struct* Struct;//[Offset: 0xc , Size: 4]
	Field* Field;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0 , Size: 4]
	int Count;//[Offset: 0x4 , Size: 4]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x8 , Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18 , Size: 32]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0 , Size: 24]
	FName TargetAssociationName;//[Offset: 0x18 , Size: 8]

--------------------------------
Class: WeaponAttachItemUnit
	ItemDefineID DefineID;//[Offset: 0x0 , Size: 24]
	enum socket;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: WeaponKillEffectCfg
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: PlayerTombBox.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x2c0 , Size: 12]
	FName tombName;//[Offset: 0x2d0 , Size: 8]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x2d8 , Size: 4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x2dc , Size: 4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x2e0 , Size: 24]
	int DeadTime;//[Offset: 0x2f8 , Size: 4]
	int BoxLifeSpan;//[Offset: 0x2fc , Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300 , Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x304 , Size: 12]
	Actor* AttachedActor;//[Offset: 0x310 , Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314 , Size: 1]
	enum BoxType;//[Offset: 0x315 , Size: 1]
	uint32 OwnerUniqueID;//[Offset: 0x318 , Size: 4]
	int TargetPlayerKey;//[Offset: 0x31c , Size: 4]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x320 , Size: 4]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x324 , Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x32c , Size: 4]
	function SwitchToDeadTombBox();// 0x13ef5a8
	function RegisterToPlayerPickUpList();// 0x147d0e8
	function OnRep_BoxLifeSpan();// 0x147d0d4
	function OnRep_AttachmentReplication();// 0x1475b04
	function OnRep_AttachedActor();// 0x147d0c0
	function HideDeadTombApparence();// 0x13ef5c4
	function GetUniqueInstanceID();// 0x147d098
	function GetTombboxLifespan();// 0x147d070
	function GetBoxPickupWrapperActor();// 0x147d044
	function GenerateTreasureBoxWrappers();// 0x147cf28
	function GeneratePlayerBackpackWrappers();// 0x13f4904
	function GenerateBoxWrappersInner();// 0x147cd90
	function GenerateBoxWrappersByPickUpItemDataList();// 0x147cc94
	function GenerateAirDropBoxWrappers();// 0x147cb34

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.Actor.Object
	PickUpItemData[] PickUpDataList;//[Offset: 0x440 , Size: 12]
	enum BoxType;//[Offset: 0x44c , Size: 1]
	function RPC_Broadcast_NotifyAllClientsModifyCount();// 0x1473330
	function RPC_Broadcast_ForceSyncAllData();// 0x147325c
	function OnWrapperEmptyDelegate__DelegateSignature();// 0x1ddc250
	function OnSomeonePickItemDelegate__DelegateSignature();// 0x1ddc250
	function OnRep_PickUpDataList();// 0x1473248
	function OnBoxEmptyDelegate__DelegateSignature();// 0x1ddc250
	function GetDataList();// 0x14731dc
	function FinishPickedUp();// 0x14730d4

--------------------------------
Class: PickUpWrapperActor.UAENetActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x2dc , Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	ItemDefineID DefineID;//[Offset: 0x2e8 , Size: 24]
	int Count;//[Offset: 0x300 , Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304 , Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x305 , Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x306 , Size: 1]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x307 , Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308 , Size: 1]
	FName OwnerName;//[Offset: 0x310 , Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x318 , Size: 4]
	Vector AttachedRelLoc;//[Offset: 0x31c , Size: 12]
	Actor* AttachedActor;//[Offset: 0x328 , Size: 4]
	BattleItemAdditionalData[] SavedAdditionalDataList;//[Offset: 0x32c , Size: 12]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338 , Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x33c , Size: 4]
	float PickUpColdCountDown;//[Offset: 0x340 , Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x380 , Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384 , Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x388 , Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x38c , Size: 4]
	FString ItemValue;//[Offset: 0x390 , Size: 12]
	FString ItemCategory;//[Offset: 0x39c , Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8 , Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9 , Size: 1]
	delegate OnWrapperPickedUp;//[Offset: 0x3b0 , Size: 12]
	StaticMeshComponent* PickupMesh;//[Offset: 0x3c0 , Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x3c4 , Size: 4]
	int ObjectPoolSize;//[Offset: 0x3c8 , Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc , Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cd , Size: 1]
	FString EffectPath;//[Offset: 0x3d0 , Size: 12]
	FString DurationTime;//[Offset: 0x3dc , Size: 12]
	int ItemID;//[Offset: 0x3e8 , Size: 4]
	Color DefaultColor;//[Offset: 0x3ec , Size: 4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x418 , Size: 4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x420 , Size: 24]
	function ToDetailString();// 0x1475ef4
	function ShowMesh();// 0x1475e74
	function ShowActor();// 0x1475e60
	function SetDefineID();// 0x1475dd0
	function SetCountOnServerAfterSpawn();// 0x1475d58
	function ServerResetShowActor();// 0x1475d44
	function RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList();// 0x1475be8
	function RPC_Broadcast_NotifyAllClientsHideActorForSomeTime();// 0x1475b34
	function OnRep_PickUpColdCountDown();// 0x1475b20
	function OnRep_AttachmentReplication();// 0x1475b04
	function OnRep_AttachedActor();// 0x1475af0
	function ModifyData();// 0x1475a78
	function MarkIsDropedByPlayerOnServer();// 0x14759b0
	function InitData();// 0x1475658
	function GetPickupMesh();// 0x1475630
	function GetNetGUIDOffsetValue();// 0x1475608
	function GetDataList();// 0x14731dc
	function ForceNetUpdate();// 0x14755ec
	function FinishPickedUp();// 0x14730d4
	function ColdTimeCountDown();// 0x14755d8
	function ClientResetShowActor();// 0x14755c4
	function CheckPickUpDataIsWeapon();// 0x147559c
	function BroadcastDataToAllClients();// 0x14754e8
	function AsyncLoadPickUpEffectDone();// 0x1475468
	function AddAdditionalDataListOnServerAfterSpawn();// 0x1475254

--------------------------------
Class: UAENetActor.Actor.Object
	int iRegionActor;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: PickUpItemData
	ItemDefineID ID;//[Offset: 0x0 , Size: 24]
	int Count;//[Offset: 0x18 , Size: 4]
	BattleItemAdditionalData[] AdditionalDataList;//[Offset: 0x1c , Size: 12]
	int InstanceID;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x244 , Size: 4]
	bool DisableLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249 , Size: 1]
	byte SpotGroupType;//[Offset: 0x24a , Size: 1]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x24c , Size: 4]
	ItemGenerateSpawnClass[] AllItems;//[Offset: 0x250 , Size: 12]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x25c , Size: 4]
	<FString,int> CacheItemValeCategory;//[Offset: 0x260 , Size: 60]
	function SetSpotProperty();// 0x1920d18
	function RepeatSpotProperty();// 0x1920c60
	function GenerateSpot();// 0x1920c30
	function GenerateItems();// 0x1920b2c
	function DoPickUp();// 0x19208bc
	function CountCacheItemValeCategory();// 0x1920894

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x235 , Size: 1]
	int WorldCompositionID;//[Offset: 0x238 , Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c , Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23d , Size: 1]
	float LineOffsetZ;//[Offset: 0x240 , Size: 4]
	function SetSpotValid();// 0x192e418
	function LineTraceSingle();// 0x192e15c
	function IsSpotValid();// 0x192e12c
	function GetRandomCategory();// 0x192df60
	function GenerateSpot();// 0x1920c30
	function GenerateActor();// 0x192dde8

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x168 , Size: 12]
	byte BornIslandGroupType;//[Offset: 0x174 , Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175 , Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x178 , Size: 196]
	<FString> IgnoreItemClassPathSet;//[Offset: 0x23c , Size: 60]
	SpotGroupProperty[] SpotGroupPropertys;//[Offset: 0x278 , Size: 12]
	bool UseSpotGroupPropertysEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284 , Size: 1]
	bool UseAreaID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285 , Size: 1]
	FString[] AreaIDList;//[Offset: 0x288 , Size: 12]
	SpotGroupProperty[] SpotGroupPropertysEx;//[Offset: 0x294 , Size: 12]
	<byte,SpotGroupProperty> SpotGroupPropertysDic;//[Offset: 0x2a0 , Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x2dc , Size: 32]
	CurveFloat* SpotRateCurve;//[Offset: 0x2fc , Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x300 , Size: 4]
	<FString,float> CategoryRates;//[Offset: 0x304 , Size: 60]
	<FString,ItemGenerateSpawnDataArray> ItemGenerateSpawnDatas;//[Offset: 0x340 , Size: 60]
	Actor[] BornIslandItems;//[Offset: 0x37c , Size: 12]
	ItemGroupSpotSceneComponent[] AllValidGroups;//[Offset: 0x388 , Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394 , Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395 , Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396 , Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x398 , Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x3a0 , Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8 , Size: 1]
	RepeatItemSpotData[] AllRepeatItemSpotData;//[Offset: 0x3e8 , Size: 12]
	ItemGenerateSpawnClass[] AllItemSpotDataToTick;//[Offset: 0x400 , Size: 12]
	FString CookedBandFilePath;//[Offset: 0x448 , Size: 12]
	function WriteItemClassStatisticsDatas_V15();// 0x139c4bc
	function WriteItemClassStatisticsDatas();// 0x191f348
	function WriteGroupStatisticsDatas();// 0x191f334
	function WriteBuildingStatisticsDatas();// 0x191f320
	function WriteAllStatisticsDatasToLog();// 0x191f304
	function WriteAllStatisticsDatas();// 0x191f2e8
	function SetCatetoryRate();// 0x191f13c
	function RegisterItemGenerateSpawnData();// 0x191f058
	function RegisterBornIslandItem();// 0x191efd8
	function RandomSingleGroup();// 0x191ee20
	function RandomItemGenerateSpawnData();// 0x191ebf4
	function RandomGroupsByType();// 0x191eadc
	function RandomGroups();// 0x1395678
	function RandomBornIslandGroups();// 0x191eac0
	function LoadItemGenerateTable();// 0x191eaa4
	function IsCatetoryEnabled();// 0x191ea7c
	function InitCatetorys();// 0x191ea68
	function GetSpotGroupPropertyByGroupType();// 0x191e940
	function GetRandomItemClassArray();// 0x191e6a8
	function GetCatetoryRate();// 0x191e5e0
	function GenerateSpotOnTick();// 0x1908990
	function DeleteValidGroups();// 0x191e5cc
	function DeleteBornIslandItems();// 0x191e5b8
	function AddIgnoreItemClassPath();// 0x191e484

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd , Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0xc0 , Size: 4]
	FString ItemTableName;//[Offset: 0xc4 , Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0xd0 , Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	<byte,GroupSpotComponentArray> AllGroupSpots;//[Offset: 0xd8 , Size: 60]
	SpotSceneComponent[] AllSpotsToTick;//[Offset: 0x114 , Size: 12]
	<int,WorldTileSpotArray> WorldTileSpots;//[Offset: 0x120 , Size: 60]
	FString CookedFilePath;//[Offset: 0x15c , Size: 12]
	function RegisterWorldTileSpot();// 0x143ed04
	function RegisterSpotComponentToTick();// 0x1908d28
	function RegisterGroupSpotComponent();// 0x1908ca8
	function GetRandomCategory();// 0x1908adc
	function GeneratorWorldTileSpots();// 0x1908a10
	function GenerateSpots();// 0x158feb4
	function GenerateSpotOnTick();// 0x1908990
	function GeneratePickupActor();// 0x190875c
	function CheckTileLevelsVisible();// 0x1908748

--------------------------------
Class: ItemActorComponent.ActorComponent.Object

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0 , Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4 , Size: 4]
	int AllSpotCount;//[Offset: 0x8 , Size: 4]
	int AllValidSpotCount;//[Offset: 0xc , Size: 4]
	<byte,ItemGroupStatisticsData> GroupStatisticsData;//[Offset: 0x10 , Size: 60]
	<FString,BuildingStatisticsData> BuildingStatisticsData;//[Offset: 0x4c , Size: 60]
	<FString,ItemClassStatisticsData> ItemStatisticsData;//[Offset: 0x88 , Size: 60]

--------------------------------
Class: ItemGroupStatisticsData.TableRowBase
	byte SpotGroupType;//[Offset: 0x4 , Size: 1]
	int AllGroupSpotCount;//[Offset: 0x8 , Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0xc , Size: 4]
	int AllSpotCount;//[Offset: 0x10 , Size: 4]
	int AllValidSpotCount;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: TableRowBase

--------------------------------
Class: BuildingStatisticsData.TableRowBase
	FString BuildingName;//[Offset: 0x4 , Size: 12]
	float BuildingLocationX;//[Offset: 0x10 , Size: 4]
	float BuildingLocationY;//[Offset: 0x14 , Size: 4]
	int AllGroupSpotCount;//[Offset: 0x18 , Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x1c , Size: 4]
	int AllSpotCount;//[Offset: 0x20 , Size: 4]
	int AllValidSpotCount;//[Offset: 0x24 , Size: 4]
	<byte,ItemSpotStatisticsData> SpotStatisticsData;//[Offset: 0x28 , Size: 60]

--------------------------------
Class: ItemSpotStatisticsData.TableRowBase
	byte SpotType;//[Offset: 0x4 , Size: 1]
	int AllSpotCount;//[Offset: 0x8 , Size: 4]
	int AllValidSpotCount;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ItemClassStatisticsData.TableRowBase
	FString fItemPath;//[Offset: 0x4 , Size: 12]
	bool bValidPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	int ItemCount;//[Offset: 0x14 , Size: 4]
	FString ItemTogetherPath;//[Offset: 0x18 , Size: 12]
	int ItemTogetherCount;//[Offset: 0x24 , Size: 4]
	bool bValidTogetherPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0 , Size: 1]
	int SpotGroupPercent;//[Offset: 0x4 , Size: 4]
	SpotTypeProperty[] SpotTypeProperties;//[Offset: 0x8 , Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18 , Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: SpotTypeProperty
	byte SpotType;//[Offset: 0x0 , Size: 1]
	int SpotPercentMin;//[Offset: 0x4 , Size: 4]
	int SpotPercentMax;//[Offset: 0x8 , Size: 4]
	int SpotPercentDot;//[Offset: 0xc , Size: 4]
	int ItemPerSpotMin;//[Offset: 0x10 , Size: 4]
	int ItemPerSpotMax;//[Offset: 0x14 , Size: 4]
	SpotWeight[] WeightsPerValue;//[Offset: 0x18 , Size: 12]
	SpotWeight[] WeightsPerCategory;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: SpotWeight
	FString Name;//[Offset: 0x0 , Size: 12]
	int Weight;//[Offset: 0xc , Size: 4]

--------------------------------
Class: UAEDataTable.DataTable.Object
	<FName,Property> nameToProperty;//[Offset: 0x6c , Size: 60]
	function TryGetTableDataRow();// 0x371eeb8
	function GetTableDataRow();// 0x371edf4
	function GetTableDataByDefault_Int32();// 0x371ec68
	function GetTableData_String();// 0x371eaa0
	function GetTableData_Int32();// 0x371e958
	function GetTableData_Float();// 0x371e80c
	function GetTableData_Bool();// 0x371e6c4

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: GroupSpotComponentArray
	byte GroupType;//[Offset: 0x0 , Size: 1]
	GroupSpotSceneComponent[] AllGroupComponents;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x235 , Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x236 , Size: 1]
	int WorldCompositionID;//[Offset: 0x238 , Size: 4]
	float LastGenerateItemTime;//[Offset: 0x23c , Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x240 , Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244 , Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x245 , Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x246 , Size: 1]
	function SetGroupValid();// 0x191c430
	function IsValidGroup();// 0x191c400
	function FindWorldCompositionID();// 0x191c3d8
	function DoPickUp();// 0x191c3c4

--------------------------------
Class: ItemGenerateSpawnDataArray
	FString ValueCatetory;//[Offset: 0x0 , Size: 12]
	ItemGenerateSpawnData[] AllGenerateSpawnDatas;//[Offset: 0xc , Size: 12]

--------------------------------
Class: ItemGenerateSpawnData
	int KeyID;//[Offset: 0x0 , Size: 4]
	FString ItemValue;//[Offset: 0x4 , Size: 12]
	FString ItemCategory;//[Offset: 0x10 , Size: 12]
	int ItemWeight;//[Offset: 0x1c , Size: 4]
	FString fItemPath;//[Offset: 0x20 , Size: 12]
	int ItemStackCount;//[Offset: 0x2c , Size: 4]
	FString ItemTogetherPath;//[Offset: 0x30 , Size: 12]
	int ItemTogetherStackCount;//[Offset: 0x3c , Size: 4]
	int ItemTogetherCountMin;//[Offset: 0x40 , Size: 4]
	int ItemTogetherCountMax;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: WorldTileSpotArray
	int WorldCompositionID;//[Offset: 0x0 , Size: 4]
	SpotSceneComponent[] AllSpotComponents;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: ItemGroupSpotSceneComponent.GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x248 , Size: 4]
	ItemSpotSceneComponent[] SpotsCacheCur;//[Offset: 0x24c , Size: 12]
	ItemSpotSceneComponent[] SpotsCacheAll;//[Offset: 0x258 , Size: 12]
	function SetGroupProperty();// 0x192042c
	function RepeatSpots();// 0x1920418
	function RepeatSingleSpot();// 0x19203a0
	function RandomSpotByType();// 0x1920204
	function RandomSingleSpot();// 0x19200b4
	function RandomRepeatGenerateItemCD();// 0x191ff90

--------------------------------
Class: DateTime

--------------------------------
Class: RepeatItemSpotData
	float RepeatGenerateCD;//[Offset: 0x78 , Size: 4]
	int64 LastGenerateItemTime;//[Offset: 0x80 , Size: 8]
	<FString,int> CacheItemValeCategory;//[Offset: 0x88 , Size: 60]

--------------------------------
Class: ItemGenerateSpawnClass
	int ID;//[Offset: 0x0 , Size: 4]
	class Object* ItemClass;//[Offset: 0x4 , Size: 4]
	int ItemCount;//[Offset: 0x8 , Size: 4]
	FString MetaData;//[Offset: 0xc , Size: 12]
	FString ItemValue;//[Offset: 0x18 , Size: 12]
	FString ItemCategory;//[Offset: 0x24 , Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	Actor* HostActor;//[Offset: 0x6c , Size: 4]

--------------------------------
Class: MiniItem
	int Type;//[Offset: 0x0 , Size: 4]
	int TypeSpecificID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0 , Size: 12]
	enum AttachmentSocketType;//[Offset: 0xc , Size: 1]
	enum subSlot;//[Offset: 0xd , Size: 1]
	enum SightType;//[Offset: 0xe , Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf , Size: 1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x14 , Size: 12]
	WeaponAttachmentDesc[] WeaponAttachmentDescs;//[Offset: 0x20 , Size: 12]
	<int,FName> socketTypeToName;//[Offset: 0x2c , Size: 60]
	WeaponMeshCfg MeshPackage;//[Offset: 0x68 , Size: 320]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x1a8 , Size: 12]
	AnimationAsset[] AttachmentAnimList;//[Offset: 0x1b4 , Size: 12]
	ItemDefineID ParentID;//[Offset: 0x1c0 , Size: 24]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0 , Size: 12]
	enum Op;//[Offset: 0xc , Size: 1]
	bool bModifyResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	float ModifyValue;//[Offset: 0x10 , Size: 4]
	Object* ModifyResValue;//[Offset: 0x18 , Size: 40]

--------------------------------
Class: WeaponAttachmentDesc
	FText Desc;//[Offset: 0x0 , Size: 12]
	FText DescValue;//[Offset: 0xc , Size: 12]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0 , Size: 12]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10 , Size: 320]

--------------------------------
Class: MeshSynData
	ItemDefineID DefineID;//[Offset: 0x0 , Size: 24]
	int gender;//[Offset: 0x18 , Size: 4]
	enum operationType;//[Offset: 0x1c , Size: 1]
	int AdditionalItemID;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: HandleMeshPack
	BackpackWeaponAttachHandle* Handle;//[Offset: 0x0 , Size: 4]
	WeaponMeshCfg meshCfg;//[Offset: 0x8 , Size: 320]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xa8 , Size: 472]
	class AnimInstance* animBP;//[Offset: 0x280 , Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x288 , Size: 40]
	WeaponPendantSocket[] PendantConfigList;//[Offset: 0x2b0 , Size: 12]
	WeaponPendantMap[] WeaponPendantMap;//[Offset: 0x2bc , Size: 12]
	BackpackComponent* BackpackComp;//[Offset: 0x2c8 , Size: 4]
	function ReturnWeaponAdditionalBulletsToBackpack();// 0x13d0b18
	function ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x13d0afc
	function IsVirtualAvatarHandle();// 0x13d0acc
	function HandleDisuseReplaceByNew();// 0x13d0a54
	function GetWidgetList();// 0x13d0980
	function GetSubSlotID();// 0x13d0950
	function GetSlotID();// 0x13d0920
	function GetMeshPackCfgCopy();// 0x13d08b4
	function GetMeshPackCfg();// 0x13d06f4
	function GetAttachmentConfig();// 0x13d0688
	function GetAnimationBP();// 0x13d0658
	function EquipOrUnEuipAttachment();// 0x13d0544

--------------------------------
Class: WeaponPendantSocket
	enum PendantSocketType;//[Offset: 0x0 , Size: 1]
	int PendantIndex;//[Offset: 0x4 , Size: 4]
	bool IsOpenConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	AvatarPendantConfig AnimConstraint;//[Offset: 0x10 , Size: 96]

--------------------------------
Class: AvatarPendantConfig
	FString ConfigName;//[Offset: 0x0 , Size: 12]
	Transform SocketRelativeTransform;//[Offset: 0x10 , Size: 48]
	Vector AngularLimitsMin;//[Offset: 0x40 , Size: 12]
	Vector AngularLimitsMax;//[Offset: 0x4c , Size: 12]

--------------------------------
Class: WeaponPendantMap
	int WeaponID;//[Offset: 0x0 , Size: 4]
	WeaponPendantSocket[] PendantInfoList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: ParticleEffectGroup
	ParticleSystemComponent[] ParticleCompList;//[Offset: 0x0 , Size: 12]
	ParticleRes[] ParticleRes;//[Offset: 0xc , Size: 12]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0 , Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4 , Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8 , Size: 4]
	MaterialInstance[] additionalMats;//[Offset: 0xc , Size: 12]
	enum meshType;//[Offset: 0x18 , Size: 1]
	int[] hiddenSlots;//[Offset: 0x1c , Size: 12]
	ReplacedSlotInfo[] replacedSlots;//[Offset: 0x28 , Size: 12]
	HideBoneData[] hideBoneSlots;//[Offset: 0x34 , Size: 12]
	ItemDefineID definedID;//[Offset: 0x40 , Size: 24]
	enum subSlot;//[Offset: 0x58 , Size: 1]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59 , Size: 1]

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x4c , Size: 4]
	MaterialInterface* Parent;//[Offset: 0x50 , Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54 , Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x58 , Size: 12]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0x64 , Size: 12]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x70 , Size: 12]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0x7c , Size: 12]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88 , Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x8c , Size: 16]
	Texture[] PermutationTextureReferences;//[Offset: 0xb0 , Size: 12]

--------------------------------
Class: FontParameterValue
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	Font* FontValue;//[Offset: 0x8 , Size: 4]
	int FontPage;//[Offset: 0xc , Size: 4]
	Guid ExpressionGUID;//[Offset: 0x10 , Size: 16]

--------------------------------
Class: ScalarParameterValue
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	float ParameterValue;//[Offset: 0x8 , Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc , Size: 16]

--------------------------------
Class: TextureParameterValue
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	Texture* ParameterValue;//[Offset: 0x8 , Size: 4]
	Guid ExpressionGUID;//[Offset: 0xc , Size: 16]

--------------------------------
Class: VectorParameterValue
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	LinearColor ParameterValue;//[Offset: 0x8 , Size: 16]
	Guid ExpressionGUID;//[Offset: 0x18 , Size: 16]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8 , Size: 4]
	byte BlendMode;//[Offset: 0xc , Size: 1]
	byte ShadingModel;//[Offset: 0xd , Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe , Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe , Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe , Size: 1]

--------------------------------
Class: ReplacedSlotInfo

--------------------------------
Class: HideBoneData

--------------------------------
Class: AsyncLoadMeshResReq
	SoftObjectPath[] MeshResList;//[Offset: 0x0 , Size: 12]
	BattleItemHandleBase[] AvatarHandleList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x28 , Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x2c , Size: 4]
	Controller* OwnerController;//[Offset: 0x30 , Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x34 , Size: 4]
	function OnWeaponStopFireDelegate__DelegateSignature();// 0x1ddc250
	function HandlePlayerSwitchCameraMode();// 0x15c37f0
	function HandlePlayerChangePose();// 0x15c3734
	function GetOwnerSTExtraPlayerController();// 0x15c370c
	function GetOwnerSTExtraPlayerCharacter();// 0x15c36e4
	function GetOwnerPlayerController();// 0x15c36bc
	function GetOwnerPawn();// 0x15c3694
	function GetOwnerController();// 0x15c366c
	function GetOwnerActor();// 0x15c3650

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponID;//[Offset: 0xc0 , Size: 4]
	byte WeaponType;//[Offset: 0xc4 , Size: 1]
	byte WeaponTypeNew;//[Offset: 0xc5 , Size: 1]
	byte WeaponHoldType;//[Offset: 0xc6 , Size: 1]
	FName WeaponAttachSocket;//[Offset: 0xc8 , Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0 , Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0xd8 , Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	int MaxNoGravityRange;//[Offset: 0xe4 , Size: 4]
	float LaunchGravityScale;//[Offset: 0xe8 , Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec , Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0xf0 , Size: 4]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5 , Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0xf8 , Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc , Size: 1]
	int UnablePeekTipID;//[Offset: 0x100 , Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105 , Size: 1]
	<byte,bool> PlugComponentSlotMap;//[Offset: 0x108 , Size: 60]
	<byte,WeaponComponentItemData> PlugComponentSlotDataMap;//[Offset: 0x144 , Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x180 , Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x184 , Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x190 , Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x1c0 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x1f0 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x220 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x250 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x280 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x2b0 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x2e0 , Size: 48]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x310 , Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314 , Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315 , Size: 1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0xbc , Size: 4]
	function UpdateComponentTick();// 0x14018c0
	function TryGetOwnerWeapon();// 0x15bc280
	function TryGetOwnerShootWeapon();// 0x15bc258
	function IsLocalOrSpectorPlayer();// 0x15bc230

--------------------------------
Class: WeaponComponentItemData
	PickUpGlobalDataTableRow PickUpGlobalDataTableRow;//[Offset: 0x0 , Size: 336]
	WeaponComponentDataTableRow WeaponComponentDataTableRow;//[Offset: 0x150 , Size: 24]

--------------------------------
Class: PickUpGlobalDataTableRow.SurviveTableRowBase.TableRowBase
	byte SurvivePickUpGlobalCategory;//[Offset: 0xc , Size: 1]
	SlateBrush SmallProfileImage;//[Offset: 0x10 , Size: 144]
	SlateBrush LargerProfileImage;//[Offset: 0xa0 , Size: 144]
	FString Name;//[Offset: 0x130 , Size: 12]
	FString Description;//[Offset: 0x13c , Size: 12]
	int DisplayPriority;//[Offset: 0x148 , Size: 4]

--------------------------------
Class: SurviveTableRowBase.TableRowBase
	int ID;//[Offset: 0x4 , Size: 4]
	int PickUpSoundID;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4 , Size: 8]
	Margin Margin;//[Offset: 0xc , Size: 16]
	SlateColor TintColor;//[Offset: 0x1c , Size: 28]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	Object* ResourceObject;//[Offset: 0x3c , Size: 4]
	Object* SoftResourceObject;//[Offset: 0x40 , Size: 40]
	FName ResourceName;//[Offset: 0x68 , Size: 8]
	Box2D UVRegion;//[Offset: 0x70 , Size: 20]
	byte DrawAs;//[Offset: 0x84 , Size: 1]
	byte Tiling;//[Offset: 0x85 , Size: 1]
	byte Mirroring;//[Offset: 0x86 , Size: 1]
	byte ImageType;//[Offset: 0x87 , Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88 , Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88 , Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0 , Size: 8]
	Vector2D Max;//[Offset: 0x8 , Size: 8]
	byte bIsValid;//[Offset: 0x10 , Size: 1]

--------------------------------
Class: WeaponComponentDataTableRow.SurviveTableRowBase.TableRowBase
	int WeaponComponentID;//[Offset: 0xc , Size: 4]
	byte Type;//[Offset: 0x10 , Size: 1]
	StaticMesh* ShowMesh;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0 , Size: 4]
	Actor* WeaponOwner;//[Offset: 0x4 , Size: 4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	FString OwnerPlayerName;//[Offset: 0xc , Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18 , Size: 8]
	int WeaponBulletNumInClip;//[Offset: 0x20 , Size: 4]
	uint32 WeaponShootID;//[Offset: 0x24 , Size: 4]
	uint32 WeaponClipID;//[Offset: 0x28 , Size: 4]
	byte CurWeaponState;//[Offset: 0x2c , Size: 1]
	byte CurShootType;//[Offset: 0x2d , Size: 1]
	int CurShootTotalType;//[Offset: 0x30 , Size: 4]
	ItemDefineID DefineID;//[Offset: 0x38 , Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x50 , Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	int OperationIndex;//[Offset: 0x58 , Size: 4]

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0x914 , Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0x918 , Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91c , Size: 1]
	<int> TouchIndexSet;//[Offset: 0x920 , Size: 60]
	byte OnFireTouchFingerIndex;//[Offset: 0x95c , Size: 1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0x95d , Size: 1]
	byte[] IgnoreCameraMovingIndexArray;//[Offset: 0x960 , Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96c , Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0x96d , Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0x970 , Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0x974 , Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0x978 , Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0x97c , Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0x980 , Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0x984 , Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0x988 , Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0x98c , Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0x990 , Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0x994 , Size: 4]
	float RecoverLagDelayTime;//[Offset: 0x998 , Size: 4]
	Vector2D StartPosition;//[Offset: 0x99c , Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0x9a4 , Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0x9ac , Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0x9b8 , Size: 12]
	FString FollowCandidateName;//[Offset: 0x9c8 , Size: 12]
	<FString,bool> IsTeammatesAutoFollowing;//[Offset: 0x9d4 , Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0xa10 , Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0xa20 , Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0xa50 , Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0xa54 , Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58 , Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5a , Size: 1]
	BattleSceneAvatarDisplayInfo[] BattleSceneAvatarDisplayInfoList;//[Offset: 0xa5c , Size: 12]
	LinearColor CrossHairColor;//[Offset: 0xa68 , Size: 16]
	byte AutoAimType;//[Offset: 0xa78 , Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaaa , Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaab , Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab8 , Size: 1]
	ClientFatalDamageRecordData[] ClientFatalDamageRecords;//[Offset: 0xabc , Size: 12]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0xac8 , Size: 144]
	SensibilityConfig SensibilityConfig;//[Offset: 0xb58 , Size: 172]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04 , Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc05 , Size: 1]
	int UseMotionControlType;//[Offset: 0xc08 , Size: 4]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0xc0c , Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0xc18 , Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0xc24 , Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0xc30 , Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0xc3c , Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0xc48 , Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0xc54 , Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0xc60 , Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0xc6c , Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0xc78 , Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0xc84 , Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0xc90 , Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0xc9c , Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0xca8 , Size: 12]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0xcb4 , Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0xcc0 , Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0xccc , Size: 12]
	delegate OnCharacterAntidoteChange;//[Offset: 0xcd8 , Size: 12]
	delegate OnInitTaskData;//[Offset: 0xce4 , Size: 12]
	delegate OnInitCollectionData;//[Offset: 0xcf0 , Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0xcfc , Size: 12]
	delegate OnPlayerKilling;//[Offset: 0xd08 , Size: 12]
	delegate OnPickupItem;//[Offset: 0xd14 , Size: 12]
	delegate OnDropItem;//[Offset: 0xd20 , Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0xd2c , Size: 12]
	delegate OnTaskConditionActived;//[Offset: 0xd38 , Size: 12]
	delegate OnTaskConditionDeactived;//[Offset: 0xd44 , Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0xd68 , Size: 68]
	delegate OnStartFireEvent;//[Offset: 0xdac , Size: 12]
	delegate OnStopFireEvent;//[Offset: 0xdb8 , Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0xdc4 , Size: 12]
	delegate OnReleaseScreen;//[Offset: 0xdd0 , Size: 12]
	delegate OnFingerMove;//[Offset: 0xddc , Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0xde8 , Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0xdf4 , Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0xe00 , Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0xe0c , Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0xe18 , Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0xe24 , Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0xe30 , Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0xe3c , Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0xe48 , Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0xe54 , Size: 12]
	delegate OnDamageToOther;//[Offset: 0xe60 , Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xe6c , Size: 12]
	delegate DelegatePlayerGoldChange;//[Offset: 0xe78 , Size: 12]
	delegate DelegatePlayerLevelChange;//[Offset: 0xe84 , Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0xe90 , Size: 12]
	delegate OnRank;//[Offset: 0xe9c , Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0xea8 , Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0xeb4 , Size: 12]
	delegate OnUseMainSlot;//[Offset: 0xec0 , Size: 12]
	delegate OnBackpackMainSlot;//[Offset: 0xecc , Size: 12]
	delegate OnRemoveMainSlot;//[Offset: 0xed8 , Size: 12]
	delegate OnRepPlayerState;//[Offset: 0xee4 , Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0xef0 , Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0xefc , Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0xf0c , Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0xf18 , Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0xf24 , Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0xf30 , Size: 12]
	delegate OnPlayerChangeWearingDone;//[Offset: 0xf3c , Size: 12]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0xf48 , Size: 12]
	delegate OnPlayerFinalAssistKill;//[Offset: 0xf54 , Size: 12]
	delegate OnEquipmentAvatarChange;//[Offset: 0xf60 , Size: 12]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0xf6c , Size: 12]
	delegate OnGameStateChange;//[Offset: 0xf78 , Size: 12]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0xf84 , Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0xfa0 , Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0xfa4 , Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0xfb0 , Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0xfbc , Size: 12]
	delegate OnLostConnection;//[Offset: 0xfe4 , Size: 12]
	delegate OnReconnected;//[Offset: 0xff0 , Size: 12]
	delegate OnExitGame;//[Offset: 0xffc , Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x1008 , Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1014 , Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x1020 , Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x102c , Size: 4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x1030 , Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x1034 , Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x1038 , Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c , Size: 1]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x11e0 , Size: 12]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f0 , Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f1 , Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f2 , Size: 1]
	bool EnableDebugRotatoInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f3 , Size: 1]
	bool EnableDebugRotatoInfoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f4 , Size: 1]
	bool DisableItemAttachListFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f5 , Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f6 , Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f7 , Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x11f8 , Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x11fc , Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x1200 , Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x1204 , Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x1208 , Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x120c , Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1210 , Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x1214 , Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x1238 , Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x125c , Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x1264 , Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x126c , Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x1290 , Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x1298 , Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x12a0 , Size: 36]
	<byte,CameraViewPitchLimitData> CameraViewPitchLimitDataMap;//[Offset: 0x12c4 , Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x1300 , Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x1304 , Size: 4]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1308 , Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1309 , Size: 1]
	byte CurCameraMode;//[Offset: 0x1310 , Size: 1]
	FName AutoScopeAimCompName;//[Offset: 0x1318 , Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1320 , Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1324 , Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1325 , Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1326 , Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1327 , Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1328 , Size: 4]
	float CanMoveCDTime;//[Offset: 0x132c , Size: 4]
	float CanSprintCDTime;//[Offset: 0x1330 , Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x1334 , Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1338 , Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x133c , Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1340 , Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x1344 , Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x1350 , Size: 4]
	float SpecialDeviceRate;//[Offset: 0x1354 , Size: 4]
	<FString,float> SpecialDeviceRateConfigs;//[Offset: 0x1358 , Size: 60]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1394 , Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1395 , Size: 1]
	int AutoAimLevel;//[Offset: 0x1398 , Size: 4]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x139c , Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x13a0 , Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a4 , Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a5 , Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x13a8 , Size: 8]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b0 , Size: 1]
	float AccumulateYawInput;//[Offset: 0x13b4 , Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x13b8 , Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13bc , Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13bd , Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13be , Size: 1]
	float NoRespondArea;//[Offset: 0x13c0 , Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x13c4 , Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c8 , Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c9 , Size: 1]
	byte sprintOptType;//[Offset: 0x13ca , Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x13cc , Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x13d0 , Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x13d4 , Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x13d8 , Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13dc , Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x13dd , Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x13e0 , Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e4 , Size: 1]
	<byte,float> TouchForceMap;//[Offset: 0x13e8 , Size: 60]
	float TouchForceFireThreshold;//[Offset: 0x1424 , Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x1428 , Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x142c , Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x1430 , Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x1434 , Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1438 , Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x143c , Size: 4]
	byte TouchFireType;//[Offset: 0x1440 , Size: 1]
	float TestForce;//[Offset: 0x1444 , Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x1448 , Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x1454 , Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1460 , Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1461 , Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1462 , Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1463 , Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x1464 , Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x1468 , Size: 4]
	float AutoSprintThreshold;//[Offset: 0x146c , Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x1470 , Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x1474 , Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x1478 , Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147c , Size: 1]
	float CurrentCameraFOV;//[Offset: 0x1480 , Size: 4]
	float MinFovChangeView;//[Offset: 0x1484 , Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x1488 , Size: 48]
	int GameTipMsgID;//[Offset: 0x14b8 , Size: 4]
	FString GameTipParam1;//[Offset: 0x14bc , Size: 12]
	FString GameTipParam2;//[Offset: 0x14c8 , Size: 12]
	float AutoSprintCD;//[Offset: 0x1510 , Size: 4]
	TeamMateStateInfo[] TeamMateStates;//[Offset: 0x1514 , Size: 12]
	<byte,TeamMateStateInfo> DoubleClickLastTouchInfoMap;//[Offset: 0x1520 , Size: 60]
	<byte,TeamMateStateInfo> DoubleClickCurTouchInfoMap;//[Offset: 0x155c , Size: 60]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x15b0 , Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x1678 , Size: 4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x167c , Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1680 , Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1684 , Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x1694 , Size: 4]
	FString[] ForbitPickList;//[Offset: 0x16a0 , Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b8 , Size: 1]
	int pickupPlayerChoice;//[Offset: 0x16bc , Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c0 , Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c1 , Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x16c4 , Size: 4]
	float RescueTotalSeconds;//[Offset: 0x16c8 , Size: 4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16cc , Size: 1]
	float FreeViewUpRate;//[Offset: 0x16d0 , Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x16d4 , Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x16d8 , Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16dc , Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16dd , Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x16e0 , Size: 12]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ec , Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x16ed , Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ee , Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x172c , Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x1794 , Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x1850 , Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x1854 , Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x1858 , Size: 4]
	GuideComponent* GuideComponent;//[Offset: 0x185c , Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x1860 , Size: 4]
	BattleItemData[] ObservedItemList;//[Offset: 0x1894 , Size: 12]
	uint32[] FiringPlayerList;//[Offset: 0x1900 , Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x190c , Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x1918 , Size: 12]
	FriendObserver[] FriendObserverDetails;//[Offset: 0x1924 , Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1930 , Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x1934 , Size: 12]
	float GotoSpectatingDelayTime;//[Offset: 0x1944 , Size: 4]
	PlayerBaseInfoInOB[] TotalPlayers;//[Offset: 0x1948 , Size: 12]
	PlayerInfoInOB[] TotalPlayerList;//[Offset: 0x1954 , Size: 12]
	PlayerInfoInOB[] TotalPlayerList_SortedByTeamID;//[Offset: 0x1960 , Size: 12]
	PlayerInfoInOB[] NearPlayerList;//[Offset: 0x196c , Size: 12]
	PlayerInfoInOB[] SameTeamPlayerList;//[Offset: 0x1978 , Size: 12]
	<int,TeamInfoInOB> TeamInfoMap;//[Offset: 0x1984 , Size: 60]
	ObservedData ObservedData;//[Offset: 0x19c0 , Size: 60]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0d , Size: 1]
	AirDropBoxInOb[] AirDropBoxList;//[Offset: 0x1a10 , Size: 12]
	delegate OnToggleOBMapShowHide;//[Offset: 0x1a20 , Size: 12]
	delegate OnInterruptGameButtonShow;//[Offset: 0x1a2c , Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x1a40 , Size: 12]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x1a4c , Size: 12]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x1a58 , Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x1a64 , Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x1a70 , Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x1a8c , Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x1a90 , Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x1a94 , Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x1a98 , Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a99 , Size: 1]
	int FireMode;//[Offset: 0x1a9c , Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa0 , Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa1 , Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aa2 , Size: 1]
	STExtraBaseCharacter[] nowNearCharacterList;//[Offset: 0x1aa4 , Size: 12]
	STExtraVehicleBase[] nowNearVehicleList;//[Offset: 0x1ab0 , Size: 12]
	STExtraShootWeapon[] nowShotWeaponList;//[Offset: 0x1ac8 , Size: 12]
	Actor[] nowGrenadeList;//[Offset: 0x1ae0 , Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aec , Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x1af0 , Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x1afc , Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x1b08 , Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x1b14 , Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x1b20 , Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b2d , Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x1b30 , Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x1b3c , Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b48 , Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x1b4c , Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x1b58 , Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b64 , Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x1b68 , Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x1b6c , Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x1b70 , Size: 4]
	float CloseParachuteHeight;//[Offset: 0x1b74 , Size: 4]
	float RealTimePawnHeight;//[Offset: 0x1b78 , Size: 4]
	Rotator OB_DestControlRotation;//[Offset: 0x1b7c , Size: 12]
	float OB_RotationLagSpeed;//[Offset: 0x1b94 , Size: 4]
	ItemDefineWeaponSyncData[] SpawnAndBackpackWeaponReplicatedDataArray;//[Offset: 0x1bb0 , Size: 12]
	WeaponMgrInfo[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x1bc0 , Size: 12]
	Actor* ThePlane;//[Offset: 0x1bcc , Size: 4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x1bd8 , Size: 4]
	STExtraWeapon[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x1be0 , Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x1bf4 , Size: 4]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bfa , Size: 1]
	FString LastBreathMurder;//[Offset: 0x1bfc , Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c08 , Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x1c10 , Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x1c18 , Size: 4]
	FString murderName;//[Offset: 0x1c1c , Size: 12]
	FString FinalMurderName;//[Offset: 0x1c28 , Size: 12]
	uint64 MurderUID;//[Offset: 0x1c38 , Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c40 , Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c41 , Size: 1]
	<class Object,ImpactMapValueData> ImpactEffectCachedListSimulateMap;//[Offset: 0x1c74 , Size: 60]
	<class Object,ImpactMapValueData> ImpactEffectCachedListLocalMap;//[Offset: 0x1cb0 , Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x1cf4 , Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x1cf8 , Size: 4]
	int CurrOBAirDropID;//[Offset: 0x1cfc , Size: 4]
	<byte,FString> EndTouchScreenCommandMap;//[Offset: 0x1d00 , Size: 60]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x1dcc , Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd0 , Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x1dd4 , Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x1e1c , Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e20 , Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x1e24 , Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e28 , Size: 1]
	enum ServerStateType;//[Offset: 0x1e29 , Size: 1]
	enum ClientStateType;//[Offset: 0x1e2a , Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e40 , Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e41 , Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e42 , Size: 1]
	float ObservingTime;//[Offset: 0x1e44 , Size: 4]
	KillerTracker* tracker;//[Offset: 0x1e48 , Size: 4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5c , Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5d , Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x1ea8 , Size: 4]
	bool IsQuickGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eac , Size: 1]
	FString DefaultHUDClassPath;//[Offset: 0x1eb0 , Size: 12]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x1ebc , Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x1ec8 , Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ecc , Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ecd , Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x1ed0 , Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x1ed4 , Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x1ed8 , Size: 56]
	FootprintActorInfo[] FootprintActorInfo;//[Offset: 0x1f10 , Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x1f1c , Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x1f20 , Size: 4]
	<enum,FootprintActorBlock> FootprintActorLookupTable;//[Offset: 0x1f24 , Size: 60]
	<class Object,TrailMarkActorBlock> TrailMarkActorLookupTable;//[Offset: 0x1f60 , Size: 60]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x1fa0 , Size: 4]
	MaterialInstanceDynamic[] BloodDecalMaterials;//[Offset: 0x1fa4 , Size: 12]
	<int,BackpackDecalHandle> LocalDecalHandleMap;//[Offset: 0x1fb0 , Size: 60]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x1fec , Size: 4]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x1ff0 , Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x1ff4 , Size: 4]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2064 , Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2065 , Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x2068 , Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x206c , Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x2078 , Size: 8]
	int IdCardMarkType;//[Offset: 0x2084 , Size: 4]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x208c , Size: 4]
	uint32 LastKillerKey;//[Offset: 0x2090 , Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2094 , Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2095 , Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20b8 , Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20b9 , Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20ba , Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x20bc , Size: 4]
	delegate OnTeammateConveyStatusChangedDelegate;//[Offset: 0x20c0 , Size: 12]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x20cc , Size: 12]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x20d8 , Size: 12]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x20e4 , Size: 12]
	function VisualizeItem();// 0x139c4bc
	function ViewVehicle();// 0x1542e5c
	function ViewPlane();// 0x1542e48
	function UseZombieModeSkill();// 0x1542e34
	function UserDropItemOperation();// 0x1542dac
	function UseItem();// 0x1542d34
	function UpdatePoseState();// 0x1542cbc
	function UpdateBodyIndoorState();// 0x1542bf4
	function UnLoadAllCollision();// 0x1542b74
	function TriggerVehicleVoiceCheckFuction();// 0x1542914
	function TriggerShotVoiceCheckFuction();// 0x1542a1c
	function TriggerMoveVoiceCheckFuction();// 0x1542914
	function TriggerGlassVoiceCheckFuction();// 0x1542858
	function TouchMove();// 0x154279c
	function TouchEnd();// 0x154271c
	function TouchBegin();// 0x15426a4
	function ToggleVehicleSync();// 0x13f789c
	function ToggleUserCmdDeltaSendAck();// 0x13f789c
	function ToggleUserCmdDeltaFlag();// 0x13f789c
	function ToggleUserCmdDeltaCheckSum();// 0x13f789c
	function ToggleUserCmdDelta();// 0x13f789c
	function ToggleServerAcknowledgePossession();// 0x13f789c
	function ToggleOBTPPFollowFreeView();// 0x1542690
	function ToggleEnableOBBulletTrackEffectSetting();// 0x1542610
	function ToggleCheatLocation();// 0x13f789c
	function TestMapMarkClient();// 0x1542510
	function TeamNoAlwaysRelevant();// 0x15424fc
	function TeamMateStateChanged();// 0x154231c
	function SwitchViewTarget();// 0x139c4bc
	function SwitchToTeamByNumPressed();// 0x1542308
	function SwitchToPlayerByNumPressed();// 0x15422f4
	function SwitchToDeadBox();// 0x15422e0
	function SwitchShowUI();// 0x15422cc
	function SwitchPoseStateServer();// 0x15421d0
	function SwitchPoseStateFailedResponse();// 0x15420c8
	function SwitchPoseStateClient();// 0x1542004
	function SwitchMouseCursorShowState();// 0x1541ff0
	function SwitchGenerateItem();// 0x1541f94
	function SwitchCameraModeScope();// 0x1541ed8
	function SwitchCameraModeByOrder();// 0x1541ec4
	function SwitchCameraMode();// 0x1541d68
	function SwapWeaponByPropSlotOnServer();// 0x1541c60
	function StartReadyCountDown();// 0x1541c4c
	function StartLandOnGroundAfterJumpPlane();// 0x1541c38
	function StartInputCameraMoveTest();// 0x1541b20
	function StartGame();// 0x1541b0c
	function StartFreeCamera();// 0x1541a94
	function StartAirDropSpecified();// 0x15419d8
	function StartAirDropBackupEnter();// 0x15418d8
	function StartAirDrop();// 0x1541860
	function StartAirAttackSpecified();// 0x1541760
	function StartAirAttack();// 0x15416e8
	function SpectatorCameraChange_Broadcast();// 0x1541620
	function SpawnVehicleWithPath();// 0x1541564
	function SpawnVehicleInAir();// 0x1541550
	function SpawnVehicle();// 0x154153c
	function SpawnHeavyweaponBox();// 0x15414c4
	function SpawnAllVehicle();// 0x1541408
	function SpawnAITeam();// 0x1541308
	function SpawnAI();// 0x1541290
	function SoftReconnectRecoverData();// 0x1541218
	function ShutDownItemGenerate();// 0x1541198
	function ShowWeaponRecordInfo();// 0x139c4bc
	function ShowVaultEnable();// 0x14c953c
	function ShowStringMsg();// 0x1540ee4
	function ShowPoints();// 0x1540da0
	function ShowMovePath();// 0x1540cdc
	function ShowFireBtn();// 0x1ddc250
	function ShowBulletShoot();// 0x1540c14
	function ShowAllRoles();// 0x139c4bc
	function ShouldForceFPPView();// 0x1540b94
	function SetVirtualStickVisibility();// 0x1540b14
	function SetVirtualStickAutoSprintStatus();// 0x1540a94
	function SetUAETriggerEnable();// 0x1540a14
	function SetTimeSpeedFactor();// 0x1427acc
	function SetTimeSpeedCheck();// 0x13f789c
	function SetTeammateForbitPick();// 0x1540904
	function SetStateLeftTime();// 0x154088c
	function SetSpeed();// 0x1540814
	function SetSingleThreadUpdateAnim();// 0x1540794
	function SetServerLevelLoadingMode();// 0x13f789c
	function SetScopeFingerIndex();// 0x15406cc
	function SetReconnectZombieWaveDataToClient();// 0x1540528
	function SetRageLevel();// 0x15404b0
	function SetPoisonFogEnable();// 0x1540430
	function SetPlayerMark();// 0x1540384
	function SetPlaneEnabled();// 0x1540304
	function SetPeekFingerIndex();// 0x15401f0
	function SetObservingTime();// 0x1540178
	function SetNightStatus();// 0x1540100
	function SetMaxHealth();// 0x1540088
	function SetJoyStickScale();// 0x1540010
	function SetJoystickOperatingMode();// 0x153ff54
	function SetJoyStickOpacity();// 0x153fedc
	function SetJoyStickInteractionSize();// 0x153fe6c
	function SetJoyStickCenter();// 0x153fdfc
	function SetIsSnowy();// 0x153fd7c
	function SetIsShowBlood();// 0x153fcfc
	function SetIsRainy();// 0x153fc7c
	function SetIsBlizzard();// 0x153fbfc
	function SetGameStateReconnectInfoToClient();// 0x153fa1c
	function SetGameStateModeUI();// 0x153f8c0
	function SetForbidNightVehicle();// 0x153f848
	function SetEnableVoiceByPlayerKey();// 0x153f784
	function SetCustomJumpPoint();// 0x153f684
	function SetCustomFlightRoute();// 0x153f53c
	function SetCurrentCameraFOV();// 0x153f440
	function SetControlRotation();// 0x153f328
	function SetCirCenterFixed();// 0x153f21c
	function SetBeKickedPlayerName();// 0x153f0c4
	function SetAllInfectedAreaLevel();// 0x153f04c
	function SetAirDropEnable();// 0x153efcc
	function SetAirAttackEnable();// 0x153ef4c
	function ServerUseItem();// 0x153ed9c
	function ServerUpdateShovelingState();// 0x153ec34
	function ServerTriggerSelectGrenade();// 0x153eb80
	function ServerTriggerCharacterEntryEvent();// 0x153eacc
	function ServerTriggerCharacterCustomEvent();// 0x153ea18
	function ServerTestPaintDecal();// 0x153e85c
	function ServerStopFireNew();// 0x153e6c8
	function ServerStopFire();// 0x153e534
	function ServerStartPreBarrel();// 0x153e438
	function ServerStartOnPlaneSurvive();// 0x153e190
	function ServerStartFireNew();// 0x153dfac
	function ServerStartFire();// 0x153de68
	function ServerStartBarrelNew();// 0x153dd6c
	function ServerStartBarrel();// 0x153dcb8
	function ServerSetShootType();// 0x153dbbc
	function ServerSetReloadMethod();// 0x153da78
	function ServerSetObsverLocation();// 0x153d9cc
	function ServerSetIsQuickGrenade();// 0x153d904
	function ServerSetIsFreeView();// 0x153d83c
	function ServerSetFreeCameraRotationOnVehicle();// 0x153d728
	function ServerSetFreeCamera();// 0x153d67c
	function ServerSetControlRotationOnVehicle();// 0x153d568
	function ServerSetControlRotation();// 0x153d4bc
	function ServerReportWatchGamePlayerInfoButtonClick();// 0x153d350
	function ServerReplicateExplosionEffect();// 0x153d090
	function ServerReceiveThePlane();// 0x153cfd0
	function ServerReceiveServerStateType();// 0x153ce78
	function ServerPickItem();// 0x153ca90
	function ServerOpenParachute();// 0x153ca34
	function ServerObserveKiller();// 0x153c9d8
	function ServerObserveCharacter();// 0x153c924
	function ServerObserveAirDropBox();// 0x153c870
	function ServerNotifyAutoFollowStatus();// 0x153c760
	function ServerKickPlayerFromGame();// 0x153c6ac
	function ServerJumpFromPlane();// 0x153c650
	function ServerInterruptGame();// 0x153c5f4
	function ServerHearSound();// 0x153c500
	function ServerHandleMsg();// 0x153c44c
	function ServerHandleHitDataArray();// 0x153c31c
	function ServerGetTotalPlayers();// 0x153c2c0
	function ServerGetPlayerAliasInfoList();// 0x153c264
	function ServerFight();// 0x153c208
	function ServerExitFromHelicopter();// 0x153c154
	function ServerExitFreeCamera();// 0x153c0f8
	function ServerDropItem();// 0x153bf94
	function ServerDoPickupRevivalFlag();// 0x153bf38
	function ServerDisuseItem();// 0x153be1c
	function ServerCMD_RPC();// 0x153bd28
	function ServerCMD();// 0x1425478
	function ServerClearTeammatesCache();// 0x153bccc
	function SendStringMsg();// 0x153bbcc
	function SendEndTouchScreenUICommand();// 0x153bb00
	function SendDeviceInfo();// 0x153b984
	function ScopeOut();// 0x153b970
	function ScopeIn();// 0x153b95c
	function S2C_ResponseSkillPrompt();// 0x153b774
	function S2C_HelpOther();// 0x153b61c
	function S2C_BeHelpedByOther();// 0x153b4c4
	function RunOnNextFrameEvent();// 0x153b4b0
	function RunOnNextFrame__DelegateSignature();// 0x1ddc250
	function RPC_Server_ShootSpecialBullet();// 0x153b2d0
	function RPC_Server_ShootSeekAndLockProjectileBullet();// 0x153aee0
	function RPC_Server_ShootProjectileBullet();// 0x153ab40
	function RPC_Server_ReqHealth();// 0x153aae4
	function RPC_Server_ReportPeerVisualFieldActorList();// 0x153a9f0
	function RPC_Server_PrintHP();// 0x153a994
	function RPC_Server_NotifySwapMainWeaponFinished();// 0x153a898
	function RPC_Server_NotifyServerUseSpot();// 0x153a7e4
	function RPC_Server_NotifyServerUseEnhancerSpot();// 0x153a730
	function RPC_Server_NotifyServerProjectileBulletImpact();// 0x153a63c
	function RPC_Server_NotifyServerEnemyStep();// 0x153a4e8
	function RPC_Server_NotifyServerEnemyShoot();// 0x153a334
	function RPC_Server_NotifyServerAddOpenedAirDropBoxes();// 0x153a240
	function RPC_Server_NotifyBreakWindow();// 0x1539e80
	function RPC_Server_NorifyServerWhichTeamOpenedAirdropBox();// 0x1539d80
	function RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x1539d24
	function RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr();// 0x1539b8c
	function RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon();// 0x1539a3c
	function RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes();// 0x1539948
	function RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes();// 0x1539854
	function RPC_Server_ConfirmMisKill();// 0x153970c
	function RPC_Server_ClientHasReactivated();// 0x15396b0
	function RPC_Server_ClientHasFinishedRecoverWeapon_New();// 0x1539518
	function RPC_Server_ClientHasFinishedRecoverWeapon();// 0x1539380
	function RPC_Server_CharacterSpawnFinish();// 0x1539324
	function RPC_Server_ChangeWeaponState();// 0x1539228
	function RPC_Server_BattleStateTime();// 0x1539174
	function RPC_ReviveState_GiveUpRevive();// 0x1539118
	function RPC_RequireDynamicWeatherInfo();// 0x1539064
	function RPC_PushDynamicWeatherInfo();// 0x1538f64
	function RPC_OwnerClient_WeaponWarmUpEnd();// 0x1538eb0
	function RPC_OwnerClient_SwapWeaponByPropSlot();// 0x1538d58
	function RPC_OwnerClient_SetMurderInfo();// 0x1538b50
	function RPC_OwnerClient_SetLastBreathMurder();// 0x1538948
	function RPC_OwnerClient_SetCurrentWeaponVisible();// 0x1538880
	function RPC_OwnerClient_PlayerEnableAttrModifier();// 0x15386ac
	function RPC_OwnerClient_PlayerConsumeItem();// 0x15385b0
	function RPC_OwnerClient_PlayerAddHealth();// 0x15384b4
	function RPC_OwnerClient_PlayerAddEnergy();// 0x15383b8
	function RPC_OwnerClient_NotifyClientEquipWeaponAttachment();// 0x1538260
	function RPC_OwnerClient_HandleAIShootBulletHit();// 0x1538148
	function RPC_OwnerClient_ClientPlayItemOperationSound();// 0x1538004
	function RPC_GiveUpGame();// 0x1537fa8
	function RPC_DrawDebug_Sphere();// 0x1537e68
	function RPC_DrawDebug_Line();// 0x1537d30
	function RPC_Client_SwitchWeapon();// 0x1537b64
	function RPC_Client_PlayerBulletHitVehicleSound();// 0x1537a4c
	function RPC_Client_OnDamageNotifyRecord();// 0x15377a4
	function RPC_Client_NotifyHealth();// 0x15376f0
	function RPC_Client_DestroyWeapon();// 0x153758c
	function RPC_Client_ClientDisplayScoreChangeTips();// 0x1537498
	function RPC_Client_CircleRun();// 0x153739c
	function RPC_Client_AirAttack();// 0x1537264
	function RevivalTemateSuccess();// 0x1537248
	function RevivalTemateFail();// 0x1537184
	function RetriveMobileContentScaleFactor();// 0x153715c
	function RestoreDefaultInteractionSize();// 0x15370e4
	function RespawnRecoverData();// 0x153706c
	function ResetMissingUIUpdate();// 0x1ddc250
	function RequireNetCullingDistanceByDevice();// 0x1537010
	function RequireDeviceInfo();// 0x1536ff4
	function RequestPlayerNewbieInfo();// 0x1536fe0
	function RequestChangeWearInBattle();// 0x1536f60
	function RequestChangeWear();// 0x1536ee0
	function ReqSwitchPersonPerspective();// 0x1536e18
	function ReportWatchGamePlayerInfoButtonClick();// 0x1536da0
	function ReportVehicleMoveFlow();// 0x1536c44
	function ReportAntiCheatInfo();// 0x1536c30
	function RemoveTouchMoveFinger();// 0x1536bb8
	function RemoveAllDoors();// 0x1536ba4
	function ReleaseFire();// 0x1ddc250
	function ReInitUIAfterReCreatePawn();// 0x1536b2c
	function RefreshTopMostUIPanel();// 0x1ddc250
	function RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x1ddc250
	function RecoverStatusAfterReconnecting();// 0x1536b10
	function RecordPathPoint();// 0x1536afc
	function ReceiveClientRestart();// 0x1ddc250
	function ReceiveBackpackComponent();// 0x1536ae0
	function PrintStringToScreen();// 0x1536990
	function PrintMovementLog();// 0x1536918
	function PrintDownCollision();// 0x1536904
	function PrintAllPickupWarpper();// 0x15368f0
	function PressGrenade();// 0x1ddc250
	function PressFire();// 0x1ddc250
	function PlayVehicleCameraShake();// 0x15368dc
	function PlayMatinee();// 0x1536864
	function PlayInteractionEmote();// 0x15367ec
	function PlayerLiveStateChangedInOB();// 0x1536730
	function PlayerKillingDelegate__DelegateSignature();// 0x1ddc250
	function PlayerDoEmoteDelegate__DelegateSignature();// 0x1ddc250
	function PlayerControllerToggleDelegate__DelegateSignature();// 0x1ddc250
	function PlayBattleSound();// 0x15365f0
	function OpenParachute();// 0x15365dc
	function OnWeaponEquipAttachment();// 0x1ddc250
	function OnWallFeedBack();// 0x153655c
	function OnViewTargetPoseChanged();// 0x15364a0
	function OnViewTargetDetachedFromVehicle();// 0x1536428
	function OnViewTargetChangeVehicleSeat();// 0x1536414
	function OnViewTargetAttachedToVehicle();// 0x153639c
	function OnUseMainSlot__DelegateSignature();// 0x1ddc250
	function OnUseInventoryItemDelegate__DelegateSignature();// 0x1ddc250
	function OnUnequipWeaponDelegate__DelegateSignature();// 0x1ddc250
	function OnTeammatesAllDie();// 0x1536388
	function OnTeammateLogin();// 0x1536310
	function OnTeammateHPChangeDelegate__DelegateSignature();// 0x1ddc250
	function OnTeammateConveyStatusChangedDelegate__DelegateSignature();// 0x1ddc250
	function OnTaskConditionDeactivedDelegate__DelegateSignature();// 0x1ddc250
	function OnTaskConditionActivedDelegate__DelegateSignature();// 0x1ddc250
	function OnTakeDamaged__DelegateSignature();// 0x1ddc250
	function OnSwitchWeaponDelegate__DelegateSignature();// 0x1ddc250
	function OnSwitchToTeamByNumPressed__DelegateSignature();// 0x1ddc250
	function OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x1ddc250
	function OnSwitchCameraModeStartDelegate__DelegateSignature();// 0x1ddc250
	function OnSwitchCameraModeEndDelegate__DelegateSignature();// 0x1ddc250
	function OnStopFireDelegate__DelegateSignature();// 0x1ddc250
	function OnStartFireDelegate__DelegateSignature();// 0x1ddc250
	function OnStartAutoSprintCountDown__DelegateSignature();// 0x1ddc250
	function OnSpectatorChange__DelegateSignature();// 0x1ddc250
	function OnSpectatorCameraChange();// 0x1ddc250
	function OnShowSkillPromptDelegate__DelegateSignature();// 0x1ddc250
	function OnShowAutoSprintButton__DelegateSignature();// 0x1ddc250
	function OnSetChangeCharacterState__DelegateSignature();// 0x1ddc250
	function OnServerFinishPickupRevivalFlag();// 0x15362f4
	function OnRevivalAndEnterAirplane__DelegateSignature();// 0x1ddc250
	function OnRepTeammateChange__DelegateSignature();// 0x1ddc250
	function OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x1ddc250
	function OnRepPlayerState__DelegateSignature();// 0x1ddc250
	function OnRepNotify_SetBattleOwner();// 0x15362e0
	function OnRepNotify_ServerHitEnemyReplicatedData();// 0x139c4bc
	function OnRep_WeaponSystemReconnectReplicateData();// 0x15362cc
	function OnRep_WeaponAvatarDataList();// 0x15362b0
	function OnRep_UsedSimulation();// 0x1536294
	function OnRep_STExtraBaseCharacter();// 0x1536280
	function OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x153626c
	function OnRep_SpawnAndBackpackWeaponReplicatedDataArray();// 0x1536258
	function OnRep_ServerStateType();// 0x1536244
	function OnRep_RefreshTotalPlayers();// 0x1536230
	function OnRep_RefreshAirDropBox();// 0x153621c
	function OnRep_Plane();// 0x1536208
	function OnRep_ObservedItemList();// 0x15361f4
	function OnRep_InitialEquipmentAvatar();// 0x15361d8
	function OnRep_ImprisonmentTeammateSucess();// 0x15361c4
	function OnRep_ForbitPickEffect();// 0x15361b0
	function OnRep_ForbitPick();// 0x153619c
	function OnRep_FiringPlayerList();// 0x1536188
	function OnRep_DestControlRotation();// 0x1536174
	function OnRep_DeadTombBox();// 0x1536160
	function OnRep_CanOpenParachute();// 0x153614c
	function OnRep_CanJump();// 0x1536138
	function OnRep_CanImprisonmentTeammate();// 0x1536124
	function OnRep_BattleSceneAvatarDisplayInfoList();// 0x1536110
	function OnRep_BackpackComponent();// 0x15360fc
	function OnRemoveMainSlot__DelegateSignature();// 0x1ddc250
	function OnReleaseScreen__DelegateSignature();// 0x1ddc250
	function OnReleaseFireBtnDelegate__DelegateSignature();// 0x1ddc250
	function OnReleaseFire();// 0x15360e8
	function OnReconnected__DelegateSignature();// 0x1ddc250
	function OnRank__DelegateSignature();// 0x1ddc250
	function OnPressVampireClothSlotBtn();// 0x15360d4
	function OnPressTurnplateQuickMsgBtn();// 0x15360c0
	function OnPressTriggerEntireMapBtn();// 0x15360ac
	function OnPressShowTagVehileSeatListBtn();// 0x1536098
	function OnPressRolewearChangeBtn();// 0x1536020
	function OnPressItemSKillBtn();// 0x153600c
	function OnPressFire();// 0x1535ff8
	function OnPressBackpackBtn();// 0x1535fe4
	function OnPlayerUseRecoverItem();// 0x1535fd0
	function OnPlayerStateChanged();// 0x1535fbc
	function OnPlayerReConnected();// 0x1535f08
	function OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x1ddc250
	function OnPlayerPutDownActorDelegate__DelegateSignature();// 0x1ddc250
	function OnPlayerPickUpActorDelegate__DelegateSignature();// 0x1ddc250
	function OnPlayerNameChange__DelegateSignature();// 0x1ddc250
	function OnPlayerLostConnection();// 0x1535e54
	function OnPlayerHitFireBtn();// 0x1535dd4
	function OnPlayerFinalAssistKill__DelegateSignature();// 0x1ddc250
	function OnPlayerControllerStateChangedDelegate__DelegateSignature();// 0x1ddc250
	function OnPlayerClickDriveBtn();// 0x1535dc0
	function OnPlayerChangeWearingDone__DelegateSignature();// 0x1ddc250
	function OnPlayerChangeWearingAnimFinished__DelegateSignature();// 0x1ddc250
	function OnPlayerCanGetInVehicle();// 0x1535cf0
	function OnPickupItemDelegate__DelegateSignature();// 0x1ddc250
	function OnPickUpExpand();// 0x1535c88
	function OnPickUpCollapsed();// 0x1535c08
	function OnObserverLevelLoaded();// 0x1535bf4
	function OnObservedUsingWeaponChanged();// 0x1535be0
	function OnObservedPoisonFogStageChanged();// 0x1535bcc
	function OnObservedItemsChanged();// 0x1535bb8
	function OnObservedBulletNumChanged();// 0x1535ba4
	function OnMapMarkChangeDelegate__DelegateSignature();// 0x1ddc250
	function OnLostConnection__DelegateSignature();// 0x1ddc250
	function OnLocalCharacterHPChangeDelegate__DelegateSignature();// 0x1ddc250
	function OnLandOnGroundAfterJumpPlaneEnd();// 0x1ddc250
	function OnKillerNotify();// 0x1535b2c
	function OnItemOperCount();// 0x1535a1c
	function OnItemOperation();// 0x153590c
	function OnInterruptAutoSprintCountDown__DelegateSignature();// 0x1ddc250
	function OnGameStateChange__DelegateSignature();// 0x1ddc250
	function OnGameStartDelegate__DelegateSignature();// 0x1ddc250
	function OnGameStartCountDownDelegate__DelegateSignature();// 0x1ddc250
	function OnGameModeStateChanged();// 0x1ddc250
	function OnFingerMove__DelegateSignature();// 0x1ddc250
	function OnExitGame__DelegateSignature();// 0x1ddc250
	function OnEquipWeaponDelegate__DelegateSignature();// 0x1ddc250
	function OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x1ddc250
	function OnEquipmentAvatarChange__DelegateSignature();// 0x1ddc250
	function OnEnterBattleResultStep();// 0x15358f8
	function OnDropItemDelegate__DelegateSignature();// 0x1ddc250
	function OnDoubleClickCheckDelegate__DelegateSignature();// 0x1ddc250
	function OnDeathBoxSpawnedDelegate__DelegateSignature();// 0x1ddc250
	function OnDeadBoxExpand();// 0x15358e4
	function OnDeadBoxCollapsed();// 0x1535864
	function OnDamageToOtherDelegate__DelegateSignature();// 0x1ddc250
	function OnClientWillGotoSpectating();// 0x1535850
	function OnClientReportPeerVisualFieldAcotrList__DelegateSignature();// 0x1ddc250
	function OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature();// 0x1ddc250
	function OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature();// 0x1ddc250
	function OnCharacterRecoveryHealthEvent();// 0x153583c
	function OnCharacterRecoveryHealth__DelegateSignature();// 0x1ddc250
	function OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature();// 0x1ddc250
	function OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature();// 0x1ddc250
	function OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature();// 0x1ddc250
	function OnCharacterCheckVoiceTriggerDelegate__DelegateSignature();// 0x1ddc250
	function OnCharacterBreathChangeDelegate__DelegateSignature();// 0x1ddc250
	function OnCharacterAntidoteChangeDelegate__DelegateSignature();// 0x1ddc250
	function OnChangeBattleOwnerDelegate__DelegateSignature();// 0x1ddc250
	function OnBackpackMainSlot__DelegateSignature();// 0x1ddc250
	function OnAutoSprintActive__DelegateSignature();// 0x1ddc250
	function On3DTouchForceChangeDelegate__DelegateSignature();// 0x1ddc250
	function ObserveWhoKilledMe();// 0x1535828
	function ObserveClientSetPoisonSmogStage();// 0x1535774
	function ObserveCharacter();// 0x153561c
	function ObserveAirDropBox();// 0x15355a4
	function OBCameraTurnSlower();// 0x1535590
	function OBCameraTurnFaster();// 0x153557c
	function OBCameraMoveSlower();// 0x1535568
	function OBCameraMoveNear();// 0x1535554
	function OBCameraMoveFaster();// 0x1535540
	function OBCameraMoveFar();// 0x153552c
	function NotifyObserverFinalDamage();// 0x1535424
	function NotifyIsInResultView();// 0x15353a4
	function NotifyInOutPickUpActorWrapperBP();// 0x1ddc250
	function MoveUp();// 0x153532c
	function MoveToVehicle();// 0x15352b4
	function MoveToItem();// 0x153523c
	function MoveToAIByDropItem();// 0x15351c4
	function MoveToAI();// 0x15351b0
	function MoveTo();// 0x15350b0
	function ModifyTouchIndex();// 0x1534ff4
	function ModifyStreamingDistance();// 0x1534f7c
	function MemberVoice();// 0x1ddc250
	function MarkStartFireFrame();// 0x1534f68
	function LocalProfileFootprint();// 0x1534f54
	function LocalGetGameStateReconnectInfo();// 0x1534f40
	function LoadAllLand();// 0x1534ec0
	function LerpFPPCamera();// 0x1534eac
	function KillSomeOne();// 0x1534df0
	function KillAll();// 0x1534ddc
	function Kill();// 0x1534d64
	function KickPlayerFromGame();// 0x1534d50
	function JumpFromPlane();// 0x1534d3c
	function JoystickTriggerSprint();// 0x1ddc250
	function IsViewTarget();// 0x1534cb4
	function IsUse3DTouch();// 0x1534c8c
	function IsTombBoxTeammate();// 0x1534c0c
	function IsShowBlood();// 0x1534bec
	function IsSameTeam();// 0x1534b6c
	function IsReleasePosInAimBtnRange();// 0x1534aec
	function IsMoveable_DontConsiderFollowingState();// 0x1534ac4
	function IsMoveable();// 0x1534a9c
	function IsLastBreathOrRescueingOther();// 0x1534a74
	function IsInRevival();// 0x1534a4c
	function IsInPlane();// 0x1534a24
	function IsInParachuteOpen();// 0x15349fc
	function IsInParachuteJump();// 0x15349d4
	function IsInParachute();// 0x15349ac
	function IsInInitial();// 0x1534984
	function IsInFreeCameraView();// 0x1534968
	function IsInFinish();// 0x1534940
	function IsInFight();// 0x1534918
	function IsInDeathReplay();// 0x15348f0
	function IsInDead();// 0x15348c8
	function IsForbitPickMakeEffect();// 0x15348a0
	function IsForbitPick();// 0x153480c
	function IsCanViewEnemy();// 0x15347e4
	function IsCanImprisonmentTeammate();// 0x15347bc
	function IsAllowActorTouchMove();// 0x1534794
	function IsAGMPlayer();// 0x153476c
	function InsertGrenadeIDToName();// 0x15346b0
	function InsertGrenadeIDInOrder();// 0x1534638
	function InputCameraMoveTest();// 0x15345c0
	function InitTaskDatas();// 0x1534548
	function InitTaskDataDelegate__DelegateSignature();// 0x1ddc250
	function InitTaskData();// 0x1534360
	function InitTaskComponent();// 0x153434c
	function InitNewbieComponent();// 0x1ddc250
	function InitJoyStickAfterActivation();// 0x1ddc250
	function InitCollectionDataDelegate__DelegateSignature();// 0x1ddc250
	function InitCollectionData();// 0x153424c
	function ImprisonmentTeammate();// 0x15340fc
	function HandleUpdateShovelingRelease();// 0x15340e8
	function HandleUpdateShovelingPressed();// 0x15340d4
	function HandleUpdateShoveling();// 0x15340c0
	function HandleTogglePlayerListInOB();// 0x15340ac
	function HandleToggleOBTeamList();// 0x153402c
	function HandleToggleMapInOB();// 0x1534018
	function HandleToggleHitDamageDisplay();// 0x1534004
	function HandleSwitchToTeammatePrev();// 0x1533ff0
	function HandleSwitchToTeammateNext();// 0x1533fdc
	function HandleSwitchToTeam();// 0x1533f64
	function HandleSwitchToPlayerIndex();// 0x1533eec
	function HandleLeaveFreeViewInOB();// 0x1533ec4
	function HandleLandOnGroundEnd();// 0x1533ed8
	function HandleEnterFreeViewInOB();// 0x1533ec4
	function HandleClientHasReactivated();// 0x1533eb0
	function HandleCameraModeChanged();// 0x1533df4
	function GotoSpectating();// 0x1533d6c
	function GotoFlying();// 0x1533d58
	function GMTeleport();// 0x1533ce0
	function GMSetBoolPoisonCircle();// 0x1533ccc
	function GMSetBoolAirDrop();// 0x1533cb8
	function GMSetBoolAirAttack();// 0x1533ca4
	function GMSetBoolAI();// 0x1533c90
	function GMOpenWeather();// 0x1533c18
	function GMEnableRandom();// 0x1533c04
	function GMEnableAllComponent();// 0x1533bf0
	function GMDisableRandom();// 0x1533bdc
	function GMDisableAllComponent();// 0x1533bc8
	function GMCloseWeather();// 0x1533b50
	function GetWriteCircleDistance();// 0x1533b28
	function GetViewPortDPIScale();// 0x1533af8
	function GetVehicleUserComp();// 0x1533ad0
	function GetUseMotionControlLog();// 0x1533aa8
	function GetUseMotionControlEnable();// 0x1533a80
	function GetUnlockWearCount();// 0x1533a58
	function GetTouchForce();// 0x15339d8
	function GetThePlane();// 0x15339b8
	function GetTeammatePlayerStateFromPlayerTombBox();// 0x1533938
	function GetTargetedSpringArm();// 0x1533910
	function GetStatTriangles();// 0x13bee98
	function GetStatMemory();// 0x1514a88
	function GetStatDrawCalls();// 0x13bee98
	function GetSpecialAreaList();// 0x1533850
	function GetSpecialAreaID();// 0x1533828
	function GetSensibilityRate();// 0x1533790
	function GetSelfAvatarDisplayInfo();// 0x1533634
	function GetRevivalCountDownTime();// 0x153360c
	function GetRemarkNameByGID();// 0x1ddc250
	function GetPlayerInfoInOBByName();// 0x15333f8
	function GetPlayerCharacterSafety();// 0x15333d0
	function GetPaintDecalTargetTransform();// 0x1533348
	function GetNewestAirDropBoxPos();// 0x1533300
	function GetNearPlayerList();// 0x15331f0
	function GetMurderUIDStr();// 0x15330f4
	function GetMurderName();// 0x1533034
	function GetMurderIsAI();// 0x1532ffc
	function GetMultiItemFromItemList();// 0x1532dc0
	function GetMaxTouchForceFinger();// 0x1532d80
	function GetJoyStickVisualSize();// 0x1532d40
	function GetJoyStickCenter();// 0x1532d00
	function GetIsRespawn();// 0x1532ce0
	function GetIsFreeCamera();// 0x1532cc0
	function GetInfectionPawnSubType();// 0x14e21dc
	function GetInfectionPawnMainType();// 0x14724f8
	function GetGameStateReconnectInfoOnServer();// 0x1532c64
	function GetGameScreenSize();// 0x139c4bc
	function GetFriendDistance();// 0x13bee98
	function GetFocalLocation();// 0x1532c14
	function GetCurPlayerState();// 0x1532bec
	function GetCurPlayerId();// 0x1532bc4
	function GetCurPlayerCharacter();// 0x1532b9c
	function GetCurPawnLocation();// 0x1532b54
	function GetCurPawn();// 0x1532b2c
	function GetCurFPS();// 0x13bee98
	function GetControlLookRotation();// 0x1532adc
	function GetControlLookPoint();// 0x15329f0
	function GetClothingInAllBackpack();// 0x1532898
	function GetClassFromBPClassManager();// 0x1532818
	function GetChatComponent();// 0x15327f0
	function GetBackpackComponent();// 0x15327c8
	function GenerateAirDropData();// 0x1532664
	function GameModeGotoNextState();// 0x1532650
	function GameModeGotoFightingState();// 0x153263c
	function FreeCameraTouchMove();// 0x1532580
	function ForceReleaseCurTouchMoveFinger();// 0x153256c
	function FireTakeDamagedEvent();// 0x15324fc
	function FireOrGrenade();// 0x15324e8
	function FindAIDropItem();// 0x1532470
	function Fight();// 0x153245c
	function ExtractAvatarDisplayInfo();// 0x15322b8
	function ExitFreeCamera();// 0x1532238
	function ExecDSCommand();// 0x1532174
	function EndTouchScreen();// 0x153206c
	function EndForceTouchFire();// 0x1531ffc
	function EnablePlayerInHouse();// 0x1531f7c
	function EnableMyLandscapeDraw();// 0x139c4bc
	function DynamicCreateComponents();// 0x1531f68
	function DoUITouchMove();// 0x1ddc250
	function DoubleClickCancel();// 0x1531ef0
	function DoTouchMove();// 0x1ddc250
	function DoRevivalTemmates();// 0x1531e3c
	function DoGiveUpRevivalTemmates();// 0x1531d88
	function DoAutoManageActiveCameraTarget();// 0x1531d74
	function DisplayGameWarningTipWithMsgIDAndString();// 0x1531abc
	function DisplayGameTipWithMsgIDAndString();// 0x1531804
	function DisplayGameTipWithMsgID();// 0x153178c
	function DisplayGameTipForLowFPSWarning();// 0x15314d4
	function DispatchPlayerRespawnedEvent();// 0x153145c
	function DispatchPlayerReconnectedEvent();// 0x1531448
	function DispatchPlayerLostEvent();// 0x1531434
	function DispatchPlayerExitEvent();// 0x1531420
	function DispatchPlayerAboutToRespawnEvent();// 0x15313a8
	function DisableMyLandscapeDraw();// 0x139c4bc
	function DisableAirDrop();// 0x1531394
	function DelegatePlayerLevelChange__DelegateSignature();// 0x1ddc250
	function DelegatePlayerGoldChange__DelegateSignature();// 0x1ddc250
	function DelayGotoSpectating();// 0x1531380
	function DelayForceExitFreeCamera();// 0x153136c
	function DelayedFocusPlayerPawn();// 0x1531358
	function DebugWorldPlayerAvatarInfo();// 0x1531344
	function DebugSetUIVisibility();// 0x1ddc250
	function DebugEnableFerrisWheelTick();// 0x15312c4
	function DebugEnableDrawSearchLine();// 0x1427acc
	function DebugEnableBulletImpact();// 0x1427acc
	function DebugAirDropPickInfo();// 0x1531134
	function DealGetAllNearShotWeapon();// 0x15310bc
	function DealGetAllNearMoveVehicle();// 0x1531000
	function DealGetAllNearMoveCharacter();// 0x1530f88
	function DeactiveTaskTrigger();// 0x1530ec4
	function CreateVehicleOverlapDamage();// 0x1530eb0
	function CreateGodzilla();// 0x1530db0
	function CorrectVehicleState();// 0x1530bf4
	function CollectAllPlayerWeaponPosInfo();// 0x139c4bc
	function ClientUpdateShovelingState();// 0x1530adc
	function ClientStopShoveling();// 0x1530a80
	function ClientStartOnlineGame();// 0x1530a64
	function ClientShowInfectAreaWarning();// 0x1530a08
	function ClientSetTotalPlayers();// 0x15308e0
	function ClientSetPoisonSmogStage();// 0x153082c
	function ClientSetOBData();// 0x1530724
	function ClientSetAntidoteTime();// 0x1530628
	function ClientSendRoundEndEvent();// 0x1530558
	function ClientQuitViewEnemy();// 0x153053c
	function ClientPlayItemOperationSound();// 0x153043c
	function ClientOnHurt();// 0x1530420
	function ClientOnDamageToOther();// 0x15303a0
	function ClientObserveCharacter();// 0x153028c
	function ClientInterruptGame();// 0x1530230
	function ClientInitIngameUIAfterRespawn();// 0x15301d4
	function ClientHearSound();// 0x1530118
	function ClientHandleMsg();// 0x1530050
	function ClientGotoSpectating();// 0x1530034
	function ClientGiveUpRevivalTemmates();// 0x1530020
	function ClientGameStarted();// 0x1530004
	function ClientFriendBattleEnd();// 0x1524a1c
	function ClientExitFromHelicopter();// 0x152ff7c
	function ClientEnterViewBox();// 0x152fefc
	function ClientEndOnlineGame();// 0x152fee0
	function ClientDisplayGameTipWithMsgID();// 0x152fe2c
	function ClientCheckStartShovelingFail();// 0x152fdd0
	function ClientChangeStatePC();// 0x152fd50
	function ClearBossBornPoint();// 0x152fd3c
	function ClampFreeCamIconOffset();// 0x152fc9c
	function CientRevivalTemmates();// 0x152fc74
	function CheckNeedReport();// 0x152fba8
	function CheckConsumeGlideItem();// 0x152fb94
	function ChangeSpectatorStateToFreeView();// 0x152fb80
	function ChangeRolewearIndex();// 0x152fb00
	function ChangeFinishTime();// 0x152fa88
	function CanSeeAllUI();// 0x13f789c
	function CaluIsReleasePosInAimBtnRange();// 0x152f980
	function CallZombieFlowAirDrop();// 0x152f908
	function CallZombieAirDrop();// 0x152f890
	function CallTeamMateStateChanged();// 0x152f6f4
	function CallShowTouchInterface();// 0x152f66c
	function CalInputFromRotaionRate();// 0x152f09c
	function CalcAttactBtnPos();// 0x152ef3c
	function C2S_RequestSkillPrompt();// 0x152eee0
	function C2S_RequestBeingRescuedRemainingTime();// 0x152ee84
	function BroadcastFatalDamageToClient();// 0x152e660
	function BroadcastClientsSpawnExplosionEffect();// 0x152e3a0
	function BPGetIsAndroidSimulator();// 0x152e378
	function BP_OceanSideDetected();// 0x1ddc250
	function BluePrintSetViewTarget();// 0x152e300
	function BindVoiceCheckFunction();// 0x152e2ec
	function BeginTouchScreen();// 0x152e230
	function BackToGameDataRefresh();// 0x152e21c
	function AutoSelectViewTarget();// 0x152e1f4
	function AutoSelectTeammateToView();// 0x152e1e0
	function AddTouchMoveFinger();// 0x152e0d4
	function AddItemAttachList();// 0x152e05c
	function AddItem();// 0x152dfa0
	function AddBossBornPoint();// 0x152dee4
	function AddAvatarItem();// 0x152dd9c
	function ActiveTaskTrigger();// 0x152dcd8
	function ActiveCurCamera();// 0x152dc58
	function ActivateTouchInterface();// 0x152dbd8

--------------------------------
Class: UAEPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x568 , Size: 8]
	FString PlayerName;//[Offset: 0x570 , Size: 12]
	uint32 PlayerKey;//[Offset: 0x57c , Size: 4]
	int TeamID;//[Offset: 0x594 , Size: 4]
	Vector CharacterLocation;//[Offset: 0x598 , Size: 12]
	int RoomMode;//[Offset: 0x5a4 , Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x5a8 , Size: 20]
	int planeAvatarId;//[Offset: 0x5bc , Size: 4]
	int PlayerStartID;//[Offset: 0x5c0 , Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4 , Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x5c8 , Size: 48]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610 , Size: 1]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x614 , Size: 36]
	GameModePlayerUpassInfo[] InitialUpassInfoList;//[Offset: 0x638 , Size: 12]
	PlayerOBInfo[] PlayerOBInfoList;//[Offset: 0x644 , Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x650 , Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x654 , Size: 1]
	FString Nation;//[Offset: 0x658 , Size: 12]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664 , Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x665 , Size: 1]
	GameModePlayerItem[] InitialItemList;//[Offset: 0x668 , Size: 12]
	GameModePlayerRolewearInfo[] InitialAllWear;//[Offset: 0x674 , Size: 12]
	int RolewearIndex;//[Offset: 0x680 , Size: 4]
	int VehicleSkinInReady;//[Offset: 0x684 , Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688 , Size: 1]
	GameModePlayerItem[] InitialWeaponAvatarList;//[Offset: 0x68c , Size: 12]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x698 , Size: 24]
	GameModePlayerKnapsackExtInfo[] InitialKnapsackExtInfo;//[Offset: 0x6b0 , Size: 12]
	int[] InitialCharSkillList;//[Offset: 0x6bc , Size: 12]
	GameModePlayerItem[] InitialVehicleAvatarList;//[Offset: 0x6c8 , Size: 12]
	VehicleAvatarData[] InitialVehicleAdvanceAvatarList;//[Offset: 0x6d4 , Size: 12]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x6e0 , Size: 4]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x6e4 , Size: 12]
	<int,int> WeaponAvatarItemList;//[Offset: 0x6f0 , Size: 60]
	GameModeWeaponAvatarData[] WeaponAvatarDataList;//[Offset: 0x72c , Size: 12]
	<int,int> VehicleAvatarList;//[Offset: 0x738 , Size: 60]
	<int,VehicleAvatarData> VehicleAdvanceAvatarList;//[Offset: 0x774 , Size: 60]
	GameModePlayerExpressionItem[] InitialExpressionItemList;//[Offset: 0x7b0 , Size: 12]
	GameModePlayerTaskData[] InitialTaskDataList;//[Offset: 0x7bc , Size: 12]
	SpecialPickItem[] InitialSpecialPickItemList;//[Offset: 0x7c8 , Size: 12]
	int AnchorPlatResID;//[Offset: 0x7d4 , Size: 4]
	int AnchorPlatColorID;//[Offset: 0x7d8 , Size: 4]
	int64 LastGameResultTime;//[Offset: 0x7f0 , Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f8 , Size: 1]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f9 , Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fa , Size: 1]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fb , Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7fc , Size: 1]
	uint32 WatchPlayerKey;//[Offset: 0x800 , Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x804 , Size: 1]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x805 , Size: 1]
	FString[] FriendObservers;//[Offset: 0x808 , Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x814 , Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820 , Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0x824 , Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830 , Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0x840 , Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0x84c , Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0x858 , Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0x864 , Size: 12]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0x870 , Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0x87c , Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0x888 , Size: 12]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0x894 , Size: 12]
	int[] BuffEffectDisplayIDArray;//[Offset: 0x8b0 , Size: 12]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc , Size: 1]
	float NotifyTimeOut;//[Offset: 0x8c0 , Size: 4]
	FString NeedLoadLevelName;//[Offset: 0x8c4 , Size: 12]
	int AntiDataCD;//[Offset: 0x8e0 , Size: 4]
	function TestRespawn();// 0x139c4bc
	function TestLogout();// 0x139c4bc
	function TestCastUIMsgWithPara();// 0x1940c8c
	function SetUsedSimulationCVar();// 0x1940c0c
	function SetPanels();// 0x1940b38
	function ServerTestLogout();// 0x1940adc
	function ServerSetVoiceId();// 0x1940a28
	function ServerKickSelf();// 0x19409cc
	function ServerGotoSpectating();// 0x1940918
	function ServerExitGame();// 0x19408bc
	function ServerAcknowledgeReconnection();// 0x1940808
	function Respawn();// 0x19407ec
	function ResetUsedSimulationCVar();// 0x19407d8
	function ReleaseInGameUI();// 0x19407bc
	function PrintStatistics();// 0x139c4bc
	function PlayerStartIDReceived();// 0x19407a8
	function OnRep_WeaponAvatarDataList();// 0x15362b0
	function OnRep_WatchPlayerKey();// 0x194078c
	function OnRep_UsedSimulation();// 0x1536294
	function OnRep_PlayerOBInfoList();// 0x1940778
	function OnRep_LastGameResultTime();// 0x194075c
	function OnRep_IsSpectatingEnemy();// 0x1940740
	function OnRep_IsSpectating();// 0x1940724
	function OnRep_IsObserver();// 0x1940708
	function OnRep_InitialEquipmentAvatar();// 0x15361d8
	function OnRep_FriendObservers();// 0x19406ec
	function OnRep_bRoomOwner();// 0x19406d0
	function NotifyEnterBattle();// 0x19406bc
	function LuaDoString();// 0x19405f8
	function KickSelf();// 0x139c4bc
	function IsSpectator();// 0x19405d0
	function IsRoomMode();// 0x19405ac
	function IsPureSpectator();// 0x1940584
	function IsObserver();// 0x194055c
	function IsInSpectatingEnemy();// 0x1940534
	function IsInSpectating();// 0x194050c
	function IsFriendOrEnemySpectator();// 0x19404e4
	function IsFriendObserver();// 0x19404bc
	function IsDemoRecSpectator();// 0x1940494
	function IsDemoPlaySpectator();// 0x194046c
	function InitWithPlayerParams();// 0x19403c0
	function InitWeaponAvatarItems();// 0x19403a4
	function InitVehicleAvatarList();// 0x1940388
	function InitVehicleAdvanceAvatarList();// 0x194036c
	function InitIngameUI();// 0x1940350
	function GotoSpectating();// 0x1533d6c
	function GetWeaponAvatarItemId();// 0x19402d0
	function GetCurrentOBPlayerKey();// 0x19402a0
	function GetCurrentOBPlayerInfoIndex();// 0x1940278
	function ForceNetReady();// 0x1940264
	function ExitGame();// 0x1940250
	function ExhaustCPU();// 0x194023c
	function ExecDSCommand();// 0x1532174
	function ExcuteIntRecord();// 0x19400a0
	function ExcuteIntCounterRecord();// 0x193ff04
	function EnableInGameUI();// 0x193fef0
	function DumpUAENetActors();// 0x193fedc
	function DumpRegions();// 0x193fec8
	function DumpNetActors();// 0x139c4bc
	function DumpCharacters();// 0x193feb4
	function DumpAllUI();// 0x139c4bc
	function DumpAllObjects();// 0x139c4bc
	function DumpAllActors();// 0x139c4bc
	function DoCrash();// 0x139c4bc
	function DisableInGameUI();// 0x193fea0
	function ClientShowTeammateEscapeNotice();// 0x193fe84
	function ClientRPC_CastUIMsg();// 0x193fd3c
	function ClientInitPlayerOBInfoButton();// 0x193fd20
	function ClientBroadcastRespawnComplete();// 0x193fd04
	function ClientBroadcastReconnectionSuccessful();// 0x14dfa08
	function ClientAcknowledgeReconnection();// 0x193fc84
	function CheckPlayerOBInfoButtonInit();// 0x193fc68
	function CheckAcknowledgedPawn();// 0x193fbe0
	function CastUIMsg();// 0x193fa98
	function CallLuaTableFunction();// 0x193f950
	function CallLuaGlobalFunction();// 0x193f88c

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc , Size: 12]
	int PlayerGender;//[Offset: 0x18 , Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	int[] EquipedAvatarList;//[Offset: 0x20 , Size: 12]
	int[] EquipedWeaponList;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0 , Size: 12]
	FString CauserNation;//[Offset: 0xc , Size: 12]
	FString VictimName;//[Offset: 0x18 , Size: 12]
	FString VictimNation;//[Offset: 0x24 , Size: 12]
	int DamageType;//[Offset: 0x30 , Size: 4]
	int AdditionalParam;//[Offset: 0x34 , Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x38 , Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	int ResultHealthStatus;//[Offset: 0x40 , Size: 4]
	byte RecordRelationShip;//[Offset: 0x44 , Size: 1]
	int PreviousHealthStatus;//[Offset: 0x48 , Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x4c , Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x50 , Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x54 , Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x58 , Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x5c , Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x60 , Size: 4]
	FString CauserPicURL;//[Offset: 0x64 , Size: 12]
	FString VictimPicURL;//[Offset: 0x70 , Size: 12]
	FString RealKillerName;//[Offset: 0x7c , Size: 12]
	int RealKillNum;//[Offset: 0x88 , Size: 4]
	byte CauserType;//[Offset: 0x8c , Size: 1]
	byte VictimType;//[Offset: 0x8d , Size: 1]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0 , Size: 32]
	SensibilityMode FireMode;//[Offset: 0x20 , Size: 32]
	SensibilityMode MotionMode;//[Offset: 0x40 , Size: 32]
	float VehicleEye;//[Offset: 0x60 , Size: 4]
	float ParachuteEye;//[Offset: 0x64 , Size: 4]
	float FPPEye;//[Offset: 0x68 , Size: 4]
	int SideMirrorModeC;//[Offset: 0x6c , Size: 4]
	<int,SightMaterialConfig> MaterialConfigs;//[Offset: 0x70 , Size: 60]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0 , Size: 4]
	float Sight1X;//[Offset: 0x4 , Size: 4]
	float Sight2X;//[Offset: 0x8 , Size: 4]
	float Sight3X;//[Offset: 0xc , Size: 4]
	float Sight4X;//[Offset: 0x10 , Size: 4]
	float Sight6X;//[Offset: 0x14 , Size: 4]
	float Sight8X;//[Offset: 0x18 , Size: 4]
	float FPPNoAim;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: SightMaterialConfig
	int Color;//[Offset: 0x0 , Size: 4]
	int Type;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0 , Size: 1]
	FString AttackActionName;//[Offset: 0x4 , Size: 12]
	FString AttackName;//[Offset: 0x10 , Size: 12]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	int KillNum;//[Offset: 0x20 , Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	FString FullMsg;//[Offset: 0x28 , Size: 12]
	int victimAnchorPlatformResID;//[Offset: 0x34 , Size: 4]
	FString VictimPlayerName;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0 , Size: 12]
	int WeatherID;//[Offset: 0xc , Size: 4]
	float WeatherTime;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0 , Size: 12]
	FString LocalAddr;//[Offset: 0xc , Size: 12]
	float AvgPing;//[Offset: 0x18 , Size: 4]
	float MaxPing;//[Offset: 0x1c , Size: 4]
	float HighPingPercent;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PlayerOBInfo
	bool IsEnableOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	uint64 UID;//[Offset: 0x8 , Size: 8]
	int ZoneID;//[Offset: 0x10 , Size: 4]
	uint32 PlayerKey;//[Offset: 0x14 , Size: 4]
	int BattleMode;//[Offset: 0x18 , Size: 4]
	bool ValidBattleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	int GameCount;//[Offset: 0x20 , Size: 4]
	float KDNum;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: GameModePlayerRolewearInfo
	GameModePlayerItem[] RolewearInfo;//[Offset: 0x0 , Size: 12]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]

--------------------------------
Class: GameModePlayerKnapsackExtInfo
	GameModePlayerKnapsackSingleInfo KnapsackExtInfo;//[Offset: 0x0 , Size: 40]
	bool IsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	int WearIndex;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: GameModePlayerKnapsackSingleInfo
	int Parachute;//[Offset: 0x0 , Size: 4]
	int BagSkin;//[Offset: 0x4 , Size: 4]
	int HelmetSkin;//[Offset: 0x8 , Size: 4]
	int FlySkin;//[Offset: 0xc , Size: 4]
	GameModePlayerItem[] WeaponList;//[Offset: 0x10 , Size: 12]
	GameModePlayerItem[] VehicleSkinList;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: VehicleAvatarData
	int VehicleSkinID;//[Offset: 0x0 , Size: 4]
	int[] VehicleStyleIDList;//[Offset: 0x4 , Size: 12]
	VehicleAvatarStyle[] VehicleAvatarStyle;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: VehicleAvatarStyle
	int ModelID;//[Offset: 0x0 , Size: 4]
	int ColorID;//[Offset: 0x4 , Size: 4]
	int PatternID;//[Offset: 0x8 , Size: 4]
	int ParticleID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatar;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0 , Size: 4]
	int HelmetAvatar;//[Offset: 0x4 , Size: 4]
	int ArmorAvatar;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: GameModeWeaponAvatarData
	int ParentID;//[Offset: 0x0 , Size: 4]
	int AvatarSpecificID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: GameModePlayerExpressionItem.GameModePlayerItem

--------------------------------
Class: SpecialPickItem
	int item_id;//[Offset: 0x0 , Size: 4]
	int cur_count;//[Offset: 0x4 , Size: 4]
	int total_count;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xbc , Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0 , Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1 , Size: 1]
	float GuideInterval;//[Offset: 0xc4 , Size: 4]
	int MaxGuideLevel;//[Offset: 0xc8 , Size: 4]
	NewbieGuideItem[] items;//[Offset: 0xcc , Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0xd8 , Size: 4]
	int[] FinishedTips;//[Offset: 0xdc , Size: 12]
	int[] FinishedCounts;//[Offset: 0xe8 , Size: 12]
	function SendNewbieMsg();// 0x1463848
	function InitComponent();// 0x1463504

--------------------------------
Class: NewbieGuideItem
	int ID;//[Offset: 0x0 , Size: 4]
	FString Name;//[Offset: 0x4 , Size: 12]
	byte Type;//[Offset: 0x10 , Size: 1]
	int MaxGuideCounts;//[Offset: 0x14 , Size: 4]
	int MaxGuideLevel;//[Offset: 0x18 , Size: 4]
	byte[] SubjectPlayerTypes;//[Offset: 0x1c , Size: 12]
	int Priority;//[Offset: 0x28 , Size: 4]
	int MuteFlag;//[Offset: 0x2c , Size: 4]
	int PreconditionID;//[Offset: 0x30 , Size: 4]
	float PreconditionTipTimeGap;//[Offset: 0x34 , Size: 4]
	STNewbieGuideConditionBase[] Conditions;//[Offset: 0x38 , Size: 12]
	STNewbieGuideSuccessListenerBase* QuickFinishedListener;//[Offset: 0x44 , Size: 4]
	float Duration;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: STNewbieGuideConditionBase.Object
	Controller* OwnerController;//[Offset: 0x1c , Size: 8]
	function ReconnectRecover();// 0x14031c8
	function IsOK();// 0x140320c

--------------------------------
Class: STNewbieGuideSuccessListenerBase.Object
	Controller* OwnerController;//[Offset: 0x1c , Size: 8]
	float DelayTime;//[Offset: 0x24 , Size: 4]
	function ReconnectRecover();// 0x14031c8
	function GuideFinishedByPlayer();// 0x140320c
	function EnableListener();// 0x1420e64
	function DisableListener();// 0x141fa30

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	function RPC_SrvSyncTimeLine_UnReliable();// 0x1576d58
	function RPC_SrvSyncTimeLine();// 0x1576c44
	function RPC_GetClientTimeRespond();// 0x1576a98
	function RPC_GetClientTimeRequest();// 0x15769e4
	function RPC_ClientSyncTimeLine_UnReliable();// 0x15768e8
	function RPC_ClientSyncTimeLine();// 0x1576828
	function ReportDebugInfo();// 0x1576774
	function OnServerAboutToReconnect();// 0x1576760
	function GetClientTimeInterval();// 0x157674c
	function CheckTimeLine();// 0x1576738

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	float TimeStartDelay;//[Offset: 0xc0 , Size: 4]
	float SyncInterval;//[Offset: 0xc4 , Size: 4]
	function RPC_SrvSyncTimeLine();// 0x15788a0
	function RPC_ClientSyncTimeLine();// 0x1395694
	function OnTimeInspectorColdMove_Vehicle();// 0x157888c
	function OnTimeInspectorColdMove_Own();// 0x1578878
	function OnServerAboutToReconnect();// 0x1578864
	function CheckTimeLine();// 0x1578850

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch VsHitDetail;//[Offset: 0x130 , Size: 12]
	VerifySwitch VsFlyDist2D;//[Offset: 0x13c , Size: 12]
	VerifySwitch VsFlyDist3D;//[Offset: 0x148 , Size: 12]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x154 , Size: 12]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x160 , Size: 12]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x16c , Size: 12]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x178 , Size: 12]
	VerifySwitch VsNoHitDetail;//[Offset: 0x184 , Size: 12]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x190 , Size: 12]
	VerifySwitch VsSilentProtect01;//[Offset: 0x19c , Size: 12]
	VerifySwitch VsSilentProtect02;//[Offset: 0x1a8 , Size: 12]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x1b4 , Size: 12]
	VerifySwitch VsLocusCheckZ;//[Offset: 0x1c0 , Size: 12]
	VerifySwitch VsLocusCheckHorizonSingle;//[Offset: 0x1cc , Size: 12]
	VerifySwitch VsLocusCheckHorizonBigBox;//[Offset: 0x1d8 , Size: 12]
	VerifySwitch VsMuzzleDataWrong;//[Offset: 0x1e4 , Size: 12]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x1f0 , Size: 12]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x1fc , Size: 12]
	VerifySwitch VsMuzzleRangeForward;//[Offset: 0x208 , Size: 12]
	VerifySwitch VsMuzzleRangeRight;//[Offset: 0x214 , Size: 12]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x220 , Size: 12]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x22c , Size: 12]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x238 , Size: 12]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x244 , Size: 12]
	VerifySwitch VsBoneScale;//[Offset: 0x250 , Size: 12]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x25c , Size: 12]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x268 , Size: 12]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x274 , Size: 12]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x280 , Size: 12]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x28c , Size: 12]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x298 , Size: 12]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x2a4 , Size: 12]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x2b0 , Size: 12]
	int MaxShootPointPassWall;//[Offset: 0x2bc , Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x2c0 , Size: 4]
	int MaxLocusFailTime;//[Offset: 0x2c4 , Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x2c8 , Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x2cc , Size: 4]
	float MaxSkeletonLength;//[Offset: 0x2d0 , Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x2d4 , Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x2d8 , Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x2dc , Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x2e0 , Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x2e4 , Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x2f0 , Size: 12]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x2fc , Size: 12]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x308 , Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x314 , Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x320 , Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x32c , Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x338 , Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x344 , Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x350 , Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x35c , Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x368 , Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x374 , Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x380 , Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x38c , Size: 12]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x398 , Size: 12]
	int MaxMergedStrategy1;//[Offset: 0x3a4 , Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x3a8 , Size: 4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x3ac , Size: 12]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x3b8 , Size: 12]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x3c4 , Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x3d0 , Size: 12]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x3dc , Size: 12]
	float MaxFuelConsume;//[Offset: 0x3e8 , Size: 4]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x46c , Size: 12]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x478 , Size: 12]
	VerifySwitch VsClientBulletDir;//[Offset: 0x484 , Size: 12]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x490 , Size: 12]
	VerifySwitch VsClientDownShoot;//[Offset: 0x49c , Size: 12]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x4a8 , Size: 12]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x4b4 , Size: 12]
	VerifySwitch VsMuzzleHeightInVaild;//[Offset: 0x4c0 , Size: 12]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x4cc , Size: 12]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x4d8 , Size: 12]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x4e4 , Size: 12]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x4f0 , Size: 12]
	VerifySwitch VsImpactActorPosOffsetBig2;//[Offset: 0x4fc , Size: 12]
	VerifySwitch VsImpactActorPosOffsetSmall;//[Offset: 0x508 , Size: 12]
	VerifySwitch VsImpactActorPosOffsetChangeSmall;//[Offset: 0x514 , Size: 12]
	VerifySwitch VsFirstImpactActorPosOffsetChangeSmall;//[Offset: 0x520 , Size: 12]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x52c , Size: 12]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x538 , Size: 12]
	VerifySwitch VsImpactBulletPosOffsetSmall;//[Offset: 0x544 , Size: 12]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x550 , Size: 12]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x55c , Size: 12]
	function OnRecoverOnServer();// 0x147872c
	function OnPreReconnectOnServer();// 0x1478718

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0 , Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14 , Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18 , Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c , Size: 4]
	float CameraSwitchTime;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0 , Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4 , Size: 12]
	float SpringArmLength;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0 , Size: 36]

--------------------------------
Class: CameraViewPitchLimitData
	float ViewPitchMin;//[Offset: 0x0 , Size: 4]
	float ViewPitchMax;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0 , Size: 4]
	uint32 EventID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0 , Size: 8]
	FName LastUseNoneMeleeLogicSlot;//[Offset: 0x8 , Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x10 , Size: 8]
	FName[] GrenadeLogicSlotList;//[Offset: 0x18 , Size: 12]
	ItemDefineID[] GrenadeDefineIDList;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: TeamMateStateInfo
	STExtraPlayerState* PlayerState;//[Offset: 0x0 , Size: 4]
	Vector Location;//[Offset: 0x4 , Size: 12]
	Rotator Rotation;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0x8d4 , Size: 4]
	enum LiveState;//[Offset: 0x8d8 , Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0x8dc , Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x8e4 , Size: 4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0x8e8 , Size: 4]
	float PlayerHealth;//[Offset: 0x8ec , Size: 4]
	float PlayerHealthMax;//[Offset: 0x8f0 , Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0x8f4 , Size: 24]
	Vector PlayerDeadLocation;//[Offset: 0x90c , Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0x918 , Size: 12]
	Vector MapMark;//[Offset: 0x924 , Size: 12]
	int AirDropBoxFirstPickUpNum;//[Offset: 0x948 , Size: 4]
	STExtraPlayerState[] TeamMatePlayerStateList;//[Offset: 0x94c , Size: 12]
	int TeamMatePlayerStateIndex;//[Offset: 0x958 , Size: 4]
	int PlayerLayerID;//[Offset: 0x95c , Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0x960 , Size: 16]
	int Breath;//[Offset: 0x970 , Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0x974 , Size: 12]
	float EnegyBuffStage1;//[Offset: 0x980 , Size: 4]
	float EnegyBuffStage2;//[Offset: 0x984 , Size: 4]
	float EnegyBuffStage3;//[Offset: 0x988 , Size: 4]
	float EnegyBuffStage4;//[Offset: 0x98c , Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0x990 , Size: 4]
	float CurEnegyBuff;//[Offset: 0x994 , Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0x998 , Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0x99c , Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0x9a0 , Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0x9a4 , Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0x9a8 , Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0x9ac , Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0x9b0 , Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0x9b4 , Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0x9b8 , Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0x9c4 , Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d1 , Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9dc , Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9dd , Size: 1]
	int[] TeamMatesExitState;//[Offset: 0x9e0 , Size: 12]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ec , Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ed , Size: 1]
	int PlayersCountOnPlane;//[Offset: 0x9f8 , Size: 4]
	GameModePlayerAliasShowInfo[] playerAliasShowInfoList;//[Offset: 0x9fc , Size: 12]
	MonsterTreasureBoxData[] MonsterTreasureBoxDatas;//[Offset: 0xa08 , Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0xa14 , Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0xa18 , Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0xa1c , Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20 , Size: 1]
	int MaxDecalCount;//[Offset: 0xa3c , Size: 4]
	IdeaDecalActor[] DecalActorList;//[Offset: 0xa40 , Size: 12]
	PlayerStaticInfoInOB[] KickListTotalPlayers;//[Offset: 0xaa0 , Size: 12]
	float LeanOutL_AimAngle;//[Offset: 0xaac , Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xab0 , Size: 4]
	HitEnemyData HitedEnemyData;//[Offset: 0xab4 , Size: 20]
	TeammateConveyStatus TeammateConveyStatus;//[Offset: 0xacc , Size: 40]
	float TeammateConveyStatusReceiveRange;//[Offset: 0xaf4 , Size: 4]
	bool bIsInSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf8 , Size: 1]
	int RemainingRevivalTime;//[Offset: 0xafc , Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00 , Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01 , Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb02 , Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb03 , Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0xb08 , Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0xb10 , Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0xb1c , Size: 12]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0xb28 , Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0xb34 , Size: 12]
	MarkSyncData[] LocalMarkDispatchData;//[Offset: 0xb40 , Size: 12]
	function SetPlayerGiveUp();// 0x1551c18
	function SetForceSyncTeammateData();// 0x1551b9c
	function RespondToPawnRescueingStatusChange();// 0x15519f8
	function RespondToPawnCanRescueOtherStatusChange();// 0x15518f0
	function RespondToPawnBreathChange();// 0x15517f0
	function RefreshRevivalState();// 0x15517dc
	function RefreshFollowMark();// 0x15517c8
	function PlayersCountOnMyPlane();// 0x15517a0
	function OnRevivalStateChangeDelegate__DelegateSignature();// 0x1ddc250
	function OnRevivalRemainingTimeChangeDelegate__DelegateSignature();// 0x1ddc250
	function OnRep_VisualFieldInfo();// 0x155178c
	function OnRep_UpdateKillMonsterNum();// 0x1551770
	function OnRep_TeamMatePlayerStateList();// 0x155175c
	function OnRep_TeamMatePlayerStateIndex();// 0x1551748
	function OnRep_RemainingRevivalTime();// 0x1551734
	function OnRep_RankNotify();// 0x1551720
	function OnRep_PlayersCountOnPlane();// 0x155170c
	function OnRep_PlayerReconnectEvent();// 0x15516f8
	function OnRep_PlayerName();// 0x13ef5a8
	function OnRep_PlayerLostConnectionEvent();// 0x15516e4
	function OnRep_PlayerLiveState();// 0x15516d0
	function OnRep_PlayerKillsChange();// 0x15516b4
	function OnRep_PlayerIsFollowing();// 0x15516a0
	function OnRep_PlayerGiveUp();// 0x155168c
	function OnRep_PlayerGameOver();// 0x1551678
	function OnRep_PlayerExitGameEvent();// 0x1551664
	function OnRep_PlayerAliasShowInfoList();// 0x1551650
	function OnRep_MarkSyncData();// 0x155163c
	function OnRep_MapMarkNotify();// 0x1551628
	function OnRep_IsIDCardCaptured();// 0x1551614
	function OnRep_HPChanged();// 0x139c4bc
	function OnRep_ChangeRevivalState();// 0x1551600
	function OnRep_ChangeInRevivingState();// 0x15515ec
	function OnRep_BreathChanged();// 0x15515d8
	function OnRep_BPS();// 0x15515c4
	function OnRep_bHitted();// 0x15515b0
	function OnPlayerQuickChat();// 0x155159c
	function OnPlayerKillsChangeDelegate__DelegateSignature();// 0x1ddc250
	function OnMemberVoice();// 0x1551524
	function OnLocalCharacterHPChangeDelegate__DelegateSignature();// 0x1ddc250
	function OnClientTakeDamage();// 0x15513b8
	function OnCharacterStartFire();// 0x1551340
	function IsSinglePlayer();// 0x1551318
	function IsAlive();// 0x15512f0
	function GetUserIDByMemberID();// 0x1551268
	function GetTeamMatePlayerStateList();// 0x155114c
	function GetTeamMatePlayerStateFromPlayerKey();// 0x15510cc
	function GetTeamMatePlayerStateByPlayerKey();// 0x155104c
	function GetTeamMateIndex();// 0x1550fcc
	function GetTeammateByName();// 0x1550f08
	function GetPlayerTeamIndex();// 0x1550ee0
	function GetPlayerMaxHealth();// 0x1550eb8
	function GetPlayerHealth();// 0x1550e90
	function GetPlayerCharacter();// 0x1550e68
	function GetPlayerAliasInfoList();// 0x1550dbc
	function GetMaxEnegyBuff();// 0x1550d6c
	function GetMarkDataByInstanceID();// 0x1550c14
	function GetCampMatePlayerList();// 0x1550af8
	function GetBreathPercentage();// 0x1550ad0
	function GetAllPlayerStates();// 0x1550a04
	function GetAllPlayerStateList();// 0x15508e0
	function GetAllMarkSyncData();// 0x1550834
	function GetAlertDataByIndex();// 0x1550660
	function ForceNotifyAlertUpdate();// 0x155064c
	function ClientDisplayGameTipWithMsgID();// 0x1550488
	function ChangeFadeMapMarkDist();// 0x155040c
	function CanRevivalTeammate();// 0x15503e4
	function CanBeRevival();// 0x15503bc
	function CalculateEnegyStage();// 0x1550394
	function AddInDamageAmount();// 0x15502d0
	function AddEnegySafety();// 0x1550258
	function AddDamageAmount();// 0x15500d8

--------------------------------
Class: UAEPlayerState.PlayerState.Info.Actor.Object
	float surviveTime;//[Offset: 0x328 , Size: 4]
	float Pronetime;//[Offset: 0x32c , Size: 4]
	float marchDistance;//[Offset: 0x338 , Size: 4]
	float travelDistance;//[Offset: 0x33c , Size: 4]
	float DriveDistance;//[Offset: 0x340 , Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x344 , Size: 4]
	int destroyVehicleNum;//[Offset: 0x348 , Size: 4]
	int rescueTimes;//[Offset: 0x34c , Size: 4]
	int GVMemberID;//[Offset: 0x350 , Size: 4]
	FName PlayerType;//[Offset: 0x358 , Size: 8]
	uint32 PlayerKey;//[Offset: 0x360 , Size: 4]
	FString PlayerUID;//[Offset: 0x364 , Size: 12]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370 , Size: 1]
	FString iconUrl;//[Offset: 0x374 , Size: 12]
	bool gender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380 , Size: 1]
	int PlayerLevel;//[Offset: 0x384 , Size: 4]
	int SegmentLevel;//[Offset: 0x388 , Size: 4]
	int AvatarBoxId;//[Offset: 0x38c , Size: 4]
	int CampID;//[Offset: 0x390 , Size: 4]
	uint64 UID;//[Offset: 0x398 , Size: 8]
	FString Nation;//[Offset: 0x3a0 , Size: 12]
	int TeamID;//[Offset: 0x3ac , Size: 4]
	int PlayerBornPointID;//[Offset: 0x3b0 , Size: 4]
	int Kills;//[Offset: 0x3b4 , Size: 4]
	int Knockouts;//[Offset: 0x3b8 , Size: 4]
	int Assists;//[Offset: 0x3c4 , Size: 4]
	byte PlatformGender;//[Offset: 0x3c8 , Size: 1]
	int MatchLabel;//[Offset: 0x3cc , Size: 4]
	uint32 Killer;//[Offset: 0x3d0 , Size: 4]
	FString KillerName;//[Offset: 0x3d4 , Size: 12]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x3e0 , Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x3e8 , Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x3ec , Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x3f0 , Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x3f4 , Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x3f8 , Size: 4]
	int HeadShotNum;//[Offset: 0x3fc , Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x400 , Size: 4]
	int KillNumByGrende;//[Offset: 0x404 , Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x408 , Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x40c , Size: 4]
	int MaxKillDistance;//[Offset: 0x410 , Size: 4]
	int HealTimes;//[Offset: 0x414 , Size: 4]
	float DamageAmount;//[Offset: 0x418 , Size: 4]
	float HealAmount;//[Offset: 0x41c , Size: 4]
	FString[] KillFlow;//[Offset: 0x420 , Size: 12]
	FString[] KnockOutFlow;//[Offset: 0x42c , Size: 12]
	KnockOutData[] KnockOutList;//[Offset: 0x438 , Size: 12]
	float InDamageAmount;//[Offset: 0x444 , Size: 4]
	TLog_PickUpItemFlow[] TLog_PickUpItemFlowData;//[Offset: 0x454 , Size: 12]
	<int,TLog_BornLandGrenadeData> TLog_BornLandGrenadeData;//[Offset: 0x460 , Size: 60]
	<int,bool> TLog_PickUpItemIdMap;//[Offset: 0x49c , Size: 60]
	UseItemFlow[] UseItemFlow;//[Offset: 0x4d8 , Size: 12]
	TLog_PropEquipUnequipFlow[] TLog_PropEquipUnequipFlowData;//[Offset: 0x4e4 , Size: 12]
	<int,int> TLog_BulletCount;//[Offset: 0x4f0 , Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x52c , Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534 , Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x538 , Size: 4]
	VehicleDriveDisData[] VehicleDriveDisDataArray;//[Offset: 0x53c , Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x548 , Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x54c , Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x550 , Size: 4]
	Vector LandLocation;//[Offset: 0x554 , Size: 12]
	Vector ParachuteLocation;//[Offset: 0x560 , Size: 12]
	int LandTime;//[Offset: 0x56c , Size: 4]
	Vector DeadLocation;//[Offset: 0x570 , Size: 12]
	FString DeadDamangeType;//[Offset: 0x57c , Size: 12]
	int PveDeadAttacker;//[Offset: 0x588 , Size: 4]
	int PveStageId;//[Offset: 0x58c , Size: 4]
	FString DeadTimeStr;//[Offset: 0x590 , Size: 12]
	int NearDeathDamageType;//[Offset: 0x59c , Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x5a0 , Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a4 , Size: 1]
	EquipmentData EquipmentData;//[Offset: 0x5b0 , Size: 80]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608 , Size: 1]
	int GamePlayingTime;//[Offset: 0x60c , Size: 4]
	int ObserverTime;//[Offset: 0x610 , Size: 4]
	int TouchDownAreaID;//[Offset: 0x614 , Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x618 , Size: 4]
	int[] TouchDownAreaList;//[Offset: 0x61c , Size: 12]
	GameModePlayerTaskData[] CompletedTaskList;//[Offset: 0x628 , Size: 12]
	ReportCollection[] SpecialCollectionList;//[Offset: 0x634 , Size: 12]
	WeaponDamageRecord[] WeaponDamageRecordList;//[Offset: 0x640 , Size: 12]
	int[] SecretAreaIDList;//[Offset: 0x64c , Size: 12]
	SpecialPickItemState[] CollectItemRecord;//[Offset: 0x658 , Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x664 , Size: 4]
	float InHelicopterTime;//[Offset: 0x668 , Size: 4]
	int RevivalNum;//[Offset: 0x66c , Size: 4]
	int BeRevivedNum;//[Offset: 0x670 , Size: 4]
	int KillNumInVehicle;//[Offset: 0x674 , Size: 4]
	float TotalSprintDistance;//[Offset: 0x678 , Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x67c , Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x680 , Size: 4]
	int ProneTimes;//[Offset: 0x684 , Size: 4]
	int CrouchTimes;//[Offset: 0x688 , Size: 4]
	int JumpTimes;//[Offset: 0x68c , Size: 4]
	int KillMonsterNum;//[Offset: 0x690 , Size: 4]
	<int,int> MonsterID2KillNum;//[Offset: 0x694 , Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x6d0 , Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x6d4 , Size: 4]
	<int,float> DamageAmountToMonsters;//[Offset: 0x6d8 , Size: 60]
	<int,float> DamageAmountFromMonsters;//[Offset: 0x714 , Size: 60]
	int MonsterHeadShotKilledTimes;//[Offset: 0x750 , Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x754 , Size: 4]
	int LightCandleNum;//[Offset: 0x758 , Size: 4]
	<int,int> ActivityButtonCount;//[Offset: 0x75c , Size: 60]
	float BattleStateTime;//[Offset: 0x798 , Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c , Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0x7a0 , Size: 4]
	int FistKillingCount;//[Offset: 0x7a4 , Size: 4]
	<uint32,uint32> VehicleUsedMap;//[Offset: 0x7a8 , Size: 60]
	FString[] DestroyVehicleFlow;//[Offset: 0x7e4 , Size: 12]
	int UseHelicoperNum;//[Offset: 0x7f0 , Size: 4]
	float UseHelicoperDistance;//[Offset: 0x7f4 , Size: 4]
	byte CharmRankIndex;//[Offset: 0x7f8 , Size: 1]
	<uint32> UseHelicoperRecord;//[Offset: 0x7fc , Size: 60]
	int OpenedAirDropBoxNum;//[Offset: 0x83c , Size: 4]
	PlayEmoteData[] FPlayEmoteDataArray;//[Offset: 0x840 , Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x84c , Size: 32]
	int MemberIdInVoiceRoom;//[Offset: 0x86c , Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870 , Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x874 , Size: 36]
	int UpassShow;//[Offset: 0x898 , Size: 4]
	int upassKeepBuy;//[Offset: 0x89c , Size: 4]
	function SetGVMemberIDServerCall();// 0x1943260
	function SetGVMemberID();// 0x19431e8
	function ReportTaskExtInfo();// 0x1943048
	function ReportTaskData();// 0x1942f8c
	function ReportSpecialCollection();// 0x1942ed0
	function ReportSecretAreaID();// 0x1942e58
	function ReportLandLocType();// 0x1942de0
	function ReportLandAreaList();// 0x1942d14
	function ReportLandArea();// 0x1942c9c
	function RecordUseHelicoper();// 0x1942c24
	function OnRep_UpdateKillMonsterNum();// 0x1551770
	function OnRep_UID();// 0x1942c10
	function OnRep_PlayerKillsChange();// 0x15516b4
	function OnRep_MatchLabel();// 0x139c4bc
	function OnRep_CollectItemRecord();// 0x1942bfc
	function OnRep_CampID();// 0x1942be8
	function IsSpecialPickItemCollectionCompleted();// 0x1942b68
	function IsSpecialPickItem();// 0x1942ae8
	function GetWeaponRecordData();// 0x1942a04
	function GetUserIDByMemberID();// 0x1551268
	function GetUIDString();// 0x1942944
	function GetTeammateBattleResultData();// 0x19428d8
	function GetPlayerKey();// 0x19428b0
	function GetPlayerBattleResultData();// 0x1942844
	function ForceUpdateCampCharacterList();// 0x1942828
	function ChangeCollectItemRecord();// 0x1942764

--------------------------------
Class: KnockOutData
	uint64 AttackerID;//[Offset: 0x0 , Size: 8]
	int Times;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: TLog_PickUpItemFlow
	int ItemSpesificID;//[Offset: 0x0 , Size: 4]
	int Count;//[Offset: 0x4 , Size: 4]
	Vector Location;//[Offset: 0x8 , Size: 12]
	int SourceType;//[Offset: 0x14 , Size: 4]
	int AdditionalParam;//[Offset: 0x18 , Size: 4]
	FString TimeStr;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: TLog_BornLandGrenadeData
	int PickupCount;//[Offset: 0x0 , Size: 4]
	int ThrowCount;//[Offset: 0x4 , Size: 4]
	int HitOthersCount;//[Offset: 0x8 , Size: 4]
	int HitedByOthersCount;//[Offset: 0xc , Size: 4]

--------------------------------
Class: UseItemFlow
	int ItemSpesificID;//[Offset: 0x0 , Size: 4]
	int UseCount;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: TLog_PropEquipUnequipFlow
	int ItemSpesificID;//[Offset: 0x0 , Size: 4]
	enum slotType;//[Offset: 0x4 , Size: 1]
	bool bEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	FString TimeStr;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0 , Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: VehicleDriveDisData
	uint64 DriverID;//[Offset: 0x0 , Size: 8]
	int VehicleType;//[Offset: 0x8 , Size: 4]
	float DriveDistance;//[Offset: 0xc , Size: 4]
	float DriveTime;//[Offset: 0x10 , Size: 4]
	float VehicleJumpDistanceMax;//[Offset: 0x14 , Size: 4]
	uint64[] PeopleInCar;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0 , Size: 4]
	int ArmorID;//[Offset: 0x4 , Size: 4]
	int BackPackID;//[Offset: 0x8 , Size: 4]
	int MainWeapon1ID;//[Offset: 0xc , Size: 4]
	int[] MainWeapon1AttachmentsID;//[Offset: 0x10 , Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c , Size: 4]
	int[] MainWeapon2AttachmentsID;//[Offset: 0x20 , Size: 12]
	int ViceWeaponID;//[Offset: 0x2c , Size: 4]
	int[] ViceWeaponAttachmentsID;//[Offset: 0x30 , Size: 12]
	int CloseWeaponID;//[Offset: 0x3c , Size: 4]
	int[] ThrowWeaponsID;//[Offset: 0x40 , Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c , Size: 1]

--------------------------------
Class: ReportCollection
	int item_id;//[Offset: 0x0 , Size: 4]
	int Count;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponDamageRecord
	int WeaponID;//[Offset: 0x0 , Size: 4]
	float Damage;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: SpecialPickItemState
	int item_id;//[Offset: 0x0 , Size: 4]
	bool bIsCollectionCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: PlayEmoteData
	int EmoteIndex;//[Offset: 0x0 , Size: 4]
	int AreaID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: GameModePlayerAliasInfo
	int aliasID;//[Offset: 0x0 , Size: 4]
	FString aliasTitle;//[Offset: 0x4 , Size: 12]
	FString aliasNation;//[Offset: 0x10 , Size: 12]
	int aliasRank;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0 , Size: 12]
	Rotator Rot;//[Offset: 0xc , Size: 12]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0 , Size: 4]
	VisualFieldMetaInfo[] VisualFieldMetaInfoList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: VisualFieldMetaInfo
	Vector Location;//[Offset: 0x0 , Size: 12]
	int LayerID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0 , Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4 , Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0xb10 , Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0xb14 , Size: 4]
	ParticleSystemComponent[] PSCs;//[Offset: 0xb24 , Size: 12]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0xb30 , Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0xb58 , Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0xb60 , Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0xb68 , Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0xb6c , Size: 4]
	int ValidTransformMinWheelNum;//[Offset: 0xb70 , Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0xb74 , Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0xb80 , Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0xb84 , Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0xb9c , Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0xba0 , Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0xba4 , Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0xba8 , Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0xbac , Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0xbb0 , Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0xbb4 , Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0xbb8 , Size: 4]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0xc20 , Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0xc24 , Size: 4]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0xc3c , Size: 5]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc41 , Size: 1]
	function STServerUpdateState();// 0x156c77c
	function PostLoadFPPMesh();// 0x1565d9c
	function OnWheelsLanded();// 0x156c768
	function OnRep_ReplicatedState();// 0x139c4bc
	function OnGearChanged();// 0x156c6e8
	function GetVehicleSpeed();// 0x156c6c0
	function GetRotationInputDir();// 0x14ce9e8
	function BroadcastClientVehicleWheelDestroyEffect();// 0x156c6a4

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x3a0 , Size: 4]
	enum VehicleType;//[Offset: 0x3a4 , Size: 1]
	enum VehicleShapeType;//[Offset: 0x3a5 , Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x3a8 , Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x3c0 , Size: 4]
	ParticleSystem* PS_Explosion;//[Offset: 0x3c4 , Size: 4]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x3c8 , Size: 4]
	Texture2D* VehicleIcon;//[Offset: 0x3cc , Size: 4]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0 , Size: 1]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1 , Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x3d4 , Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x3d8 , Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc , Size: 1]
	float FuelConsumptionModifierBoost;//[Offset: 0x3e0 , Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4 , Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5 , Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e6 , Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x3e8 , Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec , Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x3f0 , Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f4 , Size: 1]
	int MainMaterialIndex;//[Offset: 0x3f8 , Size: 4]
	FText VehicleDisplayName;//[Offset: 0x3fc , Size: 12]
	Vector AirDropVelocity;//[Offset: 0x408 , Size: 12]
	StaticMesh* AirdropParachuteMesh;//[Offset: 0x414 , Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x418 , Size: 8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420 , Size: 1]
	float EnterVehicleCameraBlendTime;//[Offset: 0x424 , Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x428 , Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x42c , Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430 , Size: 1]
	float StaticForceFixInterval;//[Offset: 0x434 , Size: 4]
	float voiceCheckCD;//[Offset: 0x438 , Size: 4]
	float voiceCheckShowCD;//[Offset: 0x43c , Size: 4]
	float VoiceCheckDis;//[Offset: 0x440 , Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x444 , Size: 4]
	float voiceCheckSpeed;//[Offset: 0x448 , Size: 4]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472 , Size: 1]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x473 , Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x474 , Size: 4]
	enum VehicleHealthState;//[Offset: 0x490 , Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491 , Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492 , Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x493 , Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494 , Size: 1]
	Vector BloodEffectScale;//[Offset: 0x498 , Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x4a4 , Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x4a8 , Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x4ac , Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x4b0 , Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x4b4 , Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x4b8 , Size: 4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x4bc , Size: 4]
	VehicleComponent[] VehicleComps;//[Offset: 0x4c0 , Size: 12]
	float VehicleHitThreshold;//[Offset: 0x4e4 , Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x4e8 , Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x4f8 , Size: 4]
	float VehicleEnterDistance;//[Offset: 0x50c , Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x510 , Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x514 , Size: 4]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x524 , Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x528 , Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x52c , Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x538 , Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x544 , Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x548 , Size: 4]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554 , Size: 1]
	float PeneTerrainProtectionInterval;//[Offset: 0x558 , Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x55c , Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x560 , Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590 , Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x594 , Size: 4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x598 , Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x59c , Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x5a0 , Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x5a4 , Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x5a8 , Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x5ac , Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x5b0 , Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x5b4 , Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x5b8 , Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x5bc , Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x5c0 , Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x5c4 , Size: 4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x5c8 , Size: 4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x5cc , Size: 4]
	AkAudioEvent[] SfxArr_MusicLoops;//[Offset: 0x5d0 , Size: 12]
	float EngineSfxEndDelayTime;//[Offset: 0x5dc , Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0 , Size: 1]
	float OverrideCullingSizeWithPlayer;//[Offset: 0x5e4 , Size: 4]
	float OverrideCullingSizeWithoutPlayer;//[Offset: 0x5e8 , Size: 4]
	float RPMSfxScale;//[Offset: 0x75c , Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0x760 , Size: 4]
	float PlayMusicChance;//[Offset: 0x76c , Size: 4]
	int CurMusicIndex;//[Offset: 0x770 , Size: 4]
	enum VehicleSyncTag;//[Offset: 0x781 , Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x784 , Size: 4]
	VehicleSimViewData SimulateViewData;//[Offset: 0x788 , Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0x78c , Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0x790 , Size: 4]
	delegate OnVehicleHealthStateChanged;//[Offset: 0x794 , Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a0 , Size: 1]
	float MinRideAngleDgree;//[Offset: 0x7a4 , Size: 4]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8 , Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9 , Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0x7ac , Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0x7b0 , Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0 , Size: 1]
	float StuckMinImpulse;//[Offset: 0x7d4 , Size: 4]
	float ContinuousStuckInterval;//[Offset: 0x7d8 , Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0x7dc , Size: 4]
	float StuckResovingTime;//[Offset: 0x7e0 , Size: 4]
	float ContinuousStuckTimer;//[Offset: 0x7e8 , Size: 4]
	float StuckResovingTimer;//[Offset: 0x7ec , Size: 4]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f4 , Size: 1]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840 , Size: 1]
	float RespawnWaitingTime;//[Offset: 0x844 , Size: 4]
	float RespawnTickInterval;//[Offset: 0x848 , Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c , Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8dc , Size: 1]
	class VehicleAntiCheatTask[] VACTaskSetups;//[Offset: 0x8e0 , Size: 12]
	VehicleAntiCheatTask[] VACTasks;//[Offset: 0x8ec , Size: 12]
	VehicleAntiCheatTask[] VacInstancedTasks;//[Offset: 0x8f8 , Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x934 , Size: 1]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954 , Size: 1]
	Vector SeekLockOffset;//[Offset: 0x958 , Size: 12]
	FName SeekLockSocket;//[Offset: 0x968 , Size: 8]
	float ProduceSoundInterval;//[Offset: 0x970 , Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0x978 , Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0x984 , Size: 4]
	delegate OnEnterVehicle;//[Offset: 0x988 , Size: 12]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0x99c , Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0x9a0 , Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0x9a8 , Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0x9d0 , Size: 4]
	float OverlapCameraShakeInterval;//[Offset: 0xa6c , Size: 4]
	float OverlapDamageRate;//[Offset: 0xa74 , Size: 4]
	float OverlapImpulseRate;//[Offset: 0xa78 , Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0xa7c , Size: 4]
	float MaxOverlapImpulse;//[Offset: 0xa80 , Size: 4]
	float MinOverlapSpeed;//[Offset: 0xa84 , Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xa88 , Size: 4]
	float OverlapVehicleDamageRate;//[Offset: 0xa90 , Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xa94 , Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xa9c , Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0xaac , Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xab4 , Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xab8 , Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac9 , Size: 1]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xacc , Size: 4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xad0 , Size: 4]
	enum[] DamageableGameObjectTypeList;//[Offset: 0xad4 , Size: 12]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xae0 , Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xae4 , Size: 4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae8 , Size: 1]
	float VehicleGoStraight;//[Offset: 0xaf8 , Size: 4]
	float MaxLinearVelocity;//[Offset: 0xafc , Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb00 , Size: 1]
	int TeamID;//[Offset: 0xb04 , Size: 4]
	int CampID;//[Offset: 0xb08 , Size: 4]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xb0c , Size: 4]
	function VehicleBeenDestroyedCleanInfoDisplay();// 0x156660c
	function StartAirDrop();// 0x15665f8
	function ServerSetUsingHorn();// 0x1566530
	function ServerSetIsVehicleSpringArmAutoReturn();// 0x1566468
	function ServerSetBoosting();// 0x15663a0
	function SendVehicleInAirChangedTimeToServer();// 0x1566344
	function SendTriggerEventToServer();// 0x1566290
	function SendCreateDamage();// 0x15661dc
	function RemoveBuffBySkill();// 0x15660cc
	function RemoveBuffByID();// 0x1565f74
	function RemoveAntiStuckBox();// 0x1565f60
	function RegisterItemHandle();// 0x1565ee8
	function PrintStats();// 0x1565ecc
	function PreChangeVehicleFPPAvatar();// 0x1565ea4
	function PreChangeVehicleBrokenMat();// 0x1565e7c
	function PreChangeVehicleAvatar();// 0x1565db8
	function PostLoadFPPMesh();// 0x1565d9c
	function PlaySfxOneShot();// 0x1565d24
	function OnUpdateEffects();// 0x1ddc250
	function OnSkeletalMeshSleep();// 0x1565c68
	function OnSkeletalMeshAwake();// 0x1565bac
	function OnSetTailLightValue();// 0x1ddc250
	function OnRep_VehicleSyncFlag();// 0x1565b98
	function OnRep_VehicleHealthState();// 0x1565b84
	function OnRep_TeamID();// 0x139c4bc
	function OnRep_SimulateViewData();// 0x1565b70
	function OnRep_SimulateFreeCameraViewData();// 0x1565b5c
	function OnRep_IsVehicleSpringArmAutoReturn();// 0x1565b48
	function OnRep_IsForbidNightVehicle();// 0x1565b34
	function OnRep_IsEngineStarted();// 0x1565b20
	function OnRep_IsBoosting();// 0x1565b0c
	function OnRep_IsAirdroppingVehicle();// 0x1565af8
	function OnRep_CampID();// 0x139c4bc
	function OnMeshLoaded();// 0x156598c
	function OnEngineStop();// 0x1ddc250
	function OnEngineStart();// 0x1ddc250
	function OnBoostingChanged();// 0x1ddc250
	function MultiCast_ApplyImpulse();// 0x156588c
	function LoadFPPVehicleModel();// 0x1565878
	function IsUsingFPPModel();// 0x1565850
	function IsUAV();// 0x1565828
	function IsSpawnedInReady();// 0x156580c
	function IsNotInWater();// 0x15657dc
	function IsMotorbike();// 0x15657b4
	function IsInMidAir();// 0x1565784
	function IsInBuffSpeedState();// 0x1565768
	function IsHelicopter();// 0x1565740
	function IsEntirelyUnderWater();// 0x1565718
	function IsAmphibiousVehicle();// 0x15656f0
	function IsAlive();// 0x15656c0
	function IsAirVehicle();// 0x1565690
	function InitVehicle();// 0x15655c4
	function InitSkeletalMesh();// 0x1565544
	function HandleOnVehicleHealthStateChanged();// 0x15654c4
	function HandleOnSeatDetached();// 0x15653bc
	function HandleOnSeatChanged();// 0x1565224
	function HandleOnSeatAttached();// 0x156511c
	function HandleOnMeshHit();// 0x1564f70
	function HandleLocalPlayerLeaveVehicle();// 0x1564ef0
	function HandleLocalPlayerEnterVehicle();// 0x1564e70
	function HandleLocalPlayerDeadth();// 0x1564df8
	function GetWeaponManagerBase();// 0x1564dc8
	function GetVehicleSkinItemID();// 0x1564da0
	function GetVehicleAvatar();// 0x1564d78
	function GetVehicleAdvanceAvatar();// 0x1564d50
	function GetTeamId();// 0x1564d28
	function GetSoftRefObj();// 0x1436de4
	function GetRotationInputDir();// 0x14ce9e8
	function GetLagCompensationComponent();// 0x1564cf8
	function GetItemHandle();// 0x1564cdc
	function GetForwardSpeed();// 0x1564cac
	function GetFirstPassenger();// 0x1564c84
	function GetDriver();// 0x1564c5c
	function GetCurrentOverlapActors();// 0x1564b90
	function GetCullWaterCapsule();// 0x1564a04
	function GetCampId();// 0x15649dc
	function ExitFPPVehicle();// 0x15649c8
	function EnterFPPVehicle();// 0x15649b4
	function DestroyAndRespawnSelf();// 0x15649a0
	function CreateAntiStuckBox();// 0x156498c
	function ClientPlayVehicleCameraShake();// 0x1564930
	function ClearInputs();// 0x156491c
	function ClearBuff();// 0x1505cbc
	function ChangeVehicleAvatar();// 0x1564894
	function CanVehicleJump();// 0x156486c
	function CanBeSeekAndLocked();// 0x15647e4
	function BroadCastEnterVehicleEvent();// 0x1564764
	function BroadcastClientVehicleExplosionEffect();// 0x1564748
	function BPPostLoadFPPMesh();// 0x1ddc250
	function BPPlayOverlapDamageCameraShake();// 0x1ddc250
	function ApplyAnimation();// 0x1564720
	function AfterBeginPlay();// 0x1ddc250
	function AddBuffBySkill();// 0x1564610
	function AddBuffByID();// 0x15644b8

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	STVehicleWheelDust[] WheelDusts;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: STVehicleWheelDust
	byte ContactSurface;//[Offset: 0x0 , Size: 1]
	ParticleSystem* MoveFx;//[Offset: 0x4 , Size: 4]
	ParticleSystem* SlipFx;//[Offset: 0x8 , Size: 4]
	ParticleSystem* HubFx;//[Offset: 0xc , Size: 4]
	float minSpeed;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x2c0 , Size: 4]
	float MaxQuadLength;//[Offset: 0x2c4 , Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x2c8 , Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x2cc , Size: 4]
	float DefaultTrailWidth;//[Offset: 0x2d0 , Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4 , Size: 1]
	float DefaultTrailLength;//[Offset: 0x2d8 , Size: 4]
	float TextureLength;//[Offset: 0x2dc , Size: 4]
	int USegmentNum;//[Offset: 0x2e0 , Size: 4]
	int CoordU;//[Offset: 0x2e4 , Size: 4]
	int SlippingCoordU;//[Offset: 0x2e8 , Size: 4]
	int BrokenCoordU;//[Offset: 0x2ec , Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0 , Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x2f4 , Size: 4]
	float AdditionalTextureLength;//[Offset: 0x2f8 , Size: 4]
	int AdditionalCoordU;//[Offset: 0x2fc , Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x300 , Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x304 , Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308 , Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x30c , Size: 4]
	function UpdateInput();// 0x15792d8
	function StopUpdate();// 0x15792c4
	function IsUpdating();// 0x157929c

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x528 , Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534 , Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x535 , Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x536 , Size: 1]
	enum CollisionMode;//[Offset: 0x537 , Size: 1]
	BodySetup* BodySetup;//[Offset: 0x538 , Size: 4]
	RuntimeMeshCollisionSection[] MeshCollisionSections;//[Offset: 0x55c , Size: 12]
	RuntimeConvexCollisionSection[] ConvexCollisionSections;//[Offset: 0x568 , Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x574 , Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x590 , Size: 60]
	BodySetup[] AsyncBodySetupQueue;//[Offset: 0x5cc , Size: 12]
	function UpdateMeshSection_Blueprint();// 0x417f6ac
	function SetSectionTessellationTriangles();// 0x417f54c
	function SetMeshSectionVisible();// 0x417f488
	function SetMeshSectionCollisionEnabled();// 0x417f3c4
	function SetMeshSectionCastsShadow();// 0x417f300
	function SetMeshCollisionSection();// 0x417f158
	function RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x1ddc250
	function IsMeshSectionVisible();// 0x417f0d8
	function IsMeshSectionCollisionEnabled();// 0x417f058
	function IsMeshSectionCastingShadows();// 0x417efd8
	function GetNumSections();// 0x417efb0
	function GetLastSectionIndex();// 0x417ef88
	function FirstAvailableMeshSectionIndex();// 0x417ef60
	function EndBatchUpdates();// 0x417ef4c
	function DoesSectionExist();// 0x417eecc
	function CreateMeshSection_Blueprint();// 0x417e8dc
	function CookCollisionNow();// 0x417e8c8
	function ClearMeshSection();// 0x417e850
	function ClearMeshCollisionSection();// 0x417e7d8
	function ClearCollisionConvexMeshes();// 0x417e7c4
	function ClearAllMeshSections();// 0x417e7b0
	function ClearAllMeshCollisionSections();// 0x417e79c
	function BeginBatchUpdates();// 0x417e780
	function AddCollisionConvexMesh();// 0x417e624

--------------------------------
Class: RuntimeMeshCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0 , Size: 12]
	int[] IndexBuffer;//[Offset: 0xc , Size: 12]

--------------------------------
Class: RuntimeConvexCollisionSection
	Vector[] VertexBuffer;//[Offset: 0x0 , Size: 12]
	Box BoundingBox;//[Offset: 0xc , Size: 28]

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetup[] WheelHubSetups;//[Offset: 0x36c , Size: 12]
	FName[] ExtraOptBoneNames;//[Offset: 0x378 , Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390 , Size: 1]
	VehicleWheel[] WheelHubs;//[Offset: 0x394 , Size: 12]
	function OnExpoldeStopWheel();// 0x15693dc
	function HandleOnSeatDetached();// 0x15692dc
	function HandleOnSeatChanged();// 0x1569150
	function HandleOnSeatAttached();// 0x1569050
	function ForceWheelsRotate();// 0x1568fd8
	function ClearDestroyedWheel();// 0x1568fc4

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x260 , Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2cc , Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x2e8 , Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x310 , Size: 88]
	float AckermannAccuracy;//[Offset: 0x368 , Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128 , Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x12c , Size: 12]
	float Mass;//[Offset: 0x138 , Size: 4]
	float DragCoefficient;//[Offset: 0x13c , Size: 4]
	float ChassisWidth;//[Offset: 0x140 , Size: 4]
	float ChassisHeight;//[Offset: 0x144 , Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148 , Size: 1]
	float DragArea;//[Offset: 0x14c , Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x150 , Size: 4]
	float MaxEngineRPM;//[Offset: 0x154 , Size: 4]
	float DebugDragMagnitude;//[Offset: 0x158 , Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x15c , Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x168 , Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x16c , Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x170 , Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x174 , Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x178 , Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x17c , Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x180 , Size: 4]
	VehicleWheel[] Wheels;//[Offset: 0x184 , Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c , Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1a0 , Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1a4 , Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1a8 , Size: 4]
	float RVOSteeringStep;//[Offset: 0x1ac , Size: 4]
	float RVOThrottleStep;//[Offset: 0x1b0 , Size: 4]
	int AvoidanceUID;//[Offset: 0x1b4 , Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1b8 , Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1bc , Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1c0 , Size: 4]
	float AvoidanceWeight;//[Offset: 0x1c4 , Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1c8 , Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1d4 , Size: 20]
	float RawSteeringInput;//[Offset: 0x1ec , Size: 4]
	float RawThrottleInput;//[Offset: 0x1f0 , Size: 4]
	float RawBrakeInput;//[Offset: 0x1f4 , Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8 , Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8 , Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8 , Size: 1]
	float SteeringInput;//[Offset: 0x1fc , Size: 4]
	float ThrottleInput;//[Offset: 0x200 , Size: 4]
	float BrakeInput;//[Offset: 0x204 , Size: 4]
	float HandbrakeInput;//[Offset: 0x208 , Size: 4]
	float IdleBrakeInput;//[Offset: 0x20c , Size: 4]
	float StopThreshold;//[Offset: 0x210 , Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x214 , Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x218 , Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x220 , Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x228 , Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x230 , Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238 , Size: 1]
	function SetUseAutoGears();// 0x431914c
	function SetThrottleInput();// 0x43190d4
	function SetTargetGear();// 0x4319010
	function SetSteeringInput();// 0x4318f98
	function SetPhysActive();// 0x4318f18
	function SetHandbrakeInput();// 0x4318e98
	function SetGroupsToIgnoreMask();// 0x4318e14
	function SetGroupsToIgnore();// 0x4318d9c
	function SetGroupsToAvoidMask();// 0x4318d18
	function SetGroupsToAvoid();// 0x4318ca0
	function SetGearUp();// 0x4318c20
	function SetGearDown();// 0x4318ba0
	function SetBrakeInput();// 0x4318b28
	function SetAvoidanceGroupMask();// 0x4318aa4
	function SetAvoidanceGroup();// 0x3720c2c
	function SetAvoidanceEnabled();// 0x4318a24
	function ServerUpdateState();// 0x4318840
	function GetUseAutoGears();// 0x4318818
	function GetTargetGear();// 0x43187f0
	function GetForwardSpeed();// 0x43187c8
	function GetEngineRotationSpeed();// 0x43187a0
	function GetEngineMaxRotationSpeed();// 0x4318778
	function GetCurrentGear();// 0x4318750

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0 , Size: 88]
	float MaxRPM;//[Offset: 0x58 , Size: 4]
	float MOI;//[Offset: 0x5c , Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60 , Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64 , Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68 , Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0 , Size: 1]
	float FrontRearSplit;//[Offset: 0x4 , Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8 , Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc , Size: 4]
	float CentreBias;//[Offset: 0x10 , Size: 4]
	float FrontBias;//[Offset: 0x14 , Size: 4]
	float RearBias;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float GearSwitchTime;//[Offset: 0x4 , Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8 , Size: 4]
	float FinalRatio;//[Offset: 0xc , Size: 4]
	VehicleGearData[] ForwardGears;//[Offset: 0x10 , Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c , Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20 , Size: 4]
	float ClutchStrength;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0 , Size: 4]
	float DownRatio;//[Offset: 0x4 , Size: 4]
	float UpRatio;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0 , Size: 4]
	FName BoneName;//[Offset: 0x8 , Size: 8]
	Vector AdditionalOffset;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x1c , Size: 4]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	Vector Offset;//[Offset: 0x24 , Size: 12]
	float ShapeRadius;//[Offset: 0x30 , Size: 4]
	float ShapeWidth;//[Offset: 0x34 , Size: 4]
	float Mass;//[Offset: 0x38 , Size: 4]
	float DampingRate;//[Offset: 0x3c , Size: 4]
	float SteerAngle;//[Offset: 0x40 , Size: 4]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44 , Size: 1]
	TireType* TireType;//[Offset: 0x48 , Size: 4]
	TireConfig* TireConfig;//[Offset: 0x4c , Size: 4]
	float LatStiffMaxLoad;//[Offset: 0x50 , Size: 4]
	float LatStiffValue;//[Offset: 0x54 , Size: 4]
	float LongStiffValue;//[Offset: 0x58 , Size: 4]
	float SuspensionForceOffset;//[Offset: 0x5c , Size: 4]
	float SuspensionMaxRaise;//[Offset: 0x60 , Size: 4]
	float SuspensionMaxDrop;//[Offset: 0x64 , Size: 4]
	float SuspensionNaturalFrequency;//[Offset: 0x68 , Size: 4]
	float SuspensionDampingRatio;//[Offset: 0x6c , Size: 4]
	byte SweepType;//[Offset: 0x70 , Size: 1]
	float MaxBrakeTorque;//[Offset: 0x74 , Size: 4]
	float MaxHandBrakeTorque;//[Offset: 0x78 , Size: 4]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x7c , Size: 4]
	int WheelIndex;//[Offset: 0x80 , Size: 4]
	float DebugLongSlip;//[Offset: 0x84 , Size: 4]
	float DebugLatSlip;//[Offset: 0x88 , Size: 4]
	float DebugNormalizedTireLoad;//[Offset: 0x8c , Size: 4]
	float DebugWheelTorque;//[Offset: 0x94 , Size: 4]
	float DebugLongForce;//[Offset: 0x98 , Size: 4]
	float DebugLatForce;//[Offset: 0x9c , Size: 4]
	Vector Location;//[Offset: 0xa0 , Size: 12]
	Vector OldLocation;//[Offset: 0xac , Size: 12]
	Vector Velocity;//[Offset: 0xb8 , Size: 12]
	function IsInAir();// 0x4317fc8
	function GetSuspensionOffset();// 0x4317fa0
	function GetSteerAngle();// 0x4317f78
	function GetRotationAngle();// 0x4317f50

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x20 , Size: 4]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0 , Size: 4]
	float FrictionScale;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WheelHubSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0 , Size: 4]
	FName TireBoneName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0 , Size: 4]
	float ThrottleInput;//[Offset: 0x4 , Size: 4]
	float BrakeInput;//[Offset: 0x8 , Size: 4]
	float HandbrakeInput;//[Offset: 0xc , Size: 4]
	int CurrentGear;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0 , Size: 4]
	float FallRate;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0 , Size: 1]
	int8 ThrottleInput;//[Offset: 0x1 , Size: 1]
	int8 BrakeInput;//[Offset: 0x2 , Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3 , Size: 1]
	int8 CurrentGear;//[Offset: 0x4 , Size: 1]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.ActorComponent.Object
	STExtraVehicleSeat[] Seats;//[Offset: 0xbc , Size: 12]
	STExtraPlayerCharacter[] SeatOccupiers;//[Offset: 0xc8 , Size: 12]
	FName[] AlternativeLeaveVehicleSockets;//[Offset: 0xd4 , Size: 12]
	FName[] AlternativeEnterVehicleSockets;//[Offset: 0xe0 , Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0xec , Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	byte[] SeatGUITypes;//[Offset: 0xf8 , Size: 12]
	delegate OnSeatAttached;//[Offset: 0x104 , Size: 12]
	delegate OnSeatDetached;//[Offset: 0x110 , Size: 12]
	delegate OnSeatChanged;//[Offset: 0x11c , Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x128 , Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x134 , Size: 12]
	delegate OnDriverChange;//[Offset: 0x140 , Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x14c , Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x158 , Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c , Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x160 , Size: 4]
	function OnRep_Occupiers();// 0x15a9ccc
	function IsSeatIndexAvailable();// 0x15a9c4c
	function IsSeatAvailableTeam();// 0x15a9bcc
	function IsSeatAvailable();// 0x15a9b4c
	function GetFirstPassenger();// 0x15a9b24
	function GetDriver();// 0x15a9afc
	function ClientSetLeaveVehicleLocation();// 0x15a9a38
	function ClientChangeSeatCameraData();// 0x15a98f4

--------------------------------
Class: VehicleComponent.ActorComponent.Object

--------------------------------
Class: STExtraVehicleSeat
	enum SeatType;//[Offset: 0x0 , Size: 1]
	FName AnimCompTagName;//[Offset: 0x8 , Size: 8]
	FName EnterVehicleSocket;//[Offset: 0x10 , Size: 8]
	FName LeaveVehicleSocket;//[Offset: 0x18 , Size: 8]
	byte OccupyMovementMode;//[Offset: 0x20 , Size: 1]
	byte HoldWeaponType;//[Offset: 0x21 , Size: 1]
	byte SeatSpecialType;//[Offset: 0x22 , Size: 1]
	bool IsCanLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23 , Size: 1]
	int GUIDisplayIndex;//[Offset: 0x24 , Size: 4]
	CurveFloat* MinViewPitchCurve;//[Offset: 0x28 , Size: 4]
	Rotator CharRotVsVehiRot;//[Offset: 0x2c , Size: 12]
	byte SeatSideType;//[Offset: 0x38 , Size: 1]

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	class UserWidget* SettleAccountUI;//[Offset: 0x1bc8 , Size: 40]
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x1bf0 , Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x1bfc , Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x1c08 , Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x1c14 , Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x1c20 , Size: 12]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x1c2c , Size: 4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x1c30 , Size: 4]
	BoxComponent* BoxEar;//[Offset: 0x1c34 , Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x1c38 , Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x1c3c , Size: 4]
	float IndoorCheckDistance;//[Offset: 0x1c40 , Size: 4]
	float IndoorCheckTime;//[Offset: 0x1c44 , Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x1c48 , Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x1c4c , Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c50 , Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x1c54 , Size: 4]
	float mfTickDuration;//[Offset: 0x1c58 , Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x1c60 , Size: 24]
	Color DyeingColor;//[Offset: 0x1c78 , Size: 4]
	int DyeingSlot;//[Offset: 0x1c7c , Size: 4]
	byte ParachuteState;//[Offset: 0x1c84 , Size: 1]
	byte LastParachuteState;//[Offset: 0x1c86 , Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x1c88 , Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8c , Size: 1]
	float SwimZDir;//[Offset: 0x1c90 , Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c94 , Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c95 , Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x1c98 , Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x1c9c , Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x1ca0 , Size: 4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x1ca4 , Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x1ca8 , Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x1cac , Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x1cb0 , Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x1cb4 , Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x1cb8 , Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x1cbc , Size: 4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x1cc0 , Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x1d10 , Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x1d60 , Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x1dc8 , Size: 4]
	float VehicleForwardInputRate;//[Offset: 0x1dcc , Size: 4]
	float VehicleRightInputRate;//[Offset: 0x1dd0 , Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dd4 , Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x1dd8 , Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x1de0 , Size: 4]
	ActivityActorBase[] ActivityActorList;//[Offset: 0x1e38 , Size: 12]
	function UpdateParachuteState();// 0x1524ce8
	function UpdateParachuteFallingCameraDistance();// 0x1524c70
	function UpdateIndoorState();// 0x1524ba8
	function UpdateBodyIndoorState();// 0x1524ae0
	function TriggerAutoAimCheck();// 0x1524a68
	function TouchCancelSkillLock();// 0x1524a54
	function SyncDeadTombBoxToController();// 0x14eba88
	function SwitchCameraToParachuteOpening();// 0x1524a38
	function SwitchCameraToParachuteFalling();// 0x1524a1c
	function SwitchCameraToNormal();// 0x1524a00
	function SwitchCameraFromParachuteOpeningToTPPUpdate();// 0x1524988
	function SwitchCameraFromParachuteOpeningToTPPStop();// 0x1ddc250
	function SwitchCameraFromParachuteOpeningToTPPFinish();// 0x1524974
	function SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x1ddc250
	function StopCamShake();// 0x1524958
	function StartUpdatingParachuteFallingCameraDistance();// 0x15248e0
	function StartCamShake();// 0x15248c4
	function ShowNightVisionFrame();// 0x14ea9f8
	function ShowConfirmDialogOfMisKill();// 0x14ea978
	function ShouldTriggerEntryEvent();// 0x1524844
	function ShouldDropBagItem();// 0x15247ac
	function SetSwimRotateX_Ex();// 0x1524734
	function SetRainyEffectParam();// 0x1524678
	function SetRainyEffectEnable();// 0x152456c
	function SetPitchViewAngle();// 0x15244a8
	function SetParachuteState();// 0x1524428
	function SetFPPDeafultFov();// 0x15243b0
	function SetBodyIndoor();// 0x1524330
	function ServerUpdateParachuteState();// 0x152423c
	function ServerSetBulletFlySoundData();// 0x15240e0
	function ReqSetShoulderCameraMode();// 0x1524018
	function ReleaseTrigger();// 0x1523f98
	function PushTrigger();// 0x1523f18
	function ProneWithTerrain();// 0x1523dc4
	function ParachutePlaySound();// 0x1ddc250
	function OnStateEnter();// 0x1523d44
	function OnSkillFinishedDelegate__DelegateSignature();// 0x1ddc250
	function OnScopeOutDelegate__DelegateSignature();// 0x1ddc250
	function OnScopeInDelegate__DelegateSignature();// 0x1ddc250
	function OnRep_STPlayerController();// 0x1523d30
	function OnRep_ParachuteState();// 0x1523cb0
	function OnRank();// 0x1523bf4
	function OnMiniTreeTriggerServerLogicCPP();// 0x1523bd8
	function OnHasTombBoxesAvailableChanged__DelegateSignature();// 0x1ddc250
	function OnHasPickupPropsAvailableChanged__DelegateSignature();// 0x1ddc250
	function OnAvatarEquippedSucc();// 0x1523acc
	function OnAllAvatarEquippedSucc();// 0x1523ab8
	function MulticastSetShoulderCameraMode();// 0x1523a30
	function MiniTreeTriggerServerLogic();// 0x15239d4
	function IsInLaunchSeat();// 0x15239a4
	function IsGrenadeEmpty();// 0x152397c
	function IsBodyIndoorFuc();// 0x152395c
	function IsBodyIndoorCheck();// 0x1523934
	function InitAirAttackLocatorComponent();// 0x1523920
	function HideNightVisionFrame();// 0x14e1bb0
	function HandleParachuteStateChanged();// 0x15238a0
	function HandleBulletOverlap();// 0x1523728
	function HandleAIInstigateBulletOverlap();// 0x15235b0
	function GetThirdPersonSpringArm();// 0x1ddc250
	function GetThirdPersonCamera();// 0x1ddc250
	function GetSwimRotateX_Ex();// 0x1523588
	function GetScopeSpringArm();// 0x1ddc250
	function GetScopeCamera();// 0x1ddc250
	function GetPlayerControllerSafety();// 0x14e0cf0
	function GetIsInDoor();// 0x1523558
	function GetIsGunADS();// 0x1523528
	function GetFPPSpringArm();// 0x1ddc250
	function GetFPPDeafultFov();// 0x1523500
	function GetFPPCamera();// 0x1ddc250
	function GetFirstPersonSpringArm();// 0x1ddc250
	function GetFirstPersonCamera();// 0x1ddc250
	function GetBonePos();// 0x152346c
	function FreeFallShakeCam();// 0x1523458
	function FinishUpdatingParachuteFallingCameraDistance();// 0x15233e0
	function EnablePet();// 0x1523358
	function DynamicCreateComponents();// 0x1523344
	function ClientPlayEarSound();// 0x1523240
	function ClearHPUI();// 0x14dd898

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	AutoAimEnemyInfo SelectEnemyInfo;//[Offset: 0xd0 , Size: 20]
	AutoAimEnemyInfo LastSelectInfo;//[Offset: 0xe4 , Size: 20]
	Vector2D AimTargetScreenPos;//[Offset: 0xf8 , Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100 , Size: 1]
	PlayerController* PlayerController;//[Offset: 0x104 , Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x108 , Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x118 , Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x11c , Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x120 , Size: 4]
	float SCOPE_AUTO_AIM_TIME;//[Offset: 0x124 , Size: 4]
	float MIN_FOLLOW_TIME;//[Offset: 0x128 , Size: 4]
	FName[] Bones;//[Offset: 0x224 , Size: 12]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230 , Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231 , Size: 1]
	bool bInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232 , Size: 1]
	STExtraPlayerController* extraPlayerController;//[Offset: 0x234 , Size: 4]
	bool bIsStartScopeAutoAimCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb4 , Size: 1]
	float ScopeAutoAimTime;//[Offset: 0xdb8 , Size: 4]
	function TryDoAiming();// 0x15b83e8
	function SetIsStartScopeAutoAimCheck();// 0x15b8368
	function OnUnEquipWeapon();// 0x15b8354
	function OnShoot();// 0x15b82dc
	function OnRefreshAutoAimCfg();// 0x15b82c8
	function OnEquipWeapon();// 0x15b82b4
	function IsTriggerBeforeFire();// 0x15b828c
	function Init();// 0x15b8214
	function GetTryRaycastActor();// 0x15b8110
	function GetIsStartScopeAutoAimCheck();// 0x15b80e8
	function CheckSmoke();// 0x15b801c
	function CheckInAngle();// 0x15b7f0c
	function CheckBuffStun();// 0x15b7ee4
	function CanEnemeyRaycastReach();// 0x15b7e18

--------------------------------
Class: AutoAimEnemyInfo
	STExtraPlayerCharacter* EnemyPawn;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xc0 , Size: 4]
	AppearanceMatData[] AppearancePresentList;//[Offset: 0xc4 , Size: 12]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0xd0 , Size: 48]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x100 , Size: 4]
	AppearanceMeshData[] AppearanceMeshDataList;//[Offset: 0x104 , Size: 12]
	ScreenParticleEffectData[] ScreenParticleEffectList;//[Offset: 0x110 , Size: 12]
	FName ScreenPlane;//[Offset: 0x120 , Size: 8]
	MltAppearanceMatData[] MultiAppearancePresentList;//[Offset: 0x128 , Size: 12]
	AppearanceMatData[] CurAppearanceList;//[Offset: 0x134 , Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x140 , Size: 4]
	function UpdateMultiAppearancePresentList();// 0x156edd4
	function StopScreenParticleEffect();// 0x156ed5c
	function StopScreenAppearance();// 0x156ec54
	function StopAllScreenParticleEffect();// 0x156ec40
	function StopAllScreenAppearance();// 0x156ec2c
	function SetScreenParticleParam();// 0x156eb70
	function SetAppearanceActive();// 0x156ea44
	function SetAllAppearancesActive();// 0x156e974
	function PlayScreenParticleEffect();// 0x156e8b8
	function PlayPresentScreenAppearance();// 0x156e758
	function PlayGraduallyShowOut();// 0x156e578
	function PlayGraduallyShowIn();// 0x156e350
	function PlayCustomScreenAppearance();// 0x156e1b4
	function OnAsyncLoadingFinished();// 0x156e13c
	function IsScreenAppearancePlaying();// 0x156e078
	function HandleEffectLoadFinish();// 0x156e000

--------------------------------
Class: AppearanceMatData
	FString AppearanceKey;//[Offset: 0x0 , Size: 12]
	float LifeSpan;//[Offset: 0xc , Size: 4]
	bool IgnoreIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool HideUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	MaterialInterface* ParentMaterial;//[Offset: 0x18 , Size: 40]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x40 , Size: 4]
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	function SetVectorParameterValue();// 0x3596c78
	function SetTextureParameterValue();// 0x3596bbc
	function SetScalarParameterValue();// 0x3596af8
	function K2_InterpolateMaterialInstanceParams();// 0x35969f8
	function K2_GetVectorParameterValue();// 0x3596968
	function K2_GetTextureParameterValue();// 0x35968e8
	function K2_GetScalarParameterValue();// 0x3596868
	function K2_CopyMaterialInstanceParameters();// 0x35967f0
	function CopyParameterOverrides();// 0x3596778
	function CopyInterpParameters();// 0x3596700

--------------------------------
Class: AppearanceMeshData
	StaticMeshComponent* AppearanceMeshComp;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: ScreenParticleEffectData
	byte EffectType;//[Offset: 0x0 , Size: 1]
	ParticleSystem* ParticleEffect;//[Offset: 0x8 , Size: 40]
	FName ParticleParamName;//[Offset: 0x30 , Size: 8]
	FString[] ExtraScreenAppearanceList;//[Offset: 0x38 , Size: 12]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x44 , Size: 4]
	bool KeepWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49 , Size: 1]
	float CurrentParamValue;//[Offset: 0x4c , Size: 4]
	byte DisableDeviceLevel;//[Offset: 0x50 , Size: 1]

--------------------------------
Class: MltAppearanceMatData
	FString AppearanceKey;//[Offset: 0x0 , Size: 12]
	FName AppearanceTag;//[Offset: 0x10 , Size: 8]
	Transform AppearanceMeshRelativeTransform;//[Offset: 0x20 , Size: 48]
	MaterialInterface* ParentMaterial;//[Offset: 0x50 , Size: 4]
	float MatialAlpha;//[Offset: 0x54 , Size: 4]
	MaterialInstanceDynamic* AppearanceMat;//[Offset: 0x58 , Size: 4]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0x5c , Size: 4]
	bool IsLogicShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	bool IsShowOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61 , Size: 1]
	bool IsShowIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62 , Size: 1]
	float GradualFrag;//[Offset: 0x64 , Size: 4]
	float DelayTime;//[Offset: 0x68 , Size: 4]

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x5b0 , Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x5e0 , Size: 48]
	function SetActivate();// 0x146913c

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor[] CollisionIgnoreActors;//[Offset: 0x708 , Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x714 , Size: 1]
	function AddCollisionIgnoreActor();// 0x1406a6c

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0 , Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8 , Size: 4]
	FName ParentSocketName;//[Offset: 0x10 , Size: 8]
	float TargetArmALength;//[Offset: 0x18 , Size: 4]
	Vector SocketOffset;//[Offset: 0x1c , Size: 12]
	Vector TargetOffset;//[Offset: 0x28 , Size: 12]
	Vector RelativeLocation;//[Offset: 0x34 , Size: 12]
	float ProbeSize;//[Offset: 0x40 , Size: 4]
	byte ProbeChannel;//[Offset: 0x44 , Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45 , Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46 , Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47 , Size: 1]
	float CameraLagSpeed;//[Offset: 0x48 , Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0 , Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xbc , Size: 4]
	float AALOpenSensibility;//[Offset: 0xc0 , Size: 4]
	float OpenAALFOV;//[Offset: 0xc4 , Size: 4]
	int MaxDist;//[Offset: 0xc8 , Size: 4]
	int minDist;//[Offset: 0xcc , Size: 4]
	int DangerDist;//[Offset: 0xd0 , Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xd8 , Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x100 , Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x128 , Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x12c , Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x130 , Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x138 , Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x13c , Size: 4]
	float ArrowScalePlus1;//[Offset: 0x140 , Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x144 , Size: 4]
	float ArrowScalePlus2;//[Offset: 0x148 , Size: 4]
	float ShortDis;//[Offset: 0x14c , Size: 4]
	byte ChannelType;//[Offset: 0x150 , Size: 1]
	Vector TargetLocation;//[Offset: 0x154 , Size: 12]
	function SetItemExsist();// 0x1399d48
	function SetFinalLocation();// 0x1399d34
	function SetAALFov();// 0x1399cb4
	function ServerSetAirAttackLocation();// 0x1399b9c
	function OnFreeArrowLoadFinsh();// 0x1399b88
	function OnCalledActorLoadFinsh();// 0x1399b18
	function GetTargetDistance();// 0x1399af0
	function GetAALAvaliable();// 0x1399ac8

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x304 , Size: 4]
	float AirAttackDelayTime;//[Offset: 0x308 , Size: 4]
	int IconID;//[Offset: 0x30c , Size: 4]
	float AttackAreaRadius;//[Offset: 0x310 , Size: 4]

--------------------------------
Class: ActivityActorBase.Actor.Object
	FString actorName;//[Offset: 0x2c0 , Size: 12]
	bool bActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc , Size: 1]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd , Size: 1]
	Character* ClientMainCharacter;//[Offset: 0x2d0 , Size: 8]
	Character* CurActiveCharacter;//[Offset: 0x2d8 , Size: 8]
	MeshComponent* Mesh;//[Offset: 0x2e0 , Size: 4]
	ShapeComponent* ShapeCollision;//[Offset: 0x2e4 , Size: 4]
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8 , Size: 1]
	FString ActivityName;//[Offset: 0x2ec , Size: 12]
	int SkillIndex;//[Offset: 0x2f8 , Size: 4]
	enum SkillEntry;//[Offset: 0x2fc , Size: 1]
	AnimMontage* SoftAnimMontage;//[Offset: 0x300 , Size: 40]
	int ButtonShowTextID;//[Offset: 0x328 , Size: 4]
	Object* ButtonShowPic;//[Offset: 0x330 , Size: 40]
	bool bButtonShowWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358 , Size: 1]
	function UpdateButtonInfo();// 0x13946bc
	function TriggerSkillEvent();// 0x139463c
	function RPC_Client_ShowInteractiveButton();// 0x1394570
	function RPC_Client_RefreshButtonInfo();// 0x13944a4
	function RefreshButtonInfo();// 0x139442c
	function OnEndOverlap();// 0x13942e4
	function OnBeginOverlap();// 0x13940e8
	function LocalStartActive();// 0x1394060
	function LocalInterruptActive();// 0x1393fd8
	function LocalActiveFinished();// 0x1393f50
	function GetMesh();// 0x1393f34
	function GetMainCharacter();// 0x1393f04
	function GetActivedCharacter();// 0x1393ed8
	function ClientClickButton();// 0x1393e04
	function BPStartActive();// 0x1393ce0
	function BPInterruptActive();// 0x1393bbc
	function BPClientClickButtonFailed();// 0x1ddc250
	function BPActiveFinished();// 0x1393a98
	function AllowShowButton();// 0x13939bc
	function AllowInteractive();// 0x13938e0
	function AllowClickButton();// 0x1393804

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0xbc , Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0xc0 , Size: 4]
	float ImpactModifier;//[Offset: 0xc4 , Size: 4]
	float ImpactAbsorption;//[Offset: 0xc8 , Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0xcc , Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0xd0 , Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0xd4 , Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0xd8 , Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0xdc , Size: 4]
	float DamageCharacterCD;//[Offset: 0xe0 , Size: 4]
	float DamageSelfCD;//[Offset: 0xe8 , Size: 4]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0xf0 , Size: 4]
	float ExplosionBaseDamage;//[Offset: 0xf4 , Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0xf8 , Size: 4]
	float ExplosionRadiusInner;//[Offset: 0xfc , Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x100 , Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x104 , Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x108 , Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x10c , Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110 , Size: 1]
	float HitStoneVelocityDamp;//[Offset: 0x114 , Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x120 , Size: 64]
	function SendHitCaveStoneToServer();// 0x15a7ff0
	function HandleOnVehicleHit();// 0x15a7e84

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0 , Size: 12]
	Quat Quaternion;//[Offset: 0x10 , Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20 , Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c , Size: 12]
	byte Flags;//[Offset: 0x38 , Size: 1]

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0xbc , Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0xc8 , Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0xd4 , Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	float HPMax;//[Offset: 0xe4 , Size: 4]
	float HP;//[Offset: 0xe8 , Size: 4]
	float[] WheelsCurrentHP;//[Offset: 0xec , Size: 12]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	float FuelMax;//[Offset: 0xfc , Size: 4]
	float Fuel;//[Offset: 0x100 , Size: 4]
	float FuelConsumeFactor;//[Offset: 0x104 , Size: 4]
	STExtraVehicleWheelHP[] WheelsHP;//[Offset: 0x108 , Size: 12]
	function VehicleTakeDamage();// 0x15a7310
	function TakeDamageByHitPart();// 0x15a710c
	function TakeDamageByBoneName();// 0x15a6ef0
	function RefreshWheelState();// 0x15a6edc
	function OnRep_WheelsCurrentHP();// 0x15a6ec8
	function OnRep_HP();// 0x15a6eb4
	function OnRep_Fuel();// 0x15a6ea0
	function NoFuel();// 0x15a6e78
	function Maintenance();// 0x15a6db4
	function IsDontDamage();// 0x15a6d98
	function IsDontConsumeFuel();// 0x15a6d7c
	function IsDestroyed();// 0x15a6d54
	function GetWheelsHPNum();// 0x15a6d2c
	function GetWheelHPMax();// 0x15a6cac
	function GetWheelHP();// 0x15a6c2c
	function GetVehicleHPMax();// 0x15a6c04
	function GetVehicleHP();// 0x15a6bdc
	function GetFuelMax();// 0x15a6bb4
	function GetFuelConsumeFactor();// 0x15a6b8c
	function GetFuel();// 0x15a6b64

--------------------------------
Class: STExtraVehicleWheelHP
	float HPMax;//[Offset: 0x0 , Size: 4]
	FName BoneName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	OceanManager* OceanManager;//[Offset: 0x238 , Size: 4]
	float MeshDensity;//[Offset: 0x23c , Size: 4]
	float FluidDensity;//[Offset: 0x240 , Size: 4]
	float FluidLinearDamping;//[Offset: 0x244 , Size: 4]
	float FluidAngularDamping;//[Offset: 0x248 , Size: 4]
	Vector VelocityDamper;//[Offset: 0x24c , Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258 , Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x25c , Size: 4]
	float TestPointRadius;//[Offset: 0x260 , Size: 4]
	Vector[] TestPoints;//[Offset: 0x264 , Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270 , Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271 , Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x272 , Size: 1]
	float[] PointDensityOverride;//[Offset: 0x274 , Size: 12]
	StructBoneOverride[] BoneOverride;//[Offset: 0x280 , Size: 12]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c , Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d , Size: 1]
	float StayUprightStiffness;//[Offset: 0x290 , Size: 4]
	float StayUprightDamping;//[Offset: 0x294 , Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x298 , Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4 , Size: 1]
	float WaveForceMultiplier;//[Offset: 0x2a8 , Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x2ac , Size: 4]
	byte TickGroup;//[Offset: 0x2b0 , Size: 1]
	function IsEntirelyUnderWater();// 0x4076818
	function IsContactedWater();// 0x40767f0

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0 , Size: 1]
	Vector2D GlobalWaveDirection;//[Offset: 0x2c4 , Size: 8]
	float GlobalWaveSpeed;//[Offset: 0x2cc , Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x2d0 , Size: 4]
	float DistanceCheck;//[Offset: 0x2d4 , Size: 4]
	WaveParameter[] WaveClusters;//[Offset: 0x2d8 , Size: 12]
	WaveSetParameters[] WaveSetOffsetsOverride;//[Offset: 0x2e4 , Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x2f0 , Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4 , Size: 1]
	float ModulationStartHeight;//[Offset: 0x2f8 , Size: 4]
	float ModulationMaxHeight;//[Offset: 0x2fc , Size: 4]
	float ModulationPower;//[Offset: 0x300 , Size: 4]
	Landscape* Landscape;//[Offset: 0x304 , Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x308 , Size: 4]
	function LoadLandscapeHeightmap();// 0x4077ab4
	function GetWaveHeightValue();// 0x4077930
	function GetHeightmapPixel();// 0x4077860

--------------------------------
Class: WaveParameter
	float Rotation;//[Offset: 0x0 , Size: 4]
	float Length;//[Offset: 0x4 , Size: 4]
	float Amplitude;//[Offset: 0x8 , Size: 4]
	float Steepness;//[Offset: 0xc , Size: 4]
	float TimeScale;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: WaveSetParameters
	WaveParameter Wave01;//[Offset: 0x0 , Size: 20]
	WaveParameter Wave02;//[Offset: 0x14 , Size: 20]
	WaveParameter Wave03;//[Offset: 0x28 , Size: 20]
	WaveParameter Wave04;//[Offset: 0x3c , Size: 20]
	WaveParameter Wave05;//[Offset: 0x50 , Size: 20]
	WaveParameter Wave06;//[Offset: 0x64 , Size: 20]
	WaveParameter Wave07;//[Offset: 0x78 , Size: 20]
	WaveParameter Wave08;//[Offset: 0x8c , Size: 20]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x2c0 , Size: 4]
	Guid LandscapeGuid;//[Offset: 0x2c4 , Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x2d4 , Size: 8]
	int MaxLODLevel;//[Offset: 0x2dc , Size: 4]
	float LODDistanceFactor;//[Offset: 0x2e0 , Size: 4]
	int ForceLOD;//[Offset: 0x2e4 , Size: 4]
	byte LODFalloff;//[Offset: 0x2e8 , Size: 1]
	int OccluderGeometryLOD;//[Offset: 0x2ec , Size: 4]
	int StaticLightingLOD;//[Offset: 0x2f0 , Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x2f4 , Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x2f8 , Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2fc , Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x300 , Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x304 , Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x308 , Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x30c , Size: 4]
	LandscapeComponent[] LandscapeComponents;//[Offset: 0x310 , Size: 12]
	LandscapeHeightfieldCollisionComponent[] CollisionComponents;//[Offset: 0x31c , Size: 12]
	HierarchicalInstancedStaticMeshComponent[] FoliageComponents;//[Offset: 0x328 , Size: 12]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c , Size: 1]
	float StaticLightingResolution;//[Offset: 0x380 , Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384 , Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x384 , Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x384 , Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x385 , Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x386 , Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x386 , Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x388 , Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x38c , Size: 24]
	int CollisionMipLevel;//[Offset: 0x3a4 , Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x3a8 , Size: 4]
	float CollisionThickness;//[Offset: 0x3ac , Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x3b0 , Size: 328]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f8 , Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f8 , Size: 1]
	int ComponentSizeQuads;//[Offset: 0x4fc , Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x500 , Size: 4]
	int NumSubsections;//[Offset: 0x504 , Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x508 , Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x509 , Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a , Size: 1]
	function EditorApplySpline();// 0x24eb204
	function ChangeLODDistanceFactor();// 0x13a1b64

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint[] ControlPoints;//[Offset: 0x508 , Size: 12]
	LandscapeSplineSegment[] Segments;//[Offset: 0x514 , Size: 12]
	MeshComponent[] CookedForeignMeshComponents;//[Offset: 0x520 , Size: 12]

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x1c , Size: 12]
	Rotator Rotation;//[Offset: 0x28 , Size: 12]
	float Width;//[Offset: 0x34 , Size: 4]
	float SideFalloff;//[Offset: 0x38 , Size: 4]
	float EndFalloff;//[Offset: 0x3c , Size: 4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x40 , Size: 12]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x4c , Size: 12]
	Box Bounds;//[Offset: 0x58 , Size: 28]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x74 , Size: 4]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0 , Size: 4]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4 , Size: 1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x20 , Size: 16]
	InterpCurveVector SplineInfo;//[Offset: 0x40 , Size: 20]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x54 , Size: 12]
	Box Bounds;//[Offset: 0x60 , Size: 28]
	SplineMeshComponent[] LocalMeshComponents;//[Offset: 0x7c , Size: 12]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0 , Size: 4]
	float TangentLen;//[Offset: 0x4 , Size: 4]
	FName SocketName;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0 , Size: 12]
	Vector Left;//[Offset: 0xc , Size: 12]
	Vector Right;//[Offset: 0x18 , Size: 12]
	Vector FalloffLeft;//[Offset: 0x24 , Size: 12]
	Vector FalloffRight;//[Offset: 0x30 , Size: 12]
	float StartEndFalloff;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x5b4 , Size: 88]
	Vector SplineUpDir;//[Offset: 0x60c , Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x618 , Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x618 , Size: 1]
	byte ForwardAxis;//[Offset: 0x619 , Size: 1]
	float SplineBoundaryMin;//[Offset: 0x61c , Size: 4]
	float SplineBoundaryMax;//[Offset: 0x620 , Size: 4]
	BodySetup* BodySetup;//[Offset: 0x624 , Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x628 , Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x638 , Size: 1]
	function UpdateMesh();// 0x3605edc
	function SetStartTangent();// 0x3605e18
	function SetStartScale();// 0x3605d58
	function SetStartRoll();// 0x3605c94
	function SetStartPosition();// 0x3605bd0
	function SetStartOffset();// 0x3605b10
	function SetStartAndEnd();// 0x3605970
	function SetSplineUpDir();// 0x360589c
	function SetForwardAxis();// 0x36057d8
	function SetEndTangent();// 0x3605714
	function SetEndScale();// 0x3605654
	function SetEndRoll();// 0x3605590
	function SetEndPosition();// 0x36054cc
	function SetEndOffset();// 0x360540c
	function SetBoundaryMin();// 0x3605348
	function SetBoundaryMax();// 0x3605284
	function GetStartTangent();// 0x360523c
	function GetStartScale();// 0x36051fc
	function GetStartRoll();// 0x36051d4
	function GetStartPosition();// 0x360518c
	function GetStartOffset();// 0x360514c
	function GetSplineUpDir();// 0x3605104
	function GetForwardAxis();// 0x15a2d6c
	function GetEndTangent();// 0x36050bc
	function GetEndScale();// 0x360507c
	function GetEndRoll();// 0x3605054
	function GetEndPosition();// 0x360500c
	function GetEndOffset();// 0x3604fcc
	function GetBoundaryMin();// 0x3604fa4
	function GetBoundaryMax();// 0x35f3a2c

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0 , Size: 12]
	Vector StartTangent;//[Offset: 0xc , Size: 12]
	Vector2D StartScale;//[Offset: 0x18 , Size: 8]
	float StartRoll;//[Offset: 0x20 , Size: 4]
	Vector2D StartOffset;//[Offset: 0x24 , Size: 8]
	Vector EndPos;//[Offset: 0x2c , Size: 12]
	Vector EndTangent;//[Offset: 0x38 , Size: 12]
	Vector2D EndScale;//[Offset: 0x44 , Size: 8]
	float EndRoll;//[Offset: 0x4c , Size: 4]
	Vector2D EndOffset;//[Offset: 0x50 , Size: 8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x508 , Size: 4]
	int SectionBaseY;//[Offset: 0x50c , Size: 4]
	int ComponentSizeQuads;//[Offset: 0x510 , Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x514 , Size: 4]
	int NumSubsections;//[Offset: 0x518 , Size: 4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x51c , Size: 4]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x520 , Size: 4]
	MaterialInstanceConstant[] MaterialInstances;//[Offset: 0x524 , Size: 12]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x530 , Size: 12]
	Texture2D[] WeightmapTextures;//[Offset: 0x53c , Size: 12]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x548 , Size: 4]
	Vector4 WeightmapScaleBias;//[Offset: 0x550 , Size: 16]
	float WeightmapSubsectionOffset;//[Offset: 0x560 , Size: 4]
	Vector4 HeightmapScaleBias;//[Offset: 0x570 , Size: 16]
	Texture2D* HeightmapTexture;//[Offset: 0x580 , Size: 4]
	Box CachedLocalBox;//[Offset: 0x584 , Size: 28]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x5a0 , Size: 28]
	Guid MapBuildDataId;//[Offset: 0x5bc , Size: 16]
	Guid[] IrrelevantLights;//[Offset: 0x5cc , Size: 12]
	int CollisionMipLevel;//[Offset: 0x5d8 , Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x5dc , Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x5e0 , Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x5e4 , Size: 4]
	float StaticLightingResolution;//[Offset: 0x5e8 , Size: 4]
	int ForcedLOD;//[Offset: 0x5ec , Size: 4]
	int LODBias;//[Offset: 0x5f0 , Size: 4]
	Guid stateID;//[Offset: 0x5f4 , Size: 16]
	Guid BakedTextureMaterialGuid;//[Offset: 0x604 , Size: 16]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x614 , Size: 4]
	byte MobileBlendableLayerMask;//[Offset: 0x618 , Size: 1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x61c , Size: 4]
	Texture2D* MobileWeightNormalmapTexture;//[Offset: 0x620 , Size: 4]
	uint16[] CachedHeightData;//[Offset: 0x624 , Size: 12]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0 , Size: 4]
	byte WeightmapTextureIndex;//[Offset: 0x4 , Size: 1]
	byte WeightmapTextureChannel;//[Offset: 0x5 , Size: 1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x20 , Size: 8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x28 , Size: 4]
	float Hardness;//[Offset: 0x2c , Size: 4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x30 , Size: 16]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject[] ComponentLayerInfos;//[Offset: 0x508 , Size: 12]
	int SectionBaseX;//[Offset: 0x514 , Size: 4]
	int SectionBaseY;//[Offset: 0x518 , Size: 4]
	int CollisionSizeQuads;//[Offset: 0x51c , Size: 4]
	float CollisionScale;//[Offset: 0x520 , Size: 4]
	int SimpleCollisionSizeQuads;//[Offset: 0x524 , Size: 4]
	byte[] CollisionQuadFlags;//[Offset: 0x528 , Size: 12]
	Guid HeightfieldGuid;//[Offset: 0x534 , Size: 16]
	Box CachedLocalBox;//[Offset: 0x544 , Size: 28]
	LandscapeComponent* RenderComponent;//[Offset: 0x560 , Size: 28]
	PhysicalMaterial[] CookedPhysicalMaterials;//[Offset: 0x588 , Size: 12]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x65c , Size: 12]
	int NumBuiltInstances;//[Offset: 0x668 , Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x670 , Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x68c , Size: 28]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x6a8 , Size: 12]
	int[] UnbuiltInstanceIndexList;//[Offset: 0x6b4 , Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c0 , Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x6e0 , Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x6e4 , Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x705 , Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x708 , Size: 4]
	function RemoveInstances();// 0x351ad88

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x5b0 , Size: 12]
	int InstancingRandomSeed;//[Offset: 0x5bc , Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x5c0 , Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x5c4 , Size: 4]
	int[] InstanceReorderTable;//[Offset: 0x5c8 , Size: 12]
	int[] RemovedInstances;//[Offset: 0x5d4 , Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0 , Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e1 , Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x640 , Size: 4]
	int NumPendingLightmaps;//[Offset: 0x644 , Size: 4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x648 , Size: 12]
	function UpdateInstanceTransform();// 0x3525270
	function SetCullDistances();// 0x35251b4
	function RemoveInstance();// 0x352512c
	function GetInstanceTransform();// 0x3524f90
	function GetInstancesOverlappingSphere();// 0x3524dd4
	function GetInstancesOverlappingBox();// 0x3524c3c
	function GetInstanceCount();// 0x27c8810
	function ClearInstances();// 0x14e3dc0
	function AddInstanceWorldSpace();// 0x3524b30
	function AddInstance();// 0x3524a10

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0 , Size: 64]

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: StructBoneOverride
	FName BoneName;//[Offset: 0x0 , Size: 8]
	float Density;//[Offset: 0x8 , Size: 4]
	float TestRadius;//[Offset: 0xc , Size: 4]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0xbc , Size: 12]
	float MinCorrectionInterval;//[Offset: 0xc8 , Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0xcc , Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xd0 , Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xd4 , Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0xd8 , Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0xdc , Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0xe0 , Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0xe4 , Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0xe8 , Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0xec , Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0xf0 , Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0xf4 , Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0xf8 , Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0xfc , Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x100 , Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	float StaticFixLocation;//[Offset: 0x108 , Size: 4]
	float StaticFixAngel;//[Offset: 0x10c , Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x110 , Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x114 , Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118 , Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a , Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b , Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x11c , Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x120 , Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x21c , Size: 60]
	function VerifyClientTimeStamp();// 0x15ac8c4
	function SendServerMoveToClient();// 0x15ac708
	function SendClientMoveToServerUnreliably();// 0x15ac510
	function SendClientMoveToServerReliably();// 0x15ac318
	function SendClientMoveToServerInternal();// 0x15ac0bc
	function SendClientMoveToServer_WithDelay();// 0x15abeb0
	function SendClientMoveToServer_DoWork();// 0x15abca0
	function SendClientHitToServerUnreliably();// 0x15ab9cc
	function SendClientHitToServerReliably();// 0x15ab6f8
	function OnHitAtServer();// 0x15ab590
	function OnHitAtClient();// 0x15ab428
	function OnDriverRide();// 0x15ab414
	function HandleOnSeatDetached();// 0x15ab30c
	function HandleOnSeatChanged();// 0x15ab174
	function HandleOnSeatAttached();// 0x15ab06c
	function GetRiders();// 0x15aafac
	function GetLanscapeHeight();// 0x15aaf20
	function GetFloorPosition();// 0x15aae40
	function DragUnderGround();// 0x15aae2c
	function Correct();// 0x15aad14
	function ClientHitActor();// 0x15aabe0
	function CheckAndLoadLandscape();// 0x155be80
	function ApplyRigidBodyState();// 0x15aab10
	function AdjustFloorPosition();// 0x15aa988

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0 , Size: 1]
	byte ViewYaw;//[Offset: 0x1 , Size: 1]
	byte ViewRoll;//[Offset: 0x2 , Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x2e8 , Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x2ec , Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x2f0 , Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4 , Size: 1]
	Rotator RelativeToOwnerRotator;//[Offset: 0x2f8 , Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318 , Size: 1]
	float MinPitch;//[Offset: 0x31c , Size: 4]
	float MaxPitch;//[Offset: 0x320 , Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324 , Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x328 , Size: 4]
	float ResultMinPitch;//[Offset: 0x36c , Size: 4]
	float ResultMaxPitch;//[Offset: 0x370 , Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x374 , Size: 4]
	function ForceUpdateDesiredArmLocation();// 0x1407d60
	function DelayRotationLagEnabledEnd();// 0x139c4bc
	function DelayRotationLagEnabled();// 0x15aa15c

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x238 , Size: 4]
	Vector SocketOffset;//[Offset: 0x23c , Size: 12]
	Vector TargetOffset;//[Offset: 0x248 , Size: 12]
	float ProbeSize;//[Offset: 0x254 , Size: 4]
	byte ProbeChannel;//[Offset: 0x258 , Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x259 , Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x259 , Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x259 , Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x259 , Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x259 , Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x259 , Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x259 , Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x259 , Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25a , Size: 1]
	float CameraLagSpeed;//[Offset: 0x25c , Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x260 , Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x264 , Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x268 , Size: 4]
	function SetActive();// 0x34aaa24
	function GetTargetRotation();// 0x36070a0

--------------------------------
Class: VehicleAntiCheatTask.Object

--------------------------------
Class: ESTAINoiseEventParams
	enum noiseType;//[Offset: 0x0 , Size: 1]
	float Loudness;//[Offset: 0x4 , Size: 4]
	float StartAttenuationDist;//[Offset: 0x8 , Size: 4]
	float MaxRange;//[Offset: 0xc , Size: 4]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.SceneComponent.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x3ec , Size: 12]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x3f8 , Size: 12]
	bool bFPPMeshLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x404 , Size: 1]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x405 , Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x408 , Size: 12]
	function PreChangeVehicleFPPMode();// 0x15a5910
	function PreChangeVehicleBrokenMataterial();// 0x15a58fc
	function PreChangeVehicleAvatar();// 0x142d500
	function PreChangeItemAvatar();// 0x1436f28
	function PostChangeItemAvatar();// 0x142d4e4
	function GetVehicleFPPStaticMeshPath();// 0x15a5878
	function GetVehicleFPPSkeletalMeshPath();// 0x15a57f4
	function GetVehicleFPPMatPath();// 0x15a569c
	function GetVehicleBrokenMatPath();// 0x15a5544
	function GetItemAvatarHandlePath();// 0x1ddc250
	function GetItemAvatarHandle();// 0x1ddc250
	function ExitFPPVehicle();// 0x15a5530
	function EnterFPPVehicle();// 0x15a551c
	function CheckIsNeedEnterFPPVehicle();// 0x15a54f4

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.SceneComponent.ActorComponent.Object
	ItemDefineID DefaultCfg;//[Offset: 0x278 , Size: 24]
	MeshComponent* ItemBodyMesh;//[Offset: 0x290 , Size: 4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x298 , Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x350 , Size: 4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x354 , Size: 4]
	int ItemType;//[Offset: 0x358 , Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x360 , Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x388 , Size: 40]
	<FString,Object> AssetObjectMap;//[Offset: 0x3b0 , Size: 60]
	function SetMasterStaticMeshPath();// 0x14370c4
	function SetMasterSkeletalMeshPath();// 0x1436fbc
	function ResetItemAvatar();// 0x1436fa8
	function PreChangeItemAvatar();// 0x1436f28
	function OnRep_ItemAvatarChanged();// 0x1436f14
	function IsValidAvatar();// 0x1436ef0
	function GetValidAvatarHandle();// 0x1436ec0
	function GetSoftRefObj();// 0x1436de4
	function GetDynamicMaterial();// 0x1436d64
	function ChangeItemAvatar();// 0x1436ca0
	function AsyncChangeItemAvatar();// 0x1436c20
	function ApplyMesh();// 0x1436b10
	function ApplyMaterial();// 0x1436988
	function AddAssetSoftObject();// 0x142d3a8

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0 , Size: 24]
	byte UpdateFlag;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarData[] ItemAvatarMats;//[Offset: 0x9c , Size: 12]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0xa8 , Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0xd0 , Size: 40]
	function HandleUse();// 0x13bcb40
	function HandlePickup();// 0x13bc72c
	function HandleDrop();// 0x13bc238
	function HandleDisuse();// 0x13bc1b0
	function GetBackpackComponent();// 0x13bee98
	function CheckCanPickUp();// 0x13bedd4

--------------------------------
Class: ItemAvatarData
	FName SlotID;//[Offset: 0x0 , Size: 8]
	MaterialInterface* MatInstance;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618 , Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619 , Size: 1]
	int VehicleSkinID;//[Offset: 0x61c , Size: 4]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620 , Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x628 , Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x650 , Size: 40]
	VehicleStyleData[] LogicStyleData;//[Offset: 0x678 , Size: 12]
	delegate OnStyleEquippedEvent;//[Offset: 0x684 , Size: 12]
	delegate OnStyleUnequippedEvent;//[Offset: 0x690 , Size: 12]
	function Streamable_RequestAsyncLoadMeshes();// 0x14b2828
	function SetVehicleAvatarNormalMode();// 0x15a3294
	function SetVehicleAvatarFPPMode();// 0x15a3280
	function SetVehicleAvatarBroken();// 0x15a326c
	function SetMasterBaseMeshPath();// 0x15a31b0
	function SetMasterBaseMeshAnimBP();// 0x15a30f4
	function ResetAdvanceVehicleSkinID();// 0x15a30d8
	function RemoveAllEquippedStyle();// 0x15a30c4
	function ProcessHandleUnequip();// 0x15a3044
	function ProcessHandleEquip();// 0x15a2fc4
	function PreProcessBeforeLoadMesh();// 0x13f4904
	function PerChangeVehicleAvatar_Old();// 0x15a2f4c
	function PerChangeVehicleAvatar();// 0x15a2ed4
	function OnStyleUnequippedEvent__DelegateSignature();// 0x1ddc250
	function OnStyleEquippedEvent__DelegateSignature();// 0x1ddc250
	function OnRep_VehicleSkinIDChanged();// 0x15a2ec0
	function OnRep_BodySlotStateChanged();// 0x13f4774
	function MakeVehicleStyleData();// 0x1ddc250
	function IsValidAvatar();// 0x15a2e98
	function IsStyleHasModelConfig();// 0x15a2dbc
	function IsAvatarFPPMode();// 0x15a2d94
	function IsAvatarBroken();// 0x15a2d6c
	function InitVehicleAvatarBySkinID_Old();// 0x15a2ce4
	function InitVehicleAvatarBySkinID();// 0x15a2c5c
	function InitVehicleAvatar_Old();// 0x15a2b50
	function InitVehicleAvatar();// 0x15a2a44
	function InitMasterComponent();// 0x15a2a30
	function Initialize();// 0x13f3aec
	function InitialAvatarParam();// 0x139c4bc
	function HasStyleEquipped();// 0x15a29b0
	function HasEquippedSameStyle();// 0x15a2930
	function HandleUnequipStyle();// 0x15a28b0
	function HandleEquipStyle();// 0x15a2830
	function GetSlotMeshType();// 0x13f33f0

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x3fc , Size: 4]
	<int,FName> slotToSocket;//[Offset: 0x400 , Size: 60]
	<int,ItemDefineID> DefaultAvataConfig;//[Offset: 0x43c , Size: 60]
	<int,SlotMeshDesc> LoadedMeshComps;//[Offset: 0x478 , Size: 60]
	<int,SlotHandleDesc> LoadedHandleDescs;//[Offset: 0x4b4 , Size: 60]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x4f0 , Size: 12]
	delegate OnAvatarMeshEquipped;//[Offset: 0x4fc , Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508 , Size: 1]
	ItemHandleBase[] LoadedAvatarHandlerPool;//[Offset: 0x50c , Size: 12]
	int AsyncLoadReqID;//[Offset: 0x5b0 , Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x5b4 , Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8 , Size: 1]
	AvatarEntity[] EntityTickList;//[Offset: 0x5cc , Size: 12]
	<int,AvatarEntity> AvatarEntityList;//[Offset: 0x5d8 , Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x614 , Size: 4]
	function Streamable_RequestAsyncLoadMeshes();// 0x14b2828
	function Streamable_RequestAsyncLoadHandles();// 0x13f5448
	function SetMeshVisibleByID();// 0x13f5090
	function SetDefaultEquip();// 0x14b2784
	function ResetSlotSyncData();// 0x13ef5c4
	function RequestSyncLoadMeshes();// 0x14b2770
	function RequestAsyncLoadMeshes();// 0x14b275c
	function RequestAsyncLoadHandles();// 0x14b2748
	function RemoveEquippedAvatar();// 0x14b26c8
	function RemoveAllEquippedAvatar();// 0x14b2640
	function ReloadLogicAvatar();// 0x14b2530
	function ReloadAllLogicAvatar();// 0x14b24b0
	function ReloadAllEquippedAvatar();// 0x13f493c
	function PutOnEquipmentByResID();// 0x14b2428
	function PutOffEquimentByResID();// 0x13b0954
	function PreProcessBeforeLoadMesh();// 0x13f4904
	function PostProcessAfterLoadMesh();// 0x13f48e8
	function OnSyncLoadMeshesDone();// 0x14b2414
	function OnRep_BodySlotStateChanged();// 0x13f4774
	function OnAvatarMeshEquippedEvent();// 0x13f445c
	function OnAvatarMeshEquipped__DelegateSignature();// 0x1ddc250
	function OnAvatarAllMeshLoaded__DelegateSignature();// 0x1ddc250
	function OnAsyncLoadMeshesDone();// 0x13f42d0
	function OnAsyncLoadHandlesDone();// 0x14b22b4
	function OnAllAvatarHandleLoadedDoneSync();// 0x14b22a0
	function OnAllAvatarHandleLoadedDone();// 0x14b228c
	function LoadAvatarMeshData();// 0x13f4098
	function IsSlotHasEquipped();// 0x14b21c0
	function IsMasterMeshSlotID();// 0x13f3cc0
	function IsItemHasEquipped();// 0x14b2140
	function IsDefautlAvatarID();// 0x14ad5e0
	function GetSlotMeshType();// 0x13f33f0
	function GetMeshType();// 0x14b20b8
	function GetMeshCompBySlotID();// 0x14b2038
	function GetMeshCompBySlot();// 0x13f32b4
	function GetLoadedItemHandlePool();// 0x14b1fc8
	function GetFakeAvatarHandleItem_InDev();// 0x14b1eb8
	function GetFakeAvatarHandleItem();// 0x14b1da8
	function GetEntityFactory();// 0x14b1d78
	function GetAvatarHandleExternal();// 0x14b1c94
	function GetAvatarEntity();// 0x14b1b8c
	function GenerateDefaultAvatarConfig();// 0x1ddc250
	function DeleteAvatarMeshData();// 0x13f28d4
	function CreateAvatarHandle();// 0x13f27f0
	function CreateAvatarEntity();// 0x14b1ac8
	function CheckSlotInfo();// 0x14b18e0
	function BuildLoadHandleList();// 0x14b1814
	function BPGetSlotMeshType();// 0x14b1704
	function BPCreateAvatarCustomHandle();// 0x1ddc250

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	<int,AvatarSlotDesc> LogicSlotDesc;//[Offset: 0x274 , Size: 60]
	<int,AvatarSlotDesc> ViewSlotDesc;//[Offset: 0x2b0 , Size: 60]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x2ec , Size: 20]
	AvatarSlotDesc[] PendingEquipItemLogic;//[Offset: 0x300 , Size: 12]
	AvatarSlotDesc[] PendingUnEquipItemLogic;//[Offset: 0x30c , Size: 12]
	delegate OnAvatarEquippedEvent;//[Offset: 0x318 , Size: 12]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x324 , Size: 12]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x330 , Size: 12]
	int ItemType;//[Offset: 0x33c , Size: 4]
	enum CustomType;//[Offset: 0x340 , Size: 1]
	bool forceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341 , Size: 1]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348 , Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x349 , Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34a , Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34b , Size: 1]
	int SubSlotStartNum;//[Offset: 0x34c , Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x350 , Size: 4]
	int[] AlawysHideResetOperation;//[Offset: 0x3d8 , Size: 12]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4 , Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x3e8 , Size: 12]
	function RemoveAllEquippedItem();// 0x14ae108
	function OnRep_BodySlotStateChanged();// 0x13f4774
	function OnLoadAvatarSlotDesc();// 0x13f46a4
	function OnHandleUnequipSlot();// 0x14ae090
	function OnHandleUnequipItem();// 0x14adfec
	function OnHandleEquipItem();// 0x14adf48
	function OnDeleteAvatarSlotDesc();// 0x13f4588
	function OnAvatarUnequippedEvent__DelegateSignature();// 0x1ddc250
	function OnAvatarLogicUnequippedEvent();// 0x14ade70
	function OnAvatarLogicEquippedEvent();// 0x14add44
	function OnAvatarEquippedFailedEvent__DelegateSignature();// 0x1ddc250
	function OnAvatarEquippedEvent__DelegateSignature();// 0x1ddc250
	function OnAvatarConflictProcess__DelegateSignature();// 0x1ddc250
	function ModifyViewDataByReplace();// 0x14adc34
	function ModifyViewDataByHide();// 0x14adb24
	function ModifySyncDataByReplace();// 0x14ada14
	function ModifySyncDataByHide();// 0x14ad904
	function MakeStateInfo();// 0x14ad830
	function MakeAvatarTableData();// 0x14ad764
	function IsSameAvatarItem();// 0x13f3e44
	function IsItemHasMutilReplaceMesh();// 0x14ad680
	function IsItemBlueprintExist();// 0x13f3b90
	function IsDefautlAvatarID();// 0x14ad5e0
	function HasLogicEquipped();// 0x14ad548
	function HandleUnequipSlot();// 0x14ad4c8
	function HandleUnequipItem();// 0x14ad430
	function HandleItemSlotState();// 0x14ad250
	function HandleItemResetOrderDesc();// 0x14ad23c
	function HandleItemResetOperation();// 0x14ad228
	function HandleItemReplaceRelation();// 0x14ad214
	function HandleItemHideRelation();// 0x14ad200
	function HandleEquipItem();// 0x14ad104
	function GetViewDataStateFor();// 0x14acf5c
	function GetViewDataStateBy();// 0x14acdb4
	function GetViewDataItemID();// 0x14accd8
	function GetViewDataBySlot();// 0x14acbc4
	function GetSyncDataStateFor();// 0x14aca1c
	function GetSyncDataStateBy();// 0x14ac874
	function GetSyncDataItemID();// 0x14ac798
	function GetSyncDataBySlot();// 0x14ac6a8
	function GetLogicEquippedSlot();// 0x14ac610
	function GetItemTemplateID();// 0x14ac570
	function GetEquippedItemDefineID();// 0x14ac4dc
	function GetAvatarSlotID();// 0x14ac45c
	function ClientPostProcessViewDataMiddle();// 0x14ac440
	function ClientPostProcessViewDataBefore();// 0x14ac424
	function ClientPostProcessViewDataAfter();// 0x14ac408
	function ClientBodySlotStateChanged();// 0x14ac3f4
	function CheckItemConflictRule();// 0x14ac2ac
	function BuildAvatarItemMap();// 0x14ac0cc
	function BPClientPostProcessViewDataMiddle();// 0x14ac09c
	function BPClientPostProcessViewDataBefore();// 0x14ac06c
	function BPClientPostProcessViewDataAfter();// 0x14ac03c

--------------------------------
Class: AvatarSlotDesc
	int SlotID;//[Offset: 0x0 , Size: 4]
	int subSlotID;//[Offset: 0x4 , Size: 4]
	ItemDefineID ItemDefineID;//[Offset: 0x8 , Size: 24]
	ItemDefineID RealShowItemDefineID;//[Offset: 0x20 , Size: 24]
	int gender;//[Offset: 0x38 , Size: 4]
	int HideState;//[Offset: 0x3c , Size: 4]
	int ReplaceState;//[Offset: 0x40 , Size: 4]
	AvatarCustom CustomInfo;//[Offset: 0x44 , Size: 20]
	enum SlotDescDiff;//[Offset: 0x58 , Size: 1]
	ItemDefineID OldItemDefineID;//[Offset: 0x60 , Size: 24]

--------------------------------
Class: AvatarCustom
	enum CustomType;//[Offset: 0x0 , Size: 1]
	int ColorID;//[Offset: 0x4 , Size: 4]
	int PatternID;//[Offset: 0x8 , Size: 4]
	int NumID;//[Offset: 0xc , Size: 4]
	int ParticleID;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: NetAvatarSyncData
	AvatarSyncData[] SlotSyncData;//[Offset: 0x0 , Size: 12]
	int gender;//[Offset: 0xc , Size: 4]
	int BaseID;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: AvatarSyncData
	int ItemID;//[Offset: 0x0 , Size: 4]
	int AdditionalItemID;//[Offset: 0x4 , Size: 4]
	int SlotID;//[Offset: 0x8 , Size: 4]
	int subSlotID;//[Offset: 0xc , Size: 4]
	int HideState;//[Offset: 0x10 , Size: 4]
	int ReplaceState;//[Offset: 0x14 , Size: 4]
	int FakeItemID;//[Offset: 0x18 , Size: 4]
	enum ForceDescDiff;//[Offset: 0x1c , Size: 1]
	enum operationType;//[Offset: 0x1d , Size: 1]
	AvatarCustom CustomInfo;//[Offset: 0x20 , Size: 20]

--------------------------------
Class: SlotMeshDesc
	int SlotID;//[Offset: 0x0 , Size: 4]
	MeshComponent* meshComp;//[Offset: 0x4 , Size: 8]
	ParticleGroup ParticleGroup;//[Offset: 0xc , Size: 36]

--------------------------------
Class: ParticleGroup
	ParticleSystem[] ParticleSystemList;//[Offset: 0x0 , Size: 12]
	ParticleSystemComponent[] ParticleCompList;//[Offset: 0xc , Size: 12]
	ParticleAsset[] ParticleAssetList;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: ParticleAsset
	Transform Transform;//[Offset: 0x0 , Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30 , Size: 40]
	FName AttachSocket;//[Offset: 0x58 , Size: 8]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x60 , Size: 12]
	bool bLimitCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c , Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d , Size: 1]

--------------------------------
Class: SlotHandleDesc
	int SlotID;//[Offset: 0x0 , Size: 4]
	ItemHandleBase* EquipHandle;//[Offset: 0x4 , Size: 8]
	AvatarCustomBase[] CustomHandles;//[Offset: 0xc , Size: 12]
	SoftObjectPath EquipMeshAssetPath;//[Offset: 0x18 , Size: 24]

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	CustomMatConfig[] MatConfigs;//[Offset: 0x30 , Size: 12]
	function SetCustomMatParam();// 0x14046cc
	function AsyncLoadCustomAssetDone();// 0x14046b8
	function ApplyCustomInfo();// 0x14031c8

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x1c , Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x20 , Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28 , Size: 8]
	function SetCustomID();// 0x1404340
	function GetOwnerMeshComp();// 0x1404318
	function GetOwnerComp();// 0x14042f0
	function ClearCustomInfo();// 0x140320c
	function ApplyCustomInfo();// 0x14031c8

--------------------------------
Class: CustomMatConfig
	FName SlotName;//[Offset: 0x0 , Size: 8]
	CustomMatScalar[] ScalarConfig;//[Offset: 0x8 , Size: 12]
	CustomMatColor[] ColorConfig;//[Offset: 0x14 , Size: 12]
	CustomMatTextrue[] TextrueConfig;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: CustomMatScalar
	FName ParamName;//[Offset: 0x0 , Size: 8]
	FName Tips;//[Offset: 0x8 , Size: 8]
	float Scalar;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: CustomMatColor
	FName ParamName;//[Offset: 0x0 , Size: 8]
	FName Tips;//[Offset: 0x8 , Size: 8]
	LinearColor Color;//[Offset: 0x10 , Size: 16]

--------------------------------
Class: CustomMatTextrue
	FName ParamName;//[Offset: 0x0 , Size: 8]
	FName Tips;//[Offset: 0x8 , Size: 8]
	Texture* Textrue;//[Offset: 0x10 , Size: 40]
	FString TextruePath;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c , Size: 4]
	int subSlotID;//[Offset: 0x20 , Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24 , Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28 , Size: 4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c , Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30 , Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38 , Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x98 , Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9 , Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa , Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb , Size: 1]
	FName SocketName;//[Offset: 0x100 , Size: 8]
	ParticleSystemComponent[] ParticleComponents;//[Offset: 0x108 , Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118 , Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x130 , Size: 24]
	<FString,AvatarEntity> SubEntityList;//[Offset: 0x148 , Size: 60]
	function UpdateVisibility();// 0x13b3b1c
	function UnRegisterTick();// 0x13b3b00
	function TickEntity();// 0x13b3ae4
	function SetSocketName();// 0x13b3ac8
	function SetParentDefineID();// 0x13b3a3c
	function SetAvatarVisibility();// 0x13b3964
	function RevertEntityMeshData();// 0x13b3950
	function RenderEntity();// 0x13b3874
	function RegisterTick();// 0x13b3858
	function PutOnEquipmentLogic();// 0x13b37d0
	function PutOnDefaultEquipment();// 0x13b3750
	function OnPostRender();// 0x13b3734
	function IsEntityAvailable();// 0x13b36ac
	function InitWidgetComponent();// 0x13b35e0
	function Init();// 0x13b34d8
	function GetMeshType();// 0x13b34a8
	function GetMeshData();// 0x13b3444
	function GetLoadedHandle();// 0x13b341c
	function GetDefineID();// 0x13b33c8
	function EnterRenderPipeline();// 0x13b33ac
	function EnterLogicPipeline();// 0x13b3390
	function DrawOutline();// 0x13b3308
	function CreateAndApplyResource();// 0x13b3224
	function ClearEquipmentRenderData();// 0x13b3158
	function ClearEquipmentLogic();// 0x13b30d0
	function ClearEntity();// 0x13b3048
	function ApplyAnimation();// 0x13b302c
	function ApplaySocketRelativeTransform();// 0x13b2fac

--------------------------------
Class: AvatarEntityFactory.Object
	function CreateEntity();// 0x13b45a4

--------------------------------
Class: VehicleStyleData
	int StyleID;//[Offset: 0x0 , Size: 4]
	enum slotType;//[Offset: 0x4 , Size: 1]
	VehicleStyle[] MutilStyles;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: VehicleStyle
	enum StyleType;//[Offset: 0x0 , Size: 1]
	int StyleValue;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4a8 , Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4b4 , Size: 12]
	DefaultWeaponHolderInfo[] WeaponInfoList;//[Offset: 0x4c0 , Size: 12]
	function StopFireFilter();// 0x15bd438
	function StopFire();// 0x15bd3c0
	function StartFireFilter();// 0x15bd338
	function StartFireBySlot();// 0x15bd27c
	function SpawnWeaponOnServer();// 0x15bd03c
	function SpawnAndBackpackWeaponOnServer();// 0x15bce28
	function ReloadWeaponFilter();// 0x15bcda0
	function ReloadCurrentWeapon();// 0x15bcd20
	function OnRep_CurrentWeaponReplicated();// 0x14a3f44
	function OnReconnectOnServer();// 0x13fa1b0
	function LocalStopFire();// 0x15bcca8
	function LocalStartFire();// 0x15bcb5c
	function LocalStartBarrel();// 0x15bcae4
	function LocalHandleWeaponSystemDataOnSimulate();// 0x15bca34
	function LocalEquipWeapon();// 0x15bc978
	function DoAutoReloadCurrentWeapon();// 0x15bc900
	function DelayFire();// 0x15bc83c

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<FName,FName> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xbc , Size: 60]
	FName LeftLogicSocketName;//[Offset: 0xf8 , Size: 8]
	FName RightLogicSocketName;//[Offset: 0x100 , Size: 8]
	<FName,FName> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x108 , Size: 60]
	<FName,byte> LogicSocketToPropSlotMap;//[Offset: 0x144 , Size: 60]
	<FName,class STExtraWeapon> UGrenadeLogicSocketToWeaponClassMap;//[Offset: 0x180 , Size: 60]
	<FName,class STExtraWeapon> GrenadeLogicSocketToWeaponClassMap;//[Offset: 0x1bc , Size: 60]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x1f8 , Size: 4]
	FName CurUseWeaponLogicSocket;//[Offset: 0x200 , Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x208 , Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210 , Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x218 , Size: 8]
	FName LastUseNoneMeleeLogicSlot;//[Offset: 0x220 , Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x228 , Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230 , Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231 , Size: 1]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x234 , Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x240 , Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x24c , Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x258 , Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x264 , Size: 12]
	<FName,STExtraWeapon> InventoryData;//[Offset: 0x288 , Size: 60]
	<FName,ItemDefineID> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x2c4 , Size: 60]
	STExtraWeapon[] BackpackPistolList;//[Offset: 0x300 , Size: 12]
	ItemDefineID[] TargetCreateArray;//[Offset: 0x310 , Size: 12]
	SpawnAndBackpackWeaponReplicatedData[] WeaponCreatePool;//[Offset: 0x320 , Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x330 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x368 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x3a0 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x3d8 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x410 , Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x44c , Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x450 , Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x454 , Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x458 , Size: 4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x48c , Size: 4]
	FString MainWeaponTableName;//[Offset: 0x49c , Size: 12]
	function WeaponSystemDataChangedDelegate__DelegateSignature();// 0x1ddc250
	function UpdateOwnerClientCreateWeapon();// 0x15bf584
	function SwitchWeaponBySlot();// 0x15bf4c0
	function SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x15bf4ac
	function SwapWeaponByPropSlotFinishedDelegate__DelegateSignature();// 0x1ddc250
	function SimulatedWeaponChangedDelegate__DelegateSignature();// 0x1ddc250
	function RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer();// 0x15bf434
	function OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x15bf420
	function OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x15bf40c
	function OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x15bf3f8
	function OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x15bf3e4
	function OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x15bf3d0
	function OnRep_CurrentWeaponReplicated();// 0x14a3f44
	function OnRep_CurrentWeaponLogicSocket();// 0x15bf3bc
	function OnRep_CurrentShieldWeaponReplicated();// 0x15bf3a8
	function OnReconnectOnServer();// 0x13fa1b0
	function OnReconnectOnClient();// 0x13fa194
	function LogInventoryDataInfo();// 0x15bf394
	function LocalSwapWeaponByPropSlot();// 0x15bf284
	function LocalForceFinishSwitchWeapon();// 0x15bf270
	function LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x1ddc250
	function LocalEquipWeaponFromBackpackFinishedCallback();// 0x15bf25c
	function LocalBackpackCurerrentWeaponFinishedCallback();// 0x15bf248
	function LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x1ddc250
	function IsWeaponSpawnDataCacheIsEmpty();// 0x15bf220
	function IsCreatingWeaponOnServer();// 0x15bf1ec
	function InitializeTable();// 0x15bf09c
	function GetShieldWeaponSlot();// 0x15bf05c
	function GetShieldWeapon();// 0x15bf034
	function GetPropSlotByLogicSocket();// 0x15befb4
	function GetMainWeaponTableRow();// 0x15beeac
	function GetLogicSocketBySlot();// 0x15bee24
	function GetInventoryWeaponByPropSlotOnServerOrAutonomousClient();// 0x15beda4
	function GetInventoryWeaponByPropSlot();// 0x15bed24
	function GetInventoryWeaponByLogicSocket();// 0x15beca4
	function GetGrenadeSpecificSlotNameByWeapon();// 0x15bec1c
	function GetGrenadeDefindIDBySlot();// 0x15beb84
	function GetCurrentUsingWeapon();// 0x15beb5c
	function GetCurrentUsingPropSlot();// 0x15beb34
	function GetCurrentUsingLogicSocketOnServer();// 0x15beaf4
	function GetCurrentUsingLogicSocket();// 0x15beaf4
	function GetBagLevel();// 0x13fa150
	function GetAllInventoryWeaponList();// 0x15be9e4
	function ForceBroadcastChangeAllInventoryDataEvent();// 0x15be9d0
	function EnableAllBroadcast();// 0x15be954
	function DropWeapon();// 0x15be890
	function DeleteGrenadeSlotAndDefindID();// 0x15be818
	function DebugReconnectToClientOnServer();// 0x15be804
	function DebugDisconnetToServerOnClient();// 0x15be7f0
	function ChangeInventoryDataDelegate__DelegateSignature();// 0x1ddc250
	function ChangeCurrentUsingWeaponDelegate__DelegateSignature();// 0x1ddc250
	function AddOrSetGrenadeSlotAndDefindID();// 0x15be71c

--------------------------------
Class: WeaponReconnectReplicateDataWrapper
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x0 , Size: 96]
	STExtraWeapon* Weapon;//[Offset: 0x60 , Size: 4]

--------------------------------
Class: DefaultWeaponHolderInfo
	class STExtraWeapon* WeaponClass;//[Offset: 0x0 , Size: 4]
	FName WeaponSocket;//[Offset: 0x8 , Size: 8]
	int WeaponSepcificID;//[Offset: 0x10 , Size: 4]
	int WeaponTypeID;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0 , Size: 4]
	FName LogicSocket;//[Offset: 0x8 , Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	ItemDefineID ID;//[Offset: 0x18 , Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	int OperationIndex;//[Offset: 0x34 , Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x38 , Size: 4]
	FString OwnerCharacterName;//[Offset: 0x3c , Size: 12]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0 , Size: 4]
	FName LogicSocket;//[Offset: 0x8 , Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	ItemDefineID ID;//[Offset: 0x18 , Size: 24]
	int OperationIndex;//[Offset: 0x30 , Size: 4]
	int BagLevel;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: GameModePlayerAliasShowInfo
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x0 , Size: 32]
	FString PlayerName;//[Offset: 0x20 , Size: 12]
	STExtraBaseCharacter* Character;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: MonsterTreasureBoxData
	float BoxStartTime;//[Offset: 0x0 , Size: 4]
	Vector BoxLocation;//[Offset: 0x4 , Size: 12]
	uint64 BoxStartPlayer;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: IdeaDecalActor.Actor.Object
	SceneComponent* DecalRootComp;//[Offset: 0x2c0 , Size: 4]
	int DecalId;//[Offset: 0x2c4 , Size: 4]
	IdeaDecalInfo DecalInfo;//[Offset: 0x2d0 , Size: 112]
	STExtraPlayerState* OwnerPS;//[Offset: 0x340 , Size: 4]
	STExtraVehicleBase* Vehicle;//[Offset: 0x344 , Size: 8]
	function OnRep_DecalInfo();// 0x1433bd0

--------------------------------
Class: IdeaDecalInfo
	int ID;//[Offset: 0x0 , Size: 4]
	Transform Transform;//[Offset: 0x10 , Size: 48]
	enum ParentType;//[Offset: 0x50 , Size: 1]
	PrimitiveComponent* Parent;//[Offset: 0x54 , Size: 8]

--------------------------------
Class: PlayerStaticInfoInOB
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	FString PlayerOpenID;//[Offset: 0xc , Size: 12]
	FString PicUrl;//[Offset: 0x18 , Size: 12]
	int TeamID;//[Offset: 0x24 , Size: 4]
	uint64 UID;//[Offset: 0x28 , Size: 8]
	uint32 PlayerKey;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: HitEnemyData
	Vector HitLocation;//[Offset: 0x0 , Size: 12]
	bool bNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	uint32 HittedPlayerID;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: TeammateConveyStatus
	bool bIsInFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float PreFireTime;//[Offset: 0x4 , Size: 4]
	float FireSignContinueTime;//[Offset: 0x8 , Size: 4]
	bool bIsInDamaing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float PreDamageTime;//[Offset: 0x10 , Size: 4]
	float DamageSignContinueTime;//[Offset: 0x14 , Size: 4]
	bool bIsInQuickChat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	float PreQuickChatTime;//[Offset: 0x1c , Size: 4]
	float QuickChatSignContinueTime;//[Offset: 0x20 , Size: 4]
	int VoiceState;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: MarkSyncData
	enum Status;//[Offset: 0x0 , Size: 1]
	int TypeID;//[Offset: 0x4 , Size: 4]
	Vector Location;//[Offset: 0x8 , Size: 12]
	Rotator Rotation;//[Offset: 0x14 , Size: 12]
	int InstanceID;//[Offset: 0x20 , Size: 4]
	CustomMarkEventData CustomMarkEvent;//[Offset: 0x24 , Size: 24]
	enum MapAdded;//[Offset: 0x3c , Size: 1]
	bool bLocalData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d , Size: 1]
	Property[] DeltaProperties;//[Offset: 0x40 , Size: 12]

--------------------------------
Class: CustomMarkEventData
	float CreateTime;//[Offset: 0x0 , Size: 4]
	int CustomState;//[Offset: 0x4 , Size: 4]
	FString CustomString;//[Offset: 0x8 , Size: 12]
	enum InWhichMap;//[Offset: 0x14 , Size: 1]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	PUBGDoor* TriggeredDoor;//[Offset: 0xbc , Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xc0 , Size: 4]
	function SetAutoOpenDoorMode();// 0x1400304
	function SetAutoOpenDoorEnable();// 0x1400284
	function RPC_Server_DoorState();// 0x1400188
	function RPC_Client_DoorState();// 0x140008c
	function IsAimingExtraDoor();// 0x140000c
	function GetPriorityDoor();// 0x13fffe4
	function DoorRequireRPC();// 0x13ffe8c
	function BP_SimulateUIClick();// 0x1ddc250
	function BP_ShowDoorBtn();// 0x1ddc250

--------------------------------
Class: PUBGDoor.UAENetActor.Actor.Object
	int iRegionDoor;//[Offset: 0x30c , Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310 , Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311 , Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x314 , Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318 , Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319 , Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x31c , Size: 4]
	float autoOpenAngel;//[Offset: 0x320 , Size: 4]
	float forwardSpeedRatio;//[Offset: 0x324 , Size: 4]
	int doorState;//[Offset: 0x328 , Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c , Size: 1]
	float DoorOperateTime;//[Offset: 0x330 , Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x334 , Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x338 , Size: 4]
	BoxComponent* interForceBox;//[Offset: 0x33c , Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340 , Size: 1]
	int DoorStateEx;//[Offset: 0x344 , Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348 , Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x34c , Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x350 , Size: 4]
	BoxComponent* interForceBoxEx;//[Offset: 0x354 , Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358 , Size: 1]
	enum[] DamageableGameObjectTypeList;//[Offset: 0x35c , Size: 12]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x368 , Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c , Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d , Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36e , Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36f , Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370 , Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371 , Size: 1]
	Character* PlayerCharacter;//[Offset: 0x374 , Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x378 , Size: 4]
	function SetDoorBroken();// 0x148e4e0
	function RefreshUIOnClient();// 0x148e4cc
	function OpenDoorBy();// 0x148e408
	function OnRep_RepDoorStateEx();// 0x148e3f4
	function OnRep_RepDoorState();// 0x148e3e0
	function OnRep_RepDoorBrokenEx();// 0x148e3cc
	function OnRep_RepDoorBroken();// 0x148e3b8
	function OnEndOverlapEx();// 0x148e270
	function OnEndOverlap();// 0x148e128
	function OnDoorRPC();// 0x148e064
	function OnBeginOverlapEx();// 0x148de68
	function OnBeginOverlap();// 0x148dc6c
	function On_DoorAniFinsih();// 0x148dba8
	function IsSameDoorState();// 0x148db28
	function Init();// 0x148d904
	function GetDamageableGameObjectType();// 0x148d83c
	function ForceNetUpdate();// 0x14755ec
	function CloseDoorBy();// 0x148d778
	function ClientDoorRPC();// 0x148d614
	function BP_DoorBroken();// 0x1ddc250
	function ActionDoorOnClient();// 0x1ddc250
	function ActionDoorImmediatly();// 0x1ddc250

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0xc0 , Size: 4]
	FString Reason;//[Offset: 0xc4 , Size: 12]
	int[] audioChat;//[Offset: 0xd0 , Size: 12]
	QuickChatIDAndAudio[] chatQuickList;//[Offset: 0xdc , Size: 12]
	QuickChatIDAndAudio[] TurnplateChatQuickList;//[Offset: 0xe8 , Size: 12]
	QuickChatOption[] allChatOption;//[Offset: 0xf4 , Size: 12]
	FString TeammateColor;//[Offset: 0x100 , Size: 12]
	FString MyColor;//[Offset: 0x10c , Size: 12]
	<int,FString> ActorNameList;//[Offset: 0x118 , Size: 60]
	<FString,IngameFriendChat> FriendChatInfo;//[Offset: 0x154 , Size: 60]
	QuickChatFlag[] ChatFlagList;//[Offset: 0x190 , Size: 12]
	float SendMsgCD;//[Offset: 0x19c , Size: 4]
	float lastShowChatTime;//[Offset: 0x1a0 , Size: 4]
	float ShowChatDuration;//[Offset: 0x1a4 , Size: 4]
	QuickGroundFlag[] groundFlags;//[Offset: 0x1a8 , Size: 12]
	FString EndChar;//[Offset: 0x1b4 , Size: 12]
	FString ColonChar;//[Offset: 0x1c0 , Size: 12]
	<int,int> TextID2AudioID;//[Offset: 0x1cc , Size: 60]
	InGameFilterChatMsg[] ChatFilterList;//[Offset: 0x208 , Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x214 , Size: 4]
	FString CongregationPlayerName;//[Offset: 0x248 , Size: 12]
	FString CongregationPlayerKey;//[Offset: 0x254 , Size: 12]
	function UpdateQuickItemText();// 0x1ddc250
	function ShowQuickPanel();// 0x13fd060
	function ServerSendMsg();// 0x13fcf24
	function SendDirtyFilterContent();// 0x1ddc250
	function SendDirtyFilter();// 0x1ddc250
	function OnInviteNextBattle();// 0x13fcde4
	function OnFilterFinish();// 0x1ddc250
	function NotifyFriendReplyInvite();// 0x1ddc250
	function NotifyFriendInvite();// 0x1ddc250
	function NotifyFriendChat();// 0x1ddc250
	function InviteNextBattleReply();// 0x13fcc58
	function FindTextIDByAudioID();// 0x1ddc250
	function CloseChatHistoryList();// 0x1ddc250
	function ClientReceiveMsg();// 0x13fcb00
	function AddQuickAudio();// 0x13fca44
	function AddOneMsgToUI1();// 0x1ddc250
	function AddFriendChat();// 0x13fc66c

--------------------------------
Class: QuickChatIDAndAudio
	int chatTextID;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: QuickChatOption
	int chatTextID;//[Offset: 0x0 , Size: 4]
	AkAudioEvent* audioEvent1;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: IngameFriendChat
	IngameFriendChatMsg[] ChatList;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: IngameFriendChatMsg
	FString Name;//[Offset: 0x0 , Size: 12]
	FString content;//[Offset: 0xc , Size: 12]
	bool isSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	int MsgType;//[Offset: 0x1c , Size: 4]
	bool bReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]

--------------------------------
Class: QuickChatFlag
	enum Type;//[Offset: 0x0 , Size: 1]
	int[] chatIDList;//[Offset: 0x4 , Size: 12]
	int AlternateChatID;//[Offset: 0x10 , Size: 4]
	int FlagIndex;//[Offset: 0x14 , Size: 4]
	int traceDist;//[Offset: 0x18 , Size: 4]
	float minDist;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: QuickGroundFlag
	int Index;//[Offset: 0x0 , Size: 4]
	int flagID;//[Offset: 0x4 , Size: 4]
	Vector HitPosition;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: InGameFilterChatMsg
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xbc , Size: 4]
	float PickUpZLimit;//[Offset: 0xc0 , Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4 , Size: 1]
	Vector2D[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0xc8 , Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0xd4 , Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0xd8 , Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0xdc , Size: 4]
	Vector2D RegionXRange;//[Offset: 0xe0 , Size: 8]
	Vector2D RegionYRange;//[Offset: 0xe8 , Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0xf4 , Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x100 , Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x104 , Size: 4]
	float DrawTime;//[Offset: 0x108 , Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c , Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x110 , Size: 4]
	Actor[] PickupAvailableActorPool;//[Offset: 0x114 , Size: 12]
	Actor[] ConfirmedPickupActorPool;//[Offset: 0x120 , Size: 12]
	function ServerPutDownTargetWithLocation();// 0x1474570
	function ServerPutDownTarget();// 0x14744bc
	function ServerPickUpTarget();// 0x1474378
	function PutDownTargetWithLocation();// 0x14742b8
	function PutDownTarget();// 0x1474240
	function PickUpTarget();// 0x1474140
	function NotifyMissPickupAvailableActor();// 0x14740c8
	function NotifyMeetPickupAvailableActor();// 0x1474050
	function GetRandomPutDownLocation();// 0x1473fc0
	function GetConfirmedPickupAvailableActors();// 0x1473eb4
	function ControlClientPutDownTargetWithLocation();// 0x1473db0
	function ControlClientPutDownTarget();// 0x1473cfc
	function ControlClientPickUpTarget();// 0x1473c00
	function ClampWorldLocation();// 0x1473b7c

--------------------------------
Class: GuideComponent.ActorComponent.Object
	GuideInfo[] WidgetList;//[Offset: 0xbc , Size: 12]
	Widget* MaskWidget;//[Offset: 0xc8 , Size: 8]
	function SetMaskWidgetOnTop();// 0x1430e04
	function CreateGuideUI();// 0x1ddc250

--------------------------------
Class: GuideInfo
	Widget* Widget;//[Offset: 0x0 , Size: 4]
	int guildUI;//[Offset: 0x4 , Size: 4]
	Vector2D Offset;//[Offset: 0x8 , Size: 8]
	Vector2D Size;//[Offset: 0x10 , Size: 8]
	int childData;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xbc , Size: 4]
	FString OwningPlayerName;//[Offset: 0xc0 , Size: 12]
	UAETriggerObject[] TaskTriggerObjects;//[Offset: 0xcc , Size: 12]
	<FString,TriggerEvent> TriggerEvents;//[Offset: 0xd8 , Size: 60]
	function RetrieveTaskAreaType();// 0x13d874c
	function RetrieveTaskAreaList();// 0x13d8640
	function RetrieveLandLocType();// 0x13d84e0
	function ReportTaskAndSpecialCollection();// 0x13d83d8
	function RegisterEvent();// 0x13d82c8
	function IsTriggerActive();// 0x13d8248
	function IsSpecialPickItem();// 0x13d81c8
	function IsInSpecifiedArea();// 0x13d7de0
	function HandlePlayerPickupItem();// 0x13d7ce0
	function HandlePlayerKilling();// 0x13d7ccc
	function HandlePlayerDropItem();// 0x13d7bcc
	function HandlePlayerDoEmote();// 0x13d7b54
	function HandleInitTaskData();// 0x13d796c
	function HandleInitCollectionData();// 0x13d786c
	function HandleDeathBoxSpawned();// 0x13d7740
	function GetTriggerObject();// 0x13d76bc
	function GetTaskSubTypeFromDataTable();// 0x1ddc250
	function GetTaskParamsFromDataTable();// 0x1ddc250
	function GetTaskParams();// 0x13d754c
	function GetTaskClassPath();// 0x13d73f8
	function GetTaskAreaListFromDataTable();// 0x1ddc250
	function GetTaskAreaIDFromDataTable();// 0x1ddc250
	function GetOwningPlayerName();// 0x13d7338
	function GetMapName();// 0x13d7278
	function GetLandLocIDFromDataTable();// 0x1ddc250
	function FireEvent();// 0x13d708c
	function DeactiveCondition();// 0x13d6fc8
	function CreateTriggerObject();// 0x13d6efc
	function AddTrigger();// 0x13d6cbc
	function AddEventToTrigger();// 0x13d6bb4
	function ActiveCondition();// 0x13d6af0

--------------------------------
Class: UAETriggerObject.Object
	enum RunType;//[Offset: 0x1c , Size: 1]
	enum TriggerObjectType;//[Offset: 0x1d , Size: 1]
	int EventDelayTime;//[Offset: 0x20 , Size: 4]
	int ActionDelayTime;//[Offset: 0x24 , Size: 4]
	FString TriggerName;//[Offset: 0x28 , Size: 12]
	Actor* OuterActor;//[Offset: 0x34 , Size: 4]
	class Object[] TriggerEventsClass;//[Offset: 0x38 , Size: 12]
	TriggerAction[] TriggerActions;//[Offset: 0x44 , Size: 12]
	TriggerCondition[] TriggerConditions;//[Offset: 0x50 , Size: 12]
	FlowNodeBase* CarrierFlowNode;//[Offset: 0x5c , Size: 4]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	TimerHandle TimerHandle_EventDelay;//[Offset: 0x70 , Size: 8]
	TimerHandle TimerHandle_ActionDelay;//[Offset: 0x78 , Size: 8]
	TriggerEvent* CurEvent;//[Offset: 0x80 , Size: 4]
	FString DelayEventName;//[Offset: 0x84 , Size: 12]
	FString FiredEventName;//[Offset: 0x90 , Size: 12]
	<TriggerEvent> TriggeredEvents;//[Offset: 0x9c , Size: 60]
	<TriggerAction> CompleteActions;//[Offset: 0xd8 , Size: 60]
	bool IsEnableCheckDo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114 , Size: 1]
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x118 , Size: 4]
	bool bEnableTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128 , Size: 1]
	float TickInterval;//[Offset: 0x12c , Size: 4]
	bool bShouldReplicateAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130 , Size: 1]
	bool bCacheParamToTriggerObject;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x131 , Size: 1]
	Property[] EventParams;//[Offset: 0x134 , Size: 12]

--------------------------------
Class: TriggerAction.Object
	VariableSet* DataSource;//[Offset: 0x1c , Size: 4]
	bool bEnableActionTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	UAETriggerObject* ParentTrigger;//[Offset: 0x2c , Size: 4]
	UAELevelDirector* ActionOuterActor;//[Offset: 0x30 , Size: 4]
	bool bSupportNetRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]

--------------------------------
Class: VariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x58 , Size: 64]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: UAELevelDirector.Actor.Object
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0 , Size: 1]
	bool ClientEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1 , Size: 1]
	bool ServerEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2 , Size: 1]
	LevelDirectorInstAction[] InstanceActions;//[Offset: 0x2c4 , Size: 12]
	FString[] ClassPaths;//[Offset: 0x2d0 , Size: 12]
	FString ConfigFilePath;//[Offset: 0x2dc , Size: 12]
	FString ClientConfigFilePath;//[Offset: 0x2e8 , Size: 12]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x2f4 , Size: 16]
	UAETriggerFuncLib[] FunctionLibList;//[Offset: 0x304 , Size: 12]
	TriggersFlowBase* TriggersFlowTree;//[Offset: 0x310 , Size: 4]
	<FString,UAETriggerObject> TriggerObjectMap;//[Offset: 0x314 , Size: 60]
	VariableSet* AllVariableSet;//[Offset: 0x350 , Size: 4]
	UAETriggerParamFuncLib* TriggerParamFuncLib;//[Offset: 0x354 , Size: 4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x358 , Size: 4]
	FString DescData;//[Offset: 0x35c , Size: 12]
	TaskRepData TaskData;//[Offset: 0x370 , Size: 16]
	function StartLevelDirector();// 0x40c9208
	function SetTriggerRunType();// 0x40c906c
	function SetEnable();// 0x40c8ff0
	function S2Sim_CallExcuteAction();// 0x13ef5c4
	function RequestTriggerComplete();// 0x40c8f3c
	function OnRep_LevelDirectorData();// 0x40c8f28
	function InitialLevelDirector();// 0x1518d40
	function GetTrigger();// 0x40c8cb0
	function GetHasBeenInit();// 0x40c8c88
	function GetDataSet();// 0x40c8c60
	function GetCurTaskID();// 0x40c8c38
	function ForceExecuteTrigger();// 0x17ede6c
	function FlowControllSubControll();// 0x40c89d0
	function FlowControllOr();// 0x40c8768
	function FlowControllOneSequence();// 0x40c84f0
	function FlowControllMultiSequence();// 0x40c8288
	function FlowControllAnd();// 0x40c7fd0
	function DeactiveTrigger();// 0x40c7d60
	function DeactiveNode();// 0x40c7c08
	function ClientExecuteAction();// 0x40c7a90
	function AddEventToTrigger();// 0x40c78f4
	function AddConditionToTrigger();// 0x40c7750
	function AddActionToTrigger();// 0x40c75ac
	function ActiveTrigger();// 0x40c733c
	function ActiveNode();// 0x40c71e4

--------------------------------
Class: LevelDirectorInstAction
	int64 ActionUniqueID;//[Offset: 0x0 , Size: 8]
	TriggerAction* Action;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0 , Size: 16]

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0 , Size: 12]
	int NodeID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: UAETriggerFuncLib.Object
	TriggerClassItem[] ClassItemList;//[Offset: 0x1c , Size: 12]
	VariableSet* DataSet;//[Offset: 0x28 , Size: 4]
	function GetLastIteratorActor();// 0x40ca310

--------------------------------
Class: TriggerClassItem
	FString TagName;//[Offset: 0x0 , Size: 12]
	FString ClassFullPath;//[Offset: 0xc , Size: 12]
	float RandomRadius;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: TriggersFlowBase.Object
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x24 , Size: 4]
	<FString,FlowNodeBase> Nodes;//[Offset: 0x28 , Size: 60]
	bool IsRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]

--------------------------------
Class: FlowNodeBase.Object
	FlowNodeBase* NextFlowNode;//[Offset: 0x1c , Size: 4]
	UFlowNodeRepData RepData;//[Offset: 0x20 , Size: 16]
	bool IsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	bool DefaltActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41 , Size: 1]
	TriggersFlowBase* CarriedFlow;//[Offset: 0x44 , Size: 4]
	enum NodeType;//[Offset: 0x48 , Size: 1]
	UAETriggerObject[] TriggerObjects;//[Offset: 0x4c , Size: 12]

--------------------------------
Class: UAETriggerParamFuncLib.UAETriggerFuncLib.Object

--------------------------------
Class: LevelEventCenter.Object
	<FString,TriggerEvent> TriggerEvents;//[Offset: 0x28 , Size: 60]
	<FString,LevelEventListenerList> EventListeners;//[Offset: 0x68 , Size: 60]

--------------------------------
Class: TriggerEvent.Object
	FString EventName;//[Offset: 0x1c , Size: 12]
	Object* EventInstigator;//[Offset: 0x28 , Size: 4]
	<FString,TriggerEventListenerTrigger> RelevantListener;//[Offset: 0x38 , Size: 60]

--------------------------------
Class: TriggerEventListenerTrigger
	UAETriggerObject* ListenerTrigger;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: LevelEventListenerList
	<LevelEventListener> Listeners;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: LevelEventListener.Object
	FString EventName;//[Offset: 0x1c , Size: 12]
	<FString,FName> RelevantListenerCallbacks;//[Offset: 0x28 , Size: 60]
	<FString> ObjectRelevantEvents;//[Offset: 0x64 , Size: 60]
	Actor* ListenerEntity;//[Offset: 0xa0 , Size: 4]
	Property[] Params;//[Offset: 0xa4 , Size: 12]

--------------------------------
Class: TaskRepData
	FString TaskName;//[Offset: 0x0 , Size: 12]
	int TaskID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: TriggerCondition.Object
	VariableSet* DataSource;//[Offset: 0x1c , Size: 4]
	TriggerCondition[] ChildConditions;//[Offset: 0x20 , Size: 12]
	UAETriggerObject* ParentTrigger;//[Offset: 0x38 , Size: 4]
	function AddChildCondition();// 0x40c5cac

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: FriendObserver
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	byte gender;//[Offset: 0xc , Size: 1]

--------------------------------
Class: PlayerBaseInfoInOB
	int PosX;//[Offset: 0x0 , Size: 4]
	int PosY;//[Offset: 0x4 , Size: 4]
	int PosZ;//[Offset: 0x8 , Size: 4]
	int Health;//[Offset: 0xc , Size: 4]
	int HealthMax;//[Offset: 0x10 , Size: 4]
	int LiveState;//[Offset: 0x14 , Size: 4]
	int KillNum;//[Offset: 0x18 , Size: 4]
	uint32 PlayerKey;//[Offset: 0x1c , Size: 4]
	int GotAirDropNum;//[Offset: 0x20 , Size: 4]
	int MaxKillDistance;//[Offset: 0x24 , Size: 4]
	int Damage;//[Offset: 0x28 , Size: 4]
	int InDamage;//[Offset: 0x2c , Size: 4]
	int Heal;//[Offset: 0x30 , Size: 4]
	int HeadShotNum;//[Offset: 0x34 , Size: 4]
	int KillNumInVehicle;//[Offset: 0x38 , Size: 4]
	int SurviceTime;//[Offset: 0x3c , Size: 4]
	int DriveDistance;//[Offset: 0x40 , Size: 4]
	int marchDistance;//[Offset: 0x44 , Size: 4]
	int MonsterCatchupDistance;//[Offset: 0x48 , Size: 4]
	int Assists;//[Offset: 0x4c , Size: 4]
	int KillNumByGrenade;//[Offset: 0x50 , Size: 4]
	int Rank;//[Offset: 0x54 , Size: 4]
	bool IsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x5c , Size: 4]
	int Knockouts;//[Offset: 0x60 , Size: 4]
	int rescueTimes;//[Offset: 0x64 , Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x68 , Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x6c , Size: 4]
	int CurWeaponID;//[Offset: 0x70 , Size: 4]

--------------------------------
Class: PlayerInfoInOB.PlayerBaseInfoInOB
	FString PlayerName;//[Offset: 0x74 , Size: 12]
	FString PlayerOpenID;//[Offset: 0x80 , Size: 12]
	FString PicUrl;//[Offset: 0x8c , Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	int TeamID;//[Offset: 0x9c , Size: 4]
	Pawn* Character;//[Offset: 0xa0 , Size: 8]
	bool IsFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8 , Size: 1]

--------------------------------
Class: TeamInfoInOB
	int TeamID;//[Offset: 0x0 , Size: 4]
	bool IsShowLogo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	FString LogoPicUrl;//[Offset: 0x8 , Size: 12]
	int KillNum;//[Offset: 0x14 , Size: 4]
	int LiveMemberNum;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	FString PicUrl;//[Offset: 0xc , Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	int TeamID;//[Offset: 0x1c , Size: 4]
	Vector[] PosList;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: AirDropBoxInOb
	int boxId;//[Offset: 0x0 , Size: 4]
	bool Flying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool IsEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	Vector Pos;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1ac , Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x1b0 , Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x1b4 , Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x1b8 , Size: 4]
	Property[] Params;//[Offset: 0x1f8 , Size: 12]
	delegate widgetSizeNofity;//[Offset: 0x20c , Size: 12]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x218 , Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x238 , Size: 32]
	float TickRate;//[Offset: 0x258 , Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c , Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25d , Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e , Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25f , Size: 1]
	Vector2D ScreenPos;//[Offset: 0x260 , Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x268 , Size: 8]
	enum FadingStatus;//[Offset: 0x278 , Size: 1]
	float CurrentOpacity;//[Offset: 0x27c , Size: 4]
	float FadingInTime;//[Offset: 0x280 , Size: 4]
	float FadingOutTime;//[Offset: 0x284 , Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288 , Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289 , Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a , Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b , Size: 1]
	FString UIMsgPrefix;//[Offset: 0x28c , Size: 12]
	FString[] UIMsgFunctionList;//[Offset: 0x298 , Size: 12]
	function UnRegistFromGameFrontendHUD();// 0x3720cb8
	function SynchronizeBlueprintProperties();// 0x1ddc250
	function Show();// 0x3720ca4
	function SetParentWidget();// 0x3720c2c
	function SetOnWidgetShow();// 0x3720b90
	function SetOnWidgetHide();// 0x3720af4
	function SetOnClearUIStack();// 0x3720a58
	function SetAdapation();// 0x3720910
	function RegistToGameFrontendHUD();// 0x3720898
	function Register();// 0x37207d4
	function ReceiveShow();// 0x1ddc250
	function ReceiveHide();// 0x1ddc250
	function ReceivedInitWidget();// 0x1ddc250
	function PushOpenedUIStack();// 0x3720720
	function PopOpenedUIStack();// 0x372066c
	function OnWidgetShow__DelegateSignature();// 0x1ddc250
	function OnWidgetHide__DelegateSignature();// 0x1ddc250
	function OnRightClicked();// 0x1ddc250
	function OnFadeOutFinished();// 0x1435f1c
	function OnFadeInFinished();// 0x1435f00
	function OnDoubleClicked();// 0x1ddc250
	function OnClicked();// 0x1ddc250
	function OnClearUIStack__DelegateSignature();// 0x1ddc250
	function IntCompare();// 0x3720564
	function InitCustomWidget();// 0x14a3d44
	function Hide();// 0x3720550
	function HandleUIMessageBattle();// 0x3720494
	function HandleUIMessage();// 0x37203d8
	function HandleAEUIFunction();// 0x37202d8
	function GetParentWidget();// 0x37202b0
	function GetOwningPlayer();// 0x27bb6b8
	function GetOwningLogicManager();// 0x3720288
	function GetOwningFrontendHUD();// 0x3720260
	function GetImgDynamicMaterial();// 0x37201e0
	function FloatCompare();// 0x37200d8
	function DestroyWidget();// 0x37200c4
	function ClearOpenedUIStack();// 0x37200b0
	function ClearClassWidgetTree();// 0x372009c
	function BindCustomUserEvent();// 0x14a3894

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c , Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34 , Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40 , Size: 4]
	LogicManagerBase[] LogicManagerList;//[Offset: 0x44 , Size: 12]
	<FString,LogicManagerBase> LogicManagerMap;//[Offset: 0x50 , Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x98 , Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c , Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0 , Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4 , Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8 , Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xac , Size: 4]
	FName CurrentGameStatus;//[Offset: 0xb0 , Size: 8]
	FName LastGameStatus;//[Offset: 0xb8 , Size: 8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0 , Size: 1]
	FName PendingGameStatus;//[Offset: 0xc8 , Size: 8]
	FString LatestGameStatusURL;//[Offset: 0xd0 , Size: 12]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xdc , Size: 12]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xe8 , Size: 12]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xf4 , Size: 12]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x100 , Size: 12]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x10c , Size: 12]
	delegate OnSetGameStatusEvent;//[Offset: 0x118 , Size: 12]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x124 , Size: 12]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x130 , Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0x13c , Size: 4]
	function SwitchGameStatus();// 0x371b3e0
	function OnPreLoadMap();// 0x371b31c
	function OnPostLoadMapWithWorld();// 0x371b29c
	function OnGameViewportClientCreated();// 0x139c4bc
	function GetWorld();// 0x371b26c
	function GetUtils();// 0x371b244
	function GetPlayerController();// 0x371b21c
	function GetLogicManagerByName();// 0x371b0bc
	function GetLogicManager();// 0x371b03c
	function GetGameViewportClient();// 0x371b014
	function GetGameMode();// 0x371afec
	function EnableGuiTest();// 0x371af6c
	function ClearLogicManagerByName();// 0x371ae14

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c , Size: 4]
	FName CurrentSceneCameraName;//[Offset: 0x40 , Size: 8]
	CameraActor[] SceneCameraList;//[Offset: 0x48 , Size: 12]
	<FName,CameraActor> SceneCameraMap;//[Offset: 0x54 , Size: 60]
	DirectionalLight[] SceneDirectionalLightList;//[Offset: 0x90 , Size: 12]
	<FName,DirectionalLight> SceneDirectionalLightMap;//[Offset: 0x9c , Size: 60]
	PointLight[] ScenePointLightList;//[Offset: 0xd8 , Size: 12]
	<FName,PointLight> ScenePointLightMap;//[Offset: 0xe4 , Size: 60]
	<FName,SkyLight> SceneSkyLightMap;//[Offset: 0x120 , Size: 60]
	<FName,Actor> SceneMatChangeableMeshMap;//[Offset: 0x15c , Size: 60]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x200 , Size: 12]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x20c , Size: 4]
	Object* GlobalUIEventDispatcher;//[Offset: 0x210 , Size: 4]
	FString GlobalUIContainerClassName;//[Offset: 0x214 , Size: 12]
	FName[] GlobalUIContainerNames;//[Offset: 0x220 , Size: 12]
	<FName,UAEWidgetContainer> GlobalUIContainers;//[Offset: 0x22c , Size: 60]
	UAEWidgetContainer[] GlobalPushUIContainers;//[Offset: 0x268 , Size: 12]
	function SwitchSceneCameraToTransform();// 0x371ce50
	function SwitchSceneCamera();// 0x371cd3c
	function SetSceneSkyLightProperty();// 0x371cb20
	function SetScenePointLightProperty();// 0x371c870
	function SetSceneDirectionalLightProperty();// 0x371c610
	function RegisterSceneSkyLight();// 0x371c548
	function RegisterScenePointLight();// 0x371c48c
	function RegisterSceneMatChangeableMesh();// 0x371c3d0
	function RegisterSceneDirectionalLight();// 0x371c314
	function RegisterSceneCamera();// 0x371c258
	function PopAllPushedUI();// 0x371c244
	function OnAllSceneCamerasRegistered();// 0x13b3390
	function IsPushedPanel();// 0x371c1b0
	function GlobalUIEventDispatcher_GetDelegateIsBound();// 0x371c050
	function GetUIStackTopSrcTag();// 0x371bf90
	function GetUIStackTopDstTag();// 0x371bed0
	function GetUIStackTop();// 0x371be10
	function GetSceneMatChangeableMeshByIdx();// 0x371bd90
	function GetOwningFrontendHUD();// 0x371bd68
	function GetGlobalUIEventDispatcher();// 0x371bd40
	function GetGlobalUIContainer();// 0x371bcc0
	function EnableLobbyMainLight();// 0x371bc40

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x2c8 , Size: 4]
	function SetRadius();// 0x35d3c84
	function SetLightFalloffExponent();// 0x35d3c0c

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x328 , Size: 4]
	float AttenuationRadius;//[Offset: 0x32c , Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330 , Size: 1]
	float LightFalloffExponent;//[Offset: 0x334 , Size: 4]
	float SourceRadius;//[Offset: 0x338 , Size: 4]
	float SoftSourceRadius;//[Offset: 0x33c , Size: 4]
	float SourceLength;//[Offset: 0x340 , Size: 4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x344 , Size: 12]
	function SetSourceRadius();// 0x35d41a8
	function SetSourceLength();// 0x35d4130
	function SetSoftSourceRadius();// 0x35d40b8
	function SetLightFalloffExponent();// 0x35d4040
	function SetAttenuationRadius();// 0x35d3fc8

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0 , Size: 4]
	float ShadowExponent;//[Offset: 0x4 , Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x2c0 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4 , Size: 1]
	function OnRep_bEnabled();// 0x13ef5c4

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x260 , Size: 1]
	TextureCube* Cubemap;//[Offset: 0x264 , Size: 4]
	float SourceCubemapAngle;//[Offset: 0x268 , Size: 4]
	int CubemapResolution;//[Offset: 0x26c , Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x270 , Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274 , Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x275 , Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x278 , Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x288 , Size: 4]
	float Contrast;//[Offset: 0x28c , Size: 4]
	float OcclusionExponent;//[Offset: 0x290 , Size: 4]
	float MinOcclusion;//[Offset: 0x294 , Size: 4]
	Color OcclusionTint;//[Offset: 0x298 , Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x29c , Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x348 , Size: 4]
	function SetVolumetricScatteringIntensity();// 0x35fb9bc
	function SetOcclusionTint();// 0x35fb938
	function SetOcclusionExponent();// 0x35fb8c0
	function SetOcclusionContrast();// 0x35fb848
	function SetMinOcclusion();// 0x35fb7d0
	function SetLightColor();// 0x35fb754
	function SetIntensity();// 0x35fb6dc
	function SetIndirectLightingIntensity();// 0x35fb664
	function SetCubemapBlend();// 0x35fb564
	function SetCubemap();// 0x35fb4ec
	function RecaptureSky();// 0x35fb4d8

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	UserWidget[] WidgetList;//[Offset: 0x2ac , Size: 12]
	function RemoveWidgetInternal();// 0x1447b48
	function RemoveWidget();// 0x3721ee8
	function AddWidgetWithZOrderInternal();// 0x1463c28
	function AddWidgetWithZOrder();// 0x3721e2c
	function AddWidgetInternal();// 0x15a0634
	function AddWidget();// 0x3721db4

--------------------------------
Class: LogicManagerBase.Object
	FString ManagerName;//[Offset: 0x1c , Size: 12]
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28 , Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39 , Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a , Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b , Size: 1]
	int iUIControlState;//[Offset: 0x3c , Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x40 , Size: 4]
	FName[] GameStatusList;//[Offset: 0x50 , Size: 12]
	UAEUserWidget[] WidgetList;//[Offset: 0x8c , Size: 12]
	Object[] DelayMessage_Obj;//[Offset: 0xa8 , Size: 12]
	function SetEnableRemoveDynamicWidgets();// 0x371e018
	function IsEnableRemoveDynamicWidgets();// 0x371dff0
	function GetWidgetByName();// 0x371df2c
	function GetOwningFrontendHUD();// 0x371df04
	function GetDefaultSceneCamera();// 0x371dedc
	function DispatchUIMessage();// 0x371dcfc

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0 , Size: 12]
	FName ContainerName;//[Offset: 0x10 , Size: 8]
	int ZOrder;//[Offset: 0x18 , Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: ItemDefineWeaponSyncData
	ItemDefineID ItemDfineID;//[Offset: 0x0 , Size: 24]
	byte ForceUpdateFlag;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: WeaponMgrInfo
	ItemDefineID[] ItemList;//[Offset: 0x0 , Size: 12]
	WeaponManagerComponent* WeaponMgr;//[Offset: 0xc , Size: 4]
	byte ForceUpdateFlag;//[Offset: 0x10 , Size: 1]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x2c0 , Size: 4]
	Actor* ReturnActor;//[Offset: 0x2c4 , Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x2e4 , Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x2e8 , Size: 4]
	delegate OnTrackingEnd;//[Offset: 0x2ec , Size: 12]
	float MinMovingSpeed;//[Offset: 0x2f8 , Size: 4]
	float MaxMovingTime;//[Offset: 0x2fc , Size: 4]
	float ObservingTime;//[Offset: 0x300 , Size: 4]
	float TrackingDelay;//[Offset: 0x304 , Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x308 , Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x30c , Size: 4]
	function ForceEnd();// 0x143c324

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	STExtraVehicleBase* Vehicle;//[Offset: 0xbc , Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0xc0 , Size: 4]
	enum VehicleUserState;//[Offset: 0xc4 , Size: 1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0xc8 , Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0xcc , Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0xd4 , Size: 4]
	STExtraVehicleBase[] OverlappingVehicles;//[Offset: 0xe0 , Size: 12]
	STExtraVehicleBase[] CullWaterRangeVehicles;//[Offset: 0xec , Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0xf8 , Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108 , Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x10c , Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c , Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x120 , Size: 4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c , Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x130 , Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x140 , Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x144 , Size: 4]
	float MaxCanAimAngle;//[Offset: 0x148 , Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c , Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x150 , Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x154 , Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x158 , Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x15c , Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168 , Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x16c , Size: 4]
	Rotator InputExtraRot;//[Offset: 0x170 , Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x17c , Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x18c , Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195 , Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x1bc , Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x1c4 , Size: 4]
	float ControllerYawClampMin;//[Offset: 0x1cc , Size: 4]
	float ControllerYawClampMax;//[Offset: 0x1d0 , Size: 4]
	enum CurrentSeatType;//[Offset: 0x1d4 , Size: 1]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x1d8 , Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0 , Size: 1]
	function UpdatePassengerViewPitchLimit();// 0x15afba0
	function TurnVehicle();// 0x15afb28
	function TryUseHorn();// 0x15afaa8
	function TryLeanOutOrIn();// 0x15afa20
	function TryExitVehicle();// 0x15afa0c
	function TryEnterVehicle();// 0x15af950
	function TryChangeVehicleSeat();// 0x15af93c
	function TryChangeToVehicleSeat();// 0x15af8bc
	function TryChangeFreeFireSeatAndScopeIn();// 0x15af894
	function TryChangeFreeFireSeatAndLeanOut();// 0x15af86c
	function TickVehicleCullWater();// 0x1ddc250
	function TestForceTurnVehicle();// 0x15af7a8
	function SetBrake();// 0x15af730
	function SetBoosting();// 0x15af6b0
	function SetAirControlF();// 0x15af638
	function SetAirControlB();// 0x15af5c0
	function RspLeanOut();// 0x15af538
	function RspExitVehicle();// 0x149b9f4
	function RspEnterVehicle();// 0x15af3dc
	function RspChangeVehicleSeat();// 0x15af228
	function ReqSyncViewTargetLastDriveInfo();// 0x15af12c
	function ReqMarkLastestVehicle();// 0x15af030
	function ReqLeanOut();// 0x15aef68
	function ReqExitVehicle();// 0x15aeebc
	function ReqEraseLastDriveVehicle();// 0x15aee60
	function ReqEnterVehicle();// 0x15aed64
	function ReqChangeVehicleSeat();// 0x15aecb0
	function ReqChangeFreeFireSeatAndScopeIn();// 0x15aebe8
	function ReqChangeFreeFireSeatAndLeanOut();// 0x15aeb20
	function OnServerReconnected();// 0x15aeb0c
	function OnScopeInAfterChangeSeat();// 0x15aeaf8
	function OnRep_BornInVehicle();// 0x15aeae4
	function OnLeanOutAfterChangeSeat();// 0x15aead0
	function OnInputAxisMoveRight();// 0x1ddc250
	function OnInputAxisMoveForward();// 0x1ddc250
	function OnExitVehicleCompleted();// 0x1ddc250
	function OnEnterVehicleCompleted();// 0x1ddc250
	function OnCurrrentClosestVehicleChanged();// 0x1ddc250
	function OnClientReconnected();// 0x15aeabc
	function OnChangeVehicleSeatCompleted();// 0x1ddc250
	function NotifyLeaveVehicleFailed();// 0x14143a0
	function MoveVehicleRight();// 0x15aea44
	function MoveVehicleForward();// 0x15ae9cc
	function MaintenanceVehicle();// 0x15ae908
	function HasChangeMoveRightRate();// 0x15ae844
	function HandleClientReconnecting();// 0x15ae81c
	function GetVehicleUserState();// 0x15ae800
	function GetCurrentClosestVehicle();// 0x15ae7e4
	function CheckCanLeanOutVehicle();// 0x15ae7bc
	function CanVehicleShoot();// 0x15ae73c
	function CanUseVehicleHorn();// 0x15ae714
	function AddVehicleFuel();// 0x15ae69c

--------------------------------
Class: ImpactMapValueData
	STEShootWeaponBulletImpactEffect[] ImpactEffectList;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	ParticleSystem* DefaultFX;//[Offset: 0x2c4 , Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x2c8 , Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x2cc , Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x2d0 , Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x2d4 , Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x2d8 , Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x2dc , Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x2e0 , Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x2e4 , Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x2e8 , Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x2ec , Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x2f0 , Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x2f4 , Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x2f8 , Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x2fc , Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x300 , Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x304 , Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x308 , Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x30c , Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x310 , Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x314 , Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x318 , Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x31c , Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x320 , Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x324 , Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c , Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x330 , Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x334 , Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x338 , Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x33c , Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x340 , Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x344 , Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x348 , Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x34c , Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x350 , Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x354 , Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x358 , Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x35c , Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x360 , Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x364 , Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x368 , Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x36c , Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x370 , Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x374 , Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x378 , Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x37c , Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x380 , Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x384 , Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x388 , Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x38c , Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x390 , Size: 4]
	DecalData DefaultDecal;//[Offset: 0x394 , Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x3b0 , Size: 28]
	DecalData DirtDecal;//[Offset: 0x3cc , Size: 28]
	DecalData WaterDecal;//[Offset: 0x3e8 , Size: 28]
	DecalData MetalDecal;//[Offset: 0x404 , Size: 28]
	DecalData WoodDecal;//[Offset: 0x420 , Size: 28]
	DecalData GrassDecal;//[Offset: 0x43c , Size: 28]
	DecalData GlassDecal;//[Offset: 0x458 , Size: 28]
	DecalData FleshDecal;//[Offset: 0x474 , Size: 28]
	DecalData SteelDecal;//[Offset: 0x490 , Size: 28]
	DecalData SandbagDecal;//[Offset: 0x4ac , Size: 28]
	DecalData SandDecal;//[Offset: 0x4c8 , Size: 28]
	DecalData ClothDecal;//[Offset: 0x4e4 , Size: 28]
	DecalData PlasticDecal;//[Offset: 0x500 , Size: 28]
	DecalData LeatherDecal;//[Offset: 0x51c , Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x538 , Size: 28]
	DecalData PaperDecal;//[Offset: 0x554 , Size: 28]
	DecalData StoneDecal;//[Offset: 0x570 , Size: 28]
	DecalData SnowDecal;//[Offset: 0x58c , Size: 28]
	DecalData PopCanDecal;//[Offset: 0x5a8 , Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x5c4 , Size: 28]
	DecalData LeafDecal;//[Offset: 0x5e0 , Size: 28]
	DecalData CarDecal;//[Offset: 0x5fc , Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x618 , Size: 28]
	DecalData IceDecal;//[Offset: 0x634 , Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x650 , Size: 304]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780 , Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781 , Size: 1]
	<float,float> DamageScaleMap;//[Offset: 0x784 , Size: 60]
	DecalComponent* ImpactDecalComp;//[Offset: 0x7c0 , Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x7c4 , Size: 4]
	SceneComponent* TargetImpactComp;//[Offset: 0x7ec , Size: 4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x82c , Size: 4]
	<int,ParticleSystem> WeaponAvatarSpecialFleshFX;//[Offset: 0x830 , Size: 60]
	function TimerHideDecal();// 0x14cc968

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0 , Size: 4]
	float LifeSpan;//[Offset: 0x4 , Size: 4]
	Material* DecalMaterial;//[Offset: 0x8 , Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc , Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10 , Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14 , Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x4c , Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x50 , Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x88 , Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc0 , Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0xf8 , Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x130 , Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x168 , Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a0 , Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e0 , Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x218 , Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x250 , Size: 56]
	byte MaterialDomain;//[Offset: 0x288 , Size: 1]
	byte BlendMode;//[Offset: 0x289 , Size: 1]
	byte DecalBlendMode;//[Offset: 0x28a , Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x28b , Size: 1]
	byte ShadingModel;//[Offset: 0x28c , Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x290 , Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x294 , Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298 , Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a0 , Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e0 , Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x320 , Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x358 , Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x390 , Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3c8 , Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x400 , Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x438 , Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x470 , Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x670 , Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6a8 , Size: 56]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e0 , Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6e0 , Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6e0 , Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6e0 , Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6e0 , Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6e0 , Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6e0 , Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6e0 , Size: 1]
	int NumCustomizedUVs;//[Offset: 0x6e4 , Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x6e8 , Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x6ec , Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f0 , Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x6f4 , Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x6f8 , Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x6fc , Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x700 , Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x704 , Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x708 , Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x718 , Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71c , Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71c , Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71c , Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71c , Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71c , Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71c , Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71c , Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71c , Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71d , Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71d , Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71d , Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71d , Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71d , Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71d , Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71d , Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71d , Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71e , Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71e , Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71e , Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71e , Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71e , Size: 1]
	bool bIgnoreForceUseVertexNormal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71e , Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71e , Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71e , Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x71f , Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x71f , Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x71f , Size: 1]
	bool bBatchSimilarMaterialInstances;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x71f , Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x71f , Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x71f , Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x71f , Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x71f , Size: 1]
	byte ShadowOverride;//[Offset: 0x720 , Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x721 , Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x722 , Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x722 , Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x722 , Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x723 , Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x724 , Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x724 , Size: 1]
	float MaxDisplacement;//[Offset: 0x728 , Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x72c , Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x72c , Size: 1]
	int EditorX;//[Offset: 0x730 , Size: 4]
	int EditorY;//[Offset: 0x734 , Size: 4]
	int EditorPitch;//[Offset: 0x738 , Size: 4]
	int EditorYaw;//[Offset: 0x73c , Size: 4]
	MaterialExpression[] Expressions;//[Offset: 0x740 , Size: 12]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x74c , Size: 12]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x758 , Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x764 , Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x764 , Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x764 , Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x764 , Size: 1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x764 , Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x764 , Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x764 , Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x764 , Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x768 , Size: 4]
	byte BlendableLocation;//[Offset: 0x76c , Size: 1]
	int BlendablePriority;//[Offset: 0x770 , Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x774 , Size: 1]
	byte RefractionMode;//[Offset: 0x775 , Size: 1]
	float RefractionDepthBias;//[Offset: 0x778 , Size: 4]
	Guid stateID;//[Offset: 0x77c , Size: 16]
	Texture[] ExpressionTextureReferences;//[Offset: 0x814 , Size: 12]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	Color Constant;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0 , Size: 4]
	FString InputName;//[Offset: 0x4 , Size: 12]
	int Mask;//[Offset: 0x10 , Size: 4]
	int MaskR;//[Offset: 0x14 , Size: 4]
	int MaskG;//[Offset: 0x18 , Size: 4]
	int MaskB;//[Offset: 0x1c , Size: 4]
	int MaskA;//[Offset: 0x20 , Size: 4]
	FName ExpressionName;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	float Constant;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	Vector Constant;//[Offset: 0x34 , Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	float ConstantX;//[Offset: 0x34 , Size: 4]
	float ConstantY;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0 , Size: 4]
	FString InputName;//[Offset: 0x4 , Size: 12]
	int Mask;//[Offset: 0x10 , Size: 4]
	int MaskR;//[Offset: 0x14 , Size: 4]
	int MaskG;//[Offset: 0x18 , Size: 4]
	int MaskB;//[Offset: 0x1c , Size: 4]
	int MaskA;//[Offset: 0x20 , Size: 4]
	FName ExpressionName;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c , Size: 4]
	MaterialFunction* Function;//[Offset: 0x20 , Size: 4]
	FString Desc;//[Offset: 0x24 , Size: 12]
	Color BorderColor;//[Offset: 0x30 , Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34 , Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34 , Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34 , Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34 , Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34 , Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34 , Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34 , Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35 , Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35 , Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35 , Size: 1]
	ExpressionOutput[] Outputs;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x1c , Size: 16]
	FString Description;//[Offset: 0x2c , Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	MaterialExpression[] FunctionExpressions;//[Offset: 0x3c , Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]

--------------------------------
Class: ExpressionOutput
	FString OutputName;//[Offset: 0x0 , Size: 12]
	int Mask;//[Offset: 0xc , Size: 4]
	int MaskR;//[Offset: 0x10 , Size: 4]
	int MaskG;//[Offset: 0x14 , Size: 4]
	int MaskB;//[Offset: 0x18 , Size: 4]
	int MaskA;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: MaterialFunctionInfo
	Guid stateID;//[Offset: 0x0 , Size: 16]
	MaterialFunction* Function;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid stateID;//[Offset: 0x0 , Size: 16]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0 , Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc , Size: 12]
	Vector VictimLocation;//[Offset: 0x18 , Size: 12]
	Vector BulletPos;//[Offset: 0x24 , Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x30 , Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x3c , Size: 8]
	byte SurfaceType;//[Offset: 0x44 , Size: 1]
	uint32 ShootID;//[Offset: 0x48 , Size: 4]
	uint16 CompensationTime;//[Offset: 0x4c , Size: 2]
	Actor* Actor;//[Offset: 0x50 , Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x58 , Size: 8]
	int TimeStamp;//[Offset: 0x60 , Size: 4]
	int ClientTimeStamp;//[Offset: 0x64 , Size: 4]
	byte HitBodyType;//[Offset: 0x68 , Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x6c , Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x70 , Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x74 , Size: 12]
	float DamageRate;//[Offset: 0x80 , Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84 , Size: 1]
	double SystemTimeStamp;//[Offset: 0x88 , Size: 8]
	Vector GunTailPos;//[Offset: 0x90 , Size: 12]
	FName BoneName;//[Offset: 0xa0 , Size: 8]
	Transform BoneTrans;//[Offset: 0xb0 , Size: 48]
	MoveBaseInfo_NetQuantize VictimBase;//[Offset: 0xe0 , Size: 80]

--------------------------------
Class: MoveBaseInfo_NetQuantize

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x238 , Size: 4]
	int SortOrder;//[Offset: 0x23c , Size: 4]
	float FadeScreenSize;//[Offset: 0x240 , Size: 4]
	float FadeStartDelay;//[Offset: 0x244 , Size: 4]
	float FadeDuration;//[Offset: 0x248 , Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24c , Size: 1]
	Vector DecalSize;//[Offset: 0x250 , Size: 12]
	function SetSortOrder();// 0x34f10ec
	function SetFadeScreenSize();// 0x34f1074
	function SetFadeOut();// 0x34f0f6c
	function SetDecalMaterial();// 0x34f0ef4
	function GetFadeStartDelay();// 0x34f0ecc
	function GetFadeDuration();// 0x34f0ea4
	function GetDecalMaterial();// 0x34f0e7c
	function CreateDynamicMaterialInstance();// 0x34f0e4c

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	State[] AllStateList;//[Offset: 0xbc , Size: 12]
	enum StartStateType;//[Offset: 0xc8 , Size: 1]
	enum FinishStateType;//[Offset: 0xc9 , Size: 1]
	State* CurrentState;//[Offset: 0xcc , Size: 4]
	enum CurrentStateType;//[Offset: 0xd0 , Size: 1]
	enum LastStateType;//[Offset: 0xd1 , Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.Actor.Object
	enum[] DamageableGameObjectTypeList;//[Offset: 0x3c0 , Size: 12]
	FString TreasureBoxName;//[Offset: 0x3cc , Size: 12]
	float TotalHP;//[Offset: 0x3d8 , Size: 4]
	float BrokenHPPropotion;//[Offset: 0x3dc , Size: 4]
	float TotalTime;//[Offset: 0x3e0 , Size: 4]
	int boxId;//[Offset: 0x3e4 , Size: 4]
	Vector GroupLoc;//[Offset: 0x3e8 , Size: 12]
	float DestroyTime;//[Offset: 0x3f4 , Size: 4]
	float OperationalDistance;//[Offset: 0x3f8 , Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x3fc , Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x400 , Size: 4]
	Transform StandbyEffectTrans;//[Offset: 0x410 , Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x440 , Size: 4]
	Transform OpenningEffectTrans;//[Offset: 0x450 , Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x480 , Size: 4]
	Transform OpennedEffectTrans;//[Offset: 0x490 , Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x4c0 , Size: 4]
	Transform BrokenEffect1Trans;//[Offset: 0x4d0 , Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x500 , Size: 4]
	Transform BrokenEffect2Trans;//[Offset: 0x510 , Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x540 , Size: 4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x544 , Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x548 , Size: 4]
	class Controller[] InstigatorList;//[Offset: 0x54c , Size: 12]
	class Actor[] DamageCauserList;//[Offset: 0x558 , Size: 12]
	enum PickUpBoxType;//[Offset: 0x564 , Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x565 , Size: 1]
	int IconID;//[Offset: 0x568 , Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5bc , Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5be , Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x5c0 , Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x5c4 , Size: 4]
	int HideLightColumn;//[Offset: 0x5c8 , Size: 4]
	float GoUpAnimationWait;//[Offset: 0x5cc , Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x5d0 , Size: 4]
	float GoUpAnimationHight;//[Offset: 0x5d4 , Size: 4]
	float GoUpAnimationYawSpeed;//[Offset: 0x5dc , Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x5e0 , Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x5e4 , Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x5f0 , Size: 12]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc , Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x600 , Size: 4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x604 , Size: 4]
	float StartedTime;//[Offset: 0x620 , Size: 4]
	enum CurState;//[Offset: 0x624 , Size: 1]
	int StartedTeamId;//[Offset: 0x62c , Size: 4]
	float CountDownTime;//[Offset: 0x630 , Size: 4]
	float StartDestroytime;//[Offset: 0x634 , Size: 4]
	int MonsterBoxId;//[Offset: 0x638 , Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x63c , Size: 4]
	<FString,FString> DataStrs;//[Offset: 0x640 , Size: 60]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x680 , Size: 4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x684 , Size: 4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x688 , Size: 4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x68c , Size: 4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x690 , Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x694 , Size: 4]
	Object* TriggerActionHost;//[Offset: 0x6c8 , Size: 4]
	function ShowMonsterTreasureBoxSkelemesh();// 0x1ddc250
	function ShowMonsterTreasureBox();// 0x14533c0
	function SetClientClientAutoActiveBoxCD();// 0x1453348
	function OnSomeonePickItem();// 0x14532d0
	function OnRep_HideLightColumn();// 0x14532bc
	function OnRep_CurState();// 0x14532a8
	function OnBoxEmpty();// 0x1453294
	function IsShowIcon();// 0x145326c
	function GetMonsterBoxId();// 0x1453244
	function GetDamageableGameObjectType();// 0x145317c
	function GetCurState();// 0x1453154
	function GetClientClientAutoActiveBoxCD();// 0x145312c
	function DeActiveMonsterTreasureBox();// 0x1453118
	function CanBeDamaged();// 0x14530f0
	function BPOnStopMonsterTreasureBox();// 0x1ddc250
	function BPOnStartMonsterTreasureBox();// 0x1ddc250
	function BPOnHideLightColumn();// 0x1ddc250
	function BPOnCountdownEnd();// 0x1ddc250
	function BPOnBreakMonsterTreasureBox();// 0x1ddc250
	function BPOnAnimationStop();// 0x1ddc250
	function BPOnAnimationAkAudioStop();// 0x1ddc250
	function BPOnAnimationAkAudioStart();// 0x1ddc250
	function BPGetTreasureBoxName();// 0x1ddc250

--------------------------------
Class: UAEHouseActor.UAENetActor.Actor.Object
	int iRegionHouse;//[Offset: 0x2cc , Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x2d0 , Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x2d4 , Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x2d8 , Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x2dc , Size: 4]
	UAEWindowRepData[] WindowList;//[Offset: 0x2e0 , Size: 12]
	<int,UAEWindowComponent> WindowComponents;//[Offset: 0x2ec , Size: 60]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328 , Size: 1]
	function OnRep_WindowList();// 0x193e02c
	function BroadcastWindowRepDataUpdated();// 0x193ddf0

--------------------------------
Class: UAEWindowRepData
	Transform Transform;//[Offset: 0x0 , Size: 48]
	FString PathToLoad;//[Offset: 0x30 , Size: 12]
	int ID;//[Offset: 0x3c , Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: UAEWindowComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ID;//[Offset: 0x5b0 , Size: 4]
	bool bBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4 , Size: 1]
	Pawn* LastInstigatorPawn;//[Offset: 0x5b8 , Size: 4]
	StaticMesh* BrokenMesh;//[Offset: 0x5bc , Size: 4]
	ParticleSystem* BrokenEffect;//[Offset: 0x5c0 , Size: 4]
	function NotifyServerBroken();// 0x1ddc250
	function NotifyRepDataUpdated();// 0x1947ba4
	function LocalHandleWindowBrokenBP();// 0x1ddc250
	function LocalHandleWindowBroken();// 0x1947ad4
	function HandleBroken();// 0x1947a10
	function GetRepData();// 0x19478e4

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	FString DropItemCfgTableName;//[Offset: 0xc0 , Size: 12]
	int ProduceID;//[Offset: 0xcc , Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0xd0 , Size: 4]
	int GridStep;//[Offset: 0xd4 , Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0xd8 , Size: 4]
	FString DropItemRuleTableName;//[Offset: 0xdc , Size: 12]
	int[] DropPlanIDList;//[Offset: 0xe8 , Size: 12]
	int[] NightDropPlanIDList;//[Offset: 0xf4 , Size: 12]
	int[] DayDropPlanIDList;//[Offset: 0x100 , Size: 12]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x10c , Size: 4]
	function SetNightDropPlanIDList();// 0x148b524
	function SetDropPlanIDList();// 0x148b458
	function SetDropItemLifeSpan();// 0x148b3e0
	function PickItemByUnionRandom();// 0x148b2e8
	function PickItemByIndependentRandom();// 0x148b268
	function OnOwnerPawnDead();// 0x148b06c
	function NineGridDrop();// 0x148aec0
	function GetWrapperActorPath();// 0x143a628
	function GetWrapperActorClass();// 0x143a590
	function GetDropItemCfgList();// 0x148ad64
	function GenerateDropItemByOwner();// 0x148acb8
	function GenerateDropItemByCfg();// 0x148ab84
	function DropToTreasureBox();// 0x148a8d0
	function DropToTombBox();// 0x148a7d4
	function DropToTarget();// 0x148a6bc
	function DropToGround();// 0x148a470
	function DropOutProps();// 0x148a330
	function CalcDropItemListByDropRuleByCfg();// 0x148a200
	function CalcDropItemListByDropRule();// 0x148a100

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x2c0 , Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x2c4 , Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x2c8 , Size: 4]
	<int,WeaponAnimAsset> WeaponAnimList;//[Offset: 0x2cc , Size: 60]
	class AnimInstance* animBP;//[Offset: 0x308 , Size: 4]
	delegate OnWeaponBlendAnim;//[Offset: 0x30c , Size: 12]
	int CurUseWeaponSkinID;//[Offset: 0x318 , Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c , Size: 1]
	<int,FName> slotToSocket;//[Offset: 0x320 , Size: 60]
	FName OBPlayerName;//[Offset: 0x360 , Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x368 , Size: 4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x36c , Size: 4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x370 , Size: 4]
	StaticMeshComponent[] StMeshList;//[Offset: 0x374 , Size: 12]
	SkeletalMeshComponent[] SkMeshList;//[Offset: 0x380 , Size: 12]
	FName[] HideBoneNames;//[Offset: 0x38c , Size: 12]
	SkeletalMesh[] SkMeshResList;//[Offset: 0x398 , Size: 12]
	MeshComponent[] WeaponAttachmentList;//[Offset: 0x3a4 , Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x3b0 , Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x3b4 , Size: 4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8 , Size: 1]
	function SetOBTarget();// 0x13abe6c
	function SetEnable();// 0x13abdec
	function RenderCaptureScene();// 0x13abdd8
	function RefreshAvatar();// 0x13abdc4
	function OnWeaponSystemDataChanged();// 0x13abd1c
	function OnWeaponAvatarEquipped();// 0x13abc4c
	function OnSimulatedWeaponChanged();// 0x13abc38
	function OnAvatarEquipped();// 0x13abb2c
	function OnAvatarAllMeshLoaded();// 0x13abb18
	function MergeMesh();// 0x13ab9fc
	function GetWeaponSkinIDs();// 0x13ab93c
	function GetOBAvatarComponent();// 0x13ab914
	function GetAnimSeqAsset();// 0x13ab7a0
	function EquipWeapon();// 0x13ab78c
	function EquipPlayerAvatar();// 0x13ab714
	function DisplayAvatar();// 0x13ab64c
	function CreateWeapon();// 0x13ab5cc
	function BluePrintSetEnable();// 0x1ddc250
	function ApplyAnimation();// 0x13ab5b8

--------------------------------
Class: WeaponAnimAsset
	FName WeaponName;//[Offset: 0x0 , Size: 8]
	AnimSequenceBase* AnimPose;//[Offset: 0x8 , Size: 40]
	AnimSequenceBase* AnimAdd;//[Offset: 0x30 , Size: 40]
	AnimSequenceBase* WeaponAnimBP;//[Offset: 0x58 , Size: 40]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	int gender;//[Offset: 0x698 , Size: 4]
	delegate OnAvatarHeadVisible;//[Offset: 0x69c , Size: 12]
	delegate OnAvatarEquipped;//[Offset: 0x6a8 , Size: 12]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4 , Size: 1]
	int HeadAvatarID;//[Offset: 0x6c8 , Size: 4]
	int PreHeadAvatarID;//[Offset: 0x6cc , Size: 4]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0 , Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e1 , Size: 1]
	<FName> HadHideBoneNames;//[Offset: 0x6e4 , Size: 60]
	enum[] OpenResetHideBone;//[Offset: 0x720 , Size: 12]
	<enum,AvatarHideBonesDesc> AvatarHideBoneMap;//[Offset: 0x72c , Size: 60]
	int[] ignoreSlots;//[Offset: 0x768 , Size: 12]
	int WholeBodyModelID;//[Offset: 0x774 , Size: 4]
	int CurrentClothID;//[Offset: 0x778 , Size: 4]
	int[] LastSuitItems;//[Offset: 0x77c , Size: 12]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788 , Size: 1]
	<enum,FName> ClothMaterialColorName;//[Offset: 0x78c , Size: 60]
	<enum,FName> ClothMaterialSkinName;//[Offset: 0x7c8 , Size: 60]
	<enum,BackpackAvatarItemColor> RunningColorHandle;//[Offset: 0x804 , Size: 60]
	<enum,BackpackAvatarItemPattern> RunningPatternHandle;//[Offset: 0x840 , Size: 60]
	<int,AvatarEffectGroup> LoadedEffectGroup;//[Offset: 0x87c , Size: 60]
	delegate OnAvatarAttachEquipped;//[Offset: 0x8b8 , Size: 12]
	<int,AvatarAttachMeshGroup> LoadedAttachMeshGroup;//[Offset: 0x8c4 , Size: 60]
	int ConfigMinDistFromMainChar;//[Offset: 0x900 , Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0x904 , Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0x908 , Size: 4]
	float[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0x90c , Size: 12]
	AvatarAttachMeshFrameSkipMap[] ConfigLODToFrameSkipMap;//[Offset: 0x918 , Size: 12]
	int EnableEquipAvatarPendant;//[Offset: 0x924 , Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928 , Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x929 , Size: 1]
	function TypeToInt();// 0x13f551c
	function Streamable_RequestAsyncLoadHandles();// 0x13f5448
	function SetSkinMaterial();// 0x13f532c
	function SetNormalMaterial();// 0x13f51b4
	function SetMeshVisibleByID();// 0x13f5090
	function SetIgnoreSlots();// 0x13f5018
	function SetBodySuitsMaterial();// 0x13f4edc
	function SetAvatarVisibility();// 0x13f4dc8
	function SetAvatarGender();// 0x13f4d50
	function SetAvatarForceLOD();// 0x13f4c94
	function SetAllMeshCharMode();// 0x13f4c14
	function ResetAnimDynamicsByMeshComp();// 0x13f4b94
	function ResetAllAnimDynamics();// 0x13f4b78
	function RequestSyncLoadHandles();// 0x13f4aac
	function RemoveClothParticleEffect();// 0x13f4a34
	function RemoveAttachMesh();// 0x13f49bc
	function ReloadAllEquippedAvatar();// 0x13f493c
	function ProcessClothSuits();// 0x13f4920
	function PreProcessBeforeLoadMesh();// 0x13f4904
	function PostProcessAfterLoadMesh();// 0x13f48e8
	function OnSyncLoadBattleHandlesDone();// 0x13f4790
	function OnRep_BodySlotStateChanged();// 0x13f4774
	function OnLoadAvatarSlotDesc();// 0x13f46a4
	function OnDeleteAvatarSlotDesc();// 0x13f4588
	function OnAvatarMeshEquippedEvent();// 0x13f445c
	function OnAvatarHeadVisible__DelegateSignature();// 0x1ddc250
	function OnAvatarEquippedCall();// 0x13f4350
	function OnAvatarEquipped__DelegateSignature();// 0x1ddc250
	function OnAvatarAttachEquipped__DelegateSignature();// 0x1ddc250
	function OnAsyncLoadMeshesDone();// 0x13f42d0
	function OnAsyncLoadBattleHandlesDone();// 0x13f4170
	function LoadAvatarMeshData();// 0x13f4098
	function IsUseDefaultReplaceModel();// 0x13f3f70
	function IsTeammate();// 0x13f3f40
	function IsSameAvatarItem();// 0x13f3e44
	function IsSameAvatarHandle();// 0x13f3d48
	function IsMasterMeshSlotID();// 0x13f3cc0
	function IsItemBlueprintExist();// 0x13f3b90
	function IntToType();// 0x13f3b1c
	function InitMasterComponent();// 0x13f3b08
	function Initialize();// 0x13f3aec
	function InitialAvatarParam();// 0x13f3a74
	function InitDefaultMesh();// 0x13f39fc
	function InitDefaultAvatarByResID();// 0x13f38fc
	function InitBodyMeshByHead();// 0x13f3818
	function HandleUnEquipCloth();// 0x13f3780
	function HandleHeadEquipped();// 0x13f3708
	function HandleEquipInitalCloth();// 0x13f3690
	function HandleEquipCloth();// 0x13f35b4
	function GetStaticMesh();// 0x13f3500
	function GetSlotMeshType();// 0x13f33f0
	function GetSkeletalMesh();// 0x13f333c
	function GetMeshCompBySlot();// 0x13f32b4
	function GetMaterialBySlotName();// 0x13f31f0
	function GetMaterial();// 0x13f313c
	function GetLoadedHandle();// 0x13f30bc
	function GetEquipmentSkinItemID();// 0x13f3034
	function GetEquimentMeshBySlot();// 0x13f2f3c
	function GetDefaultBodyItemIDList();// 0x13f2e7c
	function GetClothMaterialSkinName();// 0x13f2da8
	function GetClothMaterialColorName();// 0x13f2cd4
	function GetCharSkinMaterial();// 0x1ddc250
	function GetAvatarItemPattern();// 0x13f2bcc
	function GetAvatarItemColor();// 0x13f2b08
	function GetAttachMeshResRef();// 0x13f2984
	function GenerateClientDefaultAvatar();// 0x1ddc250
	function EnableEquipAvatarPendantFeature();// 0x13f295c
	function DeleteAvatarMeshData();// 0x13f28d4
	function CreateAvatarItemPattern();// 0x1ddc250
	function CreateAvatarItemColor();// 0x1ddc250
	function CreateAvatarHandle();// 0x13f27f0
	function ClearAvatarHandlerFromPool();// 0x13f2758
	function CheckShouldEquipDefaultItem();// 0x13f26d0
	function CheckIsHiddenByOther();// 0x13f2650
	function AsyncLoadClothParticleEffect();// 0x13f2594
	function AsyncLoadAttachMesh();// 0x13f24d8
	function ApplyMeshCompCollision();// 0x13f2460
	function ApplyMaterial();// 0x13f2394
	function ApplyClothParticleEffect();// 0x13f22d8
	function ApplyAvatarCustomInfo();// 0x13f2190
	function ApplyAttachMesh();// 0x13f20d4
	function AddAvatarHandleToPool();// 0x13f2054

--------------------------------
Class: AvatarHideBonesDesc
	HideBoneData[] hideBoneSlots;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotToMatColor[] SlotMatColorArray;//[Offset: 0x24 , Size: 12]
	function SetCustomColorDeffered();// 0x13bdf08
	function SetAvatarCustomInfo();// 0x13bde4c

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c , Size: 8]
	function SetMaterialTexture();// 0x13bd838
	function SetMaterialScalar();// 0x13bd730
	function SetMaterialColor();// 0x13bd61c
	function GetOwnerComponent();// 0x13bd5f4

--------------------------------
Class: SlotToMatColor
	enum SlotID;//[Offset: 0x0 , Size: 1]
	LinearColor[] MaskColor;//[Offset: 0x4 , Size: 12]
	float GrayScale;//[Offset: 0x10 , Size: 4]
	Texture* MaskGrayTexture;//[Offset: 0x18 , Size: 40]

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotToMatPattern[] SlotMatPatternArray;//[Offset: 0x24 , Size: 12]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30 , Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48 , Size: 24]
	function SetCustomPatternDeffered();// 0x13be76c
	function SetAvatarCustomInfo();// 0x13be6b0
	function IsPatternNumMode();// 0x13be688
	function InitPatternNumID();// 0x13be614
	function GetPatternNumTexturePath();// 0x1ddc250

--------------------------------
Class: SlotToMatPattern
	enum SlotID;//[Offset: 0x0 , Size: 1]
	Texture* PatternTexture;//[Offset: 0x8 , Size: 40]
	float IconScale;//[Offset: 0x30 , Size: 4]
	Texture* PatternTexture;//[Offset: 0x38 , Size: 40]
	float IconScale;//[Offset: 0x60 , Size: 4]
	LinearColor IconOffset;//[Offset: 0x64 , Size: 16]

--------------------------------
Class: AvatarEffectGroup
	ParticleSystemComponent[] ParticleCompList;//[Offset: 0x0 , Size: 12]
	AvatarEffectData[] EffectDataList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: AvatarEffectData
	Transform Transform;//[Offset: 0x0 , Size: 48]
	ParticleSystem* ParticleSystem;//[Offset: 0x30 , Size: 40]
	FName AttachSocket;//[Offset: 0x58 , Size: 8]
	enum ValidMethod;//[Offset: 0x60 , Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x64 , Size: 12]

--------------------------------
Class: AvatarAttachMeshGroup
	MeshComponent[] AttachMeshCompList;//[Offset: 0x0 , Size: 12]
	AvatarAttachMeshData[] AttachMeshDataList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: AvatarAttachMeshData.AssetPackage
	Transform Transform;//[Offset: 0x10 , Size: 48]
	FName AttachSocket;//[Offset: 0x40 , Size: 8]
	FName SlotName;//[Offset: 0x48 , Size: 8]
	StaticMesh* StaticMesh;//[Offset: 0x50 , Size: 40]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x78 , Size: 40]
	SkeletalMesh* LODSkeletalMesh;//[Offset: 0xa0 , Size: 40]
	MaterialInterface* MatInstance;//[Offset: 0xc8 , Size: 40]
	class AnimInstance* AttachAnimBP;//[Offset: 0xf0 , Size: 4]
	bool bUseScreenFactorOptimizeAnimRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]

--------------------------------
Class: AssetPackage

--------------------------------
Class: AvatarAttachMeshFrameSkipMap
	int SkipFrame;//[Offset: 0x0 , Size: 4]
	int SkipAnimCount;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x29c , Size: 1]
	float FOVAngle;//[Offset: 0x2a0 , Size: 4]
	float OrthoWidth;//[Offset: 0x2a4 , Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2a8 , Size: 4]
	byte CaptureSource;//[Offset: 0x2ac , Size: 1]
	byte CompositeMode;//[Offset: 0x2ad , Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2b0 , Size: 1232]
	float PostProcessBlendWeight;//[Offset: 0x780 , Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x784 , Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x790 , Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0 , Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x7d4 , Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x7e0 , Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ec , Size: 1]
	function CaptureScene();// 0x35ea7f8
	function AddOrUpdateBlendable();// 0x35ea70c

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x235 , Size: 1]
	PrimitiveComponent[] HiddenComponents;//[Offset: 0x238 , Size: 12]
	Actor[] HiddenActors;//[Offset: 0x244 , Size: 12]
	PrimitiveComponent[] ShowOnlyComponents;//[Offset: 0x250 , Size: 12]
	Actor[] ShowOnlyActors;//[Offset: 0x25c , Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268 , Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269 , Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a , Size: 1]
	float LODDistanceFactor;//[Offset: 0x26c , Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x270 , Size: 4]
	int CaptureSortPriority;//[Offset: 0x274 , Size: 4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x278 , Size: 12]
	function ShowOnlyComponent();// 0x35ea164
	function ShowOnlyActorComponents();// 0x35ea0ec
	function SetCaptureSortPriority();// 0x35ea074
	function RemoveShowOnlyComponent();// 0x35e9ffc
	function RemoveShowOnlyActorComponents();// 0x35e9f84
	function HideComponent();// 0x35e9f0c
	function HideActorComponents();// 0x35e9e94
	function ClearShowOnlyComponents();// 0x35e9e1c
	function ClearHiddenComponents();// 0x35e9e08

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0x94 , Size: 4]
	int SizeY;//[Offset: 0x98 , Size: 4]
	LinearColor ClearColor;//[Offset: 0x9c , Size: 16]
	byte AddressX;//[Offset: 0xac , Size: 1]
	byte AddressY;//[Offset: 0xad , Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xae , Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xae , Size: 1]
	byte RenderTargetFormat;//[Offset: 0xaf , Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0 , Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0 , Size: 1]
	byte OverrideFormat;//[Offset: 0xb1 , Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0x8c , Size: 4]

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0 , Size: 12]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x325 , Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x328 , Size: 4]
	float OcclusionDepthRange;//[Offset: 0x32c , Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x330 , Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x33c , Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x340 , Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x344 , Size: 4]
	int DynamicShadowCascades;//[Offset: 0x348 , Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x34c , Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x350 , Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x354 , Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x358 , Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x35c , Size: 4]
	float FarShadowDistance;//[Offset: 0x360 , Size: 4]
	float DistanceFieldShadowDistance;//[Offset: 0x364 , Size: 4]
	float LightSourceAngle;//[Offset: 0x368 , Size: 4]
	float TraceDistance;//[Offset: 0x36c , Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x370 , Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x380 , Size: 1]
	Color ModulatedShadowColor;//[Offset: 0x384 , Size: 4]
	ACESParameter[] ACESParameters;//[Offset: 0x388 , Size: 12]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x394 , Size: 1]
	function SetShadowDistanceFadeoutFraction();// 0x34f2eb4
	function SetOcclusionMaskDarkness();// 0x34f2e3c
	function SetLightShaftOverrideDirection();// 0x34f2dcc
	function SetEnableLightShaftOcclusion();// 0x34f2d4c
	function SetDynamicShadowDistanceStationaryLight();// 0x34f2cd4
	function SetDynamicShadowDistanceMovableLight();// 0x34f2c5c
	function SetDynamicShadowCascades();// 0x34f2be4
	function SetCascadeTransitionFraction();// 0x34f2b6c
	function SetCascadeDistributionExponent();// 0x34f2af4

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0 , Size: 16]
	float Bright;//[Offset: 0x10 , Size: 4]
	float Gray;//[Offset: 0x14 , Size: 4]
	float ShoulderStrength;//[Offset: 0x18 , Size: 4]
	float ToeStrength;//[Offset: 0x1c , Size: 4]
	float LinearStrength;//[Offset: 0x20 , Size: 4]
	float LinearAngle;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigItem[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4 , Size: 12]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	int[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14 , Size: 12]
	int[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20 , Size: 12]
	int[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: BulletImpactFXTargetCullingByQualityLeveConfigItem
	byte QualityLevel;//[Offset: 0x0 , Size: 1]
	class Actor[] TargetClassConfigList;//[Offset: 0x4 , Size: 12]
	class Object[] CachedClassList;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: FootprintActorInfo
	enum PhysicalSurface;//[Offset: 0x0 , Size: 1]
	class FootprintInstanceActor* FootprintClass;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: FootprintInstanceActor.Actor.Object
	InstancedStaticMeshComponent* InstancedMeshComponent;//[Offset: 0x2c0 , Size: 4]

--------------------------------
Class: FootprintActorBlock
	<uint32,FootprintInstanceActor> TeamFootprintInstanceActorMap;//[Offset: 0x0 , Size: 60]
	FootprintInstanceActor* OthersFootprintInstanceActor;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: TrailMarkActorBlock
	TrailMarkActor[] WorkingList;//[Offset: 0x0 , Size: 12]
	TrailMarkActor[] AssignableList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic> DecalMaterialsLookupTable;//[Offset: 0x2c0 , Size: 60]
	IdeaDecalRenderComponent[] DecalComponents;//[Offset: 0x338 , Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x570 , Size: 4]
	function RemoveDecalOnTimer();// 0x143420c

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0 , Size: 4]
	Texture* DecalTexure;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x9c , Size: 4]
	Texture* DecalTexure;//[Offset: 0xa0 , Size: 4]
	int CoordX;//[Offset: 0xa4 , Size: 4]
	int CoordY;//[Offset: 0xa8 , Size: 4]

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x2c0 , Size: 4]
	int RemainSupplyTimes;//[Offset: 0x2c4 , Size: 4]
	int SupplyBulletNum;//[Offset: 0x2c8 , Size: 4]
	float ValidDistance;//[Offset: 0x2cc , Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x2d0 , Size: 12]
	function ReqUseSupplySpot();// 0x13a1b64

--------------------------------
Class: EnhancerSpot.Actor.Object
	EnhancerSpotPlayerSkill[] SkillIdConfig;//[Offset: 0x2c0 , Size: 12]
	int AddMonsterExpNum;//[Offset: 0x2cc , Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x2d0 , Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x2d4 , Size: 4]
	int UseSuccessTipsId;//[Offset: 0x2d8 , Size: 4]
	float ValidDistance;//[Offset: 0x2dc , Size: 4]
	float SelfResetTime;//[Offset: 0x2e0 , Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4 , Size: 1]
	enum EnhancerState;//[Offset: 0x2e5 , Size: 1]
	float ReadyTime;//[Offset: 0x2e8 , Size: 4]
	float FixReadyTime;//[Offset: 0x2ec , Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x2f0 , Size: 12]
	function StateChangeDelegate();// 0x13f0384
	function SetReadyTime();// 0x1413a1c
	function SetEState();// 0x14139a4
	function RPC_Broadcast_NotifyReadyTime();// 0x14138a8
	function ResetTimes();// 0x1413894
	function ResetSelf();// 0x1413880
	function ReqUseEnhancerSpot();// 0x1413800
	function ReadyTimeChangeDelegate();// 0x13a1b48
	function OpenEffect();// 0x13f4904
	function OnRep_StateChange();// 0x14137ec
	function OnRep_ReadyTimeChange();// 0x14137d8
	function OnRep_FixReadyTimeChange();// 0x14137d8
	function GetSpotState();// 0x14137bc
	function DelayResetSelf();// 0x14137a8
	function CloseEffect();// 0x141378c

--------------------------------
Class: EnhancerSpotPlayerSkill
	enum PawnSubType;//[Offset: 0x0 , Size: 1]
	int SkillID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PlayerRevivalComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0xbc , Size: 4]
	int GotoSpectatingTime;//[Offset: 0xc0 , Size: 4]
	int64 FinishRevivalTime;//[Offset: 0xc8 , Size: 8]
	int64 StartObserverTime;//[Offset: 0xd0 , Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0xd8 , Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0xdc , Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0xe8 , Size: 104]
	DateTime BePickupTime;//[Offset: 0x150 , Size: 8]
	function TickRevival();// 0x147ae1c
	function SetRemainingRevivalTime();// 0x147ada4
	function SetCaptureIDCardStatus();// 0x147ad24
	function OnPlayerRevived();// 0x147acac
	function OnPlayerQuitSpectating();// 0x147ac98
	function OnPlayerGotoSpectating();// 0x147ac84
	function OnPlayerExitGame();// 0x147ac70
	function OnPlayerEscapeWhenGameEnd();// 0x147abf0
	function LeaveRevivalState();// 0x147ab78
	function IsInWaittingRevivalState();// 0x147ab50
	function GetRevivalCountDownTime();// 0x147ab34
	function GetRemainingRevivalTime();// 0x147ab0c
	function GetCaptureIDCardStatus();// 0x147aae4
	function FindPlayerUIDFromKey();// 0x147aa64
	function EnterRevivalState();// 0x147aa50
	function CaptureIDCard();// 0x147a954
	function BePickupRevivalCard();// 0x147a858

--------------------------------
Class: RevivalPointActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x2c0 , Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x2c4 , Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x2c8 , Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x2cc , Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x2d0 , Size: 4]
	enum CurState;//[Offset: 0x2d4 , Size: 1]
	enum PreState;//[Offset: 0x2d5 , Size: 1]
	int RevivalTime;//[Offset: 0x2d8 , Size: 4]
	int CurRevivalTime;//[Offset: 0x2dc , Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	int OperationalDistance;//[Offset: 0x2e4 , Size: 4]
	<enum,ParticleSystem> RevivalPointPS;//[Offset: 0x2e8 , Size: 60]
	<enum,AkAudioEvent> RevivalPointSounds;//[Offset: 0x324 , Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x360 , Size: 4]
	int SmokingdisappearTime;//[Offset: 0x364 , Size: 4]
	int IconID;//[Offset: 0x368 , Size: 4]
	uint32[] CurrentRevivingPlayers;//[Offset: 0x36c , Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x378 , Size: 8]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x390 , Size: 8]
	function StartRevival();// 0x149b4d4
	function RevivalPlayers();// 0x149b454
	function RecheckCurrentRevivingPlayers();// 0x149b42c
	function OnRep_ShowSmoking();// 0x149b418
	function OnRep_RevivalPointState();// 0x149b3a0
	function OnRep_CurrentRevivingPlayers();// 0x149b38c
	function IsPlayerRevivedCurrently();// 0x149b30c
	function GiveUpRevivalPlayers();// 0x149b28c
	function DistanceChangedEvent();// 0x1ddc250

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0 , Size: 12]
	FString GameAppID;//[Offset: 0xc , Size: 12]
	FString OpenID;//[Offset: 0x18 , Size: 12]
	uint16 AreaID;//[Offset: 0x24 , Size: 2]
	int8 PlatID;//[Offset: 0x26 , Size: 1]
	FString ZoneID;//[Offset: 0x28 , Size: 12]
	uint64 BattleId;//[Offset: 0x38 , Size: 8]
	FString UserName;//[Offset: 0x40 , Size: 12]
	uint64 RoleID;//[Offset: 0x50 , Size: 8]
	int8 RoleType;//[Offset: 0x58 , Size: 1]
	FString PicUrl;//[Offset: 0x5c , Size: 12]

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0xc0 , Size: 8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0xc8 , Size: 8]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0 , Size: 1]
	float DrawShootLineTime;//[Offset: 0xd4 , Size: 4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	float DrawShootPointOnScreenTime;//[Offset: 0xdc , Size: 4]
	float DrawShootPointOnScreenSize;//[Offset: 0xe0 , Size: 4]
	float DrawShootPoint3DSize;//[Offset: 0xe4 , Size: 4]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0xe8 , Size: 4]
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0xec , Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0xf0 , Size: 4]
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]
	int ContinuousShootingBulletsNum;//[Offset: 0xf8 , Size: 4]
	delegate OnShoot;//[Offset: 0xfc , Size: 12]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x108 , Size: 4]
	function ShootDelegate__DelegateSignature();// 0x1ddc250
	function ReInitWeaponOwnerData();// 0x1559ef0
	function OnWeaponClipMaxBulletChanged();// 0x1559edc
	function OnWeaponBulletChanged();// 0x1559ec8
	function OnContinuousShootStateChangedDelegate__DelegateSignature();// 0x1ddc250
	function OnContinuousShootDelegate__DelegateSignature();// 0x1ddc250
	function GetBulletPosAndVelocity();// 0x1559df0
	function CheckShootState();// 0x1469708
	function CalcShootTargetLocByStartAndRot();// 0x1559ca8

--------------------------------
Class: BulletTrackComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xbc , Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0xc0 , Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0xc4 , Size: 4]
	int UseTss;//[Offset: 0x128 , Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130 , Size: 1]
	function OnWeaponStopFire();// 0x13ef978
	function OnWeaponStartFire();// 0x13ef964
	function OnWeaponShoot();// 0x13ef950
	function GetDataFromWeaponEntity();// 0x13ef93c
	function GetCurRecoilInfo();// 0x13ef8f4
	function GetCurDeviation();// 0x13ef8cc
	function CheckComponentTick();// 0x13ef8b8

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x318 , Size: 4]
	float BulletFireSpeed;//[Offset: 0x31c , Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320 , Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x324 , Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x328 , Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x32c , Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x330 , Size: 4]
	ExtendBulletNumAttachment[] ReplaceExtendMaxBulletNumList;//[Offset: 0x334 , Size: 12]
	float ShootInterval;//[Offset: 0x340 , Size: 4]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344 , Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345 , Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346 , Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x348 , Size: 4]
	float BurstShootInterval;//[Offset: 0x34c , Size: 4]
	float BurstShootCD;//[Offset: 0x350 , Size: 4]
	int BulletNumSingleShot;//[Offset: 0x354 , Size: 4]
	FName MuzzleSocketName;//[Offset: 0x358 , Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x360 , Size: 8]
	FName SilencerSocketName;//[Offset: 0x368 , Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x370 , Size: 8]
	FName ShellDropSocketName;//[Offset: 0x378 , Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x380 , Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x388 , Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x38c , Size: 4]
	byte shootType;//[Offset: 0x390 , Size: 1]
	int ShootTotalType;//[Offset: 0x394 , Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398 , Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x39c , Size: 4]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x3a0 , Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x3b4 , Size: 20]
	float BaseImpactDamage;//[Offset: 0x3c8 , Size: 4]
	float BulletRange;//[Offset: 0x3cc , Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x3d0 , Size: 4]
	byte ImpactDirType;//[Offset: 0x3d4 , Size: 1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x3d8 , Size: 12]
	float RangeModifier;//[Offset: 0x3e4 , Size: 4]
	float ReferenceDistance;//[Offset: 0x3e8 , Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x3ec , Size: 4]
	class DamageType* DamageType;//[Offset: 0x3f0 , Size: 4]
	ItemDefineID BulletType;//[Offset: 0x3f8 , Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x410 , Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428 , Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429 , Size: 1]
	int InitBulletInClip;//[Offset: 0x42c , Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430 , Size: 1]
	float TraceDistance;//[Offset: 0x434 , Size: 4]
	float MaxValidHitTime;//[Offset: 0x438 , Size: 4]
	<byte,float> BreakThroughDampRateConfig;//[Offset: 0x43c , Size: 60]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478 , Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x47c , Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x480 , Size: 56]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x4b8 , Size: 8]
	float DamageImpulse;//[Offset: 0x4c0 , Size: 4]
	byte ReloadType;//[Offset: 0x4c4 , Size: 1]
	float PreFireTime;//[Offset: 0x4c8 , Size: 4]
	float PostFireTime;//[Offset: 0x4cc , Size: 4]
	float PostReloadTime;//[Offset: 0x4d0 , Size: 4]
	float ReloadDurationStart;//[Offset: 0x4d4 , Size: 4]
	float ReloadDurationLoop;//[Offset: 0x4d8 , Size: 4]
	float ReloadTime;//[Offset: 0x4dc , Size: 4]
	float ReloadTimeTactical;//[Offset: 0x4e0 , Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x4e4 , Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x4e8 , Size: 4]
	FName ReloadAllTIDName;//[Offset: 0x4f0 , Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x4f8 , Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500 , Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x504 , Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508 , Size: 1]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x50c , Size: 244]
	AutoAimingConfig[] AutoAimingConfigList;//[Offset: 0x600 , Size: 12]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610 , Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x614 , Size: 100]
	float AccessoriesVRecoilFactor;//[Offset: 0x678 , Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x67c , Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x680 , Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x684 , Size: 64]
	float ShotGunVerticalSpread;//[Offset: 0x6c4 , Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x6c8 , Size: 4]
	float GameDeviationFactor;//[Offset: 0x6cc , Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x6d0 , Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x6d4 , Size: 4]
	byte CrossHairType;//[Offset: 0x6d8 , Size: 1]
	float CrossHairInitialSize;//[Offset: 0x6dc , Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x6e0 , Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x6e4 , Size: 4]
	FName DefaultScopeSocket;//[Offset: 0x6e8 , Size: 8]
	FName DefaultGripSocket;//[Offset: 0x6f0 , Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x6f8 , Size: 8]
	FName DefaultMagSocket;//[Offset: 0x700 , Size: 8]
	float WeaponBodyLength;//[Offset: 0x708 , Size: 4]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x70c , Size: 12]
	float WeaponAimFOV;//[Offset: 0x71c , Size: 4]
	float WeaponAimInTime;//[Offset: 0x720 , Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x724 , Size: 4]
	float WeaponAimYawRate;//[Offset: 0x728 , Size: 4]
	float GameMotionYawRate;//[Offset: 0x72c , Size: 4]
	float GameMotionPitchRate;//[Offset: 0x730 , Size: 4]
	float ForegripParam;//[Offset: 0x734 , Size: 4]
	float MagParam;//[Offset: 0x738 , Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73c , Size: 1]
	float SensitiveFireYawRate;//[Offset: 0x740 , Size: 4]
	float SensitiveFirePitchRate;//[Offset: 0x744 , Size: 4]
	byte SightType;//[Offset: 0x748 , Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0x750 , Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x768 , Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x76c , Size: 4]
	float RecoilKickADS;//[Offset: 0x770 , Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x774 , Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x778 , Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77c , Size: 1]
	enum ReleaseFireType;//[Offset: 0x77d , Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77e , Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77f , Size: 1]
	float LockAnimPitchDegree;//[Offset: 0x780 , Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x784 , Size: 4]
	float AnimationKick;//[Offset: 0x788 , Size: 4]
	int ReloadAnimSlot;//[Offset: 0x78c , Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790 , Size: 1]
	function ReloadNoEncodeAttr();// 0x14a929c
	function ReloadEncodeAttr();// 0x14a9288
	function ReloadCanModifyInGameAttr();// 0x14a90ec
	function ReloadAttr();// 0x14a90d8
	function GetBulletType();// 0x14a908c
	function GetAttrReloadTableName();// 0x14a8fcc
	function EncodeAttr();// 0x14a8fb8

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x2c0 , Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]
	int MaxNoGravityRange;//[Offset: 0x2c8 , Size: 4]
	float LaunchGravityScale;//[Offset: 0x2cc , Size: 4]
	int PunctureTimes;//[Offset: 0x2d0 , Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x2d4 , Size: 4]
	class DamageType* DamageType;//[Offset: 0x2d8 , Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x2dc , Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1 , Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x2e4 , Size: 4]
	Vector RootScale;//[Offset: 0x2e8 , Size: 12]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4 , Size: 1]
	Vector ShootDir;//[Offset: 0x2f8 , Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x304 , Size: 1]
	delegate OnResetBullet;//[Offset: 0x3e0 , Size: 12]
	delegate OnBulletImpact;//[Offset: 0x3ec , Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x3f8 , Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x404 , Size: 4]
	Actor* WeaponOwnerPawn;//[Offset: 0x408 , Size: 4]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x40c , Size: 4]
	float WeaponFloorHeight;//[Offset: 0x47c , Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x480 , Size: 12]
	byte CachedOwnerRole;//[Offset: 0x48c , Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x490 , Size: 4]
	function ResetBulletDelegate__DelegateSignature();// 0x1ddc250
	function ReloadNoEncodeAttr();// 0x13a1b48
	function OnImpactEnd();// 0x13e05c4
	function OnImpactDelegate__DelegateSignature();// 0x1ddc250
	function OnImpact();// 0x13e0520
	function NeedCheckBulletFlySound();// 0x1559800
	function LaunchBulletDelegate__DelegateSignature();// 0x1ddc250
	function GetMaxBulletFlySpeed();// 0x14a292c

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152 , Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153 , Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154 , Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x158 , Size: 4]
	function ResumeMoveAfterImpactWithNoLost();// 0x13ef198
	function ResetTickDelay();// 0x13ef17c
	function IgnoreBounceReflectOnce();// 0x13ef160
	function ForceStop();// 0x13ef14c

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4 , Size: 4]
	float MaxSpeed;//[Offset: 0xf8 , Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc , Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc , Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc , Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc , Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc , Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc , Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc , Size: 1]
	float PreviousHitTime;//[Offset: 0x100 , Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x104 , Size: 12]
	float ProjectileGravityScale;//[Offset: 0x110 , Size: 4]
	float Buoyancy;//[Offset: 0x114 , Size: 4]
	float Bounciness;//[Offset: 0x118 , Size: 4]
	float Friction;//[Offset: 0x11c , Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120 , Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x124 , Size: 12]
	delegate OnProjectileStop;//[Offset: 0x130 , Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x13c , Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x140 , Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x148 , Size: 4]
	int MaxSimulationIterations;//[Offset: 0x14c , Size: 4]
	function StopSimulating();// 0x35df318
	function SetVelocityInLocalSpace();// 0x35df2a0
	function OnProjectileStopDelegate__DelegateSignature();// 0x1ddc250
	function OnProjectileBounceDelegate__DelegateSignature();// 0x1ddc250
	function LimitVelocity();// 0x35df20c

--------------------------------
Class: ExtendBulletNumAttachment
	int TypeSpecificID;//[Offset: 0x0 , Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0 , Size: 4]
	float Body;//[Offset: 0x4 , Size: 4]
	float Limbs;//[Offset: 0x8 , Size: 4]
	float Hand;//[Offset: 0xc , Size: 4]
	float Foot;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0 , Size: 4]
	int rangeEnd;//[Offset: 0x4 , Size: 4]
	float rangeAttenuateFactor;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0 , Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18 , Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x30 , Size: 8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0 , Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8 , Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0 , Size: 76]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x4c , Size: 76]
	AutoAimingRangeConfig ScopeRange;//[Offset: 0x98 , Size: 76]
	float followTimeMax;//[Offset: 0xe4 , Size: 4]
	bool TriggerBeforeFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8 , Size: 1]
	CurveFloat* SpeedCurve;//[Offset: 0xec , Size: 4]
	float MaxAngle;//[Offset: 0xf0 , Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0 , Size: 4]
	float RangeRate;//[Offset: 0x4 , Size: 4]
	float SpeedRate;//[Offset: 0x8 , Size: 4]
	float RangeRateSight;//[Offset: 0xc , Size: 4]
	float SpeedRateSight;//[Offset: 0x10 , Size: 4]
	float CrouchRate;//[Offset: 0x14 , Size: 4]
	float ProneRate;//[Offset: 0x18 , Size: 4]
	float DyingRate;//[Offset: 0x1c , Size: 4]
	float DriveVehicleRate;//[Offset: 0x20 , Size: 4]
	float InVehicleRate;//[Offset: 0x24 , Size: 4]
	float FreeFallRate;//[Offset: 0x28 , Size: 4]
	float OpeningRate;//[Offset: 0x2c , Size: 4]
	float LandingRate;//[Offset: 0x30 , Size: 4]
	float adsorbMaxRange;//[Offset: 0x34 , Size: 4]
	float adsorbMinRange;//[Offset: 0x38 , Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x3c , Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x40 , Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x44 , Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0 , Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4 , Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8 , Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc , Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10 , Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14 , Size: 4]
	float LeftMax;//[Offset: 0x18 , Size: 4]
	float RightMax;//[Offset: 0x1c , Size: 4]
	float HorizontalTendency;//[Offset: 0x20 , Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24 , Size: 4]
	int BulletPerSwitch;//[Offset: 0x28 , Size: 4]
	float TimePerSwitch;//[Offset: 0x2c , Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34 , Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38 , Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c , Size: 4]
	float RecoilValueClimb;//[Offset: 0x40 , Size: 4]
	float RecoilValueFail;//[Offset: 0x44 , Size: 4]
	float RecoilModifierStand;//[Offset: 0x48 , Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c , Size: 4]
	float RecoilModifierProne;//[Offset: 0x50 , Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54 , Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58 , Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60 , Size: 4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0 , Size: 4]
	float DeviationBaseAim;//[Offset: 0x4 , Size: 4]
	float DeviationBaseADS;//[Offset: 0x8 , Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc , Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10 , Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14 , Size: 4]
	float DeviationMax;//[Offset: 0x18 , Size: 4]
	float DeviationMinMove;//[Offset: 0x1c , Size: 4]
	float DeviationMaxMove;//[Offset: 0x20 , Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24 , Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28 , Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c , Size: 4]
	float DeviationStanceStand;//[Offset: 0x30 , Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34 , Size: 4]
	float DeviationStanceProne;//[Offset: 0x38 , Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x2d8 , Size: 4]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x2dc , Size: 44]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x308 , Size: 12]
	int LastShootTime;//[Offset: 0x318 , Size: 4]
	function OnHandleShootDamageDelegate__DelegateSignature();// 0x1ddc250
	function CheckShootState();// 0x1469708

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	Actor[] BulletCacheList;//[Offset: 0x2cc , Size: 12]

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0 , Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4 , Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8 , Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc , Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14 , Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c , Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20 , Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26 , Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x104 , Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x108 , Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x10c , Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x110 , Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x114 , Size: 4]
	float CameraShakFalloff;//[Offset: 0x118 , Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c , Size: 1]
	bool bNeedDisableMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d , Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x120 , Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x124 , Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x130 , Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x134 , Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x140 , Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x144 , Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x150 , Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x160 , Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x164 , Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x170 , Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x174 , Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x180 , Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x184 , Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x190 , Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x1a0 , Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x1a4 , Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x1b0 , Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x1b4 , Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x1c0 , Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x1c4 , Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x1d0 , Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x1e0 , Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x1e4 , Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x1f0 , Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x1f4 , Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x200 , Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x204 , Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210 , Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x214 , Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x218 , Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x224 , Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x228 , Size: 12]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x234 , Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x238 , Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x23c , Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x240 , Size: 4]
	ParticleSystemComponent[] OBBulletTrackFXCompsArray;//[Offset: 0x244 , Size: 12]
	Vector MuzzleFXOriginalScale;//[Offset: 0x250 , Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x25c , Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x260 , Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x264 , Size: 4]
	OBEffectBullet[] OBEffectBulletsCachePool;//[Offset: 0x278 , Size: 12]
	function ReloadAttr();// 0x14a8a1c
	function OnWeaponUnEquiped();// 0x14a8a08
	function OnWeaponEuiped();// 0x14a89f4
	function HandleWeaponAction();// 0x14a8974
	function GetOBEffectBullet();// 0x14a894c
	function GetAvailableOBEffectBulletNum();// 0x14a8924
	function ActiveLocalShellDropFX();// 0x14a8910

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<byte,AkAudioEvent> SoundDataMap;//[Offset: 0xc0 , Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0xfc , Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x100 , Size: 4]
	function HandleWeaponAction();// 0x14a8974

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0 , Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4 , Size: 4]
	float FXStartScaleValue;//[Offset: 0x8 , Size: 4]
	float FXEndScaleValue;//[Offset: 0xc , Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x2c0 , Size: 4]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x2c4 , Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x2d4 , Size: 4]
	float CurMovingTime;//[Offset: 0x300 , Size: 4]

--------------------------------
Class: WeaponAttrModifyConfig
	FString ModifyConfigID;//[Offset: 0x0 , Size: 12]
	WeaponAttrModifyData[] WeaponAttrModifiers;//[Offset: 0xc , Size: 12]

--------------------------------
Class: WeaponAttrModifyData
	FString ModifyAttr;//[Offset: 0x0 , Size: 12]
	enum Op;//[Offset: 0xc , Size: 1]
	float ModifyValue;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: SimulateBulletHitInfoData
	Vector ImpactPoint;//[Offset: 0x0 , Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc , Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x18 , Size: 12]
	byte SurfaceType;//[Offset: 0x24 , Size: 1]
	Actor* Actor;//[Offset: 0x28 , Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x30 , Size: 8]

--------------------------------
Class: SceneCompUpdateOptimizationItem

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0xc0 , Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0xc4 , Size: 4]
	function GetCurrentState();// 0x15c4ab8
	function GetCurrentFreshWeaponStateType();// 0x15c4a90

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0xc0 , Size: 12]
	delegate OnEndState;//[Offset: 0xcc , Size: 12]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	byte FreshWeaponStateType;//[Offset: 0xd9 , Size: 1]

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.SceneComponent.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x3ec , Size: 12]
	function PreChangeGrenadeAvatar();// 0x142d500
	function PostChangeItemAvatar();// 0x142d4e4
	function GetItemAvatarHandlePath();// 0x1ddc250
	function GetItemAvatarHandle();// 0x1ddc250
	function GetDefaultAvatarID();// 0x1ddc250
	function AddAssetSoftObject();// 0x142d3a8

--------------------------------
Class: WeaponSlotSwitchTimeData
	byte EquipSlot;//[Offset: 0x0 , Size: 1]
	float TotalTime;//[Offset: 0x4 , Size: 4]
	float AttachWeaponTime;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: SpecialAmbientData
	AkAudioEvent* Sound;//[Offset: 0x0 , Size: 4]
	FString SwitchGroupName;//[Offset: 0x4 , Size: 12]
	FString SwitchValue;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	float BreathMax;//[Offset: 0xc8 , Size: 4]
	float AssistAccountableDuration;//[Offset: 0xcc , Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0xd0 , Size: 4]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0xd8 , Size: 4]
	int MaxDeathTimes;//[Offset: 0xdc , Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe8 , Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0xec , Size: 4]
	float Breath;//[Offset: 0xf0 , Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0xf4 , Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0xf8 , Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x104 , Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x108 , Size: 4]
	function SetHealthSafety();// 0x14c9acc
	function S2C_HelpOther();// 0x14c99b8
	function S2C_BeHelpedByOther();// 0x14c98a4
	function ResetDataOnRespawn();// 0x14c9890
	function RescueFinishSuccessfully();// 0x14c987c
	function OnRep_BreathChanged();// 0x14c953c
	function IsNearDeathInvincible();// 0x14c9854
	function IsHealthAlive();// 0x14c982c
	function IsHaveLastBreathStatus();// 0x14c9804
	function IsFinishedLastBreathStatus();// 0x14c97dc
	function InitializeOwner();// 0x14c9764
	function GotoLastBreathStatus();// 0x14c959c
	function GetBreathMax();// 0x14c9580
	function GetBreath();// 0x14c9564
	function EnterSwimWhileDying();// 0x14c9550
	function DoFinishLastBreath();// 0x14c953c
	function ClearNearDeathTeammate();// 0x14c9528
	function AddHealthSafety();// 0x14c945c
	function AddDeadBuff();// 0x14c9448

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xbc , Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0xc0 , Size: 4]
	anPickerData FanData;//[Offset: 0xc4 , Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0xf0 , Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0xf4 , Size: 4]
	float RestoringDuration;//[Offset: 0x110 , Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x114 , Size: 12]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x120 , Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x128 , Size: 4]
	function WaitingConfirmState_IsConditionSatisfied();// 0x14ca924
	function WaitingConfirmState_ActOnUnsatisfied();// 0x14ca910
	function WaitingConfirmState_ActOnSatisfied();// 0x1427acc
	function TickAsHelper();// 0x14ca898
	function ServerPlayerConfirm();// 0x14ca7e4
	function SelectedPickedTargetChangeNotifyHUD();// 0x14ca76c
	function RescueingState_IsConditionSatisfied();// 0x14ca744
	function RescueingState_ActOnUnsatisfied();// 0x14ca730
	function RescueingState_ActOnSatisfied();// 0x1427acc
	function RescueingProcessFinished();// 0x14ca71c
	function PlayerConfirmToRescueClientSide();// 0x14ca6f4
	function PickTargetsAsHelper();// 0x14ca620
	function OnRep_IsRescueingOtherStatusChange();// 0x14ca60c
	function IsInRescueingStatus();// 0x14ca5e4
	function InitializeOwner();// 0x14ca528
	function GetRestoringDuration();// 0x14ca500
	function DrawDebugFan();// 0x139c4bc

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0 , Size: 4]
	float angle;//[Offset: 0x4 , Size: 4]
	float Offset;//[Offset: 0x8 , Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	float LowerTraceRatio;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xbc , Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xc0 , Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xc8 , Size: 4]
	float CanFollowDist;//[Offset: 0xcc , Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xd0 , Size: 4]
	float QuitFollowDist;//[Offset: 0xd4 , Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xd8 , Size: 4]
	float DistThrehold;//[Offset: 0xdc , Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe4 , Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xec , Size: 4]
	TargetKeyOperation[] TargetOps;//[Offset: 0x124 , Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x130 , Size: 4]
	function WaitingConfirmState_IsConditionSatisfied();// 0x14c612c
	function WaitingConfirmState_ActOnUnsatisfied();// 0x14c6118
	function WaitingConfirmState_ActOnSatisfied();// 0x1427acc
	function TargetStartVault();// 0x14c60a0
	function SetInterruptAutoFollowByInput();// 0x14c6028
	function SelectedPickedTargetChangeNotifyHUD();// 0x14c5fb0
	function PlayerStopFollow();// 0x14c5f88
	function PlayerConfirmToFollow();// 0x14c5f60
	function InitializeOwner();// 0x14c5ee8
	function FollowingTargetChangeNotifyHUD();// 0x14c5e70
	function FollowingState_IsConditionSatisfied();// 0x14c5e48
	function FollowingState_ActOnUnsatisfied();// 0x14c5e34
	function FollowingState_ActOnSatisfied();// 0x14c5dbc

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	function TaskRemoved();// 0x1471288
	function Start();// 0x14031c8
	function IsValidate();// 0x1572750
	function DebugDraw();// 0x157268c
	function Awake();// 0x147126c

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x74 , Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x78 , Size: 4]
	function Update();// 0x13cd8d0
	function ToString();// 0x1572780
	function TaskRemoved();// 0x1471288
	function Start();// 0x14031c8
	function IsValidate();// 0x1572750
	function IsReachable();// 0x141f8f8
	function Finish();// 0x141fa30
	function DebugDraw();// 0x157268c
	function Awake();// 0x147126c

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x358 , Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x35c , Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x360 , Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x364 , Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368 , Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389 , Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a , Size: 1]
	float ResultMinPitch;//[Offset: 0x38c , Size: 4]
	float ResultMaxPitch;//[Offset: 0x390 , Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394 , Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x398 , Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x39c , Size: 28]
	CameraOffsetData ProneCameraData;//[Offset: 0x3b8 , Size: 28]
	CameraOffsetData IndoorCameraData;//[Offset: 0x3d4 , Size: 28]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x3f0 , Size: 28]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x40c , Size: 28]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x428 , Size: 28]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x444 , Size: 28]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x460 , Size: 28]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x47c , Size: 28]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x498 , Size: 28]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x4b4 , Size: 28]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x4d0 , Size: 28]
	CameraOffsetData VaultCameraData;//[Offset: 0x4ec , Size: 28]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x508 , Size: 28]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x524 , Size: 28]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540 , Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x544 , Size: 28]
	float AdditionalSocketOffetZMax;//[Offset: 0x564 , Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x568 , Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x578 , Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x57c , Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x580 , Size: 4]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584 , Size: 1]
	float OffsetCountTime;//[Offset: 0x588 , Size: 4]
	float OffSetDurTime;//[Offset: 0x58c , Size: 4]
	float RevertMoveSpeed;//[Offset: 0x590 , Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x594 , Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0x5a0 , Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x5d0 , Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x5e0 , Size: 16]
	function SetSelfieCameraDefRotation();// 0x1407f90
	function SetCameraDataEnable();// 0x1407ecc
	function ForceUpdateDesiredArmLocation();// 0x1407d60
	function DelayRotationLagEnabledEnd();// 0x1407d4c
	function DelayRotationLagEnabled();// 0x1407c84

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x2e8 , Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x2ec , Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x2f0 , Size: 4]
	function ClearCameraData();// 0x1561e74

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0 , Size: 12]
	Vector TargetOffset;//[Offset: 0xc , Size: 12]
	float SpringArmLength;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0 , Size: 4]
	Vector AkLocation;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: DamageCauserRecordData
	Controller* Causer;//[Offset: 0x0 , Size: 4]
	float Time;//[Offset: 0x4 , Size: 4]
	float Damage;//[Offset: 0x8 , Size: 4]
	int StatusChangeMargin;//[Offset: 0xc , Size: 4]
	int DamageType;//[Offset: 0x10 , Size: 4]
	int AdditionalParam;//[Offset: 0x14 , Size: 4]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61e , Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61f , Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x620 , Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x624 , Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x628 , Size: 4]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c , Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644 , Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x648 , Size: 4]
	float EnterShovelCD;//[Offset: 0x64c , Size: 4]
	float DSEnterShovelCD;//[Offset: 0x650 , Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x654 , Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x658 , Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x65c , Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x660 , Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x664 , Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x668 , Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x66c , Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x670 , Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x674 , Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x678 , Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x67c , Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x680 , Size: 4]
	float StopShovelingSpeed;//[Offset: 0x688 , Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x68c , Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x690 , Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x694 , Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x698 , Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x69c , Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x6a0 , Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x6a4 , Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x6a8 , Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x6ac , Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x6b0 , Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x6b4 , Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x6b8 , Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x6bc , Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x6c0 , Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x6c8 , Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x6e0 , Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x6e4 , Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x6e8 , Size: 4]
	float nowShovelingSpeed;//[Offset: 0x6ec , Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x6f0 , Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc , Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd , Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x6fe , Size: 1]
	float PreShovelFov;//[Offset: 0x700 , Size: 4]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x74c , Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750 , Size: 1]
	float TimeSpeedFactor;//[Offset: 0x754 , Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758 , Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x759 , Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75a , Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x75c , Size: 4]
	float JumpOffVelocityFactor;//[Offset: 0x760 , Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x764 , Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x765 , Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x768 , Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76c , Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76c , Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x770 , Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x774 , Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x778 , Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x77c , Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x780 , Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x784 , Size: 4]
	float WalkSpeedCurveScale;//[Offset: 0x788 , Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x78c , Size: 4]
	float ProneFloorAngle;//[Offset: 0x790 , Size: 4]
	float ProneFloorZ;//[Offset: 0x794 , Size: 4]
	float JumpFloorAngle;//[Offset: 0x798 , Size: 4]
	float JumpFloorZ;//[Offset: 0x79c , Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x7a0 , Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x7a4 , Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8 , Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x7ac , Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c8 , Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c8 , Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x7cc , Size: 4]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0 , Size: 1]
	float CheckDistanceAhead;//[Offset: 0x8b4 , Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8 , Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0x8bc , Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0x8d0 , Size: 4]
	function ToggleUserCmdDelta();// 0x14c81cc
	function TimeSpeedCheck();// 0x14c8114
	function SeverAddRotationVelocity();// 0x14c8068
	function SetProneFloorZ();// 0x14c7ff0
	function SetProneFloorAngle();// 0x14c7f78
	function SetJumpFloorZ();// 0x14c7f00
	function SetJumpFloorAngle();// 0x14c7e88
	function ServerUserMoveCmdOld();// 0x14c7d5c
	function ServerUserMoveCmdDual();// 0x14c7b10
	function ServerUserMoveCmd();// 0x14c7950
	function Ping2Server();// 0x14c7864
	function Ping2Client();// 0x14c77ec
	function PhysicsFlyDistance();// 0x14c7724
	function OnRecoverOnServer();// 0x14c7708
	function OnPreReconnectOnServer();// 0x14c76f4
	function OnClientCloseUserCmdDelta();// 0x14c76e0
	function K2_GetProneFloorZ();// 0x14c76b8
	function K2_GetProneFloorAngle();// 0x14c7690
	function K2_GetJumpFloorZ();// 0x14c7668
	function K2_GetJumpFloorAngle();// 0x14c7640
	function IsWalkable();// 0x14c7594
	function IsProning();// 0x14c756c
	function GetSTCharacter();// 0x14c7544
	function GetLastServerMoveTime();// 0x14c751c
	function GetIsOpenShovelingAbility();// 0x14c74f4
	function DragOnGround();// 0x14c7474
	function ClientVeryShortAdjustPositionAndRotation();// 0x14c71cc
	function ClientUserMoveCmdAck();// 0x14c7154
	function ClientAdjustPositionAndRotation();// 0x14c6e4c
	function ChangePhysxShapeFlag();// 0x139c4bc

--------------------------------
Class: SimViewData
	byte ViewPitch;//[Offset: 0x0 , Size: 1]
	byte ViewYaw;//[Offset: 0x1 , Size: 1]
	byte ViewRoll;//[Offset: 0x2 , Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]

--------------------------------
Class: SearchedTombBoxAndWrapperListResult
	PlayerTombBox* Box;//[Offset: 0x0 , Size: 4]
	SearchedPickUpItemResult[] SearchedPickUpItemResultList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: SearchedPickUpItemResult
	PickUpWrapperActor* Wrapper;//[Offset: 0x0 , Size: 4]
	PickUpItemData MainItemData;//[Offset: 0x8 , Size: 48]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0 , Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: KilledTipsBlock
	byte DamageType;//[Offset: 0x0 , Size: 1]
	FString attackerName;//[Offset: 0x4 , Size: 12]
	FString WeaponName;//[Offset: 0x10 , Size: 12]
	FString DeadName;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xbc , Size: 4]
	int DetectThreshold;//[Offset: 0xc0 , Size: 4]
	float FoldFactor;//[Offset: 0xc4 , Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xc8 , Size: 4]
	Vector BoxHalfSize;//[Offset: 0xd4 , Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xe0 , Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xec , Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0xf8 , Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x104 , Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x110 , Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x114 , Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x120 , Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x12c , Size: 12]
	int FoldFactorDelt;//[Offset: 0x138 , Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x13c , Size: 4]
	int TraceDis;//[Offset: 0x140 , Size: 4]
	float TickDeltTime;//[Offset: 0x144 , Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148 , Size: 1]
	Actor[] SweepIgnoreActors;//[Offset: 0x150 , Size: 12]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c , Size: 1]
	function SetEffect();// 0x1479f34
	function CheckCollision();// 0x1479dfc

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0xbc , Size: 12]
	float MaxBreathAmount;//[Offset: 0xc8 , Size: 4]
	float DrowningHurtHight;//[Offset: 0xcc , Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0xd0 , Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0xd4 , Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0xd8 , Size: 4]
	float BreathDeltaTime;//[Offset: 0xdc , Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0xe0 , Size: 4]
	float MinSpeedScale;//[Offset: 0xe4 , Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0xe8 , Size: 4]
	float MaxProneWaterHeight;//[Offset: 0xec , Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0xf0 , Size: 4]
	float RollMaxAngle;//[Offset: 0xf4 , Size: 4]
	float DistoVolume;//[Offset: 0xf8 , Size: 4]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x114 , Size: 4]
	float downWaterHeight;//[Offset: 0x11c , Size: 4]
	float nowTickTime;//[Offset: 0x128 , Size: 4]
	Actor* WaterObjectCpp;//[Offset: 0x12c , Size: 4]
	function UpdateSwimCollisionHeightCpp();// 0x147c2b0
	function LeaveWater();// 0x147c29c
	function GetWaterObject();// 0x147c274
	function EnterWater_BluePrint();// 0x1ddc250
	function EnterWater();// 0x147c1fc
	function BP_UnderWaterStateChanged();// 0x1ddc250

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0 , Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4 , Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8 , Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc , Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x4a8 , Size: 4]
	float AttachCheckDistance;//[Offset: 0x4ac , Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x4b0 , Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x4b4 , Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x4b8 , Size: 4]
	WeaponReconnectReplicateDataWrapper[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4d4 , Size: 12]
	WeaponReconnectReplicateDataWrapper[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4e0 , Size: 12]
	function UpdateDataWhenBagChangedOnServer();// 0x13fa1fc
	function UpdateDataWhenBagChangedOnAutonomous();// 0x13fa1e8
	function OnRecoverOnServer();// 0x13fa1cc
	function OnReconnectOnServer();// 0x13fa1b0
	function OnReconnectOnClient();// 0x13fa194
	function OnDisconnectToClientOnServer();// 0x13fa180
	function GetBagLevel();// 0x13fa150

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101 , Size: 1]
	CirCleCfg[] CircleConfigs;//[Offset: 0x104 , Size: 12]
	float DestinyThreshold;//[Offset: 0x110 , Size: 4]
	int RoundNum;//[Offset: 0x114 , Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118 , Size: 1]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x18c , Size: 4]
	function SetGMCicleTime();// 0x13fd8d8
	function RetriveCircleInfo();// 0x13fd7e0

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	RegisterTimer[] TimerRegister;//[Offset: 0xc0 , Size: 12]
	FString TimerName;//[Offset: 0xcc , Size: 12]

--------------------------------
Class: CirCleCfg
	int CircleID;//[Offset: 0x0 , Size: 4]
	float DelayTime;//[Offset: 0x4 , Size: 4]
	float RadiusWhenDestoryMap;//[Offset: 0x8 , Size: 4]
	float SafeZoneAppeartime;//[Offset: 0xc , Size: 4]
	float[] BlueCirclePreWarning;//[Offset: 0x10 , Size: 12]
	float LastTime;//[Offset: 0x1c , Size: 4]
	float Pain;//[Offset: 0x20 , Size: 4]
	bool bUseCustomBluePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	Vector2D bluepoint;//[Offset: 0x28 , Size: 8]
	float blueradius;//[Offset: 0x30 , Size: 4]
	bool bUseCustomWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]
	Vector2D whitepoint;//[Offset: 0x38 , Size: 8]
	float whiteradius;//[Offset: 0x40 , Size: 4]
	float alpha;//[Offset: 0x44 , Size: 4]
	float DestinyChance;//[Offset: 0x48 , Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	float ScreenSizeFactor;//[Offset: 0x50 , Size: 4]
	float ExtraRadius;//[Offset: 0x54 , Size: 4]
	bool bEnableDamageMagnifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]
	float DamageMagnifierRange;//[Offset: 0x5c , Size: 4]
	float DamageMagnifier;//[Offset: 0x60 , Size: 4]
	CurveFloat* DamageMagnifierCurve;//[Offset: 0x64 , Size: 4]
	Vector[] AvoidPoints;//[Offset: 0x68 , Size: 12]
	float EdgeDistance;//[Offset: 0x74 , Size: 4]
	bool bUseAvoidPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78 , Size: 1]

--------------------------------
Class: RegisterTimer
	int waveindex;//[Offset: 0x0 , Size: 4]
	float[] Times;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x4 , Size: 8]
	PlayerAnimData AimAnim;//[Offset: 0xc , Size: 8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14 , Size: 8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x1c , Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x24 , Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x2c , Size: 8]
	PlayerAnimData FireAnim;//[Offset: 0x34 , Size: 8]
	PlayerAnimData HurtAnim;//[Offset: 0x3c , Size: 8]
	PlayerAnimData TurnAnim;//[Offset: 0x44 , Size: 8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x4c , Size: 8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x54 , Size: 8]
	PlayerAnimData WeaponIdle;//[Offset: 0x5c , Size: 8]
	PlayerAnimData ForegripAnim;//[Offset: 0x64 , Size: 8]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x6c , Size: 12]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0x78 , Size: 12]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0 , Size: 4]
	float Rate;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	Vector Velocity;//[Offset: 0x4 , Size: 12]
	Vector movedir;//[Offset: 0x10 , Size: 12]
	byte MovementMode;//[Offset: 0x1c , Size: 1]
	byte PoseType;//[Offset: 0x1d , Size: 1]
	Rotator ViewRotation;//[Offset: 0x20 , Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c , Size: 12]
	byte WeaponType;//[Offset: 0x38 , Size: 1]
	byte WeaponHoldType;//[Offset: 0x39 , Size: 1]
	byte WeaponState;//[Offset: 0x3a , Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x3b , Size: 1]
	byte SightType;//[Offset: 0x3c , Size: 1]
	float RecoilKickADS;//[Offset: 0x40 , Size: 4]
	float ForegripParam;//[Offset: 0x44 , Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c , Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58 , Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64 , Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70 , Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c , Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88 , Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94 , Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0 , Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac , Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8 , Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4 , Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0 , Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc , Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd , Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde , Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf , Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	bool IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1 , Size: 1]
	Vector HurtDir;//[Offset: 0xe4 , Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	byte JumpType;//[Offset: 0xf2 , Size: 1]
	byte ParachuteState;//[Offset: 0xf3 , Size: 1]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5 , Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6 , Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7 , Size: 1]
	float HandleFolderFactor;//[Offset: 0xf8 , Size: 4]
	float CharacterYawRotateRate;//[Offset: 0xfc , Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100 , Size: 1]

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x4 , Size: 4]
	AnimationAsset* SpecialIdleAnim;//[Offset: 0x8 , Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0xc , Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x10 , Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x14 , Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x18 , Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x1c , Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x20 , Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x24 , Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6 , Size: 1]
	float VacateHight;//[Offset: 0x8 , Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10 , Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c , Size: 12]
	byte SeatWeaponHoldType;//[Offset: 0x28 , Size: 1]
	byte SeatSpecialType;//[Offset: 0x29 , Size: 1]
	enum VehicleType;//[Offset: 0x2a , Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: BodyPartCfg
	float DamageScale;//[Offset: 0x0 , Size: 4]
	float Durability;//[Offset: 0x4 , Size: 4]
	float DamageReduceScale;//[Offset: 0x8 , Size: 4]
	float DurabilityReduceScale;//[Offset: 0xc , Size: 4]
	FString BodyDurabilityIndexName;//[Offset: 0x10 , Size: 12]
	class STEShootWeaponBulletImpactEffect* ImpactEffectOverride;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: CharacterEnergyData
	CharacterEnergyPhase[] EnergyEffactPhase;//[Offset: 0x0 , Size: 12]
	float EnergyMax;//[Offset: 0xc , Size: 4]
	float EnergyCurrent;//[Offset: 0x10 , Size: 4]
	float AttenuationPeriod;//[Offset: 0x14 , Size: 4]
	float AttenuationAmount;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: CharacterEnergyPhase
	float MakeEffectSection;//[Offset: 0x0 , Size: 4]
	FString BuffName;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x140 , Size: 4]

--------------------------------
Class: HealthPredictShowData
	FString ShowDataKey;//[Offset: 0x0 , Size: 12]
	byte ShowType;//[Offset: 0xc , Size: 1]
	float Value;//[Offset: 0x10 , Size: 4]
	float LimitValue;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	function ReportVerifyInfoFlow();// 0x14a03d0
	function ReportSecAttackFlow();// 0x14a0300
	function ReportPlayerKillFlow();// 0x14a01d8
	function ReportMrpcsFlow();// 0x14a00e8
	function ReportJumpFlow();// 0x14a0018
	function ReportHurtFlow();// 0x149ff48
	function ReportGvoiceTeamQuit();// 0x149fe18
	function ReportGvoiceTeamCreate();// 0x149fce8
	function ReportGameStartFlow();// 0x149fbe4
	function ReportGameSetting();// 0x149faf4
	function ReportGameEndFlow();// 0x149fa24
	function ReportGameBaseInfo();// 0x149f924
	function ReportCircleFlow();// 0x149f854
	function ReportAttackFlow();// 0x149f784
	function ReportAimFlow();// 0x149f6b4
	function GetWeaponProperty();// 0x149f4f0

--------------------------------
Class: PawnStateDisable
	enum PawnState;//[Offset: 0x0 , Size: 1]
	int8 Disabled;//[Offset: 0x1 , Size: 1]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0 , Size: 4]
	float SteerInput;//[Offset: 0x4 , Size: 4]
	int8 State;//[Offset: 0x8 , Size: 1]
	Rotator CameraRotation;//[Offset: 0xc , Size: 12]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize Location;//[Offset: 0x0 , Size: 12]
	byte Roll;//[Offset: 0xc , Size: 1]
	uint32 View;//[Offset: 0x10 , Size: 4]
	Vector_NetQuantize Velocity;//[Offset: 0x14 , Size: 12]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: ParachuteFollowState
	enum FollowState;//[Offset: 0x0 , Size: 1]
	int LeaderIdx;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: CharacterCompOutOfVisionOptimizationItem

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x13c , Size: 12]
	CharacterMovementAnimData[] CharacterFPPAnimEditList;//[Offset: 0x148 , Size: 12]
	CharacterShieldAnimData[] CharacterShieldAnimEditList;//[Offset: 0x154 , Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x160 , Size: 12]
	CharacterJumpAnimData[] CharacterJumpEditListFPP;//[Offset: 0x16c , Size: 12]
	CurveFloat* FallingIKCurve;//[Offset: 0x178 , Size: 4]
	CharAnimModifyData[] CharAnimModifyList;//[Offset: 0x17c , Size: 12]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188 , Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189 , Size: 1]
	function OnAsyncLoadingFinished();// 0x19307c0
	function GetCharacterJumpAnim();// 0x19306b8
	function GetCharacterAnim();// 0x19305a8

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0xf8 , Size: 60]

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0 , Size: 1]
	FName AnimTypeName;//[Offset: 0x8 , Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10 , Size: 56]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x48 , Size: 56]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x80 , Size: 56]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0 , Size: 1]
	FName PoseName;//[Offset: 0x8 , Size: 8]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10 , Size: 40]

--------------------------------
Class: CharacterShieldAnimData
	byte AnimType;//[Offset: 0x0 , Size: 1]
	FName AnimTypeName;//[Offset: 0x8 , Size: 8]
	ChararacterPoseAnimData PoseAnim_Stand;//[Offset: 0x10 , Size: 56]
	ChararacterPoseAnimData PoseAnim_Crouch;//[Offset: 0x48 , Size: 56]
	ChararacterPoseAnimData PoseAnim_Prone;//[Offset: 0x80 , Size: 56]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0 , Size: 1]
	FName JumpTypeName;//[Offset: 0x8 , Size: 8]
	ChararacterJumpPhaseData JumpPhase_PreJump;//[Offset: 0x10 , Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop0;//[Offset: 0x40 , Size: 48]
	ChararacterJumpPhaseData JumpPhase_FallLoop1;//[Offset: 0x70 , Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land0;//[Offset: 0xa0 , Size: 48]
	ChararacterJumpPhaseData JumpPhase_Land1;//[Offset: 0xd0 , Size: 48]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0 , Size: 1]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0 , Size: 4]
	AnimationAsset* Animation;//[Offset: 0x8 , Size: 40]
	bool AsyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]

--------------------------------
Class: CharAnimModifyData
	int AppliedGameMode;//[Offset: 0x0 , Size: 4]
	byte ModifyAnimListType;//[Offset: 0x4 , Size: 1]
	byte AnimType;//[Offset: 0x5 , Size: 1]
	byte PoseType;//[Offset: 0x6 , Size: 1]
	byte JumpType;//[Offset: 0x7 , Size: 1]
	byte JumpPhase;//[Offset: 0x8 , Size: 1]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10 , Size: 40]

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0 , Size: 4]
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4 , Size: 4]
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8 , Size: 4]
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc , Size: 4]
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10 , Size: 4]
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0 , Size: 4]
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4 , Size: 4]
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8 , Size: 4]
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc , Size: 4]

--------------------------------
Class: InteractionEmoteConfig
	int SelfEmoteId;//[Offset: 0x0 , Size: 4]
	int OtherEmoteId;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0 , Size: 1]
	Vector Location;//[Offset: 0x4 , Size: 12]
	Rotator Rotation;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x2c0 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4 , Size: 1]
	function OnRep_bEnabled();// 0x13ef5c4

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x238 , Size: 4]
	CustomHeightFog[] CustomHightFogDensity;//[Offset: 0x23c , Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248 , Size: 1]
	float CustomFogLow_Height;//[Offset: 0x24c , Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x250 , Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x254 , Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x264 , Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x268 , Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x26c , Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x27c , Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x28c , Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x290 , Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x294 , Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x2a4 , Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2a8 , Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x2ac , Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x2b0 , Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2b4 , Size: 16]
	float FogHeightFalloff;//[Offset: 0x2c4 , Size: 4]
	float FogMaxOpacity;//[Offset: 0x2c8 , Size: 4]
	float StartDistance;//[Offset: 0x2cc , Size: 4]
	float FogCutoffDistance;//[Offset: 0x2d0 , Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4 , Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x2d8 , Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x2dc , Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x2e0 , Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x2f0 , Size: 4]
	float VolumetricFogDistance;//[Offset: 0x2f4 , Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x2f8 , Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc , Size: 1]
	function SetVolumetricFogScatteringDistribution();// 0x35082cc
	function SetVolumetricFogExtinctionScale();// 0x3508254
	function SetVolumetricFogEmissive();// 0x35081d8
	function SetVolumetricFogDistance();// 0x3508160
	function SetVolumetricFogAlbedo();// 0x35080f0
	function SetVolumetricFog();// 0x3508070
	function SetStartDistance();// 0x3507ff8
	function SetNonDirectionalInscatteringColorDistance();// 0x3507f80
	function SetInscatteringTextureTint();// 0x3507f04
	function SetInscatteringColorCubemapAngle();// 0x3507e8c
	function SetInscatteringColorCubemap();// 0x3507e14
	function SetFullyDirectionalInscatteringColorDistance();// 0x3507d9c
	function SetFogMaxOpacity();// 0x3507d24
	function SetFogInscatteringColor();// 0x3507ca8
	function SetFogHeightFalloff();// 0x3507c30
	function SetFogDensity();// 0x3507bb8
	function SetFogCutoffDistance();// 0x3507b40
	function SetDirectionalInscatteringStartDistance();// 0x3507ac8
	function SetDirectionalInscatteringExponent();// 0x3507a50
	function SetDirectionalInscatteringColor();// 0x35079d4
	function SetCustomFogInscatteringColor();// 0x3507914
	function SetCustomFogDensityCoefficient();// 0x3507858

--------------------------------
Class: CustomHeightFog
	float Height;//[Offset: 0x0 , Size: 4]
	float DensityCoefficient;//[Offset: 0x4 , Size: 4]
	LinearColor CustomFogInscatteringColor;//[Offset: 0x8 , Size: 16]

--------------------------------
Class: BP_MiniMapStandardPoint_C.MiniMapStandardPoint.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e8 , Size: 4]

--------------------------------
Class: MiniMapStandardPoint.Actor.Object
	float LevelBoundExtent;//[Offset: 0x2c0 , Size: 4]
	float EachTileExtent;//[Offset: 0x2c4 , Size: 4]
	FString LevelName;//[Offset: 0x2c8 , Size: 12]
	float FakeEdgeExtent;//[Offset: 0x2d4 , Size: 4]
	VisualFieldLayerConfig VisualLayerConfig;//[Offset: 0x2d8 , Size: 12]

--------------------------------
Class: VisualFieldLayerConfig
	VisualFieldLayer[] VisualLayerList;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: VisualFieldLayer
	float LayerFloorHeight;//[Offset: 0x0 , Size: 4]
	float LayerRoofHeight;//[Offset: 0x4 , Size: 4]
	int LayerID;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x2e8 , Size: 4]

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: Water_C.OceanManager.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x330 , Size: 4]

--------------------------------
Class: BP_radiation_C.RadiationCircle.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	StaticMeshComponent* Cylinder_Base;//[Offset: 0x2e8 , Size: 4]
	StaticMeshComponent* Cylinder;//[Offset: 0x2ec , Size: 4]
	SceneComponent* Scene;//[Offset: 0x2f0 , Size: 4]

--------------------------------
Class: RadiationCircle.Actor.Object
	StaticMeshComponent* CylinderMesh;//[Offset: 0x2c0 , Size: 4]
	StaticMeshComponent* CylinderMeshBase;//[Offset: 0x2c4 , Size: 4]
	STExtraGameStateBase* SGameStatNew;//[Offset: 0x2c8 , Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x2dc , Size: 4]
	MaterialInstanceDynamic* DynamicMatBase;//[Offset: 0x2e0 , Size: 4]
	function InitRadiationCircle();// 0x1498b10
	function HandleOnSafeZoneTips();// 0x1498a98

--------------------------------
Class: STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	Vector AirplaneStartLoc;//[Offset: 0x33c , Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x348 , Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x354 , Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x360 , Size: 12]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36c , Size: 1]
	Vector BlueCircle;//[Offset: 0x370 , Size: 12]
	Vector WhiteCircle;//[Offset: 0x37c , Size: 12]
	float CirclePain;//[Offset: 0x388 , Size: 4]
	AirAttackOrder AirAttackOrder;//[Offset: 0x38c , Size: 48]
	Vector AirAttackArea;//[Offset: 0x3bc , Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x3c8 , Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x3d4 , Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x3e0 , Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x3ec , Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x3f8 , Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x404 , Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x410 , Size: 12]
	int PlayerNum;//[Offset: 0x428 , Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c , Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x430 , Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x43c , Size: 12]
	delegate OnGameEnd;//[Offset: 0x448 , Size: 12]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454 , Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455 , Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x456 , Size: 1]
	bool IsInitBPItemTableEveryTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x457 , Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458 , Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459 , Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a , Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45b , Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c , Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45d , Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45e , Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45f , Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460 , Size: 1]
	int[] forbitPickItemTypeList;//[Offset: 0x464 , Size: 12]
	int BornItemId;//[Offset: 0x470 , Size: 4]
	int BornItemCount;//[Offset: 0x474 , Size: 4]
	int TrainingCountdownTimer;//[Offset: 0x478 , Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47c , Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x480 , Size: 12]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c , Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48d , Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48e , Size: 1]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48f , Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490 , Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491 , Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492 , Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x494 , Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x498 , Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x49c , Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x4a0 , Size: 4]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4 , Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5 , Size: 1]
	delegate OnAirAttack;//[Offset: 0x4a8 , Size: 12]
	delegate OnInfectedAreaWarn;//[Offset: 0x4b4 , Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0 , Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1 , Size: 1]
	FName[] EnableMapPackages;//[Offset: 0x4c4 , Size: 12]
	FName[] EnableMapLayers;//[Offset: 0x4d0 , Size: 12]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x4dc , Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x4e0 , Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4 , Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x4e8 , Size: 36]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x50c , Size: 4]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510 , Size: 1]
	int ReadyStateTime;//[Offset: 0x520 , Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x524 , Size: 12]
	FString GameModeDisplayName;//[Offset: 0x530 , Size: 12]
	int CurCircleWave;//[Offset: 0x53c , Size: 4]
	FName GameModeState;//[Offset: 0x540 , Size: 8]
	int AlivePlayerNum;//[Offset: 0x59c , Size: 4]
	int AliveTeamNum;//[Offset: 0x5a0 , Size: 4]
	int PlayerNumOnPlane;//[Offset: 0x5a4 , Size: 4]
	GameModePlayerShowUpassInfo[] UpassInfoList;//[Offset: 0x5a8 , Size: 12]
	enum GameModeType;//[Offset: 0x5b4 , Size: 1]
	int PlayerNumPerTeam;//[Offset: 0x5b8 , Size: 4]
	FString[] OpenTagCullingMaps;//[Offset: 0x5bc , Size: 12]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8 , Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9 , Size: 1]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca , Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0x5d8 , Size: 4]
	float WeatherPhaseIndex;//[Offset: 0x5dc , Size: 4]
	enum[] WeatherProcessArray;//[Offset: 0x5e0 , Size: 12]
	delegate OnWeatherStateChange;//[Offset: 0x5ec , Size: 12]
	delegate OnWeatherSpeedChange;//[Offset: 0x5f8 , Size: 12]
	<FString,float> BeInvitedPlayers;//[Offset: 0x604 , Size: 60]
	float InviteCountDownTime;//[Offset: 0x640 , Size: 4]
	CircleDataMining[] CircleDataMining;//[Offset: 0x644 , Size: 12]
	GameDataMining GameDataMining;//[Offset: 0x650 , Size: 48]
	FString GameModeID;//[Offset: 0x680 , Size: 12]
	FString[] ModeUIManagerArray;//[Offset: 0x68c , Size: 12]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x698 , Size: 4]
	Actor* StartedPlane;//[Offset: 0x69c , Size: 4]
	float StartFlyTime;//[Offset: 0x6a0 , Size: 4]
	bool bIsOpenEnemyMarkAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b5 , Size: 1]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b6 , Size: 1]
	int EnableNewStateMachine;//[Offset: 0x6b8 , Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0x6c0 , Size: 4]
	float BroadcastClientDistance;//[Offset: 0x6c4 , Size: 4]
	int[] FinalWinTeams;//[Offset: 0x6e0 , Size: 12]
	uint32[] FinalWinPlayers;//[Offset: 0x6ec , Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0x6f8 , Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc , Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fd , Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fe , Size: 1]
	int[] ImprisonmentTeammateKillType;//[Offset: 0x700 , Size: 12]
	int[] ImprisonmentTeammateGameType;//[Offset: 0x70c , Size: 12]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718 , Size: 1]
	FString GuideImageName;//[Offset: 0x71c , Size: 12]
	FString GuideLuaTableName;//[Offset: 0x728 , Size: 12]
	FString GuideLuaFunctionName;//[Offset: 0x734 , Size: 12]
	UAELevelDirector* UAELevelDirector;//[Offset: 0x740 , Size: 4]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0x744 , Size: 4]
	MarkSyncData[] SyncMarkDispatchData;//[Offset: 0x748 , Size: 12]
	MarkSyncData[] PrevSyncMarkDispatchData;//[Offset: 0x754 , Size: 12]
	function WeatherStateChangeDelegate__DelegateSignature();// 0x1ddc250
	function WeatherSpeedChangeDelegate__DelegateSignature();// 0x1ddc250
	function SyncAirplaneRoute();// 0x151307c
	function SimulateAirAttackOver();// 0x1513020
	function SetTagCulling();// 0x1512fa0
	function SetReConnectGameStateInfo();// 0x1512e54
	function SetCurAirAttackWave();// 0x1512ddc
	function SetCurAirAttackType();// 0x1512d64
	function SetAirplaneStopLoc();// 0x1512cf4
	function SetAirplaneStartLoc();// 0x1512c84
	function SetAirplaneForceJumpLoc();// 0x1512c14
	function SetAirplaneCanJumpLoc();// 0x1512ba4
	function OnRep_WeatherStateChanged();// 0x1512b90
	function OnRep_VisualFieldFeatureParam();// 0x1512b7c
	function OnRep_UpassInfoList();// 0x1512b68
	function OnRep_StartedPlane();// 0x1512b54
	function OnRep_ResetWeatherPlaySpeed();// 0x1512b40
	function OnRep_ReadyStateTime();// 0x1512b2c
	function OnRep_ReadyStateCountingDown();// 0x139c4bc
	function OnRep_PlayerNumOnPlane();// 0x1512b18
	function OnRep_PlayerNumChange();// 0x139c4bc
	function OnRep_ModeUIManagerArray();// 0x1512b04
	function OnRep_MarkSyncData();// 0x1512af0
	function OnRep_IsTrainingMode();// 0x1512adc
	function OnRep_IsShowDeadBox();// 0x139c4bc
	function OnRep_IsFPPMode();// 0x1512ac8
	function OnRep_IsDark();// 0x1512ab4
	function OnRep_GameTerminatorPlayerKey();// 0x1512aa0
	function OnRep_GameModeType();// 0x1512a8c
	function OnRep_GameModeState();// 0x1512a78
	function OnRep_FinalWinTeams();// 0x139c4bc
	function OnRep_FinalWinPlayers();// 0x139c4bc
	function OnRep_AliveTeamNum();// 0x1512a64
	function OnRep_AlivePlayerNum();// 0x1512a50
	function OnRep_AirplaneStopLoc();// 0x139c4bc
	function OnRep_AirplaneStartLoc();// 0x139c4bc
	function OnRep_AirplaneForceJumpLoc();// 0x1512a3c
	function OnRep_AirplaneCanJumpLoc();// 0x1512a28
	function OnGameModeDisplayNameChange();// 0x1512a14
	function IsRevivalGame();// 0x15129ec
	function IsPVEMode();// 0x15129c4
	function IsPlaneValid();// 0x15129a0
	function IsMapUseTeamPattern();// 0x1512970
	function IsInNight();// 0x1512940
	function IsFeatureSupported();// 0x15128c0
	function GetRepServerWorldTimeSeconds();// 0x1512898
	function GetReConnectGameStateInfo();// 0x15127fc
	function GetPVEWeatherPhaseIndex();// 0x15127d4
	function GetGameModeState();// 0x1512794
	function GetForceJumpLoc();// 0x1512770
	function GetCurWeatherState();// 0x1512748
	function GetCurCircleWave();// 0x151272c
	function GetCurCircleState();// 0x15126ec
	function GetCanJumpLoc();// 0x15126c8
	function GetAllMarkSyncData();// 0x151261c
	function GetAlivePlayerNum();// 0x15125f4
	function GetAirplaneStopLoc();// 0x15125d0
	function GetAirplaneStartLoc();// 0x15125ac
	function ChangeWeatherStatus();// 0x151253c
	function BroadcastRoute();// 0x1512474
	function BroadcastCircleWaveOver();// 0x15123c0
	function BroadcastCircleSizeAndPosition();// 0x1512108
	function BroadcastCircleInfo();// 0x1511f38
	function BroadcastAirDrop();// 0x1511f1c
	function BroadcastAirAttackWarning();// 0x1511e60
	function BroadcastAirAttackOrder();// 0x1511ce4
	function AddUseEnhancerTimes();// 0x1511c20
	function AddPveZombieGrenadeCount();// 0x1511ba8
	function AddPvePoliceOfficeTriggerCount();// 0x1511b30

--------------------------------
Class: UAEGameState.GameState.GameStateBase.Info.Actor.Object
	FString WeaponAttrReloadTableName;//[Offset: 0x318 , Size: 12]
	FString VehicleAttrReloadTableName;//[Offset: 0x324 , Size: 12]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330 , Size: 1]
	function GetWeaponAttrReloadTableRowByRef();// 0x193d848
	function GetWeaponAttrReloadTableRow();// 0x193d7a4
	function GetVehicleAttrReloadTableRow();// 0x193d71c

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2f0 , Size: 8]
	FName PreviousMatchState;//[Offset: 0x2f8 , Size: 8]
	int ElapsedTime;//[Offset: 0x300 , Size: 4]
	function OnRep_MatchState();// 0x1551770
	function OnRep_ElapsedTime();// 0x350c2fc

--------------------------------
Class: AirAttackOrder
	int waveindex;//[Offset: 0x0 , Size: 4]
	float FlightHeight;//[Offset: 0x4 , Size: 4]
	float SeaLevelHeight;//[Offset: 0x8 , Size: 4]
	int16[] bombsInterval;//[Offset: 0xc , Size: 12]
	Vector2D[] bombsPosition2D;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0 , Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4 , Size: 4]
	FName[] VisualCheckBoneList;//[Offset: 0x8 , Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14 , Size: 4]
	byte[] VisualCheckChanelList;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x40 , Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x48 , Size: 60]
	<int,float> VisualAngleLimitMap;//[Offset: 0x84 , Size: 60]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xc0 , Size: 8]

--------------------------------
Class: VisualFieldFrame
	<int,VisualFieldCamp> VisualFieldFrameMap;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: VisualFieldCamp
	VisibleActorInfo[] VisibleActorList;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: VisibleActorInfo
	VisualFieldMetaInfo VisibleActorMetaInfo;//[Offset: 0x0 , Size: 16]
	Actor* VisibleActor;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: GameModePlayerShowUpassInfo
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	int updateTime;//[Offset: 0xc , Size: 4]
	int upassLevel;//[Offset: 0x10 , Size: 4]
	int upassScore;//[Offset: 0x14 , Size: 4]
	int planeAvatarId;//[Offset: 0x18 , Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d , Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e , Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f , Size: 1]
	FString iconUrl;//[Offset: 0x20 , Size: 12]
	FString Nation;//[Offset: 0x2c , Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x38 , Size: 32]
	int upassKeepBuy;//[Offset: 0x58 , Size: 4]

--------------------------------
Class: CircleDataMining
	Vector WhiteCircleCenter;//[Offset: 0x0 , Size: 12]
	bool bDestinyCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	int LeftPlayerNum;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: GameDataMining
	FString BattleId;//[Offset: 0x0 , Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc , Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18 , Size: 12]
	CircleDataMining[] CircleDataMining;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0xbc , Size: 4]
	MarkDispatchAction[] ActionQueue;//[Offset: 0xc0 , Size: 12]
	MarkDispatchAction[] BatchActionQueue;//[Offset: 0xcc , Size: 12]
	int MarkCountProcessed;//[Offset: 0xd8 , Size: 4]
	function GetMarkDispatchManager();// 0x1446fbc
	function GenerateNewInstanceID();// 0x1446f98
	function DispatchMarkData();// 0x1446de0

--------------------------------
Class: MarkDispatchAction
	enum ActionType;//[Offset: 0x0 , Size: 1]
	enum RangeType;//[Offset: 0x1 , Size: 1]
	MarkSyncData SyncData;//[Offset: 0x4 , Size: 76]
	float DispatchDelayTime;//[Offset: 0x50 , Size: 4]
	float RangeRad;//[Offset: 0x54 , Size: 4]
	STExtraPlayerState* WeakPlayerState;//[Offset: 0x58 , Size: 8]
	float DispatchTime;//[Offset: 0x60 , Size: 4]
	bool bIsFromLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]
	delegate OnMapAlertSet;//[Offset: 0x68 , Size: 16]

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2c0 , Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x2c5 , Size: 1]

--------------------------------
Class: BP_STPlayerStart_C.STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: STExtraPlayerStart.PlayerStart.NavigationObjectBase.Actor.Object
	bool bAutoResetOccupiedMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	float ResetOccupiedMarkTime;//[Offset: 0x2e4 , Size: 4]
	bool bUseAsStandAlone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8 , Size: 1]
	int PlayerBornPointID;//[Offset: 0x2ec , Size: 4]
	bool bMarkOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0 , Size: 1]
	int TeamID;//[Offset: 0x2f4 , Size: 4]
	function SetMarkOccupied();// 0x154f5f8
	function IsMarkOccupied();// 0x154f5d0

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x2d8 , Size: 8]

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x2f0 , Size: 12]
	FString HousePathFilePath;//[Offset: 0x2fc , Size: 12]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308 , Size: 1]

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x2e8 , Size: 4]

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x2e8 , Size: 12]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4 , Size: 1]
	bool bEnabledDeviceScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f4 , Size: 1]
	float VeryLowScale;//[Offset: 0x2f8 , Size: 4]
	float LowScale;//[Offset: 0x2fc , Size: 4]
	float MidScale;//[Offset: 0x300 , Size: 4]
	float HighScale;//[Offset: 0x304 , Size: 4]
	bool bEnableStaticMeshMovable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308 , Size: 1]
	bool bEnableCullDistanceOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309 , Size: 1]

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0 , Size: 4]
	float CullDistance;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: ActorComponentPoolManager.Actor.Object
	Object[] PreloadComponentAssets;//[Offset: 0x2c0 , Size: 12]
	<class Object,ClassActorComponentPoolCollect> PoolCollectMaps;//[Offset: 0x2cc , Size: 60]
	function GetInstance();// 0x139622c
	function GetAutoComponentPool();// 0x1396124

--------------------------------
Class: ClassActorComponentPoolCollect.Object
	<FString,ActorComponentPool> PoolMaps;//[Offset: 0x1c , Size: 60]

--------------------------------
Class: ActorComponentPool.Object
	ActorComponent[] Pool;//[Offset: 0x1c , Size: 12]
	function Return();// 0x139ff6c
	function Get();// 0x34ab738

--------------------------------
Class: BP_GlobalConfig_C.GlobalConfigActor.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	BP_WeatherConfig_C* BP_WeatherConfig;//[Offset: 0x2c8 , Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2cc , Size: 4]

--------------------------------
Class: GlobalConfigActor.Actor.Object
	bool bInitComponents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]
	function Init();// 0x13ef5a8

--------------------------------
Class: BP_WeatherConfig_C.WeatherConfigComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf0 , Size: 4]
	function ReceiveBeginPlay();// 0x1ddc250
	function DelaySyncWeatherLevelInfo();// 0x1ddc250
	function ExecuteUbergraph_BP_WeatherConfig();// 0x1ddc250

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	WeatherInfo WeatherLevelInfo;//[Offset: 0xc0 , Size: 20]
	FString LastLoadedWeatherLevelName;//[Offset: 0xd4 , Size: 12]
	FString DefaultWeatherLevelName;//[Offset: 0xe0 , Size: 12]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec , Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed , Size: 1]
	function UnloadStreamLevel();// 0x194c5b4
	function SyncWeatherLevelInfo();// 0x194c5a0
	function OnUnLoadStreamLevelCompleted();// 0x194c58c
	function OnRep_WeatherSyncCount();// 0x194c578
	function OnLoadStreamLevelCompleted();// 0x194c564
	function LoadWeatherLevel();// 0x194c550
	function LoadStreamLevel();// 0x194c3b4
	function LoadDefaultWeatherLevel();// 0x194c3a0
	function Init();// 0x14143a0

--------------------------------
Class: PUBG_Rcity_C.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c8 , Size: 4]
	function InpActEvt_Android_Back_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_E_K2Node_InputKeyEvent();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function ExecuteUbergraph_PUBG_Rcity();// 0x1ddc250
	FString MatPath;//[Offset: 0x2cc , Size: 12]
	FString GeoPath;//[Offset: 0x2d8 , Size: 12]
	<enum,FString> VehicleLevelNameByGameMode;//[Offset: 0x2e4 , Size: 60]
	<int,FString> VehicleLevelNameByGameModeID;//[Offset: 0x320 , Size: 60]
	FString VehicleLevelName;//[Offset: 0x35c , Size: 12]

--------------------------------
Class: BP_STExtraPlayerController_C.STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x20f0 , Size: 4]
	function GetTouchInterface();// 0x1ddc250
	function ReadConfigAutoAimLevel();// 0x1ddc250
	function IsFPP();// 0x1ddc250
	function OnRep_InWateringRange();// 0x1ddc250
	function LoadAllBattleSound();// 0x1ddc250
	function AsyncLoadBattleSound();// 0x1ddc250
	function LoadBattleSound();// 0x1ddc250
	function SetAlwaysHideTouchInterface();// 0x1ddc250
	function PlayBattleSoundInBP();// 0x1ddc250
	function IsReleasePosInAimBtnRange();// 0x1ddc250
	function ReadEmoteDataRowPC();// 0x1ddc250
	function AddTestCompont();// 0x1ddc250
	function IsAtaptation();// 0x1ddc250
	function ReadAdaptationTable();// 0x1ddc250
	function InitWeather();// 0x1ddc250
	function SetMotionParam();// 0x1ddc250
	function GetStickLeftSize();// 0x1ddc250
	function ShowFightingUI();// 0x1ddc250
	function ShowAutoSprintBtn();// 0x1ddc250
	function ReadConfigCrossHairColor();// 0x1ddc250
	function ReadConfigMotionControl();// 0x1ddc250
	function ReadConfigAutoAim();// 0x1ddc250
	function ReadConfigFromHUD();// 0x1ddc250
	function MakeFireModeEffect();// 0x1ddc250
	function DebugNotDrawGuideLine();// 0x1ddc250
	function ShowBackpackTombBox();// 0x1ddc250
	function BindOrUnBindJoyStickSprint();// 0x1ddc250
	function CreateRank();// 0x1ddc250
	function DisableAimIfUnEquipWeapon();// 0x1ddc250
	function SwitchAimMode();// 0x1ddc250
	function DoInitUI();// 0x1ddc250
	function HandleJumpBtnPressEvent();// 0x1ddc250
	function OnRep_bInCar();// 0x1ddc250
	function RefreshUI();// 0x1ddc250
	function UpdateInputPanel();// 0x1ddc250
	function ShowBackpackIconSplash();// 0x1ddc250
	function RefreshWeaponPanel();// 0x1ddc250
	function SetTouchInputEnabled();// 0x1ddc250
	function ShowMainInputControl();// 0x1ddc250
	function ShowTouchInterface();// 0x1ddc250
	function EnableDeathGray();// 0x1ddc250
	function SetDeathGrayLerpValue();// 0x1ddc250
	function SetPostProcessVolume();// 0x1ddc250
	function UserConstructionScript();// 0x1ddc250
	function GrayToOne__FinishedFunc();// 0x1ddc250
	function GrayToOne__UpdateFunc();// 0x1ddc250
	function GrayToZero__FinishedFunc();// 0x1ddc250
	function GrayToZero__UpdateFunc();// 0x1ddc250
	function InpActEvt_NumPadEight_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_NumPadNine_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent();// 0x1ddc250
	function InpActEvt_ToggleTeamListPanel_K2Node_InputActionEvent();// 0x1ddc250
	function InpActEvt_SwitchToTeam_DelOneNum_K2Node_InputActionEvent();// 0x1ddc250
	function InpActEvt_SwitchToTeam_ClearTeamID_K2Node_InputActionEvent();// 0x1ddc250
	function InpActEvt_SwitchToTeam_PostTeamID_K2Node_InputActionEvent();// 0x1ddc250
	function InpActEvt_Android_Back_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_E_K2Node_InputKeyEvent();// 0x1ddc250
	function OnStopFireEventHandle();// 0x1ddc250
	function OnSwitchCameraSatrtHandle();// 0x1ddc250
	function OnPlayerPutDownActorHandle();// 0x1ddc250
	function OnSwitchWeaponHandle();// 0x1ddc250
	function ReceiveTick();// 0x1ddc250
	function OnUseInventoryitemHandle();// 0x1ddc250
	function ServerStartBattle();// 0x1ddc250
	function ServerAfterLand();// 0x1ddc250
	function ClientAfterLand();// 0x1ddc250
	function RefreshTopMostUIPanel();// 0x1ddc250
	function gameStart();// 0x1ddc250
	function RemoveWeaponAim();// 0x1ddc250
	function SetMoveableAirborne();// 0x1ddc250
	function OnLandOnGroundAfterJumpPlaneEnd();// 0x1ddc250
	function JoystickTriggerSprint();// 0x1ddc250
	function OnPlane();// 0x1ddc250
	function SetPanels();// 0x1ddc250
	function InitOprate();// 0x1ddc250
	function OnFiremodeChange();// 0x1ddc250
	function ChangeToMale();// 0x1ddc250
	function ChangeToFemale();// 0x1ddc250
	function DoUITouchMove();// 0x1ddc250
	function PressFire();// 0x1ddc250
	function ShowFireBtn();// 0x1ddc250
	function PressGrenade();// 0x1ddc250
	function InitJoyStickAfterActivation();// 0x1ddc250
	function MemberVoice();// 0x1ddc250
	function ReceiveClientRestart();// 0x1ddc250
	function OnSpectatorCameraChange();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function OnWeaponEquipAttachment();// 0x1ddc250
	function ResetMissingUIUpdate();// 0x1ddc250
	function MotionControliOS();// 0x1ddc250
	function InpAxisKeyEvt_RotationRate_K2Node_InputVectorAxisEvent();// 0x1ddc250
	function MotionControlAndroidTick();// 0x1ddc250
	function MotionControlAndroid();// 0x1ddc250
	function ReceiveBackpackComponent();// 0x1ddc250
	function InitWallFeedBack();// 0x1ddc250
	function InitNewbieComponent();// 0x1ddc250
	function DebugOpenGuide();// 0x1ddc250
	function BP_OceanSideDetected();// 0x1ddc250
	function CallShowTouchInterface();// 0x1ddc250
	function OnGameModeStateChanged();// 0x1ddc250
	function ReleaseFire();// 0x1ddc250
	function AddPubgmAutoComp();// 0x1ddc250
	function ExecuteUbergraph_BP_STExtraPlayerController();// 0x1ddc250
	function VaultFailDS__DelegateSignature();// 0x1ddc250
	function BindEventToBackpackComponent__DelegateSignature();// 0x1ddc250
	function PlayerLeaveWater__DelegateSignature();// 0x1ddc250
	function PlayerEnterWater__DelegateSignature();// 0x1ddc250
	function AirborneLanded__DelegateSignature();// 0x1ddc250
	function ReloadingCDEnd__DelegateSignature();// 0x1ddc250
	function ReloadingCDStart__DelegateSignature();// 0x1ddc250
	BP_MapUIMarkManager_C* BP_MapUIMarkManager;//[Offset: 0x20f4 , Size: 4]
	BP_ChangeWearingComp_C* BP_ChangeWearingComp;//[Offset: 0x20f8 , Size: 4]
	BP_GameEventListener_C* BP_GameEventListener;//[Offset: 0x20fc , Size: 4]
	GuideComponent_BP_C* GuideComponent_BP;//[Offset: 0x2100 , Size: 4]
	BP_ServerSwitcher_C* BP_ServerSwitcher;//[Offset: 0x2104 , Size: 4]
	STExtraUnderWaterEffectComp* STExtraUnderWaterEffectComp;//[Offset: 0x2108 , Size: 4]
	ChatComponent_BP_C* ChatComponent_BP;//[Offset: 0x210c , Size: 4]
	BP_CommonBtn_C* BP_CommonBtn;//[Offset: 0x2110 , Size: 4]
	BP_VehicleUser_C* BP_VehicleUser;//[Offset: 0x2114 , Size: 4]
	float GrayToOne_Alpha_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x2118 , Size: 4]
	byte GrayToOne__Direction_7DE4452444DF4112B2469DBCAE9CD7B1;//[Offset: 0x211c , Size: 1]
	TimelineComponent* GrayToOne;//[Offset: 0x2120 , Size: 4]
	float GrayToZero_Alpha_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x2124 , Size: 4]
	byte GrayToZero__Direction_AEAD84AB4721658A84A855B8F2969A97;//[Offset: 0x2128 , Size: 1]
	TimelineComponent* GrayToZero;//[Offset: 0x212c , Size: 4]
	PostProcessVolume* MainPostProcessVolume;//[Offset: 0x2130 , Size: 4]
	byte LastCameraMode;//[Offset: 0x2134 , Size: 1]
	Pawn* PrePlayerPawn;//[Offset: 0x2138 , Size: 4]
	bool bInItemGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x213c , Size: 1]
	float InItemGeneratorUIRefreshTime;//[Offset: 0x2140 , Size: 4]
	float CurInItemGeneratorUIRefreshTime;//[Offset: 0x2144 , Size: 4]
	Object* WaitingUI;//[Offset: 0x2148 , Size: 4]
	Object* SimulatePlane;//[Offset: 0x214c , Size: 4]
	float PlaneStartYaw;//[Offset: 0x2150 , Size: 4]
	delegate ReloadingCDStart;//[Offset: 0x2154 , Size: 12]
	delegate ReloadingCDEnd;//[Offset: 0x2160 , Size: 12]
	bool AlreadyAimed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x216c , Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x2170 , Size: 4]
	STExtraBaseCharacter[] CurAimTargets;//[Offset: 0x2174 , Size: 12]
	float CloseDistance;//[Offset: 0x2180 , Size: 4]
	byte AutoAimDrawType;//[Offset: 0x2184 , Size: 1]
	delegate AirborneLanded;//[Offset: 0x2188 , Size: 12]
	float MotionRate_Yaw;//[Offset: 0x2194 , Size: 4]
	float MotionRate_Pitch;//[Offset: 0x2198 , Size: 4]
	float MotionAimRate_Pitch;//[Offset: 0x219c , Size: 4]
	float MotionAimRate_Yaw;//[Offset: 0x21a0 , Size: 4]
	float MotionRate_Pitch_Threshold;//[Offset: 0x21a4 , Size: 4]
	float MotionRate_Yaw_Threshold;//[Offset: 0x21a8 , Size: 4]
	float MotionTouchAimRate_Pitch;//[Offset: 0x21ac , Size: 4]
	float MotionTouchAimRate_Yaw;//[Offset: 0x21b0 , Size: 4]
	float MotionTouchRate_Yaw;//[Offset: 0x21b4 , Size: 4]
	float MotionTouchRate_Pitch;//[Offset: 0x21b8 , Size: 4]
	bool bDefaultIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21bc , Size: 1]
	bool DriveWithForwardAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21bd , Size: 1]
	bool DriveWithRightAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21be , Size: 1]
	bool bInTombBoxGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21bf , Size: 1]
	delegate PlayerEnterWater;//[Offset: 0x21c0 , Size: 12]
	delegate PlayerLeaveWater;//[Offset: 0x21cc , Size: 12]
	bool bindWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d8 , Size: 1]
	bool bLandScapeOrientation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21d9 , Size: 1]
	float PitchReverce;//[Offset: 0x21dc , Size: 4]
	float Left;//[Offset: 0x21e0 , Size: 4]
	float Right;//[Offset: 0x21e4 , Size: 4]
	float LastTime;//[Offset: 0x21e8 , Size: 4]
	Vector[] MotionDataStack;//[Offset: 0x21ec , Size: 12]
	Vector CurMotionData;//[Offset: 0x21f8 , Size: 12]
	delegate BindEventToBackpackComponent;//[Offset: 0x2204 , Size: 12]
	delegate VaultFailDS;//[Offset: 0x2210 , Size: 12]
	<FString,UIAdaptationStructure> AdaptationDict;//[Offset: 0x221c , Size: 60]
	UIAdaptationStructure CurDeviceAdaptationOffset;//[Offset: 0x2258 , Size: 28]
	UIAdaptationStructure CurDeviceAdaptationData;//[Offset: 0x2274 , Size: 28]
	bool bIsJoyStickShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2290 , Size: 1]
	bool bIsInitSensibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2291 , Size: 1]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2292 , Size: 1]
	FString ActiveDevicProfileName;//[Offset: 0x2294 , Size: 12]
	bool adaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a0 , Size: 1]
	bool initAdaptation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a1 , Size: 1]
	bool IsJoystickTriggerSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22a2 , Size: 1]
	float UITouchMoveX;//[Offset: 0x22a4 , Size: 4]
	float UITouchMoveY;//[Offset: 0x22a8 , Size: 4]
	int PressFireFingerIndex;//[Offset: 0x22ac , Size: 4]
	bool IsShowFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22b0 , Size: 1]
	bool IsThrowGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22b1 , Size: 1]
	int VoiceMemberID;//[Offset: 0x22b4 , Size: 4]
	int VoiceMemberStatus;//[Offset: 0x22b8 , Size: 4]
	byte AttachmentAttachSlot;//[Offset: 0x22bc , Size: 1]
	ItemDefineID AttachmentDefineID;//[Offset: 0x22c0 , Size: 24]
	Vector2D AutoSprintBtnTouchPos;//[Offset: 0x22d8 , Size: 8]
	bool IsAutoSprintBtnVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e0 , Size: 1]
	bool IsFingerInsideAutoSprintBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e1 , Size: 1]
	bool IsBindJoystickSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e2 , Size: 1]
	byte UnequipWeaponType;//[Offset: 0x22e3 , Size: 1]
	bool IsShowInputControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e4 , Size: 1]
	Vector2D AutoNavigateTranslation;//[Offset: 0x22e8 , Size: 8]
	int InputTeamID;//[Offset: 0x22f0 , Size: 4]
	int EmoteItemType;//[Offset: 0x22f4 , Size: 4]
	BP_STRUCT_Item_type[] EmoteDataRow;//[Offset: 0x22f8 , Size: 12]
	UAEDataTable* EmoteBPTable;//[Offset: 0x2304 , Size: 4]
	bool bLongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2308 , Size: 1]
	bool bLongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2309 , Size: 1]
	Vector2D AimBtnPos;//[Offset: 0x230c , Size: 8]
	Vector2D AimBtnSize;//[Offset: 0x2314 , Size: 8]
	int PeekMode;//[Offset: 0x231c , Size: 4]
	int AimMode;//[Offset: 0x2320 , Size: 4]
	<int,int> EmoteItemIDToBPIDMap;//[Offset: 0x2324 , Size: 60]
	<int,FString> EmoteBPIDToHandlePath;//[Offset: 0x2360 , Size: 60]
	<int,FString> EmoteItemIDToImagePathMap;//[Offset: 0x239c , Size: 60]
	<int,FString> EmoteItemIDToImageBattlePathMap;//[Offset: 0x23d8 , Size: 60]
	bool bAlwaysHideTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2414 , Size: 1]
	<int,AkAudioEvent> BattleSoundMap;//[Offset: 0x2418 , Size: 60]
	<int,FString> BattleBankMap;//[Offset: 0x2454 , Size: 60]
	bool InWateringRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2490 , Size: 1]
	FString TouchInterfacePathName;//[Offset: 0x2494 , Size: 12]
	TouchInterface* GameTouchInterface;//[Offset: 0x24a0 , Size: 4]

--------------------------------
Class: BP_MapUIMarkManager_C.MapUIMarkManager.ActorComponent.Object

--------------------------------
Class: MapUIMarkManager.ActorComponent.Object
	MarkPathSetting[] MarkPathSettingArray;//[Offset: 0xc0 , Size: 12]
	MapWidgetBase* m_pMiniMapWidget;//[Offset: 0xcc , Size: 4]
	MapWidgetBase* m_pEntireMapWidget;//[Offset: 0xd0 , Size: 4]
	int[] CurMarkInstList;//[Offset: 0xd4 , Size: 12]
	delegate OnAlertItemListUpdateDelegate;//[Offset: 0xe0 , Size: 12]
	STExtraGameStateBase* pExtraGameState;//[Offset: 0xec , Size: 4]
	STExtraPlayerController* pExtraPC;//[Offset: 0xf0 , Size: 4]
	float TickRate_Internal;//[Offset: 0x114 , Size: 4]
	function OnUIBPLoadCallBack();// 0x1448510
	function OnAlertItemListUpdateDelegate__DelegateSignature();// 0x1ddc250

--------------------------------
Class: MarkPathSetting
	int UIBPSrcID;//[Offset: 0x0 , Size: 4]
	class MapUIMarkBaseWidget* UIBPSoftPtr;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: MapUIMarkBaseWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bLimitedInMinimap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]
	bool isUpdateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5 , Size: 1]
	Vector2D LimitedSize;//[Offset: 0x2c8 , Size: 8]
	function UpdateUIBPState();// 0x1447bc8
	function UpdateMarkSize();// 0x1447b48
	function UpdateMarkPosition();// 0x14479f8
	function OnUIBPShow();// 0x1447908
	function OnUIBPDestroy();// 0x14478ec
	function OnUIBPCreate();// 0x14477b4
	function GetWidgetCurWorldPos();// 0x144776c

--------------------------------
Class: MapWidgetBase.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanel* m_pMarkRoot;//[Offset: 0x2ac , Size: 4]
	<int,MapUIMarkBaseWidget> AllUIMarks;//[Offset: 0x2b0 , Size: 60]
	Vector LandscapeCenterCpp;//[Offset: 0x2ec , Size: 12]
	float LevelToMapScaleCpp;//[Offset: 0x2f8 , Size: 4]
	float RotateAngleCpp;//[Offset: 0x2fc , Size: 4]
	float MapScaleCpp;//[Offset: 0x300 , Size: 4]
	Vector2D MapImageSizeCpp;//[Offset: 0x304 , Size: 8]
	byte MapWidgetType;//[Offset: 0x30c , Size: 1]
	bool isMarkScaleAsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d , Size: 1]
	function SetupUIMarkRoot();// 0x1448a88
	function OnUpdateUIMarks();// 0x14478ec

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	function AddChildToCanvas();// 0x27984c0

--------------------------------
Class: BP_ChangeWearingComp_C.ChangeWearingComponent.ActorComponent.Object

--------------------------------
Class: ChangeWearingComponent.ActorComponent.Object
	int WillChangeWearIndex;//[Offset: 0xbc , Size: 4]
	float CoolDownTime;//[Offset: 0xc0 , Size: 4]
	float LastChangeWearTime;//[Offset: 0xc4 , Size: 4]
	function ServerRequestChangeWear();// 0x13f126c
	function RequestChangeWearInBattle();// 0x13f11ec
	function RequestChangeWear();// 0x13f116c
	function RealChangeWearInBattle();// 0x13f10f4
	function IsInCoolDownTime();// 0x13f106c
	function IsInBattleState();// 0x13f0fe4
	function IsChangeWearingOpend();// 0x13f0fbc
	function IsAllowChangeWearingState();// 0x13f0f34
	function GetCoolDownTime();// 0x13f0f18
	function ClientChangeWearDone();// 0x13f0dec
	function CheckCanChangeWearing();// 0x13f0d64

--------------------------------
Class: BP_GameEventListener_C.GameEventListener.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xf8 , Size: 4]
	function SetDefaultNearClipPlane();// 0x1ddc250
	function IsIOSPlatform();// 0x1ddc250
	function SetDefaultRendering();// 0x1ddc250
	function EnableGrassLOD();// 0x1ddc250
	function ChangeStreamingLevel();// 0x1ddc250
	function InitIncaseReconnect();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function CustomEvent();// 0x1ddc250
	function ReceiveEndPlay();// 0x1ddc250
	function UnloadTree();// 0x1ddc250
	function LoadTree();// 0x1ddc250
	function ExecuteUbergraph_BP_GameEventListener();// 0x1ddc250

--------------------------------
Class: GuideComponent_BP_C.GuideComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe0 , Size: 4]
	function ShowGuideByStep();// 0x1ddc250
	function AddUIGuide();// 0x1ddc250
	function InitUIGuide();// 0x1ddc250
	function CreateGuideUI();// 0x1ddc250
	function ExecuteUbergraph_GuideComponent_BP();// 0x1ddc250
	int guideStep;//[Offset: 0xe4 , Size: 4]

--------------------------------
Class: BP_ServerSwitcher_C.ServerSwitchComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x118 , Size: 4]
	function ReceiveBeginPlay();// 0x1ddc250
	function CustomEvent();// 0x1ddc250
	function ExecuteUbergraph_BP_ServerSwitcher();// 0x1ddc250

--------------------------------
Class: ServerSwitchComponent.ActorComponent.Object
	delegate OnFPSMonitorConfigSwitchRecv;//[Offset: 0xbc , Size: 12]
	delegate OnFPSLowWarning;//[Offset: 0xc8 , Size: 12]
	FPSMonitorConfigSwitch FPSMonitorConfigSwitch;//[Offset: 0xd4 , Size: 20]
	float LowFPSWarningTipsLastTime;//[Offset: 0xe8 , Size: 4]
	FString[] FPSLowWarningSDKMatch;//[Offset: 0xec , Size: 12]
	bool bLocalSwitcherFPSLowWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	function RequireConfigRPC();// 0x14a6514
	function OnUserQualitySettingChanged();// 0x14a649c
	function MakeLowFPSWarningEx();// 0x14a6488
	function MakeLowFPSWarning();// 0x14a63cc
	function CountingDown();// 0x14a63b8
	function CloseFPSCheck();// 0x14a63a4
	function AnswerconfigRPC();// 0x14a62f0

--------------------------------
Class: FPSMonitorConfigSwitch
	bool bFPSMonitor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float FPSCollectInternal;//[Offset: 0x4 , Size: 4]
	int FPSCollectCountForGroup;//[Offset: 0x8 , Size: 4]
	float FPSThreshold;//[Offset: 0xc , Size: 4]
	int FPSLowActionType;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: STExtraUnderWaterEffectComp.SceneComponent.ActorComponent.Object
	bool bTickWaterEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235 , Size: 1]
	FName UnderWaterFogTagName;//[Offset: 0x238 , Size: 8]
	class ActorComponent* UnderWaterCamEffectClass;//[Offset: 0x240 , Size: 4]
	Transform UnderWaterCamEffectTransform;//[Offset: 0x250 , Size: 48]
	AkAudioEvent* SfxInWater;//[Offset: 0x280 , Size: 4]
	AkAudioEvent* SfxOutWater;//[Offset: 0x284 , Size: 4]
	float FoggyWeatherUnderWaterFogMaxOpacity;//[Offset: 0x288 , Size: 4]
	float NormalWeatherUnderWaterFogMaxOpacity;//[Offset: 0x28c , Size: 4]
	ExponentialHeightFogComponent* UnderWaterFogComp;//[Offset: 0x290 , Size: 4]
	WaterSwimActor[] WaterSwimObjs;//[Offset: 0x294 , Size: 12]
	ExponentialHeightFogComponent[] SceneFogComps;//[Offset: 0x2a0 , Size: 12]
	CameraComponent* LastActiveCamComp;//[Offset: 0x2ac , Size: 4]
	function AddWaterSwimActor();// 0x1563060

--------------------------------
Class: ChatComponent_BP_C.ChatComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260 , Size: 4]
	function NotifyPlayerVoiceState();// 0x1ddc250
	function InitChatFlagList();// 0x1ddc250
	function SetTurnplateQuickChatList();// 0x1ddc250
	function GetActorBankByID();// 0x1ddc250
	function SwitchActorAudio();// 0x1ddc250
	function LoadSingleAudio();// 0x1ddc250
	function LoadAllAudio();// 0x1ddc250
	function CreateAudio();// 0x1ddc250
	function SetQuickChatList();// 0x1ddc250
	function InitFromSetting();// 0x1ddc250
	function AddOneMsgToUIInner();// 0x1ddc250
	function playSound();// 0x1ddc250
	function AddToArray();// 0x1ddc250
	function AddOneMsgToUI1();// 0x1ddc250
	function NotifyFriendChat();// 0x1ddc250
	function NotifyFriendInvite();// 0x1ddc250
	function NotifyFriendReplyInvite();// 0x1ddc250
	function SendDirtyFilter();// 0x1ddc250
	function OnFilterFinish();// 0x1ddc250
	function CloseChatHistoryList();// 0x1ddc250
	function UpdateQuickItemText();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function ExecuteUbergraph_ChatComponent_BP();// 0x1ddc250
	FString addToUIText;//[Offset: 0x264 , Size: 12]
	FString[] UITextArray;//[Offset: 0x270 , Size: 12]
	int FirstIndex;//[Offset: 0x27c , Size: 4]
	FString currContentMsg;//[Offset: 0x280 , Size: 12]
	bool bInitSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c , Size: 1]
	FString FriendChatStrGid;//[Offset: 0x290 , Size: 12]
	FString FriendChatSenderName;//[Offset: 0x29c , Size: 12]
	FString FriendChatContent;//[Offset: 0x2a8 , Size: 12]
	bool FriendChatSelfMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4 , Size: 1]
	FString FriendInviteStrGid;//[Offset: 0x2b8 , Size: 12]
	FString FriendInviteSenderName;//[Offset: 0x2c4 , Size: 12]
	FString FriendInviteBattleTextValue;//[Offset: 0x2d0 , Size: 12]
	FString FriendReplyStrGid;//[Offset: 0x2dc , Size: 12]
	FString FriendReplySenderName;//[Offset: 0x2e8 , Size: 12]
	bool FriendReplyReply;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4 , Size: 1]
	bool isMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5 , Size: 1]
	int UI_MsgID;//[Offset: 0x2f8 , Size: 4]
	FString UI_ItemName;//[Offset: 0x2fc , Size: 12]
	int UI_AlternateMsgID;//[Offset: 0x308 , Size: 4]
	SettingConfig_C* SettingConfig;//[Offset: 0x30c , Size: 4]
	int[] ChatFlagTypeList;//[Offset: 0x310 , Size: 12]
	int[] TmpChatIDList;//[Offset: 0x31c , Size: 12]

--------------------------------
Class: SettingConfig_C.SaveGame.Object
	int CrossHairColor;//[Offset: 0x20 , Size: 4]
	bool AimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool HitFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	bool LeftRightShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26 , Size: 1]
	bool IntelligentDrugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27 , Size: 1]
	int LeftHandFire;//[Offset: 0x28 , Size: 4]
	int Gyroscope;//[Offset: 0x2c , Size: 4]
	int ArtQuality;//[Offset: 0x30 , Size: 4]
	float ViewPercentage;//[Offset: 0x34 , Size: 4]
	int FireMode;//[Offset: 0x38 , Size: 4]
	int VehicleControlMode;//[Offset: 0x3c , Size: 4]
	bool JoystickLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	bool ButtonLRSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41 , Size: 1]
	int CameraLensSensibility;//[Offset: 0x44 , Size: 4]
	float CamLensSenNoneSniper;//[Offset: 0x48 , Size: 4]
	float CamLensSenRedDotSniper;//[Offset: 0x4c , Size: 4]
	float CamLensSen2XSniper;//[Offset: 0x50 , Size: 4]
	float CamLensSen4XSniper;//[Offset: 0x54 , Size: 4]
	float CamLensSen8XSniper;//[Offset: 0x58 , Size: 4]
	int FireCameraLensSensibility;//[Offset: 0x5c , Size: 4]
	float FireCamLensSenNoneSniper;//[Offset: 0x60 , Size: 4]
	float FireCamLensSenRedDotSniper;//[Offset: 0x64 , Size: 4]
	float FireCamLensSen2XSniper;//[Offset: 0x68 , Size: 4]
	float FireCamLensSen4XSniper;//[Offset: 0x6c , Size: 4]
	float FireCamLensSen8XSniper;//[Offset: 0x70 , Size: 4]
	int GyroscopeSensibility;//[Offset: 0x74 , Size: 4]
	float GyroscopeSenNoneSniper;//[Offset: 0x78 , Size: 4]
	float GyroscopeSenRedDotSniper;//[Offset: 0x7c , Size: 4]
	float GyroscopeSen2XSniper;//[Offset: 0x80 , Size: 4]
	float GyroscopeSen4XSniper;//[Offset: 0x84 , Size: 4]
	float GyroscopeSen8XSniper;//[Offset: 0x88 , Size: 4]
	bool MainVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c , Size: 1]
	float MainVolumValue;//[Offset: 0x90 , Size: 4]
	bool EffectVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94 , Size: 1]
	float EffectVolumValue;//[Offset: 0x98 , Size: 4]
	bool UIVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c , Size: 1]
	float UIVolumValue;//[Offset: 0xa0 , Size: 4]
	bool BGMVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	float BGMVolumValue;//[Offset: 0xa8 , Size: 4]
	bool VoiceSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]
	int VoiceChannel;//[Offset: 0xb0 , Size: 4]
	bool MicphoneVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4 , Size: 1]
	float MicphoneVolumValue;//[Offset: 0xb8 , Size: 4]
	bool SpeakerVolumSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	float SpeakerVolumValue;//[Offset: 0xc0 , Size: 4]
	bool AutoPickUpSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4 , Size: 1]
	bool DisableAutoPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5 , Size: 1]
	bool AkeyPickupSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6 , Size: 1]
	bool AutoPickupGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7 , Size: 1]
	bool AutoPickupBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]
	bool AutoPickupPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9 , Size: 1]
	bool AutoPickupShieldBag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca , Size: 1]
	bool AutoPickupDrug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb , Size: 1]
	bool BandageSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc , Size: 1]
	bool MedicalSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd , Size: 1]
	bool AnodyneSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce , Size: 1]
	bool EnergyDrinksSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf , Size: 1]
	bool AdrenalineSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0 , Size: 1]
	bool AutoPickupGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1 , Size: 1]
	bool ShouLiuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2 , Size: 1]
	bool YanWuDanSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3 , Size: 1]
	bool StunBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	bool FireBombSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5 , Size: 1]
	int LimitBandage;//[Offset: 0xd8 , Size: 4]
	int LimitMedical;//[Offset: 0xdc , Size: 4]
	int LimitAnodyne;//[Offset: 0xe0 , Size: 4]
	int LimitEnergyDrinks;//[Offset: 0xe4 , Size: 4]
	int LimitAdrenaline;//[Offset: 0xe8 , Size: 4]
	int LimitShouliudan;//[Offset: 0xec , Size: 4]
	int LimitYanwudan;//[Offset: 0xf0 , Size: 4]
	int LimitZhenbaodan;//[Offset: 0xf4 , Size: 4]
	int LimitRanshaodan;//[Offset: 0xf8 , Size: 4]
	int LimitBullet9mm;//[Offset: 0xfc , Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x100 , Size: 4]
	int Limit12koujing;//[Offset: 0x104 , Size: 4]
	int Limit45koujing;//[Offset: 0x108 , Size: 4]
	int Limit300magenandanyao;//[Offset: 0x10c , Size: 4]
	int Limitbolt;//[Offset: 0x110 , Size: 4]
	int LimitBullet5;//[Offset: 0x114 , Size: 4]
	bool 3DTouchSwitcher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118 , Size: 1]
	int FPSLevel;//[Offset: 0x11c , Size: 4]
	int ArtStyle;//[Offset: 0x120 , Size: 4]
	int RecordTipShowLastTime;//[Offset: 0x124 , Size: 4]
	<FString,DateTime> XinyueLastClickTime;//[Offset: 0x128 , Size: 60]
	<FString,DateTime> HuatiLastClickTime;//[Offset: 0x164 , Size: 60]
	bool MomentSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a0 , Size: 1]
	bool FreeModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a1 , Size: 1]
	bool HDModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2 , Size: 1]
	<FString,DateTime> CollectEquipClickTime;//[Offset: 0x1a4 , Size: 60]
	bool IsSimulatorFirstStartup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0 , Size: 1]
	int[] PlayerChatQuickTextIDList;//[Offset: 0x1e4 , Size: 12]
	int[] ChatOptiongList1;//[Offset: 0x1f0 , Size: 12]
	int LRShootMode;//[Offset: 0x1fc , Size: 4]
	bool LRShootSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200 , Size: 1]
	bool AutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201 , Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202 , Size: 1]
	int[] ChatOptiongList2;//[Offset: 0x204 , Size: 12]
	int[] ChatOptiongList3;//[Offset: 0x210 , Size: 12]
	bool HaveShowActorHint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c , Size: 1]
	int NewGetActorID;//[Offset: 0x220 , Size: 4]
	bool DeviceAutoAdapt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224 , Size: 1]
	float 3DTouchValue;//[Offset: 0x228 , Size: 4]
	bool AntiAliasingSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c , Size: 1]
	int ShotGunShootMode;//[Offset: 0x230 , Size: 4]
	int SingleShotWeaponShootMode;//[Offset: 0x234 , Size: 4]
	int isFirstOpenMicCheck;//[Offset: 0x238 , Size: 4]
	float VehicleEye;//[Offset: 0x23c , Size: 4]
	float ParachuteEye;//[Offset: 0x240 , Size: 4]
	FString ChatPrivacyAcceptedVersion;//[Offset: 0x244 , Size: 12]
	int RepeatingWeaponShootMode;//[Offset: 0x250 , Size: 4]
	int DrivingViewMode;//[Offset: 0x254 , Size: 4]
	bool FPViewSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258 , Size: 1]
	int FpViewValue;//[Offset: 0x25c , Size: 4]
	float CamFpFreeEye;//[Offset: 0x260 , Size: 4]
	float CamLensSenNoneSniperFP;//[Offset: 0x264 , Size: 4]
	float FireCamLensSenNoneSniperFP;//[Offset: 0x268 , Size: 4]
	float GyroscopeSenNoneSniperFP;//[Offset: 0x26c , Size: 4]
	bool FirstTime_FPP_TPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270 , Size: 1]
	bool FirstTime_WarMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271 , Size: 1]
	int DaliyWarmodeInfo;//[Offset: 0x274 , Size: 4]
	FString currentLanguage;//[Offset: 0x278 , Size: 12]
	bool redBloodSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284 , Size: 1]
	bool ActorAnimationSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285 , Size: 1]
	FString lastViewDayTime;//[Offset: 0x288 , Size: 12]
	FString lastViewWeekTime;//[Offset: 0x294 , Size: 12]
	bool openNewMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0 , Size: 1]
	bool hasOpenedSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a1 , Size: 1]
	float CamLensSen3XSniper;//[Offset: 0x2a4 , Size: 4]
	float CamLensSen6XSniper;//[Offset: 0x2a8 , Size: 4]
	float FireCamLensSen3XSniper;//[Offset: 0x2ac , Size: 4]
	float FireCamLensSen6XSniper;//[Offset: 0x2b0 , Size: 4]
	float GyroscopeSen3XSniper;//[Offset: 0x2b4 , Size: 4]
	float GyroscopeSen6XSniper;//[Offset: 0x2b8 , Size: 4]
	bool ShadowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc , Size: 1]
	int RedDotCHColor;//[Offset: 0x2c0 , Size: 4]
	int RedDotCHType;//[Offset: 0x2c4 , Size: 4]
	int HolographicCHColor;//[Offset: 0x2c8 , Size: 4]
	int HolographicCHType;//[Offset: 0x2cc , Size: 4]
	int Sinper2xCHColor;//[Offset: 0x2d0 , Size: 4]
	int Sinper2xCHType;//[Offset: 0x2d4 , Size: 4]
	int Sniper3xCHColor;//[Offset: 0x2d8 , Size: 4]
	int Sniper3xCHType;//[Offset: 0x2dc , Size: 4]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1 , Size: 1]
	<int,int> PickUpCountSetting;//[Offset: 0x2e4 , Size: 60]
	int LimitFirstAidKit;//[Offset: 0x320 , Size: 4]
	FString XGLanguageTag;//[Offset: 0x324 , Size: 12]
	FString XGTimezoneTag;//[Offset: 0x330 , Size: 12]
	FString XGPushNightTag;//[Offset: 0x33c , Size: 12]
	FString XGPushDayTag;//[Offset: 0x348 , Size: 12]
	bool DeviceAutoAdaptEX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354 , Size: 1]
	int SelectUIElemIndex1;//[Offset: 0x358 , Size: 4]
	int SelectUIElemIndex2;//[Offset: 0x35c , Size: 4]
	int SelectUIElemIndex3;//[Offset: 0x360 , Size: 4]
	bool VaultBtnSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364 , Size: 1]
	int LimitSniper2X;//[Offset: 0x368 , Size: 4]
	int LimitSniper3X;//[Offset: 0x36c , Size: 4]
	int LimitSniper4X;//[Offset: 0x370 , Size: 4]
	int LimitSniper6X;//[Offset: 0x374 , Size: 4]
	int LimitSniper8X;//[Offset: 0x378 , Size: 4]
	bool LongPressSideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c , Size: 1]
	bool LongPressSniperSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d , Size: 1]
	int SidewaysMode;//[Offset: 0x380 , Size: 4]
	int OpenMirrorMode;//[Offset: 0x384 , Size: 4]
	bool CarMusicSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388 , Size: 1]
	bool OBS_TrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389 , Size: 1]
	bool OBS_Perspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a , Size: 1]
	bool OBS_BulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b , Size: 1]
	bool QuasiMirrorSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c , Size: 1]
	int LobbyStyleID;//[Offset: 0x390 , Size: 4]
	bool LobbyBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394 , Size: 1]
	bool LobbyHallowma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395 , Size: 1]
	bool SettingStyleRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396 , Size: 1]
	bool SettingBgmRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x397 , Size: 1]
	float ScreenLightness;//[Offset: 0x398 , Size: 4]
	bool BloodStateSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c , Size: 1]
	bool SettingBigHandOperateRedPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d , Size: 1]
	bool LobbyIsChristmas;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e , Size: 1]
	bool MallShowGet10Animation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f , Size: 1]
	FString FirstChargeVersion;//[Offset: 0x3a0 , Size: 12]
	FString RechargePosSave;//[Offset: 0x3ac , Size: 12]
	bool FirstTime_PVEVPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8 , Size: 1]
	bool IslandBroadCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9 , Size: 1]
	bool ResidentEvilNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba , Size: 1]
	bool AnniversaryNeedShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb , Size: 1]
	<int,int> PvePickUpCountSetting;//[Offset: 0x3bc , Size: 60]
	int LimitZombieGrenade;//[Offset: 0x3f8 , Size: 4]
	bool AutoPickupSwitcher_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc , Size: 1]
	bool DisableAutoPickupSwitcher_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd , Size: 1]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe , Size: 1]
	bool AutoPickupPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ff , Size: 1]
	int LimitBandage_pve;//[Offset: 0x400 , Size: 4]
	int LimitMedical_pve;//[Offset: 0x404 , Size: 4]
	int LimitAnodyne_pve;//[Offset: 0x408 , Size: 4]
	int LimitEnergyDrinks_pve;//[Offset: 0x40c , Size: 4]
	int LimitAdrenaline_pve;//[Offset: 0x410 , Size: 4]
	int LimitFirstAidKit_pve;//[Offset: 0x414 , Size: 4]
	int LimitShouliudan_pve;//[Offset: 0x418 , Size: 4]
	int LimitYanwudan_pve;//[Offset: 0x41c , Size: 4]
	int LimitZhenbaodan_pve;//[Offset: 0x420 , Size: 4]
	int LimitRanshaodan_pve;//[Offset: 0x424 , Size: 4]
	int LimitSniper2X_pve;//[Offset: 0x428 , Size: 4]
	int LimitSniper3X_pve;//[Offset: 0x42c , Size: 4]
	int LimitSniper4X_pve;//[Offset: 0x430 , Size: 4]
	int LimitSniper6X_pve;//[Offset: 0x434 , Size: 4]
	int LimitSniper8X_pve;//[Offset: 0x438 , Size: 4]
	bool VNGMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c , Size: 1]
	int IngamePlayerInfo_OpenDate;//[Offset: 0x440 , Size: 4]
	int SideMirrorMode;//[Offset: 0x444 , Size: 4]
	int[] PlayerWheelChatQuickTextIDList;//[Offset: 0x448 , Size: 12]
	bool OpenOthersPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454 , Size: 1]
	bool OpenMyPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x455 , Size: 1]
	bool LobbyAnniversaryBgm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x456 , Size: 1]
	bool FirstTime_SurvivalMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x457 , Size: 1]
	int LimitYeDanGrenade;//[Offset: 0x458 , Size: 4]
	int LimitAntidote;//[Offset: 0x45c , Size: 4]
	bool QuickThrowSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460 , Size: 1]
	int[] ChatOptiongList4;//[Offset: 0x464 , Size: 12]
	bool OpenMyPetFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470 , Size: 1]
	int ScoreTips_TModeCnt;//[Offset: 0x474 , Size: 4]
	bool FirstTime_TMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478 , Size: 1]
	bool TurboEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479 , Size: 1]
	int FPPFireMode;//[Offset: 0x47c , Size: 4]
	int SelectUIElemIndexFPP1;//[Offset: 0x480 , Size: 4]
	int SelectUIElemIndexFPP2;//[Offset: 0x484 , Size: 4]
	int SelectUIElemIndexFPP3;//[Offset: 0x488 , Size: 4]
	byte TurboLastQuality;//[Offset: 0x48c , Size: 1]
	<FString,FString> PubgPlusGuideRecord;//[Offset: 0x490 , Size: 60]
	<FString,FString> PubgPlusGuideConfig;//[Offset: 0x4cc , Size: 60]
	bool IsEnableFloatingText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508 , Size: 1]
	int AimAssistLevel;//[Offset: 0x50c , Size: 4]
	bool OpenQuickSwitchItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510 , Size: 1]
	bool FirstTime_TMode_Slid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511 , Size: 1]
	bool EnemyLocationMarkSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x512 , Size: 1]
	bool OpenQuickSwitchSubWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x513 , Size: 1]
	int QuickGunBeginTips_GameCount;//[Offset: 0x514 , Size: 4]
	bool HelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518 , Size: 1]
	bool HasShowHeavyWeaponFirsttimeTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x519 , Size: 1]

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: BP_CommonBtn_C.CommonBtnComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc8 , Size: 4]
	function OnChangeOpenDoorMode();// 0x1ddc250
	function UnRegistShowDoorButton();// 0x1ddc250
	function OnShowDoorButton();// 0x1ddc250
	function RegistShowDoorButton();// 0x1ddc250
	function ShowDoorButton();// 0x1ddc250
	function GetPlayerController();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function CharacterStatusChanged();// 0x1ddc250
	function PlayerControllerReconnectedDelegate_Event();// 0x1ddc250
	function UI_Click();// 0x1ddc250
	function ToogleDoor();// 0x1ddc250
	function BP_ShowDoorBtn();// 0x1ddc250
	function AutoOpenDoor();// 0x1ddc250
	function BP_SimulateUIClick();// 0x1ddc250
	function ExecuteUbergraph_BP_CommonBtn();// 0x1ddc250
	int openmode;//[Offset: 0xcc , Size: 4]
	byte BtnType;//[Offset: 0xd0 , Size: 1]
	bool bShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1 , Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2 , Size: 1]

--------------------------------
Class: BP_VehicleUser_C.VehicleUserComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1e8 , Size: 4]
	function GetVehicleGoStraight();// 0x1ddc250
	function SetHelicopterCameraMode();// 0x1ddc250
	function HandleCharacterUnequipWeapon();// 0x1ddc250
	function HandleCharacterEquipWeapon();// 0x1ddc250
	function SwitchToLastWeapon();// 0x1ddc250
	function CacheLastUseWeaponSlot();// 0x1ddc250
	function SetPlayMusic();// 0x1ddc250
	function SetDrivingViewMode();// 0x1ddc250
	function ResetInputs();// 0x1ddc250
	function OnMotorcycleContactChanged();// 0x1ddc250
	function FixGoStraight();// 0x1ddc250
	function OnUpdateSeatGUI();// 0x1ddc250
	function OnVehicleWheelsHPChanged();// 0x1ddc250
	function StopPlayerAutoSprint();// 0x1ddc250
	function OnVehicleFuelChanged();// 0x1ddc250
	function OnVehicleHPChanged();// 0x1ddc250
	function GetPlayerController();// 0x1ddc250
	function ExitVehicle();// 0x1ddc250
	function EnterVehicle();// 0x1ddc250
	function OnEnterVehicleCompleted();// 0x1ddc250
	function OnExitVehicleCompleted();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function OnChangeVehicleSeatCompleted();// 0x1ddc250
	function OnCurrrentClosestVehicleChanged();// 0x1ddc250
	function EventSetDrivingViewMode();// 0x1ddc250
	function OnInputAxisMoveForward();// 0x1ddc250
	function OnInputAxisMoveRight();// 0x1ddc250
	function EventSetCarMusicSwitch();// 0x1ddc250
	function EventSetHelicopterFreeCamera();// 0x1ddc250
	function ExecuteUbergraph_BP_VehicleUser();// 0x1ddc250
	bool AxisMoveForwardFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec , Size: 1]
	bool AxisMoveRightFreezed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed , Size: 1]
	float Fuel;//[Offset: 0x1f0 , Size: 4]
	float FuelMax;//[Offset: 0x1f4 , Size: 4]
	float HP;//[Offset: 0x1f8 , Size: 4]
	float HPMax;//[Offset: 0x1fc , Size: 4]
	float OutMoveRightRate;//[Offset: 0x200 , Size: 4]
	float RawSpeed;//[Offset: 0x204 , Size: 4]
	enum SeatType;//[Offset: 0x208 , Size: 1]
	byte LastWeaponSlot;//[Offset: 0x209 , Size: 1]
	float LastOutMoveRightRate;//[Offset: 0x20c , Size: 4]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xc0 , Size: 136]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148 , Size: 1]
	function Stop();// 0x360ffd8
	function SetVectorCurve();// 0x360ff1c
	function SetTimelineLengthMode();// 0x360fea4
	function SetTimelineLength();// 0x360fe2c
	function SetPlayRate();// 0x360fdb4
	function SetPlaybackPosition();// 0x360fca0
	function SetNewTime();// 0x360fc28
	function SetLooping();// 0x360fba8
	function SetLinearColorCurve();// 0x360faec
	function SetIgnoreTimeDilation();// 0x360fa6c
	function SetFloatCurve();// 0x360f9b0
	function ReverseFromEnd();// 0x360f99c
	function Reverse();// 0x360f988
	function PlayFromStart();// 0x360f974
	function Play();// 0x360f960
	function OnRep_Timeline();// 0x360f94c
	function IsReversing();// 0x360f924
	function IsPlaying();// 0x360f8fc
	function IsLooping();// 0x360f8d4
	function GetTimelineLength();// 0x360f8ac
	function GetPlayRate();// 0x360f884
	function GetPlaybackPosition();// 0x27a6948
	function GetIgnoreTimeDilation();// 0x360f85c

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0 , Size: 1]
	float Length;//[Offset: 0x4 , Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8 , Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8 , Size: 1]
	float PlayRate;//[Offset: 0xc , Size: 4]
	float Position;//[Offset: 0x10 , Size: 4]
	TimelineEventEntry[] Events;//[Offset: 0x14 , Size: 12]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20 , Size: 12]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x2c , Size: 12]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x38 , Size: 12]
	delegate TimelinePostUpdateFunc;//[Offset: 0x48 , Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x58 , Size: 16]
	Object* PropertySetObject;//[Offset: 0x70 , Size: 8]
	FName DirectionPropertyName;//[Offset: 0x78 , Size: 8]
	Property* DirectionProperty;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0 , Size: 4]
	delegate EventFunc;//[Offset: 0x8 , Size: 16]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0 , Size: 4]
	delegate InterpFunc;//[Offset: 0x8 , Size: 16]
	FName TrackName;//[Offset: 0x18 , Size: 8]
	FName VectorPropertyName;//[Offset: 0x20 , Size: 8]
	StructProperty* VectorProperty;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0 , Size: 4]
	delegate InterpFunc;//[Offset: 0x8 , Size: 16]
	FName TrackName;//[Offset: 0x18 , Size: 8]
	FName FloatPropertyName;//[Offset: 0x20 , Size: 8]
	FloatProperty* FloatProperty;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0 , Size: 4]
	delegate InterpFunc;//[Offset: 0x8 , Size: 16]
	FName TrackName;//[Offset: 0x18 , Size: 8]
	FName LinearColorPropertyName;//[Offset: 0x20 , Size: 8]
	StructProperty* LinearColorProperty;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x2f0 , Size: 1232]
	float Priority;//[Offset: 0x7c0 , Size: 4]
	float BlendRadius;//[Offset: 0x7c4 , Size: 4]
	float BlendWeight;//[Offset: 0x7c8 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc , Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc , Size: 1]
	function AddOrUpdateBlendable();// 0x35d5e5c

--------------------------------
Class: UIAdaptationStructure
	FString DeviceName_2_A8CF6E1F40D8116DD8A17D97AD6515ED;//[Offset: 0x0 , Size: 12]
	float LeftOffset_5_61C5916847A6DB0845C03799C935F0CD;//[Offset: 0xc , Size: 4]
	float RightOffset_7_338321234218040563FB88B423EA8023;//[Offset: 0x10 , Size: 4]
	float TopOffset_9_68D32A004301A63A4ABF20B129DBC8DE;//[Offset: 0x14 , Size: 4]
	float BottomOffset_11_0C31E5BC4AA9CD8E9DBA4A9D456E101E;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: BP_STRUCT_Item_type
	FString ItemBigIcon_0_733663734EEB8DD5D7FF41A6E96480D4;//[Offset: 0x0 , Size: 12]
	int MaxCount_1_D5BF33434E37E75739D213989C4FA372;//[Offset: 0xc , Size: 4]
	int BPID_2_F73A5EF243D620CE49BBCAA8832C6AF9;//[Offset: 0x10 , Size: 4]
	int ItemType_3_4CBCE77A4D2A20BEBD861AADEF3B616B;//[Offset: 0x14 , Size: 4]
	bool AutoEquipAndDrop_4_144B885646B92B9836CE33923842AB1E;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	int ItemID_5_29F7B64741688A0A853FD281FAE4E28D;//[Offset: 0x1c , Size: 4]
	bool Consumable_7_B08070BD407AD029B7CDA7BDB341A342;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	FString ItemDesc_8_8ED919494479E8A62F11DBB9C7AD0F9A;//[Offset: 0x24 , Size: 12]
	FString ItemSmallIcon_9_B13D206C4A153C963FCE478A1B39C15F;//[Offset: 0x30 , Size: 12]
	FString ItemName_10_B257B36A422BB69651454E90EBC1323B;//[Offset: 0x3c , Size: 12]
	FString WardrobeTab_11_6562B47746AECB0B5C84BC9C96EACD9D;//[Offset: 0x48 , Size: 12]
	int ItemSubType_12_087F026E41DAB82F567758A4F56D72CF;//[Offset: 0x54 , Size: 4]
	bool Equippable_13_BB222DC04DCB195FCB3F29B89EA210CA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]
	float UnitWeight_f_14_725EBB604F31443B93AF3597580ECAE4;//[Offset: 0x5c , Size: 4]
	FString ItemWhiteIcon_15_AA35FD8045790AA9F73F58829F202B94;//[Offset: 0x60 , Size: 12]
	int ItemQuality_16_3EF7461D45D14FC186EB3DBB70D01484;//[Offset: 0x6c , Size: 4]
	int SellTokenType_17_B410373F45F6C04F12302FB860FB46DC;//[Offset: 0x70 , Size: 4]
	int SellPrice_18_12D0424A4E19AC2E29A301AB474CBFD8;//[Offset: 0x74 , Size: 4]
	FString KillWhiteIcon_27_16289384496FF361F9005580DEF9CAD1;//[Offset: 0x78 , Size: 12]
	int NeedShare_73_D9C0818D40A3C6AB07231BABA5477060;//[Offset: 0x84 , Size: 4]
	int WeightforOrder_29_4373EFCD4D78E7DF4067FF9D3E213664;//[Offset: 0x88 , Size: 4]
	FString Preview_32_1997D4634D3D3F8CC7360283D2AF4E6C;//[Offset: 0x8c , Size: 12]
	FString ExTime_33_8299B7454C71BC6A899937AF00BFF0C5;//[Offset: 0x98 , Size: 12]
	FString JumpUrl_34_A5DE7C2C406E2C16620017929DDEEA4F;//[Offset: 0xa4 , Size: 12]
	int SourceBookEnable_35_80A540DA4CF5C9DEE5E79E9668E6511C;//[Offset: 0xb0 , Size: 4]
	FString PickupDesc_36_D5D621864C55ED8C6ABE728B6F002D4E;//[Offset: 0xb4 , Size: 12]
	int WardrobeMainTab_38_D234FCBE4A19AAF3066394AD7C7D98DF;//[Offset: 0xc0 , Size: 4]
	int Durability_39_7B54DEB94CD411488438539500D225E1;//[Offset: 0xc4 , Size: 4]
	bool IsBatchUse_40_88AB90DA48C707B0FE6DB18185C6253A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]
	FString JumpExchangeUrl_41_03C710694C2A928C1AF3C6A9A3F23CE6;//[Offset: 0xcc , Size: 12]
	FString ArmorySimpleDesc_42_27A16200667F9D5C22753FAB004E0C93;//[Offset: 0xd8 , Size: 12]
	int AIFullVaule_43_6A3A6FC023E58D4B4FDDDF270E81E075;//[Offset: 0xe4 , Size: 4]
	int LongDescID_44_4E8350406652C05F7794F90804562904;//[Offset: 0xe8 , Size: 4]
	FString ArmoryDesc_45_5ADDC7800942285E5EA7A0880964AD23;//[Offset: 0xec , Size: 12]
	FString ItemSmallIcon2_46_6ED99A00141F4C900B45252101330012;//[Offset: 0xf8 , Size: 12]
	FString ItemBigIcon2_47_2C0E40404ED554873AD82D3A053DBC62;//[Offset: 0x104 , Size: 12]
	FString BackpackSimple_48_26F807C06BB149650FE17C280F83D985;//[Offset: 0x110 , Size: 12]
	FString ItemRegion_49_3899A60047215AA47D8652720D715E6E;//[Offset: 0x11c , Size: 12]
	FString DescTag1_50_53531C406D7915D37BEE637E04075E81;//[Offset: 0x128 , Size: 12]
	FString DescTag3_51_53551CC06D7915D57BEE637804075E83;//[Offset: 0x134 , Size: 12]
	FString DescTag2_52_53541C806D7915D47BEE637F04075E82;//[Offset: 0x140 , Size: 12]
	int ShowSexInMall_56_0C9F0CC01B8DDF89290B2B7F0D9E026C;//[Offset: 0x14c , Size: 4]
	FString RedEmotionSoundPath_57_1D0ECC4066CAAAF35D35519A029C0D28;//[Offset: 0x150 , Size: 12]
	int RedEmotionPlayCD_58_4FB3EE0022A2DB4E4F16119706CC2024;//[Offset: 0x15c , Size: 4]
	FString RedEmotionIcon_59_01AF890033431A2479C4BA460D5728FE;//[Offset: 0x160 , Size: 12]
	int RedEmotionId_60_346EF2004F911664698794F60EAD5724;//[Offset: 0x16c , Size: 4]
	int RedEmotionFlag_61_2E8D25401E2A77DF79CB9A7B0D572CD7;//[Offset: 0x170 , Size: 4]
	int RedEmotionFightId_62_3F02EE804F5D9F9C4F294BF001172D84;//[Offset: 0x174 , Size: 4]
	FString JapanKoreaItemBigIcon_66_2E164AC00FFFA7653C8D19BD0C25A0CE;//[Offset: 0x178 , Size: 12]
	FString JapanKoreaItemSmallIcon_67_034B848076AC1078415670770A5658BE;//[Offset: 0x184 , Size: 12]
	int AvatarID_68_319E644077E02FFF04B5C19B04157FD4;//[Offset: 0x190 , Size: 4]
	bool IsPatchItem_69_349A78005F80430E28984D2C053505CD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194 , Size: 1]
	int DefaultBPID_70_565E22406359818D69EDC21605AA41A4;//[Offset: 0x198 , Size: 4]
	FString StoreDetailImage_71_02C21A00264C878869630051096EDE55;//[Offset: 0x19c , Size: 12]
	FString SpecialIcon_72_55E01BC05ADCEE1500E06C0F01021C3E;//[Offset: 0x1a8 , Size: 12]
	FString ValidRegionCodes_74_2EA4F9C02DC66B4573D87CB8064AB793;//[Offset: 0x1b4 , Size: 12]
	int ValidTimes_75_5BC6A5C03028B6616FF746180062B373;//[Offset: 0x1c0 , Size: 4]
	FString PreviewDisplay_76_15377740089E1C37746DD63C0B5976C9;//[Offset: 0x1c4 , Size: 12]
	int RateType_77_176334C00292E359401D0B6600355865;//[Offset: 0x1d0 , Size: 4]
	int character_param_78_2F2A70804AD88C7E6E8F5B83071E93DD;//[Offset: 0x1d4 , Size: 4]
	FString QualityRate_79_5F4A46807D1C4B2C0A08E8F50F3EB745;//[Offset: 0x1d8 , Size: 12]
	int ItemSoundID_80_7010328028DE3D6841FCD9F407C46B04;//[Offset: 0x1e4 , Size: 4]
	int JKBPID_81_1FF3B64037160BBF09A6FDF60967EB24;//[Offset: 0x1e8 , Size: 4]
	int CanIntoBag_82_416CF6C01FD7CDED0F5E477601A418C7;//[Offset: 0x1ec , Size: 4]
	int ResSeprateType_83_5349D1400501D3B166D23C1D0CBC9FE5;//[Offset: 0x1f0 , Size: 4]

--------------------------------
Class: BP_PlayerCameraManager_C.STPlayerCameraManager.PlayerCameraManager.Actor.Object

--------------------------------
Class: STPlayerCameraManager.PlayerCameraManager.Actor.Object
	float InVehicleFPPViewPitchLimitMin;//[Offset: 0x18e8 , Size: 4]
	float InVehicleFPPViewYawLimit;//[Offset: 0x18ec , Size: 4]
	float InVehicleNarrowSeatGrenadesYawLimit;//[Offset: 0x18f0 , Size: 4]

--------------------------------
Class: BP_BattleRoyaleHUD_C.SurviveHUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x538 , Size: 4]
	function UserConstructionScript();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function HitFeedBackChanged();// 0x1ddc250
	function ExecuteUbergraph_BP_BattleRoyaleHUD();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x53c , Size: 4]

--------------------------------
Class: SurviveHUD.HUD.Actor.Object
	bool bIsWorldMapVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364 , Size: 1]
	Vector MarkerPosition;//[Offset: 0x368 , Size: 12]
	bool bShowCrosshair;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374 , Size: 1]
	bool ShowHitPerform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375 , Size: 1]
	HitPerformData HitPerform;//[Offset: 0x378 , Size: 116]
	Texture2D* HUDMainTexture;//[Offset: 0x3ec , Size: 4]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x3f0 , Size: 4]
	Texture2D* CrossHairDisablePaintingTexture;//[Offset: 0x3f4 , Size: 4]
	bool PlayHudHitSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8 , Size: 1]
	class HUDWidgetBase[] HUDWidgetClassList;//[Offset: 0x3fc , Size: 12]
	HUDWidgetBase[] HudWidgets;//[Offset: 0x408 , Size: 12]
	Texture2D* HUDPlayerTexture;//[Offset: 0x420 , Size: 4]
	CanvasIcon Crosshair;//[Offset: 0x424 , Size: 20]
	CanvasIcon ProgreesBar;//[Offset: 0x488 , Size: 20]
	CanvasIcon BKProgreesBar;//[Offset: 0x49c , Size: 20]
	CanvasIcon ProgressBarPlayer;//[Offset: 0x4b0 , Size: 20]
	CanvasIcon Marker;//[Offset: 0x4d8 , Size: 20]
	Texture2D* HUDWorldMapTexture;//[Offset: 0x4ec , Size: 4]
	CanvasIcon WORLDMAP;//[Offset: 0x4f0 , Size: 20]
	Texture2D* AimCrosshairTextrue;//[Offset: 0x504 , Size: 4]
	function OnAsyncLoadingFinished();// 0x1571e1c
	function EnableCrosshair();// 0x1571da0

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] IconList;//[Offset: 0x0 , Size: 12]
	float DefaultSpread;//[Offset: 0xc , Size: 4]
	float SpreadMax;//[Offset: 0x10 , Size: 4]
	float AddSpreadScale;//[Offset: 0x14 , Size: 4]
	float SpreadDecreaseSpeed;//[Offset: 0x18 , Size: 4]
	float DefaultOffset;//[Offset: 0x1c , Size: 4]
	float DefaultAlpha;//[Offset: 0x20 , Size: 4]
	float AlphaDecreaseSpeed;//[Offset: 0x24 , Size: 4]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	enum HitPosition;//[Offset: 0x29 , Size: 1]
	LinearColor HitBodyDrawColor;//[Offset: 0x2c , Size: 16]
	LinearColor HitHeadDrawColor;//[Offset: 0x3c , Size: 16]
	LinearColor HitLimbsDrawColor;//[Offset: 0x4c , Size: 16]
	AkAudioEvent* HeadShotSound;//[Offset: 0x5c , Size: 4]
	AkAudioEvent* BodyShotSound;//[Offset: 0x60 , Size: 4]
	AkAudioEvent* DeadlyShotSound;//[Offset: 0x64 , Size: 4]
	float CurCrosshairSpread;//[Offset: 0x68 , Size: 4]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D Icon;//[Offset: 0x0 , Size: 20]
	float Offset;//[Offset: 0x14 , Size: 4]
	Vector2D IconOffset;//[Offset: 0x18 , Size: 8]
	float alpha;//[Offset: 0x20 , Size: 4]
	float Rotate;//[Offset: 0x24 , Size: 4]
	float Scale;//[Offset: 0x28 , Size: 4]
	float IconRotate;//[Offset: 0x2c , Size: 4]
	float LogicRotate;//[Offset: 0x30 , Size: 4]
	bool IsSpreadEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0 , Size: 4]
	float U;//[Offset: 0x4 , Size: 4]
	float V;//[Offset: 0x8 , Size: 4]
	float UL;//[Offset: 0xc , Size: 4]
	float VL;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: HUDWidgetBase.Object
	float DesignedResolution;//[Offset: 0x1c , Size: 4]
	Vector2D Position;//[Offset: 0x20 , Size: 8]
	Vector2D Size;//[Offset: 0x28 , Size: 8]
	Vector2D Origin;//[Offset: 0x30 , Size: 8]
	Vector2D ScreenPosition;//[Offset: 0x38 , Size: 8]
	bool bScaleByDesignedResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40 , Size: 1]
	bool bMaintainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40 , Size: 1]
	float Opacity;//[Offset: 0x44 , Size: 4]
	bool bIgnoreHUDBaseColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]
	SurviveHUD* HUDOwner;//[Offset: 0x4c , Size: 4]
	STExtraPlayerController* ExtraPlayerOwner;//[Offset: 0x50 , Size: 4]
	Pawn* CharacterOwner;//[Offset: 0x54 , Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59 , Size: 1]
	float LastRenderTime;//[Offset: 0x5c , Size: 4]
	Vector2D RenderPosition;//[Offset: 0x60 , Size: 8]
	Vector2D RenderSize;//[Offset: 0x68 , Size: 8]
	float RenderScale;//[Offset: 0x70 , Size: 4]
	Vector2D CanvasCenter;//[Offset: 0x74 , Size: 8]
	Canvas* Canvas;//[Offset: 0x7c , Size: 4]
	float AspectScale;//[Offset: 0x80 , Size: 4]
	Vector2D CanvasClip;//[Offset: 0x84 , Size: 8]
	StructProperty[] RenderObjectList;//[Offset: 0x8c , Size: 12]
	function ShouldDraw();// 0x13bc304
	function SetHidden();// 0x143348c
	function RenderObj_TextureAt();// 0x143321c
	function RenderObj_Texture();// 0x1433088
	function RenderObj_TextAt();// 0x1432f34
	function RenderObj_Text();// 0x1432e28
	function DrawTexture();// 0x143299c
	function DrawText();// 0x1432230
	function DrawMaterial();// 0x1431e04
	function DrawAllRenderObjects();// 0x1431d48
	function Draw();// 0x13f08d0
	function ApplyHUDColor();// 0x1431cac

--------------------------------
Class: CanvasIcon
	Texture* Texture;//[Offset: 0x0 , Size: 4]
	float U;//[Offset: 0x4 , Size: 4]
	float V;//[Offset: 0x8 , Size: 4]
	float UL;//[Offset: 0xc , Size: 4]
	float VL;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: BP_PlayerPawn_C.STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1e50 , Size: 4]
	function AllowWater();// 0x1ddc250
	function ShouldRedBlood();// 0x1ddc250
	function CheckHasVehicleAvatar();// 0x1ddc250
	function ChangeCurVehicleAvatar();// 0x1ddc250
	function HandleOnChangedVehicleSeat();// 0x1ddc250
	function GetMasterBoneComponent();// 0x1ddc250
	function InitDefaultAvatarByResID();// 0x1ddc250
	function GetGrenadeCameraShakeByDir();// 0x1ddc250
	function GetEmoteHandle();// 0x1ddc250
	function GetShootWeaponNameByWeapon();// 0x1ddc250
	function GetThirdPersonCamera();// 0x1ddc250
	function GetThirdPersonSpringArm();// 0x1ddc250
	function GetFPPCamera();// 0x1ddc250
	function GetFPPSpringArm();// 0x1ddc250
	function GetFirstPersonCamera();// 0x1ddc250
	function GetFirstPersonSpringArm();// 0x1ddc250
	function GetScopeCamera();// 0x1ddc250
	function GetScopeSpringArm();// 0x1ddc250
	function GetNonSimulatedComponents_OnFighting();// 0x1ddc250
	function ShouldAutoScopeWhenPeek();// 0x1ddc250
	function GetGrenadeNameByGrenadeType();// 0x1ddc250
	function GetNonSimulatedComponents_NonTeammates();// 0x1ddc250
	function GetControllerViewCamera();// 0x1ddc250
	function GetNonSimulatedComponents();// 0x1ddc250
	function GetNonDedicatedComponents();// 0x1ddc250
	function HandleOnDetachedVehicle();// 0x1ddc250
	function HandleOnAttachedVehicle();// 0x1ddc250
	function GetActiveSpringArm();// 0x1ddc250
	function AimInterupted();// 0x1ddc250
	function GetWeapon();// 0x1ddc250
	function ClientHandlePreOnPlane();// 0x1ddc250
	function ResetBPCameraSetting();// 0x1ddc250
	function ShowDebugArrow();// 0x1ddc250
	function isAutonomous();// 0x1ddc250
	function PickUp();// 0x1ddc250
	function DoPickUpTarget();// 0x1ddc250
	function RotateMesh();// 0x1ddc250
	function SetAllCollisionEnabled();// 0x1ddc250
	function MoveOutScope();// 0x1ddc250
	function MoveInScope();// 0x1ddc250
	function Reload();// 0x1ddc250
	function SwitchCrouch();// 0x1ddc250
	function UserConstructionScript();// 0x1ddc250
	function ParachuteCamBlend__FinishedFunc();// 0x1ddc250
	function ParachuteCamBlend__UpdateFunc();// 0x1ddc250
	function LerpAlpha__FinishedFunc();// 0x1ddc250
	function LerpAlpha__UpdateFunc();// 0x1ddc250
	function ScopeTimeline__FinishedFunc();// 0x1ddc250
	function ScopeTimeline__UpdateFunc();// 0x1ddc250
	function TurnLerpAlpha__FinishedFunc();// 0x1ddc250
	function TurnLerpAlpha__UpdateFunc();// 0x1ddc250
	function InpActEvt_T_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_Fire_K2Node_InputActionEvent();// 0x1ddc250
	function InpActEvt_Fire_K2Node_InputActionEvent();// 0x1ddc250
	function InpActEvt_Vault_K2Node_InputActionEvent();// 0x1ddc250
	function InpActEvt_Q_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_Q_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_E_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_E_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_Z_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_V_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_C_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_LeftAlt_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_LeftAlt_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_SpaceBar_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_R_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_Z_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_LeftShift_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_LeftShift_K2Node_InputKeyEvent();// 0x1ddc250
	function InpActEvt_F10_K2Node_InputKeyEvent();// 0x1ddc250
	function OnPetOwnerPossessed();// 0x1ddc250
	function SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x1ddc250
	function SwitchCameraFromParachuteOpeningToTPPStop();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function BPNotifyStartDying();// 0x1ddc250
	function ReloadEvent();// 0x1ddc250
	function OnEquipWeapon();// 0x1ddc250
	function SwitchCamera();// 0x1ddc250
	function OnNotifyHurt();// 0x1ddc250
	function NotifyPickUp();// 0x1ddc250
	function OnLanded();// 0x1ddc250
	function OnPoseStateChange();// 0x1ddc250
	function K2_UpdateCustomMovement();// 0x1ddc250
	function K2_OnMovementModeChanged();// 0x1ddc250
	function BPReceiveDamage();// 0x1ddc250
	function ParachuteOnWater();// 0x1ddc250
	function NotifyTombBox();// 0x1ddc250
	function DoAutoReloadCurrentWeapon();// 0x1ddc250
	function OnUnEquipWeapon();// 0x1ddc250
	function BPResetCharacter();// 0x1ddc250
	function OnInitGrenadeData();// 0x1ddc250
	function VaultFailPawnBluePrint();// 0x1ddc250
	function PawnVaultServerBluePrint();// 0x1ddc250
	function PawnVaultAllBluePrint();// 0x1ddc250
	function ScopeInStop();// 0x1ddc250
	function PlayScopeInTimeline();// 0x1ddc250
	function BPReceiveRadialDamage();// 0x1ddc250
	function ReceivePossessed();// 0x1ddc250
	function ParachutePlaySound();// 0x1ddc250
	function OnWeaponEquipmentUpdate();// 0x1ddc250
	function BindAndExecStateChanged();// 0x1ddc250
	function StateEnterHandler_Event();// 0x1ddc250
	function PawnVaultServerStopCheckBluePrint();// 0x1ddc250
	function PawnVaultStopBluePrint();// 0x1ddc250
	function OnMiniTreeTriggerServerLogicCPP();// 0x1ddc250
	function OnHitByCake();// 0x1ddc250
	function EnablePet();// 0x1ddc250
	function OnEnterStateForBp();// 0x1ddc250
	function OnLeaveStateForBp();// 0x1ddc250
	function ReceiveDestroyed();// 0x1ddc250
	function StopTurningInPlace();// 0x1ddc250
	function TurnInPlace();// 0x1ddc250
	function ExecuteUbergraph_BP_PlayerPawn();// 0x1ddc250
	function OnCakePlacement__DelegateSignature();// 0x1ddc250
	function UnequipWeaponComplete__DelegateSignature();// 0x1ddc250
	function EquipWeaponComplete__DelegateSignature();// 0x1ddc250
	BP_CharacterWeaponManager_C* BP_CharacterWeaponManager;//[Offset: 0x1e54 , Size: 4]
	SceneComponent* CameraRoot;//[Offset: 0x1e58 , Size: 4]
	BP_CustomSpringArm_C* BP_CustomSpringArm;//[Offset: 0x1e5c , Size: 4]
	BP_UAESkillManager_C* UAESkillManager;//[Offset: 0x1e60 , Size: 4]
	CharacterAnimList_Skill_C* CharacterAnimList_Skill;//[Offset: 0x1e64 , Size: 4]
	SplineComponent* PetParachuteSpline;//[Offset: 0x1e68 , Size: 4]
	PetComponent_BP_C* PetComponent_BP;//[Offset: 0x1e6c , Size: 4]
	SceneComponent* ShoulderCameraOffset;//[Offset: 0x1e70 , Size: 4]
	SpringArmComponent* ShoulderCameraSpringArm;//[Offset: 0x1e74 , Size: 4]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0x1e78 , Size: 4]
	BP_FloatingText_C* BP_FloatingText;//[Offset: 0x1e7c , Size: 4]
	CharacterAnimList_Base_C* CharacterAnimList_Base;//[Offset: 0x1e80 , Size: 4]
	StaticMeshComponent* SM_plane_04;//[Offset: 0x1e84 , Size: 4]
	StaticMeshComponent* SM_plane_03;//[Offset: 0x1e88 , Size: 4]
	StaticMeshComponent* SM_plane_02;//[Offset: 0x1e8c , Size: 4]
	CharacterAvatarComp2_BP_C* CharacterAvatarComp2_BP;//[Offset: 0x1e90 , Size: 4]
	StaticMeshComponent* ScopeStaticMesh;//[Offset: 0x1e94 , Size: 4]
	HoldComponent_C* PeekHoldComp;//[Offset: 0x1e98 , Size: 4]
	HoldComponent_C* AimHoldComp;//[Offset: 0x1e9c , Size: 4]
	ObserverCameraComponent* ObserverCameraFPPMode;//[Offset: 0x1ea0 , Size: 4]
	FPPSpringArmComponent* FPPSpringArm;//[Offset: 0x1ea4 , Size: 4]
	StaticMeshComponent* SM_plane_01_smoke;//[Offset: 0x1ea8 , Size: 4]
	STScreenAppearanceComponentAdditional* STScreenAppearanceComponentAdditional;//[Offset: 0x1eac , Size: 4]
	PostProcessComponent* PostProcess;//[Offset: 0x1eb0 , Size: 4]
	FPPComponent_C* FPPComponent;//[Offset: 0x1eb4 , Size: 4]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x1eb8 , Size: 4]
	CameraComponent* ScopingCamera;//[Offset: 0x1ebc , Size: 4]
	SpringArmComponent* ScopingSpringArm;//[Offset: 0x1ec0 , Size: 4]
	CapsuleComponent* HitBox_Prone;//[Offset: 0x1ec4 , Size: 4]
	CapsuleComponent* HitBox_Stand;//[Offset: 0x1ec8 , Size: 4]
	Vault_Controller_C* Vault_Controller;//[Offset: 0x1ecc , Size: 4]
	BP_SwimController_C* BP_SwimController;//[Offset: 0x1ed0 , Size: 4]
	StaticMeshComponent* SM_plane_01;//[Offset: 0x1ed4 , Size: 4]
	BP_AutoAimingComponent_C* BP_AutoAimingComponent;//[Offset: 0x1ed8 , Size: 4]
	PickupManagerComponent* PickupManager;//[Offset: 0x1edc , Size: 4]
	CameraSettingComponent_C* CameraSettingComponent;//[Offset: 0x1ee0 , Size: 4]
	StaticMeshComponent* Scope;//[Offset: 0x1ee4 , Size: 4]
	CameraComponent* Camera;//[Offset: 0x1ee8 , Size: 4]
	float ScopeTimeline_NewTrack_1_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x1eec , Size: 4]
	byte ScopeTimeline__Direction_FBCE53A7433799FDD4E08AA77C9DCE27;//[Offset: 0x1ef0 , Size: 1]
	TimelineComponent* ScopeTimeline;//[Offset: 0x1ef4 , Size: 4]
	float ParachuteCamBlend_Alpha_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x1ef8 , Size: 4]
	byte ParachuteCamBlend__Direction_A00EF93A482E11D3825F6F8F58409606;//[Offset: 0x1efc , Size: 1]
	TimelineComponent* ParachuteCamBlend;//[Offset: 0x1f00 , Size: 4]
	float LerpAlpha_LerpAlpha_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x1f04 , Size: 4]
	byte LerpAlpha__Direction_BBB653CA48682C1A42A33C890A409F07;//[Offset: 0x1f08 , Size: 1]
	TimelineComponent* LerpAlpha;//[Offset: 0x1f0c , Size: 4]
	float TurnLerpAlpha_Alpha_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x1f10 , Size: 4]
	byte TurnLerpAlpha__Direction_E6EF8561406981075B2088A2D4185EA5;//[Offset: 0x1f14 , Size: 1]
	TimelineComponent* TurnLerpAlpha;//[Offset: 0x1f18 , Size: 4]
	MaterialInstanceDynamic* DamageSphereDMI;//[Offset: 0x1f1c , Size: 4]
	bool bCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f20 , Size: 1]
	bool IsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f21 , Size: 1]
	float ReloadingCDMax;//[Offset: 0x1f24 , Size: 4]
	Vector LastInAirVelocityVector;//[Offset: 0x1f28 , Size: 12]
	Vector VelocityVector;//[Offset: 0x1f34 , Size: 12]
	float Speed;//[Offset: 0x1f40 , Size: 4]
	bool Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f44 , Size: 1]
	Rotator LastVelocityRotation;//[Offset: 0x1f48 , Size: 12]
	Rotator TurnInPlaceRotation;//[Offset: 0x1f54 , Size: 12]
	Rotator TurnInPlaceStart;//[Offset: 0x1f60 , Size: 12]
	Rotator TurnInPlaceTarget;//[Offset: 0x1f6c , Size: 12]
	bool TurningInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f78 , Size: 1]
	byte LocomotionState;//[Offset: 0x1f79 , Size: 1]
	bool Jumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f7a , Size: 1]
	float ProneCameraHeight;//[Offset: 0x1f7c , Size: 4]
	float CameraMoveSpeed;//[Offset: 0x1f80 , Size: 4]
	bool UseFirstPersonPerspective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f84 , Size: 1]
	float MeleeAttackRange;//[Offset: 0x1f88 , Size: 4]
	Vector Melee Attack Location;//[Offset: 0x1f8c , Size: 12]
	float MeleeAttackDamage;//[Offset: 0x1f98 , Size: 4]
	byte CurCameraMode;//[Offset: 0x1f9c , Size: 1]
	STR_CameraSetting StandCameraSetting;//[Offset: 0x1fa0 , Size: 20]
	Rotator TerreneNormal;//[Offset: 0x1fb4 , Size: 12]
	Vector Normal;//[Offset: 0x1fc0 , Size: 12]
	PickUpWrapperActor* PickUpTarget;//[Offset: 0x1fcc , Size: 4]
	bool bIsPicking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fd0 , Size: 1]
	delegate EquipWeaponComplete;//[Offset: 0x1fd4 , Size: 12]
	delegate UnequipWeaponComplete;//[Offset: 0x1fe0 , Size: 12]
	float CrouchCameraHeight;//[Offset: 0x1fec , Size: 4]
	float PickupDelayTime;//[Offset: 0x1ff0 , Size: 4]
	float DefaultCapsuleRadius;//[Offset: 0x1ff4 , Size: 4]
	SkeletalMeshComponent* ParachuteComponent;//[Offset: 0x1ff8 , Size: 4]
	float SwimCameraHeight;//[Offset: 0x1ffc , Size: 4]
	float SwimTargetRoll;//[Offset: 0x2000 , Size: 4]
	float SwimUpRateFix;//[Offset: 0x2004 , Size: 4]
	float SwimRotateSpeed;//[Offset: 0x2008 , Size: 4]
	<byte,FString> GrenadeToSlotIndexDict;//[Offset: 0x200c , Size: 60]
	bool VaultEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2048 , Size: 1]
	ItemDefineID putoffItem;//[Offset: 0x2050 , Size: 24]
	BattleItemAdditionalData[] AdditionalData;//[Offset: 0x2068 , Size: 12]
	bool autoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2074 , Size: 1]
	SpringArmComponent[] SpringArms;//[Offset: 0x2078 , Size: 12]
	CameraComponent[] Cameras;//[Offset: 0x2084 , Size: 12]
	SpringArmComponent* CurActiveSpringArm;//[Offset: 0x2090 , Size: 4]
	bool UseTurniinPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2094 , Size: 1]
	<int,FName> GrenadeIDToNameDict;//[Offset: 0x2098 , Size: 60]
	int[] GrenadeIDsOrder;//[Offset: 0x20d4 , Size: 12]
	float ElapseTime;//[Offset: 0x20e0 , Size: 4]
	float SwimRotateX;//[Offset: 0x20e4 , Size: 4]
	SpringArmComponent* NewVar;//[Offset: 0x20e8 , Size: 4]
	byte CurPoseState;//[Offset: 0x20ec , Size: 1]
	<int,BackpackEmoteHandle> EmoteBPIDToAnimHandleMap;//[Offset: 0x20f0 , Size: 60]
	ParticleSystem* DecentBloodSpot;//[Offset: 0x212c , Size: 4]
	ParticleSystem* BloodSpot_Red;//[Offset: 0x2130 , Size: 4]
	ParticleSystem* BloodSpot_Green;//[Offset: 0x2134 , Size: 4]
	BP_WateringArea_C* MiniTreeRef;//[Offset: 0x2138 , Size: 4]
	enum[] DisallowedWateringStates;//[Offset: 0x213c , Size: 12]
	delegate OnCakePlacement;//[Offset: 0x2148 , Size: 12]

--------------------------------
Class: BP_CharacterWeaponManager_C.CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object

--------------------------------
Class: BP_CustomSpringArm_C.CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BP_UAESkillManager_C.UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object

--------------------------------
Class: UAESkillManagerComponent.UTSkillManagerComponent.ActorComponent.Object
	UTSkillEntryConfig[] SkillEntryConfigs;//[Offset: 0x1d4 , Size: 12]
	FString SkillTableName;//[Offset: 0x1e0 , Size: 12]
	FString SkillBuffTableName;//[Offset: 0x1ec , Size: 12]
	FString PropSkillMapTableName;//[Offset: 0x1f8 , Size: 12]
	function TriggerEvent();// 0x158f928
	function TriggerCurSkillEvent();// 0x158f8a8
	function ServerTriggerCurSkillEvent();// 0x158f7f4
	function GetSkillIconBySkillID();// 0x158f6ec
	function GetSkillByEntry();// 0x158f664
	function GetPropMappedSkillID();// 0x158f5a0
	function GetPropMappedRow();// 0x158f3c8
	function GetPropMappedAuxSkillID();// 0x158f304
	function CheckPropSkillFilterGun();// 0x158f1fc

--------------------------------
Class: UTSkillEntryConfig
	enum Entry;//[Offset: 0x0 , Size: 1]
	int SkillIndex;//[Offset: 0x4 , Size: 4]
	FString Interrupts;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: CharacterAnimList_Skill_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x508 , Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x558 , Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x56c , Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x580 , Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x594 , Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8 , Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x5ac , Size: 4]
	float Duration;//[Offset: 0x5b0 , Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b4 , Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b5 , Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b6 , Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b7 , Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8 , Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9 , Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ba , Size: 1]
	float LoopPosition;//[Offset: 0x5bc , Size: 4]
	Vector DefaultUpVector;//[Offset: 0x5c0 , Size: 12]
	function UpdateSpline();// 0x3602ca4
	function SetWorldLocationAtSplinePoint();// 0x3602bd0
	function SetUpVectorAtSplinePoint();// 0x3602a70
	function SetUnselectedSplineSegmentColor();// 0x36022c8
	function SetTangentsAtSplinePoint();// 0x36028bc
	function SetTangentAtSplinePoint();// 0x360275c
	function SetSplineWorldPoints();// 0x3602688
	function SetSplinePointType();// 0x3602580
	function SetSplinePoints();// 0x3602420
	function SetSplineLocalPoints();// 0x360234c
	function SetSelectedSplineSegmentColor();// 0x36022c8
	function SetLocationAtSplinePoint();// 0x3602168
	function SetDrawDebug();// 0x36020e8
	function SetDefaultUpVector();// 0x360201c
	function SetClosedLoopAtPosition();// 0x3601f08
	function SetClosedLoop();// 0x3601e38
	function RemoveSplinePoint();// 0x3601d74
	function IsClosedLoop();// 0x3601d4c
	function GetWorldTangentAtDistanceAlongSpline();// 0x3601cb8
	function GetWorldRotationAtTime();// 0x3601bd4
	function GetWorldRotationAtDistanceAlongSpline();// 0x3601b40
	function GetWorldLocationAtTime();// 0x3601a5c
	function GetWorldLocationAtSplinePoint();// 0x36019c8
	function GetWorldLocationAtDistanceAlongSpline();// 0x3601934
	function GetWorldDirectionAtTime();// 0x3601850
	function GetWorldDirectionAtDistanceAlongSpline();// 0x36017bc
	function GetUpVectorAtTime();// 0x3601698
	function GetUpVectorAtSplinePoint();// 0x36015c4
	function GetUpVectorAtDistanceAlongSpline();// 0x36014f0
	function GetTransformAtTime();// 0x360133c
	function GetTransformAtSplinePoint();// 0x36011d8
	function GetTransformAtDistanceAlongSpline();// 0x3601074
	function GetTangentAtTime();// 0x3600f50
	function GetTangentAtSplinePoint();// 0x35ffd54
	function GetTangentAtDistanceAlongSpline();// 0x3600e7c
	function GetSplinePointType();// 0x3600dfc
	function GetSplineLength();// 0x3600dd4
	function GetScaleAtTime();// 0x3600cf8
	function GetScaleAtSplinePoint();// 0x3600c68
	function GetScaleAtDistanceAlongSpline();// 0x3600bd8
	function GetRotationAtTime();// 0x3600ab4
	function GetRotationAtSplinePoint();// 0x36009e0
	function GetRotationAtDistanceAlongSpline();// 0x360090c
	function GetRollAtTime();// 0x36007fc
	function GetRollAtSplinePoint();// 0x3600738
	function GetRollAtDistanceAlongSpline();// 0x3600674
	function GetRightVectorAtTime();// 0x3600550
	function GetRightVectorAtSplinePoint();// 0x360047c
	function GetRightVectorAtDistanceAlongSpline();// 0x36003a8
	function GetNumberOfSplinePoints();// 0x3600380
	function GetLocationAtTime();// 0x360025c
	function GetLocationAtSplinePoint();// 0x3600188
	function GetLocationAtDistanceAlongSpline();// 0x36000b4
	function GetLocationAndTangentAtSplinePoint();// 0x35fff4c
	function GetLocalLocationAndTangentAtSplinePoint();// 0x35ffe28
	function GetLeaveTangentAtSplinePoint();// 0x35ffd54
	function GetInputKeyAtDistanceAlongSpline();// 0x35ffcd4
	function GetDistanceAlongSplineAtSplinePoint();// 0x35ffc54
	function GetDirectionAtTime();// 0x35ffb30
	function GetDirectionAtSplinePoint();// 0x35ffa5c
	function GetDirectionAtDistanceAlongSpline();// 0x35ff988
	function GetDefaultUpVector();// 0x35ff8f8
	function GetArriveTangentAtSplinePoint();// 0x35ff824
	function FindUpVectorClosestToWorldLocation();// 0x35ff740
	function FindTransformClosestToWorldLocation();// 0x35ff5cc
	function FindTangentClosestToWorldLocation();// 0x35ff4e8
	function FindScaleClosestToWorldLocation();// 0x35ff44c
	function FindRotationClosestToWorldLocation();// 0x35ff368
	function FindRollClosestToWorldLocation();// 0x35ff294
	function FindRightVectorClosestToWorldLocation();// 0x35ff1b0
	function FindLocationClosestToWorldLocation();// 0x35ff0cc
	function FindInputKeyClosestToWorldLocation();// 0x35ff040
	function FindDirectionClosestToWorldLocation();// 0x35fef5c
	function ClearSplinePoints();// 0x35feedc
	function AddSplineWorldPoint();// 0x35fee50
	function AddSplinePointAtIndex();// 0x35fecf0
	function AddSplinePoint();// 0x35febd8
	function AddSplineLocalPoint();// 0x35feb4c
	function AddPoints();// 0x35fea30
	function AddPoint();// 0x35fe928

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0 , Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14 , Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28 , Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c , Size: 20]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0 , Size: 4]
	Quat OutVal;//[Offset: 0x10 , Size: 16]
	Quat ArriveTangent;//[Offset: 0x20 , Size: 16]
	Quat LeaveTangent;//[Offset: 0x30 , Size: 16]
	byte InterpMode;//[Offset: 0x40 , Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0 , Size: 4]
	float OutVal;//[Offset: 0x4 , Size: 4]
	float ArriveTangent;//[Offset: 0x8 , Size: 4]
	float LeaveTangent;//[Offset: 0xc , Size: 4]
	byte InterpMode;//[Offset: 0x10 , Size: 1]

--------------------------------
Class: PetComponent_BP_C.STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x240 , Size: 4]
	function IsFppMode();// 0x1ddc250
	function GetPetOwnerPlayerPawn();// 0x1ddc250
	function GetPetPawn();// 0x1ddc250
	function SetPetPawn();// 0x1ddc250
	function SetPetOwnerPlayerPawn();// 0x1ddc250
	function ResetAttachTrans();// 0x1ddc250
	function SpawnPetWithInfo();// 0x1ddc250
	function SpawnPet();// 0x1ddc250
	function RemovePet();// 0x1ddc250
	function PlayerStateChange();// 0x1ddc250
	function OnOwnerPlayerPossessed();// 0x1ddc250
	function OnOwnerDetachedVehicle();// 0x1ddc250
	function OnRep_PetPawn();// 0x1ddc250
	function OnRep_PetOwnerPlayerPawn();// 0x1ddc250
	function ExecuteUbergraph_PetComponent_BP();// 0x1ddc250
	class BasePetCharacter_BP_C* SpawnPetClass;//[Offset: 0x244 , Size: 4]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x248 , Size: 24]

--------------------------------
Class: STExtraFightPetComponent.STExtraPetComponent.SceneComponent.ActorComponent.Object
	STExtraBaseCharacter* PetOwnerPlayerPawn;//[Offset: 0x238 , Size: 4]
	STExtraPetCharacter* PetPawn;//[Offset: 0x23c , Size: 4]
	function OnRep_PetPawn();// 0x1ddc250
	function OnRep_PetOwnerPlayerPawn();// 0x1ddc250

--------------------------------
Class: STExtraPetComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: BasePetCharacter_BP_C.STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x890 , Size: 4]
	function OnPetOwnerFallingModeChange();// 0x1ddc250
	function StopCurMontage();// 0x1ddc250
	function ChangeToDefaultAttachInfo();// 0x1ddc250
	function OnDelayLeaveDisappear();// 0x1ddc250
	function OnPetLeaveState();// 0x1ddc250
	function OnPetEnterState();// 0x1ddc250
	function OnPetAppearAnimEnd();// 0x1ddc250
	function OnPetDisappearStateChange();// 0x1ddc250
	function GetPetParachuteEquipments();// 0x1ddc250
	function HandlePetStopParachute();// 0x1ddc250
	function HandlePetStartParachute();// 0x1ddc250
	function DetachFromOwnerPlayer();// 0x1ddc250
	function InitPetAvatar();// 0x1ddc250
	function SetPetFollowType();// 0x1ddc250
	function PetHasDisappearState();// 0x1ddc250
	function OnPetFlyAroundStateChange();// 0x1ddc250
	function OnPetFollowStateChange();// 0x1ddc250
	function UpdateAttachInfoByOwnerDefaultAvatar();// 0x1ddc250
	function ResetAttachInfo();// 0x1ddc250
	function GetPetInfo();// 0x1ddc250
	function GetPetEntity();// 0x1ddc250
	function DisableUnuseComponent();// 0x1ddc250
	function CalcInAirAttackArea();// 0x1ddc250
	function OnAirAttackOver();// 0x1ddc250
	function OnAirAttackWarning();// 0x1ddc250
	function SelfPetVisibleSettingChanged();// 0x1ddc250
	function OtherPetVisibleSettingChanged();// 0x1ddc250
	function PetOtherVisibleSetting();// 0x1ddc250
	function PetSelfVisibleSetting();// 0x1ddc250
	function GetPetDefaultFollowType();// 0x1ddc250
	function DrawPetDebugInfo();// 0x1ddc250
	function OnRep_AttachToOwner();// 0x1ddc250
	function AttachToOwnerPlayer();// 0x1ddc250
	function PetOwnerStopEmote();// 0x1ddc250
	function PetOwnerPlayEmote();// 0x1ddc250
	function AnimIdIsValid();// 0x1ddc250
	function GetPetRspInfoWithPlayerEmoteId();// 0x1ddc250
	function GetPetAnimLimitePlayerState();// 0x1ddc250
	function GetPetUnlockAnimIds();// 0x1ddc250
	function GetPetOwnerCharacter();// 0x1ddc250
	function GetPetAttachInfo();// 0x1ddc250
	function GetPetEventManager();// 0x1ddc250
	function SetOwnerCharacterPC();// 0x1ddc250
	function GetOwnerCharacter();// 0x1ddc250
	function SetOwnerCharacter();// 0x1ddc250
	function GetFollowPos();// 0x1ddc250
	function UserConstructionScript();// 0x1ddc250
	function Timeline_0__FinishedFunc();// 0x1ddc250
	function Timeline_0__UpdateFunc();// 0x1ddc250
	function BndEvt__PetEventManager_K2Node_ComponentBoundEvent_0_PetEventDelegate__DelegateSignature();// 0x1ddc250
	function PlayerStateChange();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function PetOwnerCharacterBecomeValid();// 0x1ddc250
	function UpdateSplineInfo();// 0x1ddc250
	function OnPlayerExitParachute();// 0x1ddc250
	function PetStopParchute();// 0x1ddc250
	function PetStartParachute();// 0x1ddc250
	function BindEvent();// 0x1ddc250
	function OnPetStateChangeEvent();// 0x1ddc250
	function OnPetMontageEvent();// 0x1ddc250
	function OnAsyncLoadPetAnimRes();// 0x1ddc250
	function SetPetVisibility();// 0x1ddc250
	function OnOwnerWinEvent();// 0x1ddc250
	function OnOwnerKillSomeone();// 0x1ddc250
	function OnOwnerAssistKill();// 0x1ddc250
	function OnMoveVoiceAround();// 0x1ddc250
	function OnShotVoiceAround();// 0x1ddc250
	function TriggerPetEvent();// 0x1ddc250
	function OnAirAttackEvent();// 0x1ddc250
	function NotifyBpDrawDebugLineChange();// 0x1ddc250
	function DebugLineTimerEvent();// 0x1ddc250
	function OnPetOwnerStateInterruptEvent();// 0x1ddc250
	function OnOwnerAvatarEquipped();// 0x1ddc250
	function PetEnterPlane();// 0x1ddc250
	function OnPetOwnerFallingModeChangeEvent();// 0x1ddc250
	function OnOwnerPerspectiveChanged();// 0x1ddc250
	function ExecuteUbergraph_BasePetCharacter_BP();// 0x1ddc250
	function PetOwnerStateChangeDispatcher__DelegateSignature();// 0x1ddc250
	PetAvatarComponent_BP_C* PetAvatarComponent_BP;//[Offset: 0x894 , Size: 4]
	STBuffSystemComponent* STBuffSystem;//[Offset: 0x898 , Size: 4]
	PetEntityComponent_BP_C* PetEntity;//[Offset: 0x89c , Size: 4]
	PetEventManagerComponent* PetEventManager;//[Offset: 0x8a0 , Size: 4]
	float Timeline_0_Track_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0x8a4 , Size: 4]
	byte Timeline_0__Direction_CE2094E94B1D206C7858FC99724BAEFA;//[Offset: 0x8a8 , Size: 1]
	TimelineComponent* Timeline;//[Offset: 0x8ac , Size: 4]
	STExtraPlayerController* OwnerCharacterController;//[Offset: 0x8b0 , Size: 4]
	delegate PetOwnerStateChangeDispatcher;//[Offset: 0x8b4 , Size: 12]
	int[] UnlockAnimIds;//[Offset: 0x8c0 , Size: 12]
	bool AttachToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8cc , Size: 1]
	SplineComponent* PetParachuteSpline;//[Offset: 0x8d0 , Size: 4]
	SplineMeshComponent* ParachuteSpline;//[Offset: 0x8d4 , Size: 4]
	bool VisibilityToSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8 , Size: 1]
	TimerHandle CheckAirAttackTimer;//[Offset: 0x8e0 , Size: 8]
	Vector CurAttackArea;//[Offset: 0x8e8 , Size: 12]
	bool IsInAttackArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f4 , Size: 1]
	TimerHandle DebugLineTimer;//[Offset: 0x8f8 , Size: 8]
	bool IsPlayingAppearAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x900 , Size: 1]
	float PetAppearTime;//[Offset: 0x904 , Size: 4]
	float PetDelayLeaveDisappearTime;//[Offset: 0x908 , Size: 4]
	TimerHandle PetDelayLeaveDisappearTimer;//[Offset: 0x910 , Size: 8]
	bool HasResetAttachByAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918 , Size: 1]
	enum TPlayerState;//[Offset: 0x919 , Size: 1]
	byte TChangeType;//[Offset: 0x91a , Size: 1]

--------------------------------
Class: STExtraFightPetCharacter.STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool bEnablePetReplicatedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86c , Size: 1]
	bool bEnableTraceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86d , Size: 1]
	float DefaultTraceDeltaTime;//[Offset: 0x870 , Size: 4]
	float TraceLength;//[Offset: 0x874 , Size: 4]
	float CurrentTraceDeltaTime;//[Offset: 0x878 , Size: 4]
	byte[] TraceTypeConfig;//[Offset: 0x87c , Size: 12]
	SimulateSyncSmoothComponent* PetSimulateSyncSmooth;//[Offset: 0x888 , Size: 4]
	function TraceForward();// 0x15087a4
	function GetSyncSmoothComponent();// 0x150877c

--------------------------------
Class: STExtraPetCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	bool[] PetStateList;//[Offset: 0x7ec , Size: 12]
	bool[] ClientDiffPetStateList;//[Offset: 0x7f8 , Size: 12]
	float MovementTickInterval;//[Offset: 0x804 , Size: 4]
	int PetStateNum;//[Offset: 0x808 , Size: 4]
	int RelevantCloseTime;//[Offset: 0x80c , Size: 4]
	PetVisibilityInfo PetVisibilityInfo;//[Offset: 0x810 , Size: 8]
	PetLevelInfo PetLevelInfo;//[Offset: 0x818 , Size: 8]
	bool PetDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820 , Size: 1]
	STExtraBaseCharacter* PetOwnerPlayerCharacter;//[Offset: 0x824 , Size: 4]
	byte PetRelevantType;//[Offset: 0x828 , Size: 1]
	byte CurPetState;//[Offset: 0x829 , Size: 1]
	delegate OnPetStateChangeDelegate;//[Offset: 0x82c , Size: 12]
	delegate OnPetCurExecuteEventDelegate;//[Offset: 0x838 , Size: 12]
	delegate OnPetMontageDelegate;//[Offset: 0x844 , Size: 12]
	PetEventItem* CurExecuteEvent;//[Offset: 0x850 , Size: 4]
	PetMontageData PetCurMontage;//[Offset: 0x854 , Size: 8]
	function TriggerPetEvent();// 0x1ddc250
	function SetPetVisibility();// 0x1ddc250
	function SetPetMontage();// 0x15214ec
	function SetCurExecuteEvent();// 0x1521474
	function PetOwnerIsAutonomous();// 0x152144c
	function PetOwnerCharacterBecomeValid();// 0x1ddc250
	function PetLeaveState();// 0x15213d4
	function PetHasState();// 0x1521354
	function PetEnterState();// 0x15212d4
	function OnRep_PetVisibilityInfo();// 0x15212c0
	function OnRep_PetStateList();// 0x15212ac
	function OnRep_PetStateChange();// 0x139c4bc
	function OnRep_PetOwnerCharacter();// 0x1521298
	function OnRep_PetCurMontageChange();// 0x1521284
	function OnRep_CurExecuteEvent();// 0x1521270
	function OnRep_AttachmentReplication();// 0x1475b04
	function OnOwnerAvatarEquipped();// 0x152115c
	function NotifyBpDrawDebugLineChange();// 0x1ddc250
	function IsAnimLimited();// 0x15210d4
	function GetPetUnlockAnimIds();// 0x1ddc250
	function GetPetOwnerCharacter();// 0x1ddc250
	function GetPetAnimLimitePlayerState();// 0x1ddc250
	function ClientPredictEnterState();// 0x1521054
	function BroadcastPetLeaveDisappear();// 0x1521038
	function BindDelegateInCpp();// 0x152101c

--------------------------------
Class: PetAvatarComponent_BP_C.PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	function PetHasEquippedItem();// 0x1ddc250
	function PetUnequipItemById();// 0x1ddc250
	function PetEquipItemById();// 0x1ddc250
	function MakeAvatarTableData();// 0x1ddc250

--------------------------------
Class: PetAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	function InitMasterComponent();// 0x146dc14
	function Initialize();// 0x13f3aec
	function InitialAvatarParam();// 0x139c4bc

--------------------------------
Class: PetVisibilityInfo
	bool visible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float Time;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PetLevelInfo
	int PetId;//[Offset: 0x0 , Size: 4]
	int PetLevel;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PetEntityComponent_BP_C.PetEntityComponent.ActorComponent.Object
	function GetAttachInfoFromTable();// 0x1ddc250

--------------------------------
Class: PetEntityComponent.ActorComponent.Object
	STExtraPetCharacter* PetCharacter;//[Offset: 0xbc , Size: 4]
	PetAttachInfo AttachInfo;//[Offset: 0xc0 , Size: 32]
	PetAttachInfo FollowAttachInfo;//[Offset: 0xe0 , Size: 32]
	PetAttachInfo FlyAroundAttachInfo;//[Offset: 0x100 , Size: 32]
	PetAttachInfo CurAttachInfo;//[Offset: 0x120 , Size: 32]
	FixPetAttachInfo[] FixAttachInfoList;//[Offset: 0x140 , Size: 12]
	byte FollowType;//[Offset: 0x14c , Size: 1]
	int[] ParachuteEquipItems;//[Offset: 0x150 , Size: 12]
	enum[] PredictOwnerStates;//[Offset: 0x15c , Size: 12]
	function UpdateAttachInfoList();// 0x1470c00
	function OnPetStateChanged();// 0x1470b34
	function GetPetCharacter();// 0x1470b0c
	function GetCurrentAttachInfo();// 0x1470ac0
	function GetAttachInfoFromTable();// 0x1ddc250

--------------------------------
Class: PetAttachInfo
	FName AttachSocketName;//[Offset: 0x0 , Size: 8]
	Vector AttachOffset;//[Offset: 0x8 , Size: 12]
	Rotator AttachRotation;//[Offset: 0x14 , Size: 12]

--------------------------------
Class: FixPetAttachInfo
	int ItemID;//[Offset: 0x0 , Size: 4]
	int PetId;//[Offset: 0x4 , Size: 4]
	int Priority;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xbc , Size: 56]
	RepSnapshot Snapshot;//[Offset: 0xf4 , Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x12c , Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x130 , Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x134 , Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x138 , Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x13c , Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x140 , Size: 4]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x144 , Size: 212]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218 , Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219 , Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a , Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x21c , Size: 12]
	function TeleportNextSync();// 0x14aa444
	function StopPredict();// 0x14aa430
	function SetVelocity();// 0x14aa3ac
	function SetAngularVelocity();// 0x14aa2ac
	function OnRep_Snapshot();// 0x14aa298
	function GetVelocity();// 0x14aa250

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0 , Size: 4]
	Vector_NetQuantize Location;//[Offset: 0x4 , Size: 12]
	Rotator Rotation;//[Offset: 0x10 , Size: 12]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c , Size: 12]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28 , Size: 12]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0 , Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x4 , Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x8 , Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0xc , Size: 4]

--------------------------------
Class: PetEventManagerComponent.ActorComponent.Object
	PetWaitEventInfo[] WaitEventList;//[Offset: 0xbc , Size: 12]
	PetEventItemIns[] EventConfigs;//[Offset: 0xc8 , Size: 12]
	BehaviorTree* DefaultBT;//[Offset: 0xd4 , Size: 4]
	BehaviorTree* CurrentBT;//[Offset: 0xd8 , Size: 4]
	STExtraPetController* PetController;//[Offset: 0xdc , Size: 4]
	STExtraPetCharacter* PetCharacter;//[Offset: 0xe0 , Size: 4]
	PetEventItem* CurExecuteEvent;//[Offset: 0xe4 , Size: 4]
	int MaxWaitEventNum;//[Offset: 0xe8 , Size: 4]
	delegate OnPetEventDelegate;//[Offset: 0xec , Size: 12]
	function TriggerPetEvent();// 0x147293c
	function StartEventExecTimer();// 0x14728c4
	function ProcessWaitEvent();// 0x147284c
	function GetPredictPetOwnerState();// 0x1472718
	function GetEventItem();// 0x1472698
	function EnqueueWaitEvent();// 0x1472620
	function DequeueWaitEvent();// 0x14725a0
	function CheckCanInterruptCurEvent();// 0x1472520
	function CanResponseEvent();// 0x14724f8

--------------------------------
Class: PetWaitEventInfo.Object
	byte EventType;//[Offset: 0x1c , Size: 1]
	float EventMaxWaitTime;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PetEventItemIns
	FString Tips;//[Offset: 0x0 , Size: 12]
	PetEventItem* EventItem;//[Offset: 0xc , Size: 4]

--------------------------------
Class: PetEventItem.Object
	byte EventType;//[Offset: 0x1c , Size: 1]
	int EventPriority;//[Offset: 0x20 , Size: 4]
	float EventExecTime;//[Offset: 0x24 , Size: 4]
	float EventMaxWaitTime;//[Offset: 0x28 , Size: 4]
	bool NotEnterWaitList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]
	byte EnterPetState;//[Offset: 0x2d , Size: 1]
	byte LeavePetState;//[Offset: 0x2e , Size: 1]
	BehaviorTree* BehaviorTree;//[Offset: 0x30 , Size: 4]
	int AnimationAssetId;//[Offset: 0x34 , Size: 4]
	PetMontageConfig[] MontageList;//[Offset: 0x38 , Size: 12]
	PetMontageConfig[] UnlockMontageList;//[Offset: 0x44 , Size: 12]
	PetMontageConfig[] RealPlayMontageList;//[Offset: 0x50 , Size: 12]
	bool bIgnoreUnlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	bool bCanInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d , Size: 1]
	delegate OnPetEventStartDelegate;//[Offset: 0x60 , Size: 12]
	delegate OnPetEventEndDelegate;//[Offset: 0x6c , Size: 12]
	STExtraPetCharacter* PetCharacter;//[Offset: 0x78 , Size: 4]
	function UpdateCanPlayMontageList();// 0x1471288
	function SelectRandomMontage();// 0x147126c
	function OnEventStart();// 0x139ff6c
	function OnEventEnd();// 0x1471250
	function IsSameEvent();// 0x14711c8

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c , Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20 , Size: 4]
	BTDecorator[] RootDecorators;//[Offset: 0x24 , Size: 12]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x30 , Size: 12]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x3c , Size: 12]
	BTService[] Services;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20 , Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c , Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0 , Size: 4]
	BTTaskNode* ChildTask;//[Offset: 0x4 , Size: 4]
	BTDecorator[] Decorators;//[Offset: 0x8 , Size: 12]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x14 , Size: 12]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService[] Services;//[Offset: 0x3c , Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x3c , Size: 4]
	float RandomDeviation;//[Offset: 0x40 , Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c , Size: 1]
	byte FlowAbortMode;//[Offset: 0x3d , Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0 , Size: 1]
	uint16 Number;//[Offset: 0x2 , Size: 2]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20 , Size: 4]
	BlackboardEntry[] Keys;//[Offset: 0x24 , Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0 , Size: 8]
	BlackboardKeyType* KeyType;//[Offset: 0x8 , Size: 4]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: PetMontageConfig
	int AnimationAssetId;//[Offset: 0x0 , Size: 4]
	int Weight;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STExtraPetController.AIController.Controller.Actor.Object
	function ChangeBehaviorTree();// 0x1521f64

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c , Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c , Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c , Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x32c , Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x32c , Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x32c , Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x330 , Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x334 , Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x338 , Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x33c , Size: 4]
	BlackboardComponent* Blackboard;//[Offset: 0x340 , Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x344 , Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x348 , Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x34c , Size: 12]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359 , Size: 1]
	function UseBlackboard();// 0x2977eec
	function UnclaimTaskResource();// 0x2977e74
	function SetMoveBlockDetection();// 0x2977df4
	function RunBehaviorTree();// 0x2977d6c
	function OnUsingBlackBoard();// 0x1ddc250
	function OnUnpossess();// 0x1ddc250
	function OnPossess();// 0x1ddc250
	function OnGameplayTaskResourcesClaimed();// 0x2977ca8
	function MoveToLocation();// 0x2977a00
	function MoveToActor();// 0x29777b8
	function K2_SetFocus();// 0x2977740
	function K2_SetFocalPoint();// 0x29776d0
	function K2_ClearFocus();// 0x29776bc
	function HasPartialPath();// 0x2977694
	function GetPathFollowingComponent();// 0x2977678
	function GetMoveStatus();// 0x2977650
	function GetImmediateMoveDestination();// 0x2977608
	function GetFocusActor();// 0x29775e0
	function GetFocalPointOnActor();// 0x2977548
	function GetFocalPoint();// 0x2977500
	function GetAIPerceptionComponent();// 0x2554400
	function ClaimTaskResource();// 0x2977488

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0x100 , Size: 4]
	NavigationData* MyNavData;//[Offset: 0x10c , Size: 4]
	function OnNavDataRegistered();// 0x299696c
	function OnActorBump();// 0x29967fc
	function GetPathDestination();// 0x29967b4
	function GetPathActionType();// 0x299678c

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0 , Size: 4]
	AIController* AIOwner;//[Offset: 0xc4 , Size: 4]
	function StopLogic();// 0x2984bf4
	function RestartLogic();// 0x1395678
	function IsRunning();// 0x2984bc4
	function IsPaused();// 0x2984b94

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xbc , Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0 , Size: 4]
	BlackboardKeyType[] KeyInstances;//[Offset: 0xdc , Size: 12]
	function SetValueAsVector();// 0x2983180
	function SetValueAsString();// 0x2982fcc
	function SetValueAsRotator();// 0x2982ef8
	function SetValueAsObject();// 0x2982e24
	function SetValueAsName();// 0x2982d50
	function SetValueAsInt();// 0x2982c7c
	function SetValueAsFloat();// 0x2982ba8
	function SetValueAsEnum();// 0x2982ad4
	function SetValueAsClass();// 0x2982a00
	function SetValueAsBool();// 0x2982924
	function IsVectorValueSet();// 0x2982890
	function GetValueAsVector();// 0x29827ec
	function GetValueAsString();// 0x29826d0
	function GetValueAsRotator();// 0x298262c
	function GetValueAsObject();// 0x2982598
	function GetValueAsName();// 0x29824fc
	function GetValueAsInt();// 0x2982468
	function GetValueAsFloat();// 0x29823d4
	function GetValueAsEnum();// 0x2982340
	function GetValueAsClass();// 0x29822ac
	function GetValueAsBool();// 0x2982218
	function GetRotationFromEntry();// 0x2982130
	function GetLocationFromEntry();// 0x2982048
	function ClearValue();// 0x2981fbc

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig[] SensesConfig;//[Offset: 0xbc , Size: 12]
	class AISense* DominantSense;//[Offset: 0xc8 , Size: 4]
	AIController* AIOwner;//[Offset: 0xe0 , Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x140 , Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x14c , Size: 12]
	function SetSenseEnabled();// 0x2979d54
	function RequestStimuliListenerUpdate();// 0x2979d40
	function OnOwnerEndPlay();// 0x2979c84
	function GetPerceivedHostileActors();// 0x2979bb8
	function GetPerceivedActors();// 0x2979aa8
	function GetKnownPerceivedActors();// 0x2979998
	function GetCurrentlyPerceivedActors();// 0x2979888
	function GetActorsPerception();// 0x2979760

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x1c , Size: 4]
	float MaxAge;//[Offset: 0x20 , Size: 4]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24 , Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c , Size: 4]
	enum NotifyType;//[Offset: 0x20 , Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21 , Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21 , Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: AIPerceptionSystem.Object
	AISense[] Senses;//[Offset: 0x5c , Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68 , Size: 4]
	function ReportPerceptionEvent();// 0x297ad0c
	function ReportEvent();// 0x297ac94
	function RegisterPerceptionStimuliSource();// 0x297ab94
	function OnPerceptionStimuliSourceEndPlay();// 0x297aad8
	function GetSenseClassForStimulus();// 0x297a904

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xbc , Size: 4]
	PawnActionStack[] ActionStacks;//[Offset: 0xc0 , Size: 12]
	PawnActionEvent[] ActionEvents;//[Offset: 0xcc , Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xd8 , Size: 4]
	function K2_PushAction();// 0x299819c
	function K2_PerformAction();// 0x2998094
	function K2_ForceAbortAction();// 0x2998014
	function K2_AbortAction();// 0x2997f94

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c , Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20 , Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24 , Size: 4]
	Object* Instigator;//[Offset: 0x28 , Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c , Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50 , Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50 , Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50 , Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50 , Size: 1]
	function GetActionPriority();// 0x2997048
	function Finish();// 0x2996fc0
	function CreateActionInstance();// 0x2996f04

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	GameplayTask[] SimulatedTasks;//[Offset: 0xc0 , Size: 12]
	GameplayTask[] TaskPriorityQueue;//[Offset: 0xcc , Size: 12]
	GameplayTask[] TickingTasks;//[Offset: 0xe4 , Size: 12]
	GameplayTask[] KnownTasks;//[Offset: 0xf0 , Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x100 , Size: 12]
	function OnRep_SimulatedTasks();// 0x2897294
	function K2_RunGameplayTask();// 0x2896f20

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x20 , Size: 8]
	enum ResourceOverlapPolicy;//[Offset: 0x2a , Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x44 , Size: 4]
	function ReadyForActivation();// 0x28955a0
	function GenericGameplayTaskDelegate__DelegateSignature();// 0x1ddc250
	function EndTask();// 0x289558c

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x1c , Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28 , Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0 , Size: 4]
	float TravelCostOverride;//[Offset: 0x4 , Size: 4]
	float EnteringCostOverride;//[Offset: 0x8 , Size: 4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc , Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc , Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]

--------------------------------
Class: PetMontageData
	int AnimationAssetId;//[Offset: 0x0 , Size: 4]
	float MontageStartTime;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: BP_FloatingText_C.FloatingTextComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xd0 , Size: 4]
	function OnSetFloatingTextSetting();// 0x1ddc250
	function InitFloatingTextSetting();// 0x1ddc250
	function RecycleWidght();// 0x1ddc250
	function GetWidget();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function CreateFloatingText();// 0x1ddc250
	function ExecuteUbergraph_BP_FloatingText();// 0x1ddc250
	CurveFloat* OffsetXCurve;//[Offset: 0xd4 , Size: 4]
	int MaxWidgetNum;//[Offset: 0xd8 , Size: 4]
	FloatingText_UIBP_C[] IdleWidgetList;//[Offset: 0xdc , Size: 12]
	FloatingText_UIBP_C[] ShowWidgetList;//[Offset: 0xe8 , Size: 12]
	float[] RecycleTimeList;//[Offset: 0xf4 , Size: 12]
	float RecycleTime;//[Offset: 0x100 , Size: 4]
	bool IsEnableFloatingText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	CurveFloat* OffsetYCurve;//[Offset: 0x108 , Size: 4]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	function OnFloatingDamageText();// 0x1417c0c
	function CreateFloatingText();// 0x1ddc250
	function ClientHandleFloatingTextArray();// 0x1417b18

--------------------------------
Class: FloatingText_UIBP_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1b0 , Size: 4]
	function PlayAnim();// 0x1ddc250
	function PreConstruct();// 0x1ddc250
	function Construct();// 0x1ddc250
	function Tick();// 0x1ddc250
	function ExecuteUbergraph_FloatingText_UIBP();// 0x1ddc250
	WidgetAnimation* fade;//[Offset: 0x1b4 , Size: 4]
	SizeBox* SizeBox;//[Offset: 0x1b8 , Size: 4]
	TextBlock* Text_floating;//[Offset: 0x1bc , Size: 4]
	Vector2D Loc;//[Offset: 0x1c0 , Size: 8]
	float Count;//[Offset: 0x1c8 , Size: 4]
	Vector2D dstLoc;//[Offset: 0x1cc , Size: 8]
	BP_FloatingText_C* CmpMgr;//[Offset: 0x1d4 , Size: 4]
	Vector WorldPos;//[Offset: 0x1d8 , Size: 12]
	Vector RandomOffset;//[Offset: 0x1e4 , Size: 12]

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd9 , Size: 1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd9 , Size: 1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd9 , Size: 1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd9 , Size: 1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd9 , Size: 1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd9 , Size: 1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd9 , Size: 1]
	float WidthOverride;//[Offset: 0xdc , Size: 4]
	float HeightOverride;//[Offset: 0xe0 , Size: 4]
	float MinDesiredWidth;//[Offset: 0xe4 , Size: 4]
	float MinDesiredHeight;//[Offset: 0xe8 , Size: 4]
	float MaxDesiredWidth;//[Offset: 0xec , Size: 4]
	float MaxDesiredHeight;//[Offset: 0xf0 , Size: 4]
	float MaxAspectRatio;//[Offset: 0xf4 , Size: 4]
	function SetWidthOverride();// 0x27aad58
	function SetMinDesiredWidth();// 0x27aace0
	function SetMinDesiredHeight();// 0x27aac68
	function SetMaxDesiredWidth();// 0x27aabf0
	function SetMaxDesiredHeight();// 0x27aab78
	function SetMaxAspectRatio();// 0x27aab00
	function SetHeightOverride();// 0x27aaa88
	function ClearWidthOverride();// 0x27aaa74
	function ClearMinDesiredWidth();// 0x27aaa60
	function ClearMinDesiredHeight();// 0x27aaa4c
	function ClearMaxDesiredWidth();// 0x27aaa38
	function ClearMaxDesiredHeight();// 0x27aaa24
	function ClearMaxAspectRatio();// 0x27aaa10
	function ClearHeightOverride();// 0x27aa9fc

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	function SetContent();// 0x279b6a4
	function GetContentSlot();// 0x279b67c
	function GetContent();// 0x279b654

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf0 , Size: 12]
	delegate TextDelegate;//[Offset: 0x100 , Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x110 , Size: 28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130 , Size: 16]
	SlateFontInfo Font;//[Offset: 0x140 , Size: 64]
	Vector2D ShadowOffset;//[Offset: 0x180 , Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x188 , Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x198 , Size: 16]
	float MinDesiredWidth;//[Offset: 0x1a8 , Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac , Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad , Size: 1]
	function SetVerticalJustification();// 0x27b01dc
	function SetText();// 0x27aff2c
	function SetShadowOffset();// 0x27afebc
	function SetShadowColorAndOpacity();// 0x27afe40
	function SetOpacity();// 0x27afdc8
	function SetMinDesiredWidth();// 0x27afd50
	function SetJustification();// 0x27afcd8
	function SetFont();// 0x27af9c0
	function SetColorAndOpacity();// 0x27af6a0
	function SetAutoEllipsisText();// 0x27af614
	function GetText();// 0x27af4b8

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xcc , Size: 4]
	byte Justification;//[Offset: 0xd0 , Size: 1]
	byte VerticalJustification;//[Offset: 0xd1 , Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2 , Size: 1]
	float WrapTextAt;//[Offset: 0xd4 , Size: 4]
	enum WrappingPolicy;//[Offset: 0xd8 , Size: 1]
	Margin Margin;//[Offset: 0xdc , Size: 16]
	float LineHeightPercentage;//[Offset: 0xec , Size: 4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0 , Size: 4]
	Object* FontMaterial;//[Offset: 0x4 , Size: 4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8 , Size: 28]
	FName TypefaceFontName;//[Offset: 0x30 , Size: 8]
	int Size;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0 , Size: 4]
	Object* OutlineMaterial;//[Offset: 0x4 , Size: 4]
	LinearColor OutlineColor;//[Offset: 0x8 , Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	enum TextShapingMethod;//[Offset: 0x1 , Size: 1]
	enum TextFlowDirection;//[Offset: 0x2 , Size: 1]

--------------------------------
Class: CharacterAnimList_Base_C.UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: CharacterAvatarComp2_BP_C.CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x930 , Size: 4]
	function MakeAvatarTableData();// 0x1ddc250
	function IsNeedConsiderHairCut();// 0x1ddc250
	function GetFakeAvatarHandleItem_InDev();// 0x1ddc250
	function GenerateClientDefaultAvatar();// 0x1ddc250
	function BPClientPostProcessViewDataMiddle();// 0x1ddc250
	function ProcessGodzillaSuit();// 0x1ddc250
	function IsItemHasMutilReplaceMesh();// 0x1ddc250
	function IsUseDefaultReplaceModel();// 0x1ddc250
	function GetFakeAvatarHandleItem();// 0x1ddc250
	function CheckAvatarWhoHideWho();// 0x1ddc250
	function PutOnCustomEquipmentByID();// 0x1ddc250
	function SetEquipmentPattern();// 0x1ddc250
	function SetEquipmentColor();// 0x1ddc250
	function CreateAvatarItemPattern();// 0x1ddc250
	function CreateAvatarItemColor();// 0x1ddc250
	function GetEquipmentSkinItemID();// 0x1ddc250
	function Bp_ProcessAvatarLogicUnequipped();// 0x1ddc250
	function Bp_ProcessAvatarLogicEquipped();// 0x1ddc250
	function GetCharSkinMaterial();// 0x1ddc250
	function PutOnDefaultEquipment();// 0x1ddc250
	function InitBodyMeshByHead();// 0x1ddc250
	function PutOffEquimentByResID();// 0x1ddc250
	function PutOnEquipmentByResID();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function Bp_EventAvatarLogicEquipped();// 0x1ddc250
	function Bp_EventAvatarLogicUnequipped();// 0x1ddc250
	function ExecuteUbergraph_CharacterAvatarComp2_BP();// 0x1ddc250
	BackpackAvatarItemColor* BasedAvatarColorHandle;//[Offset: 0x934 , Size: 4]
	BackpackAvatarItemPattern* BasedAvatarPatternHandle;//[Offset: 0x938 , Size: 4]
	<byte,StructAvatarSlotNameConfig> SlotNameMap;//[Offset: 0x93c , Size: 60]
	StructAvatarSlotNameConfig DefaultSlotNameMap;//[Offset: 0x978 , Size: 120]

--------------------------------
Class: StructAvatarSlotNameConfig
	<enum,FString> MaleSlotName_18_7FE1681B41EEB7EBCDE882913B2F14FA;//[Offset: 0x0 , Size: 60]
	<enum,FString> FemaleSlotName_19_D3A83E3D4F5ACA7D24D195B573FB01B1;//[Offset: 0x3c , Size: 60]

--------------------------------
Class: HoldComponent_C.ActorComponent.Object
	function HoldTime();// 0x1ddc250
	function Release();// 0x1ddc250
	function Push();// 0x1ddc250
	function HoldAndRelease__DelegateSignature();// 0x1ddc250
	delegate HoldAndRelease;//[Offset: 0xc0 , Size: 12]
	float HoldTimeThreshold;//[Offset: 0xcc , Size: 4]
	int HoldFingerIndex;//[Offset: 0xd0 , Size: 4]
	byte HoldMode;//[Offset: 0xd4 , Size: 1]
	float PushTime;//[Offset: 0xd8 , Size: 4]
	bool isPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc , Size: 1]

--------------------------------
Class: ObserverCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x780 , Size: 4]
	float FreeCameraOffsetRadius;//[Offset: 0x7a0 , Size: 4]
	<byte,float> FreeCameraOffsetRadiusMap;//[Offset: 0x7a4 , Size: 60]
	bool DrawDebugGraphics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0 , Size: 1]
	Vector DrawDebugGraphicsOffset;//[Offset: 0x7e4 , Size: 12]
	float ProbeRadius;//[Offset: 0x7f0 , Size: 4]
	float SpecialStatePitchLimitMin;//[Offset: 0x7f4 , Size: 4]
	float SpecialStatePitchLimitMax;//[Offset: 0x7f8 , Size: 4]
	float DefaultFieldOfView;//[Offset: 0x7fc , Size: 4]
	float WeaponOffsetDistance;//[Offset: 0x800 , Size: 4]
	function GetCameraView();// 0x146a550

--------------------------------
Class: FPPSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	CameraOffsetData InVehicleCameraData;//[Offset: 0x358 , Size: 28]
	Transform InVehicleCameraTrans;//[Offset: 0x380 , Size: 48]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x3b0 , Size: 28]
	function SetFPPCameraDataEnable();// 0x141841c

--------------------------------
Class: STScreenAppearanceComponentAdditional.STScreenAppearanceComponent.ActorComponent.Object
	FName ShaderUniformName;//[Offset: 0x150 , Size: 8]
	MaterialInstanceDynamic* currentMatInstanceDynamic;//[Offset: 0x194 , Size: 4]
	function StopScreenAppearanceWithTag();// 0x15703e4
	function PlayCustomScreenAppearanceWithTag();// 0x15701c4

--------------------------------
Class: FPPComponent_C.BaseFPPComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1d8 , Size: 4]
	function AttachSightLens();// 0x1ddc250
	function DetachSightLens();// 0x1ddc250
	function SwitchSightConfigMaterial();// 0x1ddc250
	function ShowReflectorSightTPPMaterial();// 0x1ddc250
	function GetScopeCameraAttachTarget();// 0x1ddc250
	function GetScopeFov();// 0x1ddc250
	function SetTagCullingBP();// 0x1ddc250
	function requestResourceGuarantee();// 0x1ddc250
	function SetTagCulling();// 0x1ddc250
	function PlayScopeInTimeline();// 0x1ddc250
	function StopScopeIn();// 0x1ddc250
	function AttachToSight();// 0x1ddc250
	function AttachTo();// 0x1ddc250
	function Detach();// 0x1ddc250
	function ReloadEvent();// 0x1ddc250
	function ScopeInEnd();// 0x1ddc250
	function ScopeOutEnd();// 0x1ddc250
	function AutoReloadEvent();// 0x1ddc250
	function ExecuteUbergraph_FPPComponent();// 0x1ddc250
	BP_PlayerPawn_C* PawnBP;//[Offset: 0x1dc , Size: 4]
	float DeltaTime;//[Offset: 0x1e0 , Size: 4]
	SkeletalMeshComponent* NewVar;//[Offset: 0x1e4 , Size: 4]
	StaticMesh* SightLens;//[Offset: 0x1e8 , Size: 4]

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0xcc , Size: 4]
	FName ScopeAimCameraSocketName;//[Offset: 0xd0 , Size: 8]
	FName FPPSocketName;//[Offset: 0xd8 , Size: 8]
	FName BoltActionCurveName;//[Offset: 0xe0 , Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0xe8 , Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0xf0 , Size: 4]
	float BoltActionFov;//[Offset: 0xf4 , Size: 4]
	float ScopeZoomAlpha;//[Offset: 0xf8 , Size: 4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0xfc , Size: 60]
	float ScopeZoomSpeed;//[Offset: 0x138 , Size: 4]
	<int,CurveFloat> ScopeZoomFovCurveMap;//[Offset: 0x13c , Size: 60]
	int CurrentPlayAnimIndex;//[Offset: 0x178 , Size: 4]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c , Size: 1]
	<FName,float> ScopeZoomMap;//[Offset: 0x190 , Size: 60]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0 , Size: 1]
	function UpdateScopeCameraOffsets();// 0x13d5624
	function SwitchSightConfigMaterial();// 0x1ddc250
	function SwitchScopeMeshAnim();// 0x13d55ac
	function SwitchCameraMode();// 0x13d5534
	function StopScopeIn();// 0x1ddc250
	function ShowReflectorSightTPPMaterial();// 0x1ddc250
	function SetTagCulling();// 0x1ddc250
	function SetScopeCVar();// 0x13d5520
	function ScopingChange();// 0x13d54a0
	function Scoping();// 0x13d5428
	function ScopeZoomUpdate();// 0x13d53b0
	function ScopeZoomTick();// 0x13d5338
	function ScopeZoomCalculate();// 0x13d5258
	function ScopeTimelineUpdate();// 0x13d51e0
	function ScopeOutSpeedChange();// 0x13d5124
	function ScopeOutLogic();// 0x13d5110
	function ScopeOutEnd();// 0x1ddc250
	function ScopeOut();// 0x13d5098
	function ScopeNotHandFold();// 0x13d5084
	function ScopeInterrupt();// 0x13d500c
	function ScopeInSpeedChange();// 0x13d4f50
	function ScopeInLogic();// 0x13d4f3c
	function ScopeInEnd();// 0x1ddc250
	function ScopeInContinue();// 0x13d4f28
	function ScopeInAfterTimeline();// 0x13d4f14
	function ScopeIn();// 0x13d4e9c
	function ScopeHandFold();// 0x13d4e88
	function RevertScopeCVarOnDie();// 0x13d4c8c
	function RevertScopeCVar();// 0x13d4c78
	function PlayScopeInTimeline();// 0x1ddc250
	function IsUseZoomScope();// 0x13d4c50
	function IsRPGScopeIn();// 0x13d4c28
	function IsCurWeaponAttachedAngledSight();// 0x13d4c00
	function IsAngledSight();// 0x13d4bd0
	function InitScopeZoom();// 0x13d4b14
	function GetSightType();// 0x13d4aec
	function GetScopeZoomValue();// 0x13d4a28
	function GetScopeZoomKey();// 0x13d495c
	function GetScopeFov();// 0x1ddc250
	function DetachSightLens();// 0x1ddc250
	function BoltAction();// 0x13d48e4
	function AttachToSight();// 0x1ddc250
	function AttachSightLens();// 0x1ddc250
	function ActiveComponentTickable();// 0x13d48d0

--------------------------------
Class: Vault_Controller_C.PlayerVaultComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc8 , Size: 4]
	function ResetVaultData();// 0x1ddc250
	function SetIsUseFpsVault();// 0x1ddc250
	function fpsVaultGetRotaion();// 0x1ddc250
	function SetFpsVaultSpeed();// 0x1ddc250
	function FpsVaultGetTppAnimationInfo();// 0x1ddc250
	function FpsGetTotalTime();// 0x1ddc250
	function FpsTestLimitPostion();// 0x1ddc250
	function FpsVaultTrigger();// 0x1ddc250
	function FpsVaultServerCheating();// 0x1ddc250
	function FpsVaultStart();// 0x1ddc250
	function FpsVaultGetNowPostion();// 0x1ddc250
	function FpsVualtUpdate();// 0x1ddc250
	function SetStopForwardDis();// 0x1ddc250
	function DealBrokenWindows();// 0x1ddc250
	function VaultFromCPP();// 0x1ddc250
	function CheckVaultWindows();// 0x1ddc250
	function EnableCulling();// 0x1ddc250
	function GetCliblastCheckDis();// 0x1ddc250
	function NowStateCheck();// 0x1ddc250
	function CheckNowisJumpAnimation();// 0x1ddc250
	function CheckIsValidByHeightCheckDis();// 0x1ddc250
	function IsValidVault();// 0x1ddc250
	function GetTestObjectChannels();// 0x1ddc250
	function UpdateMontageSpeed();// 0x1ddc250
	function ServerCheckBlockDis();// 0x1ddc250
	function GetNowOppSideDis();// 0x1ddc250
	function CheckUpLengthBlock();// 0x1ddc250
	function GetCrossMaxBlockDisOffsset();// 0x1ddc250
	function SetLimitPostion();// 0x1ddc250
	function CheckForward();// 0x1ddc250
	function CheckHeight();// 0x1ddc250
	function GetJumpLengthByHeight();// 0x1ddc250
	function printReason();// 0x1ddc250
	function PrintEnable();// 0x1ddc250
	function CacultLimitData();// 0x1ddc250
	function GetCrossMaxBlockDisForward();// 0x1ddc250
	function GetPlayerStartZ();// 0x1ddc250
	function GetCrossBlockMaxFallingHeight();// 0x1ddc250
	function ForwardTestObjectType();// 0x1ddc250
	function SetEnd();// 0x1ddc250
	function SetVaultData();// 0x1ddc250
	function UpdatePostion2();// 0x1ddc250
	function GetNowData();// 0x1ddc250
	function CheckCanVault();// 0x1ddc250
	function StartVault();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function JumpVault();// 0x1ddc250
	function VaultServer();// 0x1ddc250
	function vaultAll();// 0x1ddc250
	function jumpfromUI();// 0x1ddc250
	function VaultFail();// 0x1ddc250
	function UpdateVault_BluePrint();// 0x1ddc250
	function interrupted();// 0x1ddc250
	function vaultLeave();// 0x1ddc250
	function DsCheckStopVault();// 0x1ddc250
	function StopVault();// 0x1ddc250
	function FpsVaultToAll();// 0x1ddc250
	function FpsVaultServer();// 0x1ddc250
	function ExecuteUbergraph_Vault_Controller();// 0x1ddc250
	BP_PlayerPawn_C* PlayerPawn;//[Offset: 0xcc , Size: 4]
	float DeltaTime;//[Offset: 0xd0 , Size: 4]
	float NowBlockDis;//[Offset: 0xd4 , Size: 4]
	float NowBlockHeight;//[Offset: 0xd8 , Size: 4]
	float NowAfterBlockMaxFallingHeight;//[Offset: 0xdc , Size: 4]
	float NowCrossBlockMaxDis;//[Offset: 0xe0 , Size: 4]
	float NowBlockLength;//[Offset: 0xe4 , Size: 4]
	float maxCheckDis;//[Offset: 0xe8 , Size: 4]
	float MaxCheckOppSiteDis;//[Offset: 0xec , Size: 4]
	float UnActiveMaxAngle;//[Offset: 0xf0 , Size: 4]
	float MaxCheckHeight;//[Offset: 0xf4 , Size: 4]
	Actor* checkActor;//[Offset: 0xf8 , Size: 4]
	Vector PlayerStartPostion;//[Offset: 0xfc , Size: 12]
	Rotator PlayerRotation;//[Offset: 0x108 , Size: 12]
	Vector HitPoint;//[Offset: 0x114 , Size: 12]
	PrimitiveComponent* HitComponent;//[Offset: 0x120 , Size: 4]
	float CapsuleRadius;//[Offset: 0x124 , Size: 4]
	float CapsuleHalfHeight;//[Offset: 0x128 , Size: 4]
	Vector blockDir;//[Offset: 0x12c , Size: 12]
	VaultData NowVaultData;//[Offset: 0x138 , Size: 72]
	float MaxJumpLength;//[Offset: 0x180 , Size: 4]
	bool isjump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184 , Size: 1]
	float CountTime;//[Offset: 0x188 , Size: 4]
	bool IsVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c , Size: 1]
	byte NowDrawDebugType;//[Offset: 0x18d , Size: 1]
	float realStartTime;//[Offset: 0x190 , Size: 4]
	Vector DataStartpos;//[Offset: 0x194 , Size: 12]
	FString nowVaultKey;//[Offset: 0x1a0 , Size: 12]
	<FString,VaultData> vaultDataallMap;//[Offset: 0x1ac , Size: 60]
	bool isEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8 , Size: 1]
	float nowMaxX;//[Offset: 0x1ec , Size: 4]
	float nowMinFallingY;//[Offset: 0x1f0 , Size: 4]
	float realStartZ;//[Offset: 0x1f4 , Size: 4]
	float offsetSpeed;//[Offset: 0x1f8 , Size: 4]
	byte gunSlot;//[Offset: 0x1fc , Size: 1]
	Vector oppsiteHitPoint;//[Offset: 0x200 , Size: 12]
	Vector uphitPoint;//[Offset: 0x20c , Size: 12]
	bool IsPreUseMedicine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218 , Size: 1]
	float heightoffsetcheck;//[Offset: 0x21c , Size: 4]
	float HeightFowardCheck;//[Offset: 0x220 , Size: 4]
	float minVaultHeight;//[Offset: 0x224 , Size: 4]
	float nowAnimSpeed;//[Offset: 0x228 , Size: 4]
	float animSpeedChangeTime;//[Offset: 0x22c , Size: 4]
	float animChangegSpeedRate;//[Offset: 0x230 , Size: 4]
	bool ischangeMontageSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234 , Size: 1]
	vaultCheckRule[] checkRuleList;//[Offset: 0x238 , Size: 12]
	float laststandDis;//[Offset: 0x244 , Size: 4]
	float lastwalkDis;//[Offset: 0x248 , Size: 4]
	float lastsprintDis;//[Offset: 0x24c , Size: 4]
	[] VaultWindows;//[Offset: 0x250 , Size: 12]
	bool iswondowbroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c , Size: 1]
	float windowsbrokenoffsetdis;//[Offset: 0x260 , Size: 4]
	bool IsInStopVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264 , Size: 1]
	Vector PlayerStartDir;//[Offset: 0x268 , Size: 12]
	bool waitStopvaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x274 , Size: 1]
	float stopVaultOppDis;//[Offset: 0x278 , Size: 4]
	float AfterBlockMaxFallingHeightoffset;//[Offset: 0x27c , Size: 4]
	float FpsVaultSpeed;//[Offset: 0x280 , Size: 4]
	Vector FpsVaultStartPosition;//[Offset: 0x284 , Size: 12]
	Vector FpsvVaultTopoffsetPostion;//[Offset: 0x290 , Size: 12]
	Vector FpsVaultTopPosition;//[Offset: 0x29c , Size: 12]
	Vector FpsVaultEndPosition;//[Offset: 0x2a8 , Size: 12]
	bool FpsVaultIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4 , Size: 1]
	float FpsVaultMontangeTotalTime;//[Offset: 0x2b8 , Size: 4]
	FString FpsVaultMontageName;//[Offset: 0x2bc , Size: 12]
	float FpsVaultMontageTopTime;//[Offset: 0x2c8 , Size: 4]
	float FpsVaultCheckDis;//[Offset: 0x2cc , Size: 4]
	float FpsVaultCheckHeight;//[Offset: 0x2d0 , Size: 4]
	float FpsVaultCheckThick;//[Offset: 0x2d4 , Size: 4]
	bool NowIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8 , Size: 1]
	float FpsCheatingVaule;//[Offset: 0x2dc , Size: 4]
	float FpsMinHtight;//[Offset: 0x2e0 , Size: 4]
	FpsVaultData[] FpsVaultAnimationList;//[Offset: 0x2e4 , Size: 12]
	bool fpsisplayedcamerashake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0 , Size: 1]
	float fpsvaultshakeoffsetheight;//[Offset: 0x2f4 , Size: 4]
	Vector NewVar;//[Offset: 0x2f8 , Size: 12]

--------------------------------
Class: PlayerVaultComponent.ActorComponent.Object
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd , Size: 1]
	AnimMontage* VaultMontage;//[Offset: 0xc0 , Size: 4]
	AnimMontage* TeamVaultMontage;//[Offset: 0xc4 , Size: 4]
	function VaultFromCPP();// 0x1488698
	function UpdateVault_BluePrint();// 0x14018c0
	function GetVaultKeyByBlockHeight();// 0x1488588
	function GetRelicateRotator();// 0x1488540
	function FpsVaultToAll();// 0x14882fc
	function FpsVaultServer();// 0x14880b8

--------------------------------
Class: VaultData
	FString montageSectionName_7_0E6EFDD2441CFF562A032DAC952922CF;//[Offset: 0x0 , Size: 12]
	CurveFloat* upCurve_69_EB26D4B04E0BF112150F9DAEBC25B4F7;//[Offset: 0xc , Size: 4]
	CurveFloat* fowardCurve_31_D55B5E974DFC24E74019D6A31F141C7C;//[Offset: 0x10 , Size: 4]
	float blockdis_28_FAA34AE04D5F621CD5FA08B1C4D4B37E;//[Offset: 0x14 , Size: 4]
	float blockheight_27_6E4FCDFF4446BA2250C19BB28913EBD8;//[Offset: 0x18 , Size: 4]
	float blokcThicklength_70_9688AE2B4F2BEF79873A64A463F93E21;//[Offset: 0x1c , Size: 4]
	bool IsJump_18_602D0B664C933E0434EF71A8DFFDBD7F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	bool forceStartSync_39_921F70144A2C12C3A5C929BEE107315F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	float CountTime_44_F467486040D210D7A55E3A93FD62BD77;//[Offset: 0x24 , Size: 4]
	float playSpeed_50_D2F6C3D243B8799B4E0FE88E44823E6D;//[Offset: 0x28 , Size: 4]
	float speedChangeTime_58_14BE38BF403A2B6F8E94E387CB638965;//[Offset: 0x2c , Size: 4]
	float changeSpeedRate_61_5D150C9C4C80B4F16BD0EF8309AC2BEA;//[Offset: 0x30 , Size: 4]
	bool standState_63_6706D1D149B7C65CE7BCB0B80179A054;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]
	bool walkState_65_CABF0046484F703B4F0E4BA3AC9869C4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35 , Size: 1]
	bool SprintState_67_661945074C9AB243C7C7B98121DC76CC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36 , Size: 1]
	bool isPutUpGun_73_29CDC65141670209C60AC7B5423932FF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37 , Size: 1]
	float BreakWindowDelayTime_76_9869354F4F44910A229A82B65F612FF6;//[Offset: 0x38 , Size: 4]
	bool IsCancelable_78_298DE56E46F42A44C1EC8F9E8BA27BD0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	float MinCancelVTimer_84_5B6F3A36470D81814354F49C1D1C7B1B;//[Offset: 0x40 , Size: 4]
	float MaxCancelVTimer_85_94626C4447005BBF447CAE8AC5AEE74F;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: vaultCheckRule
	float checkHeight_2_1D446F924C9CBEF38F85E98E23C9A735;//[Offset: 0x0 , Size: 4]
	float standCheckDis_4_6FA8D6F44D0D081ED0F3788E1A234DF9;//[Offset: 0x4 , Size: 4]
	float walkCheckDis_6_A9F1514E4E30403EBE914D903334720A;//[Offset: 0x8 , Size: 4]
	float sprintCheckDis_8_FF31D1CF4AEB4B77FA132F9E1414F0B4;//[Offset: 0xc , Size: 4]

--------------------------------
Class: FpsVaultData
	float height_2_6778DFBB410A85EE91BEA6B781695021;//[Offset: 0x0 , Size: 4]
	FString montageName_7_CA242A584BEEC1452642F38AA6D6DBDC;//[Offset: 0x4 , Size: 12]
	float TimeLength_6_7FB8643042854CAE734259ADA01E6C94;//[Offset: 0x10 , Size: 4]
	bool isJunp_9_ACBB864A4F8D9AC4532F6A813ABF2CA8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	float movespeed_12_E5EBE4EE4240C619828D8BAC783C265D;//[Offset: 0x18 , Size: 4]
	float speedrate_15_62D9B9D84072A09B660969889D7617FC;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: BP_SwimController_C.PlayerSwimComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x130 , Size: 4]
	function EnterWater_BluePrint();// 0x1ddc250
	function BP_UnderWaterStateChanged();// 0x1ddc250
	function ExecuteUbergraph_BP_SwimController();// 0x1ddc250

--------------------------------
Class: BP_AutoAimingComponent_C.WeaponAutoAimingComponent.ActorComponent.Object
	function CheckSmoke();// 0x1ddc250
	function CanEnemeyRaycastReach();// 0x1ddc250
	byte DrawDebugType;//[Offset: 0x1130 , Size: 1]

--------------------------------
Class: CameraSettingComponent_C.ActorComponent.Object
	function SaveCurCameraSetting();// 0x1ddc250
	function LerpCameraSettings();// 0x1ddc250
	float Current Target Arm Length;//[Offset: 0xc0 , Size: 4]
	float CurrentCameraLagSpeed;//[Offset: 0xc4 , Size: 4]
	Vector CurrentSocketOffset;//[Offset: 0xc8 , Size: 12]

--------------------------------
Class: STR_CameraSetting
	float TargetArmLength_30_2007ABB34694949F7A9AC4BB2C7AE57D;//[Offset: 0x0 , Size: 4]
	float LagSpeed_34_CBFA29604D40F5BC431D969F9216FCF7;//[Offset: 0x4 , Size: 4]
	Vector SocketOffset_26_FD34F6424351327A3F447882FEBC198D;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xa0 , Size: 40]
	float blendTime;//[Offset: 0xc8 , Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc , Size: 1]
	AnimationAsset[] LobbyEnterEmoteAnimAssetList;//[Offset: 0xd0 , Size: 12]
	AnimationAsset[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0xdc , Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0xe8 , Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0xec , Size: 4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	AkAudioEvent[] MaleEmoteSoundStartEventList;//[Offset: 0xf4 , Size: 12]
	AkAudioEvent[] FemaleEmoteSoundStartEventList;//[Offset: 0x100 , Size: 12]
	function HandleUse();// 0x13bcb40
	function HandlePickup();// 0x13bc72c
	function HandleDrop();// 0x13bc238
	function HandleDisuse();// 0x13bc1b0
	function GetBackpackComponent();// 0x13bee98
	function CheckCanPickUp();// 0x13bedd4

--------------------------------
Class: BP_WateringArea_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2c0 , Size: 4]
	function OnAreaOverlapEnd();// 0x1ddc250
	function OnAreaOverlapBegin();// 0x1ddc250
	function StartDrop();// 0x1ddc250
	function UserConstructionScript();// 0x1ddc250
	function BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature();// 0x1ddc250
	function BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature();// 0x1ddc250
	function ShowAnimationButton();// 0x1ddc250
	function ServerDoWaterLogic();// 0x1ddc250
	function OnWateringUIChanged();// 0x1ddc250
	function DelayResetParticleCD();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function SpawnTreeParticle();// 0x1ddc250
	function CustomEvent();// 0x1ddc250
	function ExecuteUbergraph_BP_WateringArea();// 0x1ddc250
	StaticMeshComponent* ReplaceMesh;//[Offset: 0x2c4 , Size: 4]
	StaticMeshComponent* FormerMesh;//[Offset: 0x2c8 , Size: 4]
	SceneComponent* LoopParticlePoint;//[Offset: 0x2cc , Size: 4]
	AkComponent* Ak;//[Offset: 0x2d0 , Size: 4]
	BP_ProduceDropItemComponent_C* BP_ProduceDropItemComponent;//[Offset: 0x2d4 , Size: 4]
	SceneComponent* ParticleSpawnPoint;//[Offset: 0x2d8 , Size: 4]
	StaticMeshComponent* StaticMesh;//[Offset: 0x2dc , Size: 4]
	SphereComponent* Sphere;//[Offset: 0x2e0 , Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2e4 , Size: 4]
	ParticleSystemComponent* ParticleSystemRef;//[Offset: 0x2e8 , Size: 4]
	PlayerController[] WaterDoneList;//[Offset: 0x2ec , Size: 12]
	TimerHandle TimerHandle;//[Offset: 0x2f8 , Size: 8]
	int[] DropPlanIDList;//[Offset: 0x300 , Size: 12]
	bool bShowLoopParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	FString ShowButtonTextID;//[Offset: 0x310 , Size: 12]
	PaperSprite* ShowButtonPic;//[Offset: 0x31c , Size: 4]
	ParticleSystem* ParticleTrigger;//[Offset: 0x320 , Size: 4]
	Vector ParticleTriggerPos;//[Offset: 0x324 , Size: 12]
	ParticleSystem* ParticleLoop;//[Offset: 0x330 , Size: 4]
	Vector ParticleLoopPos;//[Offset: 0x334 , Size: 12]
	float ParticleLoopWait;//[Offset: 0x340 , Size: 4]
	AkAudioEvent* AudioTrigger;//[Offset: 0x344 , Size: 4]
	AkAudioEvent* AudioParticleLoop;//[Offset: 0x348 , Size: 4]
	AkAudioEvent* AudioLoop;//[Offset: 0x34c , Size: 4]
	bool IsCandle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350 , Size: 1]
	int ActivityButtonId;//[Offset: 0x354 , Size: 4]

--------------------------------
Class: BP_ProduceDropItemComponent_C.ProduceDropItemComponent.ActorComponent.Object
	function GetWrapperActorClass();// 0x1ddc250
	function GetWrapperTable();// 0x1ddc250
	function GetWrapperActorPath();// 0x1ddc250
	UAEDataTable* DataTableRef;//[Offset: 0x118 , Size: 4]

--------------------------------
Class: PaperSprite.Object
	Vector2D SourceUV;//[Offset: 0x24 , Size: 8]
	Vector2D SourceDimension;//[Offset: 0x2c , Size: 8]
	Texture2D* SourceTexture;//[Offset: 0x34 , Size: 4]
	Texture[] AdditionalSourceTextures;//[Offset: 0x38 , Size: 12]
	Vector2D BakedSourceUV;//[Offset: 0x44 , Size: 8]
	Vector2D BakedSourceDimension;//[Offset: 0x4c , Size: 8]
	Texture2D* BakedSourceTexture;//[Offset: 0x54 , Size: 4]
	MaterialInterface* DefaultMaterial;//[Offset: 0x58 , Size: 4]
	bool UseDefaultMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	MaterialInterface* AlternateMaterial;//[Offset: 0x60 , Size: 4]
	PaperSpriteSocket[] Sockets;//[Offset: 0x64 , Size: 12]
	byte SpriteCollisionDomain;//[Offset: 0x70 , Size: 1]
	float PixelsPerUnrealUnit;//[Offset: 0x74 , Size: 4]
	BodySetup* BodySetup;//[Offset: 0x78 , Size: 4]
	int AlternateMaterialSplitIndex;//[Offset: 0x7c , Size: 4]
	Vector4[] BakedRenderData;//[Offset: 0x80 , Size: 12]

--------------------------------
Class: PaperSpriteSocket
	Transform LocalTransform;//[Offset: 0x0 , Size: 48]
	FName SocketName;//[Offset: 0x30 , Size: 8]

--------------------------------
Class: Skill_Grenade_Frag_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	bool TriggerFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6 , Size: 1]
	enum PawnState;//[Offset: 0x3b7 , Size: 1]
	bool AutoEnterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8 , Size: 1]
	bool IsAddHealTimes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9 , Size: 1]
	bool IgnoreCanBePlayedCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bb , Size: 1]
	bool InteractiveSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc , Size: 1]
	function DelayLeaveStateForMelee();// 0x1584a00

--------------------------------
Class: UAEBaseSkill.UTSkill.Actor.Object
	delegate OnSkillCustomEvent;//[Offset: 0x3a8 , Size: 12]
	function OnEvent();// 0x1583610

--------------------------------
Class: Skill_Grenade_Stun_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Grenade_Smoke_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Grenade_Molotov_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Punch_Fist_bp_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Melee_Machete_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Melee_Cowbar_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Melee_Pan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Melee_Sickle_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_AdrenalineSyringe_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Bandage_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_EnergyDrink_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_FirstAidKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_GasCan_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_MedKit_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Painkiller_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Grenade_PoisonApple_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Melee_Dagger_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_FireLauncher_BP_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3c8 , Size: 4]

--------------------------------
Class: UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	float MaxCastDistance;//[Offset: 0x3b8 , Size: 4]
	float MinCastDistance;//[Offset: 0x3bc , Size: 4]

--------------------------------
Class: Skill_RapidAidbox_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_BoomCrossBowExplosion_C.UAEAISkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3c8 , Size: 4]

--------------------------------
Class: Skill_Grenade_Frozen_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Grenade_Colorful_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Grenade_AALocator_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: Skill_Maintenance_BP_C.UAESkill.UAEBaseSkill.UTSkill.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3e0 , Size: 4]

--------------------------------
Class: BP_PlayerState_C.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	SceneComponent* DefaultSceneRoot;//[Offset: 0xb50 , Size: 4]

--------------------------------
Class: SurviveGameState_C.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	AirAttackCS* AirAttackCS;//[Offset: 0x760 , Size: 4]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x764 , Size: 4]

--------------------------------
Class: AirAttackCS.TimerRegistComponent.ActorComponent.Object
	class STExtraExplosionEffect* ExplosionEffectTemplate;//[Offset: 0x104 , Size: 4]
	function OnAirAttack();// 0x1399474
	function DoBombHarmAtLocation();// 0x13993f0
	function AirAttackThrowBomb();// 0x1399378

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x2c0 , Size: 4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x2c4 , Size: 4]
	float NearToFarDistance;//[Offset: 0x2c8 , Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x2cc , Size: 4]

--------------------------------
Class: BP_VH_Buggy_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	function UserConstructionScript();// 0x1ddc250
	Buggy_UAEChaVehAnimList_Driver_C* Buggy_UAEChaVehAnimList_Driver;//[Offset: 0xca0 , Size: 4]
	Buggy_UAEChaVehAnimList_Passenger_C* Buggy_UAEChaVehAnimList_Passenger;//[Offset: 0xca4 , Size: 4]

--------------------------------
Class: BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc50 , Size: 4]
	function SetDMIParam();// 0x1ddc250
	function UpdateExhaustFx();// 0x1ddc250
	function OnClientVehicleHealthStateChanged();// 0x1ddc250
	function CreateDMI();// 0x1ddc250
	function UserConstructionScript();// 0x1ddc250
	function BndEvt__VehicleSeats_K2Node_ComponentBoundEvent_0_SeatAttachDelegate__DelegateSignature();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function OnSetTailLightValue();// 0x1ddc250
	function OnEngineStart();// 0x1ddc250
	function OnEngineStop();// 0x1ddc250
	function OnBoostingChanged();// 0x1ddc250
	function VehicleMeshChanged();// 0x1ddc250
	function BPPlayOverlapDamageCameraShake();// 0x1ddc250
	function ExecuteUbergraph_BP_STExtraWheeledVehicle();// 0x1ddc250
	VehicleAvatarComponent_BP_C* VehicleAvatarComponent_BP;//[Offset: 0xc54 , Size: 4]
	ParticleSystemComponent* PSCExhaust;//[Offset: 0xc58 , Size: 4]
	CameraComponent* Camera;//[Offset: 0xc5c , Size: 4]
	VehicleSpringArmComponent* vehicleSpringArm;//[Offset: 0xc60 , Size: 4]
	ParticleSystemComponent* PSCFire;//[Offset: 0xc64 , Size: 4]
	ParticleSystemComponent* PSCSmoke;//[Offset: 0xc68 , Size: 4]
	bool IsPlayingEngineAk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6c , Size: 1]
	MaterialInstanceDynamic* DMI;//[Offset: 0xc70 , Size: 4]
	MaterialInstance* VehicleMaterial;//[Offset: 0xc74 , Size: 4]
	FName TailLightParamName;//[Offset: 0xc78 , Size: 8]
	FName FrontLightParamName;//[Offset: 0xc80 , Size: 8]
	FName FPPBoostLightParamName;//[Offset: 0xc88 , Size: 8]
	bool bEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc90 , Size: 1]
	float LastOverlapShakeTime;//[Offset: 0xc94 , Size: 4]
	float OverlapShakeInterval;//[Offset: 0xc98 , Size: 4]
	bool bLobbyShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9c , Size: 1]

--------------------------------
Class: Buggy_UAEChaVehAnimList_Driver_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	VehCharAnimData[] VehCharAnimDataList;//[Offset: 0x13c , Size: 12]

--------------------------------
Class: VehCharAnimData
	byte VehAnimType;//[Offset: 0x0 , Size: 1]
	AnimationAsset* VehAnimSoftPtr;//[Offset: 0x8 , Size: 40]

--------------------------------
Class: Buggy_UAEChaVehAnimList_Passenger_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: VehicleAvatarComponent_BP_C.VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.SceneComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x420 , Size: 4]
	function GetItemAvatarHandlePath();// 0x1ddc250
	function GetItemAvatarHandle();// 0x1ddc250
	function OnLoaded_F4972C3D46F3CFC0E0742D8E88D4527B();// 0x1ddc250
	function ReceiveBeginPlay();// 0x1ddc250
	function VehicleAvatarEquiped();// 0x1ddc250
	function OnAddLightEffect();// 0x1ddc250
	function VehicleFPPMeshLoaded();// 0x1ddc250
	function LoadedBrokenMat();// 0x1ddc250
	function ExecuteUbergraph_VehicleAvatarComponent_BP();// 0x1ddc250
	ParticleSystem* CurLightEffect;//[Offset: 0x428 , Size: 40]
	ParticleSystemComponent* LightEffect;//[Offset: 0x450 , Size: 4]

--------------------------------
Class: VH_UAZ01_C.BP_STExtraWheeledVehicle_C.STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xca0 , Size: 4]
	function UserConstructionScript();// 0x1ddc250
	function OnBoostingChanged();// 0x1ddc250
	function ExecuteUbergraph_VH_UAZ01();// 0x1ddc250
	UAZ_UAEChaVehAnimList_PassenerL_C* UAZ_UAEChaVehAnimList_PassenerL;//[Offset: 0xca4 , Size: 4]
	UAZ_UAEChaVehAnimList_Driver_C* UAZ_UAEChaVehAnimList_Driver;//[Offset: 0xca8 , Size: 4]
	UAZ_UAEChaVehAnimList_PassenerR_C* UAZ_UAEChaVehAnimList_PassenerR;//[Offset: 0xcac , Size: 4]
	ParticleSystemComponent* PSCExhaust1;//[Offset: 0xcb0 , Size: 4]

--------------------------------
Class: UAZ_UAEChaVehAnimList_PassenerL_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAZ_UAEChaVehAnimList_Driver_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAZ_UAEChaVehAnimList_PassenerR_C.UAEChaVehAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
